<?xml version="1.0" encoding="ISO-8859-1"?>

<bugrepository name="wildfly-camel">
	<bug id="915" opendate="2015-10-19 15:14:31" fixdate="2015-10-19 16:23:02">
		<buginformation>
			<summary>Unable to configure Infinispan idempotent consumers</summary>
			<description>Attempting to use a Infinispan idempotent consumer results in:  ``` Caused by: java.lang.ClassNotFoundException: org.infinispan.commons.api.BasicCacheContainer from [Module "deployment.camel-infinispan-test.jar:main" from Service Module Loader]         at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:205)         at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:455)         at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:404)         at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:385)         at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:130)         ... 15 more  ``` </description>
		</buginformation>
		<fixedfiles>
			<file>itests/standalone/basic/src/main/java/org/wildfly/camel/test/infinispan/InfinispanIntegrationTest.java</file>
		</fixedfiles>
	</bug>
	<bug id="914" opendate="2015-10-19 15:10:18" fixdate="2015-10-19 16:01:04">
		<buginformation>
			<summary>Unable to configure JPA idempotent consumers</summary>
			<description>Depending on how things are configured you either get a warning or fatal exception caused by the following:   ``` Caused by: java.lang.NoClassDefFoundError: org/hibernate/proxy/HibernateProxy         at java.lang.ClassLoader.defineClass1(Native Method)         at java.lang.ClassLoader.defineClass(ClassLoader.java:760)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:497)         at javassist.util.proxy.FactoryHelper.toClass2(FactoryHelper.java:182)         at javassist.util.proxy.FactoryHelper.toClass(FactoryHelper.java:164)         ... 39 more Caused by: java.lang.ClassNotFoundException: org.hibernate.proxy.HibernateProxy from [Module "org.apache.camel.component.jpa:main" from local module loader @704d6e83 (finder: local module finder @43a0cee9] ``` </description>
		</buginformation>
		<fixedfiles>
			<file>itests/standalone/basic/src/main/java/org/wildfly/camel/test/jpa/JPAIdempotentConsumerIntegrationTest.java</file>
		</fixedfiles>
	</bug>
	<bug id="908" opendate="2015-10-19 08:21:02" fixdate="2015-10-19 10:34:43">
		<buginformation>
			<summary>Unable to configure JDBC idempotent consumers</summary>
			<description>If I try to do:  ``` xml     &lt;jee:jndi-lookup id="dataSource" jndi-name="java:jboss/datasources/ExampleDS" /&gt;      &lt;spring:bean id="messageIdRepository" class="org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository"&gt;         &lt;spring:constructor-arg ref="dataSource" /&gt;     &lt;/spring:bean&gt; ```  I get:  ``` Caused by: java.lang.NoClassDefFoundError: org/springframework/transaction/PlatformTransactionManager         at java.lang.Class.getDeclaredConstructors0(Native Method)         at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)         at java.lang.Class.getDeclaredConstructors(Class.java:2020)         at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:149)         ... 20 more Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.PlatformTransactionManager from [Module "org.apache.camel.component.sql:main" from local module loader @704d6e83 (finder: local module finder @43a0cee9  ``` </description>
		</buginformation>
		<fixedfiles>
			<file>itests/standalone/basic/src/main/java/org/wildfly/camel/test/sql/SQLIntegrationTest.java</file>
		</fixedfiles>
	</bug>
	<bug id="15" opendate="2014-10-22 11:48:05" fixdate="2014-10-23 07:26:28">
		<buginformation>
			<summary>Remove need to embed camel-cdi, deltaspike</summary>
			<description>Currently, there is a [webapp](https://github.com/tdiesler/wildfly-camel/blob/master/webapp/pom.xml#L41) deployed as part of the subsystem that contains  - camel-cdi  - deltaspike-core-api  - deltaspike-core-impl  - deltaspike-cdictrl-api  Same is true for the the [CDIIntegrationTest](https://github.com/tdiesler/wildfly-camel/blob/master/itests/src/test/java/org/wildfly/camel/test/cdi/CDIIntegrationTest.java#L97).  In both cases I would like to replace these embedded jars with references to the already existing modules.  WildFly Issue: https://issues.jboss.org/browse/WFLY-4009 </description>
		</buginformation>
		<fixedfiles>
			<file>itests/src/test/java/org/wildfly/camel/test/cdi/CDIIntegrationTest.java</file>
			<file>subsystem/src/main/java/org/wildfly/extension/camel/deployment/CamelDependenciesProcessor.java</file>
			<file>webapp/src/main/java/org/wildfly/camel/examples/cdi/SimpleServlet.java</file>
			<file>itests/src/test/java/org/wildfly/camel/test/cdi/subA/SimpleServlet.java</file>
		</fixedfiles>
	</bug>
<bugrepository>
