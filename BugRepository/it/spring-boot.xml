<?xml version="1.0" encoding="ISO-8859-1"?>

<bugrepository name="spring-boot">
	<bug id="13601" opendate="2018-06-27 12:24:12" fixdate="2018-07-13 07:28:03">
		<buginformation>
			<summary>Clean line breaks in configuration metadata descriptions</summary>
			<description>SB 2.0.3. RELEASE  has  ```     {       "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",       "defaultValue": 5,       "name": "spring.jta.atomikos.properties.recovery.max-retries",       "description": "Number of retry attempts to commit the transaction before throwing an\n exception.",       "type": "java.lang.Integer"     } ```  Clients as IDEs shouldn't need to escape/handle such linebreaks.</description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java</file>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java</file>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationsample/simple/DescriptionProperties.java</file>
		</fixedfiles>
	</bug>
	<bug id="11855" opendate="2018-01-31 03:19:17" fixdate="2018-02-02 11:25:37">
		<buginformation>
			<summary>redis sentinel default configuration broken</summary>
			<description>https://github.com/spring-projects/spring-boot/blob/d478e9bf57b73ca84539c0e9bfa82961256e50d9/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java#L88  https://github.com/spring-projects/spring-data-redis/blob/2fe048bfff856012f42aed9f702334bc5b7d28fd/src/main/java/org/springframework/data/redis/connection/jedis/JedisConnectionFactory.java#L275  Using springBoot with version `2.0.0.M6` and `redis.clients:jedis:2.9.0`,with config: ```yml spring:   redis:     sentinel:       nodes: 0.0.0.0:26379,0.0.0.0:26479,0.0.0.0:26579       master: mymaster ```  But Spring Boot not use sentinel config,but resolve to `localhost:6379`.By debugging I found the above code is the cause: **If the pool configuration is leave out,Spring Boot will resolve to `localhost:6379`**</description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java</file>
		</fixedfiles>
	</bug>
	<bug id="11793" opendate="2018-01-26 14:32:29" fixdate="2018-01-29 15:38:01">
		<buginformation>
			<summary>Revisit `LoggersEndpointAutoConfiguration` conditions</summary>
			<description>The `LoggersEndpointAutoConfiguration` currently has `LoggersEndpoint` as `@ConditionalOnBean(LoggingSystem.class)`. However, if Boot's logging configuration is disabled by setting `org.springframework.boot.logging.LoggingSystem` system property to `none` this will still result in `NoOpLoggingSystem` being registered, and in turn the `LoggersEndpoint` as well which will return just the  this:  ```json {     "levels": [         "OFF",         "FATAL",         "ERROR",         "WARN",         "INFO",         "DEBUG",         "TRACE"     ],     "loggers": {     } } ```  Arguably condition on `LoggersEndpoint` should be such that it doesn't match when Boot's logging configuration is disabled.</description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfigurationTests.java</file>
			<file>spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/logging/LoggersEndpointAutoConfiguration.java</file>
		</fixedfiles>
	</bug>
	<bug id="10846" opendate="2017-10-31 15:25:04" fixdate="2017-11-15 19:44:11">
		<buginformation>
			<summary>HikariCP not unable to serialize in /configprops</summary>
			<description>Hi,  I found that datasource bean unable to serialize when calling actuator endpoint /configprops.  ![image](https://user-images.githubusercontent.com/459124/32231077-3de0f422-be87-11e7-99cb-363352f7a53d.png)  application.properties ``` spring.datasource.url=jdbc:oracle:thin:@xxx.xxx.xxx.xxx:2992:xxxx spring.datasource.username= spring.datasource.password= spring.datasource.type=com.zaxxer.hikari.HikariDataSource  spring.datasource.hikari.connection-timeout=60000 spring.datasource.hikari.maximum-pool-size=32 spring.datasource.hikari.min-pool-size=2 spring.datasource.hikari.idle-timeout=90000 spring.datasource.hikari.leak-detection-threshold=60000 ``` pom.xml ``` &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.zaxxer&lt;/groupId&gt; &lt;artifactId&gt;HikariCP&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;oracle&lt;/artifactId&gt; &lt;version&gt;11.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; ```  After I debug, found that exception was throw from https://github.com/openbouquet/HikariCP/blob/d9f6eddadac19eb12cf08660fe20d0294ba3ca3e/src/main/java/com/zaxxer/hikari/util/DriverDataSource.java#L113 when try to serialize https://github.com/brettwooldridge/HikariCP/blob/4d484ea6358fa4b1727c28203f2b654bdfa20823/src/main/java/com/zaxxer/hikari/HikariDataSource.java#L127  Please give a suggestion.  BR, Korrawit  </description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java</file>
			<file>spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java</file>
		</fixedfiles>
	</bug>
	<bug id="8200" opendate="2017-02-06 06:28:38" fixdate="2017-02-07 11:03:57">
		<buginformation>
			<summary>Fix couchbase auto-configuration</summary>
			<description>This commit https://github.com/spring-projects/spring-data-couchbase/commit/d62f4bbe8c7d4aed544934ebf795aa1e90fcd8ed#diff-4564410042dc9bc9eb4fdd6680204b82 has broken things.  Looks like `SpringBootCouchbaseDataConfiguration` needs to extend `AbstractCouchbaseConfiguration` now. We also need a `getBootstrapHosts()` method (but I don't know what it should return).</description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java</file>
			<file>spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java</file>
			<file>spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataAutoConfigurationTests.java</file>
		</fixedfiles>
	</bug>
	<bug id="2118" opendate="2014-12-11 12:14:40" fixdate="2014-12-12 13:18:10">
		<buginformation>
			<summary>Funky meta-data name for upper case property</summary>
			<description>If for some reason you have a getter in all upper case, the generated lower-case counter part does not look right: `getFOOBAR()` becomes `f-o-o-b-a-r` </description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadataTests.java</file>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java</file>
		</fixedfiles>
	</bug>
	<bug id="1865" opendate="2014-11-10 17:04:25" fixdate="2014-11-11 05:54:59">
		<buginformation>
			<summary>JpaBaseConfiguration.configure() is never called</summary>
			<description>`JpaBaseConfiguration.configure()` is never called (I think it's an orphan from 1.0). </description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java</file>
			<file>spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/SystemPublicMetricsTests.java</file>
			<file>spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java</file>
		</fixedfiles>
	</bug>
	<bug id="1859" opendate="2014-11-08 18:22:13" fixdate="2014-11-11 07:06:32">
		<buginformation>
			<summary>Method-level configuration metadata not discovered</summary>
			<description>For some reason, the `config()` method of `RepositoryRestMvcBootConfiguration` is not handled as it should. The group is found and registered but no items are found in that object.  </description>
		</buginformation>
		<fixedfiles>
			<file>spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java</file>
		</fixedfiles>
	</bug>
<bugrepository>
