<?xml version="1.0" encoding="ISO-8859-1"?>

<bugrepository name="fastjson">
	<bug id="3334" opendate="2020-07-07 06:59:02" fixdate="2020-07-12 07:53:26">
		<buginformation>
			<summary>某一个field的类型不匹配导致整个对象反序列化不出来的问题</summary>
			<description>客户端和服务端在某一个协议字段定义类型不匹配或服务端赋值错误，导致客户端整个对象都反序列化不出来，比如客户端把某个字段定义为Int，服务端字段定义为String，如果这个字段被赋值了一个非数字的字符串，比如被赋值为“false”，客户端通过JSON.parseObject的时候，会抛cast error，这样整个对象都解析不出来，最佳解决方案是客户端和服务端定义的类型一致规避问题，但是fastjson能不能提供自动忽略某一个字段解析异常但是不影响这个对象其他字段正常解析的功能？  如果我问题没有描述清楚，请联系我钉钉：搏达   ，谢谢！</description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/util/TypeUtils.java</file>
			<file>src/test/java/com/alibaba/json/bvt/issue_3300/Issue3334.java</file>
		</fixedfiles>
	</bug>
	<bug id="1462" opendate="2017-09-08 08:59:05" fixdate="2017-10-01 16:41:57">
		<buginformation>
			<summary>kotlin，反序列化时，没有属性字段的set方法，不执行。求解决</summary>
			<description>序列化操作时，想隐藏字段。所以data class里属性设置为serialize =false。  ``` data class ObjectA(         @JSONField(serialize = false)         var a:String?="" ){     fun getB():String? = this.a     fun setB(v:String){         this.a = "b"     } }  fun testjson3(){     var a:ObjectA = ObjectA()     a.a = "c"     val json:String = JSON.toJSONString(a)     println(json)     val obj:ObjectA = JSON.parseObject(json, ObjectA::class.java)     println(obj) } ```  输出结果： ``` {"b":"c"} ObjectA(a=null) ```  toJSONString()的时候，执行了getB()方法。 parseObject()的时候，没有执行setB()这个方法。  使用的fastjson 版本是 1.2.37 kotlin版本是1.1.4-2  在java版本里这样子操作是正常的。kotlin不执行set方法。求解决！</description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/parser/JavaBeanInfo.java</file>
			<file>src/test/java/com/alibaba/json/bvt/kotlin/Issue1462.java</file>
		</fixedfiles>
	</bug>
	<bug id="1449" opendate="2017-08-31 15:41:36" fixdate="2017-09-01 14:06:19">
		<buginformation>
			<summary>对enum对象的序列化与反序列化</summary>
			<description>在对enum序列化时,实现JSONSerializable接口后,只有toJSONString方法有效,toJSON无效. 看了下代码,原因应该在于toJSON方法中的 if (clazz.isEnum()) { return ((Enum) javaObject).name(); }. 反序列化时,只能根据enum的name和ordinal去反序列化. fastjson version:1.2.37 test case: ```java public enum Sex implements JSONSerializable {  NONE("0","NONE"),MAN("1","男"),WOMAN("2","女"); private final String code; private final String des; private Sex(String code, String des) { this.code = code; this.des = des; }  public String getCode() { return code; }  public String getDes() { return des; }  @Override public void write(JSONSerializer serializer, Object fieldName, Type fieldType, int features) throws IOException {  JSONObject object = new JSONObject(); object.put("code", code); object.put("des", des); serializer.write(object);  } } public class Student implements Serializable {  /**  *   */ private static final long serialVersionUID = 3083987595140340233L;  private Long id;  private String name;  private Sex sex;         // getter and setter public static void main(String[] args) { Student student = new Student(); student.setName("name"); student.setId(1L); student.setSex(Sex.MAN); System.out.println(JSON.toJSON(student).toString()); System.out.println(JSON.toJSONString(student)); String str1 = "{\"id\":1,\"name\":\"name\",\"sex\":\"MAN\"}"; Student stu1 = JSON.parseObject(str1,Student.class); System.out.println(JSON.toJSONString(stu1)); String str2 = "{\"id\":1,\"name\":\"name\",\"sex\":{\"code\":\"1\",\"des\":\"男\"}}"; JSON.parseObject(str2, Student.class); } } ``` 输出: {"sex":"MAN","name":"name","id":1} {"id":1,"name":"name","sex":{"code":"1","des":"男"}} {"id":1,"name":"name","sex":{"code":"1","des":"男"}} Exception in thread "main" com.alibaba.fastjson.JSONException: parse enum ......</description>
		</buginformation>
		<fixedfiles>
			<file>src/test/java/com/alibaba/json/bvt/issue_1400/Issue1449.java</file>
			<file>src/main/java/com/alibaba/fastjson/JSON.java</file>
		</fixedfiles>
	</bug>
	<bug id="1363" opendate="2017-08-02 10:08:09" fixdate="2017-08-08 16:51:05">
		<buginformation>
			<summary>反序列化时对map对象的处理的问题</summary>
			<description>版本1.2.35，根据网友的http://blog.csdn.net/kkgbn/article/details/76349803 这个博客，问题仍旧在，问题出在DefaultJSONParser.handleResovleTask这个方法里，对于$ref这种，跟踪代码的时候都是扔ResovleTask交给DefaultJSONParser.handleResovleTask处理，问题原因就是对于$ref 指向前面map中的value时没有处理好，结果反序列化为null</description>
		</buginformation>
		<fixedfiles>
			<file>src/test/java/com/alibaba/json/bvt/issue_1300/Issue1363.java</file>
			<file>src/main/java/com/alibaba/fastjson/serializer/JavaBeanSerializer.java</file>
			<file>src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java</file>
			<file>src/main/java/com/alibaba/fastjson/JSONPath.java</file>
		</fixedfiles>
	</bug>
	<bug id="1265" opendate="2017-06-15 05:48:24" fixdate="2017-07-26 02:22:06">
		<buginformation>
			<summary>android版解析同样数据时，有时解析正确有时错误</summary>
			<description>fastjson： 1.1.58.android android：4.4.4 调用方式：`JSON.parseObject(json, mType)` 我们查看了会谈返回的json数据， fastjson解析错误与正确的时候，json完全一致。 type为：`new TypeReference&lt;A&lt;B&gt;&gt;() {}` 解析错误时，成功解析A对象，A下面的B只解析成JSONObject</description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/parser/DefaultFieldDeserializer.java</file>
			<file>src/test/java/com/alibaba/json/bvt/issue_1200/Isse1265.java</file>
		</fixedfiles>
	</bug>
	<bug id="1150" opendate="2017-04-18 12:44:39" fixdate="2019-07-11 06:06:11">
		<buginformation>
			<summary>如果一个字段有数据为数组，没数据为空字符串，我该如何解析</summary>
			<description>能不能类型错误的时候 ，给予null值，或者空数组，不要直接崩溃</description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/parser/ListTypeFieldDeserializer.java</file>
			<file>src/main/java/com/alibaba/fastjson/parser/deserializer/ArrayListTypeFieldDeserializer.java</file>
			<file>src/test/java/com/alibaba/json/bvt/issue_1100/Issue1150.java</file>
			<file>src/main/java/com/alibaba/fastjson/serializer/ObjectArrayCodec.java</file>
			<file>src/main/java/com/alibaba/fastjson/util/TypeUtils.java</file>
		</fixedfiles>
	</bug>
	<bug id="1089" opendate="2017-03-20 06:25:02" fixdate="2017-03-26 14:49:07">
		<buginformation>
			<summary>当json中有下划线和无下划线的相似属性名时解析结果有可能错误</summary>
			<description>json串中有两个属性，名称为ab和a_b，差别是一个有下划线而另一个没有，当解析对象时，如果对象的定义中只有ab一个属性，则解析出来的对象中ab的值可能会是json串中a_b属性的值，解析成哪个值跟json串中ab和a_b的顺序有关： ```java @Test public void parseTest() { String json = "{\"ab\":123,\"a_b\":456}"; TestBean tb = JSON.parseObject(json, TestBean.class); Assert.assertEquals(123, tb.getAb()); } private static class TestBean { private int ab; public int getAb() { return ab; } public void setAb(int ab) { this.ab = ab; } }  ``` 结果 java.lang.AssertionError: expected:&lt;123&gt; but was:&lt;456&gt;  测试在1.2.28，1.2.29中有此问题。</description>
		</buginformation>
		<fixedfiles>
			<file>src/test/java/com/alibaba/json/bvt/issue_1000/Issue1089.java</file>
			<file>src/test/java/com/alibaba/json/bvt/parser/deser/asm/TestASM_primitive.java</file>
			<file>src/test/java/com/alibaba/json/bvt/issue_1000/Issue1089_private.java</file>
			<file>src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java</file>
		</fixedfiles>
	</bug>
	<bug id="939" opendate="2016-12-07 09:52:33" fixdate="2016-12-20 02:06:43">
		<buginformation>
			<summary>带注释的json反序列化失败</summary>
			<description>```java { "isDebug":true/*调试状态*/ } ``` github星号显示不出来</description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java</file>
			<file>src/test/java/com/alibaba/json/bvt/bug/Issue939.java</file>
		</fixedfiles>
	</bug>
	<bug id="859" opendate="2016-10-17 02:06:46" fixdate="2016-10-20 06:13:55">
		<buginformation>
			<summary>parse解析超长字符串卡住 但gson不会 </summary>
			<description>【字符串太长 无法粘贴 请联系lw89491@alibab.inc.com获取】 </description>
		</buginformation>
		<fixedfiles>
			<file>src/main/java/com/alibaba/fastjson/parser/ParseContext.java</file>
			<file>src/test/java/com/alibaba/json/bvt/bug/Issue859.java</file>
		</fixedfiles>
	</bug>
	<bug id="735" opendate="2016-07-21 08:54:53" fixdate="2016-07-31 07:41:10">
		<buginformation>
			<summary>json的key值为字符串类型，但是当只含有数字和.的时候处理有问题</summary>
			<description>``` java String a = "{\"key\":\"value\",\"10.0.1.1\":\"haha\"}";          Object x = JSON.parse(a);         JSONPath.set(x, "$.test" , "abc");         Object o = JSONPath.eval(x, "$.10\\.0\\.1\\.1"); ```  异常: Exception in thread "main" java.lang.NumberFormatException: For input string: "10.0.1.1" </description>
		</buginformation>
		<fixedfiles>
			<file>src/test/java/com/alibaba/json/bvt/bug/Bug_for_issue_729.java</file>
			<file>src/test/java/com/alibaba/json/bvt/path/JSONPath_list_size.java</file>
			<file>src/test/java/com/alibaba/json/bvt/path/JSONPath_4.java</file>
			<file>src/test/java/com/alibaba/json/bvt/path/JSONPath_enum.java</file>
			<file>src/main/java/com/alibaba/fastjson/JSONPath.java</file>
			<file>src/test/java/com/alibaba/json/bvt/path/JSONPath_map_size.java</file>
		</fixedfiles>
	</bug>
<bugrepository>
