<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
<bug>
	<id>108</id>
	<title>XlsMapper#getConfiguration/setConfigurationの綴り間違いを修正</title>
	<body>#103 綴り間違いを修正 ``` Xlsmapper#getConiguration -&gt; Xlsmapper#getConfiguration Xlsmapper#setConiguration -&gt; Xlsmapper#setConfiguration ```</body>
	<created>2019-06-23 05:22:32</created>
	<closed>2019-06-23 05:32:18</closed>
</bug>
<bug>
	<id>103</id>
	<title>getConiguration/setConigurationのtypo修正</title>
	<body>|        誤       	|        正        	| |:---------------:	|:----------------:	| | getConiguration 	| getConfiguration 	| | setConiguration 	| setConfiguration 	|</body>
	<created>2019-06-03 14:44:18</created>
	<closed>2019-06-23 05:26:33</closed>
</bug>
<bug>
	<id>96</id>
	<title>POI-3.15でCellLink 型で、アドレスA1の形式を書き込むと例外が発生する。</title>
	<body>POI-3.15でCellLink 型で、アドレスA1の形式を書き込むと例外が発生する。  ``` java.lang.IllegalStateException: Invalid Hyperlink type: NONE 	at org.apache.poi.xssf.usermodel.XSSFHyperlink.validate(XSSFHyperlink.java:281) 	at org.apache.poi.xssf.usermodel.XSSFHyperlink.setAddress(XSSFHyperlink.java:255) 	at com.gh.mygreen.xlsmapper.cellconvert.converter.CellLinkCellConverter.toCell(CellLinkCellConverter.java:89) 	at com.gh.mygreen.xlsmapper.cellconvert.converter.CellLinkCellConverter.toCell(CellLinkCellConverter.java:1) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:1001) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:786) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:681) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:1) 	at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.saveProcess(FieldAdaptorProxy.java:65) 	at com.gh.mygreen.xlsmapper.XlsSaver.saveSheet(XlsSaver.java:302) 	at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:115) 	at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:67) 	at com.gh.mygreen.xlsmapper.XlsMapper.save(XlsMapper.java:339) 	at com.gh.mygreen.xlsmapper.cellconvert.LinkCellConverterTest.test_save_link(LinkCellConverterTest.java:337) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)  ```</body>
	<created>2016-12-24 11:05:29</created>
	<closed>2017-01-02 05:42:49</closed>
</bug>
<bug>
	<id>94</id>
	<title>POI-3.15でHorizontalRecordsで行の挿入を伴うレコードを書き込むと、結合が解除される。</title>
	<body>```@XlsHorizontalRecords(overRecord=OverRecordOperataion.Insert)``` で書き込むときに行の挿入を行うと、挿入した行よりもしたにある結合されたセルが解除される。 削除を行うときも同様。</body>
	<created>2016-12-23 11:02:28</created>
	<closed>2017-01-02 05:44:20</closed>
</bug>
<bug>
	<id>92</id>
	<title>POI-3.14でネストした表を出力する際に結合していると例外が発生する</title>
	<body>メソッド ``.HorizontalRecordsProcessor.processSavingNestedMergedRecord(...)`` で、結合しない（=結合する幅が1）のとき、例外が発生する。  ``` java.lang.IllegalArgumentException: Merged region D8 must contain 2 or more cells 	at org.apache.poi.xssf.usermodel.XSSFSheet.addMergedRegion(XSSFSheet.java:344) 	at org.apache.poi.xssf.usermodel.XSSFSheet.addMergedRegion(XSSFSheet.java:310) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.processSavingNestedMergedRecord(HorizontalRecordsProcessor.java:1432) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveNestedRecords(HorizontalRecordsProcessor.java:1358) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:1044) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveNestedRecords(HorizontalRecordsProcessor.java:1319) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:1044) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:773) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:681) 	at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:1) 	at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.saveProcess(FieldAdaptorProxy.java:65) 	at com.gh.mygreen.xlsmapper.XlsSaver.saveSheet(XlsSaver.java:302) 	at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:115) 	at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:67) 	at com.gh.mygreen.xlsmapper.XlsMapper.save(XlsMapper.java:339) 	at com.gh.mygreen.xlsmapper.fieldprocessor.AnnoHorizontalRecordsTest.test_save_hr_nestedRecords(AnnoHorizontalRecordsTest.java:2456) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:606) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)  ```</body>
	<created>2016-12-23 09:33:54</created>
	<closed>2017-01-02 05:43:59</closed>
</bug>
<bug>
	<id>89</id>
	<title>EL2使用時のNoClassDefFoundErrorを修正</title>
	<body>ExpressionLanguageELImpl が暗黙的に javax.el.BeanNameResolver に依存しており、 EL2.x のみを使用している時に ExpressionLanguageELImpl をインスタンス化しようとすると NoClassDefFoundError がスローされるため、EL2.x 用の実装クラスと EL3.x 用の実装クラスを分離しました。 </body>
	<created>2016-12-11 12:47:48</created>
	<closed>2017-01-02 05:43:23</closed>
</bug>
<bug>
	<id>87</id>
	<title>HorizontalRecordsで書き込む際に、表の直後に文字があると消えてしまう。</title>
	<body>`@XlsHorizontalRecords` で書き込む際に、表の直後に文字がある場合、挿入操作をすると、直後の文字が消えてしまう。 </body>
	<created>2016-10-30 08:02:39</created>
	<closed>2016-10-30 08:20:40</closed>
</bug>
<bug>
	<id>84</id>
	<title>Javadocの記述ミス。</title>
	<body>- `@XlsHorizontalRecords` の javadoc中の `&lt;ul&gt;`タグの閉じがない。 `&lt;p&gt;` タグの閉じもない。 - `@XlsEnumConverter` のjavadocの属性 `ignoreCase` が参照形式になっていない。 </body>
	<created>2016-08-30 09:19:09</created>
	<closed>2016-08-30 09:25:44</closed>
</bug>
<bug>
	<id>82</id>
	<title>XMLファイルによるマッピングが動作しないのではないでしょうか</title>
	<body>失礼いたします。  XlsLoaderの下記部分は直接クラスからアノテーションの情報を取得されていますが、 XMLファイルによるマッピングもサポートされるなら、 AnnotationReaderから取得しなければならないような気がしますが如何でしょうか。  ``` XlsLoader.java#L144 final XlsSheet sheetAnno = clazz.getAnnotation(XlsSheet.class); 　　　↓　 XlsSheet sheetAnno = annoReader.getAnnotation(clazz, XlsSheet.class); ```  的外れなようであれば申し訳ありません。&lt;(_  _)&gt; </body>
	<created>2016-06-28 14:43:12</created>
	<closed>2016-07-02 06:54:45</closed>
</bug>
<bug>
	<id>80</id>
	<title>外部XMLファイルによるマッピングが機能しない</title>
	<body>アノテーションで設定した値が外部Xmlで上書きできないです。 `AnnotationReaderTest.java` もテストがFail しているようです。  ``` @XlsSheet(name = "List") public class UserSheet {     @XlsLabelledCell(label = "Date", type = LabelledCellType.Right)     public Date createDate; }  ```  ``` &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;annotations&gt;     &lt;class name="com.example.xlsmapper.sample.UserSheet" override="true"&gt;         &lt;field name="createDate" override="true"&gt;           &lt;annotation name="com.gh.mygreen.xlsmapper.annotation.XlsLabelledCell"&gt;             &lt;attribute name="label"&gt;Label&lt;/attribute&gt;           &lt;/annotation&gt;         &lt;/field&gt;     &lt;/class&gt; &lt;/annotations&gt; ```  ``` public class First {     public static void main(String[] args) throws Exception {         XlsMapper xlsMapper = new XlsMapper();               UserSheet sheet = xlsMapper.load(First.class.getClassLoader().             getResourceAsStream("example.xlsx"),             UserSheet.class,             First.class.getClassLoader().getResourceAsStream("example.xml"));         System.out.println(sheet.toString());     } } ```  `XmlIO.java` の load で JAXB の unmarshal で空振りしているように見えます。  ```     public static XmlInfo load(final InputStream in) throws XmlOperateException {         ArgUtils.notNull(in, "in");          final XmlInfo xmlInfo;          try {             xmlInfo = JAXB.unmarshal(in, XmlInfo.class);         } catch (DataBindingException e) {             throw new XmlOperateException("fail load xml with JAXB.", e);         }          return xmlInfo;     }  ``` </body>
	<created>2016-04-26 06:04:19</created>
	<closed>2016-04-29 14:16:28</closed>
</bug>
<bug>
	<id>63</id>
	<title>v1.0を実行すると、coverturaの例外が発生する。</title>
	<body>v1.0をただし実行するだけで、実行時には必要のないCovertulaのクラスが見つからないエラーが発生する。  ``` Exception in thread "main" java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/TouchCollector     at com.gh.mygreen.xlsmapper.XlsMapper.__cobertura_init(XlsMapper.java)     at com.gh.mygreen.xlsmapper.XlsMapper.&lt;clinit&gt;(XlsMapper.java)     at proj.gren.sample.xlsmapper.SampleXlsMapper.main(SampleXlsMapper.java:16) Caused by: java.lang.ClassNotFoundException: net.sourceforge.cobertura.coveragedata.TouchCollector     at java.net.URLClassLoader$1.run(Unknown Source)     at java.net.URLClassLoader$1.run(Unknown Source)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(Unknown Source)     at java.lang.ClassLoader.loadClass(Unknown Source)     at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)     at java.lang.ClassLoader.loadClass(Unknown Source)     ... 3 more ``` </body>
	<created>2015-09-23 05:04:15</created>
	<closed>2015-09-23 05:33:14</closed>
</bug>
<bug>
	<id>60</id>
	<title>MessageInterpolatorでエスケープ文字が正しく処理できない。</title>
	<body>メッセージのフォーマットを行う、Messageinterpolatorでエスケープ文字が正しく処理できない。  ``` ${'Helo World\\}' + formatter.format('%1.1f', validatedValue)}は、{min}～${max}の範囲で入力してください。 ``` </body>
	<created>2015-07-05 05:12:01</created>
	<closed>2015-07-19 06:36:03</closed>
</bug>
<bug>
	<id>59</id>
	<title>@XlsHorizontalRecordsで書き込み時のGenericsのタイプ取得時に読み込み用のものを取得している。</title>
	<body> メソッドにアノテーションを付与したテストをしていないので行う必要がある。 - メソッドから取得する際に書き込み時に何も出力されない。 - `@XlsVerticalRecords` も同様に書き込み時に出力されない。 - `@XlsSheetName` の場合、書き込み時にシート名が設定されない。 - 各種Converterの処理の書き込み時において、 `@XlsConverter` を取得する際に、反映されない。 </body>
	<created>2015-07-05 01:54:07</created>
	<closed>2015-07-19 06:34:37</closed>
</bug>
<bug>
	<id>49</id>
	<title>@XlsHorizontalRecordsで書き込む際に入力規則の範囲修正が上手くいかない。</title>
	<body>入力規則の範囲を修正する際に、新しく規則を追加しているが、実際には更新または一旦削除してから追加し直す必要がある。 - 現象として、既存の規則が残ったままになり、行を追加／削除すると、入力規則の位置がおかしくなる。 - POIで行を削除しても入力規則の範囲はそのままなので、修正する必要がある。 - POIでは入力規則は、セルではなく、結合の用に別データとしてセルの範囲として持っている。 </body>
	<created>2015-06-11 06:13:42</created>
	<closed>2015-06-28 17:41:23</closed>
</bug>
<bug>
	<id>48</id>
	<title>@XlsHorizontalRecordsで書き込む先に余分な行を削除するときに、1回多く削除してしまう。</title>
	<body>@XlsHorizontalRecords(remainedRecord=RemainedRecordOperate.Delete)で書き込む先に余分な行を削除するときに、1回多く削除してしまう。 - セルの値をクリアする場合も同様。この場合、@XlsVerticalRecordsの場合も同じ。 </body>
	<created>2015-06-10 11:31:14</created>
	<closed>2015-06-28 17:39:38</closed>
</bug>
<bug>
	<id>47</id>
	<title>@XlsHorizontalRecordsで配列型を書き込むときにレコードが書き出されない。</title>
	<body>@XlsHorizontalRecordsで配列型を書き込むときに、データが設定されているにもかかわらずレコードが書き出されない。 - @XlsVertiacalRecordsの時でも同様に書き込まれない。 - @XlsIterateTablesの時も同様に書き込まれない。 </body>
	<created>2015-06-08 14:23:35</created>
	<closed>2015-06-28 17:38:34</closed>
</bug>
<bug>
	<id>46</id>
	<title>@XlsHoritonralRecordsで書き込む場合、セルの結合を行うとファイルが壊れる。</title>
	<body>@XlsHoritonralRecords内のレコードクラスのプロパティにおいて、@XlsColumn(merged=true)を設定している場合、結合するときファイルを出力すると、Excelで開いたときにファイルの修復メッセージが表示される。 </body>
	<created>2015-06-08 13:38:17</created>
	<closed>2015-06-28 17:29:49</closed>
</bug>
<bug>
	<id>45</id>
	<title>@XlsHorizontalRecords(terminal=RecordTerminal.Empty)だとレコードが書き込まれない。</title>
	<body>@XlsHorizontalRecords(terminal=RecordTerminal.Empty)の場合、レコードを設定していても、書き込まれない。 - 読み込み時には表の終端を判定する際に、セルの値が空であることに意味があるが、書き込む際にはテンプレート用のセルは空を設定しているため、処理が終了してしまう。 - 書き込む際には、terminalの値がRecordTerminal.Emptyの場合、RecordTerminal.Borderに補正して処理する。 </body>
	<created>2015-06-06 14:37:08</created>
	<closed>2015-06-28 17:36:23</closed>
</bug>
<bug>
	<id>43</id>
	<title>@XlsLabelledCellで書き込む際に、書き込み先が見つからない場合にNPEが発生する。</title>
	<body>@XlsLablelledCell(label="あいう", optional=true)で指定したらラベルが見つからない場合は、何もしないはずがNPEが発生する。 - optional=falseの場合は、例外CellNotFoundがスローされ、問題なし。 </body>
	<created>2015-06-06 06:42:48</created>
	<closed>2015-06-28 17:18:24</closed>
</bug>
<bug>
	<id>42</id>
	<title>@XlsVerticalRecordsで属性headerAddressを指定していても反映されない。</title>
	<body>@XlsVeritalRecords(headerAddress='A2')を指定していても反映されない。 </body>
	<created>2015-06-06 01:20:29</created>
	<closed>2015-06-28 17:15:41</closed>
</bug>
<bug>
	<id>41</id>
	<title>集合型を書き込む時にnullを設定するとNullPointerExceptionが発生する。</title>
	<body>Set（集合）を書き込む場合、NullPointerExceptionが発生する。  ``` java java.lang.IllegalArgumentException: targetClass should not be null.     at com.gh.mygreen.xlsmapper.ArgUtils.notNull(ArgUtils.java:23)     at com.gh.mygreen.xlsmapper.Utils.convertToObject(Utils.java:1719)     at com.gh.mygreen.xlsmapper.cellconvert.converter.ListCellConverter.convertList(ListCellConverter.java:72)     at com.gh.mygreen.xlsmapper.cellconvert.converter.SetCellConverter.toCell(SetCellConverter.java:93)     at com.gh.mygreen.xlsmapper.cellconvert.converter.SetCellConverter.toCell(SetCellConverter.java:52)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:695)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:468)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:1)     at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.saveProcess(FieldAdaptorProxy.java:65)     at com.gh.mygreen.xlsmapper.XlsSaver.saveSheet(XlsSaver.java:282)     at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:114)     at com.gh.mygreen.xlsmapper.XlsSaver.save(XlsSaver.java:67)     at com.gh.mygreen.xlsmapper.XlsMapper.save(XlsMapper.java:191)     at com.gh.mygreen.xlsmapper.cellconvert.CollectionCellConveterTest.test_save_collection(CollectionCellConveterTest.java:262)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ``` </body>
	<created>2015-05-27 06:50:10</created>
	<closed>2015-06-28 17:14:38</closed>
</bug>
<bug>
	<id>40</id>
	<title>char型を書き込む時に初期値'\u000'で書き込むとExcel上で文字化けする。</title>
	<body>fix v0.5 - char型を書き込む時に、’\u000’は、空白と判断して、空セルとして書き込む。 - char型の場合、書き込む時に初期値が2文字以上あってもそのまま書き込まれるため、先頭の1文字のみ書き込むよう修正。 </body>
	<created>2015-05-27 06:32:37</created>
	<closed>2015-06-28 17:12:52</closed>
</bug>
<bug>
	<id>39</id>
	<title>書き込むときにアノテーションに設定した初期値が不正な場合の処理の改善。</title>
	<body>@XlsConverter(defaultValue="aaaa")で設定した初期値で、書き込むときにその値が不正な場合、ConverterExceptionをスローしているが、TypeBindExceptionをスローするように修正する。 - XlsMapperConfig#setSkipTypeBindFailure(true)にて無視ができるようにする。 </body>
	<created>2015-05-27 05:36:01</created>
	<closed>2015-06-28 17:09:09</closed>
</bug>
<bug>
	<id>34</id>
	<title>@XlsHorizontalRecordsで見出しセルを結合している場合、正しく値が取得できない。</title>
	<body>@XlsHorizontalRecordsのレコードのカラムに、見出しセルを結合してしている場合、一方のセルが正しく取得できない。 - 下記の例で、フィールドmailにtelの値が設定される。 - プログラムのロジックを見ると、結合している列分、ループが余計に実行されている。  ``` java private static class HeaderMergedRecord {          @XlsColumn(columnName="氏名")         private String name;          @XlsColumn(columnName="連絡先")         private String mail;          @XlsColumn(columnName="連絡先", headerMerged=1)         private String tel;      } ``` </body>
	<created>2015-05-15 13:27:38</created>
	<closed>2015-06-28 16:55:22</closed>
</bug>
<bug>
	<id>33</id>
	<title>@XlsSheet(number=2)でシート番号を指定してもSheetNotFoundExceptionがスローされる。</title>
	<body>@XlsSheet(numbe=2)で正しいシート番号を指定しても、SheetNotFoundExceptionがスローされる。 </body>
	<created>2015-05-11 03:49:48</created>
	<closed>2015-06-28 16:53:13</closed>
</bug>
<bug>
	<id>32</id>
	<title>@XlsLabelledCellでセルの値が空のときに、アドレスが正しく取得できない。</title>
	<body>@XlsLaelledCellで値が設定されているセルの値が空のときに、Map&lt;String, Position&gt; positionsフィールドにてセルの位置を設定する際に、値が見出しのセルのアドレスになっている。 </body>
	<created>2015-05-10 07:19:17</created>
	<closed>2015-06-28 16:51:15</closed>
</bug>
<bug>
	<id>31</id>
	<title>@XlsLabelledCellに、range、skip、headerLabelを指定した場合、NPEが発生する。</title>
	<body>- @XlsLabelledCellに、属性headerLabelを指定し、Excel中にheaderLabelで指定したセルを横に定義した場合、左側の間違った値が取得されてしまう。 - 属性skipとrangeを指定していると、NPEが発生する。 </body>
	<created>2015-05-10 06:17:31</created>
	<closed>2015-06-28 16:47:53</closed>
</bug>
<bug>
	<id>29</id>
	<title>@XlsLabelledCell(optional=true)にしている場合NullPointerExcepionが発生する</title>
	<body>@XlsLabelledCell(label="XXX", optional=true)と設定し、実際に指定したラベルが見つからない場合、NullPointerExceptionが発生する。  ``` java java.lang.NullPointerException     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.LabelledCellProcessor.loadProcess(LabelledCellProcessor.java:36)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.LabelledCellProcessor.loadProcess(LabelledCellProcessor.java:1)     at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.loadProcess(FieldAdaptorProxy.java:61)     at com.gh.mygreen.xlsmapper.XlsLoader.loadSheet(XlsLoader.java:440)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:157)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:105)     at com.gh.mygreen.xlsmapper.XlsMapper.load(XlsMapper.java:90)     at  ``` </body>
	<created>2015-05-09 06:16:14</created>
	<closed>2015-06-28 16:39:00</closed>
</bug>
<bug>
	<id>27</id>
	<title>リスト型にマッピングする際に、空の項目をスキップする際にトリム処理の判定が適用されない。</title>
	<body>リスト型にマッピングする際に、トリム処理が有効でかつ各項目のが空の場合無視する処理が有効な場合、空の項目を無視するかどうかの判定にトリム処理が反映されない。  ``` java @XlsConverter(trim=true) @XlsArrayConverter(ignoreEmptyItem=true) List&lt;String&gt; list ``` </body>
	<created>2015-05-06 05:34:45</created>
	<closed>2015-06-28 16:37:04</closed>
</bug>
<bug>
	<id>25</id>
	<title>文字列型のセルをjava.util.Date型にマッピングする際に、@XlsDateConverterを指定しないとエラーとなる。</title>
	<body>@XlsDateConverterで書式を指定しない場合、文字列型のセルをjava.util.Date型にマッピングすると例外が発生する。  ``` java com.gh.mygreen.xlsmapper.AnnotationInvalidException: Anotation '@null' attribute 'pattern' should be not empty.     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractDateCellConverter.createDateFormat(AbstractDateCellConverter.java:95)     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractDateCellConverter.toObject(AbstractDateCellConverter.java:70)     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractDateCellConverter.toObject(AbstractDateCellConverter.java:1)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadRecords(HorizontalRecordsProcessor.java:260)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadProcess(HorizontalRecordsProcessor.java:91)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadProcess(HorizontalRecordsProcessor.java:1)     at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.loadProcess(FieldAdaptorProxy.java:61)     at com.gh.mygreen.xlsmapper.XlsLoader.loadSheet(XlsLoader.java:440)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:157)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:105)     at com.gh.mygreen.xlsmapper.XlsMapper.load(XlsMapper.java:90)     at com.gh.mygreen.xlsmapper.cellconvert.DateTimeCellConverterTest.test_load_date_time(DateTimeCellConverterTest.java:60)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ``` </body>
	<created>2015-05-05 01:59:37</created>
	<closed>2015-06-28 16:17:00</closed>
</bug>
<bug>
	<id>24</id>
	<title>数値型にマッピングする際に、最大値/最小値を設定してもエラーにならない。</title>
	<body>shortに最大値+1(32768)を設定してもエラーとならず、オーバーフローを起こして、「-32768」となる。 バインディングエラーとすべき。 </body>
	<created>2015-05-04 01:14:40</created>
	<closed>2015-06-28 08:31:11</closed>
</bug>
<bug>
	<id>23</id>
	<title>文字列型のセルに数値を入力し数値として取り込む場合、エラーが発生する。</title>
	<body>文字列型の負の数（-12.34）をJavaのdouble型にマッピングする場合、エラーが発生する。  ``` java com.gh.mygreen.xlsmapper.cellconvert.TypeBindException: Fail conversion field value '-12.34' =&gt; type 'double'. Cell 'F20' map to 'com.gh.mygreen.xlsmapper.cellconvert.CellConvertNumberTest$PrimitiveRecord#d'.     at com.gh.mygreen.xlsmapper.cellconvert.AbstractCellConverter.newTypeBindException(AbstractCellConverter.java:39)     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractNumberCellConverter.toObject(AbstractNumberCellConverter.java:72)     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractNumberCellConverter.toObject(AbstractNumberCellConverter.java:1)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadRecords(HorizontalRecordsProcessor.java:260)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadProcess(HorizontalRecordsProcessor.java:91)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.loadProcess(HorizontalRecordsProcessor.java:1)     at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.loadProcess(FieldAdaptorProxy.java:61)     at com.gh.mygreen.xlsmapper.XlsLoader.loadSheet(XlsLoader.java:440)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:157)     at com.gh.mygreen.xlsmapper.XlsLoader.load(XlsLoader.java:67)     at com.gh.mygreen.xlsmapper.XlsMapper.load(XlsMapper.java:60)     at com.gh.mygreen.xlsmapper.cellconvert.CellConvertNumberTest.test_load_number(CellConvertNumberTest.java:58)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.text.ParseException: '-12.34' cannot less than 0.000000     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractNumberCellConverter.parseNumber(AbstractNumberCellConverter.java:171)     at com.gh.mygreen.xlsmapper.cellconvert.converter.AbstractNumberCellConverter.toObject(AbstractNumberCellConverter.java:70)     ... 36 more  ``` </body>
	<created>2015-05-04 00:44:41</created>
	<closed>2015-06-28 08:18:43</closed>
</bug>
<bug>
	<id>19</id>
	<title>2003形式のExcelを書き込む場合、セルの取得時に例外が発生する。</title>
	<body>java.lang.NullPointerException     at com.gh.mygreen.xlsmapper.POICellFormatter.getNumericCellValue(POICellFormatter.java:165)     at com.gh.mygreen.xlsmapper.POICellFormatter.format(POICellFormatter.java:55)     at com.gh.mygreen.xlsmapper.POIUtils.getCellContents(POIUtils.java:234)     at com.gh.mygreen.xlsmapper.POIUtils.isEmptyCellContents(POIUtils.java:262)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveRecords(HorizontalRecordsProcessor.java:574)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.HorizontalRecordsProcessor.saveProcess(HorizontalRecordsProcessor.java:458)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.IterateTablesProcessor.saveMultipleHorizontalTableCell(IterateTablesProcessor.java:388)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.IterateTablesProcessor.saveTables(IterateTablesProcessor.java:313)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.IterateTablesProcessor.saveProcess(IterateTablesProcessor.java:257)     at com.gh.mygreen.xlsmapper.fieldprocessor.processor.IterateTablesProcessor.saveProcess(IterateTablesProcessor.java:1)     at com.gh.mygreen.xlsmapper.FieldAdaptorProxy.saveProcess(FieldAdaptorProxy.java:65) </body>
	<created>2015-01-29 06:39:26</created>
	<closed>2015-04-05 03:37:39</closed>
</bug>
<bug>
	<id>18</id>
	<title>コメントを含むシートを書き込むと、Excelで開くと不正なデータのエラーが出る。</title>
	<body>・2007形式のコメントを含むシートを書き込むと、Excelで開くと警告が出て、修復する必要がある。  POI-3.10以上だと発生し、POI-3.9以下だと発生しない。  ・さらに、2003形式のコメントを含むシートを書き込む場合、HoritonzalRecordsで行を挿入するケースの場合、NullPointerExceptionが発生する。 </body>
	<created>2015-01-29 06:37:30</created>
	<closed>2015-04-05 03:38:12</closed>
</bug>
<bug>
	<id>17</id>
	<title>書き込み時のハイパーリンクの処理の改善</title>
	<body>書き込み時に既存のセルにハイパーリンクが設定されていると、リンクが書き換わらない場合があるため、 一旦削除してから設定する。 </body>
	<created>2015-01-29 05:44:45</created>
	<closed>2015-04-05 03:38:12</closed>
</bug>
<bug>
	<id>11</id>
	<title>isから始まるboolean型のgetterメソッドにアノテーションを付与しても無視される。</title>
	<body></body>
	<created>2014-12-31 03:35:04</created>
	<closed>2014-12-31 04:06:59</closed>
</bug>
<bug>
	<id>9</id>
	<title>CellFieldで属性エラーがある場合でも必須チェックが実行される。</title>
	<body>シートの読み込み時にセルに対してエラーが発生した場合、CellFieldを利用した値の検証はスキップされるはずがされない。 ・validateメソッド内で、既存のエラーがあるかどうかの判定の際にパスの組み立てが間違っている。  ---  ``` public CellField&lt;T&gt; validate(final SheetBindingErrors errors) {     ArgUtils.notNull(errors, "errors");     // ↓既存のメソッド、hasErrorsを呼ぶべき。     final String fieldPath = errors.buildFieldPath(getName());     if(errors.hasFieldErrors(fieldPath)) {         // 既にフィールドに対するエラーがある場合         return this;     } ```  --- </body>
	<created>2014-12-31 02:54:46</created>
	<closed>2014-12-31 02:58:07</closed>
</bug>
<bug>
	<id>7</id>
	<title>読み込みの際に、Excel関数が使用されているとIllegalStateExceptionが発生する。</title>
	<body>POICellFormatterの式が設定されているセルの処理が、数値として処理されているため。 </body>
	<created>2014-12-20 01:33:22</created>
	<closed>2015-01-01 02:59:24</closed>
</bug>
<bug>
	<id>6</id>
	<title>入力値検証の際に変数の値がnullにしているとNPEが発生する。</title>
	<body>MessageInterpolatorに渡す、マップの変数の項目がnullの場合、NPEが発生する。 </body>
	<created>2014-12-01 13:51:19</created>
	<closed>2014-12-01 14:09:21</closed>
</bug>
<bug>
	<id>5</id>
	<title>書き込み時に、リストのトリムが有効にならない。</title>
	<body>List、Array、Setの場合、書き込み時にトリム設定が有効にならない。  @XlsConverter(trim="true) private List&lt;String&gt; list; </body>
	<created>2014-12-01 13:45:29</created>
	<closed>2014-12-01 14:09:21</closed>
</bug>
<bug>
	<id>2</id>
	<title>@XlsHorizontalRecordsに、Set型を使用すると例外が発生する。</title>
	<body>NullPointerExceptionが発生する。 </body>
	<created>2014-11-25 10:59:30</created>
	<closed>2014-11-25 11:17:36</closed>
</bug>
<bug>
	<id>1</id>
	<title>ExpressionLanguageELImplが、Spring-expression依存になっている</title>
	<body>Java-EL用のExpressionLanguageELImplを解析するクラスなのに、spring-expression用のクラスが読み込まれている。 例外ExpressionExceptionではなく、ELExceptionを使用するべき。 </body>
	<created>2014-11-25 10:55:31</created>
	<closed>2014-11-25 11:17:48</closed>
</bug>
</bugs>
