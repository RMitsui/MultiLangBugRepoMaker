<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>315</id>
		<title>RTC.xmlが正常に保存できない</title>
		<body>**Describe the bug** 1. コード生成したときにRTC.xmlが保存されていないことがある 2. RTC.xmlを保存しようとしたときに以下の画面が表示される場合がある ![image](https://user-images.githubusercontent.com/6216077/82802679-3e076880-9eba-11ea-8f72-a305b581e3fe.png)  **To Reproduce** Steps to reproduce the behavior: 1. RTCBuilderでコンポーネント名等を入力 2. コード生成ボタンを押す 3. 1の問題発生 4. RTC.xmlを編集 5. Ctrl+Sでファイルを保存 6. 2の問題発生  **Reproducibility** 100％  **Expected behavior** 正常に保存できるようにする  **Screenshots or Logs**   **Environment**  - OS: Windows  - OpenRTM-aist master branch  **Additional context**  </body>
		<created>2020-05-25 10:08:36</created>
		<closed>2020-06-07 05:13:12</closed>
	</bug>
	<bug>
		<id>312</id>
		<title>1.2と2.0のRTCを接続するとsubsc typeに1.2でサポートしないtypeが現れる</title>
		<body>**Describe the bug**  1.2と2.0のRTCを接続するとsubscription typeに1.2でサポートしないtypeが現れる。  **Expected behavior**  PortProfileが申告するSubscription typeは - 1.2: flush, new, periodic - 2.0: block, flush, new, nonblock, periodic が設定されているが、両者のANDをとって、ConnectorProfileダイヤログには  { flush, new, periodic } のみ表示されるべき。  その他のPortProfileについても、同様に両者のANDを表示するかどうかアルゴリズムを見直す。  **Environment**  - OS: Mac OS X (RTC 1,2, 2.0), Windows (RTSE 1.2.1)   </body>
		<created>2020-05-21 13:29:25</created>
		<closed>2020-05-23 08:19:11</closed>
	</bug>
	<bug>
		<id>311</id>
		<title>2.0 (master) でポート接続する際defaultのsubscription typeがblockになる</title>
		<body>**Describe the bug** 2.0 (master) のOpenRTMでポート接続する際に、ConnectorProfileのダイヤログの subscription typeがデフォルトで block になっている。以前の挙動と合わせるために flush にする。  **Environment**  - OS: Mac OS X (RTC), Windows (RTSE 1.2.1)  - OpenRTM-aist Version 2.0  </body>
		<created>2020-05-21 13:13:39</created>
		<closed>2020-05-26 13:28:58</closed>
	</bug>
	<bug>
		<id>310</id>
		<title>Configuration変更ダイアログのスライダーで0.01刻みが動作しない</title>
		<body>**Describe the bug** RTSEのConfiguration編集ダイアログにて、0.01刻みのスライダー設定を持つRTCを操作すると、刻みが 0.1になり、かつ、スライダー両端の◀▶ボタンでの上下操作を受け付けない。  **To Reproduce** Steps to reproduce the behavior: 1. 0.01刻み幅を持つスライダーRTCを起動 2. RTSEのConfiguration編集ダイアログを開く 3. スライダーバーを操作 → 0.1刻みで値が変動 4. 両端の値変更ボタンを操作 → 操作は受け付けられず値も変更されない  **Reproducibility** 100%  **Expected behavior** RTCBで設定した任意の刻み幅でスライダーを変更できるようにする。   **Environment**  - OS: Windows 10  - OpenRTM-aist Version 1.2.1  </body>
		<created>2020-05-18 18:06:17</created>
		<closed>2020-05-26 13:30:42</closed>
	</bug>
	<bug>
		<id>287</id>
		<title>RTSystemEditorでSave Asでファイル名の指定ができない。</title>
		<body>**Describe the bug** UbuntuでOpenRTPを実行し、RTSystemEditorを起動して作業をして何等かの手順で「Save As」を選らんで開くダイアログから「参照」ボタンを押すとダイアログを開いた場合、そのダイアログにファイル名を指定する場所がないのでファイル名が指定できないため、既存のファイルへの上書きしかできない。(前もって空ファイルを作るか）参照せずにファイルを指定するしかない。  **To Reproduce** Ubuntu 18.04でOpenRTPをインストールし、それが使える環境で 1. ターミナルを開く 2. openrtpと入力しEnterキーを押す 3. ワークスペースの選択等をしてOpenRTPを起動する 4. パースペクティブから[RT System Editor]を選び、RTSystemEditorを起動する。 5. 上方のアイコンメニューより[Open New System Editor]をクリックし、新規System Editorを開く 6. 中央に開いたSystem Diagramを右クリックし[Save As...]を選ぶ 7. 開いたダイアログの[参照]ボタンを押す 8. 開いたダイアログにファイル名を指定する入力ボックスがないことを確認する  同様に18.04では[ファイル(F)]メニューから[別名保存]を選んで、[参照]ボタンを押しても同じようにファイル名を指定することができません。(16.04ではなぜか上部のテキストベースのメニューが表示されなかったので確認ができてません。)  Windows 10の環境では同じ操作をした場合、ファイル名が入力できるダイアログが表示されます。  **Reproducibility** 100%  **Expected behavior** 最後に開くダイアログのどこかにファイル名を入力する入力ボックスが表示される。  **Screenshots or Logs** If applicable, add screenshots or logs to help explain your problem.  **Environment**  - OS: Ubuntu 16.04 32bit/Ubunt 18.04  -- Windows 10では問題ない  - OpenRTP Version 1.2.1   **Additional context** Add any other context about the problem here. </body>
		<created>2020-03-18 03:47:20</created>
		<closed>2020-04-02 04:29:20</closed>
	</bug>
	<bug>
		<id>284</id>
		<title>英語環境と日本語環境でRTSystemEditorのConnector Profileに表示されるメッセージの意味が異なる</title>
		<body>**Describe the bug** 英語版と日本語版でConnectorプロファイルダイアログが開いた時の、そのダイアログ内の上部に表示されるメッセージが同じ意味でない。 日本語版では”Connector Profileを入力してください。” 英語版では"Property Name is duplicated." のメッセージが表示される。  **To Reproduce** Steps to reproduce the behavior: 1. ConsoleIn/ConsoleOutサンプルコンポーネントを起動 2. OpenRTPを起動する 3. パースペクティブよりRTSystemEditorを選択 4. Name Serviceを起動 5. System Editorを開く 6. Name Service Viewから、ConsoleIn0/ConsoleOut0コンポーネントをSystem DiagramにDrag&amp;Drop 7. ConsoleIn/ConsoleOutコンポーネントのOutとInを接続 8. 開かれるDialogをチェックし上部のメッセージを確認 9. 上記を英語版の環境と日本語版の環境で実行して、Dialogを比較する   **Reproducibility** 100%  **Expected behavior** 同じ意味のメッセージが表示されるべき * 英語版で、”Please Input Connector Profile”とするか 　日本語版を"Property名が複製されました" とするか、どっちかだが、たぶん前者が正しい。   **Screenshots or Logs** If applicable, add screenshots or logs to help explain your problem. ![rtm12_en](https://user-images.githubusercontent.com/52995055/75210193-cbf08c00-57c3-11ea-8293-28525b1cff1e.png) ![rtm12](https://user-images.githubusercontent.com/52995055/75210213-d743b780-57c3-11ea-9836-e40d46b45bbd.png)    **Environment**  - Windows 10 Pro日本語版、英語版 buid 1909  - Ubuntu 18.04  **Additional context** </body>
		<created>2020-02-25 02:43:15</created>
		<closed>2020-03-18 02:27:22</closed>
	</bug>
	<bug>
		<id>278</id>
		<title>RT System Editor/RTC Builderの空白は取る必要あり。正式名称は空白がないです。</title>
		<body>**Describe the bug** 色々な表示で、正式名称である"RTSystemEditor"が使われてなく、"RT System Editor"となっているところ、また同様に”RTCBuilder”ではなく、”RTC Builder”になっているところがある。  **To Reproduce** まず、パースペクティブの選択肢がそうなっているので、”パースペクティブを開く”ボタンを押すと、表示される選択肢がそうなっている。 **Reproducibility** 100% **Expected behavior** ”RTSystemEditor”や"RTCBuilder"となるべき  **Screenshots or Logs** 簡単にでるので、特にスクリーンショットはなし  **Environment**  - OS:関係なし、どのOSでも  - OpenRTM-aist Version 1.2.1  **Additional context** パースペクティブ以外のところでもあった覚えがあるので、ソース側のサーチをしてください。 </body>
		<created>2020-02-06 08:49:14</created>
		<closed>2020-03-09 14:13:28</closed>
	</bug>
	<bug>
		<id>276</id>
		<title>FSMコンポーネントでイベント名を設定しない場合に状態遷移しない</title>
		<body>**Describe the bug** 例えば以下のようにイベント名を設定しない遷移を設定した場合に、コード生成後に修正をしないとnode4からnode6に遷移しない。  ![image](https://user-images.githubusercontent.com/6216077/73725028-ec529b00-476f-11ea-94a9-c23bef29e01a.png)    **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMポートを設定する 2. あるノード(node4)から他のノード(node6)に遷移を設定する 3. 遷移にイベント名は設定しない 4. 生成したコードには以下のようにnode6への遷移が定義されないクラスが記述される  ```Python @StaticFSM.FSM_SUBSTATE(Top) class node4(StaticFSM.Link):     def onEntry(self):         return RTC.RTC_OK      def onExit(self):         return RTC.RTC_OK ```  **Reproducibility** 100％  **Expected behavior** イベント名を定義していない場合`onInit`関数で遷移するようにする。  ```Python @StaticFSM.FSM_SUBSTATE(Top) class node4(StaticFSM.Link):     def onInit(self):         self.set_state(StaticFSM.State(node6))         return RTC.RTC_OK      def onEntry(self):         return RTC.RTC_OK      def onExit(self):         return RTC.RTC_OK ```  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch   **Additional context**  </body>
		<created>2020-02-04 08:05:55</created>
		<closed>2020-03-09 14:14:19</closed>
	</bug>
	<bug>
		<id>275</id>
		<title>FSMコンポーネントを設定した場合、エラーになるPythonコードを生成することがある</title>
		<body>**Describe the bug** RTCBuilderでFSMポートを設定してPythonのコードを生成すると、以下のように何も定義していないクラスを定義してしまい実行時にエラーになる。  ```Python @StaticFSM.FSM_SUBSTATE(Top) class node2(StaticFSM.Link): ```  **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMポートを設定する 2. あるノード(以下node1)で`Actions`の`On Entry`、`On Exit`のチェックボックスをオフにする 3. node1に遷移を設定するがイベント名は設定しない 4. 生成したPythonコードを実行する  もしくは単に`final node`を追加するだけでも問題を再現できる。  **Reproducibility** 100％  **Expected behavior** 上記の設定のノード(`ActionsのOn Entry、On Exitのチェックボックスをオフにする`、`遷移を設定するがイベント名は設定しない`)がある場合は、対応するクラスに`pass`の記述を追加する。  ```Python @StaticFSM.FSM_SUBSTATE(Top) class node2(StaticFSM.Link):     pass ```  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  **Additional context**  </body>
		<created>2020-02-04 07:57:25</created>
		<closed>2020-02-17 16:02:34</closed>
	</bug>
	<bug>
		<id>268</id>
		<title>[RTCB]終了状態のコード生成</title>
		<body>FSM型RTCのコード生成を行う際に，FSMエディタで定義した｢終了状態｣についても，コード生成を行うように修正を行う (Java版については対応済みなので，C++版，Python版について修正を行う)</body>
		<created>2020-01-20 14:48:33</created>
		<closed>2020-02-11 14:04:49</closed>
	</bug>
	<bug>
		<id>267</id>
		<title>[RTCB]Eventポートの｢変数名｣｢ポート名｣を生成コードに反映させる</title>
		<body>RTCBuilderのFSMタブで指定した｢変数名｣｢ポート名｣を生成コードに反映させる． それぞれの情報は通常のInPort/OutPortと同様にコード生成を行う． </body>
		<created>2020-01-20 14:47:54</created>
		<closed>2020-02-17 16:00:14</closed>
	</bug>
	<bug>
		<id>261</id>
		<title>FSMタブの新規作成ボタンを押した後に何もせずにFSM Editorを閉じると二度とFSM Editorを表示できなくなる</title>
		<body>**Describe the bug** 新規作成ボタンを押してもFSM Editorが表示されない場合がある。  **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMタブの新規作成ボタンを押す 2. 何もせずにFSM Editorを閉じる 3. 新規作成ボタンを押す。 4. See error  **Reproducibility** 100％  **Expected behavior** 上記の場合に新規作成ボタンを押すとFSM Editorが表示されるようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch   **Additional context** </body>
		<created>2020-01-07 09:25:32</created>
		<closed>2020-01-20 14:40:16</closed>
	</bug>
	<bug>
		<id>254</id>
		<title>同じIDLファイルでも環境によって「IDLファイルのパースに失敗しました」のメッセージが出る場合がある？</title>
		<body>**Describe the bug** 独自データ型の定義に同じIDLファイルを使用しても、別の環境にIDLファイルをコピーするとRTCBuilderが「IDLファイルのパースに失敗しました」のメッセージを出す場合があるらしい。 またエラーメッセージが出ても定義したデータ型は表示される。  **To Reproduce** Steps to reproduce the behavior:  - https://twitter.com/mute_mf/status/1202854244396613634  **Reproducibility** 自分の環境では再現できていません。  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: 不明  - OpenRTM-aist 1.1.2   **Additional context**  </body>
		<created>2019-12-17 00:40:05</created>
		<closed>2020-06-01 06:34:41</closed>
	</bug>
	<bug>
		<id>245</id>
		<title>サービスインターフェースがRequiredの場合のテスト用Pythonスクリプトのimport文を修正する</title>
		<body>**Describe the bug** 言語をPython、サービスポートのインターフェース型にRequiredに設定した場合にテストを実行できない。 これはRTC本体がRequired、テスト用スクリプトがProvidedに対応しなければならないが、サービスを定義した`***_idl_example.py`が生成されず`test/***Test.py`でもimportしないため。  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderで言語をPythonに設定する 2. サービスポートを設定、インターフェース型にRequiredを設定する 3. コード生成する 4. See error  **Reproducibility** 100％  **Expected behavior** 1. `test`フォルダ以下に`***_idl_example.py`を生成する 2. `test/***Test.py`で`***_idl_example`をインポートする(Providedインターフェスに設定した場合のRTC本体と同様)  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch   **Additional context**  </body>
		<created>2019-11-19 03:31:16</created>
		<closed>2019-11-25 08:12:51</closed>
	</bug>
	<bug>
		<id>243</id>
		<title>サービスインターフェースがProvidedの場合のテスト用Pythonスクリプトのimport文を修正する</title>
		<body>**Describe the bug** 言語をPython、サービスポートのインターフェース型にProvidedに設定した場合に、`test/***Test.py`が`***_idl_example.py`をインポートするようになっているが、これは`Img`や`JARA_ARM`等のomniidlで生成したモジュールをインポートするようにしてほしい。  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderで言語をPythonに設定 2. サービスポートを追加、インターフェース型をProvidedに設定する 3. コード生成する 4. `test/***Test.py`を確認する  **Reproducibility** 100％  **Expected behavior** `test/***Test.py`でインポートするモジュール名を変更する。(インターフェース型をRequiredに設定した場合の`***.py`と同様にする。)  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch   **Additional context**  </body>
		<created>2019-11-19 03:01:49</created>
		<closed>2019-11-25 08:12:36</closed>
	</bug>
	<bug>
		<id>230</id>
		<title>[RTCB]Python版RTC生成時にファイルの過不足が発生する場合がある</title>
		<body>**Describe the bug** - 独自データ型IDLを持つRTC作成時に生成される下記５ファイルが不完全だったり、不要なのに生成される場合がある   - Windows用　：idlcompile.bat, delete.bat   - Linux用　：idlcompile.sh, postinst.in, prerm.in  - 上記には、CPackで生成したmsi,deb,rpmを使ってインストールする際のIDLコンパイルで必要なファイルを含んでいる - これらのファイルの一部でも生成されると、IDLコンパイルに関する記述がCMakeLists.txt内にも追記されているため、CPackでのパッケージ作成時にエラーが発生している  **To Reproduce** - 下記の３つのRTCのうちの２つ（NG例）で不具合を確認 - 確認手順は、リンク先のRTC.xmlをインポートしてコードを生成する。独自IDLを使用する場合は個別に指定する必要がある。  - testOriginalServicepy ・・・サービスポートで独自IDLを利用（OK例） https://github.com/Nobu19800/testOpenRTM-aist/tree/master/testOriginalServicepy 上記５ファイル全て生成される   - testOriginalPortpy ・・・データポートで独自IDLを利用（NG例） https://github.com/Nobu19800/testOpenRTM-aist/tree/master/testOriginalPortpy 生成されるファイル(OK) --&gt; idlcompile.bat, delete.bat, idlcompile.sh 必要なのに生成されない --&gt; postinst.in, prerm.in  - testServiceConsumerpy ・・・サービスポートでManipulator*.idlを利用（NG例） https://github.com/Nobu19800/testOpenRTM-aist/tree/master/testServiceConsumerpy 不要なのに生成される --&gt; postinst.in, prerm.in   **Environment**  - OS: Windows10  - OpenRTM-aist Version 1.2.1  - OpenRTM-aist 1.2.1-RC191025 msi でインストールした環境  **Additional context** - この動作確認で使用する「idlcompile.bat」の変更もお願いします。 - Windows環境ではPythonディレクトリ下にomniidl.exeがインストールされなくなりました - これまでのidlcompile.batのomniidl.exe実行部分を抜粋すると、下記となっています。 ```   %f:python.exe=%omniidl.exe -bpython -I"%RTM_ROOT%\rtm\idl" idl/test.idl  ``` - 新しいidlcompile.batは、下記２行となるように修正をお願します。 ``` @echo off omniidl.exe -bpython -I"%RTM_ROOT%\rtm\idl" idl/test.idl  ``` - OpenRTM-aist 1.2.1 に反映させますので、 RELENG_1_2 ブランチへの修正をお願いします </body>
		<created>2019-11-01 08:22:25</created>
		<closed>2019-12-02 15:04:38</closed>
	</bug>
	<bug>
		<id>224</id>
		<title>[RTCB]BuildViewでDataPortの背景色が変更されない</title>
		<body>RTCBuilderでInPortもしくはOutPortを追加した際に，BuildView内のポート表示の背景色が指定された色とならない． ただし，ServicePortも定義されている場合には，背景色が指定された色で表示される．</body>
		<created>2019-10-28 03:32:27</created>
		<closed>2019-10-28 14:36:16</closed>
	</bug>
	<bug>
		<id>209</id>
		<title>FSM用エディタが編集ボタンを押した回数だけウィンドウが増える？</title>
		<body>**Describe the bug** #95 、#96 でFSMエディタが複数回起動する問題は解決したはずなのですが、今動作確認すると何故か複数起動する。  **To Reproduce** Steps to reproduce the behavior: 1. RTCBのFSMタブの編集ボタンを数回押す   **Reproducibility**   **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch  **Additional context** こちらの環境の問題の可能性もあるため、動作確認をして問題がなければこのissueは閉じてください。</body>
		<created>2019-09-27 10:04:54</created>
		<closed>2019-10-01 02:20:27</closed>
	</bug>
	<bug>
		<id>208</id>
		<title>***Test.pyのインデントを修正する</title>
		<body>**Describe the bug** RTC Builderが出力する`***Test.py`のインデントがタブになっているためスペース4個に変更してほしい。  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderで言語をPythonに指定してコード生成する   **Reproducibility** 100％  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch  **Additional context**  </body>
		<created>2019-09-27 09:53:45</created>
		<closed>2019-10-01 02:21:09</closed>
	</bug>
	<bug>
		<id>193</id>
		<title>.appveryor.ymlを変更していないのに結果比較の画面が出てくる</title>
		<body>**Describe the bug** `.appveryor.yml`を変更していないのにコード生成で結果比較の画面が表示される。  ![image](https://user-images.githubusercontent.com/6216077/65213748-5977d380-dae2-11e9-8a88-904e604f704b.png)   **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでコード生成する 2. 再度コード生成する   **Reproducibility** 100％  **Expected behavior** 変更をしていないのに結果比較画面を出さないようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0   **Additional context**  </body>
		<created>2019-09-19 04:37:48</created>
		<closed>2019-09-19 06:41:56</closed>
	</bug>
	<bug>
		<id>183</id>
		<title>サービスポートのインターフェース型にManipulatorCommonInterface_CommonやManipulatorCommonInterface_Middleを指定すると実行時にエラーになる</title>
		<body>**Describe the bug** #182 と同じ問題だとは思いますが、RTC Builderで以下の条件でコード生成すると実行時にエラーになります。  * サービスポートのインターフェース型に`JARA_ARM::`からはじまる名前を指定する * 言語はPythonを指定する * 方向にRequiredを指定する  **To Reproduce** Steps to reproduce the behavior: 上記の通り。  **Reproducibility** 100％  **Expected behavior** #182 と同じ修正内容。 `JARA_ARM::～`型を使用する場合は以下を追加。  ```Python import JARA_ARM ```  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2   **Additional context**  </body>
		<created>2019-09-18 09:53:12</created>
		<closed>2019-09-22 02:26:50</closed>
	</bug>
	<bug>
		<id>182</id>
		<title>データ型にTimedCameraImage等を指定すると実行時にエラーになる</title>
		<body>**Describe the bug** RTC Builderで以下の条件でコード生成して実行するとエラーになる。  * データ型に`Img::TimedCameraImage`を指定する * 言語にPythonを指定する  **To Reproduce** Steps to reproduce the behavior: 上記の通り。  **Reproducibility** 100％  **Expected behavior** OpenRTM-aistのインストールディレクトリのIDLファイルを使う場合に対応するモジュールをインポートするように修正する。  例えば、`Img::～`型使用時に生成するPythonスクリプトに以下を追加するようにする  ```Python import Img ``` この変更はRELENG_1_2にも反映する。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context** </body>
		<created>2019-09-18 09:44:54</created>
		<closed>2019-09-22 02:26:37</closed>
	</bug>
	<bug>
		<id>181</id>
		<title>サービスポートのインターフェース型にManipulatorCommonInterface_CommonやManipulatorCommonInterface_Middleを指定すると***_idl_example.pyを生成しない</title>
		<body>**Describe the bug** RTC Builderで以下の条件でコード生成すると`***_idl_example.py`を生成しない。  * サービスポートのインターフェース型に`JARA_ARM::`からはじまる名前を指定する * 言語はPythonを指定する * 方向にProvidedを指定する  **To Reproduce** Steps to reproduce the behavior: 上記の通り。  **Reproducibility** 100％  **Expected behavior** `***_idl_example.py`を生成するようにする。RELENG_1_2にも変更を反映する。  **Screenshots or Logs**   **Environment**  - OS:  Windows 10  - OpenRTM-aist 1.2   **Additional context** </body>
		<created>2019-09-18 09:36:56</created>
		<closed>2019-11-14 03:37:07</closed>
	</bug>
	<bug>
		<id>180</id>
		<title>RTC Builderでマージボタンが表示されない</title>
		<body>&lt;!-- *********************************************************************** *                           &lt;&lt; NOTE &gt;&gt;                                * *  This repository have been programmed in C++.                       * *                                                                     * *  Please do not create tickets for other programming languages here. * *  If you will create tickets for other programming language,         * *  please see below:                                                  * *                                                                     * *  - Python : https://github.com/OpenRTM/OpenRTM-aist-Python/issues   * *  - Java   : https://github.com/OpenRTM/OpenRTM-aist-Java/issues     * *                                                                     * *********************************************************************** --&gt;  **Describe the bug** RTC Builderでソースコードを編集後にコード生成ボタンを押した場合に何故かMargeボタンが出ない場合がある。  **To Reproduce** Steps to reproduce the behavior: 1. 以下のRTC.xmlを使用する - [RTC.xml.txt](https://github.com/OpenRTM/OpenRTM-aist/files/3625095/RTC.xml.txt) 2. コード生成する 3. `testInPort.h`の39行目付近に以下を追加 ```C++ #include &lt;opencv2/opencv.hpp&gt; ``` 4. RTCBでonResetのアクティビティを有効にするなど、何かしらの変更を加える。 5. 再度コード生成ボタンを押す 6. コード生成ボタンを押すとMargeボタンがないため、Genaratedボタンを押すと`#include &lt;opencv2/opencv.hpp&gt;`を消えて、Originalボタンを押すと`onReset`のコメント文がそのままになる  ![image](https://user-images.githubusercontent.com/6216077/65128965-638fc880-da35-11e9-82a7-5ad2fac37ed0.png) ![image](https://user-images.githubusercontent.com/6216077/65128952-5d99e780-da35-11e9-80ce-ffd2c7c64783.png)  **Reproducibility** 100％  **Expected behavior** 仕様がよく分からないが、上記のようなケースで困るためMargeボタンを出すようにしてほしい。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context**  </body>
		<created>2019-09-18 08:09:37</created>
		<closed>2019-09-25 03:12:27</closed>
	</bug>
	<bug>
		<id>175</id>
		<title>イベントリストの表示がおかしい</title>
		<body>**Describe the bug** FSMタブのイベントリストの表示がおかしくなる。  **To Reproduce**  1. FSMを有効にしてSCXMLを新規作成する 2. FSM Editorで以下のように状態遷移を定義する。 ![image](https://user-images.githubusercontent.com/6216077/65028485-151bf480-d977-11e9-8355-19cb0822afac.png)  3. 一旦FSM Editorを閉じて、編集ボタンを押して再度開く 4. ノードの名前を変更してFSM Editorを閉じる ![image](https://user-images.githubusercontent.com/6216077/65028660-5ca28080-d977-11e9-9ecf-3c05a105560f.png)  5. 保存する 6. 何故かイベントリスト内の表示が変化しない   ![image](https://user-images.githubusercontent.com/6216077/65028810-9ffcef00-d977-11e9-8f12-9aa8db24ac7b.png)  7. 編集ボタンを押してFSM Editorを開く 8. `event1`のTransition Editorを開く 9.  何も変更をせずにTransition Editor、FSM Editorを閉じる 10. 何故かイベント名が増殖する。 ![image](https://user-images.githubusercontent.com/6216077/65029034-008c2c00-d978-11e9-978c-ae811ecd542a.png)       **Reproducibility** 100％  **Expected behavior** 以下の操作に対して不具合が起こらないようにする。  - ノード名の変更 - イベント名の変更    **Screenshots or Logs**   **Environment**  - OS:  Windows 10  - OpenRTM-aist master branch  **Additional context**  </body>
		<created>2019-09-17 09:31:28</created>
		<closed>2019-09-25 03:14:40</closed>
	</bug>
	<bug>
		<id>165</id>
		<title>独自IDLを使う場合のBuilderの生成するコードの問題</title>
		<body>データポートとサービスポートの両方で同じ独自IDLを指定した場合， #157 の問題に加えて，そのIDLファイルの名前が xxx.idl の場合，xxxSVC_impl.h と xxxSVC_impl.cpp にクラスの宣言や定義が書かれないとい問題に遭遇しています．  データポートで独自IDLを設定した後に，サービスポートのインタフェースで「インタフェース型」を選ぼうとすると，選択肢の中に同じ名前が二つ現れます．それぞれを選択すると，「IDLファイル」欄のパスが切り替わります．一つは，データポートの設定の際に指定したIDLファイル，もう一つは，C:\Users\ユーザ名\AppData\Roaming\.openrtp\idl にコピーされた同名のファイルです．前者を選んだ場合に問題が発生しています．  これは既知の問題でしょうか？   ところで，C:\Users\ユーザ名\AppData\Roaming\.openrtp\idl にIDLファイルをコピーして使う狙いは何でしょうか？参照しているRTC外部のIDLファイルの名前や中身を変更したつもりでも，コード生成でそれが反映されず，混乱してしまいます．ユーザが指定したIDLを使うだけの方がわかりやすいと思うのですが．  Windowsでmsiでインストールした1.2.0の64bit版を使っています．</body>
		<created>2019-08-22 03:50:10</created>
		<closed>2019-09-26 14:09:25</closed>
	</bug>
	<bug>
		<id>158</id>
		<title>RTC Builderのデータポートタブのデータ型が英語ではPort Typeになっている</title>
		<body>**Describe the bug** 以下のように日本語では「データ型」と表示されている項目が、英語では「Port Type」と表示されている。  ![image](https://user-images.githubusercontent.com/6216077/62454326-11f5ec00-b7af-11e9-95f1-b40bbf40c816.png)    **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでデータポートのタブを開く 4. See error  **Reproducibility**   **Expected behavior** Port TypeはInPort、OutPortの種類のことであって、データ型のことではないと思います。 この認識で間違っていないようであれば、Data Typeに修正をお願いします。  **Screenshots or Logs**   **Environment**   **Additional context**  </body>
		<created>2019-08-05 09:31:31</created>
		<closed>2019-08-26 15:23:48</closed>
	</bug>
	<bug>
		<id>157</id>
		<title>Builderでの独自IDL利用時に多重インクルードされる件について</title>
		<body>**Describe the bug** 独自IDL(IDL1)をインクルードする独自作成のIDL(IDL2)を用いる場合において，IDL2の中のデータ型だけでなく，IDL1にあるデータ型を用いるときに，RTC Builderで出力するidl/CMakeLists.txtの1行目で，以下の様に出力され，正常にcmakeが実行できない． 【例】 set(idls ${CMAKE_CURRENT_SOURCE_DIR}/IDL1.idl ${CMAKE_CURRENT_SOURCE_DIR}/IDL2.idl ${CMAKE_CURRENT_SOURCE_DIR}/IDL1.idl)  【再現方法】 下記のリポジトリにあるRTC.xmlおよびIDLファイルからソースコードの生成をすると，再現可能です．  https://github.com/rsdlab/SingleArUco</body>
		<created>2019-08-01 12:22:36</created>
		<closed>2019-12-14 17:00:07</closed>
	</bug>
	<bug>
		<id>147</id>
		<title>RTC Builderのサービスポートのヒントのインスタンス名、変数名が同じ</title>
		<body>**Describe the bug** 以下のようにRTC Builderのサービスポートのヒントのインスタンス名、変数名が同じになっている。  ![image](https://user-images.githubusercontent.com/6216077/62016845-4dad1680-b1ef-11e9-8d70-2d2b5e271578.png)    **To Reproduce**  **Reproducibility**   **Expected behavior** 説明を修正する。  **Screenshots or Logs**   **Environment**   **Additional context**  </body>
		<created>2019-07-29 01:57:02</created>
		<closed>2019-08-12 09:48:08</closed>
	</bug>
	<bug>
		<id>142</id>
		<title>RTCBの「コンフィギュレーション」タブにて、2回目以降のAddでデータ型が空になる</title>
		<body>**Describe the bug** RTCBの「コンフィギュレーション」タブにて、2回目以降のパラメータAddで、これまでは1回目のパラメータのデータ型がそのまま2回目のパラメータのデータ型になっていたが、これが空になる。  **Reproducibility** 100%  **Expected behavior** 2回目以降のパラメータのAddで、1回目に指定されたデータ型が引き継がれるようにする。  **Environment**  - OS: Windows 10 64bit  - OpenRTM-aist Version 1.2.0  </body>
		<created>2019-07-24 06:51:41</created>
		<closed>2019-08-06 08:11:39</closed>
	</bug>
	<bug>
		<id>141</id>
		<title>MANIFEST.MFファイル中のバージョン番号を更新する</title>
		<body>**Describe the bug** - MANIFEST.MFファイル中のバージョン番号は、ソースビルドスクリプト実行時、versionファイルで定義しているバージョン番号で書き換えている - これはバージョン番号更新時、versionファイルのみ変更すれば済むという対応だが、従来から一部のMANIFEST.MF中のバージョン番号を更新する設定が抜けていたので、この部分のバージョン番号のみソースを更新している（後日、MANIFEST.MFのテンプレート化を予定していたため、最低限の修正で対応していた） - これにより、masterソースの MANIFEST.MFファイルには、バージョン番号1.2.0と2.0.0が混在しており、RELENG_1_2ソースのMANIFEST.MFファイルには、バージョン番号1.2.0と1.2.1が混在しているが、ソースビルドスクリプトを実行すれば規定のバージョン番号に統一される - ここで言うソースビルドとは、OpenRTPのWindows用msi生成のためのマージモジュール作成、及び、Linux用インストールパッケージを作成する際のビルドを指している  - 一方、OpenRTPのプラグイン開発時は、上記ソースビルドスクリプトを実行しないため、MANIFEST.MFファイルは更新されない - masterとRELNEG_1_2ブランチを切り替えて、それぞれ用の修正を行う場合、MANIFEST.MFファイル中のバージョン番号を手動で更新しないとビルドが通らない状況になっている - この不具合のため、MANIFEST.MFファイル中のバージョン番号をmasterブランチは2.0.0、RELENG_1_2ブランチは1.2.1とし、別のバージョン番号が混在しないように対応する   **Environment**  - OS: Windows10  - OpenRTM-aist Version 1.2.1と 2.0.0   </body>
		<created>2019-07-24 05:41:10</created>
		<closed>2019-09-04 13:59:02</closed>
	</bug>
	<bug>
		<id>140</id>
		<title>RTCBの「データポート」タブにて、2回目以降のAddでデータ型が空になる</title>
		<body>**Describe the bug** RTCBの「データポート」タブにて、これまで2回目以降データポートの「Add」を押すと、直前に設定した「データ型」がデフォルトで設定されていたが、1.2のRTCBでは空になる。  **To Reproduce** 通常通りRTCを作成、2個目以降のデータポートを作成。  **Reproducibility** 100％  **Expected behavior** 上述の通り。  **Environment**  - OS: Widnows10 64bit  - OpenRTM-aist Version 1.2.0  </body>
		<created>2019-07-23 06:46:19</created>
		<closed>2019-08-06 08:11:58</closed>
	</bug>
	<bug>
		<id>128</id>
		<title>コード生成時にManipulatorCommonInterface_Middle.idl、ManipulatorCommonInterface_DataTypes.idl、ManipulatorCommonInterface_Common.idl、CameraCommonInterface.idlのコピーしないようにする</title>
		<body>**Describe the bug** RTC Builderでコード生成時に以下のIDLファイルで定義したインターフェースによりサービスポートを設定した場合に、IDLファイルのコピー、IDLコンパイルするようになっているが、不要である。  - ManipulatorCommonInterface_Middle.idl - ManipulatorCommonInterface_DataTypes.idl - ManipulatorCommonInterface_Common.idl - CameraCommonInterface.idl  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでサービスポートを設定する 2. インターフェース型にJARA_ARM::ManipulatorCommonInterface_Middle等を設定する 3. コード生成する(言語は問わない)  4. See error  **Reproducibility** 100％  **Expected behavior** サービスポート使用時にインストーラーでインストールされるIDLファイルはコピーしないようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist master branch  **Additional context**  </body>
		<created>2019-07-18 05:20:00</created>
		<closed>2019-07-22 05:50:19</closed>
	</bug>
	<bug>
		<id>126</id>
		<title>RTCBuilderのコード生成時に何も変更していないのに結果比較の画面が出る</title>
		<body>**Describe the bug** RTC Builderでコード生成を2回以上実行したときに以前と違う部分については結果比較の画面が表示されるが、何も変更していなくても表示されてしまう。  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでコードを生成する(言語は問わない) 2. もう一度コード生成ボタンを押す  **Reproducibility** 100％  **Expected behavior** 仕様の動作でないのであれば、変更がない場合は画面は表示しないようにする。  **Screenshots or Logs** 以下のように何を比較しているのか不明です。 ![image](https://user-images.githubusercontent.com/6216077/61350641-3b53e400-a8a3-11e9-8a2a-110b2d905771.png) ![image](https://user-images.githubusercontent.com/6216077/61350672-532b6800-a8a3-11e9-93d3-ac5ea7f88b40.png) ![image](https://user-images.githubusercontent.com/6216077/61350677-5888b280-a8a3-11e9-8665-c5deb2352e1e.png) ![image](https://user-images.githubusercontent.com/6216077/61350681-5c1c3980-a8a3-11e9-87e8-7c6d4ed886fe.png)   **Environment**  - OS: Windows 10  - OpenRTM-aist masterブランチ  **Additional context**  </body>
		<created>2019-07-17 06:00:06</created>
		<closed>2019-07-25 09:33:20</closed>
	</bug>
	<bug>
		<id>118</id>
		<title>RTCBuilder「基本」タブのChoreonoidの位置が他のRTCタイプからずれている</title>
		<body>**Describe the bug** RTCBuilder「基本」タブのChoreonoidの位置が他のRTCタイプからずれている。  **Expected behavior** DataFlow, FSM, MultiModeと上下中央そろっていてほしい。 </body>
		<created>2019-07-10 06:51:41</created>
		<closed>2019-07-18 09:11:00</closed>
	</bug>
	<bug>
		<id>112</id>
		<title>PR#110の変更をRELENG_1_2では元に戻す</title>
		<body>**Describe the bug** 以下のPRでの修正をRELENG_1_2においては元に戻す。  https://github.com/OpenRTM/OpenRTP-aist/pull/110  **Expected behavior** C++テンプレートにおいて、C++11対応のためのmasterへの変更がRELENG_1_2にも含まれていたが、RELENG_1_2はC++11対応はしないため元に戻す。  </body>
		<created>2019-07-07 23:51:50</created>
		<closed>2019-07-08 06:35:36</closed>
	</bug>
	<bug>
		<id>111</id>
		<title>Add "const" to C++ RTC template code generated by RTCBuilder</title>
		<body>**Describe the bug**  https://github.com/OpenRTM/OpenRTM-aist/pull/522 に関連して、RTCのcppのCXX_RTC.cpp.vslにおて、&lt;コンポーネント名&gt;_specにconstをつける。  **Expected behavior** ```C++ static const char* analyzer_spec[] = ``` が、以下のようにconst付きで生成されてほしい  ```C++ static const char* const analyzer_spec[] = ``` </body>
		<created>2019-07-05 09:36:36</created>
		<closed>2020-04-15 15:31:10</closed>
	</bug>
	<bug>
		<id>97</id>
		<title>EventInPortを持つRTCのビルドでエラーが発生する</title>
		<body>**Describe the bug** #87 の変更がEventInPortについては修正していないためエラーが発生する。    **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMを有効にしてC++でコード生成 2. Visual Studioでビルドする  **Reproducibility** 100％  **Expected behavior** `EventInPort`ではなく`RTC::EventInPort`に修正する必要がある。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  - ...  **Additional context** Add any other context about the problem here. </body>
		<created>2019-06-18 09:23:24</created>
		<closed>2019-09-18 02:04:15</closed>
	</bug>
	<bug>
		<id>95</id>
		<title>FSM用エディタが編集ボタンを押した回数だけウィンドウが増える</title>
		<body>**Describe the bug** RTC BuilderのFSMタブの編集ボタンを押した回数だけFSM用エディタのウィンドウが表示される。  **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMを有効にしてRTCを作成 2. FSMタブの新規作成ボタンでSCXMLを新規作成 3. 編集ボタンを押す。 4. 編集ボタンを再度押すと同じウィンドウが押した回数だけ増える。  **Reproducibility** 100％  **Expected behavior** FSM用エディタは編集ボタンを複数回押しても1つしか表示しないようにする。 既に表示中の場合に編集ボタンを押した場合はFSMエディタのウィンドウが前面に出るようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  **Additional context** </body>
		<created>2019-06-14 10:03:10</created>
		<closed>2019-06-17 14:22:55</closed>
	</bug>
	<bug>
		<id>90</id>
		<title>1.2.0付属のRTSEで、エディタ上のRTC選択時に1回のクリックで選択されない</title>
		<body>**Describe the bug** 1.2.0付属のRTSystemEditor、OpenRTP-aistのRTSE（Windows）いずれも、エディタ上のRTCを選択しようとクリックしても、1回で選択されないケースが散見される。  **To Reproduce** 1. 1.2.0でOpenRTP-aist、またはRTSystemEditorを起動。 2. ~~RTCを複数起動~~データポートのあるRTCを起動する 3. ~~いくつかのRTCを選択のためにクリック~~マウスカーソルがデータポートの上を通過後にRTCをクリックする    **Reproducibility** この時、1回で選択されないRTCが多数存在する。まれに、1回で選択可能なRTCも存在する。 ただし、1回のクリックで選択できなRTCについても、常に2回のクリックが必要なわけではなく、たまに1回のクリックで選択可能。 ちなみに、1回のクリックで選択できないケースの時、マウスカーソルが片不一致のポートを接続するときに表示される禁止マーク付きマウスカーソルになるため、選択できないことが事前にわかる。  **Expected behavior** 1.1.2のOpenRTP-aistのRTSEやRTSystemEditorではこの現象は起きない。 ウインドウ外にフォーカスがある場合、同じEclipse上で他のView等にフォーカスがある場合でも、必ずRTCは1回のクリックで選択が可能であった。  原因は、ポート接続モードへの出入りイベントが関係していると考えられる。マウスオーバーイベント周りの挙動は以下の通り。  - ポートにマウスオーバー     - 1.1.2：ポート接続モードのマウスカーソルになる     - 1.2.0：ポート接続モードのマウスカーソルになる（おなじ） - ポートからマウスアウト     - 1.1.2：通常のマウスカーソルに戻る（正しい）     - 1.2.0：接続禁止マウスカーソルになる - 1.2.0において、接続禁止後のマウスカーソル出現後、他のウインドウなどにフォーカスを映し、再びRTSEのエディタ部分にマウスを持ってくると、接続禁止状態マウスカーソルが表示され、１クリックでRTCを選択できない。（このほかにも多様なケース有り。）  **Screenshots or Logs** なし  **Environment**  - OS: Windows 10, 64bit  - OpenRTM-aist 1.2.0 </body>
		<created>2019-06-12 02:00:34</created>
		<closed>2019-06-29 05:37:42</closed>
	</bug>
	<bug>
		<id>89</id>
		<title>コード生成時にConfiguration Set Parameterの名称は半角英数字を入力してください」とエラーメッセージが出る</title>
		<body>**Describe the bug** RTCBでコンフィギュレーションパラメータを設定後にコード生成を行うと「Configuration Set Parameterの名称は半角英数字を入力してください」とエラーメッセージが出る場合がある。 何回確認しても半角英数字しか入力されておらず、名前を入力しなおしても解決しない。 何故かOpenRTPを再起動すると解決した。  **To Reproduce** Steps to reproduce the behavior: 1. RTCBuilderを起動する 2. コンフィギュレーションパラメータを設定する 3. コード生成をする  **Reproducibility** 1％ ROBOMECH2019の講習会で初めて問題を確認した。それ以前は発生したことがなかったため、問題の発生条件などは不明。  **Expected behavior**  **Screenshots or Logs**  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2.0  **Additional context** </body>
		<created>2019-06-10 00:42:03</created>
		<closed>2020-06-01 06:13:14</closed>
	</bug>
	<bug>
		<id>88</id>
		<title>RTSEでActivate Systemsボタン等が表示されない</title>
		<body>**Describe the bug** RTSystemEditorを起動したときにActivate Systemsボタン等が表示されない場合がある。  **To Reproduce** Steps to reproduce the behavior: 1. OpenRTM-aistをインストールする 2. OpenRTPを起動する 3. RTSystemEditorを起動する  問題が発生するのはインストール後に初めて起動する場合のみであり、OpenRTPを再起動すると一応は解決する。  **Reproducibility** おおよそ20％  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context**</body>
		<created>2019-06-10 00:34:55</created>
		<closed>2020-01-14 04:11:17</closed>
	</bug>
	<bug>
		<id>84</id>
		<title>サービスポートのプロバイダのコード(xxx_idl_example.py)の問題</title>
		<body>**Describe the bug** プロバイダ側のサービスポートを設定したPythonコード`xxx_idl_example.py`に以下の問題がある。  - 先頭付近に記載しているファイル名が違う ```Python """  @file MyService_idl_examplefile.py #&lt;-fileは不要  @brief Python example implementations generated from MyService.idl  @date $Date$ """ ```  - print文がPython2のままのためPython3でエラーになる。  ```Python     print orb.object_to_string(objref) ```  **To Reproduce** Steps to reproduce the behavior: 1. RTCBuilderでプロバイダ側のサービスポートを設定する 2. Pythonのコードを生成する   **Reproducibility** 100％  **Expected behavior**  - ファイル内に記載しているファイル名を修正する。 ```Python """  @file MyService_idl_example.py #&lt;-fileは不要  @brief Python example implementations generated from MyService.idl  @date $Date$ """ ```  - Python3でもエラーにならないように括弧を記述する  ```Python     print(orb.object_to_string(objref)) ```  **Screenshots or Logs**   **Environment**  - OS:  Windows 10  - OpenRTM-aist 2.0  - ...  **Additional context** </body>
		<created>2019-06-06 09:08:02</created>
		<closed>2019-06-11 07:52:41</closed>
	</bug>
	<bug>
		<id>79</id>
		<title>[RTCB]データ型にImg型またはJARA_ARM型を指定したC++版RTCがビルドエラーになる</title>
		<body>**Describe the bug** - データポートのデータ型に「JARA_ARM::TimedJointPos」を指定してC++ RTCを生成し、ビルドすると下記エラーになります。 ``` 'ULONG' : あいまいなシンボルです。 ``` - 上記は、ヘッダーファイルの下記namespace文をコメントアウトすればビルドが通ります ``` using namespace JARA_ARM; ```  - データポートのデータ型に「Img::CameraDeviceProfile」を指定してC++ RTCを生成し、ビルドすると下記エラーになります。このエラーの対応方法は分かっておりません。 ``` 3&gt;C:\Program Files\OpenRTM-aist\1.2.0\rtm/Timestamp.h(40): error C2039: 'tm' : 'Img::CameraDeviceProfile' のメンバーではありません。 3&gt;          c:\program files\openrtm-aist\1.2.0\rtm\idl\CameraCommonInterface.hh(456) : 'Img::CameraDeviceProfile' の宣言を確認してください。 ```  **Reproducibility** vc2010とvc2015環境で同じエラーになることを確認  **Environment**  - OS: Windows10  - OpenRTM-aist Version 1.2.0    </body>
		<created>2019-05-28 10:14:27</created>
		<closed>2019-07-09 01:14:43</closed>
	</bug>
	<bug>
		<id>73</id>
		<title>[RTSE]OpenRTM-aist-1.1.2付属のEdgeコンポーネントを起動し，カメラコンポーネントと接続すると，システムエディタ上の表示がおかしくなってしまう</title>
		<body>1.1.2のEdgeコンポーネントは，カメラと接続するとバッファオーバーフローでCORBA自体が異常終了してしまうが，この時，RTSEの表示がおかしくなってしまう． </body>
		<created>2019-05-27 15:00:52</created>
		<closed>2019-07-23 11:18:35</closed>
	</bug>
	<bug>
		<id>61</id>
		<title>buildall.batでエラーが発生する</title>
		<body>**Describe the bug** `buildall.bat`の実行時にエラーが発生する。 `jp.go.aist.rtm.toolscommon\build.xml`で`n2a.bat`を実行する部分に問題がある。 まず、実行するコマンドを`./n2a`と記述しているが、`n2a.bat`と記述しないと実行できない。 また`n2a.bat`のコマンドライン引数に`${source}\AAAAA\*.java`と指定しているが、`/`ではなく`\`でないとエラーになる。  ``` &lt;exec executable="./n2a"&gt; &lt;arg line="${source}\_SDOPackage\*.java"/&gt; &lt;/exec&gt; ```  **To Reproduce** Steps to reproduce the behavior: 1. 環境変数ANT_HOME、ECLIPSE_HOMEを設定する 2. buildall.batを実行する  **Reproducibility** 100％  **Expected behavior** buildall.batでビルドが成功するようにする。 もしくはサポート対象外という事でbuildall.batは削除する。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  **Additional context** </body>
		<created>2019-05-23 06:01:29</created>
		<closed>2019-07-03 00:20:45</closed>
	</bug>
	<bug>
		<id>59</id>
		<title>IDLファイルが自作のIDLファイルをインクルードしている場合にファイルがコピーされない</title>
		<body>**Describe the bug**  RTCBuilderでコード生成時、以下のようなIDLファイル(test2.idl)でデータ型を定義した場合に、インクルードしたtest3.idlがコピーされない。  [test2.idl.txt](https://github.com/OpenRTM/OpenRTP-aist/files/3200892/test2.idl.txt) [test3.idl.txt](https://github.com/OpenRTM/OpenRTP-aist/files/3200891/test3.idl.txt)   また手動でtest3.idlをコピーしたとしても、Javaの場合にはidlj実行時にidlフォルダをインクルードディレクトリに設定していないためエラーになる。  **To Reproduce** Steps to reproduce the behavior: 1. test2.idlのSample::SampleDataType2をデータ型に設定してデータポートを定義する 2. RTC Builderでコードを生成する  **Reproducibility** 100％  **Expected behavior** インクルードしたIDLファイル(test3.idl)をidlファルダにコピーするようにする。 Javaの場合はidlj実行時のオプションに` -i 'idl' `を追加する必要がある。  - 変更前 ```XML &lt;target name="idlcompile"  depends="mkdir"&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -i '${env.RTM_JAVA_ROOT}/rtm/idl' -fall 'idl/test2.idl'"/&gt; &lt;/exec&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -i '${env.RTM_JAVA_ROOT}/rtm/idl' -fall 'idl/test3.idl'"/&gt; &lt;/exec&gt; &lt;/target&gt; ```  - 変更後 ```XML &lt;target name="idlcompile"  depends="mkdir"&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -i 'idl' -i '${env.RTM_JAVA_ROOT}/rtm/idl' -fall 'idl/test2.idl'"/&gt; &lt;/exec&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -i 'idl' -i '${env.RTM_JAVA_ROOT}/rtm/idl' -fall 'idl/test3.idl'"/&gt; &lt;/exec&gt; &lt;/target&gt; ```  **Screenshots or Logs** If applicable, add screenshots or logs to help explain your problem.  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  - ...  **Additional context**  </body>
		<created>2019-05-21 06:15:56</created>
		<closed>2019-06-24 14:59:39</closed>
	</bug>
	<bug>
		<id>52</id>
		<title>FSMコンポーネントのビルドでエラーになる</title>
		<body>**Describe the bug** FSMコンポーネントをビルドするとエラーが発生する。  ``` 重大度レベルコード説明プロジェクトファイル行抑制状態 エラーC2509'onEntry': メンバー関数が 'testFSM3FSM::node2' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp37 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::Top' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp13 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node1' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp26 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node2' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp33 エラーC2723'testFSM3FSM::node2::onExit': 'virtual' 指定子が関数の定義で誤って指定されていますtestFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp40 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node3' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp46 エラーC2509'onEntry': メンバー関数が 'testFSM3FSM::node3' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp50 エラーC2723'testFSM3FSM::node3::onExit': 'virtual' 指定子が関数の定義で誤って指定されていますtestFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp53 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node4' で宣言されていません。testFSM3CompC:\workspace\testFSM3\src\testFSM3FSM.cpp59 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::Top' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp13 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node1' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp26 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node2' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp33 エラーC2509'onEntry': メンバー関数が 'testFSM3FSM::node2' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp37 エラーC2723'testFSM3FSM::node2::onExit': 'virtual' 指定子が関数の定義で誤って指定されていますtestFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp40 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node3' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp46 エラーC2509'onEntry': メンバー関数が 'testFSM3FSM::node3' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp50 エラーC2723'testFSM3FSM::node3::onExit': 'virtual' 指定子が関数の定義で誤って指定されていますtestFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp53 エラーC2509'onInit': メンバー関数が 'testFSM3FSM::node4' で宣言されていません。testFSM3C:\workspace\testFSM3\src\testFSM3FSM.cpp59 エラーC2059構文エラー: 'private'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h27 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h28 エラーC2238';' の前に無効なトークンがあります。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h28 エラーC2059構文エラー: 'private'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h37 エラーC2059構文エラー: '}'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2143構文エラー: ';' が '}' の前にありません。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2238';' の前に無効なトークンがあります。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2059構文エラー: 'private'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h44 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h45 エラーC2238';' の前に無効なトークンがあります。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h45 エラーC2059構文エラー: 'private'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h53 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h54 エラーC2238';' の前に無効なトークンがあります。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h54 エラーC2059構文エラー: 'private'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h62 エラーC2059構文エラー: '}'testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 エラーC2143構文エラー: ';' が '}' の前にありません。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 エラーC2238';' の前に無効なトークンがあります。testFSM3CompC:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 エラーC2059構文エラー: 'private'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h27 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h28 エラーC2238';' の前に無効なトークンがあります。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h28 エラーC2059構文エラー: 'private'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h37 エラーC2059構文エラー: '}'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2143構文エラー: ';' が '}' の前にありません。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2238';' の前に無効なトークンがあります。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h38 エラーC2059構文エラー: 'private'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h44 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h45 エラーC2238';' の前に無効なトークンがあります。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h45 エラーC2059構文エラー: 'private'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h53 エラーC2226構文エラー: 'RTC::ReturnCode_t' 型指定子の前あるいは内部で構文エラーが発生しました。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h54 エラーC2238';' の前に無効なトークンがあります。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h54 エラーC2059構文エラー: 'private'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h62 エラーC2059構文エラー: '}'testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 エラーC2143構文エラー: ';' が '}' の前にありません。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 エラーC2238';' の前に無効なトークンがあります。testFSM3C:\workspace\testFSM3\include\testFSM3\testFSM3FSM.h63 ```  これらエラーは主に以下が原因で発生している。  - FSM_STATE()の後にセミコロンがない - onInit関数がヘッダーファイルで宣言されていない - CPPファイルのomInit、onEntry、onExit関数にvirtualが付いている    **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMコンポーネントを作成 2. OpenRTM-aistのmasterのコードをビルドしてインストール 3. 環境変数OPENRTM_DIRに2.でインストールしたディレクトリの`2.0.0/cmake`フォルダのパスを設定 4. 1.で作成したRTCにCMakeを実行、Visual Studioでビルド  **Reproducibility** 100％  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  **Additional context**  </body>
		<created>2019-05-16 10:10:46</created>
		<closed>2019-05-28 08:23:36</closed>
	</bug>
	<bug>
		<id>51</id>
		<title>****FSM.cppがcomp_srcsに追加されない</title>
		<body>**Describe the bug** FSMを有効にしてRTCを作成した場合に、以下のようにsrc/CMakeLists.txtで***FSM.cppがcomp_srcsのリストに追加されない。  ```CMake set(comp_srcs test.cpp ) set(standalone_srcs testComp.cpp) ```  この例ではtestFSM.cppが追加されなければならない。 またヘッダーファイルについても同様。  **To Reproduce** Steps to reproduce the behavior: 1. RTC BuilderでFSMを有効にしてRTCを作成する   **Reproducibility** 100％  **Expected behavior** testFSM.cpp、testFSM.hがCMakeLists.txtで正常に設定されるようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 2.0  - ...  **Additional context**  </body>
		<created>2019-05-16 09:52:22</created>
		<closed>2019-05-29 14:52:17</closed>
	</bug>
	<bug>
		<id>50</id>
		<title>存在しないデータ型を指定してもコード生成時にエラーにならない</title>
		<body>**Describe the bug** 以下のように存在しないデータ型を設定してもコード生成時にエラーにならない。 ビルド時には当然エラーになる。  ![image](https://user-images.githubusercontent.com/6216077/57817860-5aa79580-77bc-11e9-8b5a-9b4de978c04b.png)   **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでプロジェクトを作成 2. InPort、もしくはOutPort追加 3. データ型を直接文字で入力して存在しない名前に設定する 4. コード生成をする  **Reproducibility** 100％  **Expected behavior** エラーメッセージを出す。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2.0   **Additional context**  </body>
		<created>2019-05-16 00:26:20</created>
		<closed>2019-05-18 10:34:41</closed>
	</bug>
	<bug>
		<id>44</id>
		<title>Managerのinit関数を2回実行しようとする</title>
		<body>**Describe the bug** RTCBuilderでC++のコードを生成すると、***Comp.cppで以下のように2回Managerのinit関数を実行しようとする記述になっている。実害はない。   ```CPP   RTC::Manager* manager;   manager = RTC::Manager::init(argc, argv);    // Initialize manager   manager-&gt;init(argc, argv); ```  **To Reproduce** Steps to reproduce the behavior: 1. RTCBuilderでC++のコードを生成する。  **Reproducibility** 100％  **Expected behavior** 実害はないが意図が不明のため、2回実行することに意味がないのであれば2回目は削除する。 何か意図があるのであれば、このissueはcloseしてください。  **Screenshots or Logs**  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context**</body>
		<created>2019-05-08 09:51:52</created>
		<closed>2019-05-13 04:30:26</closed>
	</bug>
	<bug>
		<id>43</id>
		<title>JavaのRTCでBasicDataType.idl等にidljを実行しようとする</title>
		<body>**Describe the bug** RTC BuilderでJavaのコード生成時に、build_***.idlで以下のようにBasicDataType.idl等にidljを実行しようとする。  ``` &lt;target name="idlcompile"  depends="mkdir"&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -fall 'idl/ExtendedDataTypes.idl'"/&gt; &lt;/exec&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-td 'src' -fall 'idl/BasicDataType.idl'"/&gt; &lt;/exec&gt; &lt;/target&gt; ```  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderでデータポートを持つRTCを生成。言語にはJavaを指定する。  **Reproducibility** 100％  **Expected behavior** BasicDataType.idl等のインストール済みのIDLファイルはIDLコンパイルしないようにする。  **Screenshots or Logs**  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context** </body>
		<created>2019-05-08 02:19:42</created>
		<closed>2019-05-16 15:04:23</closed>
	</bug>
	<bug>
		<id>42</id>
		<title>JavaのRTCでidlj実行時にインクルードパスにBasicDataType.idl等を配置したパスを指定する</title>
		<body>**Describe the bug** RTCBuilderでJavaのコード生成時に、build_***.xmlで以下のようなエラーが発生する場合がある。  ```      [exec] idl/test.idl (行1): java.io.FileNotFoundException: BasicDataType.idl      [exec] #include "BasicDataType.idl"      [exec]          ^      [exec] idl/test.idl (行6): RTC/Timeは宣言されていない型です。      [exec]         RTC::Time tm;      [exec]                   ^ ```  **To Reproduce** Steps to reproduce the behavior: 1. RTC Builderで独自データ型を持つJavaのRTCを作成 2. build_***.xmlを実行  **Reproducibility** 100％  **Expected behavior** BasicDataType.idl等はインストールしているものを使用するため、以下のようにBasicDataType.idlを配置したパスを指定する必要がある。  ``` &lt;target name="idlcompile"  depends="mkdir"&gt; &lt;exec executable="${java.home}/../bin/idlj"&gt; &lt;arg line="-i '${env.RTM_JAVA_ROOT}/rtm/idl' -td 'src' -fall 'idl/test.idl'"/&gt; &lt;/exec&gt; &lt;/target&gt; ```  ただし、Ubuntuの場合には`${env.RTM_JAVA_ROOT}/rtm/idl`にIDLファイルが配置されないため以下のissueで別途修正する。  - https://github.com/OpenRTM/OpenRTM-aist-Java/issues/22  **Screenshots or Logs**  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context** </body>
		<created>2019-05-08 02:16:24</created>
		<closed>2019-05-25 09:58:33</closed>
	</bug>
	<bug>
		<id>41</id>
		<title>idlcompile.bat、idlcompile.shのomniidl実行時のインクルードパスの設定方法</title>
		<body>**Describe the bug**  RTCBuilderでPythonのコード生成時に、idlcompile.bat、idlcompile.shで以下のようにBasicDataType.idl等を配置したディレクトリのパスが直接指定されている。  ```   %f:python.exe=%omniidl.exe -bpython -I"C:\Program Files\OpenRTM-aist\1.2.0\rtm\idl" idl/test.idl  ```  このパスは環境により違うはずのため、本来は`%RTM_ROOT%\rtm\idl`のように指定される必要がある。     **To Reproduce** Steps to reproduce the behavior: 1. RTCBuilderでPythonのコードを生成  **Reproducibility** 100％  **Expected behavior** Windowsの場合は上記の通りRTM_ROOTのパスを指定する。 Ubuntuの場合は`rtm-config --rtm-idldir`で取得したパスを指定する。  **Screenshots or Logs**  **Environment**  - OS: Windows 10、Ubuntu 18.04  - OpenRTM-aist Version 1.2  **Additional context** </body>
		<created>2019-05-08 01:45:26</created>
		<closed>2019-05-16 05:51:25</closed>
	</bug>
	<bug>
		<id>40</id>
		<title>OpenRTPのみをインストールした場合にRTCBuilderでデータ型の一覧が表示されない</title>
		<body>**Describe the bug** OpenRTPのみをインストールした場合に以下のようにRTCBuilderでデータ型の一覧が表示されない。  ![image](https://user-images.githubusercontent.com/6216077/57342553-5ce57080-717a-11e9-893c-3969d0ea3f1d.png)   **To Reproduce** Steps to reproduce the behavior: 1. インストール時にカスタムを選択する 2. OpenRTPのみを指定してインストールする 3. OpenRTPを起動する 4. RTCBuilderでデータポートの設定を行う  **Reproducibility** 100％  **Expected behavior** BasicDataType.idl等のIDLファイルはOpenRTM-aist C++版がインストールされていない場合でもインストールされている必要がある。Windows、Ubuntuに関わらずIDLファイルが指定の場所に配置されていなければならない。  **Screenshots or Logs**  **Environment**  - OS:  Windows 10  - OpenRTM-aist 1.2  **Additional context** </body>
		<created>2019-05-08 01:20:11</created>
		<closed>2019-07-04 01:06:21</closed>
	</bug>
	<bug>
		<id>39</id>
		<title>OpenRTPのみをインストールした場合にeclipseが起動しない</title>
		<body>**Describe the bug** インストーラーでOpenRTPのみをインストールした場合に以下のようにeclipseが起動しない。  ![image](https://user-images.githubusercontent.com/6216077/57341272-b21e8380-7174-11e9-98f9-26ac1e34da21.png)   **To Reproduce** Steps to reproduce the behavior: 1. インストール時にカスタムを選択する 2. OpenRTPのみを指定してインストールする 3. OpenRTPを起動する  **Reproducibility** 100％  **Expected behavior** OpenRTPのみをインストールした場合でも起動できるようにする。 またはOpenRTPのみをインストールすることはできないようにする。  **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  **Additional context**  </body>
		<created>2019-05-08 01:08:02</created>
		<closed>2019-07-04 01:05:32</closed>
	</bug>
	<bug>
		<id>36</id>
		<title>No initializeParam() call for OutPort in Java RTC code generated by RTCB </title>
		<body>**Describe the bug** RTCBで生成されたRTCのコードに、OutPort変数の初期化関数 initializeParam() が存在しない。（InPort変数はinitializeParam()で初期化されている。  **To Reproduce** Steps to reproduce the behavior: 1. Generate an RTC with OutPort 2. Build the RTC and run it 3. It will exit with "Component create failed." message. 4. Add initializeParam() call for OutPort variable, the RTC runs properly.  **Reproducibility** 100%  **Expected behavior** initializeParam() must be called for OutPort variable as same as InPort variable.  **Screenshots or Logs** None  **Environment**  - OS: Ubnutn 16.04 64bits  - OpenRTM-aist Version 1.2  - ...  **Additional context** None  </body>
		<created>2019-04-26 09:20:26</created>
		<closed>2019-05-09 11:35:36</closed>
	</bug>
	<bug>
		<id>35</id>
		<title>RTCをexitしてもシステムダイアグラム上から表示が消えない</title>
		<body>**Describe the bug** RTCをexitした場合に、RTCが終了したにもかかわらずシステムダイアグラム上に表示され続ける場合がある。  **To Reproduce** Steps to reproduce the behavior: 1. RTCを起動してRTSEのシステムダイアグラム上に配置する 2. RTSE上の操作、もしくはCtrl+CでRTCを終了する  **Reproducibility** 不明  **Expected behavior** RTCをexitした瞬間にシステムダイアグラム上から表示が消える  **Screenshots or Logs**  **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2、2.0  - ...  **Additional context** 以下のようにPythonでコンポーネントオブザーバーを登録するプログラムを作成して動作確認したところ、RTC終了時に`RTC_STATUS ,  FINALIZE:0`が表示されており問題は無かった。 またオブザーバの通信完了前にomniORBの終了処理が完了している可能性も考えたが、RTCが0の場合にマネージャを終了させないようにして動作確認しても表示が消えない問題は発生したので関係ないことが分かった。  ```Python #!/usr/bin/env python # -*- coding: euc-jp -*-    import sys from omniORB import CORBA import OpenRTM_aist import RTC import time import threading import OpenRTM, OpenRTM__POA import SDOPackage  orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID) poa = orb.resolve_initial_references("RootPOA") poa._get_the_POAManager().activate() obj = orb.string_to_object("corbaname:iiop:localhost:2809#ConsoleOut0.rtc") rtc = obj._narrow(RTC.RTObject)   class ComponentObserver_i(OpenRTM__POA.ComponentObserver):   def __init__(self):     pass    def update_status(self, status_kind, hint):     print("update_status: ", status_kind, ", ", hint)     return    servant = ComponentObserver_i() oid = poa.servant_to_id(servant) provider = poa.id_to_reference(oid)  config = rtc.get_configuration() properties = [OpenRTM_aist.NVUtil.newNV("heartbeat.enable","YES"),               OpenRTM_aist.NVUtil.newNV("heartbeat.interval","10"),               OpenRTM_aist.NVUtil.newNV("observed_status","ALL")]  id = OpenRTM_aist.toTypename(servant) sprof = SDOPackage.ServiceProfile("test_id2", id,                                   properties, provider)  ret = config.add_service_profile(sprof) sys.stdin.readline() rtc.exit() sys.stdin.readline() ret = config.remove_service_profile("test_id2") ``` </body>
		<created>2019-04-26 03:23:55</created>
		<closed>2019-05-10 10:16:04</closed>
	</bug>
	<bug>
		<id>34</id>
		<title>ポート、RTCの名前が表示されない</title>
		<body>**Describe the bug** 以下のようにポートやRTCの名前が表示されなくなることがある。もしかすると、RTSystemEditor側ではなくEdgeRTCが原因かもしれない（下記参照）が、EdgeRTC自体はポートが消えた後でも動き続けているため、RTSystemEditor型の問題の可能性が濃厚。  ![image](https://user-images.githubusercontent.com/6216077/56478504-e47c7f80-64ea-11e9-8f13-bb1563113e19.png)   **To Reproduce** 再現性の有無は今のところ不明だが、以下の手順でRTC同士を接続しActivateたところ、RTSystemEditor上からポートが消え、ブロックの長方形のみのRTCになる。なお、この状態でRTCをクリックすると、ポートなどがないRTCProfileが右のビューに表示される。  * Windows上で1.2のOpenCVCameraRTC、CameraViewerRTCを起動 * Linux上で1.1.2のEdgeRTCを起動 * Windows上のRPC版RTSystemEditorでRTC間のポートを接続 * Activateすると、エディタ上のEdgeRTCのポートアイコンが消え、Profile上もポートがないRTCのように見える * ただし、接続は維持されており、画像表示も継続される。 * この現状はEdgeRTCでのみ発生している？（Hough, Rotate, Flipなどでは発生せず。） * Activate時？に以下のメッセージがEdgeRTCのコンソールに表示される。  `omniORB: To endpoint: giop:tcp:[::ffff:10.211.55.10]:53406. System exception MARSHAL(YES,MARSHAL_MessageSizeExceedLimitOnClient) while (un)marshalling. Send GIOP 1.2 MessageError.`  **Reproducibility** 上記の環境では100％再現する。 他の組み合わせについてはまだ試していない。  **Expected behavior** たとえ、1.1.2のRTCとの組み合わせでも、RTSYSTEMEDITOR側では正しく表示されるべき。  **Screenshots or Logs**   **Environment** 実行環境について加筆をお願いします。  - OS: Ubnutn 16.04 64bits, Windows 10 64bit  - OpenRTM-aist Version 1.1.2 (Ubuntu), 1.2 (Windows)  **Additional context**  </body>
		<created>2019-04-22 01:40:32</created>
		<closed>2019-04-25 06:37:29</closed>
	</bug>
	<bug>
		<id>33</id>
		<title>Wrong context menue appears on RTSystemEditor RCP when right clicking an RTC.</title>
		<body>**Describe the bug** RTSystemEditor RCP上でRTCをクリックすると、RTCを複数クリックしたときのコンテキストメニュー（複合コンポーネントを作成、Activate Systems等を含む）が表示される。 本体は、1つのRTCを右クリックした場合には、Activate/Deactivateなどを含むコンテキストメニューが表示されなければならない。  **To Reproduce** Steps to reproduce the behavior: 1. NS, RTSystemEditorRCP, RTCを起動 2. RTCをNS ViewからEditorにDnD 3. エディタ上のRTCを右クリック 4. コンテキストメニューを確認  **Reproducibility** 100％発現  **Expected behavior** 1つのRTCをクリックした場合、Activate/Deactivate/Resetを含むコンテキストメニューが表示される。  **Screenshots or Logs** ![rtsystemeditor_rightclick](https://user-images.githubusercontent.com/11814060/55816511-5dfc9100-5b2d-11e9-93cf-c90682ce020c.png)  **Environment**  - OS: Windows 10 64bit  - OpenRTM-aist Version 1.2.0  **Additional context** 特になし。 </body>
		<created>2019-04-09 16:19:26</created>
		<closed>2019-04-10 01:34:35</closed>
	</bug>
	<bug>
		<id>19</id>
		<title>rtc.confのmanager.components.preconnect説明が古いため修正する</title>
		<body>**Describe the bug**   **To Reproduce** rtc.confの`manager.components.preconnect`の項目の説明が古いものになっているため以下の内容に修正する。  ``` # Example: # manager.components.preconnect: ConsoleIn.out?port=ConsoleOut.in&amp;dataflow_type=push&amp;interface_type=corba_cdr, SeqIn.octet?port=SeqOut.octet&amp;dataflow_type=push&amp;interface_type=direct # if no parenthis parts are included, dataflow_type=push, interface_type=corba_cdr # ```   **Reproducibility**  **Expected behavior**   **Screenshots or Logs**   **Environment**   **Additional context**  </body>
		<created>2019-02-08 00:29:47</created>
		<closed>2019-02-13 08:43:37</closed>
	</bug>
	<bug>
		<id>7</id>
		<title>[RTSE]システムダイアグラム上にポート名等の文字が残る</title>
		<body>**Describe the bug** RTCを強制終了、再起動、システムダイアグラム上へのドラッグアンドドロップをすると、システムダイアグラム上に文字が残ることがある。  ![](https://user-images.githubusercontent.com/19547996/51525000-b1d2d480-1e72-11e9-9d48-56fcdaf53c36.png)   **To Reproduce** Steps to reproduce the behavior: 1. RTCを強制終了、再起動する 2. RTCをシステムダイアグラム上にドラッグアンドドロップする 3. 1.、2.を繰り返す 4. システムダイアグラム上に終了済みのRTCのポート名等が残る  **Reproducibility** 上記手順を繰り返した場合にほぼ確実に発生  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  - ...  **Additional context**  </body>
		<created>2019-01-29 01:00:50</created>
		<closed>2019-03-08 09:32:55</closed>
	</bug>
	<bug>
		<id>6</id>
		<title>[RTSE]2つ以上のRTCを同時にシステムダイアグラム上にドラッグアンドドロップするとフリーズすることがある</title>
		<body>**Describe the bug** RTCの強制終了、再起動直後に2つ以上のRTCをシステムダイアグラム上に同時にドラッグアンドドロップするとフリーズする。  **To Reproduce** Steps to reproduce the behavior: 1. RTCを強制終了、再起動する 2. ネームサービスビュー上で2つ以上のRTCを選択する  ![](https://user-images.githubusercontent.com/6216077/51575566-e9cf2b80-1ef5-11e9-9b3d-b1b4a6accc63.png)  3. システムダイアグラムにドラッグアンドドロップする 4. フリーズする  **Reproducibility** 3回に1回程度  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2  - ...  **Additional context**  </body>
		<created>2019-01-29 00:57:54</created>
		<closed>2019-03-08 09:33:03</closed>
	</bug>
	<bug>
		<id>5</id>
		<title>[RTSE]RTC強制終了、再起動直後にネームサービスビューのRTCを選択するとフリーズする</title>
		<body>**Describe the bug** RTCのプロセスを強制終了した直後にネームサービスビューのRTCを選択するとフリーズすることがある。  **To Reproduce** Steps to reproduce the behavior: 1. RTCを強制終了する 2. RTCを再起動する 3. ネームサービスビューのRTCを選択する 4. RTSEがフリーズする  **Reproducibility** 以下の状態で発生しやすい傾向がある。  - 2つ以上のRTCを強制終了、再起動する - 再起動直後に、ネームサービスビューで片方のRTCがゾンビ状態、片方は正常に表示されている状況でRTCを選択する  **Expected behavior**   **Screenshots or Logs**   **Environment**  - OS: Windows 10  - OpenRTM-aist 1.2   **Additional context** </body>
		<created>2019-01-29 00:54:21</created>
		<closed>2019-03-08 09:33:11</closed>
	</bug>
	<bug>
		<id>1</id>
		<title>システムダイアグラム上のRTCが消えない、OpenRTPが固まる</title>
		<body>システムダイアグラム上にRTCを表示している状態でRTCのプロセスを終了させるとOpenRTPが固まる、もしくはシステムダイアグラム上にRTCが残り続ける現象が発生します。  対象：RELENG_1_2ブランチ</body>
		<created>2019-01-22 02:08:22</created>
		<closed>2019-01-29 06:44:42</closed>
	</bug>
</bugs>
