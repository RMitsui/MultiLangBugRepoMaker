<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>611</id>
		<title>win環境でTargetProjectFactoryTestが落ちる</title>
		<body>#596 の副作用  PathオブジェクトをStringに変換してassertしているため， セパレータの表現（＝OS）に強く依存したテストになっている．  ```java     final String actualBuildConfigPath = "example/BuildSuccess01/build.xml";     final String projectBuildConfigPath = TargetProjectFactory.getBuildConfigPaths(rootPath)         .get(0)         .toString();     ...     assertThat(projectBuildConfigPath).isEqualTo(actualBuildConfigPath); ```  PathはPathのままassertすべき</body>
		<created>2019-04-23 01:20:24</created>
		<closed>2019-04-23 01:43:21</closed>
	</bug>
	<bug>
		<id>600</id>
		<title>java9以上の環境でクラスローダが死ぬ</title>
		<body>```sh build assemble cd example/CloseToZero01 java -jar ../../build/libs/kGenProg-1.3.2.jar ```  上記コマンドを実行すると，以下のエラーがでる． ``` io.reactivex.exceptions.OnErrorNotImplementedException: The exception was not handled due to missing onError handler in the subscribe() method call. Further reading: https://github.com/ReactiveX/RxJava/wiki/Error-Handling | java.lang.RuntimeException: Cannot find extension class loader. at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:704) at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:701) at io.reactivex.internal.observers.ConsumerSingleObserver.onError(ConsumerSingleObserver.java:46) at io.reactivex.internal.operators.single.SingleCache.onError(SingleCache.java:146) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onError(SingleMap.java:69) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:60) at io.reactivex.internal.operators.single.SingleCache.onSuccess(SingleCache.java:134) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:64) at io.reactivex.internal.operators.single.SingleJust.subscribeActual(SingleJust.java:30) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.Single.subscribe(Single.java:3481) at io.reactivex.Single.subscribe(Single.java:3402) at jp.kusumotolab.kgenprog.ga.variant.LazyVariant.subscribe(LazyVariant.java:27) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createVariant(VariantStore.java:188) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createInitialVariant(VariantStore.java:158) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.&lt;init&gt;(VariantStore.java:38) at jp.kusumotolab.kgenprog.KGenProgMain.run(KGenProgMain.java:66) at jp.kusumotolab.kgenprog.CUILauncher.launch(CUILauncher.java:65) at jp.kusumotolab.kgenprog.CUILauncher.main(CUILauncher.java:30) Caused by: java.lang.RuntimeException: Cannot find extension class loader. at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:38) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.&lt;init&gt;(SkippingMemoryClassLoader.java:27) at jp.kusumotolab.kgenprog.project.test.TestThread.run(TestThread.java:98) at jp.kusumotolab.kgenprog.project.test.LocalTestExecutor.exec(LocalTestExecutor.java:29) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:57) ... 21 more Exception in thread "main" io.reactivex.exceptions.OnErrorNotImplementedException: The exception was not handled due to missing onError handler in the subscribe() method call. Further reading: https://github.com/ReactiveX/RxJava/wiki/Error-Handling | java.lang.RuntimeException: Cannot find extension class loader. at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:704) at io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:701) at io.reactivex.internal.observers.ConsumerSingleObserver.onError(ConsumerSingleObserver.java:46) at io.reactivex.internal.operators.single.SingleCache.onError(SingleCache.java:146) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onError(SingleMap.java:69) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:60) at io.reactivex.internal.operators.single.SingleCache.onSuccess(SingleCache.java:134) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:64) at io.reactivex.internal.operators.single.SingleJust.subscribeActual(SingleJust.java:30) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.Single.subscribe(Single.java:3481) at io.reactivex.Single.subscribe(Single.java:3402) at jp.kusumotolab.kgenprog.ga.variant.LazyVariant.subscribe(LazyVariant.java:27) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createVariant(VariantStore.java:188) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createInitialVariant(VariantStore.java:158) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.&lt;init&gt;(VariantStore.java:38) at jp.kusumotolab.kgenprog.KGenProgMain.run(KGenProgMain.java:66) at jp.kusumotolab.kgenprog.CUILauncher.launch(CUILauncher.java:65) at jp.kusumotolab.kgenprog.CUILauncher.main(CUILauncher.java:30) Caused by: java.lang.RuntimeException: Cannot find extension class loader. at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:38) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.&lt;init&gt;(SkippingMemoryClassLoader.java:27) at jp.kusumotolab.kgenprog.project.test.TestThread.run(TestThread.java:98) at jp.kusumotolab.kgenprog.project.test.LocalTestExecutor.exec(LocalTestExecutor.java:29) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:57) ... 21 more 2019-04-01 16:33:37 [main] [INFO]  KGenProgMain - entered the era of 1st generation. Exception in thread "main" java.lang.RuntimeException: Cannot find extension class loader. at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:38) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.findExtClassLoader(SkippingMemoryClassLoader.java:42) at jp.kusumotolab.kgenprog.project.test.SkippingMemoryClassLoader.&lt;init&gt;(SkippingMemoryClassLoader.java:27) at jp.kusumotolab.kgenprog.project.test.TestThread.run(TestThread.java:98) at jp.kusumotolab.kgenprog.project.test.LocalTestExecutor.exec(LocalTestExecutor.java:29) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:57) at io.reactivex.internal.operators.single.SingleCache.onSuccess(SingleCache.java:134) at io.reactivex.internal.operators.single.SingleMap$MapSingleObserver.onSuccess(SingleMap.java:64) at io.reactivex.internal.operators.single.SingleJust.subscribeActual(SingleJust.java:30) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleMap.subscribeActual(SingleMap.java:34) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.internal.operators.single.SingleCache.subscribeActual(SingleCache.java:65) at io.reactivex.Single.subscribe(Single.java:3495) at io.reactivex.Single.subscribe(Single.java:3481) at io.reactivex.Single.subscribe(Single.java:3402) at jp.kusumotolab.kgenprog.ga.variant.LazyVariant.subscribe(LazyVariant.java:27) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createVariant(VariantStore.java:188) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.createInitialVariant(VariantStore.java:158) at jp.kusumotolab.kgenprog.ga.variant.VariantStore.&lt;init&gt;(VariantStore.java:38) at jp.kusumotolab.kgenprog.KGenProgMain.run(KGenProgMain.java:66) at jp.kusumotolab.kgenprog.CUILauncher.launch(CUILauncher.java:65) at jp.kusumotolab.kgenprog.CUILauncher.main(CUILauncher.java:30) ```</body>
		<created>2019-04-01 07:35:30</created>
		<closed>2019-10-03 02:10:42</closed>
	</bug>
	<bug>
		<id>573</id>
		<title>tomlを使わずにkGenProgを実行した時の挙動が変</title>
		<body>Configの値が出力されるだけで，GAのループにすら入らない 原因不明  再現コマンド ```bash cd example/CloseToZero01/ java -jar ../../build/libs/kGenProg-1.2.0.jar  -s src/example/CloseToZero.java -t src/example/CloseToZeroTest.java -r ./ ```</body>
		<created>2019-02-02 05:52:51</created>
		<closed>2019-04-01 09:08:39</closed>
	</bug>
	<bug>
		<id>564</id>
		<title>古い個体が優先的に残される</title>
		<body>tomida実験で発見したバグ (a.k.a. じじい-oriented問題)  新たに生成したFitnessが変化しない個体が残されず， 古い個体が優先的に選ばれている．  どうあるべきかから検討すべき．</body>
		<created>2019-01-28 07:22:09</created>
		<closed>2019-02-02 07:33:47</closed>
	</bug>
	<bug>
		<id>549</id>
		<title>VariantStoreSerializerTest.testConfigurationSerialization が FAIL する</title>
		<body>Related to #512.  カバレッジの計測のため `build.gradle` に `jacoco` プラグインを追加したところ，テストが FAIL するようになった．  ## 変更箇所  ```diff diff --git a/build.gradle b/build.gradle index 04f768cb..98c6c46a 100644 --- a/build.gradle +++ b/build.gradle @@ -13,6 +13,9 @@ apply plugin: 'java'  apply plugin: 'eclipse'  apply plugin: 'idea'  +// Apply JaCoCo plugin +apply plugin: 'jacoco' +  // Set compiler version  sourceCompatibility = '1.8'  targetCompatibility = '1.8' ```  ## FAIL したテストの出力  ``` java.lang.AssertionError:  Expecting:   &lt;["targetProject",     "executionTests",     "outDir",     "mutationGeneratingCount",     "crossoverGeneratingCount",     "headcount",     "maxGeneration",     "timeLimit",     "testTimeLimit",     "requiredSolutionsCount",     "logLevel",     "randomSeed",     "scope",     "needNotOutput"]&gt; to contain only:   &lt;["targetProject",     "executionTests",     "outDir",     "mutationGeneratingCount",     "crossoverGeneratingCount",     "headcount",     "maxGeneration",     "timeLimit",     "testTimeLimit",     "requiredSolutionsCount",     "logLevel",     "randomSeed",     "scope",     "needNotOutput",     "$jacocoData"]&gt; but could not find the following elements:   &lt;["$jacocoData"]&gt;  at jp.kusumotolab.kgenprog.output.VariantStoreSerializerTest.testConfigurationSerialization(VariantStoreSerializerTest.java:147) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:52) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:303) at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:297) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2019-01-21 06:55:39</created>
		<closed>2019-01-25 13:08:25</closed>
	</bug>
	<bug>
		<id>541</id>
		<title>題材とKGPが同libを利用する場合にバグる</title>
		<body>kgpと題材が同lib/別verを利用する際にバグる． テスト実行時のクラスローダのバグである．  ### 内藤実験で発生したシナリオ 題材closure-compilerはguava-19に依存，kgpはguava-26に依存する． guavaの19と26は互換性がない．  kgpによってguava-26がロードされてしまうので， テスト実行時，すなわち19を期待する題材を実行する際に26が利用されてしまう．  ### 根本原因 題材実行時ののクラスローダ（MemoryClassLoader）が， kgpのシステムクラスローダにまでロード処理を委譲してしまうのが問題．  ### 直し方？ コンパイル時はうまくクラスローダの切り分けができているので， その実装を参考にすると直せるかもしれない．</body>
		<created>2019-01-18 07:41:38</created>
		<closed>2019-01-28 06:02:28</closed>
	</bug>
	<bug>
		<id>530</id>
		<title>題材がクラスローダのバイナリresourceを読む場合に死ぬ</title>
		<body>単なるFS上のresourceファイルを読む場合は正しく動作するが (#529) ， ClassLoaderが抱えているバイナリresourceを読む場合はうまく動作しない．  springフレームワークを用いる題材で発生するバグ．  `MemoryClassLoader#getResourceAsStream` のOverrideが必須．</body>
		<created>2019-01-14 03:20:38</created>
		<closed>2019-01-15 01:17:01</closed>
	</bug>
	<bug>
		<id>514</id>
		<title>ClassPathオブジェクトのequalsに潜在バグ</title>
		<body>`Path` のラッパーである `ClassPath` オブジェクトの `equals` メソッドが単純な文字列で比較しており， 潜在バグになっている．  ```java    @Override    public boolean equals(Object o) {     return this.toString()         .equals(o.toString()); ```  以下のような場合にequalsはfalseを返してしまう - 相対パスと絶対パスの比較 - `./a.jar` と `a.jar` の比較 </body>
		<created>2019-01-08 01:43:33</created>
		<closed>2019-01-08 03:51:40</closed>
	</bug>
	<bug>
		<id>475</id>
		<title>VariantStoreExporter#writeToFile で StackOverflowError</title>
		<body>``` $ cd kgenprog $ kgp=$(pwd)/build/libs/kGenProg-1.0.0.jar $ r=example/CloseToZero01; pushd .; cd $r; java -jar $kgp; popd ```  スタックトレース： ``` Exception in thread "main" java.lang.StackOverflowError at com.google.gson.internal.bind.ArrayTypeAdapter.write(ArrayTypeAdapter.java:94) at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) at com.google.gson.internal.bind.ArrayTypeAdapter.write(ArrayTypeAdapter.java:95) at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) at com.google.gson.internal.bind.ArrayTypeAdapter.write(ArrayTypeAdapter.java:95) at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) at com.google.gson.internal.bind.ArrayTypeAdapter.write(ArrayTypeAdapter.java:95) at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245) ... ```  ここの JSON の書き出しで発生しているっぽい https://github.com/kusumotolab/kGenProg/blob/e05784a1d2d25cb0e134ed6c3f89ef652a717076/src/main/java/jp/kusumotolab/kgenprog/output/VariantStoreExporter.java#L32</body>
		<created>2018-12-23 07:24:38</created>
		<closed>2018-12-25 07:09:45</closed>
	</bug>
	<bug>
		<id>468</id>
		<title>Variant の isSyntaxValid() の結果が不適切</title>
		<body>Variant が文法的に正しいかどうかの判定を `GeneratedSourceCode` か `GenerationFailedSourceCode` かで判定している． ただ，枝切りによって `GenerationFailedSourceCode` と判定された場合，文法的には正しいのに `isSyntaxValid()` の結果が false になる</body>
		<created>2018-12-18 11:39:33</created>
		<closed>2019-05-04 07:19:45</closed>
	</bug>
	<bug>
		<id>433</id>
		<title>JUnitのannotationタイムアウトが継承ベース記法では適用されない</title>
		<body>何故か途中で停止する． 理由は不明． CPUは100％ ``` $ cd /opt/apr-data/example/math060 $ java -jar /opt/apr-data/bin/kgp.jar -r ./ -s src/main/java -t src/test/java -x org.apache.commons.math.distribution.NormalDistributionTest --time-limit 600 --test-time-limit 3 --max-generation 1000 --headcount 10 --mutation-generating-count 90 --crosso ver-generating-count 10 -o /opt/apr-data/tmp ```</body>
		<created>2018-11-19 01:19:52</created>
		<closed>2019-01-05 14:06:32</closed>
	</bug>
	<bug>
		<id>423</id>
		<title>classpathの指定周りでバグ</title>
		<body> ビルド時のCP    → 意図通り正しく動いている  テスト実行時のCP  → cpで指定されたjunitではなく，kgpに同梱されているjunitが解決されている </body>
		<created>2018-11-15 08:23:21</created>
		<closed>2018-12-28 08:53:23</closed>
	</bug>
	<bug>
		<id>418</id>
		<title>JUnitのannotationタイムアウトでスレッドがkillされない</title>
		<body>#408 の修正により，テストが無限ループした際のJUnitの打ち切りがうまく働くようになった． 一方で，タイムアウト発生後の別のテストがやたら遅くなった．  前提：QSortは無限ループを発生させやすいテストである．  QSortを実行しない場合のMainTestの結果 ![image](https://user-images.githubusercontent.com/5342911/48473665-4a7a2200-e83c-11e8-9d17-8c30ce864698.png)  QSortを実行した場合のMainTestの結果 ![image](https://user-images.githubusercontent.com/5342911/48473792-8f05bd80-e83c-11e8-8f84-099c00b0b9c2.png)  倍くらい遅くなる．マウス動作が苦しいレベル． CPUが100％にへばりつくので，謎プロセスが残ってる？</body>
		<created>2018-11-14 09:40:02</created>
		<closed>2019-01-05 14:06:32</closed>
	</bug>
	<bug>
		<id>404</id>
		<title>GAパラメタのデフォルト値が適切でない</title>
		<body>#377 でGAパラメタの「意味」が変わったが，「デフォルト値」が元のまんま． ``` 意味asis：個々の親が生成する子の数 意味tobe：1世代で生成する子の総数  デフォルト値asis：10 デフォルト値tobe：10 ```  よって，デフォルトで親100個から子10個を生み出して，次の世代を10個に絞る，という GAらしからぬ挙動になっている． 親がやたら残るので，GAにおける進化らしい挙動になっていない．</body>
		<created>2018-11-07 08:45:27</created>
		<closed>2018-12-25 09:53:11</closed>
	</bug>
	<bug>
		<id>392</id>
		<title>無限ループ発生時にKGPが正常に終了しない</title>
		<body>CUI実行で発生．  ```console $ r=example/real-bugs/Math73; pushd .; cd $r; java -jar $kgp/kGenProg.jar; popd; ... [main] [INFO]  jp.kusumotolab.kgenprog.KGenProgMain - in the era of the 9th generation (54 seconds) [main] [INFO]  jp.kusumotolab.kgenprog.ga.VariantStore - exec selection. 10th variants: (85, 12) =&gt; 97 [main] [INFO]  jp.kusumotolab.kgenprog.KGenProgMain - in the era of the 10th generation (58 seconds) [main] [INFO]  jp.kusumotolab.kgenprog.KGenProgMain - reached the time limit  (ここで停止) ```  CPU回ってるので無限ループしているっぽい？</body>
		<created>2018-11-03 01:17:13</created>
		<closed>2019-01-05 14:06:32</closed>
	</bug>
	<bug>
		<id>357</id>
		<title>クラスパスにディレクトリを指定するとビルドに失敗する</title>
		<body>タイトルの通り． クラスパスにディレクトリを指定した場合，`TargetProject` にはそのディレクトリに含まれるすべてのクラスファイルがクラスパスとして登録されている． しかし，クラスパスとしてクラスファイルを直接指定すると，コンパイルの際にクラスファイルのパッケージが分からないためビルドに失敗する．</body>
		<created>2018-10-15 04:38:27</created>
		<closed>2018-10-16 04:29:29</closed>
	</bug>
	<bug>
		<id>334</id>
		<title>ConfigurationBuilderTest が不適切</title>
		<body>`ConfigurationBuilderTest #testBuildFromCmdLineArgsWithSameRootDir` の assert の仕方が不適切． logback.xml を編集し，ログレベルを変更するとテストが fail する．</body>
		<created>2018-09-27 06:42:48</created>
		<closed>2018-09-27 06:43:38</closed>
	</bug>
	<bug>
		<id>299</id>
		<title>メモリを使いすぎて死ぬ</title>
		<body> ``` 2018-09-05 23:38:36 [main] [DEBUG] jp.kusumotolab.kgenprog.ga.DefaultCodeValidation - enter exec(Gene, TargetProject) Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded ```  Math73の2世代目後半で発生する． ガバメモリ実装が原因．  基本的にオンメモリでの全Variantの記録は非現実的，というか不可能．</body>
		<created>2018-09-05 14:45:25</created>
		<closed>2019-03-07 05:08:17</closed>
	</bug>
	<bug>
		<id>298</id>
		<title>MemoryClassLoader#findClassでNPE</title>
		<body>ロードしようとしたクラスバイナリが登録されていない場合に発生する． なぜそのような状況が起きるのか？？  Math73の2世代目辺りから発生．</body>
		<created>2018-09-05 14:42:57</created>
		<closed>2018-09-28 11:01:41</closed>
	</bug>
	<bug>
		<id>297</id>
		<title>EmptyBuildResults#getCompilationPackageでNPE</title>
		<body>EBRの実装的にそうなるのは自明． ただなぜ今まで発生せずMathで発生するようになったのか？  Math73の2世代目あたりから発生する．</body>
		<created>2018-09-05 14:41:56</created>
		<closed>2018-09-28 11:06:36</closed>
	</bug>
	<bug>
		<id>288</id>
		<title>failするテストが成功扱いになっている</title>
		<body>Math73が題材． 失敗テストが存在しないことになってしまって，当然FL無理，バグ直らない．  mvnではテストが失敗する（当然Defects4jにもそのテストがfailと明記されている） ```sh $ mvn -Dtest=org.apache.commons.math.analysis.solvers.BrentSolverTest test ... [INFO] Surefire report directory: C:\pbl\workspace\kGenProg\example\Math73\target\surefire-reports  -------------------------------------------------------  T E S T S ------------------------------------------------------- Running org.apache.commons.math.analysis.solvers.BrentSolverTest Tests run: 6, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.1 sec &lt;&lt;&lt; FAILURE!  Results :  Failed tests:   testBadEndpoints(org.apache.commons.math.analysis.solvers.BrentSolverTest)  Tests run: 6, Failures: 1, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 5.280 s [INFO] Finished at: 2018-08-31T20:30:28+09:00 [INFO] ------------------------------------------------------------------------ ```  上記のテストレポート ``` ------------------------------------------------------------------------------- Test set: org.apache.commons.math.analysis.solvers.BrentSolverTest ------------------------------------------------------------------------------- Tests run: 6, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.104 sec &lt;&lt;&lt; FAILURE! testBadEndpoints(org.apache.commons.math.analysis.solvers.BrentSolverTest)  Time elapsed: 0.022 sec  &lt;&lt;&lt; FAILURE! junit.framework.AssertionFailedError: Expecting IllegalArgumentException - non-bracketing at junit.framework.Assert.fail(Assert.java:47) at org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints(BrentSolverTest.java:334) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ```  failするテストの中身 ```java     public void testBadEndpoints() throws Exception {       ...         try {  // no bracket             solver.solve(f, 1, 1.5, 1.2);             fail("Expecting IllegalArgumentException - non-bracketing");         } catch (IllegalArgumentException ex) {             // expected         }     } ```  KGPでのJUnitの結果 ```json org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints={   "executedTestFQN": "org.apache.commons.math.analysis.solvers.BrentSolverTest.testBadEndpoints",   "wasFailed": false,   "coverages": [     //   ] } ```</body>
		<created>2018-08-31 11:42:55</created>
		<closed>2018-09-27 02:04:54</closed>
	</bug>
	<bug>
		<id>287</id>
		<title>KGP実行時のテストの指定方法が不完全</title>
		<body>KGPのパラメタ指定で以下2つの区別がついていない．  a. どのテストをビルドするか b. どのテストを実行するか  現在a=bの状態．  ここでfailするテスト（a=b=`XTest`）のみの最小構成でKGPを起動した場合を考える． テストとしては`XTest`のみがビルドされる． `XTest`が他のテストユーティリティ`Util`に依存を持っている場合， `Util`がビルドされておらずクラスロードに失敗しテストも死ぬ．  起動パラメタでaとbを区別させないといけない． ```sh # ファイル名として「どのテストを実行するか」を指定する $ kgp -r Math70 -s src/main/java -t src/test/java -T src/test/java/org/apache/.../BrentSolverTest.java  # あるいはFQNで指定（mvn等はこっち） $ kgp -r Math70 -s src/main/java -t src/test/java -T org.apache...BrentSolverTest ```</body>
		<created>2018-08-31 10:51:23</created>
		<closed>2018-09-26 03:02:33</closed>
	</bug>
	<bug>
		<id>285</id>
		<title>行番号のズレに由来するバグ</title>
		<body>derived from #269   ``` // lineNumber=176 // [org.apache.commons.math3.dfp.DfpField, org.apache.commons.math3.dfp.DfpField$RoundingMode]  Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 175, Size: 56 at java.util.ArrayList.rangeCheck(ArrayList.java:657) at java.util.ArrayList.get(ArrayList.java:433) at jp.kusumotolab.kgenprog.project.test.TestResults.getTestFQNs(TestResults.java:149) at jp.kusumotolab.kgenprog.project.test.TestResults.lambda$2(TestResults.java:129) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1553) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.LongPipeline.reduce(LongPipeline.java:438) at java.util.stream.LongPipeline.sum(LongPipeline.java:396) at java.util.stream.ReferencePipeline.count(ReferencePipeline.java:526) at jp.kusumotolab.kgenprog.project.test.TestResults.getNumberOfTests(TestResults.java:131) at jp.kusumotolab.kgenprog.project.test.TestResults.getNumberOfFailedTestsExecutingTheStatement(TestResults.java:179) at jp.kusumotolab.kgenprog.fl.Ochiai.exec(Ochiai.java:43) at jp.kusumotolab.kgenprog.KGenProgMain.run(KGenProgMain.java:121) at jp.kusumotolab.kgenprog.Trial.main(Trial.java:60) ```</body>
		<created>2018-08-30 13:47:51</created>
		<closed>2018-09-27 01:54:53</closed>
	</bug>
	<bug>
		<id>283</id>
		<title>MemoryClassLoaderが多重ロード時に死ぬ</title>
		<body>#263 の見逃しバグ． これで直る． ```diff       try {         return defineClass(name.toString(), bytes, 0, bytes.length); +      } catch (final LinkageError e) {  // もう一段抽象的な例外で掴むことで多重ロードをキャッチ -      } catch (final ClassFormatError  e) { ```  きちんとテストせんといかんなぁ</body>
		<created>2018-08-30 13:19:52</created>
		<closed>2018-09-28 03:55:41</closed>
	</bug>
	<bug>
		<id>272</id>
		<title>PR#259のマージにより CI が落ちるようになっている</title>
		<body>### 問題は？ PR #259 のマージ後，`org.apache.maven.model` 等への依存解決ができずに CI が落ちている．  ### 原因は？ PR #259 と PR #271 の不調和が原因っぽい． もともとは恐らく，`jacoco-maven-plugin` が `org.apache.maven.model` 等への依存を持っており，`org.apache.maven.model` 等への依存を解決できていた． それが，PR #271 のマージにより，`jacoco-maven-plugin` への依存が切られたのにもかかわらず，PR #259 で `org.apache.maven.model` 等を利用しているため，依存解決ができなくなっている模様．  ### 対策は？ `org.apache.maven.model` 等への依存を追加すれば直りそう．</body>
		<created>2018-08-22 08:50:17</created>
		<closed>2018-08-22 09:01:59</closed>
	</bug>
	<bug>
		<id>269</id>
		<title>Math5が修正できない</title>
		<body>実アプリ系題材として手始めにMath5を試した（他MathXは未適用）． どうも速度とバグの両面の問題がありそう．  ### ざっくりパフォーマンス計測 Math5には771実装クラスと460テストクラスがある． 概ね以下のような結果．テストが終わらない．  ``` 15s：ビルド処理（全クラスに対して．`mvn compile`では12秒なので十分） 15s：AST構築（実装クラスのみに対して）  3s：クラスロード＋jacoco書き換え（全クラスに対して） 10m：テスト実行（死） ```  ### 全てのテストを実行する必要はないのでは？ Yes．テストに失敗する`ComplexTest`のみが実行できれば良い． `ComplexTest`は`TestUtils`に依存しているので，その2つをTestSourcePathに渡せば良い． 現在，手作業で依存を解析してTestSourcePathを構築したが， それは本来誰が，どうやってやる作業だろうか？（→ 別ISSUE★）  ### 行番号のズレっぽいバグ 上記の部分テストを行っても以下のようなバグが出る． おそらく行番号のズレが原因．  ``` java.lang.IndexOutOfBoundsException: Index: 599, Size: 593 at java.util.ArrayList.rangeCheck(ArrayList.java:657) at java.util.ArrayList.get(ArrayList.java:433) at jp.kusumotolab.kgenprog.project.test.TestResults.getTestFQNs(TestResults.java:145) at jp.kusumotolab.kgenprog.project.test.TestResults.lambda$2(TestResults.java:125) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1553) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.LongPipeline.reduce(LongPipeline.java:438) at java.util.stream.LongPipeline.sum(LongPipeline.java:396) at java.util.stream.ReferencePipeline.count(ReferencePipeline.java:526) at jp.kusumotolab.kgenprog.project.test.TestResults.getNumberOfTests(TestResults.java:127) at jp.kusumotolab.kgenprog.project.test.TestResults.getNumberOfFailedTestsExecutingTheStatement(TestResults.java:175) ``` `org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1`が593行持っていて， こいつに対して599行目を参照して死んでいる．  パフォーマンスが低すぎてデバッグがかなり難しい． </body>
		<created>2018-08-21 06:35:06</created>
		<closed>2018-12-10 02:22:53</closed>
	</bug>
	<bug>
		<id>233</id>
		<title>jacocoで書き換えたclassファイルがロックされている</title>
		<body>潜在バグ．  jacocoで書き換えしたclassファイルのInputStreamを閉じていないので， GAの次イテレートでの書き換えにfailする．  現在，テストを別プロセスで実行されているので顕在化していないが，明らかなバグ．  </body>
		<created>2018-08-09 03:36:01</created>
		<closed>2018-08-09 06:37:53</closed>
	</bug>
	<bug>
		<id>212</id>
		<title>DefaultVariantSelection#execでComparatorによる例外</title>
		<body>KGenProgMainTestのtest05と06で発生中．  ``` java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.TimSort.mergeLo(TimSort.java:777) at java.util.TimSort.mergeAt(TimSort.java:514) at java.util.TimSort.mergeCollapse(TimSort.java:441) at java.util.TimSort.sort(TimSort.java:245) at java.util.Arrays.sort(Arrays.java:1512) at java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:348) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:499) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at jp.kusumotolab.kgenprog.ga.DefaultVariantSelection.exec(DefaultVariantSelection.java:30) at jp.kusumotolab.kgenprog.KGenProgMain.run(KGenProgMain.java:165) ```  DefaultVariantSelectionのここが問題． Variantのコンパレータの推移性が満たされていないっぽい． https://stackoverflow.com/a/8327575 ```java     final List&lt;Variant&gt; list = variants.stream()         .sorted((o1, o2) -&gt; compareFitness(o1.getFitness(), o2.getFitness()))         .limit(maxVariantsPerGeneration)         .collect(Collectors.toList()); ``` このバグにより別issueがマージができないので，test05/06は一旦`@Ignore`を追加． このISSUE解決したら戻してください． </body>
		<created>2018-07-25 12:03:02</created>
		<closed>2018-07-26 01:40:12</closed>
	</bug>
	<bug>
		<id>210</id>
		<title>KGenProgMainTestでexample04-06が死ぬ</title>
		<body>おそらくAssertJ化のリファクタリング #196 の副作用</body>
		<created>2018-07-25 09:28:38</created>
		<closed>2018-07-26 04:14:43</closed>
	</bug>
	<bug>
		<id>197</id>
		<title>Win+Gradleでテストがコケる</title>
		<body>明らかに環境依存バグ． ```sh $ gradle test :compileJava :processResources :classes :compileTestJava :processTestResources NO-SOURCE :testClasses :test  jp.kusumotolab.kgenprog.project.DiffOutputTest &gt; testDiffOutput2 FAILED     java.lang.AssertionError at DiffOutputTest.java:116  jp.kusumotolab.kgenprog.project.ProjectBuilderTest &gt; testBuildStringForExample03 FAILED     org.junit.ComparisonFailure at ProjectBuilderTest.java:80 ```</body>
		<created>2018-07-20 12:00:22</created>
		<closed>2018-08-20 07:05:57</closed>
	</bug>
	<bug>
		<id>193</id>
		<title>DatatypeConverterはJava9から使えない</title>
		<body>Refs #158   javax.xml.bind.DatatypeConverter はJava9からデフォルトでは使えないのにも関わらず、GeneratedSourceCode と GeneratedJDTAST で使用している。</body>
		<created>2018-07-20 05:13:13</created>
		<closed>2018-07-20 06:28:47</closed>
	</bug>
	<bug>
		<id>186</id>
		<title>ProjectBuilder#buildがnullを返している</title>
		<body>created from pr #183   ```java   public BuildResults build(final GeneratedSourceCode generatedSourceCode, final Path workingDir) {      // workingDir が存在しなければ生成     if (Files.notExists(workingDir)) {       try {         Files.createDirectories(workingDir);       } catch (IOException e) {         log.error(e.getMessage(), e);          // TODO should be considered         return null;       }     }     ... ```  潜在バグの状態． NullObjectパターンにしたい． EmptyBuildResultsとか．</body>
		<created>2018-07-18 01:45:38</created>
		<closed>2018-08-06 01:36:22</closed>
	</bug>
	<bug>
		<id>150</id>
		<title>Mac環境で古いclassファイルの削除が失敗する</title>
		<body>コンパイル時間とファイルの更新時間が数十ミリ秒しか違わないので，ファイルの更新日時が丸め稀れることにより，誤って古いファイルと見なされてしまう</body>
		<created>2018-07-09 03:49:05</created>
		<closed>2018-08-20 21:14:15</closed>
	</bug>
	<bug>
		<id>128</id>
		<title>KGenProgMainで成功したVariantが残されていない</title>
		<body>APRの毎世代ループで成功Variantが保持されておらず， 複数の成功Variantを出力することができない． 単一の成功Variantなら出力できる．</body>
		<created>2018-06-27 09:37:27</created>
		<closed>2018-07-11 10:01:51</closed>
	</bug>
	<bug>
		<id>127</id>
		<title>InsertOperationで挿入失敗したときの例外が適切に処理されていない</title>
		<body>InsertOperation L62  RuntimeExceptionを誰かが掴むべき</body>
		<created>2018-06-27 09:34:57</created>
		<closed>2018-07-11 09:53:43</closed>
	</bug>
	<bug>
		<id>124</id>
		<title>ビルド失敗したときのFitnessが計算されていない</title>
		<body>DefaultCodeValidation.java L12  ビルド成功を前提に動いている  ### how to solve? α: DefaultCodeValidationでビルド失敗したらFitnessを-1にして返す．</body>
		<created>2018-06-27 09:07:22</created>
		<closed>2018-07-11 05:38:08</closed>
	</bug>
	<bug>
		<id>123</id>
		<title>TestProcessBuilderでビルド失敗時の処理がない</title>
		<body>TestProcessBuilder.java L57  ビルド結果を確認してビルドの成否を判断すべき  ### how to solve α: ビルド失敗していたらOptionalで包んで返す．</body>
		<created>2018-06-27 09:04:46</created>
		<closed>2018-07-10 09:06:10</closed>
	</bug>
	<bug>
		<id>122</id>
		<title>DeleteOperationでブロックを削除する際に失敗する</title>
		<body>ブロックが削除候補になった場合，ブロックは消せないのでIllegalArgumentExceptionが発生してしまう． 場合によってはブロックが消せることもある．`else {}` 等  ### how to solve? α: 不可能なOperationが発生した場合にapply()メソッド内から例外を吐く → 例外の代わりにOptionalでラップして返す．  ### うまくDeleteできなかった場合でもVariantの個数を確保したい βでやる． あんがいむずそう </body>
		<created>2018-06-27 09:03:28</created>
		<closed>2018-07-11 09:24:22</closed>
	</bug>
	<bug>
		<id>121</id>
		<title>InitialVariantが生のソースコードを見てしまっていてASTと行番号がずれる</title>
		<body>InitialVariantでは生ファイルではなくASTから生成した行番号を参照すべき．</body>
		<created>2018-06-27 08:55:39</created>
		<closed>2018-07-04 22:21:19</closed>
	</bug>
	<bug>
		<id>119</id>
		<title>TestProcessBuilderでtmpがexample配下に存在していることを期待してしまっている</title>
		<body>TestProcessBuilder L65  こういう場合にバグる模様 ```java rootPath = "example/example01" tmpDir   = "example/example01/tmp"  // これはOK．tmpがrootPath配下に存在する． tmpDir   = "tmp"                    // これがバグる tmpDir   = System.getProperty("java.io.tmpdir") // これも当然out ```  加え，絶対パスと相対パスの間でのバグも存在するので注意． relativiseによる相対パスの減算で失敗している． </body>
		<created>2018-06-27 08:52:58</created>
		<closed>2018-07-04 06:41:38</closed>
	</bug>
	<bug>
		<id>118</id>
		<title>KGenProgMainでTestProcessBuilder生成時にoutdirが指定されていない</title>
		<body>KGenProgMain L44  ### how? α: 何も考えずに $TMP にぶち込む β: CUIでoutdirを指定できるようにする  ### そもそも名前がおかしい workingdirであるべき outdirだと正常な結果が書き込まれるフォルダに見える． </body>
		<created>2018-06-27 08:49:47</created>
		<closed>2018-07-06 09:02:20</closed>
	</bug>
	<bug>
		<id>116</id>
		<title>CUILauncherでクラスパスが必須パラメータになってしまっている</title>
		<body>CPはオプショナルであるべき．</body>
		<created>2018-06-27 08:43:13</created>
		<closed>2018-08-10 01:26:15</closed>
	</bug>
	<bug>
		<id>91</id>
		<title>static import が生成されない</title>
		<body>SourceCodeGeneration において、static importが普通のimportとして生成されてしまう</body>
		<created>2018-06-12 07:24:23</created>
		<closed>2018-06-12 08:02:23</closed>
	</bug>
	<bug>
		<id>84</id>
		<title>CUILauncherでrootDirを指定する方法が存在しない</title>
		<body>see https://github.com/kusumotolab/kGenProg/wiki/20180606-meeting  `--root-dir` オプションを追加したにも関わらず，`rootDir` を使用していない． `@Deprecated` な `rootDir` を指定しない `TargetProject` のコンストラクタを呼び出している.  - [x] 適切なコンストラクタを呼び出す - [x] 適切なテストも追加</body>
		<created>2018-06-06 07:58:12</created>
		<closed>2018-08-09 06:44:26</closed>
	</bug>
</bugs>
