<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>589</id>
		<title>Порядок значений в результатах</title>
		<body>От запуска к запуску меняется порядок значений, например, первый запуск ``` test.test.занятость_парикмахера     Shortest "Занят": 18.333821107700714               Persent of "Свободен": 0.08169071786932089         Persent of "Занят": 0.918309282130679              Time of "Занят": 4641.375345927483     Longest "Свободен": 64.00600791078857              Longest "Занят": 39.72987141521912                 Shortest "Свободен": 0.0                           Time of "Свободен": 412.8862587886029 ``` второй ``` test.test.занятость_парикмахера     Longest "Свободен": 64.00600791078857              Longest "Занят": 39.72987141521912                 Time of "Свободен": 412.8862587886029     Shortest "Занят": 18.333821107700714               Persent of "Свободен": 0.08169071786932089         Persent of "Занят": 0.918309282130679              Time of "Занят": 4641.375345927483     Shortest "Свободен": 0.0                       ``` Хочется, чтобы было стройность: сначала по значению перечислимого типа, потом по типу значения ``` test.test.занятость_парикмахера     Shortest "Занят": 18.333821107700714               Longest "Занят": 39.72987141521912                 Persent of "Занят": 0.918309282130679              Time of "Занят": 4641.375345927483     Shortest "Свободен": 0.0                           Longest "Свободен": 64.00600791078857              Persent of "Свободен": 0.08169071786932089         Time of "Свободен": 412.8862587886029 ``` На занятиях из-за это боль. Ну в тестах это стрельнуло.</body>
		<created>2017-10-13 17:05:11</created>
		<closed>2017-10-27 18:40:33</closed>
	</bug>
	<bug>
		<id>587</id>
		<title>Не работает комбинаторный выбор</title>
		<body>Имена релевантного ресурса должно совпадать с именем типа, иначе ошибка комбинированного подбора.  ``` Project contains errors: file barber.java at line 623: Клиент_2 cannot be resolved to a type file barber.java at line 623: Парикмахер_2 cannot be resolved to a type ```  ```erlang enum Тип_клиента {Тип1, Тип2} enum Состояние_клиента {Пришел, Начал_стрижку} enum Состояние_парикмахера {Свободен, Занят}  type Парикмахерские { int количество_в_очереди }  type Клиенты { Тип_клиента тип Состояние_клиента состояние }  type Парикмахеры { Состояние_парикмахера состояние_парикмахера = Состояние_парикмахера.Свободен int количество_обслуженных int длительность_min int длительность_max Тип_клиента тип_клиента }  resource парикмахерская = Парикмахерские.create(0) resource парикмахер_1 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 20, 40, Тип_клиента.Тип1) resource парикмахер_2 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 25, 70, Тип_клиента.Тип2) resource парикмахер_3 = Парикмахеры.create(Состояние_парикмахера.Свободен, 0, 30, 60, Тип_клиента.Тип2)  event Приход_клиента() { Клиенты.create(случайный_тип_клиента.next(), Состояние_клиента.Пришел) Приход_клиента.plan(currentTime + интервал_прихода.next()) парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1 }  operation Обслуживание_клиента() { relevant парикмахерская_ = парикмахерская.onlyif[количество_в_очереди &gt; 0] relevants клиент_2, парикмахер_2 = combination( Клиенты.accessible.filter[состояние == Состояние_клиента.Пришел], Парикмахеры.accessible.filter[состояние_парикмахера == Состояние_парикмахера.Свободен] ).filter[парикмахер_2.тип_клиента == клиент_2.тип].minBySafe[парикмахер_2.количество_обслуженных] of types Клиенты, Парикмахеры  def begin() { парикмахерская_.количество_в_очереди = парикмахерская_.количество_в_очереди - 1 клиент_2.состояние = Состояние_клиента.Начал_стрижку парикмахер_2.состояние_парикмахера = Состояние_парикмахера.Занят }  def duration() { return длительность_обслуживания.next(парикмахер_2.длительность_min, парикмахер_2.длительность_max) }  def end() { парикмахер_2.состояние_парикмахера = Состояние_парикмахера.Свободен парикмахер_2.количество_обслуженных = парикмахер_2.количество_обслуженных + 1 клиент_2.erase() } }  logic Model { activity обслуживание_клиента = new Activity(Обслуживание_клиента.create()) }  sequence интервал_прихода = new Exponential(123456789, 1 / 30.0) sequence длительность_обслуживания = new Uniform(123456789) sequence случайный_тип_клиента = new DiscreteHistogram&lt;Тип_клиента&gt;( 123456789, #[ Тип_клиента.Тип1 -&gt; 2.0, Тип_клиента.Тип2 -&gt; 5.0 ] )  def init() { Приход_клиента.plan(currentTime + интервал_прихода.next()) }  def terminateCondition() { return currentTime &gt;= 7 * 12 * 60 } ``` </body>
		<created>2017-10-07 06:21:01</created>
		<closed>2017-10-27 18:38:57</closed>
	</bug>
