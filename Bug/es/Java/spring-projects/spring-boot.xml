<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>23378</id>
		<title>spring-boot-dependencies should not define a spring-boot.version property</title>
		<body>Forward port of issue #23174 to 2.4.x.</body>
		<created>2020-09-16 17:26:40</created>
		<closed>2020-09-16 17:27:42</closed>
	</bug>
	<bug>
		<id>23306</id>
		<title>@ManagementContextConfiguration is meta-annotated with @Configuration(proxyBeanMethods=false) which does not disable proxying</title>
		<body>Forward port of issue #23305 to 2.4.x.</body>
		<created>2020-09-15 11:32:33</created>
		<closed>2020-09-15 11:34:51</closed>
	</bug>
	<bug>
		<id>23305</id>
		<title>@ManagementContextConfiguration is meta-annotated with @Configuration(proxyBeanMethods=false) which does not disable proxying</title>
		<body>Forward port of issue #23301 to 2.3.x.</body>
		<created>2020-09-15 11:30:51</created>
		<closed>2020-09-15 11:34:50</closed>
	</bug>
	<bug>
		<id>23301</id>
		<title>@ManagementContextConfiguration is meta-annotated with @Configuration(proxyBeanMethods=false) which does not disable proxying</title>
		<body>Some of the `@ManagementContextConfiguration` classes are explicitly marked as `proxyBeanMethods = false` and some are not (e.g. `WebMvcEndpointChildContextConfiguration`). It seems like Spring doesn't recognize this in a meta-annotation, so it's probably a bug not to declare it explicitly:  ```java Class&lt;WebMvcEndpointChildContextConfiguration&gt; type = WebMvcEndpointChildContextConfiguration.class; String name = Configuration.class.getName(); System.err.println(new SimpleMetadataReaderFactory().getMetadataReader(type.getName()).getAnnotationMetadata() .getAllAnnotationAttributes(name).get("proxyBeanMethods")); System.err.println(new SimpleMetadataReaderFactory().getMetadataReader(type.getName()).getAnnotationMetadata() .getAnnotationAttributes(name).get("proxyBeanMethods")); System.err.println( AnnotatedElementUtils.getMergedAnnotationAttributes(type, name, true, true).get("proxyBeanMethods")); System.err.println( AnnotatedElementUtils.findMergedAnnotationAttributes(type, name, true, true).get("proxyBeanMethods")); ```  prints  ``` [false] true true true ```  The code path in Spring is the second one (I think), via `ConfigurationClassUtils`.</body>
		<created>2020-09-14 12:49:40</created>
		<closed>2020-09-15 11:34:50</closed>
	</bug>
	<bug>
		<id>23265</id>
		<title>Signed jar dependency performance problem when repackaged in a single jar</title>
		<body>Forward port of issue #23264 to 2.4.x.</body>
		<created>2020-09-14 05:50:31</created>
		<closed>2020-09-14 06:05:44</closed>
	</bug>
	<bug>
		<id>23264</id>
		<title>Signed jar dependency performance problem when repackaged in a single jar</title>
		<body>Forward port of issue #23263 to 2.3.x.</body>
		<created>2020-09-14 05:48:07</created>
		<closed>2020-09-14 06:05:44</closed>
	</bug>
	<bug>
		<id>23263</id>
		<title>Signed jar dependency performance problem when repackaged in a single jar</title>
		<body>Forward port of issue #19041 to 2.2.x.</body>
		<created>2020-09-14 05:45:44</created>
		<closed>2020-09-14 06:05:43</closed>
	</bug>
	<bug>
		<id>23261</id>
		<title>ValidationHandler no longer works with certain map keys</title>
		<body>Forward port of issue #23260 to 2.4.x.</body>
		<created>2020-09-13 18:02:56</created>
		<closed>2020-09-13 18:03:35</closed>
	</bug>
	<bug>
		<id>23260</id>
		<title>ValidationHandler no longer works with certain map keys</title>
		<body>Forward port of issue #20350 to 2.3.x.</body>
		<created>2020-09-13 18:02:23</created>
		<closed>2020-09-13 18:03:35</closed>
	</bug>
	<bug>
		<id>23259</id>
		<title>MVC error model unnecessarily requires timestamp entry to be a java.util.Date</title>
		<body>Forward port of issue #23258 to 2.4.x.</body>
		<created>2020-09-12 01:45:42</created>
		<closed>2020-09-12 01:46:12</closed>
	</bug>
	<bug>
		<id>23258</id>
		<title>MVC error model unnecessarily requires timestamp entry to be a java.util.Date</title>
		<body>Forward port of issue #23256 to 2.3.x.</body>
		<created>2020-09-12 01:45:09</created>
		<closed>2020-09-12 01:46:11</closed>
	</bug>
	<bug>
		<id>23253</id>
		<title>Missing sanitization in lists of URIs properties on actuator endpoints</title>
		<body>Forward port of issue #23252 to 2.4.x.</body>
		<created>2020-09-11 09:45:31</created>
		<closed>2020-09-11 09:45:51</closed>
	</bug>
	<bug>
		<id>23252</id>
		<title>Missing sanitization in lists of URIs properties on actuator endpoints</title>
		<body>Forward port of issue #23037 to 2.3.x.</body>
		<created>2020-09-11 09:42:38</created>
		<closed>2020-09-11 09:45:51</closed>
	</bug>
	<bug>
		<id>23251</id>
		<title>Cassandra's pool duration mapping uses a wrong duration unit</title>
		<body>Forward port of issue #23249 to 2.4.x.</body>
		<created>2020-09-11 08:03:46</created>
		<closed>2020-09-11 08:04:07</closed>
	</bug>
	<bug>
		<id>23249</id>
		<title>Cassandra's pool duration mapping uses a wrong duration unit</title>
		<body> I use the spring-boot-data-cassandra to connect to my cassandra cluster. my application configuration is so: ``` spring.data.cassandra.pool.heartbeat-interval=30s ``` as above,  I set the heartbeat-interval to 30 seconds.  but after application started, I cann't see any debug information about heartbeat actions by datastax driver. my log4j configuration was set to : ```  &lt;Logger name="org.springframework.data.cassandra" level="debug" additivity="true"&gt;         &lt;/Logger&gt;         &lt;Logger name="com.datastax" level="debug" additivity="true"&gt; &lt;/Logger&gt; ```  Then I turn on the code, found it may be a bug by CassandraAutoConfiguration, the snippets as so: ``` private void mapPoolingOptions(CassandraProperties properties, CassandraDriverOptions options) { PropertyMapper map = PropertyMapper.get(); CassandraProperties.Pool poolProperties = properties.getPool(); map.from(poolProperties::getIdleTimeout).whenNonNull().asInt(Duration::getSeconds) .to((idleTimeout) -&gt; options.add(DefaultDriverOption.HEARTBEAT_TIMEOUT, idleTimeout)); map.from(poolProperties::getHeartbeatInterval).whenNonNull().asInt(Duration::getSeconds) .to((heartBeatInterval) -&gt; options.add(DefaultDriverOption.HEARTBEAT_INTERVAL, heartBeatInterval)); }  ``` as above, it set DefaultDriverOption.HEARTBEAT_INTERVAL to an integer value(seconds)，but datastax driver treat it as mills default, just like this:  com.typesafe.config.impl.SimpleConfig.java  ```     public static long parseDuration(String input,             ConfigOrigin originForException, String pathForException) {         String s = ConfigImplUtil.unicodeTrim(input);         String originalUnitString = getUnits(s);         String unitString = originalUnitString;         String numberString = ConfigImplUtil.unicodeTrim(s.substring(0, s.length()                 - unitString.length()));         TimeUnit units = null;          // this would be caught later anyway, but the error message         // is more helpful if we check it here.         if (numberString.length() == 0)             throw new ConfigException.BadValue(originForException,                     pathForException, "No number in duration value '" + input                             + "'");          if (unitString.length() &gt; 2 &amp;&amp; !unitString.endsWith("s"))             unitString = unitString + "s";          // note that this is deliberately case-sensitive         if (unitString.equals("") || unitString.equals("ms") || unitString.equals("millis")                 || unitString.equals("milliseconds")) {             units = TimeUnit.MILLISECONDS; ```  so, because 30 millis was too short, and HeartbeatHandler cast it to 0 seconds com.datastax.oss.driver.internal.core.channel.HeartbeatHandler: ```   HeartbeatHandler(DriverExecutionProfile config) {     super((int) config.getDuration(DefaultDriverOption.HEARTBEAT_INTERVAL).getSeconds(), 0, 0);     this.config = config;   } ```  so, there may be some thing to change about CassandraAutoConfiguration ?  </body>
		<created>2020-09-11 03:00:49</created>
		<closed>2020-09-11 08:04:07</closed>
	</bug>
	<bug>
		<id>23204</id>
		<title>When using HSQLDB, Hikari logs a warning message about the driver class name when the first connection is retrieved from the pool</title>
		<body>Forward port of issue #23203 to 2.4.x.</body>
		<created>2020-09-07 12:30:30</created>
		<closed>2020-09-07 12:31:10</closed>
	</bug>
	<bug>
		<id>23203</id>
		<title>When using HSQLDB, Hikari logs a warning message about the driver class name when the first connection is retrieved from the pool</title>
		<body>Forward port of issue #23036 to 2.3.x.</body>
		<created>2020-09-07 12:30:07</created>
		<closed>2020-09-07 12:31:09</closed>
	</bug>
	<bug>
		<id>23174</id>
		<title>spring-boot-dependencies should not define a spring-boot.version property</title>
		<body>The migration of the build to Gradle and the usage of our bom plugin has resulted in a `spring-boot.version` property in `spring-boot-dependencies` being introduced unintentionally. We should remove it for the reasons described in the following issues:  - https://github.com/spring-projects/spring-boot/issues/5014 - https://github.com/spring-projects/spring-boot/issues/7048 - https://github.com/spring-projects/spring-boot/issues/8493 - https://github.com/spring-projects/spring-boot/issues/9823</body>
		<created>2020-09-03 11:50:55</created>
		<closed>2020-09-16 17:27:41</closed>
	</bug>
	<bug>
		<id>23136</id>
		<title>Configurable SSL Logback extensions can't be supported due to URL checks</title>
		<body>Forward port of issue #23135 to 2.4.x.</body>
		<created>2020-08-28 22:23:28</created>
		<closed>2020-08-28 22:24:23</closed>
	</bug>
	<bug>
		<id>23135</id>
		<title>Configurable SSL Logback extensions can't be supported due to URL checks</title>
		<body>Forward port of issue #22946 to 2.3.x.</body>
		<created>2020-08-28 22:23:13</created>
		<closed>2020-08-28 22:24:23</closed>
	</bug>
	<bug>
		<id>23134</id>
		<title>Image building support does not zero-pad digest hashes to 64 characters</title>
		<body>Forward port of issue #23132 to 2.4.x.</body>
		<created>2020-08-28 22:05:11</created>
		<closed>2020-08-28 22:05:51</closed>
	</bug>
	<bug>
		<id>23133</id>
		<title>Image builder fails silently when there's an error loading the ephemeral image</title>
		<body>Forward port of issue #23130 to 2.4.x.</body>
		<created>2020-08-28 20:18:46</created>
		<closed>2020-08-28 20:19:13</closed>
	</bug>
	<bug>
		<id>23132</id>
		<title>Image building support does not zero-pad digest hashes to 64 characters</title>
		<body>Split from #23130   ```java public static LayerId ofSha256Digest(byte[] digest) { Assert.notNull(digest, "Digest must not be null"); Assert.isTrue(digest.length == 32, "Digest must be exactly 32 bytes"); String algorithm = "sha256"; String hash = String.format("%32x", new BigInteger(1, digest)); return new LayerId(algorithm + ":" + hash, algorithm, hash); } ```  `%32x` is actually only guaranteed to be at least 32 characters. We need 64. So sometimes we get 63 because the content of the digest has a low leading byte value. This would probably work (because Java `Formatter` pads with spaces not zeros, and docker wants zeros):  ``` String hash = String.format("%64x", new BigInteger(1, digest)).replace(" ", "0"); ```</body>
		<created>2020-08-28 18:16:59</created>
		<closed>2020-08-28 22:05:50</closed>
	</bug>
	<bug>
		<id>23130</id>
		<title>Image builder fails silently when there's an error loading the ephemeral image</title>
		<body>When the ephemeral build image is loaded into docker it can fail, and we discard the result, so we never know. From `DockerApi$ImageApi`:  ```java try (Response response = http().post(loadUri, "application/x-tar", archive::writeTo)) { jsonStream().get(response.getContent(), LoadImageUpdateEvent.class, listener::onUpdate); } ```  The json is discarded and docker is actually sending an error message (with a 200 OK response status, which is admittedly unhelpful). It would suffice in this case to look at the unmarshalled response and check that it had some content (non null "stream" property).  This code in `LayerId` is responsible for the failure that we found:  ```java public static LayerId ofSha256Digest(byte[] digest) { Assert.notNull(digest, "Digest must not be null"); Assert.isTrue(digest.length == 32, "Digest must be exactly 32 bytes"); String algorithm = "sha256"; String hash = String.format("%32x", new BigInteger(1, digest)); return new LayerId(algorithm + ":" + hash, algorithm, hash); } ```  `%32x` is actually only guaranteed to be at least 32 characters. We need 64. So sometimes we get 63 because the content of the digest has a low leading byte value. This would probably work (because Java `Formatter` pads with spaces not zeros, and docker wants zeros):  ``` String hash = String.format("%64x", new BigInteger(1, digest)).replace(" ", "0"); ```</body>
		<created>2020-08-28 15:24:49</created>
		<closed>2020-08-28 20:19:13</closed>
	</bug>
	<bug>
		<id>23089</id>
		<title>RSocketPortInfoApplicationContextInitializer can throw NPE</title>
		<body>Forward port of issue #23087 to 2.4.x.</body>
		<created>2020-08-26 08:04:13</created>
		<closed>2020-08-26 08:04:37</closed>
	</bug>
	<bug>
		<id>23087</id>
		<title>RSocketPortInfoApplicationContextInitializer can throw NPE</title>
		<body>Forward port of issue #23084 to 2.3.x.</body>
		<created>2020-08-26 07:57:37</created>
		<closed>2020-08-26 08:04:37</closed>
	</bug>
	<bug>
		<id>23072</id>
		<title>Dependency convergence error for nimbus-jose-jwt when depending on spring-boot-starter-oauth2-client</title>
		<body>Forward port of issue #22996 to 2.4.x.</body>
		<created>2020-08-25 07:50:24</created>
		<closed>2020-08-25 07:50:51</closed>
	</bug>
	<bug>
		<id>23051</id>
		<title>Freemarker is configured to prefer filesystem access by default</title>
		<body>If I write a test that loads a template under `src/main/resources/templates` it works fine. If I then create a template under `src/test/resources/templates` the test then fails as the template loader switches to looking there and only there. It's useful to be able to have a test template to check the behaviour of any custom Freemarker settings.  Ideally it would load from all `templates` resources found on the classpath, not just one.  Project to reproduce the problem (Spring Boot 2.4.0-M2): https://github.com/halfninja/spring-ftl-bug-repro  Renaming `src/test/resources/templates` causes the test to pass.  &lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; </body>
		<created>2020-08-22 20:51:13</created>
		<closed>2020-08-24 16:31:28</closed>
	</bug>
	<bug>
		<id>23037</id>
		<title>Missing sanitization in lists of URIs properties on actuator endpoints</title>
		<body>**Problem**  I'm using Spring Boot 2.2.9. The change introduced by https://github.com/spring-projects/spring-boot/pull/19999 considers any keys contains "uri", "uris", "address" or "addresses" are "comma separated URLs". This is not always the right assumption. It will try to remove password from those URLs, however if it's not a URL format, it will **return the original content**.   **Expected Behavior**  If that key is not a URL format, it should return as `******`. Or at least allow developers to configure whether they want sanitize URLs or not.  **Reproducer**  ```java Sanitizer sanitizer = new Sanitizer(); System.out.println(sanitizer.sanitize("uris", "[amqp://foo:bar@host/]")); System.out.println(sanitizer.sanitize("uris", "amqp://foo:bar@host/")); ```  The output is: ``` [amqp://foo:bar@host/] amqp://foo:******@host/ ``` </body>
		<created>2020-08-21 09:37:57</created>
		<closed>2020-09-11 09:45:50</closed>
	</bug>
	<bug>
		<id>23036</id>
		<title>When using HSQLDB, Hikari logs a warning message about the driver class name when the first connection is retrieved from the pool</title>
		<body>WARN message in startup:  [           main] com.zaxxer.hikari.util.DriverDataSource  : Registered driver with driverClassName=org.hsqldb.jdbcDriver was not found, trying direct instantiation.  Founds:  HSQLDB registered the JDBC Driver as ```org.hsqldb.jdbc.JDBCDriver``` to DriverManager now.  In ```org.springframework.boot.jdbc.EmbeddedDatabaseConnection```, the driver class name is ```org.hsqldb.jdbcDriver```  This maybe the mismatch cause ```HikariCP``` cannot get the driver due to below code:  ```java while (drivers.hasMoreElements()) {             Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();             Driver d = drivers.nextElement();             if (d.getClass().getName().equals(driverClassName)) { //driverClassName mismatch                driver = d;                break;             }          } ```  So we got the WARN message from HikariCP?</body>
		<created>2020-08-21 09:15:22</created>
		<closed>2020-09-07 12:31:09</closed>
	</bug>
	<bug>
		<id>23015</id>
		<title>Too much logging when building an OCI image with Maven</title>
		<body>Forward port of issue #22674 to 2.4.x.</body>
		<created>2020-08-19 20:24:12</created>
		<closed>2020-08-19 20:24:33</closed>
	</bug>
	<bug>
		<id>23001</id>
		<title>LayoutFactory can be presented with empty source file</title>
		<body>Forward port of issue #22995 to 2.4.x.</body>
		<created>2020-08-18 23:49:15</created>
		<closed>2020-08-18 23:49:25</closed>
	</bug>
	<bug>
		<id>23000</id>
		<title>Extracting layers with layertools doesn't work with executable JAR files</title>
		<body>Forward port of issue #22993 to 2.4.x.</body>
		<created>2020-08-18 22:07:41</created>
		<closed>2020-08-18 22:08:00</closed>
	</bug>
	<bug>
		<id>22999</id>
		<title>JarFile can cause memory issues when running on Java 11+</title>
		<body>Forward port of issue #22998 to 2.4.x.</body>
		<created>2020-08-18 21:36:02</created>
		<closed>2020-08-18 21:36:50</closed>
	</bug>
	<bug>
		<id>22998</id>
		<title>JarFile can cause memory issues when running on Java 11+</title>
		<body>Forward port of issue #22991 to 2.3.x.</body>
		<created>2020-08-18 21:35:47</created>
		<closed>2020-08-18 21:36:50</closed>
	</bug>
	<bug>
		<id>22995</id>
		<title>LayoutFactory can be presented with empty source file</title>
		<body>I am migrating from spring boot 2.2.4 to 2.3.0. We have written our custom layout factory and we are repackaging the jar through spring boot maven plugin. But we started failing when migrated to spring boot 2.3.0 version. Everything works fine when we lower down the version from 2.3.0. Before returning Module we are just verifying the content of the source jar. Earlier we were able to verify the resources but now the source jar is empty.  ```java public class ModuleLayoutFactory implements LayoutFactory {  @Override public Layout getLayout(File file) {  System.out.println("file path is " + file.getAbsolutePath() + "file Size" + file.length()); checkJarHasModuleConfigEntryWithLabelName(file);  return new Module(); }  /**  * verify if module has a configuration file with the label name which defines the module.  * @param file the jar file of the module  */ private void checkJarHasModuleConfigEntryWithLabelName(File file) {  try(InputStream in = Files.newInputStream(file.toPath()); JarInputStream jarInputStream = new JarInputStream(in)) { boolean hasConfig = false; JarEntry jarEntry; while ((jarEntry = jarInputStream.getNextJarEntry()) != null) { if (jarEntry.getName() .equals("MODULE-INF/module-properties.yaml")) { try(InputStreamReader reader = new InputStreamReader(jarInputStream, StandardCharsets.UTF_8); BufferedReader buffer = new BufferedReader(reader);) { if (buffer.lines() .noneMatch(line -&gt; line.startsWith("  name: "))) { throw new IllegalArgumentException("Module does not contain a name tag in MODULE-INF/module-properties.yaml"); } } hasConfig = true; break; } } if (!hasConfig) { throw new IllegalArgumentException("Configuration file module-properties.yaml could not be found under MODULE-INF/"); } } catch (IOException e) { throw new UncheckedIOException(String.format( "Cannot read jar '%s': %s", file, e), e); } }  } ```  **Below is the sample example** https://github.com/skpandey91/sample</body>
		<created>2020-08-18 16:52:45</created>
		<closed>2020-08-18 23:49:24</closed>
	</bug>
	<bug>
		<id>22991</id>
		<title>JarFile can cause memory issues when running on Java 11+</title>
		<body>### Description  After upgrade from Spring Boot 2.2.6 to 2.2.7 application started consuming much more memory. In particular Heap Dump shows significantly higher number of instances of type: `org.springframework.boot.loader.jar.JarFile`.  Heap Dump (v2.2.6) is [here](https://github.com/alexey-anufriev/spring-boot-2.2.7-memory-leak/blob/master/heap_dump/heapdump-2.2.6.hprof.zip). It contains the following number of instances: ![v226](https://github.com/alexey-anufriev/spring-boot-2.2.7-memory-leak/raw/master/docs/v226.png)  Heap Dump (v2.2.7) is [here](https://github.com/alexey-anufriev/spring-boot-2.2.7-memory-leak/blob/master/heap_dump/heapdump-2.2.7.hprof.zip). It contains the following number of instances: ![v227](https://github.com/alexey-anufriev/spring-boot-2.2.7-memory-leak/raw/master/docs/v227.png)  The number of instances is significantly higher.  ### Reason  After checking the history of related changes there is a couple of commits that worth to be checked:  [Create new JarFile instance for URL connections](https://github.com/spring-projects/spring-boot/commit/c85918b8b35ee6215583020c2ef4287c4f7eca8d)  [Attempt to prevent JarFiles from being left open](https://github.com/spring-projects/spring-boot/commit/7c6e9124633e4ff2f6018c32b8e7f01510ac1528)  [Attempt to prevent JarFiles from being left open](https://github.com/spring-projects/spring-boot/commit/7d53f7d27fb6ed2b606ca55f33616e681b09b7fe)  ### Steps to reproduce  The following repository can be used: https://github.com/alexey-anufriev/spring-boot-2.2.7-memory-leak#steps-to-reproduce </body>
		<created>2020-08-17 23:31:50</created>
		<closed>2020-08-18 21:36:49</closed>
	</bug>
	<bug>
		<id>22990</id>
		<title>Metrics auto-configurations are not ordered correctly</title>
		<body>Forward port of issue #22989 to 2.4.x.</body>
		<created>2020-08-17 23:18:26</created>
		<closed>2020-08-17 23:19:05</closed>
	</bug>
	<bug>
		<id>22989</id>
		<title>Metrics auto-configurations are not ordered correctly</title>
		<body>Forward port of issue #21134 to 2.3.x.</body>
		<created>2020-08-17 23:17:51</created>
		<closed>2020-08-17 23:19:04</closed>
	</bug>
	<bug>
		<id>22984</id>
		<title>Exception inclusion cannot be disabled when sub-classing DefaultErrorAttributes and using its deprecated constructor</title>
		<body>Forward port of issue #22750 to 2.4.x.</body>
		<created>2020-08-17 19:36:15</created>
		<closed>2020-08-17 19:41:07</closed>
	</bug>
	<bug>
		<id>22967</id>
		<title>The @TypeExcludeFilters annotation is not @Inherited</title>
		<body>Forward port of issue #22966 to 2.4.x.</body>
		<created>2020-08-15 00:12:55</created>
		<closed>2020-08-15 00:13:24</closed>
	</bug>
	<bug>
		<id>22966</id>
		<title>The @TypeExcludeFilters annotation is not @Inherited</title>
		<body>Forward port of issue #22939 to 2.3.x.</body>
		<created>2020-08-15 00:12:45</created>
		<closed>2020-08-15 00:13:23</closed>
	</bug>
	<bug>
		<id>22939</id>
		<title>The @TypeExcludeFilters annotation is not @Inherited</title>
		<body>`@TypeExcludeFilters` isn't declared as `@Inherited`, so I can't use the annotation on test superclasses.  There is a workaround currently to create a custom meta-annotation marked `@Inherited` and add `@TypeExcludeFilters` there, but I actually wouldn't see any harm to add Inherited directly. Most annotations in Spring and elsewhere are Inherited, so it actually took me by surprise and I spent 30-60 min wondering what was not working in my setup.</body>
		<created>2020-08-13 12:50:40</created>
		<closed>2020-08-15 00:13:23</closed>
	</bug>
	<bug>
		<id>22897</id>
		<title>Externalized Configuration ignores null values in SPRING_APPLICATION_JSON</title>
		<body>Forward port of issue #22895 to 2.4.x.</body>
		<created>2020-08-11 19:25:54</created>
		<closed>2020-08-11 19:26:28</closed>
	</bug>
	<bug>
		<id>22895</id>
		<title>Externalized Configuration ignores null values in SPRING_APPLICATION_JSON</title>
		<body>Forward port of issue #21542 to 2.3.x.</body>
		<created>2020-08-11 19:22:48</created>
		<closed>2020-08-11 19:26:27</closed>
	</bug>
	<bug>
		<id>22851</id>
		<title>Update transaction auto-configuration to backoff if a TransactionManager is defined</title>
		<body>Spring Framework 5.2 has introduced a parent for the `PlatfromTransactionManager` that's also a parent for the newly introduced `ReactiveTransactionManager`.   Our auto-configuration is checking the specific type at the moment. If we are auto-configuring a `PlatformTransactionManager` we check for that, and same for `ReactiveTransactionManager` for auto-configuring a reactive transaction manager.  The problem is that we can end up in a situation where we have two `TransactionManager` beans, a `PlatformTransactionManager` and a `ReactiveTransactionManager`. Considering that framework  expects a single bean of that type for unqualified `@Transactional` use, I think we should refine our auto-configuration to avoid that by default.  This affects neo4j in particular as they ship both the imperative and reactive style in the same driver and the presence of Reactor on the classpath is the only trigger (which could be very common and for unrelated reasons, like using `WebClient`).  See also https://github.com/spring-projects/spring-framework/issues/25532 and https://github.com/spring-projects/spring-boot/issues/22692</body>
		<created>2020-08-10 14:34:16</created>
		<closed>2020-08-25 14:37:53</closed>
	</bug>
	<bug>
		<id>22850</id>
		<title>Legacy endpoint ids with '-' do not migrate cleanly</title>
		<body>Forward port of issue #22849 to 2.4.x.</body>
		<created>2020-08-10 14:05:51</created>
		<closed>2020-08-10 14:06:14</closed>
	</bug>
	<bug>
		<id>22849</id>
		<title>Legacy endpoint ids with '-' do not migrate cleanly</title>
		<body>Forward port of issue #21615 to 2.3.x.</body>
		<created>2020-08-10 14:05:20</created>
		<closed>2020-08-10 14:06:14</closed>
	</bug>
	<bug>
		<id>22848</id>
		<title>When Reactor's debug agent fails to initialize, the cause of the failure is discarded</title>
		<body>Forward port of issue #22847 to 2.4.x.</body>
		<created>2020-08-10 12:24:00</created>
		<closed>2020-08-10 12:24:10</closed>
	</bug>
	<bug>
		<id>22847</id>
		<title>When Reactor's debug agent fails to initialize, the cause of the failure is discarded</title>
		<body>Forward port of issue #22777 to 2.3.x.</body>
		<created>2020-08-10 12:23:41</created>
		<closed>2020-08-10 12:24:10</closed>
	</bug>
	<bug>
		<id>22776</id>
		<title>StartupStep are closed twice in SpringApplicationRunListeners</title>
		<body>With the introduction of #22600 I was eager to test this with Flight Recorder based events. For this purpose, I cloned the Petclinic, updated it to Spring Boot 2.4.0-SNAPSHOT and confined it to run using the `FlightRecorderApplicationStartup`. However, when doing so it results in an exception during startup.  ``` xception in thread "restartedMain" java.lang.reflect.InvocationTargetException at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) Caused by: java.util.NoSuchElementException at java.base/java.util.ArrayDeque.getFirst(ArrayDeque.java:403) at org.springframework.core.metrics.jfr.FlightRecorderApplicationStartup.start(FlightRecorderApplicationStartup.java:52) at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:111) at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:106) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:57) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:356) at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) at org.springframework.samples.petclinic.PetClinicApplication.main(PetClinicApplication.java:39) ... 5 more ```  The events that are logged are   1. `spring.boot.application.starting`, `sequenceId` = 0 2. `spring.boot.application.starting` (?), `sequenceId` = 0 3. `spring.boot.application.environment-prepared`, `sequenceId` = 1 4. `spring.boot.application.failed` , `sequenceId` = 2 -&gt; which leads to the error due to the `currentSteps` `Deque` is empty.  **EDIT (1):** The second `spring.boot.application.starting` event appears to be the result of including `spring-boot-devtools` as a dependency. Which I thought might be the culprit, however even without Devtools the applications breaks.   To reproduce checkout petclinic, upgrade Spring Boot and use the following `PetClinicApplication` class  ```java @SpringBootApplication(proxyBeanMethods = false) public class PetClinicApplication {  public static void main(String[] args) { SpringApplication springApplication = new SpringApplicationBuilder() .applicationStartup(new FlightRecorderApplicationStartup()) .sources(PetClinicApplication.class) .build(); springApplication.run(args); } } ```  The application starts successfully when commenting the `.applicationStartup(new FlightRecorderApplicationStartup())` line.  Parameters used to start the application with JFR metrics `-XX:StartFlightRecording:filename=recording.jfr,duration=10s`  After some debugging it appears that the error is this the `doWithListeners` method in the `SpringApplicationRunListeners` class.   **EDIT (2)**  ```java private void doWithListeners(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction) { doWithListeners(stepName, listenerAction, StartupStep::end); }  private void doWithListeners(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction, Consumer&lt;StartupStep&gt; stepAction) { StartupStep step = this.applicationStartup.start(stepName); this.listeners.forEach(listenerAction); stepAction.accept(step); step.end(); } ```  The lambda passed into `stepAction` results in the `StartupStep.end` method being invoked twice, leading to exhausting the `Deque`.  Relates to: #22600</body>
		<created>2020-08-07 07:23:30</created>
		<closed>2020-08-07 17:06:33</closed>
	</bug>
	<bug>
		<id>22735</id>
		<title>OCI image build fails if environment has any empty properties</title>
		<body>Forward port of issue #22703 to 2.4.x.</body>
		<created>2020-08-04 20:31:19</created>
		<closed>2020-08-04 20:50:45</closed>
	</bug>
	<bug>
		<id>22703</id>
		<title>OCI image build fails if environment has any empty properties</title>
		<body>pom.xml:  ```xml &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;image&gt; &lt;env&gt; &lt;FOO&gt;&lt;/FOO&gt; &lt;/env&gt; &lt;/image&gt; &lt;/configuration&gt; &lt;/plugin&gt; ```  result:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-SNAPSHOT:build-image (default-cli) on project func: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.4.0-SNAPSHOT:build-image failed: String must not be null -&gt; [Help 1] ```</body>
		<created>2020-08-03 11:35:12</created>
		<closed>2020-08-04 20:50:45</closed>
	</bug>
	<bug>
		<id>22687</id>
		<title>LiquibaseEndpoint does not report change sets from ancestor contexts</title>
		<body>Forward port of issue #22686 to 2.4.x.</body>
		<created>2020-07-31 11:24:58</created>
		<closed>2020-07-31 11:25:26</closed>
	</bug>
	<bug>
		<id>22686</id>
		<title>LiquibaseEndpoint does not report change sets from ancestor contexts</title>
		<body>Forward port of issue #22681 to 2.3.x.</body>
		<created>2020-07-31 11:24:39</created>
		<closed>2020-07-31 11:25:26</closed>
	</bug>
	<bug>
		<id>22674</id>
		<title>Too much logging when building an OCI image with Maven</title>
		<body>`mvn spring-boot:build-image -X` logs every byte to and from the Docker daemon ...it's kind of too much. You get a lot of lines like this for example:  ``` [DEBUG] http-outgoing-0 &gt;&gt; "[0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][0x0][\r][\n]" ```</body>
		<created>2020-07-30 13:19:10</created>
		<closed>2020-08-19 20:24:32</closed>
	</bug>
	<bug>
		<id>22673</id>
		<title>Async exceptions not handled by error pages in war deployments</title>
		<body>Forward port of issue #22672 to 2.4.x.</body>
		<created>2020-07-30 12:41:36</created>
		<closed>2020-07-30 12:42:06</closed>
	</bug>
	<bug>
		<id>22672</id>
		<title>Async exceptions not handled by error pages in war deployments</title>
		<body>Forward port of issue #19471 to 2.3.x.</body>
		<created>2020-07-30 12:41:21</created>
		<closed>2020-07-30 12:42:06</closed>
	</bug>
	<bug>
		<id>22642</id>
		<title>XADataSourceAutoConfiguration is difficult to use with DB2XADataSource as it does not have a URL property</title>
		<body>Forward port of issue #22641 to 2.4.x.</body>
		<created>2020-07-29 13:10:53</created>
		<closed>2020-07-29 13:11:18</closed>
	</bug>
	<bug>
		<id>22641</id>
		<title>XADataSourceAutoConfiguration is difficult to use with DB2XADataSource as it does not have a URL property</title>
		<body>Forward port of issue #20229 to 2.3.x.</body>
		<created>2020-07-29 13:10:29</created>
		<closed>2020-07-29 13:11:18</closed>
	</bug>
	<bug>
		<id>22612</id>
		<title>TaskExecutorBuilder only uses second-precision when configuring the await termination period</title>
		<body>Forward port of issue #22611 to 2.4.x.</body>
		<created>2020-07-28 08:15:29</created>
		<closed>2020-07-28 08:16:18</closed>
	</bug>
	<bug>
		<id>22611</id>
		<title>TaskExecutorBuilder only uses second-precision when configuring the await termination period</title>
		<body>Forward port of issue #22604 to 2.3.x.</body>
		<created>2020-07-28 08:15:18</created>
		<closed>2020-07-28 08:16:18</closed>
	</bug>
	<bug>
		<id>22605</id>
		<title>Profile groups are not applied to the environment</title>
		<body>We should be using `acceptedProfiles` [here](https://github.com/spring-projects/spring-boot/blob/84bcd0eb1e43f296bffddce1b4da000f1ca40209/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigDataEnvironment.java#L251).</body>
		<created>2020-07-28 01:44:07</created>
		<closed>2020-07-28 19:04:38</closed>
	</bug>
	<bug>
		<id>22586</id>
		<title>Setting ignoreInvalidFields=true on @ConfigurationProperties causes unknown fields to be ignored as well</title>
		<body>Forward port of issue #22585 to 2.4.x.</body>
		<created>2020-07-27 12:37:39</created>
		<closed>2020-07-27 12:37:54</closed>
	</bug>
	<bug>
		<id>22585</id>
		<title>Setting ignoreInvalidFields=true on @ConfigurationProperties causes unknown fields to be ignored as well</title>
		<body>Forward port of issue #22308 to 2.3.x.</body>
		<created>2020-07-27 12:37:27</created>
		<closed>2020-07-27 12:37:54</closed>
	</bug>
	<bug>
		<id>22581</id>
		<title>Background preinitialisation may cause Jackson2ObjectMapperBuilder's Kotlin detection warning to be silently dropped</title>
		<body>Forward port of issue #22580 to 2.4.x.</body>
		<created>2020-07-27 10:30:38</created>
		<closed>2020-07-27 10:31:27</closed>
	</bug>
	<bug>
		<id>22580</id>
		<title>Background preinitialisation may cause Jackson2ObjectMapperBuilder's Kotlin detection warning to be silently dropped</title>
		<body>Forward port of issue #21897 to 2.3.x.</body>
		<created>2020-07-27 10:29:18</created>
		<closed>2020-07-27 10:31:27</closed>
	</bug>
	<bug>
		<id>22579</id>
		<title>UndertowWebServerFactoryCustomizer does not support Options but only UndertowOptions</title>
		<body>Forward port of issue #22578 to 2.4.x.</body>
		<created>2020-07-27 09:58:18</created>
		<closed>2020-07-27 09:59:25</closed>
	</bug>
	<bug>
		<id>22578</id>
		<title>UndertowWebServerFactoryCustomizer does not support Options but only UndertowOptions</title>
		<body>Forward port of issue #22502 to 2.3.x.</body>
		<created>2020-07-27 09:58:03</created>
		<closed>2020-07-27 09:59:24</closed>
	</bug>
	<bug>
		<id>22577</id>
		<title>WebMvcTest and WebFluxTest do not include Jackson Module beans</title>
		<body>Forward port of issue #22576 to 2.4.x.</body>
		<created>2020-07-27 09:12:13</created>
		<closed>2020-07-27 09:12:38</closed>
	</bug>
	<bug>
		<id>22576</id>
		<title>WebMvcTest and WebFluxTest do not include Jackson Module beans</title>
		<body>Forward port of issue #22530 to 2.3.x.</body>
		<created>2020-07-27 09:11:53</created>
		<closed>2020-07-27 09:12:37</closed>
	</bug>
	<bug>
		<id>22546</id>
		<title>AbstractRepositoryConfigurationSourceSupport does not override registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)</title>
		<body>Forward port of issue #22480 to 2.4.x.</body>
		<created>2020-07-24 09:41:45</created>
		<closed>2020-07-24 09:42:36</closed>
	</bug>
	<bug>
		<id>22530</id>
		<title>WebMvcTest and WebFluxTest do not include Jackson Module beans</title>
		<body>The `@JsonTest` annotation automatically includes beans of type `com.fasterxml.jackson.databind.Module`. So you can test that you've configured Jackson correctly by using a JsonTest, and it will automatically pick up your beans of type Module.  But as soon as you use an `@WebMvcTest` that relies on this Module bean, it fails because `@WebMvcTest` does not include beans of type `com.fasterxml.jackson.databind.Module` (although it does include beans annotated with `@JsonComponent`, just like `@JsonTest`).  This is easy enough to workaround, but it's surprising and inconsistent, IMHO.</body>
		<created>2020-07-23 14:04:28</created>
		<closed>2020-07-27 09:12:37</closed>
	</bug>
	<bug>
		<id>22502</id>
		<title>UndertowWebServerFactoryCustomizer does not support Options but only UndertowOptions</title>
		<body>`UndertowWebServerFactoryCustomizer` can map properties from: - `server.undertow.options.server.* ` - `server.undertow.options.socket.*` into: - `builder.setSocketOption(...)` - `builder.setSocketOption(...)`  but it does not support  `org.xnio.Options` but only `UndertowOptions`, see: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java#L141  To use `builder.setSocketOption(...)` we need properties from `org.xnio.Options`.</body>
		<created>2020-07-22 07:27:37</created>
		<closed>2020-07-27 09:59:24</closed>
	</bug>
	<bug>
		<id>22493</id>
		<title>Filter empty YAML documents</title>
		<body>Empty YAML documents should be filtered from the `Environment`, however our `OriginTrackedYamlLoader` can cause them to remain. We need to ensure that we don't wrap empty strings with origin tracker objects.</body>
		<created>2020-07-22 06:02:19</created>
		<closed>2020-07-23 04:05:17</closed>
	</bug>
	<bug>
		<id>22480</id>
		<title>AbstractRepositoryConfigurationSourceSupport does not override registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)</title>
		<body>`AbstractRepositoryConfigurationSourceSupport` overrides one of the `registerBeanDefinitions()` method in `ImportBeanDefinitionRegistrar` but not the other. The other one has an empty default implementation, so if anyone calls it, nothing happens. It would be helpful to add an implementation, even if it just throws an exception (hopefully it wouldn't need to).</body>
		<created>2020-07-21 12:36:55</created>
		<closed>2020-07-24 09:42:36</closed>
	</bug>
	<bug>
		<id>22357</id>
		<title>ConditionMessage#items throws an NPE with a null list of items although the Javadoc states it is tolerated</title>
		<body>Forward port of issue #22344 to 2.4.x.</body>
		<created>2020-07-16 12:24:30</created>
		<closed>2020-07-16 12:24:42</closed>
	</bug>
	<bug>
		<id>22349</id>
		<title>Image building fails with an unhelpful error message when building an image from a jar that includes the launch script</title>
		<body>Forward port of issue #22223 to 2.4.x.</body>
		<created>2020-07-15 20:18:29</created>
		<closed>2020-07-15 20:19:59</closed>
	</bug>
	<bug>
		<id>22328</id>
		<title>Temporary files not cleaned up after Maven plugin execution</title>
		<body>Forward port of issue #22112 to 2.4.x.</body>
		<created>2020-07-14 14:08:45</created>
		<closed>2020-07-14 14:09:08</closed>
	</bug>
	<bug>
		<id>22327</id>
		<title>OnClassCondition tries to determine the outcome for single auto-configuration classes in parallel</title>
		<body>Forward port of issue #22294 to 2.4.x.</body>
		<created>2020-07-14 14:00:54</created>
		<closed>2020-07-14 14:01:26</closed>
	</bug>
	<bug>
		<id>22326</id>
		<title>ConfigurationPropertiesBeanDefinitionValidator interferes with EclipseLink load-time weaving</title>
		<body>Forward port of issue #22325 to 2.4.x.</body>
		<created>2020-07-14 10:41:02</created>
		<closed>2020-07-14 10:42:10</closed>
	</bug>
	<bug>
		<id>22325</id>
		<title>ConfigurationPropertiesBeanDefinitionValidator interferes with EclipseLink load-time weaving</title>
		<body>Forward port of issue #20798 to 2.3.x.</body>
		<created>2020-07-14 10:35:28</created>
		<closed>2020-07-14 10:42:10</closed>
	</bug>
	<bug>
		<id>22321</id>
		<title>MongoClientFactorySupport overrides existing uuidRepresentation with MongoProperties default value</title>
		<body>Original Bug Report: [DATAMONGO-2561](https://jira.spring.io/browse/DATAMONGO-2561)  &gt; I have `MongoClientSettings` bean defined in my configuration with `STANTARD` uuid representation.  &gt; After migration to spring 2.3.0 this value is always overridden by `MongoProperties.uuidRepresentation`.  &gt; `MongoProperties.uuidRepresentation` is a field with default value `JAVA_LEGACY` and even when `spring.data.mongodb.uuidRepresentation` property  is not defined, the default value is used instead of one defined in `MongoClientSettings`.   `MongoClientFactorySupport` should check if the source `MongoClientSettings` passed to `createClient` already define an `uuidRepresentation` other than `UNDEFINED` before applying the default value from `MongoProperties` that then potentially overrides existing settings.</body>
		<created>2020-07-14 05:01:56</created>
		<closed>2020-08-17 21:09:22</closed>
	</bug>
	<bug>
		<id>22308</id>
		<title>Setting ignoreInvalidFields=true on @ConfigurationProperties causes unknown fields to be ignored as well</title>
		<body>``` mybatis.mapperLocations= classpath*:mapper/*.xml mybatis.defaultStatementTimeoutInSecond= 5 mybatis.mapUnderscoreToCamelCase= false mybatis.unknownFields= exception ``` ```java @ConfigurationProperties(prefix = "mybatis", ignoreInvalidFields = false, ignoreUnknownFields = false) public class MyBatisProperties {     private String basePackage;     private String mapperLocations;     private String typeAliasesPackage;     private String markerInterface;     private Integer defaultStatementTimeoutInSecond;     private Boolean mapUnderscoreToCamelCase;     private String configLocation; } ``` Throw an exception ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target [Bindable@450794b4 type = com.example.demo.config.MyBatisProperties, value = 'provided', annotations = array&lt;Annotation&gt;[@org.springframework.boot.context.properties.ConfigurationProperties(ignoreInvalidFields=false, ignoreUnknownFields=false, prefix=mybatis, value=mybatis)]] failed:      Property: mybatis.unknownFields     Value: false     Origin: class path resource [application.properties]:7:13     Reason: The elements [mybatis.aa] were left unbound.  ``` but ``` @ConfigurationProperties(prefix = "mybatis", ignoreInvalidFields = true, ignoreUnknownFields = false) public class MyBatisProperties {   //....... } ``` **It works fine, but I think it's time to throw an exception** </body>
		<created>2020-07-12 10:58:37</created>
		<closed>2020-07-27 12:37:53</closed>
	</bug>
	<bug>
		<id>22304</id>
		<title>Image building fails when DOCKER_HOST is set to a local socket prefixed with unix://</title>
		<body>Forward port of issue #22300 to 2.4.x.</body>
		<created>2020-07-10 14:36:16</created>
		<closed>2020-07-10 14:37:19</closed>
	</bug>
	<bug>
		<id>22300</id>
		<title>Image building fails when DOCKER_HOST is set to a local socket prefixed with unix://</title>
		<body>On our build server we have an environment varialbe `DOCKER_HOST="unix:///var/run/docker.sock"` set. This has not been a problem with the `docker` client nor with the  `io.fabric8: docker-maven-plugin`.  `spring-boot:build-image`  fails, though.  This can be reproduced locally like so:  ``` export DOCKER_HOST="unix:///var/run/docker.sock" mvn spring-boot:build-image -DskipTests -X ... [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.1.RELEASE:build-image (default-cli) on project test: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.1.RELEASE:build-image failed: Connection to the Docker daemon at '/var/run/docker.sock' failed with error "/var/run/docker.sock: Name or service not known"; ensure the Docker daemon is running and accessible: Unknown host /var/run/docker.sock: Name or service not known -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.1.RELEASE:build-image (default-cli) on project test: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.1.RELEASE:build-image failed: Connection to the Docker daemon at '/var/run/docker.sock' failed with error "/var/run/docker.sock: Name or service not known"; ensure the Docker daemon is running and accessible     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.apache.maven.wrapper.BootstrapMainStarter.start (BootstrapMainStarter.java:39)     at org.apache.maven.wrapper.WrapperExecutor.execute (WrapperExecutor.java:122)     at org.apache.maven.wrapper.MavenWrapperMain.main (MavenWrapperMain.java:55) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.1.RELEASE:build-image failed: Connection to the Docker daemon at '/var/run/docker.sock' failed with error "/var/run/docker.sock: Name or service not known"; ensure the Docker daemon is running and accessible     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.apache.maven.wrapper.BootstrapMainStarter.start (BootstrapMainStarter.java:39)     at org.apache.maven.wrapper.WrapperExecutor.execute (WrapperExecutor.java:122)     at org.apache.maven.wrapper.MavenWrapperMain.main (MavenWrapperMain.java:55) Caused by: org.springframework.boot.buildpack.platform.docker.transport.DockerConnectionException: Connection to the Docker daemon at '/var/run/docker.sock' failed with error "/var/run/docker.sock: Name or service not known"; ensure the Docker daemon is running and accessible     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:141)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ImageApi.pull (DockerApi.java:155)     at org.springframework.boot.buildpack.platform.build.Builder.pullBuilder (Builder.java:85)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:63)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:136)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:128)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.apache.maven.wrapper.BootstrapMainStarter.start (BootstrapMainStarter.java:39)     at org.apache.maven.wrapper.WrapperExecutor.execute (WrapperExecutor.java:122)     at org.apache.maven.wrapper.MavenWrapperMain.main (MavenWrapperMain.java:55) Caused by: java.net.UnknownHostException: /var/run/docker.sock: Name or service not known     at java.net.Inet6AddressImpl.lookupAllHostAddr (Native Method)     at java.net.InetAddress$PlatformNameService.lookupAllHostAddr (InetAddress.java:929)     at java.net.InetAddress.getAddressesFromNameService (InetAddress.java:1515)     at java.net.InetAddress$NameServiceAddresses.get (InetAddress.java:848)     at java.net.InetAddress.getAllByName0 (InetAddress.java:1505)     at java.net.InetAddress.getAllByName (InetAddress.java:1364)     at java.net.InetAddress.getAllByName (InetAddress.java:1298)     at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve (SystemDefaultDnsResolver.java:45)     at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect (DefaultHttpClientConnectionOperator.java:112)     at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect (PoolingHttpClientConnectionManager.java:376)     at org.apache.http.impl.execchain.MainClientExec.establishRoute (MainClientExec.java:393)     at org.apache.http.impl.execchain.MainClientExec.execute (MainClientExec.java:236)     at org.apache.http.impl.execchain.ProtocolExec.execute (ProtocolExec.java:186)     at org.apache.http.impl.execchain.RetryExec.execute (RetryExec.java:89)     at org.apache.http.impl.execchain.RedirectExec.execute (RedirectExec.java:110)     at org.apache.http.impl.client.InternalHttpClient.doExecute (InternalHttpClient.java:185)     at org.apache.http.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:118)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.execute (HttpClientTransport.java:128)     at org.springframework.boot.buildpack.platform.docker.transport.HttpClientTransport.post (HttpClientTransport.java:82)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ImageApi.pull (DockerApi.java:155)     at org.springframework.boot.buildpack.platform.build.Builder.pullBuilder (Builder.java:85)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:63)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:136)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:128)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.apache.maven.wrapper.BootstrapMainStarter.start (BootstrapMainStarter.java:39)     at org.apache.maven.wrapper.WrapperExecutor.execute (WrapperExecutor.java:122)     at org.apache.maven.wrapper.MavenWrapperMain.main (MavenWrapperMain.java:55) [ERROR]  [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```  Error does not occurr when  ``` unset DOCKER_HOST mvn spring-boot:build-image -DskipTests ... [INFO] BUILD SUCCESS ``` </body>
		<created>2020-07-10 11:16:50</created>
		<closed>2020-07-10 14:37:19</closed>
	</bug>
	<bug>
		<id>22283</id>
		<title>A WebFlux app that depends on com.amazonaws:DynamoDBLocal fails to start</title>
		<body>Forward port of issue #22282 to 2.4.x.</body>
		<created>2020-07-09 09:37:22</created>
		<closed>2020-07-09 09:38:28</closed>
	</bug>
	<bug>
		<id>22282</id>
		<title>A WebFlux app that depends on com.amazonaws:DynamoDBLocal fails to start</title>
		<body>Forward port of issue #22275 to 2.3.x.</body>
		<created>2020-07-09 09:37:08</created>
		<closed>2020-07-09 09:38:28</closed>
	</bug>
	<bug>
		<id>22275</id>
		<title>A WebFlux app that depends on com.amazonaws:DynamoDBLocal fails to start</title>
		<body>``` org.springframework.context.ApplicationContextException: Unable to start reactive web server; nested exception is java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletHolder at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.onRefresh(ReactiveWebServerApplicationContext.java:81) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at com.example.demo.JettyConditionsApplication.main(JettyConditionsApplication.java:10) [main/:na] Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/servlet/ServletHolder at org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory.createJettyServer(JettyReactiveWebServerFactory.java:174) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory.getWebServer(JettyReactiveWebServerFactory.java:105) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext$ServerManager.&lt;init&gt;(ReactiveWebServerApplicationContext.java:230) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext$ServerManager.get(ReactiveWebServerApplicationContext.java:248) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.createWebServer(ReactiveWebServerApplicationContext.java:91) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.onRefresh(ReactiveWebServerApplicationContext.java:78) ~[spring-boot-2.2.8.RELEASE.jar:2.2.8.RELEASE] ... 8 common frames omitted Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.servlet.ServletHolder at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_252] at java.lang.ClassLoader.loadClass(ClassLoader.java:418) ~[na:1.8.0_252] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352) ~[na:1.8.0_252] at java.lang.ClassLoader.loadClass(ClassLoader.java:351) ~[na:1.8.0_252] ... 14 common frames omitted ```</body>
		<created>2020-07-09 06:59:07</created>
		<closed>2020-07-09 09:38:27</closed>
	</bug>
	<bug>
		<id>22272</id>
		<title>The failure when spring.redis.url is configured with a redis-sentinel:// URL is hard to diagnose</title>
		<body>Forward port of issue #21999 to 2.4.x.</body>
		<created>2020-07-08 20:10:50</created>
		<closed>2020-07-08 20:11:19</closed>
	</bug>
	<bug>
		<id>22263</id>
		<title>Property spring.autoconfigure.exclude ignored by test slices</title>
		<body>Forward port of issue #21736 to 2.4.x.</body>
		<created>2020-07-08 16:23:18</created>
		<closed>2020-07-08 16:24:28</closed>
	</bug>
	<bug>
		<id>22255</id>
		<title>OAuth2ResourceServerAutoConfiguration does not back off completely when spring-security-oauth2-resource-server is not on the classpath</title>
		<body>Forward port of issue #22233 to 2.4.x.</body>
		<created>2020-07-07 16:29:26</created>
		<closed>2020-07-07 16:30:01</closed>
	</bug>
	<bug>
		<id>22250</id>
		<title>NullPointerException in ErrorPageFilter when a MissingServletRequestParameterException is thrown and there's no DefaultHandlerExceptionResolver</title>
		<body>Forward port of issue #22249 to 2.4.x.</body>
		<created>2020-07-07 10:43:20</created>
		<closed>2020-07-07 10:44:03</closed>
	</bug>
	<bug>
		<id>22249</id>
		<title>NullPointerException in ErrorPageFilter when a MissingServletRequestParameterException is thrown and there's no DefaultHandlerExceptionResolver</title>
		<body>Forward port of issue #22248 to 2.3.x.</body>
		<created>2020-07-07 10:43:08</created>
		<closed>2020-07-07 10:44:02</closed>
	</bug>
	<bug>
		<id>22248</id>
		<title>NullPointerException in ErrorPageFilter when a MissingServletRequestParameterException is thrown and there's no DefaultHandlerExceptionResolver</title>
		<body>Forward port of issue #22169 to 2.2.x.</body>
		<created>2020-07-07 10:42:49</created>
		<closed>2020-07-07 10:44:02</closed>
	</bug>
	<bug>
		<id>22238</id>
		<title>Period conversion does not support a ChronoUnit of WEEKS but supports weeks in ISO-8601 (e.g. P2W) and simple (e.g. 2w) formats</title>
		<body>Forward port of issue #22225 to 2.4.x.</body>
		<created>2020-07-06 18:58:49</created>
		<closed>2020-07-06 18:59:12</closed>
	</bug>
	<bug>
		<id>22233</id>
		<title>OAuth2ResourceServerAutoConfiguration does not back off completely when spring-security-oauth2-resource-server is not on the classpath</title>
		<body>I see it in every single Spring Boot app (even if it is eventually excluded because of some other condition).  In a servlet app, it'll always be there (but the things it imports won't be)</body>
		<created>2020-07-06 13:23:55</created>
		<closed>2020-07-07 16:30:00</closed>
	</bug>
	<bug>
		<id>22225</id>
		<title>Period conversion does not support a ChronoUnit of WEEKS but supports weeks in ISO-8601 (e.g. P2W) and simple (e.g. 2w) formats</title>
		<body>It may be worth adding to the documentation (chapter 2.8.8) that `ChronoUnit.WEEKS` is not supported in `@PeriodUnit` annotation to specify how to interpret unqualified integer values for `Period` configuration properties fields.  Specifying weeks fails with a root cause of: ``` ... Caused by: java.lang.IllegalArgumentException: '2' is not a valid simple period at org.springframework.boot.convert.PeriodStyle$1.parse(PeriodStyle.java:59) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE] at org.springframework.boot.convert.StringToPeriodConverter.convert(StringToPeriodConverter.java:65) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE] at org.springframework.boot.convert.StringToPeriodConverter.convert(StringToPeriodConverter.java:50) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE] at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) ~[spring-core-5.2.7.RELEASE.jar:5.2.7.RELEASE] ... 57 common frames omitted Caused by: java.lang.IllegalArgumentException: Unsupported unit Weeks at org.springframework.boot.convert.PeriodStyle$Unit.fromChronoUnit(PeriodStyle.java:273) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE] at org.springframework.boot.convert.PeriodStyle$1.parse(PeriodStyle.java:47) ~[spring-boot-2.3.1.RELEASE.jar:2.3.1.RELEASE] ... 60 common frames omitted ```</body>
		<created>2020-07-05 11:59:56</created>
		<closed>2020-07-06 18:59:12</closed>
	</bug>
	<bug>
		<id>22223</id>
		<title>Image building fails with an unhelpful error message when building an image from a jar that includes the launch script</title>
		<body>I tried to execute bootBuildImage task in gradle multi-module project, but I couldn't create the image because the task failed. I checked that bootBuildImage task in a single gradle project succeeded in  my local machine. Is executing in multi-module project the cause of the failure?   Spring Boot: 2.3.1.RELEASE Gradle: 6.4.1  ``` $ ./gradlew web:bootBuildImage &gt; Task :web:bootBuildImage Building image 'web-app:latest'   &gt; Pulling builder image 'gcr.io/paketo-buildpacks/builder:base-platform-api-0.3' ..................................................  &gt; Pulled builder image 'gcr.io/paketo-buildpacks/builder@sha256:c8a4e4b7a6fe3aaeb4faa7731fcacae8fb91ea90e220506970e12c5a0515f3d4'  &gt; Pulling run image 'gcr.io/paketo-buildpacks/run:base-cnb' ..................................................  &gt; Pulled run image 'cloudfoundry/run@sha256:1a37642c23a2e44231bdbcfca228d20f09425ff312736e96252c7299520e5044'  &gt; Executing lifecycle version v0.8.0  &gt; Using build cache volume 'pack-cache-8ffa72a0e7c4.build'   &gt; Running creator     [creator]     ===&gt; DETECTING     [creator]     ERROR: No buildpack groups passed detection.     [creator]     ERROR: Please check that you are running against the correct path.     [creator]     ERROR: failed to detect: failed to detect: no buildpacks participating  &gt; Task :web:bootBuildImage FAILED  FAILURE: Build failed with an exception.   ```</body>
		<created>2020-07-04 12:39:18</created>
		<closed>2020-07-15 20:19:59</closed>
	</bug>
	<bug>
		<id>22202</id>
		<title>Layered bootJar task causes warnings when custom source set is present in the project</title>
		<body>Forward port of issue #22200 to 2.4.x.</body>
		<created>2020-07-02 14:17:09</created>
		<closed>2020-07-02 14:17:48</closed>
	</bug>
	<bug>
		<id>22200</id>
		<title>Layered bootJar task causes warnings when custom source set is present in the project</title>
		<body>I'm using `bootJar` task with a `layered` feature enabled on a project with the custom source set - `testIntegration`. Everything works as expected and there are no errors of any kind. However, Gradle produces warnings in the output like in the following truncated example:  ``` The testIntegrationCompile configuration has been deprecated for resolution. This will fail with an error in Gradle 7.0 ... The testIntegrationCompileOnly configuration has been deprecated for resolution. This will fail with an error in Gradle 7.0 ... The testIntegrationRuntime configuration has been deprecated for resolution. This will fail with an error in Gradle 7.0 ... ```  After some debugging, I was able to pin the cause at the `LayerResolver.processConfiguration()` private method. It uses the `DEPRECATED_FOR_RESOLUTION_CONFIGURATIONS` for filtering `Configurations` that should not be resolved for dependencies. Since my project contains a custom source set with corresponding configurations extended from `testImplementation` and `testRuntimeOnly`, deprecated configurations sneak-in via Gradle's configuration hierarchy.  As `bootJar` tasks already filters-out hardcoded set of deprecated configuration names, maybe it makes sense to expand this filtering for custom configurations whose names end with `Compile`, `CompileOnly` and `Runtime`. When Gradle 7.0 will be released, I guess warnings will not be present since I'm expecting that Gradle will not include deprecated configurations in the hierarchy built with `extendsFrom`.  I don't have a simple example for demonstrating the issue, but you can check out [this project](https://github.com/croz-ltd/klokwrk-project) project and run `./gradlew -p cargotracker/cargotracker-booking-queryside-rdbms-projection-app clean bootJar --warning-mode all` from project root. Related `build.gradle` is [here](https://github.com/croz-ltd/klokwrk-project/blob/master/cargotracker/cargotracker-booking-queryside-rdbms-projection-app/build.gradle).  Spring Boot: 2.3.1.RELEASE Gradle: 6.5 JDK: 11.0.7  Tnx.</body>
		<created>2020-07-02 11:31:42</created>
		<closed>2020-07-02 14:17:47</closed>
	</bug>
	<bug>
		<id>22198</id>
		<title>@ConditionalOnSingleCandidate does not match when there is a single candidate that is a scoped bean</title>
		<body>Forward port of issue #22197 to 2.4.x.</body>
		<created>2020-07-02 09:41:13</created>
		<closed>2020-07-02 09:41:36</closed>
	</bug>
	<bug>
		<id>22197</id>
		<title>@ConditionalOnSingleCandidate does not match when there is a single candidate that is a scoped bean</title>
		<body>Forward port of issue #22038 to 2.3.x.</body>
		<created>2020-07-02 09:40:58</created>
		<closed>2020-07-02 09:41:36</closed>
	</bug>
	<bug>
		<id>22196</id>
		<title>Kafka Stream consumer metrics were lost in the move away from KafkaConsumerMetrics</title>
		<body>Forward port of issue #21921 to 2.4.x.</body>
		<created>2020-07-02 08:32:16</created>
		<closed>2020-07-02 08:33:12</closed>
	</bug>
	<bug>
		<id>22180</id>
		<title>NPE in spring-boot-maven-plugin:build-image when setting custom builder that is not a builder</title>
		<body>Forward port of issue #22179 to 2.4.x.</body>
		<created>2020-07-01 10:44:04</created>
		<closed>2020-07-01 10:45:06</closed>
	</bug>
	<bug>
		<id>22179</id>
		<title>NPE in spring-boot-maven-plugin:build-image when setting custom builder that is not a builder</title>
		<body>When I try to set a custom builder in the maven plugin by following the documentation: https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#build-image-example-custom-image-builder  Like this: ```       &lt;plugin&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;image&gt;             &lt;builder&gt;gcr.io/paketo-buildpacks/bellsoft-liberica&lt;/builder&gt;           &lt;/image&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;  ``` Running `./mvnw spring-boot:build-image` fails with the following exception:  ``` Caused by: java.lang.NullPointerException     at org.springframework.boot.buildpack.platform.docker.type.ImageConfig.parseConfigEnv (ImageConfig.java:52)     at org.springframework.boot.buildpack.platform.docker.type.ImageConfig.&lt;init&gt; (ImageConfig.java:46)     at org.springframework.boot.buildpack.platform.docker.type.Image.&lt;init&gt; (Image.java:51)     at org.springframework.boot.buildpack.platform.json.MappedObject.of (MappedObject.java:148)     at org.springframework.boot.buildpack.platform.json.MappedObject.of (MappedObject.java:131)     at org.springframework.boot.buildpack.platform.docker.type.Image.of (Image.java:111)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ImageApi.pull (DockerApi.java:163)     at org.springframework.boot.buildpack.platform.build.Builder.pullBuilder (Builder.java:85)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:63)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:136)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:128) ```  I made this project to reproduce the error: https://github.com/jcfandino/spring-boot-npe You can look at the build pipeline to see the error: https://github.com/jcfandino/spring-boot-npe/actions  </body>
		<created>2020-06-30 22:12:08</created>
		<closed>2020-07-01 10:45:06</closed>
	</bug>
	<bug>
		<id>22176</id>
		<title>Accept empty filter dispatcher types in auto-configurations</title>
		<body>Forward port of issue #22175 to 2.4.x.</body>
		<created>2020-06-30 16:40:05</created>
		<closed>2020-06-30 16:40:29</closed>
	</bug>
	<bug>
		<id>22175</id>
		<title>Accept empty filter dispatcher types in auto-configurations</title>
		<body>Forward port of issue #22138 to 2.3.x.</body>
		<created>2020-06-30 16:39:56</created>
		<closed>2020-06-30 16:40:28</closed>
	</bug>
	<bug>
		<id>22169</id>
		<title>NullPointerException in ErrorPageFilter when a MissingServletRequestParameterException is thrown and there's no DefaultHandlerExceptionResolver</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; We are using Spring Boot 2.1.12 with Spring Web 5.1.3. A controller has a method annotated with `@RequestMapping` and a mandatory `@RequestParam` parameter. When the controller is called without the mandatory parameter, Spring Web throws a `MissingServletRequestParameterException` without a root cause. The `ErrorPageFilter`in Spring Boot expects all `NestedServletException`s (which `MissingServletRequestParameterException` is derived from) to have a root cause, leading to the `NullPointerException`: ``` java.lang.NullPointerException at org.springframework.boot.web.servlet.support.ErrorPageFilter.handleException(ErrorPageFilter.java:165) at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:142) at org.springframework.boot.web.servlet.support.ErrorPageFilter.access$000(ErrorPageFilter.java:66) at org.springframework.boot.web.servlet.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:103) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:121) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ... ```</body>
		<created>2020-06-30 13:24:03</created>
		<closed>2020-07-07 10:44:01</closed>
	</bug>
	<bug>
		<id>22168</id>
		<title>TomcatMetricsBinder may log a warning for an NPE if the context is closed before the ApplicationStartedEvent is published</title>
		<body>Forward port of issue #22167 to 2.4.x.</body>
		<created>2020-06-30 13:13:10</created>
		<closed>2020-06-30 13:13:34</closed>
	</bug>
	<bug>
		<id>22167</id>
		<title>TomcatMetricsBinder may log a warning for an NPE if the context is closed before the ApplicationStartedEvent is published</title>
		<body>Forward port of issue #22141 to 2.3.x.</body>
		<created>2020-06-30 13:10:02</created>
		<closed>2020-06-30 13:13:33</closed>
	</bug>
	<bug>
		<id>22160</id>
		<title>Resource loading fails in Tomcat when Spring Boot is loaded from the common class loader</title>
		<body>Forward port of issue #22119 to 2.4.x.</body>
		<created>2020-06-30 09:53:54</created>
		<closed>2020-06-30 09:56:29</closed>
	</bug>
	<bug>
		<id>22128</id>
		<title>EnumSet.copyOf calls fail with empty collections</title>
		<body>Both `SecurityFilterAutoConfiguration` and `SessionRepositoryFilterConfiguration` use `EnumSet::copyOf` in a stream. If the stream ends up being empty then the `copyOf` method will throw an exception.</body>
		<created>2020-06-26 22:21:49</created>
		<closed>2020-06-27 17:37:21</closed>
	</bug>
	<bug>
		<id>22121</id>
		<title>layertools with a wrong option seems to fail silently</title>
		<body>Forward port of issue #22042 to 2.4.x.</body>
		<created>2020-06-26 16:52:07</created>
		<closed>2020-06-26 16:52:20</closed>
	</bug>
	<bug>
		<id>22119</id>
		<title>Resource loading fails in Tomcat when Spring Boot is loaded from the common class loader</title>
		<body>Hello there. We have recently attempted to upgrade to Spring Boot 2.3.0 (and then 2.3.1), but unfortunately class loader changes made in #20900 broke our deployment.  We deploy as a skinny WAR (only the application JAR inside WAR) on Tomcat 8.5 where all the libraries are loaded via [Tomcats Common class loader](https://tomcat.apache.org/tomcat-8.5-doc/class-loader-howto.html) (JARs in $CATALINA_HOME/lib). Technically we should be using the Shared class loader, but oh well. We are doing this because we have hundreds of such deployments, so memory usage and disk space is a consideration.  Since #20900 Spring Boot can no longer load resources (like _application.properties_) if it itself has been loaded by Tomcats Common class loader. Including Spring, Spring Boot, and all other libraries that use Spring annotations inside the WAR file seems to solve the issue, but that is a lot of duplication in our case.  I am not sure if this qualifies as a bug per se, but this is a significant change in behavior, and we are unsure how to best address it?</body>
		<created>2020-06-26 12:29:14</created>
		<closed>2020-06-30 09:56:28</closed>
	</bug>
	<bug>
		<id>22096</id>
		<title>RedisReactiveHealthIndicator is broken with Redis cluster mode</title>
		<body>Forward port of issue #22061 to 2.3.x.</body>
		<created>2020-06-24 18:46:52</created>
		<closed>2020-06-24 18:47:41</closed>
	</bug>
	<bug>
		<id>22095</id>
		<title>RedisReactiveHealthIndicator is broken with Redis cluster mode</title>
		<body>Forward port of issue #22061 to 2.4.x.</body>
		<created>2020-06-24 18:42:21</created>
		<closed>2020-06-24 18:42:34</closed>
	</bug>
	<bug>
		<id>22064</id>
		<title>Management health group does not inherit show-details property</title>
		<body>Forward port of issue #22063 to 2.4.x.</body>
		<created>2020-06-23 06:16:04</created>
		<closed>2020-06-23 06:16:33</closed>
	</bug>
	<bug>
		<id>22063</id>
		<title>Management health group does not inherit show-details property</title>
		<body>Forward port of issue #22022 to 2.3.x.</body>
		<created>2020-06-23 06:15:51</created>
		<closed>2020-06-23 06:16:33</closed>
	</bug>
	<bug>
		<id>22061</id>
		<title>RedisReactiveHealthIndicator is broken with Redis cluster mode</title>
		<body>After upgrading to Spring Boot 2.2.8.RELEASE from 2.2.7.RELEASE, the Redis health indicator started reporting down with the following error detail on clustered Redis:  ```json "redis": {    "details": {      "error": "java.lang.IllegalArgumentException: Value must not be null"   },   "status": "DOWN"  } ```  It appears that the info properties coming back in 2.2.8 have the IP address and port prefix on the keys (e.g. `127.0.0.1:7002.redis_version`). It also appears the properties come back from each node this way.  The attached zip file reproduces the issue. Instructions can be found in `instructions.md` in the attached zip for how we are starting a clustered Redis docker container.  [clustered-redis-issue.zip](https://github.com/spring-projects/spring-boot/files/4815435/clustered-redis-issue.zip) </body>
		<created>2020-06-22 20:30:30</created>
		<closed>2020-06-24 18:42:33</closed>
	</bug>
	<bug>
		<id>22042</id>
		<title>layertools with a wrong option seems to fail silently</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; `layertools` with a wrong option seems to fail silently.  If I use a correct option with [this sample](https://github.com/izeye/spring-boot-throwaway-branches/tree/minimal), it succeeds as follows:  ``` $ ./gradlew clean bootJar  BUILD SUCCESSFUL in 1s 4 actionable tasks: 4 executed $ java -Djarmode=layertools -jar build/libs/spring-boot-throwaway-branches-1.0.jar extract --destination build/temp $ ls -al build/temp/ total 0 drwxr-xr-x  6 user  staff  192 Jun 21 11:29 . drwxr-xr-x  8 user  staff  256 Jun 21 11:29 .. drwxr-xr-x  4 user  staff  128 Jun 21 11:29 application drwxr-xr-x  3 user  staff   96 Jun 21 11:29 dependencies drwxr-xr-x  2 user  staff   64 Jun 21 11:29 snapshot-dependencies drwxr-xr-x  3 user  staff   96 Jun 21 11:29 spring-boot-loader $ ```  However, if I use a wrong option, it seems to fail silently as follows:  ``` $ ./gradlew clean bootJar  BUILD SUCCESSFUL in 1s 4 actionable tasks: 4 executed $ java -Djarmode=layertools -jar build/libs/spring-boot-throwaway-branches-1.0.jar extract --destination=build/temp $ ls -al build/temp/ ls: build/temp/: No such file or directory $ ls -al total 56 drwxr-xr-x  15 user  staff   480 Jun 21 11:30 . drwxr-xr-x  67 user  staff  2144 Jun 18 16:35 .. drwxr-xr-x  16 user  staff   512 Jun 21 11:27 .git -rw-r--r--   1 user  staff   109 Jun 11 09:56 .gitignore drwxr-xr-x  12 user  staff   384 Jun 20 22:29 .gradle drwxr-xr-x  14 user  staff   448 Jun 21 11:24 .idea drwxr-xr-x   7 user  staff   224 Jun 21 11:30 build -rw-r--r--   1 user  staff  1151 Jun 21 10:38 build.gradle drwxr-xr-x   3 user  staff    96 Dec 12  2018 gradle -rw-r--r--   1 user  staff     0 Jun 12 15:57 gradle.properties -rwxr-xr-x   1 user  staff  5770 Jun 12 16:50 gradlew -rw-r--r--   1 user  staff  3058 Jun 12 16:50 gradlew.bat -rw-r--r--   1 user  staff    53 Dec 12  2018 settings.gradle -rw-r--r--   1 user  staff   760 Dec 12  2018 spring-boot-throwaway-branches.iml drwxr-xr-x   4 user  staff   128 Nov  7  2019 src $  ```  If I omit the `destination` option, it succeeds as follows:  ``` $ java -Djarmode=layertools -jar build/libs/spring-boot-throwaway-branches-1.0.jar extract $ ls -al total 56 drwxr-xr-x  19 user  staff   608 Jun 21 11:31 . drwxr-xr-x  67 user  staff  2144 Jun 18 16:35 .. drwxr-xr-x  16 user  staff   512 Jun 21 11:27 .git -rw-r--r--   1 user  staff   109 Jun 11 09:56 .gitignore drwxr-xr-x  12 user  staff   384 Jun 20 22:29 .gradle drwxr-xr-x  14 user  staff   448 Jun 21 11:24 .idea drwxr-xr-x   4 user  staff   128 Jun 21 11:31 application drwxr-xr-x   7 user  staff   224 Jun 21 11:30 build -rw-r--r--   1 user  staff  1151 Jun 21 10:38 build.gradle drwxr-xr-x   3 user  staff    96 Jun 21 11:31 dependencies drwxr-xr-x   3 user  staff    96 Dec 12  2018 gradle -rw-r--r--   1 user  staff     0 Jun 12 15:57 gradle.properties -rwxr-xr-x   1 user  staff  5770 Jun 12 16:50 gradlew -rw-r--r--   1 user  staff  3058 Jun 12 16:50 gradlew.bat -rw-r--r--   1 user  staff    53 Dec 12  2018 settings.gradle drwxr-xr-x   2 user  staff    64 Jun 21 11:31 snapshot-dependencies drwxr-xr-x   3 user  staff    96 Jun 21 11:31 spring-boot-loader -rw-r--r--   1 user  staff   760 Dec 12  2018 spring-boot-throwaway-branches.iml drwxr-xr-x   4 user  staff   128 Nov  7  2019 src $ ```</body>
		<created>2020-06-21 02:46:06</created>
		<closed>2020-06-26 16:52:19</closed>
	</bug>
	<bug>
		<id>22038</id>
		<title>@ConditionalOnSingleCandidate does not match when there is a single candidate that is a scoped bean</title>
		<body>When the `DataSource` is refresh scope(provided by spring-cloud), I cannot inject the `JdbcTemplate` to my component. Probably, `JdbcTemplateConfiguration`(auto-configure) not work.  * Configuration class  ```java   @Bean   @RefreshScope   DataSource dataSource(DataSourceProperties properties) {     HikariDataSource dataSource = properties.initializeDataSourceBuilder().type(HikariDataSource.class).build();     if (StringUtils.hasText(properties.getName())) {       dataSource.setPoolName(properties.getName());     }     return dataSource;   } ```  * My component (controller)  ```java   @RestController   static class SettingsController {     private final JdbcOperations operations;      SettingsController(JdbcOperations operations) {       this.operations = operations;     }      @GetMapping("/settings")     public List&lt;Map&lt;String, Object&gt;&gt; getSettings() {       return operations.queryForList("select * from settings order by key");     }   } ```  * log  ``` ... Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2020-06-20 19:23:27.503 ERROR 35308 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of constructor in com.example.demo.RefreshableDsDemoApplication$SettingsController required a bean of type 'org.springframework.jdbc.core.JdbcOperations' that could not be found. ... ```  ### Reproduce project  * https://github.com/kazuki43zoo/refreshable-ds-demo  ### How to reproduce  Please run the `RefreshableDsDemoApplicationTests`.  &gt; **NOTE:** &gt; &gt; When the `DataSource` is singleton scope, it work fine. (Please run the `NonRefreshableDsDemoApplicationTests`) </body>
		<created>2020-06-20 10:28:38</created>
		<closed>2020-07-02 09:41:35</closed>
	</bug>
	<bug>
		<id>22037</id>
		<title>NamedPipeSocket does not handle FileSystemException when establishing the file channel</title>
		<body>Forward port of issue #22035 to 2.4.x.</body>
		<created>2020-06-19 20:44:07</created>
		<closed>2020-06-19 20:44:38</closed>
	</bug>
	<bug>
		<id>22019</id>
		<title>In a context hierarchy, timeout-per-shutdown-phase is only honoured in the root context</title>
		<body>Forward port of issue #22014 to 2.4.x.</body>
		<created>2020-06-19 07:22:52</created>
		<closed>2020-06-19 07:23:17</closed>
	</bug>
	<bug>
		<id>22017</id>
		<title>Image references passed to a CNB builder are not validated</title>
		<body>Forward port of issue #21495 to 2.4.x.</body>
		<created>2020-06-18 20:11:16</created>
		<closed>2020-06-18 20:12:07</closed>
	</bug>
	<bug>
		<id>22014</id>
		<title>In a context hierarchy, timeout-per-shutdown-phase is only honoured in the root context</title>
		<body>Spring Boot 2.3.1  I've been playing around with the latest Spring Boot Graceful Shutdown feature and discovered that after adding `spring-cloud-config-server`, as a dependency, my Spring Boot application fails to use configured `spring.lifecycle.timeout-per-shutdown-phase` property and, instead, it's using the default 30s value for graceful shutdown timeout.  I've prepared a minimal application: https://github.com/pszemus/graceful-shutdown-demo that has configured graceful shutdown timeout of 8s: https://github.com/pszemus/graceful-shutdown-demo/blob/master/src/main/resources/application.yml#L5 After requesting the long lasting endpoint `/greeting` and stoping the application it should stop after 8 seconds, but it's stopping after 30 seconds, instead: ``` 2020-06-18 16:02:59.629  INFO 31481 --- [extShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete 2020-06-18 16:03:29.631  INFO 31481 --- [extShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Failed to shut down 1 bean with phase value 2147483647 within timeout of 30000ms: [webServerGracefulShutdown] 2020-06-18 16:03:29.680  INFO 31481 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown aborted with one or more requests still active ```  Configured 8 seconds timeout is visible in `/actuator/configprops`, but apparently it's not used: ```         "spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties": {           "prefix": "spring.lifecycle",           "properties": {             "timeoutPerShutdownPhase": "PT8S"           },           "inputs": {             "timeoutPerShutdownPhase": {               "origin": "class path resource [application.yml]:5:37",               "value": "8s"             }           }         } ```  If one gets rid of `spring-cloud-config-server` from pom.xml: https://github.com/pszemus/graceful-shutdown-demo/blob/master/pom.xml#L22 then the application starts using configured 8s timeout: ``` C2020-06-18 15:54:13.934  INFO 30672 --- [extShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete 2020-06-18 15:54:21.937  INFO 30672 --- [extShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Failed to shut down 1 bean with phase value 2147483647 within timeout of 8000ms: [webServerGracefulShutdown] 2020-06-18 15:54:21.983  INFO 30672 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown aborted with one or more requests still active ```</body>
		<created>2020-06-18 14:19:24</created>
		<closed>2020-06-19 07:23:17</closed>
	</bug>
	<bug>
		<id>22011</id>
		<title>LOGBACK: No context given for c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy</title>
		<body>Forward port of issue #22010 to 2.4.x.</body>
		<created>2020-06-18 10:03:54</created>
		<closed>2020-06-18 10:04:51</closed>
	</bug>
	<bug>
		<id>22010</id>
		<title>LOGBACK: No context given for c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy</title>
		<body>Forward port of issue #21056 to 2.3.x.</body>
		<created>2020-06-18 10:03:38</created>
		<closed>2020-06-18 10:04:51</closed>
	</bug>
	<bug>
		<id>22009</id>
		<title>Projects using Maven and spring-security-oauth2-client end up with a downgraded version of json-smart that isn't compatible with the managed version of json-path</title>
		<body>Forward port of issue #21939 to 2.4.x.</body>
		<created>2020-06-18 09:34:20</created>
		<closed>2020-06-18 09:34:39</closed>
	</bug>
	<bug>
		<id>22007</id>
		<title>MockBean does not resolve the right type for abstract test class</title>
		<body>Forward port of issue #22006 to 2.4.x.</body>
		<created>2020-06-18 00:27:13</created>
		<closed>2020-06-18 00:27:25</closed>
	</bug>
	<bug>
		<id>22006</id>
		<title>MockBean does not resolve the right type for abstract test class</title>
		<body>Forward port of issue #20916 to 2.3.x.</body>
		<created>2020-06-18 00:26:45</created>
		<closed>2020-06-18 00:27:24</closed>
	</bug>
	<bug>
		<id>21999</id>
		<title>The failure when spring.redis.url is configured with a redis-sentinel:// URL is hard to diagnose</title>
		<body>The current failure isn't very helpful (see https://github.com/spring-projects/spring-boot/issues/21920). We should fail more gracefully and point people towards to spring.redis.sentinel.* properties.</body>
		<created>2020-06-17 15:03:04</created>
		<closed>2020-07-08 20:11:19</closed>
	</bug>
	<bug>
		<id>21940</id>
		<title>Dependencies enforced without applying plugin</title>
		<body>Forward port of issue #21911 to 2.4.x.</body>
		<created>2020-06-16 09:10:46</created>
		<closed>2020-06-16 09:11:53</closed>
	</bug>
	<bug>
		<id>21939</id>
		<title>Projects using Maven and spring-security-oauth2-client end up with a downgraded version of json-smart that isn't compatible with the managed version of json-path</title>
		<body>There is a clash over the transitive dependency on `json-smart` between `spring-security-oauth2-client:5.3.3` and `spring-boot-starter-test:2.3.1`. [The issue was addressed in `spring-security-oauth2-client`](https://github.com/spring-projects/spring-security/commit/94737df37865fa754f4c5dd14e5a225a8ce94739), but [`spring-boot-dependencies` is still causing this to clash](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/build.gradle#L1282).  As this is now an issue with the dependency declaration in `spring-boot-dependencies`, and because the corresponding ticket has already been closed in `spring-security`, I'll reopen it here with updated Spring version numbers. (Not sure which ticket queue it should be on.)  **Full details are here: https://github.com/spring-projects/spring-security/issues/8608#issuecomment-644616995**  ``` [INFO] +- org.springframework.security:spring-security-oauth2-client:jar:5.3.3.RELEASE:compile [INFO] |  +- com.nimbusds:oauth2-oidc-sdk:jar:7.1.1:compile (version managed from 7.5) [INFO] |  |  +- net.minidev:json-smart:jar:1.3.1:compile ``` Version 1.3.1 doesn't seem to support JSON Path (sufficiently). Version 2.3 isn't pulled in because of `spring-boot-dependencies`importing an older version of `com.nimbusds:oauth2-oidc-sdk`:  ``` [INFO] +- org.springframework.boot:spring-boot-starter-test:jar:2.3.1.RELEASE:test [INFO] |  +- (org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:test - omitted for duplicate) [INFO] |  +- com.jayway.jsonpath:json-path:jar:2.4.0:test [INFO] |  |  +- (net.minidev:json-smart:jar:2.3:test - omitted for conflict with 1.3.1) ```  Can `com.nimbusds:oauth2-oidc-sdk` be updated to `7.5` (or `7.+`, as in [`spring-security-oauth2-client`](https://github.com/spring-projects/spring-security/commit/94737df37865fa754f4c5dd14e5a225a8ce94739))?  ``` management "com.nimbusds:nimbus-jose-jwt:8.+" management "com.nimbusds:oauth2-oidc-sdk:7.+"  ```</body>
		<created>2020-06-16 08:43:25</created>
		<closed>2020-06-18 09:34:39</closed>
	</bug>
	<bug>
		<id>21925</id>
		<title>Welcome page support bypasses controllers mapped to /</title>
		<body>Forward port of issue #21909 to 2.4.x.</body>
		<created>2020-06-15 16:09:03</created>
		<closed>2020-06-15 16:09:30</closed>
	</bug>
	<bug>
		<id>21911</id>
		<title>Dependencies enforced without applying plugin</title>
		<body>starting with spring-boot-2.3.0 dependencies seem to be enforced even without applying `spring-boot` plugin / dependency management.  I couldn't find any changes documented in that respect. </body>
		<created>2020-06-13 12:23:11</created>
		<closed>2020-06-16 09:11:53</closed>
	</bug>
	<bug>
		<id>21909</id>
		<title>Welcome page support bypasses controllers mapped to /</title>
		<body>The new welcome page support added in Spring Boot 3.2.1  bypasses controllers mapped to / when an "index" template exists.   This prevents the template's model to be populated.  **Spring Boot version**: 2.3.1  **Sample application reproducing the problem**: [welcome-page-issue.zip](https://github.com/spring-projects/spring-boot/files/4774350/welcome-page-issue.zip) </body>
		<created>2020-06-13 09:19:59</created>
		<closed>2020-06-15 16:09:30</closed>
	</bug>
	<bug>
		<id>21904</id>
		<title>AvailabilityChangeEvent does not carry generic information</title>
		<body>Forward port of issue #21898 to 2.4.x.</body>
		<created>2020-06-12 17:50:49</created>
		<closed>2020-06-12 17:51:57</closed>
	</bug>
	<bug>
		<id>21898</id>
		<title>AvailabilityChangeEvent does not carry generic information</title>
		<body>Synopsis -------- I was experimenting with the new Kubernetes probes support in Spring Actuator. The official [documentation](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-application-availability-managing) suggests that we can listen to changes in readiness or liveness by registering a bean like the following: ```java @Component public class ReadinessStateExporter {      @EventListener     public void onStateChange(AvailabilityChangeEvent&lt;ReadinessState&gt; event) {         switch (event.getState()) {         case ACCEPTING_TRAFFIC:             // create file /tmp/healthy         break;         case REFUSING_TRAFFIC:             // remove file /tmp/healthy         break;         }     } } ``` However, running an application with a bean like this fails with: ```java java.lang.ClassCastException: org.springframework.boot.availability.LivenessState cannot be cast to org.springframework.boot.availability.ReadinessState ```  Details ------- This failure makes sense because during the application startup, Spring Boot fires both `AvailabilityChangeEvent&lt;ReadinessState&gt;` and `AvailabilityChangeEvent&lt;LivenessState&gt;` events.  Due to erasure, both of those events would e handled by the `ReadinessStateExporter`. Quite reasonably, the `LivenessState` change event should fail because we can't cast `LivenessState` to `ReadinessState`.  Hence the error: ```java java.lang.ClassCastException: org.springframework.boot.availability.LivenessState cannot be cast to org.springframework.boot.availability.ReadinessState at ReadinessChangedListener.onStateChange(ReadinessChangedListener.java:13) ~[classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161] at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:305) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:190) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:153) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.boot.availability.AvailabilityChangeEvent.publish(AvailabilityChangeEvent.java:81) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.availability.AvailabilityChangeEvent.publish(AvailabilityChangeEvent.java:67) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:103) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:71) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at DemoApplication.main(DemoApplication.java:10) [classes/:na] ```  I guess we probably should change the documentation as the sample code makes the Spring App to fail at startup. Also, we could listen to `AvailabilityState `: ```java @Component public class ReadinessChangedListener {      @EventListener     public void onStateChange(AvailabilityChangeEvent&lt;AvailabilityState&gt; event) {         // check if it's liveness or readiness or anything else     }  } ``` Please kindly let me know what you think of this. Cheers! </body>
		<created>2020-06-12 00:06:50</created>
		<closed>2020-06-12 17:51:56</closed>
	</bug>
	<bug>
		<id>21897</id>
		<title>Background preinitialisation may cause Jackson2ObjectMapperBuilder's Kotlin detection warning to be silently dropped</title>
		<body>Hi, I'm not sure when it started to happen, maybe even before 2.3.0, but it's easily reproduced with a minimal `spring-boot-starter-web` app and can be fixed by disabling `BackgroundPreinitializer`. Could you check it please? Many thanks.</body>
		<created>2020-06-11 23:53:36</created>
		<closed>2020-07-27 10:31:27</closed>
	</bug>
	<bug>
		<id>21895</id>
		<title>Not able to use digest in 'builder' reference</title>
		<body>Forward port of issue #21879 to 2.4.x.</body>
		<created>2020-06-11 19:32:43</created>
		<closed>2020-06-11 19:33:04</closed>
	</bug>
	<bug>
		<id>21892</id>
		<title>Docker calls may hang forever</title>
		<body>Forward port of issue #21672 to 2.4.x.</body>
		<created>2020-06-11 16:55:31</created>
		<closed>2020-06-11 16:55:52</closed>
	</bug>
	<bug>
		<id>21883</id>
		<title>Default log levels are inconsistent between log4J2 and logback</title>
		<body>Forward port of #21293 to 2.4.x</body>
		<created>2020-06-11 01:55:30</created>
		<closed>2020-06-11 01:55:45</closed>
	</bug>
	<bug>
		<id>21882</id>
		<title>Default log levels are inconsistent between log4J2 and logback</title>
		<body>Forward port of issue #21293 to 2.3.x.</body>
		<created>2020-06-11 01:53:55</created>
		<closed>2020-06-11 01:54:52</closed>
	</bug>
	<bug>
		<id>21881</id>
		<title>Actuator 'loggers' endpoint does not return all loggers for log4j</title>
		<body>Forward port of issue #21880 to 2.4.x.</body>
		<created>2020-06-11 01:52:37</created>
		<closed>2020-06-11 01:52:55</closed>
	</bug>
	<bug>
		<id>21880</id>
		<title>Actuator 'loggers' endpoint does not return all loggers for log4j</title>
		<body>Forward port of issue #20037 to 2.3.x.</body>
		<created>2020-06-11 01:50:47</created>
		<closed>2020-06-11 01:52:54</closed>
	</bug>
	<bug>
		<id>21879</id>
		<title>Not able to use digest in 'builder' reference</title>
		<body>Not able to use digest in builder property, ``` bootBuildImage { builder = "registry/repo/image:@sha256:&lt;id&gt;" } ``` bcoz of the below,  https://github.com/spring-projects/spring-boot/blob/1c3cf220644e0b11915fbd1aa6501d9a93335cc5/spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/build/BuildRequest.java#L87  Any specific reason not to allow digest in the builder?</body>
		<created>2020-06-11 00:19:42</created>
		<closed>2020-06-11 19:33:03</closed>
	</bug>
	<bug>
		<id>21875</id>
		<title>Different actuator management server port changes response on errors</title>
		<body>Forward port of issue #21036 to 2.3.1.</body>
		<created>2020-06-10 20:03:52</created>
		<closed>2020-06-10 20:05:06</closed>
	</bug>
	<bug>
		<id>21874</id>
		<title>Different actuator management server port changes response on errors </title>
		<body>Forward port of issue #21036 to 2.4.x.</body>
		<created>2020-06-10 18:57:26</created>
		<closed>2020-06-10 18:57:43</closed>
	</bug>
	<bug>
		<id>21867</id>
		<title> Auto-Configuration for Cassandra does not back off if a custom ReactiveSessionFactory is defined </title>
		<body>Forward port of issue #21769 to 2.4.x.</body>
		<created>2020-06-10 16:14:03</created>
		<closed>2020-06-10 16:14:25</closed>
	</bug>
	<bug>
		<id>21839</id>
		<title>WebMvcTest does not use the auto-configured ordering for Spring Security's filter</title>
		<body>Forward port of issue #21837 to 2.4.x.</body>
		<created>2020-06-10 08:56:47</created>
		<closed>2020-06-10 08:57:25</closed>
	</bug>
	<bug>
		<id>21837</id>
		<title>WebMvcTest does not use the auto-configured ordering for Spring Security's filter</title>
		<body>Forward port of issue #21801 to 2.3.x.</body>
		<created>2020-06-10 08:56:29</created>
		<closed>2020-06-10 08:57:25</closed>
	</bug>
	<bug>
		<id>21801</id>
		<title>WebMvcTest does not use the auto-configured ordering for Spring Security's filter</title>
		<body>**Describe the bug** WebMvcTests with spring-security-test have a different filter order than during "normal" runtime.  **To Reproduce** Define a filter after the default order of Spring Security Filters (=0) and try to access the userPrincipal from the HttpServletRequest:       import java.io.IOException;     import javax.servlet.FilterChain;     import javax.servlet.ServletException;     import javax.servlet.http.HttpServletRequest;     import javax.servlet.http.HttpServletResponse;     import org.springframework.core.Ordered;     import org.springframework.core.annotation.Order;     import org.springframework.stereotype.Component;     import org.springframework.util.Assert;     import org.springframework.web.filter.OncePerRequestFilter;          @Component     @Order(TestFilter.ORDER)     public class TestFilter extends OncePerRequestFilter {              public static final int ORDER = Ordered.LOWEST_PRECEDENCE - 10; // - 10 to allow applications/ libraries to register filters after this one              @Override         protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {             Assert.notNull(request.getUserPrincipal(), "userPrincipal");                  filterChain.doFilter(request, response);         }     }  **Expected behavior** Same filter order during tests as during runtime.    </body>
		<created>2020-06-10 07:49:35</created>
		<closed>2020-06-10 08:57:24</closed>
	</bug>
	<bug>
		<id>21788</id>
		<title>STOMP does not work with lazy initialization</title>
		<body>Forward port of issue #21786 to 2.4.x.</body>
		<created>2020-06-09 10:31:35</created>
		<closed>2020-06-09 10:32:49</closed>
	</bug>
	<bug>
		<id>21786</id>
		<title>STOMP does not work with lazy initialization</title>
		<body>Forward port of issue #19611 to 2.3.x.</body>
		<created>2020-06-09 10:02:28</created>
		<closed>2020-06-09 10:32:49</closed>
	</bug>
	<bug>
		<id>21770</id>
		<title>Fix BasicErrorController to use binding error cfg</title>
		<body>Forward port of issue #21702 to 2.4.x.</body>
		<created>2020-06-08 20:04:06</created>
		<closed>2020-06-08 20:04:28</closed>
	</bug>
	<bug>
		<id>21766</id>
		<title>Fix MustacheEnvironmentCollector to not ignore native fetcher</title>
		<body>Forward port of issue #21060 to 2.4.x.</body>
		<created>2020-06-08 18:40:31</created>
		<closed>2020-06-08 18:40:51</closed>
	</bug>
	<bug>
		<id>21756</id>
		<title>Spring Boot CLI adds classes from current directory to the classpath on Unix-like platforms</title>
		<body>Forward port of issue #21755 to 2.4.x.</body>
		<created>2020-06-08 13:44:09</created>
		<closed>2020-06-08 13:45:56</closed>
	</bug>
	<bug>
		<id>21755</id>
		<title>Spring Boot CLI adds classes from current directory to the classpath on Unix-like platforms</title>
		<body>Forward port of issue #21754 to 2.3.x.</body>
		<created>2020-06-08 13:43:50</created>
		<closed>2020-06-08 13:45:56</closed>
	</bug>
	<bug>
		<id>21754</id>
		<title>Spring Boot CLI adds classes from current directory to the classpath on Unix-like platforms</title>
		<body>Forward port of issue #19910 to 2.2.x.</body>
		<created>2020-06-08 13:43:23</created>
		<closed>2020-06-08 13:45:55</closed>
	</bug>
	<bug>
		<id>21741</id>
		<title>Auto-Configuration for Cassandra does not back off if a custom ReactiveSessionFactory is defined</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general `ideal-for-contribution` issues. Thanks!  ## Problem The auto-configuration for Cassandra defines a `ReactiveSessionFactory` but does not check if the user has configured its own. The lack of check also means that the auto-configuration would potentially overrides the user's decision. Since Spring Boot works by default with bean overriding disabled, creating your own `ReactiveSessionFactory` leads to:  ``` 2020-06-07 15:26:34,604 DEBUG o.s.b.d.LoggingFailureAnalysisReporter [main] Application failed to start due to an exception org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'reactiveCassandraSessionFactory' defined in class path resource [org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveDataAutoConfiguration.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration; factoryMethodName=reactiveCassandraSessionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveDataAutoConfiguration.class]] for bean 'reactiveCassandraSessionFactory': There is already [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=cassandraConfig; factoryMethodName=reactiveCassandraSessionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [dev/tomek/data-cassandra/sampleapplication/persistence/CassandraConfig.class]] bound. at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(DefaultListableBeanFactory.java:943) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:286) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:144) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:120) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:331) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:236) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:280) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:96) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:706) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:62) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.0.RELEASE.jar:2.3.0.RELEASE] at dev.tomek.data-cassandra.sampleapplication.Sampleapplication.main(Sampleapplication.java:16) [main/:?] ```  ## Solution The [bean definition for `reactiveCassandraSessionFactory`](https://github.com/spring-projects/spring-boot/blob/0c76fb950d3d30fd14e15c9155114ea5a20031a8/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveDataAutoConfiguration.java#L58) should have a `@ConditionalOnMissingBean` so that it is not created if a bean of that type already exists.  ## Steps to Fix    - [x] Claim this issue with a comment below and ask any clarifying questions you need - [x] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [x] Try to fix the issue following the steps above - [x] Commit your changes and start a pull request.</body>
		<created>2020-06-07 16:09:45</created>
		<closed>2020-06-10 14:37:54</closed>
	</bug>
	<bug>
		<id>21736</id>
		<title>Property spring.autoconfigure.exclude ignored by test slices</title>
		<body>If I have liquibase in the classpath, and `spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration` in the `application.yml` file, Liquibase autoconfiguration is indeed excluded when running the app, but not when executing tests annotated with `@DataJpaTest`.   I would have expected the exclusion to be also applicable to the tests.   The workaround is trivial: use `@DataJpaTest(excludeAutoConfiguration = LiquibaseAutoConfiguration.class)`  I guess that this bug could also exist for other autoconfigurations and/or other test annotations, and that changing the behavior might break lots of existing tests. So maybe the solution could simply be to better document this `spring.autoconfigure.exclude` property, warn that it's ignored in tests, and explain how to work around it (since it's quite easy).</body>
		<created>2020-06-06 21:30:55</created>
		<closed>2020-07-08 16:24:27</closed>
	</bug>
	<bug>
		<id>21735</id>
		<title>@SpringBootTest not picking @Named classes with a non-public constructor</title>
		<body>Forward port of issue #20929 to 2.4.x.</body>
		<created>2020-06-06 19:07:03</created>
		<closed>2020-06-06 19:07:21</closed>
	</bug>
	<bug>
		<id>21705</id>
		<title>Unpacked Spring Boot applications don't show version on startup</title>
		<body>When running a fatjar spring boot app packaged with maven by the spring boot plugin the application version is shown on startup (as read from manifest file)  When layers are extracted using layertool (like described here https://spring.io/blog/2020/01/27/creating-docker-images-with-spring-boot-2-3-0-m1) and the application is then run unpacked no version is shown.  Can the version information be retained with unpacked layers?</body>
		<created>2020-06-04 23:30:56</created>
		<closed>2020-06-05 22:35:09</closed>
	</bug>
	<bug>
		<id>21672</id>
		<title>Docker calls may hang forever</title>
		<body>Thanks to @bsideup for pointing this one out. We need to do something similar to https://github.com/docker-java/docker-java/pull/1408 in the Boot code.</body>
		<created>2020-06-03 16:32:50</created>
		<closed>2020-06-11 16:55:52</closed>
	</bug>
	<bug>
		<id>21656</id>
		<title>SpringConfigurationPropertySource incorrectly returns ABSENT for sub properties</title>
		<body>Forward port of issue #21654 to 2.4.0-M1.</body>
		<created>2020-06-02 17:59:52</created>
		<closed>2020-06-02 18:01:15</closed>
	</bug>
	<bug>
		<id>21655</id>
		<title>SpringConfigurationPropertySource incorrectly returns ABSENT for sub properties</title>
		<body>Forward port of issue #21654 to 2.3.1.</body>
		<created>2020-06-02 17:59:08</created>
		<closed>2020-06-02 18:01:15</closed>
	</bug>
	<bug>
		<id>21654</id>
		<title>SpringConfigurationPropertySource incorrectly returns ABSENT for sub properties</title>
		<body>An adapted random property will currently incorrectly return `ABSENT` for `containsDescendantOf("random.something")`</body>
		<created>2020-06-02 17:52:16</created>
		<closed>2020-06-02 18:01:15</closed>
	</bug>
	<bug>
		<id>21644</id>
		<title>Management security configuration does not back off when SAML is configured</title>
		<body>Forward port of issue #21620 to 2.4.0-M1.</body>
		<created>2020-06-01 22:06:02</created>
		<closed>2020-06-01 22:06:42</closed>
	</bug>
	<bug>
		<id>21642</id>
		<title>Management security configuration does not back off when SAML is configured</title>
		<body>Forward port of issue #21620 to 2.3.1.</body>
		<created>2020-06-01 20:50:11</created>
		<closed>2020-06-01 22:06:41</closed>
	</bug>
	<bug>
		<id>21620</id>
		<title>Management security configuration does not back off when SAML is configured</title>
		<body>Spring actuator will disable any configuration that has been specified in the spring boot configuration YAML file unless you have an explicit `WebSecurityConfigurerAdapter` defined.  It took me a while to figure out why specifically integrating the new Spring Security 5.2 native support for [saml2login][1] which is demonstrated in the [minimalist sample application][2]. Simply adding actuator to that application will disable saml2. The reasons are the rules associated with the rules associated with [ManagementWebSecurityAutoConfiguration][3].  ```java @Configuration(proxyBeanMethods = false) @ConditionalOnClass(WebSecurityConfigurerAdapter.class) @ConditionalOnMissingBean(WebSecurityConfigurerAdapter.class) @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET) @AutoConfigureBefore(SecurityAutoConfiguration.class) @AutoConfigureAfter({ HealthEndpointAutoConfiguration.class, InfoEndpointAutoConfiguration.class, WebEndpointAutoConfiguration.class, OAuth2ClientAutoConfiguration.class, OAuth2ResourceServerAutoConfiguration.class }) @Import({ ManagementWebSecurityConfigurerAdapter.class, WebSecurityEnablerConfiguration.class }) public class ManagementWebSecurityAutoConfiguration {} ```  There are several problems with this:   1. Boot tries to get configuration into the config files, not into the context of the application.  2. It is defined to perform this configuration before `SecurityAutoConfiguration` which is again trying to circumvent the users configuration and enforce the configuration defined by actuator.  3. The underlying cause is the forceful nature of `ManagementWebSecurityConfigurerAdapter` enforcing forms based authentication.  In this the simplest separation of concerns is to NOT perform the following in `ManagementWebSecurityConfigurerAdapter`:  ```java http.formLogin(Customizer.withDefaults()); http.httpBasic(Customizer.withDefaults()); ```    [1]: https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-saml2   [2]: https://github.com/spring-projects/spring-security/tree/master/samples/boot/saml2login   [3]: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/ManagementWebSecurityAutoConfiguration.java</body>
		<created>2020-05-29 14:05:25</created>
		<closed>2020-06-01 22:06:41</closed>
	</bug>
	<bug>
		<id>21588</id>
		<title>NoSuchBeanDefinitionException for org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry when trying to publish AvailabilityChangeEvent during context close processing after refresh failure</title>
		<body>``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration': Initialization of bean failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry' available at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:245) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:197) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:134) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.boot.availability.AvailabilityChangeEvent.publish(AvailabilityChangeEvent.java:81) ~[main/:na] at org.springframework.boot.availability.AvailabilityChangeEvent.publish(AvailabilityChangeEvent.java:67) ~[main/:na] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.doClose(ReactiveWebServerApplicationContext.java:139) ~[main/:na] at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:978) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:814) [main/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:325) [main/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [main/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [main/:na] at smoketest.data.r2dbc.SampleR2dbcApplication.main(SampleR2dbcApplication.java:33) [main/:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration': Initialization of bean failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry' available at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:409) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:94) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:76) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:347) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:299) ~[spring-aop-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:431) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] ... 28 common frames omitted Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry' available at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:814) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1282) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor.postProcessBeforeInitialization(ConfigurationClassPostProcessor.java:456) ~[spring-context-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1788) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.6.RELEASE.jar:5.2.6.RELEASE] ... 51 common frames omitted ```</body>
		<created>2020-05-27 10:05:28</created>
		<closed>2020-05-27 19:28:25</closed>
	</bug>
	<bug>
		<id>21574</id>
		<title>Period conversion support should not be public</title>
		<body>`StringToPeriodConverter` is at odds with other converters at the moment (being `public` and not  flagged `final`).   2.3.0 is out so that would be a breaking change.</body>
		<created>2020-05-26 09:45:05</created>
		<closed>2020-05-27 12:49:31</closed>
	</bug>
	<bug>
		<id>21560</id>
		<title>URI tag for WebMvc and WebFlux metrics is empty, rather than "root", when the path pattern is empty</title>
		<body>Forward port of issue #21392 to 2.3.1.</body>
		<created>2020-05-25 11:52:18</created>
		<closed>2020-05-25 11:52:31</closed>
	</bug>
	<bug>
		<id>21542</id>
		<title>Externalized Configuration ignores null values in SPRING_APPLICATION_JSON</title>
		<body>E.g. there is a configuration `application.yaml` ``` application:   a: some string   b:     - 1     - 2 ``` I try to override these properties with  ``` SPRING_APPLICATION_JSON={"application": {"a": null, "b": null}} ``` And it doesn't override values from `yaml` file, but when values in `json` are not null everything works fine.</body>
		<created>2020-05-22 14:32:49</created>
		<closed>2020-08-11 19:26:27</closed>
	</bug>
	<bug>
		<id>21532</id>
		<title>Pulling CNB run image fails when no tag is provided in image name</title>
		<body>Attempting to use the builder image `gcr.io/buildpacks/builder` with the Maven plugin `spring-boot:build-image` goal or Gradle plugin `bootBuildImage` task results in an error while pulling the run image `gcr.io/buildpacks/gcp/run` specified in the builder image metadata.   Example Gradle output:   ``` &gt; Task :bootBuildImage Building image 'docker.io/library/build-demo:0.0.1-SNAPSHOT'   &gt; Pulling builder image 'gcr.io/buildpacks/builder:latest' ..................................................  &gt; Pulled builder image 'gcr.io/buildpacks/builder@sha256:efb5f9b7cd976ab6e5a959f453795863a476878be8e5c20b50db22c8aec1227f'  &gt; Pulling run image 'gcr.io/buildpacks/gcp/run' ..................................................  &gt; Task :bootBuildImage FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':bootBuildImage'. &gt; Different digests IDs provided ```</body>
		<created>2020-05-21 17:18:52</created>
		<closed>2020-05-21 22:29:47</closed>
	</bug>
	<bug>
		<id>21522</id>
		<title>ServletWebServerApplicationContext uses a logger for ContextLoader for some of its logging</title>
		<body>Forward port of issue #21354 to 2.3.1.</body>
		<created>2020-05-20 18:01:52</created>
		<closed>2020-05-20 18:02:19</closed>
	</bug>
	<bug>
		<id>21495</id>
		<title>Image references passed to a CNB builder are not validated</title>
		<body>See #21483 for an example of a user providing an image name that causes a failure in the CNB builder that is difficult to diagnose (upper-case characters in the image name):  ``` [INFO]  &gt; Running creator [INFO]     [creator]     ERROR: failed to all tags must have the same registry as the exported image: could not parse reference: docker.io/library/SchedulePolling:1.2 ```  If we better understood the rules for an image reference, Boot could do some validation of the image name before invoking the builder to give a better user experience. For comparison, the `pack` CLI gives a more concise error message, although still missing the details of what isn't acceptable about the image name:   ``` $ pack build docker.io/library/DemoProject:1.0 --builder gcr.io/paketo-buildpacks/builder:base-platform-api-0.3 --path build/libs/demo-0.0.1-SNAPSHOT.jar ERROR: invalid image name 'docker.io/library/DemoProject:1.0': could not parse reference: docker.io/library/DemoProject:1.0 ```</body>
		<created>2020-05-18 18:38:01</created>
		<closed>2020-06-18 20:12:07</closed>
	</bug>
	<bug>
		<id>21444</id>
		<title>Custom converters cannot be used when creating endpoint-related beans due to eager initialization triggered by ServletEndpointRegistrar</title>
		<body>Forward port of issue #20714 to 2.3.0.</body>
		<created>2020-05-14 02:11:49</created>
		<closed>2020-05-14 02:12:33</closed>
	</bug>
	<bug>
		<id>21428</id>
		<title>Different actuator management server port changes response on errors </title>
		<body>Forward port of issue #21036 to 2.3.0.</body>
		<created>2020-05-12 18:51:40</created>
		<closed>2020-05-12 18:53:13</closed>
	</bug>
	<bug>
		<id>21354</id>
		<title>ServletWebServerApplicationContext uses a logger for ContextLoader for some of its logging</title>
		<body>In `ServletWebServerApplicationContext#prepareWebApplicationContext` method,  ```java protected void prepareWebApplicationContext(ServletContext servletContext) { Object rootContext = servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE); if (rootContext != null) { if (rootContext == this) { throw new IllegalStateException( "Cannot initialize context because there is already a root application context present - " + "check whether you have multiple ServletContextInitializers!"); } return; } Log logger = LogFactory.getLog(ContextLoader.class); servletContext.log("Initializing Spring embedded WebApplicationContext"); try { servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this); if (logger.isDebugEnabled()) { logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" + WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]"); } setServletContext(servletContext); if (logger.isInfoEnabled()) { long elapsedTime = System.currentTimeMillis() - getStartupDate(); logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms"); } } catch (RuntimeException | Error ex) { logger.error("Context initialization failed", ex); servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex); throw ex; } } ```</body>
		<created>2020-05-07 12:40:55</created>
		<closed>2020-05-20 18:02:19</closed>
	</bug>
	<bug>
		<id>21350</id>
		<title>Dependency exclusions declared in spring-boot-dependencies have no effect when using Gradle 6</title>
		<body>Disclaimer: I am not sure wether this issues belongs to Gradle or Spring Boot.  Two different issues, but in both cases Springs dependency excludes are ignored.  ## Case 1  Given the following Gradle build script:  ```gradle plugins {     `java-library` }  repositories {     jcenter()     maven { url = uri("https://repo.spring.io/libs-milestone") } }  dependencies {     api(platform("org.springframework.boot:spring-boot-dependencies:2.3.0.RC1"))     api("org.springframework.boot:spring-boot-starter-quartz") } ```  With Gradle 5.2.1 you will end with following quartz dependencies on the classpath:  ``` \--- org.springframework.boot:spring-boot-starter-quartz -&gt; 2.3.0.RC1      \--- org.quartz-scheduler:quartz:2.3.2           +--- com.mchange:mchange-commons-java:0.2.15           \--- org.slf4j:slf4j-api:1.7.7 -&gt; 1.7.30 ```  With Gradle 6.4 you will end with following quartz dependencies on the classpath:  ``` \--- org.springframework.boot:spring-boot-starter-quartz -&gt; 2.3.0.RC1      \--- org.quartz-scheduler:quartz -&gt; 2.3.2           +--- com.mchange:c3p0:0.9.5.4           |    \--- com.mchange:mchange-commons-java:0.2.15           +--- com.mchange:mchange-commons-java:0.2.15           +--- com.zaxxer:HikariCP-java7:2.4.13           |    \--- org.slf4j:slf4j-api:1.7.21 -&gt; 1.7.30           \--- org.slf4j:slf4j-api:1.7.7 -&gt; 1.7.30 ```  I assume that this change of behavior occurs because Gradle 6.4 uses Gradle Module Metadata and Gradle 5 uses Maven BOMs.  ## Case 2  Given the following dependency declaration:  ```gradle dependencies {     api(platform("org.springframework.boot:spring-boot-dependencies:2.3.0.RC1"))     api("org.springframework.boot:spring-boot-starter-data-jpa") } ```  The following transitive hibernate-core dependencies will be added to the classpath. _Interestingly, exclusions work for spring-boot-starter-data-jpa but not for spring-boot-starter-quartz._  ``` \--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.3.0.RC1      +--- org.hibernate:hibernate-core -&gt; 5.4.14.Final      |    +--- org.jboss.logging:jboss-logging:3.3.2.Final -&gt; 3.4.1.Final      |    +--- org.javassist:javassist:3.24.0-GA      |    +--- net.bytebuddy:byte-buddy:1.10.7 -&gt; 1.10.10      |    +--- antlr:antlr:2.7.7      |    +--- org.jboss:jandex:2.1.1.Final      |    +--- com.fasterxml:classmate:1.5.1      |    +--- org.dom4j:dom4j:2.1.1      |    +--- org.hibernate.common:hibernate-commons-annotations:5.1.0.Final      |    |    \--- org.jboss.logging:jboss-logging:3.3.2.Final -&gt; 3.4.1.Final      |    \--- org.glassfish.jaxb:jaxb-runtime:2.3.1 -&gt; 2.3.3      |         +--- jakarta.xml.bind:jakarta.xml.bind-api:2.3.3      |         +--- org.glassfish.jaxb:txw2:2.3.3      |         +--- com.sun.istack:istack-commons-runtime:3.0.11      |         \--- com.sun.activation:jakarta.activation:1.2.2 ```  If I add hibernate-jcache, which also depends on hibernate-core, the result is that the dependency excludes defined via Spring Boot are "ignored".  ```gradle dependencies {     api(platform("org.springframework.boot:spring-boot-dependencies:2.3.0.RC1"))     api("org.springframework.boot:spring-boot-starter-data-jpa")     api("org.hibernate:hibernate-jcache") } ```  The following transitive hibernate libraries will also be added tom the classpath, as long as I don't exclude them manually.  ``` +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.3.0.RC1 |    +--- org.hibernate:hibernate-core -&gt; 5.4.14.Final |    |    +--- javax.persistence:javax.persistence-api:2.2 |    |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.1.1.Final |    |    +--- javax.activation:javax.activation-api:1.2.0 |    |    +--- javax.xml.bind:jaxb-api:2.3.1 |    |    |    \--- javax.activation:javax.activation-api:1.2.0 ``` </body>
		<created>2020-05-07 11:35:50</created>
		<closed>2020-05-14 13:18:12</closed>
	</bug>
	<bug>
		<id>21343</id>
		<title>Unclear default for 'server.tomcat.use-relative-redirects'</title>
		<body>Forward port of issue #20796 to 2.3.0.</body>
		<created>2020-05-06 23:00:39</created>
		<closed>2020-05-06 23:01:02</closed>
	</bug>
	<bug>
		<id>21341</id>
		<title>CreateBootStartScripts causes a warning to be logged with Gradle 6.4</title>
		<body>Forward port of issue #20759 to 2.3.0.</body>
		<created>2020-05-06 16:36:25</created>
		<closed>2020-05-06 16:37:00</closed>
	</bug>
	<bug>
		<id>21327</id>
		<title>When a request is active, Undertow prevents the JVM from exiting</title>
		<body>Forward port of issue #21319 to 2.3.0.</body>
		<created>2020-05-06 11:55:31</created>
		<closed>2020-05-06 11:55:50</closed>
	</bug>
	<bug>
		<id>21323</id>
		<title>When using log4j2 log4j2-test.* files are not detected</title>
		<body>Forward port of issue #17001 to 2.3.0.</body>
		<created>2020-05-05 21:14:40</created>
		<closed>2020-05-05 21:15:02</closed>
	</bug>
	<bug>
		<id>21321</id>
		<title>Classpath wildcards cannot be used with Java 11 or above</title>
		<body>Forward port of issue #21312 to 2.3.0.</body>
		<created>2020-05-05 19:13:15</created>
		<closed>2020-05-05 19:13:47</closed>
	</bug>
	<bug>
		<id>21320</id>
		<title>Classpath wildcards cannot be used with Java 11 or above</title>
		<body>Forward port of issue #21312 to 2.2.7.</body>
		<created>2020-05-05 19:11:55</created>
		<closed>2020-05-05 19:13:46</closed>
	</bug>
	<bug>
		<id>21319</id>
		<title>When a request is active, Undertow prevents the JVM from exiting</title>
		<body>The XNIO threads created by Undertow are non-daemon threads so they keep the JVM alive. If a request is active when the JVM is exiting, the XNIO thread that is handling the request will keep the JVM alive. The fix isn't as simple as configuring XNIO to create daemon threads as this then results in the JVM exiting as soon as the main method exits as there are no non-daemon threads to keep it alive.  It looks like we need to do the same as we do for Tomcat and create a non-daemon thread that doesn't exit until the web server is stopped.</body>
		<created>2020-05-05 19:06:36</created>
		<closed>2020-05-06 11:55:50</closed>
	</bug>
	<bug>
		<id>21312</id>
		<title>Classpath wildcards cannot be used with Java 11 or above</title>
		<body>OS: Windows 10 Java: AdoptOpenJDK (build 11.0.6+10 on 2020-01-14) Spring Boot: 2.2.6 Tomcat: 9.0.31 Stacktrace: ``` java.nio.file.InvalidPathException: Illegal char &lt;*&gt; at index 42: c:\Temp\Projects\testt\distrib\lib\custom\* at sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182) at sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153) at sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77) at sun.nio.fs.WindowsPath.parse(WindowsPath.java:92) at sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:229) at java.io.File.toPath(File.java:2290) at java.util.zip.ZipFile$Source.get(ZipFile.java:1222) at java.util.zip.ZipFile$CleanableResource.&lt;init&gt;(ZipFile.java:726) at java.util.zip.ZipFile$CleanableResource.get(ZipFile.java:843) at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:246) at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:176) at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:346) at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:317) at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:283) at org.springframework.boot.web.servlet.server.StaticResourceJars.isResourcesJar(StaticResourceJars.java:125) at org.springframework.boot.web.servlet.server.StaticResourceJars.addUrlFile(StaticResourceJars.java:103) at org.springframework.boot.web.servlet.server.StaticResourceJars.addUrl(StaticResourceJars.java:90) at org.springframework.boot.web.servlet.server.StaticResourceJars.getUrlsFrom(StaticResourceJars.java:56) at org.springframework.boot.web.servlet.server.StaticResourceJars.getUrls(StaticResourceJars.java:48) at org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory.getUrlsOfJarsWithMetaInfResources(AbstractServletWebServerFactory.java:275) at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.access$300(TomcatServletWebServerFactory.java:101) at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory$StaticResourceConfigurer.lifecycleEvent(TomcatServletWebServerFactory.java:733) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5051) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374) at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) at java.util.concurrent.FutureTask.run(FutureTask.java) at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384) at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374) at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) at java.util.concurrent.FutureTask.run(FutureTask.java) at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) at org.apache.catalina.startup.Tomcat.start(Tomcat.java:467) at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:107) at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:88) at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:438) at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:191) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ```  Under java 8 a different exception is thrown from JarFile constructor so that the exception goes into catch block:  ``` java org.springframework.boot.web.servlet.server.StaticResourceJars::isResourcesJar(File file)  private boolean isResourcesJar(File file) { try {     return isResourcesJar(new JarFile(file)); } catch (IOException ex) {     return false;  } } ```  Thanks</body>
		<created>2020-05-05 10:24:19</created>
		<closed>2020-05-05 19:13:46</closed>
	</bug>
	<bug>
		<id>21301</id>
		<title>Layertools list and extract commands ignore empty layers</title>
		<body>I believe issue [20858](https://github.com/spring-projects/spring-boot/issues/20858) (`Ensure empty layers are written to the index file`), which was closed as fixed in RC1, is still happening. I update my boot version to RC1 for a project that does not use any snapshots and am still getting an unpacked directory that is missing the snapshots folder, hence the following Dockerfile excerpt fails saying the folder does not exist:  ``` ARG DEPENDENCY=/app/target/dependency COPY --from=build ${DEPENDENCY}/dependencies/ . COPY --from=build ${DEPENDENCY}/spring-boot-loader/ . COPY --from=build ${DEPENDENCY}/snapshot-dependencies/ .   # &lt;---- fails here COPY --from=build ${DEPENDENCY}/application/ . ```  From my pom.xml:  ```     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;2.3.0.RC1&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;     &lt;/parent&gt; ```  I even tried specifying the version under the maven plugin as well.</body>
		<created>2020-05-03 15:13:25</created>
		<closed>2020-05-04 14:52:06</closed>
	</bug>
	<bug>
		<id>21294</id>
		<title>Binder @DefaultValue does not work with PropertyEditor converters</title>
		<body>Forward port of issue #21264 to 2.3.0.</body>
		<created>2020-05-02 01:31:33</created>
		<closed>2020-05-02 01:32:17</closed>
	</bug>
	<bug>
		<id>21293</id>
		<title>Default log levels are inconsistent between log4J2 and logback</title>
		<body>[`log4J2.xml`](https://github.com/spring-projects/spring-boot/blob/ff3b05a421213b360473fd1a379d80d20c527611/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml#L23) configures a default log level of `WARN` for `org.springframework.boot.actuate.endpoint.jmx` but `defaults.xml` for logback does not.</body>
		<created>2020-05-02 00:45:50</created>
		<closed>2020-06-11 01:52:53</closed>
	</bug>
	<bug>
		<id>21264</id>
		<title>Binder @DefaultValue does not work with PropertyEditor converters</title>
		<body>  # Version information  Spring-boot version: 2.2.6.RELEASE  # Issue reproduction and actual result  I have some simple constructor-bound ConfigurationProperties:  package com.example.demo;  import java.nio.file.Path; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.context.properties.ConstructorBinding; import org.springframework.boot.context.properties.bind.DefaultValue;  @ConfigurationProperties @ConstructorBinding public class ConfigurationPropertiesWithPathProperty { public static final String DEFAULT_VALUE = "default_value";  private final Path somePathProperty;  public ConfigurationPropertiesWithPathProperty(@DefaultValue(DEFAULT_VALUE) Path somePathProperty) { this.somePathProperty = somePathProperty; }  public Path getSomePathProperty() { return somePathProperty; } }  I test the class using a Binder:  package com.example.demo;  import static org.assertj.core.api.Assertions.assertThat;  import java.nio.file.Paths; import java.util.HashMap; import java.util.Map; import org.junit.jupiter.api.Test; import org.springframework.boot.context.properties.bind.BindResult; import org.springframework.boot.context.properties.bind.Bindable; import org.springframework.boot.context.properties.bind.Binder; import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;  public class PropertiesTest {  @Test void bindsPathProperty() { String expectedPathValue = "some_value"; Map&lt;String, String&gt; properties = new HashMap&lt;&gt;(); properties.put("some_path_property", expectedPathValue); Binder binder = new Binder(new MapConfigurationPropertySource(properties));  BindResult&lt;ConfigurationPropertiesWithPathProperty&gt; bindResult = binder.bind("", Bindable.of(ConfigurationPropertiesWithPathProperty.class));  assertThat(bindResult.get().getSomePathProperty()) .isEqualTo(Paths.get(expectedPathValue)); } }  So far so good - the test is green. Now when I try to bind the default value:  package com.example.demo;  import static org.assertj.core.api.Assertions.assertThat;  import java.nio.file.Paths; import java.util.Collections; import java.util.HashMap; import java.util.Map; import org.junit.jupiter.api.Test; import org.springframework.boot.context.properties.bind.BindResult; import org.springframework.boot.context.properties.bind.Bindable; import org.springframework.boot.context.properties.bind.Binder; import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;  public class PropertiesTest {  @Test void bindsDefaultValueToPathProperty() { Binder binder = new Binder(new MapConfigurationPropertySource(Collections.emptyMap()));  BindResult&lt;ConfigurationPropertiesWithPathProperty&gt; bindResult = binder.bind("", Bindable.of(ConfigurationPropertiesWithPathProperty.class));  assertThat(bindResult.get().getSomePathProperty()) .isEqualTo(Paths.get(ConfigurationPropertiesWithPathProperty.DEFAULT_VALUE)); } }  I get an exception:  Failed to bind properties under '' to com.example.demo.ConfigurationPropertiesWithPathProperty org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under '' to com.example.demo.ConfigurationPropertiesWithPathProperty at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:364) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:324) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:308) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:238) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:199) at com.example.demo.PropertiesTest.bindsDefaultValueToPathProperty(PropertiesTest.java:36) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675) at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60) at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125) at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132) at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124) at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74) at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115) at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105) at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43) at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35) at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104) at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) at java.util.ArrayList.forEach(ArrayList.java:1257) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) at java.util.ArrayList.forEach(ArrayList.java:1257) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32) at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220) at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188) at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99) at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79) at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33) at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94) at com.sun.proxy.$Proxy2.stop(Unknown Source) at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:132) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164) at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:412) at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64) at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56) at java.lang.Thread.run(Thread.java:748) Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String[]] to type [@org.springframework.boot.context.properties.bind.DefaultValue java.nio.file.Path] at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:321) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:194) at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:170) at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:96) at org.springframework.boot.context.properties.bind.ValueObjectBinder$ConstructorParameter.getDefaultValue(ValueObjectBinder.java:234) at org.springframework.boot.context.properties.bind.ValueObjectBinder.bind(ValueObjectBinder.java:68) at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$5(Binder.java:452) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:572) at org.springframework.boot.context.properties.bind.Binder$Context.withDataObject(Binder.java:558) at org.springframework.boot.context.properties.bind.Binder$Context.access$400(Binder.java:513) at org.springframework.boot.context.properties.bind.Binder.bindDataObject(Binder.java:450) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:391) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:320) ... 92 more  # Expected result  The default value is bound to the property. Binding a default value should not require additional converters when binding a non-default value doesn't.</body>
		<created>2020-04-29 22:44:37</created>
		<closed>2020-05-02 01:32:17</closed>
	</bug>
	<bug>
		<id>21211</id>
		<title>Hitting Readiness and Liveness endpoints throws NPE</title>
		<body>Start the attached boot application.  Hit http://localhost:8080/actuator/health/readiness and you should see the the NPE below. [config-map-demo.zip](https://github.com/spring-projects/spring-boot/files/4546345/config-map-demo.zip)   ``` java.lang.NullPointerException: null at org.springframework.boot.actuate.health.SimpleStatusAggregator.contains(SimpleStatusAggregator.java:76) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174) ~[na:1.8.0_91] at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1540) ~[na:1.8.0_91] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_91] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_91] at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_91] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_91] at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:479) ~[na:1.8.0_91] at java.util.stream.ReferencePipeline.min(ReferencePipeline.java:520) ~[na:1.8.0_91] at org.springframework.boot.actuate.health.SimpleStatusAggregator.getAggregateStatus(SimpleStatusAggregator.java:72) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointSupport.getCompositeHealth(HealthEndpointSupport.java:132) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.aggregateContributions(HealthEndpointWebExtension.java:91) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.aggregateContributions(HealthEndpointWebExtension.java:44) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateHealth(HealthEndpointSupport.java:120) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:96) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:74) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:59) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.health(HealthEndpointWebExtension.java:71) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.health(HealthEndpointWebExtension.java:66) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91] at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282) ~[spring-core-5.2.6.BUILD-20200428.052853-104.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:77) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$ServletWebOperationAdapter.handle(AbstractWebMvcEndpointHandlerMapping.java:305) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(AbstractWebMvcEndpointHandlerMapping.java:388) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91] at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:93) ~[spring-boot-actuator-2.3.0.BUILD-20200428.104559-600.jar:2.3.0.BUILD-SNAPSHOT] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.6.BUILD-20200428.052853-101.jar:5.2.6.BUILD-SNAPSHOT] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91] ```</body>
		<created>2020-04-28 14:30:55</created>
		<closed>2020-04-28 19:04:37</closed>
	</bug>
	<bug>
		<id>21177</id>
		<title>JarFiles are being left open</title>
		<body>Back port of issue #21126 to 2.1.14</body>
		<created>2020-04-28 04:45:28</created>
		<closed>2020-04-28 04:53:22</closed>
	</bug>
	<bug>
		<id>21173</id>
		<title>Connection fails when DOCKER_HOST set to local socket</title>
		<body>Running `mvn spring-boot:build-image` and getting this error:  ``` ... [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.M4:build-image (default-cli) on project  demo: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.M4:build-image failed: Docker API c all to '/var/run/docker/docker.sock/v1.24/images/create?fromImage=docker.io%2Fcloudfoundry%2Fcnb%3Abionic-platform-api-0.2' fai led with status code 500 "/var/run/docker/docker.sock: Name or service not known" -&gt; [Help 1]                                   [ERROR]                                                                                                                         [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.                                             [ERROR] Re-run Maven using the -X switch to enable full debug logging.                                                          [ERROR]                                                                                                                         [ERROR] For more information about the errors and possible solutions, please read the following articles:                       [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException                                      ```  The Docker CLI works fine via a `DOCKER_HOST` env var (probably a plausible analog of a "standard" low-trust enterprise environment). I assume that this is messing with the Maven plugin.</body>
		<created>2020-04-27 19:56:33</created>
		<closed>2020-05-12 21:12:56</closed>
	</bug>
	<bug>
		<id>21127</id>
		<title>JarFiles are being left open</title>
		<body>Forward port of issue #21126 to 2.3.0.RC1.</body>
		<created>2020-04-25 20:32:30</created>
		<closed>2020-04-28 04:53:42</closed>
	</bug>
	<bug>
		<id>21126</id>
		<title>JarFiles are being left open</title>
		<body>Windows CI is failing following the fix for #17796 but only on 2.2.x. I suspect this may be a result of the new fix clashing with the older fix for #17127</body>
		<created>2020-04-25 18:03:06</created>
		<closed>2020-04-28 04:53:29</closed>
	</bug>
	<bug>
		<id>21112</id>
		<title>Building a layered jar results in deprecation warnings as some configurations will no longer be resolvable in Gradle 7</title>
		<body>Forward port of issue #21111 to 2.3.0.RC1.</body>
		<created>2020-04-24 17:10:38</created>
		<closed>2020-04-24 17:11:09</closed>
	</bug>
	<bug>
		<id>21105</id>
		<title>PortInUseException can be thrown when server address is wrong</title>
		<body>Forward port of issue #21101 to 2.3.0.RC1.</body>
		<created>2020-04-23 21:44:22</created>
		<closed>2020-04-23 21:51:50</closed>
	</bug>
	<bug>
		<id>21102</id>
		<title>Test classes annotated with @SpringBootTest with different args attributes share a context when they should not</title>
		<body>Forward port of issue #20866 to 2.3.0.RC1.</body>
		<created>2020-04-23 17:19:29</created>
		<closed>2020-04-23 17:19:44</closed>
	</bug>
	<bug>
		<id>21101</id>
		<title>PortInUseException can be thrown when server address is wrong</title>
		<body>I'm using Spring Boot 2.2.6 with the embedded Tomcat server.  When I set the server.address property to a number then it seems to be a valid InetAddress.  For example:      server.address=12346  Unfortunately then I get a this error message:  &gt; Web server failed to start. Port 8080 was already in use.  This is very misleading because the error is not that Port 8080 is in use but that the IP address is invalid.  Can you improve this error message?</body>
		<created>2020-04-23 15:47:11</created>
		<closed>2020-04-23 21:51:49</closed>
	</bug>
	<bug>
		<id>21090</id>
		<title>MockitoPostProcessor can trigger early initialization of factory beans</title>
		<body>Forward port of issue #20665 to 2.3.0.RC1.</body>
		<created>2020-04-22 21:36:49</created>
		<closed>2020-04-22 21:37:17</closed>
	</bug>
	<bug>
		<id>21074</id>
		<title>Fat jars cause classloading problems with JDK11 and Security Manager</title>
		<body>Forward port of issue #17796 to 2.3.0.RC1.</body>
		<created>2020-04-21 23:53:23</created>
		<closed>2020-04-22 00:22:41</closed>
	</bug>
	<bug>
		<id>21073</id>
		<title>Fat jars cause classloading problems with JDK11 and Security Manager</title>
		<body>Forward port of issue #17796 to 2.2.7.</body>
		<created>2020-04-21 23:52:52</created>
		<closed>2020-04-22 00:22:41</closed>
	</bug>
	<bug>
		<id>21071</id>
		<title>WelcomePageHandlerMapping does not honor CORS</title>
		<body>Forward port of issue #21048 to 2.3.0.RC1.</body>
		<created>2020-04-21 18:45:25</created>
		<closed>2020-04-21 18:45:52</closed>
	</bug>
	<bug>
		<id>21070</id>
		<title>WelcomePageHandlerMapping does not honor CORS</title>
		<body>Forward port of issue #21048 to 2.2.7.</body>
		<created>2020-04-21 18:43:40</created>
		<closed>2020-04-21 18:45:51</closed>
	</bug>
	<bug>
		<id>21056</id>
		<title>LOGBACK: No context given for c.q.l.core.rolling.SizeAndTimeBasedRollingPolicy</title>
		<body>when I try to use spring boot default configuration to configure a rolling log files,logback show tips like title,so I view source(v2.2.6.RELEASE) to find the reason. in 150 lines of DefaultLogbackConfiguration.java,  ```java private void setRollingPolicy(RollingFileAppender&lt;ILoggingEvent&gt; appender, LogbackConfigurator config, String logFile) { SizeAndTimeBasedRollingPolicy&lt;ILoggingEvent&gt; rollingPolicy = new SizeAndTimeBasedRollingPolicy&lt;&gt;(); ... rollingPolicy.setTotalSizeCap(new FileSize(totalSizeCap.toBytes())); appender.setRollingPolicy(rollingPolicy); ... } ``` when then  rollingPolicy setRollingPolicy,logback show this tips,the tips info in 74 line of ContextAwareBase.java,the problem is not serious but very vexed, please repair it as soon as possible,thanks!</body>
		<created>2020-04-21 08:01:57</created>
		<closed>2020-06-18 10:04:50</closed>
	</bug>
	<bug>
		<id>21053</id>
		<title>PortInUseException thrown when Netty does not have the right to use configured port</title>
		<body>Forward port of issue #19807 to 2.3.0.RC1.</body>
		<created>2020-04-21 00:58:17</created>
		<closed>2020-04-21 00:58:43</closed>
	</bug>
	<bug>
		<id>21052</id>
		<title>PortInUseException thrown when Netty does not have the right to use configured port</title>
		<body>Forward port of issue #19807 to 2.2.7.</body>
		<created>2020-04-21 00:56:16</created>
		<closed>2020-04-21 00:58:43</closed>
	</bug>
	<bug>
		<id>21050</id>
		<title>spring.config.additional-location is ignored when spring.config.location is configured</title>
		<body>Forward port of issue #20745 to 2.3.0.RC1.</body>
		<created>2020-04-21 00:10:31</created>
		<closed>2020-04-21 00:10:55</closed>
	</bug>
	<bug>
		<id>21049</id>
		<title>Nested object is not initialized if no matching property is defined with constructor binding</title>
		<body>Forward port of issue #18917 to 2.3.0.RC1.</body>
		<created>2020-04-20 22:59:00</created>
		<closed>2020-04-20 22:59:13</closed>
	</bug>
	<bug>
		<id>21048</id>
		<title>WelcomePageHandlerMapping does not honor CORS</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt;  I am using spring-boot-autoconfigure version 2.2.5.RELEASE.  I have added CORS mapping in a WebMvcConfiguer in my application:  ```java @Configuration public class WebConfig implements WebMvcConfigurer {      @Override     public void addCorsMappings(CorsRegistry registry) {         registry.addMapping("/**")                 .allowedOrigins("http://localhost:8123")                 .allowedMethods("GET", "PUT", "POST", "DELETE")                 .allowedHeaders("*")                 .allowCredentials(true);     }  } ```  This works in my test setup, when I load http://localhost/version in an iframe embedded in http://localhost:8123  This fails with a CORS error when I load http://localhost/  This fails because `WelcomePageHandlerMapping` has a `null` `CorsConfigurationSource`.  Bug 1: `WebMvcAutoConfiguration.welcomePageHandlerMapping()` does not call `WelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations())`.  `WebMvcAutoConfiguration.requestMappingHandlerMapping` does call this function (in `super.requestMappingHandlerMapping`), so for regular requests, CORS is handled correctly.  `welcomePageHandlerMapping()` should do this as well.  Bug 2: A workaround could involve a custom configuration, or a `PostConstruct` handler, or something, that called `WelcomePageHandlerMapping.setCorsConfigurations()`. But `WelcomePageHandlerMapping` is a non-public class, so there is no clean way to do this. </body>
		<created>2020-04-20 20:55:30</created>
		<closed>2020-04-21 18:45:51</closed>
	</bug>
	<bug>
		<id>21047</id>
		<title>ConditionalOnAvailableEndpoint does not deal with dashed IDs</title>
		<body>Forward port of issue #21044 to 2.3.0.RC1.</body>
		<created>2020-04-20 19:52:16</created>
		<closed>2020-04-20 20:25:23</closed>
	</bug>
	<bug>
		<id>21044</id>
		<title>ConditionalOnAvailableEndpoint does not deal with dashed IDs</title>
		<body>See #20997</body>
		<created>2020-04-20 16:51:13</created>
		<closed>2020-04-20 20:25:22</closed>
	</bug>
	<bug>
		<id>21036</id>
		<title>Different actuator management server port changes response on errors </title>
		<body>In our plugin Chaos Monkey For Spring Boot, we are experiencing a strange problem, regarding different ports of the management server.  If we change the default management port then the error messages change. Inputs to our Actuator REST API are `@Validated` (in this case against min/max).   Port different via `management.server.port`:  https://i.stack.imgur.com/ozRYN.png  Request: ``` echo  '{"level": -2}' | curl -X POST -H "Content-Type: application/json" -d @- http://localhost:8888/actuator/chaosmonkey/assaults ``` Response: ``` {     "timestamp": "2020-04-20T13:18:40.267+0000",     "status": 400,     "error": "Bad Request",     "message": "No message available",     "path": "/actuator/chaosmonkey/assaults" } ```  Same port as application:   https://i.stack.imgur.com/cAoNf.png  Request: ``` echo  '{"level": -2}' | curl -X POST -H "Content-Type: application/json" -d @- http://localhost:8080/actuator/chaosmonkey/assaults ```  Response: ``` {     "timestamp": "2020-04-20T13:15:47.652+0000",     "status": 400,     "error": "Bad Request",     "errors": [         {             "codes": [                 "Min.assaultPropertiesUpdate.level",                 "Min.level",                 "Min.java.lang.Integer",                 "Min"             ],             "arguments": [                 {                     "codes": [                         "assaultPropertiesUpdate.level",                         "level"                     ],                     "arguments": null,                     "defaultMessage": "level",                     "code": "level"                 },                 1             ],             "defaultMessage": "must be greater than or equal to 1",             "objectName": "assaultPropertiesUpdate",             "field": "level",             "rejectedValue": -2,             "bindingFailure": false,             "code": "Min"         }     ],     "message": "Validation failed for object='assaultPropertiesUpdate'. Error count: 1",     "trace": "org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;?&gt; de.codecentric.spring.boot.chaos.monkey.endpoints.ChaosMonkeyRestEndpoint.updateAssaultProperties(de.codecentric.spring.boot.chaos.monkey.endpoints.AssaultPropertiesUpdate): [Field error in object 'assaultPropertiesUpdate' on field 'level': rejected value [-2]; codes [Min.assaultPropertiesUpdate.level,Min.level,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [assaultPropertiesUpdate.level,level]; arguments []; default message [level],1]; default message [must be greater than or equal to 1]] \n\tat org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:138)\n\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:127)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n",     "path": "/actuator/chaosmonkey/assaults" } ```   We're guessing that this might be related to: https://github.com/spring-projects/spring-boot/issues/10560 where the HTTP status code was fixed to be the same in both cases.  I am not 100 % sure this is a bug, or whether this is the intended behavior. We also asked on Stackoverflow (https://stackoverflow.com/questions/61267877/different-actuator-management-server-port-changes-http-response) for any ideas on how to get around the different messages (without too much customization on our side), because we would like to supply our plugin users always the same error message. We would prefer the second, descriptive error message.   Maybe good to know, we did not apply any custom filters in Chaos Monkey for Spring Boot.   Please let me know if there's anything we can do to help.   Spring Version: 2.2.6.RELEASE  Chaos Monkey For Spring Boot also needs the appropriate spring-boot-starter-web</body>
		<created>2020-04-20 13:21:26</created>
		<closed>2020-06-10 18:57:43</closed>
	</bug>
	<bug>
		<id>21034</id>
		<title>Homebrew and Scoop definitions for non-snapshot builds link to wrong repository on repo.spring.io</title>
		<body>This is the same bug as reported in https://github.com/spring-projects/spring-boot/pull/21030 but in `AbstractPackageManagerDefinitionTask` this time. We should extract the code for determining the artifactory repo from the project version into a shared location and test it.</body>
		<created>2020-04-20 12:47:22</created>
		<closed>2020-04-20 14:08:31</closed>
	</bug>
	<bug>
		<id>21023</id>
		<title>Endpoint exposure patterns do not work with dashed IDs</title>
		<body>Forward port of issue #20997 to 2.3.0.RC1.</body>
		<created>2020-04-19 23:05:18</created>
		<closed>2020-04-19 23:06:22</closed>
	</bug>
	<bug>
		<id>21022</id>
		<title>Endpoint exposure patterns do not work with dashed IDs</title>
		<body>Forward port of issue #20997 to 2.2.7.</body>
		<created>2020-04-19 23:04:21</created>
		<closed>2020-04-19 23:06:22</closed>
	</bug>
	<bug>
		<id>21008</id>
		<title>KafkaClientMetrics is applied to a newly created producer rather than an existing one</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; See https://github.com/spring-projects/spring-boot/commit/888a81beba23728078337ad91c27ca4abbcb189e#r38575845</body>
		<created>2020-04-18 06:14:24</created>
		<closed>2020-04-29 17:11:51</closed>
	</bug>
	<bug>
		<id>20997</id>
		<title>Endpoint exposure patterns do not work with dashed IDs</title>
		<body>springboot version : 2.2.6.RELEASE springcloud version: Hoxton.SR3  When I use the bus-fresh endpoint, I find it does not work my yml is : ``` management:   endpoints:     web:       exposure:         include: bus-refresh ``` But I tried to use * instead of bus-refresh, it started working，for example: ``` management:   endpoints:     web:       exposure:         include: "*" ``` This prevents me from just opening the bus-refresh endpoint。 when  i checked source code , i found the reason,in org.springframework.boot.actuate.endpoint.EndpointId, line 145 ```java public static EndpointId fromPropertyValue(String value) { return new EndpointId(value.replace("-", "")); } ``` bus-refresh is replaced with busrefresh, which cannot be matched。 please help me, How to expose only bus-refresh endpoint? Please forgive me for my poor English, tks</body>
		<created>2020-04-17 03:33:14</created>
		<closed>2020-04-20 16:52:21</closed>
	</bug>
	<bug>
		<id>20957</id>
		<title>UndertowCompressionConfigurer fails on invalid Media Types</title>
		<body>Forward port of issue #20955 to 2.3.0.RC1.</body>
		<created>2020-04-14 12:19:41</created>
		<closed>2020-04-14 12:20:11</closed>
	</bug>
	<bug>
		<id>20955</id>
		<title>UndertowCompressionConfigurer fails on invalid Media Types</title>
		<body>When the server responds with an invalid Media Type, the `UndertowCompressionConfigurer` fails with an exception, where it should only determine if the response can be compressed or not. </body>
		<created>2020-04-14 11:12:10</created>
		<closed>2020-04-14 12:20:10</closed>
	</bug>
	<bug>
		<id>20927</id>
		<title>Ensure consistent and correct attributes on files added to fat archives</title>
		<body>These are based on `2.3.0.M4`, both apps just simple projects from initializer, where `demo1` is maven build and `demo2` gradle build. With gradle, embedded `classpath.idxfile` has wrong permissions, so CF push fails: ``` jvalkealahti@cypher:~/Downloads$ ls demo1/target/demo1-0.0.1-SNAPSHOT.jar demo1/target/demo1-0.0.1-SNAPSHOT.jar  jvalkealahti@cypher:~/Downloads$ ls demo2/build/libs/demo2-0.0.1-SNAPSHOT.jar  demo2/build/libs/demo2-0.0.1-SNAPSHOT.jar  # unzipped those files  jvalkealahti@cypher:~/Downloads$ ls -lt demo1/target/BOOT-INF/classpath.idx  -rw-r--r-- 1 jvalkealahti jvalkealahti 519 Apr 12 14:01 demo1/target/BOOT-INF/classpath.idx  jvalkealahti@cypher:~/Downloads$ ls -lt demo2/build/libs/BOOT-INF/classpath.idx  ---------- 1 jvalkealahti jvalkealahti 519 Feb  1  1980 demo2/build/libs/BOOT-INF/classpath.idx ```  This will then at least with CF push causing error:  ``` FAILED Error processing app files: Error processing app files in 'demo2-0.0.1-SNAPSHOT.jar': open /tmp/unzipped-app739748771/BOOT-INF/classpath.idx: permission denied ``` </body>
		<created>2020-04-12 15:58:39</created>
		<closed>2020-04-22 14:48:20</closed>
	</bug>
	<bug>
		<id>20919</id>
		<title>Default for spring.kafka.listener.missing-topics-fatal is no longer aligned with Spring Kafka's default</title>
		<body>Forward port of issue #20917 to 2.3.0.RC1.</body>
		<created>2020-04-11 08:29:05</created>
		<closed>2020-04-11 08:29:18</closed>
	</bug>
	<bug>
		<id>20916</id>
		<title>MockBean does not resolve the right type for abstract test class</title>
		<body>Please forgive me if this kind of issue is not appropriate. I already [SO-ed](https://stackoverflow.com/q/61152887/330457).  Just in cases of issue titles, this issue might have a same issue with https://github.com/spring-projects/spring-boot/issues/15969. I'm not sure.  I have a tightly coupled abstract service class with generic types.  I have an abstract service class which autowires a specific type of repository.  ```java @NoRepositoryBean interface SomeRepository&lt;T&gt; { }  abstract class SomeService&lt;T extends SomeRepository&lt;U&gt;, U ...&gt; {      @Autowired     private U repositoryInstance; } ```  Now I'm trying to create an abstract test class for subclasses of the service class.  ```java @SpringBootTest abstract class SomeServiceTest&lt;T extends SomeService&lt;U&gt;, U extends SomeRepository&lt;V&gt;, V ...&gt; {      @Autowired     private T serviceInstance;      // personally expected     // to mock the serviceInstance.repositoryInstance, and it doesn't.     @MockBean     private U repositoryInstance; // != serviceInstance.repositoryInstance(); } ```  But mocking the bean in a test class of actual service class works. (Which is I intended that extended modules don't have to do.)  ```java class OtherServiceTest         extends SomeServiceTest&lt;OtherService, OtherRepository, ...&gt; {      @TestConfiguration     OtherServiceTestConfiguration {          // WORKS!!!         // == serviceInstance().repositoryInstance();         @MockBean private OtherRepository repositoryInstance;     } }  class AnotherServiceTest         extends SomeServiceTest&lt;AnotherService, AnotherRepository, ...&gt; {      // WORKS!!!     // == serviceInstance().repositoryInstance();     @MockBean private AnotherRepository repositoryInstance; } ```  Is there any intrinsic mechanism for mocking the `SomeServiceTest#serviceIntance.repositoryInstance`?</body>
		<created>2020-04-11 06:49:22</created>
		<closed>2020-06-18 00:27:23</closed>
	</bug>
	<bug>
		<id>20900</id>
		<title>Use of new DefaultResourceLoader() is dangerous as it captures the thread context classloader at the time of the call</title>
		<body>Hi,  recently the following tests started to fail sporadically:  - `LogFileWebEndpointAutoConfigurationTests.logFileWebEndpointIsAutoConfiguredWhenExternalFileIsSet ` - `DiskSpaceHealthContributorAutoConfigurationTests.runWhenPathDoesNotExistShouldCreateIndicator `  Both seem to be throwing similar errors like this:  ``` Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [java.io.File] for value 'external.log'; nested exception is java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [external.log]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.  at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)  at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191)  at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:170)  at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:96)  at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:88)  at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:434)  at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:379)  at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:319)  ... 142 more  Caused by: java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [external.log]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.  at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1385)  at org.apache.catalina.loader.WebappClassLoaderBase.getResource(WebappClassLoaderBase.java:1038)  at org.springframework.core.io.ClassPathResource.resolveURL(ClassPathResource.java:155)  at org.springframework.core.io.ClassPathResource.exists(ClassPathResource.java:142)  at org.springframework.boot.convert.StringToFileConverter.convert(StringToFileConverter.java:48)  at org.springframework.boot.convert.StringToFileConverter.convert(StringToFileConverter.java:34)  at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:385)  at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) ```  I tried fixing it directly, but I can't see what's going wrong in these cases.  Cheers, Christoph</body>
		<created>2020-04-09 14:40:22</created>
		<closed>2020-04-24 15:22:53</closed>
	</bug>
	<bug>
		<id>20891</id>
		<title>Application fails to start due to missing WebFluxProperties bean when using @EnableWebFlux</title>
		<body>An exception is thrown when the program is started:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} ```  Spring Boot version 2.3.0.M4.  ```kotlin @SpringBootApplication @EnableWebFlux @EnableR2dbcRepositories class FxtradingWebApplication { }  fun main(args: Array&lt;String&gt;) {     runApplication&lt;FxtradingWebApplication&gt;(*args) } ```  ```yaml spring:   r2dbc:    url: r2dbc:mysql://127.0.0.1/fxtrading?&amp;useSSL=false&amp;serverTimezone=UTC     username: root     password: 123456 debug: true ```  ```kotlin import org.jetbrains.kotlin.gradle.tasks.KotlinCompile  plugins {     id("org.springframework.boot") version Vers.springboot     id("io.spring.dependency-management") version "1.0.9.RELEASE"     kotlin("jvm") version Vers.kotlin     kotlin("plugin.spring") version Vers.kotlin     kotlin("plugin.jpa") version Vers.kotlin     kotlin("kapt") version Vers.kotlin }  java.sourceCompatibility = Vers.java  val developmentOnly by configurations.creating configurations {     runtimeClasspath {         extendsFrom(developmentOnly)     } }  repositories {     maven { url = uri("https://repo.spring.io/milestone") } }  dependencies {     // module dependencies     implementation(project(":fxtrading-sdk-fxcm"))     // spring dependencies     implementation("org.springframework.boot:spring-boot-starter-data-r2dbc")     implementation("org.springframework.boot:spring-boot-starter-webflux")     // spring extensions - jackson     implementation("com.fasterxml.jackson.module:jackson-module-kotlin")     // spring extensions - querydsl     implementation("com.querydsl:querydsl-jpa:4.3.1")     implementation("com.querydsl:querydsl-apt:4.3.1")     // spring extensions - reactor kotlin     implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")     // kotlin dependencies     implementation(kotlin(Deps.kotlin_stdlib))     implementation(Deps.kotlin_reflect)     implementation(Deps.kotlinx_coroutines)     // database drivers     runtimeOnly("dev.miku:r2dbc-mysql")     runtimeOnly("mysql:mysql-connector-java")     // spring devtools     developmentOnly("org.springframework.boot:spring-boot-devtools")      // kapt - querydsl     kapt("com.querydsl:querydsl-apt:4.3.1:jpa")      // test dependencies     testImplementation("org.springframework.boot:spring-boot-starter-test") {         exclude(group = "org.junit.vintage", module = "junit-vintage-engine")     }     testImplementation("io.projectreactor:reactor-test") }  tasks.withType&lt;Test&gt; {     useJUnitPlatform() }  tasks.withType&lt;KotlinCompile&gt; {     kotlinOptions {         freeCompilerArgs = listOf("-Xjsr305=strict")         kotlinOptions.jvmTarget = Vers.kotlinJvmTarger     } } ```  ``` "C:\Program Files\Java\jdk1.8.0_162\bin\java.exe" -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:53020,suspend=y,server=n -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled=true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:C:\Users\ksy\.IntelliJIdea2019.3\system\captureAgent\debugger-agent.jar -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_162\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_162\jre\lib\rt.jar;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-web\build\classes\java\main;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-web\build\classes\kotlin\main;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-web\build\tmp\kapt3\classes\main;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-web\build\resources\main;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-sdk-fxcm\build\classes\kotlin\main;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-sdk-fxcm\libs\fxcore2.jar;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-sdk-fxcm\libs\pricehistorymgr.jar;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-sdk-fxcm\libs\quotesmgr2.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter-webflux\2.3.0.M4\5c1cc7f8dd56ab344d25a8d962bb3919fbf22fdc\spring-boot-starter-webflux-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter-json\2.3.0.M4\1c691ac8d5ab15468e79081680f260c32411aad\spring-boot-starter-json-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter\2.3.0.M4\655fa38097b0e58ca6431a53286418dcab4ba835\spring-boot-starter-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter-reactor-netty\2.3.0.M4\bb488bf7f0c090990f5159d22f1fc411ecd4d761\spring-boot-starter-reactor-netty-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-autoconfigure\2.3.0.M4\ed7437114eab8a9fd62908fc7ccdcc8bea941273\spring-boot-autoconfigure-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot\2.3.0.M4\e137c184102aa6e1c101dda4977f85ab25d8232\spring-boot-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter-logging\2.3.0.M4\18661bb914525766f277a1278a170b71dae6ff1c\spring-boot-starter-logging-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.boot\spring-boot-starter-data-r2dbc\2.3.0.M4\186c0cfa72d975baa7f87a8d196b3ad2e688ae5c\spring-boot-starter-data-r2dbc-2.3.0.M4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.module\jackson-module-kotlin\2.11.0.rc1\94d14dad9f7b4f04d5f1388461ad4123f121e601\jackson-module-kotlin-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.querydsl\querydsl-jpa\4.3.1\1694db9cd65d7c8a63314ec214cc114cfc67e2ed\querydsl-jpa-4.3.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.querydsl\querydsl-apt\4.3.1\4c848d6a4e1675e392ad023fad5c189d66439f17\querydsl-apt-4.3.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.projectreactor.kotlin\reactor-kotlin-extensions\1.0.2.RELEASE\84e7a8c4d59ea70d9b40b9fd32576b908bfbe4a0\reactor-kotlin-extensions-1.0.2.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-jdk8\1.3.70\c706d9a12aa043400daacbb15b61ba662a1eb9a9\kotlin-stdlib-jdk8-1.3.70.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-reflect\1.3.70\75a87c4141e55abbaf418b8495550ced8894045d\kotlin-reflect-1.3.70.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlinx\kotlinx-coroutines-reactor\1.3.5\1c1ec9f5f52fe633908b22bf0cabefc154c05bde\kotlinx-coroutines-reactor-1.3.5.jar;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-sdk\build\classes\kotlin\main;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.data\spring-data-r2dbc\1.1.0.RC1\12460d50123ece83bfc811a76298aef45f5b7ad0\spring-data-r2dbc-1.1.0.RC1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.r2dbc\r2dbc-pool\0.8.2.RELEASE\83fb9c945a447c38fc58f8c25a4f588251aac45b\r2dbc-pool-0.8.2.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.r2dbc\r2dbc-spi\0.8.1.RELEASE\17e0dbda7e0da3e8a570597509b876bacc776dd0\r2dbc-spi-0.8.1.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-webflux\5.2.5.RELEASE\4bd7cdc9d9b6df50aad573d5d899322a17a41942\spring-webflux-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-web\5.2.5.RELEASE\530da67e70ed5e63f7f3e86f4397e1da6c8e1ff4\spring-web-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.synchronoss.cloud\nio-multipart-parser\1.1.0\c6c417fec6612584b1c34d4dd98c5a4e47e8c754\nio-multipart-parser-1.1.0.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\dev.miku\r2dbc-mysql\0.8.1.RELEASE\3478bca3016a365ccbe7c0e016ed2f4eeeb083\r2dbc-mysql-0.8.1.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.datatype\jackson-datatype-jdk8\2.11.0.rc1\c848743113f1ebc833c6b3293a9e530fc265e220\jackson-datatype-jdk8-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\mysql\mysql-connector-java\8.0.19\9af69ef0f68eae737351ff55c0ba6e23a06826a5\mysql-connector-java-8.0.19.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.datatype\jackson-datatype-jsr310\2.11.0.rc1\790cbdbb9c56b96131588c1c5e39febc6a6432f5\jackson-datatype-jsr310-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.module\jackson-module-parameter-names\2.11.0.rc1\3558805197d3fac51f250536179350d56847a152\jackson-module-parameter-names-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.core\jackson-databind\2.11.0.rc1\544a860c36bd64eb2ba0ea4f1304ebc61846c9ea\jackson-databind-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.core\jackson-annotations\2.11.0.rc1\f38d7bd917d96c4db03a8bb49057b23e514ea01f\jackson-annotations-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.querydsl\querydsl-codegen\4.3.1\63db1c86b3f6474b3029e31e94783d2c58beeaf7\querydsl-codegen-4.3.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.querydsl\querydsl-core\4.3.1\102c444bb33e5d6443d247e6f29e2ecb6ab32dd0\querydsl-core-4.3.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\javax.inject\javax.inject\1\6975da39a7040257bd51d21a231b76c915872d38\javax.inject-1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.data\spring-data-relational\2.0.0.RC1\736738382a53cf5a01e5bd5126a20d47a86c3662\spring-data-relational-2.0.0.RC1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework.data\spring-data-commons\2.3.0.RC1\abe3e3d07c53c119f0d720d6ac58721d3566228a\spring-data-commons-2.3.0.RC1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.synchronoss.cloud\nio-stream-storage\1.1.3\986dba5f6e5eed20f0dba6ddc8e8a64a9ebdc2f3\nio-stream-storage-1.1.3.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.apache.logging.log4j\log4j-to-slf4j\2.13.1\acb14cc60bb8f45a8ccf17cd7e94961236b3306e\log4j-to-slf4j-2.13.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\ch.qos.logback\logback-classic\1.2.3\7c4f3c474fb2c041d8028740440937705ebb473a\logback-classic-1.2.3.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.slf4j\jul-to-slf4j\1.7.30\d58bebff8cbf70ff52b59208586095f467656c30\jul-to-slf4j-1.7.30.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.slf4j\slf4j-api\1.7.30\b5a4b6d16ab13e34a88fae84c35cd5d68cac922c\slf4j-api-1.7.30.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.projectreactor.addons\reactor-pool\0.1.3.RELEASE\e537f577fff880d76e3336bcb755c22f200222f3\reactor-pool-0.1.3.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.projectreactor.netty\reactor-netty\0.9.6.RELEASE\b98b670a8dc1079b17ff5dd82cc78acac001999a\reactor-netty-0.9.6.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.projectreactor\reactor-core\3.3.4.RELEASE\af99eff1cc01ccae33069e21c1db45328389747e\reactor-core-3.3.4.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-jdk7\1.3.70\95aee922bc2a0fff3b7bfa1b6503ff0afe38264a\kotlin-stdlib-jdk7-1.3.70.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlinx\kotlinx-coroutines-reactive\1.3.5\e07ebba2d47ffe161c7b31ca0daf4792d7c482d6\kotlinx-coroutines-reactive-1.3.5.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlinx\kotlinx-coroutines-core\1.3.5\b245208f2b844c02dbb506312d4859bde93bce8d\kotlinx-coroutines-core-1.3.5.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib\1.3.70\e5d97e25bb5b30dcfc022ec1c8f3959a875257fb\kotlin-stdlib-1.3.70.jar;D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-entity\build\classes\kotlin\main;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.projectreactor.addons\reactor-extra\3.3.3.RELEASE\e8d9adea315fc94199c42fc7936d28adf4255b40\reactor-extra-3.3.3.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\jakarta.annotation\jakarta.annotation-api\1.3.5\59eb84ee0d616332ff44aba065f3888cf002cd2d\jakarta.annotation-api-1.3.5.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\ch.qos.logback\logback-core\1.2.3\864344400c3d4d92dfeb0a305dc87d953677c03c\logback-core-1.2.3.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.reactivestreams\reactive-streams\1.0.3\d9fb7a7926ffa635b3dcaa5049fb2bfa25b3e7d0\reactive-streams-1.0.3.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.yaml\snakeyaml\1.26\a78a8747147d2c5807683e76ec2b633e95c14fe9\snakeyaml-1.26.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-tx\5.2.5.RELEASE\29c07e0d3013ba8fcfa760b2fab457bea19d89bc\spring-tx-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-context\5.2.5.RELEASE\3aa9a6364151c9e37f18f78106fc6a32805333a6\spring-context-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-aop\5.2.5.RELEASE\4438fdc9914d8fcf5033437c1e915b6f2d9cfb64\spring-aop-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-beans\5.2.5.RELEASE\6dd11f183d252605e5dae2552cd918b758390139\spring-beans-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-expression\5.2.5.RELEASE\b763ffd867d55a211e87734cc799513687a6c7bd\spring-expression-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-core\5.2.5.RELEASE\e207390ac307d282ed565db4df7046df04fc52b\spring-core-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.core\jackson-core\2.11.0.rc1\24a6292f6ec145e0c4ee10145369010cba0daf67\jackson-core-2.11.0.rc1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.mysema.codegen\codegen\0.6.8\a94cea356af04d10e89f04f38ce746f1d5ac8359\codegen-0.6.8.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.reflections\reflections\0.9.9\296d8adb2f22a38025f44b45cac89835ff0bbaf\reflections-0.9.9.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.google.guava\guava\18.0\cce0823396aa693798f8882e64213b1772032b09\guava-18.0.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.google.code.findbugs\jsr305\1.3.9\40719ea6961c0cb6afaeb6a921eaa1f6afd4cfdf\jsr305-1.3.9.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.mysema.commons\mysema-commons-lang\0.2.4\d09c8489d54251a6c22fbce804bdd4a070557317\mysema-commons-lang-0.2.4.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.infradna.tool\bridge-method-annotation\1.13\18cdce50cde6f54ee5390d0907384f72183ff0fe\bridge-method-annotation-1.13.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains.kotlin\kotlin-stdlib-common\1.3.70\3fa8dd6c896d635e78201e5e811545f3846dec04\kotlin-stdlib-common-1.3.70.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.jetbrains\annotations\13.0\919f0dfe192fb4e063e7dacadee7f8bb9a2672a9\annotations-13.0.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.apache.logging.log4j\log4j-api\2.13.1\cc670f92dc77bbf4540904c3fa211b997cba00d8\log4j-api-2.13.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-codec-http2\4.1.48.Final\f7a0e40d0eea9a60c05f705a128473f08a3de1dc\netty-codec-http2-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-handler-proxy\4.1.48.Final\79910203db6a542189c9aaa9ec187bf5ee16248a\netty-handler-proxy-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-codec-http\4.1.48.Final\8b18499a51367d291efd1f200a4e865370d38738\netty-codec-http-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-handler\4.1.48.Final\d459919c87dc1a2bf400b39053761ecc11c2e436\netty-handler-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-transport-native-epoll\4.1.48.Final\2b25233dda8b986297076a7d62552c1ec2f41ed8\netty-transport-native-epoll-4.1.48.Final-linux-x86_64.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-codec-socks\4.1.48.Final\42b55c9ca8672ebb7160cadf3c70ffc11638f021\netty-codec-socks-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-codec\4.1.48.Final\3142078325d745228da9d6d1f6f9931c63aaba16\netty-codec-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-transport-native-unix-common\4.1.48.Final\fb0a76d5d201b59ec2b3721c66eda737b3176f30\netty-transport-native-unix-common-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-transport\4.1.48.Final\d285e8d9af5be1fc146b91a1b0d211e7a6a7e7d4\netty-transport-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-buffer\4.1.48.Final\7fd3ebb659c628e0158c9c2c971f4d0734d7f4f0\netty-buffer-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-resolver\4.1.48.Final\612ad2acc848ce46496095683eea621094763b80\netty-resolver-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\io.netty\netty-common\4.1.48.Final\ec27d04fd5e7b65ac171cd64734f9e4f1fc2a286\netty-common-4.1.48.Final.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.springframework\spring-jcl\5.2.5.RELEASE\b841f30defd6508f0c21b8c5490b030eb50ac8cb\spring-jcl-5.2.5.RELEASE.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.eclipse.jdt.core.compiler\ecj\4.3.1\21582b0e662b9e54fc6f0f2721d36f753ce7c58c\ecj-4.3.1.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\org.javassist\javassist\3.18.2-GA\1180a90fbad732b60fb728a6bbe8fcb3151423d7\javassist-3.18.2-GA.jar;C:\Users\ksy\.gradle\caches\modules-2\files-2.1\com.google.code.findbugs\annotations\2.0.1\9ef6656259841cebfb9fb0697bb122ada4485498\annotations-2.0.1.jar;C:\Program Files\JetBrains\IntelliJ IDEA 2019.3.4\lib\idea_rt.jar" com.rdgy.fxtrading.fxcm.FxtradingWebApplicationKt Connected to the target VM, address: '127.0.0.1:53020', transport: 'socket' 2020-04-09 10:32:51.566 DEBUG 16036 --- [           main] .c.l.ClasspathLoggingApplicationListener : Application started with classpath: [file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/charsets.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/deploy.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/access-bridge-64.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/cldrdata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/dnsns.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/jaccess.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/jfxrt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/localedata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/nashorn.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunec.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunjce_provider.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunmscapi.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunpkcs11.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/zipfs.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/javaws.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jce.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jfr.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jfxswt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jsse.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/management-agent.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/plugin.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/resources.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/rt.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/classes/java/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/classes/kotlin/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/tmp/kapt3/classes/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/resources/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/build/classes/kotlin/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/fxcore2.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/pricehistorymgr.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/quotesmgr2.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-webflux/2.3.0.M4/5c1cc7f8dd56ab344d25a8d962bb3919fbf22fdc/spring-boot-starter-webflux-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-json/2.3.0.M4/1c691ac8d5ab15468e79081680f260c32411aad/spring-boot-starter-json-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/2.3.0.M4/655fa38097b0e58ca6431a53286418dcab4ba835/spring-boot-starter-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-reactor-netty/2.3.0.M4/bb488bf7f0c090990f5159d22f1fc411ecd4d761/spring-boot-starter-reactor-netty-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/2.3.0.M4/ed7437114eab8a9fd62908fc7ccdcc8bea941273/spring-boot-autoconfigure-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot/2.3.0.M4/e137c184102aa6e1c101dda4977f85ab25d8232/spring-boot-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-logging/2.3.0.M4/18661bb914525766f277a1278a170b71dae6ff1c/spring-boot-starter-logging-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-data-r2dbc/2.3.0.M4/186c0cfa72d975baa7f87a8d196b3ad2e688ae5c/spring-boot-starter-data-r2dbc-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-kotlin/2.11.0.rc1/94d14dad9f7b4f04d5f1388461ad4123f121e601/jackson-module-kotlin-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-jpa/4.3.1/1694db9cd65d7c8a63314ec214cc114cfc67e2ed/querydsl-jpa-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-apt/4.3.1/4c848d6a4e1675e392ad023fad5c189d66439f17/querydsl-apt-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.kotlin/reactor-kotlin-extensions/1.0.2.RELEASE/84e7a8c4d59ea70d9b40b9fd32576b908bfbe4a0/reactor-kotlin-extensions-1.0.2.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.3.70/c706d9a12aa043400daacbb15b61ba662a1eb9a9/kotlin-stdlib-jdk8-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.3.70/75a87c4141e55abbaf418b8495550ced8894045d/kotlin-reflect-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-reactor/1.3.5/1c1ec9f5f52fe633908b22bf0cabefc154c05bde/kotlinx-coroutines-reactor-1.3.5.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk/build/classes/kotlin/main/, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-r2dbc/1.1.0.RC1/12460d50123ece83bfc811a76298aef45f5b7ad0/spring-data-r2dbc-1.1.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.r2dbc/r2dbc-pool/0.8.2.RELEASE/83fb9c945a447c38fc58f8c25a4f588251aac45b/r2dbc-pool-0.8.2.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.r2dbc/r2dbc-spi/0.8.1.RELEASE/17e0dbda7e0da3e8a570597509b876bacc776dd0/r2dbc-spi-0.8.1.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-webflux/5.2.5.RELEASE/4bd7cdc9d9b6df50aad573d5d899322a17a41942/spring-webflux-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.2.5.RELEASE/530da67e70ed5e63f7f3e86f4397e1da6c8e1ff4/spring-web-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.synchronoss.cloud/nio-multipart-parser/1.1.0/c6c417fec6612584b1c34d4dd98c5a4e47e8c754/nio-multipart-parser-1.1.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/dev.miku/r2dbc-mysql/0.8.1.RELEASE/3478bca3016a365ccbe7c0e016ed2f4eeeb083/r2dbc-mysql-0.8.1.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jdk8/2.11.0.rc1/c848743113f1ebc833c6b3293a9e530fc265e220/jackson-datatype-jdk8-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/mysql/mysql-connector-java/8.0.19/9af69ef0f68eae737351ff55c0ba6e23a06826a5/mysql-connector-java-8.0.19.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jsr310/2.11.0.rc1/790cbdbb9c56b96131588c1c5e39febc6a6432f5/jackson-datatype-jsr310-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-parameter-names/2.11.0.rc1/3558805197d3fac51f250536179350d56847a152/jackson-module-parameter-names-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.11.0.rc1/544a860c36bd64eb2ba0ea4f1304ebc61846c9ea/jackson-databind-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.11.0.rc1/f38d7bd917d96c4db03a8bb49057b23e514ea01f/jackson-annotations-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-codegen/4.3.1/63db1c86b3f6474b3029e31e94783d2c58beeaf7/querydsl-codegen-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-core/4.3.1/102c444bb33e5d6443d247e6f29e2ecb6ab32dd0/querydsl-core-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/javax.inject/javax.inject/1/6975da39a7040257bd51d21a231b76c915872d38/javax.inject-1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-relational/2.0.0.RC1/736738382a53cf5a01e5bd5126a20d47a86c3662/spring-data-relational-2.0.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-commons/2.3.0.RC1/abe3e3d07c53c119f0d720d6ac58721d3566228a/spring-data-commons-2.3.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.synchronoss.cloud/nio-stream-storage/1.1.3/986dba5f6e5eed20f0dba6ddc8e8a64a9ebdc2f3/nio-stream-storage-1.1.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-to-slf4j/2.13.1/acb14cc60bb8f45a8ccf17cd7e94961236b3306e/log4j-to-slf4j-2.13.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.2.3/7c4f3c474fb2c041d8028740440937705ebb473a/logback-classic-1.2.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.7.30/d58bebff8cbf70ff52b59208586095f467656c30/jul-to-slf4j-1.7.30.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.30/b5a4b6d16ab13e34a88fae84c35cd5d68cac922c/slf4j-api-1.7.30.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.addons/reactor-pool/0.1.3.RELEASE/e537f577fff880d76e3336bcb755c22f200222f3/reactor-pool-0.1.3.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.netty/reactor-netty/0.9.6.RELEASE/b98b670a8dc1079b17ff5dd82cc78acac001999a/reactor-netty-0.9.6.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor/reactor-core/3.3.4.RELEASE/af99eff1cc01ccae33069e21c1db45328389747e/reactor-core-3.3.4.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.3.70/95aee922bc2a0fff3b7bfa1b6503ff0afe38264a/kotlin-stdlib-jdk7-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-reactive/1.3.5/e07ebba2d47ffe161c7b31ca0daf4792d7c482d6/kotlinx-coroutines-reactive-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.3.5/b245208f2b844c02dbb506312d4859bde93bce8d/kotlinx-coroutines-core-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.3.70/e5d97e25bb5b30dcfc022ec1c8f3959a875257fb/kotlin-stdlib-1.3.70.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-entity/build/classes/kotlin/main/, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.addons/reactor-extra/3.3.3.RELEASE/e8d9adea315fc94199c42fc7936d28adf4255b40/reactor-extra-3.3.3.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/jakarta.annotation/jakarta.annotation-api/1.3.5/59eb84ee0d616332ff44aba065f3888cf002cd2d/jakarta.annotation-api-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.2.3/864344400c3d4d92dfeb0a305dc87d953677c03c/logback-core-1.2.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.reactivestreams/reactive-streams/1.0.3/d9fb7a7926ffa635b3dcaa5049fb2bfa25b3e7d0/reactive-streams-1.0.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.yaml/snakeyaml/1.26/a78a8747147d2c5807683e76ec2b633e95c14fe9/snakeyaml-1.26.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-tx/5.2.5.RELEASE/29c07e0d3013ba8fcfa760b2fab457bea19d89bc/spring-tx-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.2.5.RELEASE/3aa9a6364151c9e37f18f78106fc6a32805333a6/spring-context-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.2.5.RELEASE/4438fdc9914d8fcf5033437c1e915b6f2d9cfb64/spring-aop-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.2.5.RELEASE/6dd11f183d252605e5dae2552cd918b758390139/spring-beans-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.2.5.RELEASE/b763ffd867d55a211e87734cc799513687a6c7bd/spring-expression-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.2.5.RELEASE/e207390ac307d282ed565db4df7046df04fc52b/spring-core-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.11.0.rc1/24a6292f6ec145e0c4ee10145369010cba0daf67/jackson-core-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.mysema.codegen/codegen/0.6.8/a94cea356af04d10e89f04f38ce746f1d5ac8359/codegen-0.6.8.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.reflections/reflections/0.9.9/296d8adb2f22a38025f44b45cac89835ff0bbaf/reflections-0.9.9.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/18.0/cce0823396aa693798f8882e64213b1772032b09/guava-18.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/1.3.9/40719ea6961c0cb6afaeb6a921eaa1f6afd4cfdf/jsr305-1.3.9.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.mysema.commons/mysema-commons-lang/0.2.4/d09c8489d54251a6c22fbce804bdd4a070557317/mysema-commons-lang-0.2.4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.infradna.tool/bridge-method-annotation/1.13/18cdce50cde6f54ee5390d0907384f72183ff0fe/bridge-method-annotation-1.13.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.3.70/3fa8dd6c896d635e78201e5e811545f3846dec04/kotlin-stdlib-common-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.13.1/cc670f92dc77bbf4540904c3fa211b997cba00d8/log4j-api-2.13.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-http2/4.1.48.Final/f7a0e40d0eea9a60c05f705a128473f08a3de1dc/netty-codec-http2-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler-proxy/4.1.48.Final/79910203db6a542189c9aaa9ec187bf5ee16248a/netty-handler-proxy-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-http/4.1.48.Final/8b18499a51367d291efd1f200a4e865370d38738/netty-codec-http-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler/4.1.48.Final/d459919c87dc1a2bf400b39053761ecc11c2e436/netty-handler-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-epoll/4.1.48.Final/2b25233dda8b986297076a7d62552c1ec2f41ed8/netty-transport-native-epoll-4.1.48.Final-linux-x86_64.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-socks/4.1.48.Final/42b55c9ca8672ebb7160cadf3c70ffc11638f021/netty-codec-socks-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec/4.1.48.Final/3142078325d745228da9d6d1f6f9931c63aaba16/netty-codec-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-unix-common/4.1.48.Final/fb0a76d5d201b59ec2b3721c66eda737b3176f30/netty-transport-native-unix-common-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport/4.1.48.Final/d285e8d9af5be1fc146b91a1b0d211e7a6a7e7d4/netty-transport-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-buffer/4.1.48.Final/7fd3ebb659c628e0158c9c2c971f4d0734d7f4f0/netty-buffer-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-resolver/4.1.48.Final/612ad2acc848ce46496095683eea621094763b80/netty-resolver-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-common/4.1.48.Final/ec27d04fd5e7b65ac171cd64734f9e4f1fc2a286/netty-common-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.2.5.RELEASE/b841f30defd6508f0c21b8c5490b030eb50ac8cb/spring-jcl-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.eclipse.jdt.core.compiler/ecj/4.3.1/21582b0e662b9e54fc6f0f2721d36f753ce7c58c/ecj-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.18.2-GA/1180a90fbad732b60fb728a6bbe8fcb3151423d7/javassist-3.18.2-GA.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/annotations/2.0.1/9ef6656259841cebfb9fb0697bb122ada4485498/annotations-2.0.1.jar, file:/C:/Program%20Files/JetBrains/IntelliJ%20IDEA%202019.3.4/lib/idea_rt.jar, file:/C:/Users/ksy/.IntelliJIdea2019.3/system/captureAgent/debugger-agent.jar]    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::             (v2.3.0.M4)  2020-04-09 10:32:51.701  INFO 16036 --- [           main] c.r.f.fxcm.FxtradingWebApplicationKt     : Starting FxtradingWebApplicationKt on DESKTOP-QKC9TNG with PID 16036 (D:\ProgramData\git\repository\rdgy\rdgy-fxtrading\fxtrading-web\build\classes\java\main started by ksy in D:\ProgramData\git\repository\rdgy\rdgy-fxtrading) 2020-04-09 10:32:51.702  INFO 16036 --- [           main] c.r.f.fxcm.FxtradingWebApplicationKt     : No active profile set, falling back to default profiles: default 2020-04-09 10:32:51.702 DEBUG 16036 --- [           main] o.s.boot.SpringApplication               : Loading source class com.rdgy.fxtrading.fxcm.FxtradingWebApplication 2020-04-09 10:32:51.788 DEBUG 16036 --- [           main] o.s.b.c.c.ConfigFileApplicationListener  : Loaded config file 'file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/resources/main/application.yml' (classpath:/application.yml) 2020-04-09 10:32:51.790 DEBUG 16036 --- [           main] onfigReactiveWebServerApplicationContext : Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@58be6e8 2020-04-09 10:32:52.310  INFO 16036 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data R2DBC repositories in DEFAULT mode. 2020-04-09 10:32:52.325  INFO 16036 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 8ms. Found 0 R2DBC repository interfaces. 2020-04-09 10:32:52.332  INFO 16036 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data R2DBC repositories in DEFAULT mode. 2020-04-09 10:32:52.451  INFO 16036 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 118ms. Found 1 R2DBC repository interfaces. 2020-04-09 10:32:53.430 DEBUG 16036 --- [           main] inMXBeanRegistrar$SpringApplicationAdmin : Application Admin MBean registered with name 'org.springframework.boot:type=Admin,name=SpringApplication' 2020-04-09 10:32:53.540 DEBUG 16036 --- [           main] s.w.r.r.m.a.RequestMappingHandlerMapping : 3 mappings in 'requestMappingHandlerMapping' 2020-04-09 10:32:53.624 DEBUG 16036 --- [           main] o.s.w.r.r.m.a.ControllerMethodResolver   : ControllerAdvice beans: none 2020-04-09 10:32:53.714  WARN 16036 --- [           main] onfigReactiveWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'httpHandler' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration$AnnotationConfig.class]: Unsatisfied dependency expressed through method 'httpHandler' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 2020-04-09 10:32:53.815 DEBUG 16036 --- [           main] .c.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/charsets.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/deploy.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/access-bridge-64.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/cldrdata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/dnsns.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/jaccess.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/jfxrt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/localedata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/nashorn.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunec.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunjce_provider.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunmscapi.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/sunpkcs11.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/ext/zipfs.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/javaws.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jce.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jfr.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jfxswt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/jsse.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/management-agent.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/plugin.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/resources.jar, file:/C:/Program%20Files/Java/jdk1.8.0_162/jre/lib/rt.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/classes/java/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/classes/kotlin/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/tmp/kapt3/classes/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-web/build/resources/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/build/classes/kotlin/main/, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/fxcore2.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/pricehistorymgr.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk-fxcm/libs/quotesmgr2.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-webflux/2.3.0.M4/5c1cc7f8dd56ab344d25a8d962bb3919fbf22fdc/spring-boot-starter-webflux-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-json/2.3.0.M4/1c691ac8d5ab15468e79081680f260c32411aad/spring-boot-starter-json-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/2.3.0.M4/655fa38097b0e58ca6431a53286418dcab4ba835/spring-boot-starter-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-reactor-netty/2.3.0.M4/bb488bf7f0c090990f5159d22f1fc411ecd4d761/spring-boot-starter-reactor-netty-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/2.3.0.M4/ed7437114eab8a9fd62908fc7ccdcc8bea941273/spring-boot-autoconfigure-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot/2.3.0.M4/e137c184102aa6e1c101dda4977f85ab25d8232/spring-boot-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-logging/2.3.0.M4/18661bb914525766f277a1278a170b71dae6ff1c/spring-boot-starter-logging-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-data-r2dbc/2.3.0.M4/186c0cfa72d975baa7f87a8d196b3ad2e688ae5c/spring-boot-starter-data-r2dbc-2.3.0.M4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-kotlin/2.11.0.rc1/94d14dad9f7b4f04d5f1388461ad4123f121e601/jackson-module-kotlin-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-jpa/4.3.1/1694db9cd65d7c8a63314ec214cc114cfc67e2ed/querydsl-jpa-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-apt/4.3.1/4c848d6a4e1675e392ad023fad5c189d66439f17/querydsl-apt-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.kotlin/reactor-kotlin-extensions/1.0.2.RELEASE/84e7a8c4d59ea70d9b40b9fd32576b908bfbe4a0/reactor-kotlin-extensions-1.0.2.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.3.70/c706d9a12aa043400daacbb15b61ba662a1eb9a9/kotlin-stdlib-jdk8-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.3.70/75a87c4141e55abbaf418b8495550ced8894045d/kotlin-reflect-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-reactor/1.3.5/1c1ec9f5f52fe633908b22bf0cabefc154c05bde/kotlinx-coroutines-reactor-1.3.5.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-sdk/build/classes/kotlin/main/, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-r2dbc/1.1.0.RC1/12460d50123ece83bfc811a76298aef45f5b7ad0/spring-data-r2dbc-1.1.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.r2dbc/r2dbc-pool/0.8.2.RELEASE/83fb9c945a447c38fc58f8c25a4f588251aac45b/r2dbc-pool-0.8.2.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.r2dbc/r2dbc-spi/0.8.1.RELEASE/17e0dbda7e0da3e8a570597509b876bacc776dd0/r2dbc-spi-0.8.1.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-webflux/5.2.5.RELEASE/4bd7cdc9d9b6df50aad573d5d899322a17a41942/spring-webflux-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/5.2.5.RELEASE/530da67e70ed5e63f7f3e86f4397e1da6c8e1ff4/spring-web-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.synchronoss.cloud/nio-multipart-parser/1.1.0/c6c417fec6612584b1c34d4dd98c5a4e47e8c754/nio-multipart-parser-1.1.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/dev.miku/r2dbc-mysql/0.8.1.RELEASE/3478bca3016a365ccbe7c0e016ed2f4eeeb083/r2dbc-mysql-0.8.1.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jdk8/2.11.0.rc1/c848743113f1ebc833c6b3293a9e530fc265e220/jackson-datatype-jdk8-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/mysql/mysql-connector-java/8.0.19/9af69ef0f68eae737351ff55c0ba6e23a06826a5/mysql-connector-java-8.0.19.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jsr310/2.11.0.rc1/790cbdbb9c56b96131588c1c5e39febc6a6432f5/jackson-datatype-jsr310-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-parameter-names/2.11.0.rc1/3558805197d3fac51f250536179350d56847a152/jackson-module-parameter-names-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.11.0.rc1/544a860c36bd64eb2ba0ea4f1304ebc61846c9ea/jackson-databind-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.11.0.rc1/f38d7bd917d96c4db03a8bb49057b23e514ea01f/jackson-annotations-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-codegen/4.3.1/63db1c86b3f6474b3029e31e94783d2c58beeaf7/querydsl-codegen-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.querydsl/querydsl-core/4.3.1/102c444bb33e5d6443d247e6f29e2ecb6ab32dd0/querydsl-core-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/javax.inject/javax.inject/1/6975da39a7040257bd51d21a231b76c915872d38/javax.inject-1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-relational/2.0.0.RC1/736738382a53cf5a01e5bd5126a20d47a86c3662/spring-data-relational-2.0.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-commons/2.3.0.RC1/abe3e3d07c53c119f0d720d6ac58721d3566228a/spring-data-commons-2.3.0.RC1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.synchronoss.cloud/nio-stream-storage/1.1.3/986dba5f6e5eed20f0dba6ddc8e8a64a9ebdc2f3/nio-stream-storage-1.1.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-to-slf4j/2.13.1/acb14cc60bb8f45a8ccf17cd7e94961236b3306e/log4j-to-slf4j-2.13.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.2.3/7c4f3c474fb2c041d8028740440937705ebb473a/logback-classic-1.2.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.7.30/d58bebff8cbf70ff52b59208586095f467656c30/jul-to-slf4j-1.7.30.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.30/b5a4b6d16ab13e34a88fae84c35cd5d68cac922c/slf4j-api-1.7.30.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.addons/reactor-pool/0.1.3.RELEASE/e537f577fff880d76e3336bcb755c22f200222f3/reactor-pool-0.1.3.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.netty/reactor-netty/0.9.6.RELEASE/b98b670a8dc1079b17ff5dd82cc78acac001999a/reactor-netty-0.9.6.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor/reactor-core/3.3.4.RELEASE/af99eff1cc01ccae33069e21c1db45328389747e/reactor-core-3.3.4.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.3.70/95aee922bc2a0fff3b7bfa1b6503ff0afe38264a/kotlin-stdlib-jdk7-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-reactive/1.3.5/e07ebba2d47ffe161c7b31ca0daf4792d7c482d6/kotlinx-coroutines-reactive-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlinx/kotlinx-coroutines-core/1.3.5/b245208f2b844c02dbb506312d4859bde93bce8d/kotlinx-coroutines-core-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.3.70/e5d97e25bb5b30dcfc022ec1c8f3959a875257fb/kotlin-stdlib-1.3.70.jar, file:/D:/ProgramData/git/repository/rdgy/rdgy-fxtrading/fxtrading-entity/build/classes/kotlin/main/, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.projectreactor.addons/reactor-extra/3.3.3.RELEASE/e8d9adea315fc94199c42fc7936d28adf4255b40/reactor-extra-3.3.3.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/jakarta.annotation/jakarta.annotation-api/1.3.5/59eb84ee0d616332ff44aba065f3888cf002cd2d/jakarta.annotation-api-1.3.5.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.2.3/864344400c3d4d92dfeb0a305dc87d953677c03c/logback-core-1.2.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.reactivestreams/reactive-streams/1.0.3/d9fb7a7926ffa635b3dcaa5049fb2bfa25b3e7d0/reactive-streams-1.0.3.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.yaml/snakeyaml/1.26/a78a8747147d2c5807683e76ec2b633e95c14fe9/snakeyaml-1.26.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-tx/5.2.5.RELEASE/29c07e0d3013ba8fcfa760b2fab457bea19d89bc/spring-tx-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/5.2.5.RELEASE/3aa9a6364151c9e37f18f78106fc6a32805333a6/spring-context-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/5.2.5.RELEASE/4438fdc9914d8fcf5033437c1e915b6f2d9cfb64/spring-aop-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/5.2.5.RELEASE/6dd11f183d252605e5dae2552cd918b758390139/spring-beans-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/5.2.5.RELEASE/b763ffd867d55a211e87734cc799513687a6c7bd/spring-expression-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/5.2.5.RELEASE/e207390ac307d282ed565db4df7046df04fc52b/spring-core-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.11.0.rc1/24a6292f6ec145e0c4ee10145369010cba0daf67/jackson-core-2.11.0.rc1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.mysema.codegen/codegen/0.6.8/a94cea356af04d10e89f04f38ce746f1d5ac8359/codegen-0.6.8.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.reflections/reflections/0.9.9/296d8adb2f22a38025f44b45cac89835ff0bbaf/reflections-0.9.9.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/18.0/cce0823396aa693798f8882e64213b1772032b09/guava-18.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/1.3.9/40719ea6961c0cb6afaeb6a921eaa1f6afd4cfdf/jsr305-1.3.9.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.mysema.commons/mysema-commons-lang/0.2.4/d09c8489d54251a6c22fbce804bdd4a070557317/mysema-commons-lang-0.2.4.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.infradna.tool/bridge-method-annotation/1.13/18cdce50cde6f54ee5390d0907384f72183ff0fe/bridge-method-annotation-1.13.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.3.70/3fa8dd6c896d635e78201e5e811545f3846dec04/kotlin-stdlib-common-1.3.70.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.13.1/cc670f92dc77bbf4540904c3fa211b997cba00d8/log4j-api-2.13.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-http2/4.1.48.Final/f7a0e40d0eea9a60c05f705a128473f08a3de1dc/netty-codec-http2-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler-proxy/4.1.48.Final/79910203db6a542189c9aaa9ec187bf5ee16248a/netty-handler-proxy-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-http/4.1.48.Final/8b18499a51367d291efd1f200a4e865370d38738/netty-codec-http-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-handler/4.1.48.Final/d459919c87dc1a2bf400b39053761ecc11c2e436/netty-handler-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-epoll/4.1.48.Final/2b25233dda8b986297076a7d62552c1ec2f41ed8/netty-transport-native-epoll-4.1.48.Final-linux-x86_64.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec-socks/4.1.48.Final/42b55c9ca8672ebb7160cadf3c70ffc11638f021/netty-codec-socks-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-codec/4.1.48.Final/3142078325d745228da9d6d1f6f9931c63aaba16/netty-codec-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport-native-unix-common/4.1.48.Final/fb0a76d5d201b59ec2b3721c66eda737b3176f30/netty-transport-native-unix-common-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-transport/4.1.48.Final/d285e8d9af5be1fc146b91a1b0d211e7a6a7e7d4/netty-transport-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-buffer/4.1.48.Final/7fd3ebb659c628e0158c9c2c971f4d0734d7f4f0/netty-buffer-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-resolver/4.1.48.Final/612ad2acc848ce46496095683eea621094763b80/netty-resolver-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/io.netty/netty-common/4.1.48.Final/ec27d04fd5e7b65ac171cd64734f9e4f1fc2a286/netty-common-4.1.48.Final.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jcl/5.2.5.RELEASE/b841f30defd6508f0c21b8c5490b030eb50ac8cb/spring-jcl-5.2.5.RELEASE.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.eclipse.jdt.core.compiler/ecj/4.3.1/21582b0e662b9e54fc6f0f2721d36f753ce7c58c/ecj-4.3.1.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.18.2-GA/1180a90fbad732b60fb728a6bbe8fcb3151423d7/javassist-3.18.2-GA.jar, file:/C:/Users/ksy/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/annotations/2.0.1/9ef6656259841cebfb9fb0697bb122ada4485498/annotations-2.0.1.jar, file:/C:/Program%20Files/JetBrains/IntelliJ%20IDEA%202019.3.4/lib/idea_rt.jar, file:/C:/Users/ksy/.IntelliJIdea2019.3/system/captureAgent/debugger-agent.jar] 2020-04-09 10:32:53.831 DEBUG 16036 --- [           main] ConditionEvaluationReportLoggingListener :    ============================ CONDITIONS EVALUATION REPORT ============================   Positive matches: -----------------     AopAutoConfiguration matched:       - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)     AopAutoConfiguration.ClassProxyingConfiguration matched:       - @ConditionalOnMissingClass did not find unwanted class 'org.aspectj.weaver.Advice' (OnClassCondition)       - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)     ClientHttpConnectorAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)     ClientHttpConnectorAutoConfiguration#clientConnectorCustomizer matched:       - @ConditionalOnBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) found bean 'reactorClientHttpConnector' (OnBeanCondition)     ClientHttpConnectorConfiguration.ReactorNetty matched:       - @ConditionalOnClass found required class 'reactor.netty.http.client.HttpClient' (OnClassCondition)       - @ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ClientHttpConnector; SearchStrategy: all) did not find any beans (OnBeanCondition)     CodecsAutoConfiguration matched:       - @ConditionalOnClass found required classes 'org.springframework.http.codec.CodecConfigurer', 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)     CodecsAutoConfiguration.JacksonCodecConfiguration matched:       - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)     CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer matched:       - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)     ConnectionFactoryConfigurations.Pool matched:       - @ConditionalOnClass found required class 'io.r2dbc.pool.ConnectionPool' (OnClassCondition)       - Pooling is enabled and R2DBC Connection URL does not contain pooling-related options (ConnectionFactoryConfigurations.PooledConnectionFactoryCondition)       - @ConditionalOnMissingBean (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)     EmbeddedWebServerFactoryCustomizerAutoConfiguration matched:       - @ConditionalOnWebApplication (required) found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)     EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration matched:       - @ConditionalOnClass found required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)     ErrorWebFluxAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)       - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)     ErrorWebFluxAutoConfiguration#errorAttributes matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.web.reactive.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)     ErrorWebFluxAutoConfiguration#errorWebExceptionHandler matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.web.reactive.error.ErrorWebExceptionHandler; SearchStrategy: current) did not find any beans (OnBeanCondition)     GenericCacheConfiguration matched:       - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)     HttpHandlerAutoConfiguration matched:       - @ConditionalOnClass found required classes 'org.springframework.web.reactive.DispatcherHandler', 'org.springframework.http.server.reactive.HttpHandler' (OnClassCondition)       - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)       - @ConditionalOnMissingBean (types: org.springframework.http.server.reactive.HttpHandler; SearchStrategy: all) did not find any beans (OnBeanCondition)     JacksonAutoConfiguration matched:       - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)     JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)     JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)     JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder matched:       - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)     JacksonAutoConfiguration.JacksonObjectMapperConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)     JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper matched:       - @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)     JacksonAutoConfiguration.ParameterNamesModuleConfiguration matched:       - @ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule' (OnClassCondition)     JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule matched:       - @ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans (OnBeanCondition)     JmxAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)       - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)     JmxAutoConfiguration#mbeanExporter matched:       - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans (OnBeanCondition)     JmxAutoConfiguration#mbeanServer matched:       - @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans (OnBeanCondition)     JmxAutoConfiguration#objectNamingStrategy matched:       - @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans (OnBeanCondition)     NoOpCacheConfiguration matched:       - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)     PersistenceExceptionTranslationAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)     PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor matched:       - @ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched (OnPropertyCondition)       - @ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)     PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:       - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)     R2dbcAutoConfiguration matched:       - @ConditionalOnClass found required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)     R2dbcDataAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.data.r2dbc.core.DatabaseClient' (OnClassCondition)       - @ConditionalOnSingleCandidate (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) found a primary bean from beans 'connectionFactory'; @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.core.DatabaseClient; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcDataAutoConfiguration#r2dbcCustomConversions matched:       - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.convert.R2dbcCustomConversions; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcDataAutoConfiguration#r2dbcDatabaseClient matched:       - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.core.DatabaseClient; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcDataAutoConfiguration#r2dbcExceptionTranslator matched:       - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.support.R2dbcExceptionTranslator; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcDataAutoConfiguration#r2dbcMappingContext matched:       - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.mapping.R2dbcMappingContext; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcDataAutoConfiguration#reactiveDataAccessStrategy matched:       - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.core.ReactiveDataAccessStrategy; SearchStrategy: all) did not find any beans (OnBeanCondition)     R2dbcTransactionManagerAutoConfiguration matched:       - @ConditionalOnClass found required classes 'org.springframework.data.r2dbc.connectionfactory.R2dbcTransactionManager', 'org.springframework.transaction.ReactiveTransactionManager' (OnClassCondition)       - @ConditionalOnSingleCandidate (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) found a primary bean from beans 'connectionFactory' (OnBeanCondition)     R2dbcTransactionManagerAutoConfiguration#connectionFactoryTransactionManager matched:       - @ConditionalOnMissingBean (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)     ReactiveWebServerFactoryAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.http.ReactiveHttpInputMessage' (OnClassCondition)       - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)     ReactiveWebServerFactoryConfiguration.EmbeddedNetty matched:       - @ConditionalOnClass found required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)       - @ConditionalOnMissingBean (types: org.springframework.boot.web.reactive.server.ReactiveWebServerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)     ReactiveWebServerFactoryConfiguration.EmbeddedNetty#reactorServerResourceFactory matched:       - @ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ReactorResourceFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)     SimpleCacheConfiguration matched:       - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)     SpringApplicationAdminJmxAutoConfiguration matched:       - @ConditionalOnProperty (spring.application.admin.enabled=true) matched (OnPropertyCondition)     SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans (OnBeanCondition)     TaskExecutionAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)     TaskExecutionAutoConfiguration#applicationTaskExecutor matched:       - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)     TaskExecutionAutoConfiguration#taskExecutorBuilder matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)     TaskSchedulingAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)     TaskSchedulingAutoConfiguration#taskSchedulerBuilder matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)     TransactionAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)     TransactionAutoConfiguration#platformTransactionManagerCustomizers matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans (OnBeanCondition)     TransactionAutoConfiguration#transactionalOperator matched:       - @ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) found a primary bean from beans 'connectionFactoryTransactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.reactive.TransactionalOperator; SearchStrategy: all) did not find any beans (OnBeanCondition)     TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:       - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'connectionFactoryTransactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)     TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:       - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)     WebClientAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)     WebClientAutoConfiguration#webClientBuilder matched:       - @ConditionalOnMissingBean (types: org.springframework.web.reactive.function.client.WebClient$Builder; SearchStrategy: all) did not find any beans (OnBeanCondition)     WebClientAutoConfiguration.WebClientCodecsConfiguration matched:       - @ConditionalOnBean (types: org.springframework.boot.web.codec.CodecCustomizer; SearchStrategy: all) found beans 'jacksonCodecCustomizer', 'defaultCodecCustomizer' (OnBeanCondition)     WebClientAutoConfiguration.WebClientCodecsConfiguration#exchangeStrategiesCustomizer matched:       - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientCodecCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)   Negative matches: -----------------     ActiveMQAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)     AopAutoConfiguration.AspectJAutoProxyingConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice' (OnClassCondition)     ArtemisAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)     BatchAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)     CacheAutoConfiguration:       Did not match:          - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)     CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)          - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)     CaffeineCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager' (OnClassCondition)     CassandraAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)     CassandraDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)     CassandraReactiveDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)     CassandraReactiveRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)     CassandraRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)     ClientHttpConnectorConfiguration.JettyClient:       Did not match:          - @ConditionalOnClass did not find required class 'org.eclipse.jetty.reactive.client.ReactiveRequest' (OnClassCondition)     ClientHttpConnectorConfiguration.ReactorNetty#reactorClientResourceFactory:       Did not match:          - @ConditionalOnMissingBean (types: org.springframework.http.client.reactive.ReactorResourceFactory; SearchStrategy: all) found beans of type 'org.springframework.http.client.reactive.ReactorResourceFactory' reactorServerResourceFactory (OnBeanCondition)     ConnectionFactoryConfigurations.Generic:       Did not match:          - @ConditionalOnMissingBean (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) found beans of type 'io.r2dbc.spi.ConnectionFactory' connectionFactory (OnBeanCondition)       Matched:          - @ConditionalOnProperty (spring.r2dbc.pool.enabled=false) matched (OnPropertyCondition)     CouchbaseAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)     CouchbaseCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Cluster', 'org.springframework.data.couchbase.CouchbaseClientFactory', 'org.springframework.data.couchbase.cache.CouchbaseCacheManager' (OnClassCondition)     CouchbaseDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)     CouchbaseReactiveDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)     CouchbaseReactiveRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)     CouchbaseRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)     DataSourceAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)     DataSourceTransactionManagerAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)     DispatcherServletAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)     EhCacheCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'net.sf.ehcache.Cache', 'org.springframework.cache.ehcache.EhCacheCacheManager' (OnClassCondition)     ElasticsearchDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.core.ElasticsearchTemplate' (OnClassCondition)     ElasticsearchRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)     EmbeddedLdapAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)     EmbeddedMongoAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings' (OnClassCondition)     EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)     EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)     EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)     ErrorMvcAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)     FlywayAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)     FreeMarkerAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'freemarker.template.Configuration' (OnClassCondition)     GroovyTemplateAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)     GsonAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)     H2ConsoleAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet' (OnClassCondition)     HazelcastAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)     HazelcastCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager' (OnClassCondition)     HazelcastJpaDependencyAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)     HibernateJpaAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.persistence.EntityManager' (OnClassCondition)     HttpEncodingAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)     HttpMessageConvertersAutoConfiguration:       Did not match:          - NoneNestedConditions 1 matched 0 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication found ConfigurableReactiveWebEnvironment (HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)     HypermediaAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.hateoas.EntityModel' (OnClassCondition)     InfinispanCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager' (OnClassCondition)     InfluxDbAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)     IntegrationAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)     JCacheCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required classes 'javax.cache.Caching', 'org.springframework.cache.jcache.JCacheCacheManager' (OnClassCondition)     JdbcRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration' (OnClassCondition)     JdbcTemplateAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)     JerseyAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.ServletRegistration' (OnClassCondition)     JmsAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.jms.Message' (OnClassCondition)     JndiConnectionFactoryAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)     JndiDataSourceAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)     JooqAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)     JpaRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)     JsonbAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)     JtaAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.transaction.Transaction' (OnClassCondition)     KafkaAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)     LdapAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)     LdapRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)     LiquibaseAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)     MailSenderAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.mail.internet.MimeMessage' (OnClassCondition)     MailSenderValidatorAutoConfiguration:       Did not match:          - @ConditionalOnSingleCandidate did not find required type 'org.springframework.mail.javamail.JavaMailSenderImpl' (OnBeanCondition)     MessageSourceAutoConfiguration:       Did not match:          - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)     MongoAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)     MongoDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)     MongoReactiveAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)     MongoReactiveDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)     MongoReactiveRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)     MongoRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)     MultipartAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.MultipartConfigElement' (OnClassCondition)     MustacheAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)     Neo4jDataAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)     Neo4jRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.Neo4jSession' (OnClassCondition)     OAuth2ClientAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)     OAuth2ResourceServerAutoConfiguration:       Did not match:          - not a servlet web application (OnWebApplicationCondition)     ProjectInfoAutoConfiguration#buildProperties:       Did not match:          - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)     ProjectInfoAutoConfiguration#gitProperties:       Did not match:          - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)     QuartzAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)     R2dbcRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnMissingBean (types: org.springframework.data.r2dbc.repository.support.R2dbcRepositoryFactoryBean; SearchStrategy: all) found beans of type 'org.springframework.data.r2dbc.repository.support.R2dbcRepositoryFactoryBean' &amp;accountRepository (OnBeanCondition)       Matched:          - @ConditionalOnClass found required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.data.r2dbc.repository.R2dbcRepository' (OnClassCondition)          - @ConditionalOnProperty (spring.data.r2dbc.repositories.enabled=true) matched (OnPropertyCondition)     RSocketMessagingAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)     RSocketRequesterAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)     RSocketSecurityAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor' (OnClassCondition)     RSocketServerAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)     RSocketStrategiesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'io.rsocket.RSocketFactory' (OnClassCondition)     RabbitAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)     ReactiveElasticsearchRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient' (OnClassCondition)     ReactiveOAuth2ClientAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)     ReactiveOAuth2ResourceServerAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)     ReactiveRestClientAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.reactive.ReactiveRestClients' (OnClassCondition)     ReactiveSecurityAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)     ReactiveUserDetailsServiceAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)     ReactiveWebServerFactoryAutoConfiguration#forwardedHeaderTransformer:       Did not match:          - @ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy' (OnPropertyCondition)     ReactiveWebServerFactoryAutoConfiguration#tomcatReactiveWebServerFactoryCustomizer:       Did not match:          - @ConditionalOnClass did not find required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)     ReactiveWebServerFactoryConfiguration.EmbeddedJetty:       Did not match:          - @ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server' (OnClassCondition)     ReactiveWebServerFactoryConfiguration.EmbeddedTomcat:       Did not match:          - @ConditionalOnClass did not find required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)     ReactiveWebServerFactoryConfiguration.EmbeddedUndertow:       Did not match:          - @ConditionalOnClass did not find required class 'io.undertow.Undertow' (OnClassCondition)     RedisAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)     RedisCacheConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)     RedisReactiveAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory' (OnClassCondition)     RedisRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)     RepositoryRestMvcAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)     RestClientAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)     RestTemplateAutoConfiguration:       Did not match:          - NoneNestedConditions 1 matched 0 did not; NestedCondition on RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication found ConfigurableReactiveWebEnvironment (RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)     Saml2RelyingPartyAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository' (OnClassCondition)     SecurityAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)     SecurityFilterAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)     SendGridAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)     ServletWebServerFactoryAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.ServletRequest' (OnClassCondition)     SessionAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)     SolrAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient' (OnClassCondition)     SolrRepositoriesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)     SpringDataWebAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)     TaskSchedulingAutoConfiguration#taskScheduler:       Did not match:          - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)     ThymeleafAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine' (OnClassCondition)     TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration:       Did not match:          - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)     TransactionAutoConfiguration.TransactionTemplateConfiguration:       Did not match:          - @ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)     UserDetailsServiceAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)     ValidationAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.validation.executable.ExecutableValidator' (OnClassCondition)     WebFluxAutoConfiguration:       Did not match:          - @ConditionalOnMissingBean (types: org.springframework.web.reactive.config.WebFluxConfigurationSupport; SearchStrategy: all) found beans of type 'org.springframework.web.reactive.config.WebFluxConfigurationSupport' org.springframework.web.reactive.config.DelegatingWebFluxConfiguration (OnBeanCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)          - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)     WebFluxAutoConfiguration.ResourceChainCustomizerConfiguration:       Did not match:          - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)          - Ancestor org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)     WebMvcAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)     WebServiceTemplateAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)     WebServicesAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)     WebSocketMessagingAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)     WebSocketReactiveAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)     WebSocketServletAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.servlet.Servlet' (OnClassCondition)     XADataSourceAutoConfiguration:       Did not match:          - @ConditionalOnClass did not find required class 'javax.transaction.TransactionManager' (OnClassCondition)   Exclusions: -----------      None   Unconditional classes: ----------------------      org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration      org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration      org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration      org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration    2020-04-09 10:32:53.992 DEBUG 16036 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : Application failed to start due to an exception  org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1700) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1256) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1210) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:539) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:882) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:67) ~[spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.0.M4.jar:2.3.0.M4] at com.rdgy.fxtrading.fxcm.FxtradingWebApplicationKt.main(FxtradingWebApplication.kt:18) [main/:na]  2020-04-09 10:32:53.992 ERROR 16036 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of method httpHandler in org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig required a bean of type 'org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties' that could not be found.   Action:  Consider defining a bean of type 'org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties' in your configuration.  Disconnected from the target VM, address: '127.0.0.1:53020', transport: 'socket'  Process finished with exit code 1 ```  </body>
		<created>2020-04-09 02:57:44</created>
		<closed>2020-04-10 12:19:04</closed>
	</bug>
	<bug>
		<id>20873</id>
		<title>Properties files in subdirectories are not loaded when one file is empty</title>
		<body>I have a directory structure like  `./config/configmaps/application.yaml` `./config/secrets/application.yaml`  Currently `./config/configmaps/application.yaml` is empty (it does not have any data in it).  In this situation the property file in `./config/secrets` is never loaded.  If I put some data in `./config/configmaps/application.yaml` than the property file in `./config/secrets` gets loaded as I would expect.</body>
		<created>2020-04-07 16:09:56</created>
		<closed>2020-04-08 15:20:06</closed>
	</bug>
	<bug>
		<id>20866</id>
		<title>Test classes annotated with @SpringBootTest with different args attributes share a context when they should not</title>
		<body>See https://github.com/spring-projects/spring-boot/issues/20865 for a little bit of background.</body>
		<created>2020-04-07 08:44:02</created>
		<closed>2020-04-23 17:19:43</closed>
	</bug>
	<bug>
		<id>20828</id>
		<title>Default for spring.kafka.listener.missing-topics-fatal is no longer aligned with Spring Kafka's default</title>
		<body>(Also Boot 2.2).  We changed the default in spring-kafka to `false` in 2.3.4.  This property was added in S-K 2.2 with default `true` but this caused too many problems for the community.  https://docs.spring.io/spring-kafka/docs/2.4.5.RELEASE/reference/html/#configuration-changes </body>
		<created>2020-04-03 18:58:45</created>
		<closed>2020-04-11 07:58:32</closed>
	</bug>
	<bug>
		<id>20827</id>
		<title>Layer index file is malformed when file in jar contains a space</title>
		<body>Regression since 2.3.0.M3. Create a Spring Boot 2.3.0.M4 project from start.spring.io and activate layered jar:  ``` bootJar { layered() } ```  Add a file `src/main/resources/Test File.txt`  I used Gradle wrapper using Gradle 6.3 and Java -- but I suspect same would happen in Maven:  Run * `gradlew clean bootJar` * `java -Djarmode=layertools -jar build\libs\sbm4-gradle-layered-bug-0.0.1-SNAPSHOT.jar list`  Result is exception including the following: ``` Caused by: java.lang.IllegalStateException: Layer index file is malformed         at org.springframework.util.Assert.state(Assert.java:73)         at org.springframework.boot.jarmode.layertools.IndexedLayers.lambda$new$1(IndexedLayers.java:49) ```  Note that layers.idx has an entry with spaces in it: * `application BOOT-INF/classes/Test File.txt`  The code around IndexedLayers.java:49 ``` String[] content = line.split(" "); Assert.state(content.length == 2, "Layer index file is malformed"); this.layers.add(content[0], content[1]); ```  This code performs a split on spaces and asserts that the result is 2 strings. This doesn't work on the layers.idx file where the path has spaces in it.  Suggested fix, set limit parameter on split method to 2:  `line.split(" ", 2)`  This is assuming there is not any other code in the layer management that cares about spaces in the file names...</body>
		<created>2020-04-03 16:37:15</created>
		<closed>2020-04-07 02:18:43</closed>
	</bug>
	<bug>
		<id>20798</id>
		<title>ConfigurationPropertiesBeanDefinitionValidator interferes with EclipseLink load-time weaving</title>
		<body>After upgrading Spring Boot from 2.1 to 2.2 our app failed to start.  Previous working configuration: - Spring Boot: 2.1.12.RELEASE - Spring Framework: 5.1.13.RELEASE - EclipseLink: 2.7.6 (Latest)  New failing configuration: - Spring Boot: 2.2.4.RELEASE - Spring Framework: 5.2.3.RELEASE - EclipseLink: 2.7.6 (Latest)  The symptom - error similar to this:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  An attempt was made to call a method that does not exist. The attempt was made from the following location:      com.company.core.domain.DomainSpecificEntityA._persistence_get_propertyB(DomainSpecificEntityA.java)  The following method did not exist:      'void com.company.core.domain.DomainSpecificEntityA._persistence_checkFetched(java.lang.String)' ```  These methods are normally generated during dynamic weaving performed by EclipseLink (JPA implementation). `org.eclipse.persistence.internal.jpa.weaving.PersistenceWeaver` is that class that performs this weaving.  This `PersistenceWeaver` is registered in `org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo#addTransformer` during container entity manager factory creation.  Comparing the list of classes that got instrumented beween Spring Boot 2.1 and 2.2 revealed that the list was shorter in version 2.2.  The difference was due to the fact that some of the JPA entity classes were already loaded by the classloader, earlier than `PersistenceWeaver`'s class transformation was added to the classloader.  I tracked down the location where these classes were getting loaded first and the stack trace was like this:  ``` &gt; java.lang.Class#getDeclaredConstructors   // once this executes the entity class is available in current classloader, excluding it from later instrumentation &gt;   org.springframework.boot.context.properties.ConfigurationPropertiesBindConstructorProvider#findConstructorBindingAnnotatedConstructor &gt;   org.springframework.boot.context.properties.ConfigurationPropertiesBindConstructorProvider#getBindConstructor(org.springframework.boot.context.properties.bind.Bindable&lt;?&gt;, boolean) &gt;   org.springframework.boot.context.properties.ConfigurationPropertiesBean.BindMethod#forType &gt;   org.springframework.boot.context.properties.ConfigurationPropertiesBeanDefinitionValidator#validate &gt;   ... ```  The bean that was getting validated was similar to this:  ``` // This class is registered as a Spring Bean: public class ProjectManagerImp implements ProjectManager { ... }  // This is our custom interface extending our another (more generic) interface public interface ProjectManager extends Service&lt;Project&gt; { ... }  // This is JPA entity extending an abstract JPA MappedSuperclass. // Both of these get loaded into the classloader, excluding them from further instrumentation public class Project extends PersistentDomainObjectWithMetaData { ... } ```  **Workaround**  Removing `org.springframework.boot.context.properties.ConfigurationPropertiesBeanDefinitionValidator` made our app start and work as expected. We simply added this to our configuration:  ```     @Bean     public BeanDefinitionRegistryPostProcessor offendingValidatorRemovingBeanDefinitionRegistryPostProcessor() {         return new BeanDefinitionRegistryPostProcessor() {             @Override             public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {             }              @Override             public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {                 registry.removeBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBeanDefinitionValidator");             }         };     } ```  **Additional info** - [Git history of `ConfigurationPropertiesBeanDefinitionValidator`](https://github.com/spring-projects/spring-boot/commits/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBeanDefinitionValidator.java) - The issue with which `ConfigurationPropertiesBeanDefinitionValidator` was added in Spring Boot 2.2.0.RC1: https://github.com/spring-projects/spring-boot/issues/17831 - A similar (fixed) bug in Spring Data JPA: [Entity classes loaded before EclipseLink LTW is initialized](https://jira.spring.io/browse/DATAJPA-1250) - maybe a similar fix is needed here too?</body>
		<created>2020-04-01 21:12:28</created>
		<closed>2020-07-14 10:42:10</closed>
	</bug>
	<bug>
		<id>20796</id>
		<title>Unclear default for 'server.tomcat.use-relative-redirects'</title>
		<body>The property `server.tomcat.use-relative-redirects` (backed by the field `org.springframework.boot.autoconfigure.web.ServerProperties.Tomcat#useRelativeRedirects`) has no declared default value. In addition to that, the code which reads the property in `org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer#customize` only applies something to the tomcat context, if an explicit value is configured.  Given this defensive approach I'd expect to get the tomcat default, if no value is configured, but this isn't the case.  `org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#prepareContext` explicitly sets this to false.  I'd suggest to either - not set a value in `org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#prepareContext` in order to use tomcat's default behaviour or - change the type of `org.springframework.boot.autoconfigure.web.ServerProperties.Tomcat#useRelativeRedirects` from `Boolean`(boxed) to `boolean`(unboxed/primitive) and make the default value of `false` more explicit.  see also: #10597 and #4715</body>
		<created>2020-04-01 16:58:48</created>
		<closed>2020-05-06 23:01:02</closed>
	</bug>
	<bug>
		<id>20759</id>
		<title>CreateBootStartScripts causes a warning to be logged with Gradle 6.4</title>
		<body>With thanks to @jjohannes:  &gt; This is about the `CreateBootStartScripts` task and Gradle 6.4: The task subclasses `CreateStartScripts` to make the `mainClassName` of `CreateStartScripts `optional. I think the fact that it was not optional is actually a long standing bug in Gradle (it was marked with Nullable already). So what you did there back then was a good workaround.  &gt; In Gradle 6.4, there will be a new property, using the lazy configuration API, called `mainClass` which is correctly marked as `@Optional`. `mainClassName` will become `@Internal` as it is backed by the new property. Now if you run spring boot’s `:bootStartsScripts` with 6.4 you will see a warning (you can see this with the current nightly):  ```Task :bootStartScripts Property 'mainClassName' is annotated with @Optional that is not allowed for @Internal properties. ```  &gt; I think you do not need the `CreateBootStartScripts` subclass anymore and can use Gradle’s `CreateStartScripts` directly with 6.4. You could do a Gradle version check and decide which task implementation to use. You can also keep this around for now and live with the warning until you decide to drop support for 5.x.</body>
		<created>2020-04-01 07:34:47</created>
		<closed>2020-05-06 16:37:00</closed>
	</bug>
	<bug>
		<id>20745</id>
		<title>spring.config.additional-location is ignored when spring.config.location is configured</title>
		<body>This issue relates to #20743.  When we fixed https://github.com/spring-projects/spring-boot/issues/10595, I don't think we considered a scenario where both `spring.config.additional-location` and `spring.config.location` are configured. As things stand, when `spring.config.location` is configured, `spring.config.additional-location` is ignored. I'm not sure that this is the right behaviour.  The documentation for `spring.config.location` states that its locations "replace the default locations". The documentation for `spring.config.addition-location` states that its locations "are used in addition to the default locations". Given this description of the behaviour, I think it's reasonable to expect the additional locations to be used as well as those that have replaced the defaults.</body>
		<created>2020-03-31 12:20:20</created>
		<closed>2020-04-21 00:10:54</closed>
	</bug>
	<bug>
		<id>20726</id>
		<title>Cassandra health indicator never reports version attribute</title>
		<body>Forward port of issue #20719 to 2.3.0.M4.</body>
		<created>2020-03-30 11:08:27</created>
		<closed>2020-03-30 11:08:48</closed>
	</bug>
	<bug>
		<id>20725</id>
		<title>Cassandra health indicator never report version attribute</title>
		<body>Forward port of issue #20719 to 2.2.7.</body>
		<created>2020-03-30 11:02:59</created>
		<closed>2020-03-30 11:08:48</closed>
	</bug>
	<bug>
		<id>20719</id>
		<title>Cassandra health indicator never reports version attribute</title>
		<body>See https://github.com/spring-projects/spring-boot/pull/20709#issuecomment-605461762</body>
		<created>2020-03-29 16:47:06</created>
		<closed>2020-03-30 11:08:48</closed>
	</bug>
	<bug>
		<id>20718</id>
		<title>ReactiveCassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>Forward port of issue #20713 to 2.3.0.M4.</body>
		<created>2020-03-29 16:43:55</created>
		<closed>2020-03-29 16:45:23</closed>
	</bug>
	<bug>
		<id>20717</id>
		<title>ReactiveCassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>Forward port of issue #20713 to 2.2.7.</body>
		<created>2020-03-29 16:39:46</created>
		<closed>2020-03-29 16:45:23</closed>
	</bug>
	<bug>
		<id>20715</id>
		<title>Liquibase should be able to execute with only spring-jdbc on the classpath</title>
		<body>Spring Boot version:  2.3.0.M3  I have created a small project to test r2dbc work with spring boot: https://github.com/xp-vit/r2dbc-liquibase/  When I try to start it I get:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'liquibase' defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Unsatisfied dependency expressed through method 'liquibase' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseType at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:539) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at com.example.r2dbcliquibase.R2dbcLiquibaseApplication.main(R2dbcLiquibaseApplication.java:10) ~[main/:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseType at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1320) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1287) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:885) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] ... 20 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseType at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:216) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1312) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] ... 32 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseType at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.&lt;clinit&gt;(EmbeddedDatabaseConnection.java:51) ~[spring-boot-2.3.0.M3.jar:2.3.0.M3] at org.springframework.boot.autoconfigure.jdbc.DataSourceProperties.&lt;init&gt;(DataSourceProperties.java:153) ~[spring-boot-autoconfigure-2.3.0.M3.jar:2.3.0.M3] at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:na] at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:na] at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:na] at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490) ~[na:na] at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:203) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] ... 34 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) ~[na:na] at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na] at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na] ... 41 common frames omitted ```   I understand that this can be theoretically solved with "spring-boot-starter-data-jdbc", but I was hoping to avoid it, because it brings unnecessary code + forces me to configure DataSource of exclude it from autoconfiguration.</body>
		<created>2020-03-28 22:28:55</created>
		<closed>2020-03-31 11:19:53</closed>
	</bug>
	<bug>
		<id>20714</id>
		<title>Custom converters cannot be used when creating endpoint-related beans due to eager initialization triggered by ServletEndpointRegistrar</title>
		<body>This is related to the issues https://github.com/spring-projects/spring-boot/issues/6222 and https://github.com/spring-projects/spring-boot/issues/12148  It affects Spring Boot version 2.2.x  The behavior of configuration and value binding is still not completly consistent. The use of a custom `Converter` registered as bean or inside a `conversionService` bean only works in the following cases: - The configuration value will be bound to a configuration bean annotated with `@ConfigurationProperties` - The configuration value will be injected to bean via `@Value` annotation if the bean is created after complete refresh of the `ApplicationContext`.  It does not work, if the configuration value if injected into a bean with `@Value` if the bean is created during "refresh phase" of the `ApplicationContext`. This applies for example to all beans created during the initialization of the Tomcat server in a `ServletWebServerApplicationContext`  I provided a test project which contains multiple test cases showcasing the inconsistent behavior: Test scenario 1: `HealthIndicator` bean created during refresh with configuration object =&gt; SUCCESS Test scenario 2: `HealthIndicator` bean created during refresh with constructor injection via `@Value` =&gt; FAIL Test scenario 3: `@Service` bean created after refresh with constructor injection via `@Value` =&gt; SUCCESS  [spring-boot-converter-bug.zip](https://github.com/spring-projects/spring-boot/files/4397871/spring-boot-converter-bug.zip)  Please also note that the failure of scenario 2 can only be detected in an integration test if a "real" `webEnvironment`, e.g. `RANDOM_PORT`, is used. In a mocked web environment, i.e. without actually starting a Tomcat, the problem will not occur.</body>
		<created>2020-03-28 20:53:23</created>
		<closed>2020-05-14 02:12:33</closed>
	</bug>
	<bug>
		<id>20713</id>
		<title>ReactiveCassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>See https://github.com/spring-projects/spring-boot/pull/20709#issuecomment-605461762</body>
		<created>2020-03-28 15:25:02</created>
		<closed>2020-03-29 16:45:22</closed>
	</bug>
	<bug>
		<id>20712</id>
		<title>CassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>Forward port of issue #20709 to 2.3.0.M4.</body>
		<created>2020-03-28 15:10:04</created>
		<closed>2020-03-28 15:10:25</closed>
	</bug>
	<bug>
		<id>20711</id>
		<title>CassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>Forward port of issue #20709 to 2.2.7.</body>
		<created>2020-03-28 15:05:47</created>
		<closed>2020-03-28 15:10:25</closed>
	</bug>
	<bug>
		<id>20694</id>
		<title>spring.security.oauth2.resourceserver.jwt.jws-algorithm is ignored when auto-configuring ReactiveJwtDecoder</title>
		<body>Forward port of issue #20681 to 2.3.0.M4.</body>
		<created>2020-03-26 23:23:17</created>
		<closed>2020-03-26 23:23:39</closed>
	</bug>
	<bug>
		<id>20665</id>
		<title>MockitoPostProcessor can trigger early initialization of factory beans</title>
		<body>I'm working on a SpringBoot project which also uses Spring Data Gemfire, so I'm posting here hoping it is the correct place.  In a `SpringBootTest` when I use `MockBean` with a `cache-config.xml` containing `scope="global"`, I get the following exception:  &gt; org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'prog': Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope'; nested exception is java.lang.IllegalStateException: **Cannot convert value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope'** for property 'scope': **no matching editors or conversion strategy found**  Spring Data Gemfire should register the `ScopeConverter `(in `CustomEditorBeanFactoryPostProcessor`) which matches case-insensitive the xml value with the Scope enum. This actually happens when running the application. But not (correctly) in tests using `MockBean`.  Full reproducer: https://github.com/antoniomacri/spring-boot-sdg-mockbean  Complete stacktrace: ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'prog': Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope': no matching editors or conversion strategy found at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:828) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391) at org.springframework.boot.SpringApplication.run(SpringApplication.java:312) at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope': no matching editors or conversion strategy found at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:590) at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:604) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:219) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1723) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1679) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1426) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592) ... 38 more Caused by: java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'org.apache.geode.cache.Scope' for property 'scope': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:262) at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:585) ... 44 more  ``` </body>
		<created>2020-03-24 19:12:21</created>
		<closed>2020-04-22 21:37:17</closed>
	</bug>
	<bug>
		<id>20616</id>
		<title>KafkaAutoConfiguration should back off when a bean of type ConcurrentKafkaListenerContainerFactory is found</title>
		<body>Forward port of issue #19221 to 2.3.0.M4.</body>
		<created>2020-03-23 11:57:11</created>
		<closed>2020-03-23 11:57:22</closed>
	</bug>
	<bug>
		<id>20615</id>
		<title>KafkaAutoConfiguration should back off when a bean of type ConcurrentKafkaListenerContainerFactory is found</title>
		<body>Forward port of issue #19221 to 2.2.6.</body>
		<created>2020-03-23 11:56:01</created>
		<closed>2020-03-23 11:57:22</closed>
	</bug>
	<bug>
		<id>20612</id>
		<title>Jwt Decoder signature algorithm configuration is not used in combination with public-key-file</title>
		<body>Forward port of issue #20523 to 2.3.0.M4.</body>
		<created>2020-03-23 10:18:01</created>
		<closed>2020-03-23 10:18:12</closed>
	</bug>
	<bug>
		<id>20600</id>
		<title>Ignore trailing slash should not apply to single character URIs</title>
		<body>Forward port of issue #20536 to 2.3.0.M4.</body>
		<created>2020-03-21 14:15:34</created>
		<closed>2020-03-21 14:15:46</closed>
	</bug>
	<bug>
		<id>20544</id>
		<title>ApplicationHome does not work correctly with paths that contain spaces</title>
		<body>Forward port of issue #20531 to 2.3.0.M4.</body>
		<created>2020-03-17 12:53:11</created>
		<closed>2020-03-17 12:58:26</closed>
	</bug>
	<bug>
		<id>20543</id>
		<title>ApplicationHome does not work correctly with paths that contain spaces</title>
		<body>Forward port of issue #20531 to 2.2.6.</body>
		<created>2020-03-17 12:50:59</created>
		<closed>2020-03-17 12:58:26</closed>
	</bug>
	<bug>
		<id>20536</id>
		<title>Ignore trailing slash should not apply to single character URIs</title>
		<body>The fix for #18207 chops off the trailing slash of URIs sent in the "http.server.requests" metric. It's doing it for root URLs, too - meaning that "/" becomes "". CloudWatch does not like this. It responds with: ``` The parameter MetricData.member.19.Dimensions.member.5.Value is required. (Service: AmazonCloudWatch; Status Code: 400; Error Code: MissingParameter; Request ID: 2c440f89-401b-4c8f-bd7c-0b1051ee4a0a) ``` Would it make sense to leave the root URI alone? </body>
		<created>2020-03-16 23:08:12</created>
		<closed>2020-03-21 14:15:45</closed>
	</bug>
	<bug>
		<id>20531</id>
		<title>ApplicationHome does not work correctly with paths that contain spaces</title>
		<body>I have a project that uses the `getSource()` of the `ApplicationHome`, and today I tested the project in another pc using windows 10, the path of the folder where the project is, contains a space and `getSource` returns null.  The reason is because the condition `source.exists()` returns `false` since the space is replaced by `%20` in the url and a file is created using `new File(location.getPath())`.  I don't know the implications that would have to change `getPath` to `toURI` or just replacing the `%20` by spaces, but at least at first hand, it seems like a possible simple solution.</body>
		<created>2020-03-16 01:40:05</created>
		<closed>2020-03-17 12:58:26</closed>
	</bug>
	<bug>
		<id>20503</id>
		<title>DevTools triggers eager initialization of jaxws-client defined in XML config</title>
		<body>Forward port of issue #20430 to 2.3.0.M3.</body>
		<created>2020-03-11 14:03:10</created>
		<closed>2020-03-11 14:04:00</closed>
	</bug>
	<bug>
		<id>20502</id>
		<title>DependencyCustomizer ifAllResourcesPresent adds modules if any resources are present</title>
		<body>Forward port of issue #20418 to 2.2.6.</body>
		<created>2020-03-11 13:17:30</created>
		<closed>2020-03-11 13:17:54</closed>
	</bug>
	<bug>
		<id>20501</id>
		<title>DependencyCustomizer ifAllResourcesPresent adds modules if any resources are present</title>
		<body>Forward port of issue #20418 to 2.2.6.</body>
		<created>2020-03-11 13:05:02</created>
		<closed>2020-03-11 13:17:53</closed>
	</bug>
	<bug>
		<id>20500</id>
		<title>TomcatReactiveWebServerFactory does not call getTomcatWebServer to create the TomcatWebServer</title>
		<body>Forward port of issue #20386 to 2.3.0.M3.</body>
		<created>2020-03-11 09:45:00</created>
		<closed>2020-03-11 09:45:35</closed>
	</bug>
	<bug>
		<id>20499</id>
		<title>TomcatReactiveWebServerFactory does not call getTomcatWebServer to create the TomcatWebServer</title>
		<body>Forward port of issue #20386 to 2.2.6.</body>
		<created>2020-03-11 09:34:30</created>
		<closed>2020-03-11 09:41:51</closed>
	</bug>
	<bug>
		<id>20441</id>
		<title>Dependency management for Cassandra Driver's query builder module uses the wrong artifact ID</title>
		<body>We're currently managing `java-drive-query-builder`. It should be `java-driver-query-builder`</body>
		<created>2020-03-10 14:20:07</created>
		<closed>2020-03-10 20:29:37</closed>
	</bug>
	<bug>
		<id>20430</id>
		<title>DevTools triggers eager initialization of jaxws-client defined in XML config</title>
		<body>When including springboot-devtools in my java applications, CXF JAX-WS clients being initialized with XML config were stopped working since address being populated with the `${placeholder}` instead of real value defined in properties.  For me, this is caused by `DevToolsDataSourceAutoConfiguration` which is calling `org.springframework.beans.factory.ListableBeanFactory.getBeanNamesForType(Class&lt;?&gt;)` (line 164), making eagerInit called before properties are parsed.  Currently under Java 8 using SpringBoot 2.0.9 (Spring 5.0.13). Same code exists in current github code.  Could you please provide a fix for this. Adding the following gives me a fix but I don't want to add this on every java app...  `@SpringBootApplication(exclude = { org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.class })`</body>
		<created>2020-03-09 12:22:19</created>
		<closed>2020-03-11 14:03:59</closed>
	</bug>
	<bug>
		<id>20418</id>
		<title>DependencyCustomizer ifAllResourcesPresent adds modules if any resources are present</title>
		<body>I found that the logic of the `ifAllResourcesPresent` and  `ifAnyResourcesPresent` methods is exactly the same https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L131  `  /**  * Create a nested {@link DependencyCustomizer} that only applies if the specified  * paths are on the class path.  * @param paths the paths to test  * @return a nested {@link DependencyCustomizer}  */ public DependencyCustomizer ifAllResourcesPresent(String... paths) { return new DependencyCustomizer(this) { @Override protected boolean canAdd() { for (String path : paths) { try { return DependencyCustomizer.this.loader.getResource(path) != null; } catch (Exception ex) { // swallow exception and continue } } return DependencyCustomizer.this.canAdd(); } }; }  /**  * Create a nested {@link DependencyCustomizer} that only applies at least one of the  * specified paths is on the class path.  * @param paths the paths to test  * @return a nested {@link DependencyCustomizer}  */ public DependencyCustomizer ifAnyResourcesPresent(String... paths) { return new DependencyCustomizer(this) { @Override protected boolean canAdd() { for (String path : paths) { try { return DependencyCustomizer.this.loader.getResource(path) != null; } catch (Exception ex) { // swallow exception and continue } } return DependencyCustomizer.this.canAdd(); } }; } `</body>
		<created>2020-03-08 03:56:15</created>
		<closed>2020-03-11 13:17:53</closed>
	</bug>
	<bug>
		<id>20386</id>
		<title>TomcatReactiveWebServerFactory does not call getTomcatWebServer to create the TomcatWebServer</title>
		<body>`TomcatReactiveWebServerFactory.getWebServer(HttpHandler)` doesn't delegate to `TomcatReactiveWebServerFactory.getTomcatWebServer(Tomcat)` and instead creates the `TomcatWebServer` instance directly. This makes the javadoc for `getTomcatWebServer(Tomcat)` misleading:  &gt; Factory method called to create the `TomcatWebServer`. Subclasses can override this method to return a different `TomcatWebServer` or apply additional processing to the `Tomcat` server.</body>
		<created>2020-03-04 14:03:31</created>
		<closed>2020-03-11 09:41:50</closed>
	</bug>
	<bug>
		<id>20350</id>
		<title>ValidationHandler no longer works with certain map keys</title>
		<body>Just upgraded Spring Boot from 2.1.4.RELEASE to 2.2.5.RELEASE and my application.yml doesn't validate any longer.  For example, in this yaml, the `itemOne` works in previous version but fails validation now.      test:       items:         itemOne:           COLOR: RED         ITEM2:           COLOR: BLUE   It seems any nested map key with uppercase letters will fail. Tried to debug and found `getName()` in `ValidationBindHandler` mangles the key into      test.items[item-one].color     test.items[-i-t-e-m2].color  This is apparently incorrect.  The code to reproduce the error is at https://github.com/zzcoder/spring-validation-bug </body>
		<created>2020-02-28 23:02:35</created>
		<closed>2020-09-13 18:03:34</closed>
	</bug>
	<bug>
		<id>20349</id>
		<title>ConnectionPool metrics are not exposed with `r2dbc:pool:` based URLs</title>
		<body>See https://github.com/spring-projects-experimental/spring-boot-r2dbc/issues/80 for a description of the problem.  It looks like that when a `ConnectionFactory` is exposed as a `@Bean` (while being a `ConnectionPool` effectively, `@ConditionalOnBean(ConnectionPool.class)` does not match. I don't know if that's to be expected but that vaguely rings a bell.  We could relax the condition and then only handles `ConnectionPool` in the current registration code.</body>
		<created>2020-02-28 20:30:10</created>
		<closed>2020-03-04 09:04:18</closed>
	</bug>
	<bug>
		<id>20307</id>
		<title>Binding to collection fails with unbound elements error if collection overridden in another property source with smaller number of elements</title>
		<body>Forward port of issue #20134 to 2.3.0.M3.</body>
		<created>2020-02-24 23:02:27</created>
		<closed>2020-02-24 23:02:59</closed>
	</bug>
	<bug>
		<id>20306</id>
		<title>Binding to collection fails with unbound elements error if collection overridden in another property source with smaller number of elements</title>
		<body>Forward port of issue #20134 to 2.2.5.</body>
		<created>2020-02-24 23:01:51</created>
		<closed>2020-02-24 23:02:59</closed>
	</bug>
	<bug>
		<id>20244</id>
		<title>Unlike all other Maven properties, spring-boot.run.arguments on the command line takes precedence over the pom</title>
		<body>Forward port of issue #20024 to 2.3.0.M3.</body>
		<created>2020-02-20 20:45:45</created>
		<closed>2020-02-26 22:50:35</closed>
	</bug>
	<bug>
		<id>20243</id>
		<title>spring-boot-starter-rsocket pom contains security dependencies</title>
		<body>It appears that as of [spring-boot-starter-rsocket-2.3.0.M1.pom](https://repo.spring.io/libs-snapshot/org/springframework/boot/spring-boot-starter-rsocket/2.3.0.M1/spring-boot-starter-rsocket-2.3.0.M1.pom) it contains Spring Security dependencies that are being pulled in transitively. The dependencies are in 2.3.0.M2 and the latest 2.3.0.BUILD-SNAPSHOT:  ```xml &lt;dependency&gt;   &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;   &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;   &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;   &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;   &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; ```  This means that simply adding the `spring-boot-starter-rsocket` triggers the Spring Boot auto configuration for Security.  This was originally brought to my attention because @joshlong was having difficulties doing a demo and asked for my help. I haven't investigated the scope of the problem, so it would probably be good to check if other dependencies are impacted.</body>
		<created>2020-02-20 18:13:40</created>
		<closed>2020-02-20 22:21:46</closed>
	</bug>
	<bug>
		<id>20231</id>
		<title>Metrics are not recorded for nested requests made with RestTemplate</title>
		<body>We need to back port the fix for #19464 to 2.2.x.</body>
		<created>2020-02-19 15:56:13</created>
		<closed>2020-02-20 22:53:25</closed>
	</bug>
	<bug>
		<id>20229</id>
		<title>XADataSourceAutoConfiguration is difficult to use with DB2XADataSource as it does not have a URL property</title>
		<body>Spring Boot version: all  When using an `XADataSource` which has no property `url` to be set, the `XADataSourceAutoConfiguration` will always do [source.put("url", this.properties.determineUrl());](https://github.com/spring-projects/spring-boot/blob/fc3fb7fb449165903ce907d1846cfc653b3a2ef3/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfiguration.java#L108) which fails when no url is provided.  Since there is no `url` property to be set on the `XADataSource` we use and all required configuration properties are already located in the `DataSourceProperties.Xa#getProperties` I don't see why this should fail. For a simple `DataSource` build by `dataSourceProperties().initializeDataSourceBuilder().build()` it is valid to fail because it depends on the `url`.  I would prefer to have a method which is able to return `null` like `DataSourceProperties#determineUsername` and `DataSourceProperties#determinePassword` to be used in the `XADataSourceAutoConfiguration`. Now with property `spring.datasource.url=just to be able to start` we are able to start, although that property is not used for the `XADataSource`</body>
		<created>2020-02-19 09:28:10</created>
		<closed>2020-07-29 13:11:17</closed>
	</bug>
	<bug>
		<id>20218</id>
		<title>DataSource url property is ignored when there is no connection pool</title>
		<body>Forward port of issue #19192 to 2.3.0.M3.</body>
		<created>2020-02-18 16:00:15</created>
		<closed>2020-02-18 16:00:30</closed>
	</bug>
	<bug>
		<id>20217</id>
		<title>DataSource url property is ignored when there is no connection pool</title>
		<body>Forward port of issue #19192 to 2.2.5.</body>
		<created>2020-02-18 15:59:11</created>
		<closed>2020-02-18 16:00:30</closed>
	</bug>
	<bug>
		<id>20185</id>
		<title>BuildInfo task not run in Gradle project when project's version number changes</title>
		<body>Forward port of issue #20135 to 2.3.0.M3.</body>
		<created>2020-02-14 14:22:25</created>
		<closed>2020-02-14 14:44:41</closed>
	</bug>
	<bug>
		<id>20183</id>
		<title>BuildInfo task not run in Gradle project when project's version number changes</title>
		<body>Forward port of issue #20135 to 2.2.5.</body>
		<created>2020-02-14 11:48:30</created>
		<closed>2020-02-14 14:44:41</closed>
	</bug>
	<bug>
		<id>20155</id>
		<title>Remove plugin management for "infinispan-protocol-parser-generator-maven-plugin"</title>
		<body>This plugin is no longer published with new infinispan releases.</body>
		<created>2020-02-13 08:36:11</created>
		<closed>2020-02-13 09:17:10</closed>
	</bug>
	<bug>
		<id>20150</id>
		<title>Caching of ProducesRequestCondition in EndpointHandlerMapping may break custom HandlerMapping or ContentTypeResolver arrangements</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt;  Due to the optimization of `ProducesRequestCondition`, HandlerMapping caches MediaTypesAttribute. However, `WebFluxEndpointHandlerMapping` and `CloudFoundryWebFluxEndpointHandlerMapping` do not delete the cached MediaTypesAttribute and affect the resolution of MediaTypes of other HandlerMappings. ( On the other hand, the class that inherits `RequestMappingHandlerMapping` deletes the cache.)  These issues are occurring not only in Spring Webflux's HandlerMapping but also in Spring MVC's HandlerMapping.  To solve this problem, I think you need one of the following measures: Add a process to delete the cache at the end of HandlerMapping to `AbstractWebFluxEndpointHandlerMapping` and `AbstractWebMvcEndpointHandlerMapping`. Move the process of deleting the cache at the end of HandlerMapping from `RequestMappingHandlerMapping` to `RequestMappingInfoHandlerMapping` of the parent class.  If my proposed solution is correct, I am ready to create a PR.  ### Related URL  - https://github.com/spring-projects/spring-framework/issues/23091 - https://github.com/spring-projects/spring-framework/commit/0757eaee9deab3c75229c91cf0a6999b9bb563e9 </body>
		<created>2020-02-13 05:57:19</created>
		<closed>2020-02-17 10:36:11</closed>
	</bug>
	<bug>
		<id>20135</id>
		<title>BuildInfo task not run in Gradle project when project's version number changes</title>
		<body>If I disable the time property, the Gradle BuildInfo task indicates that it is up to date even when the project version number changes.   In our configuration, we have changed the build info configuration to exclude the time property as suggested in the documentation: ``` springBoot {     buildInfo {         properties {              time = null         }     } } ``` Now, when we alter the project version number, this task always indicates that it is up to date and so the incorrect version number is included in the build-info files. Looking at the code, I suspect the problem is that the `BuildInfoProperties` class has a null value for the version number by default, and so each time the input is checked, Gradle only sees this null value. It never changes to reflect the changing version number.  Using version 2.2.2.RELEASE of the plugin. </body>
		<created>2020-02-12 07:02:01</created>
		<closed>2020-02-14 14:44:40</closed>
	</bug>
	<bug>
		<id>20134</id>
		<title>Binding to collection fails with unbound elements error if collection overridden in another property source with smaller number of elements</title>
		<body>As was suggested in https://github.com/spring-projects/spring-boot/issues/16290, creating this follow up issue for a bit different flavor of the same problem. In the original issue, a list of properties contained strings and that case seems to be fixed now, but when we use some custom object instead of string - the problem is still reproducible.  Here is a [sample application](https://github.com/anatoliy-balakirev/spring-boot-configurationproperties-bug) to reproduce an issue.   Running `mvn clean test` fails with: ``` [ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.156 s &lt;&lt;&lt; FAILURE! - in com.example.demo.DemoApplicationTests [ERROR] contextLoads  Time elapsed: 0.016 s  &lt;&lt;&lt; ERROR! java.lang.IllegalStateException: Failed to load ApplicationContext Caused by: org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'demoApplication.DemoProperties': Could not bind properties to 'DemoApplication.DemoProperties' : prefix=demo-properties, ignoreInvalidFields=false, ignoreUnknownFields=false; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'demo-properties' to com.example.demo.DemoApplication$DemoProperties Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'demo-properties' to com.example.demo.DemoApplication$DemoProperties Caused by: org.springframework.boot.context.properties.bind.UnboundConfigurationPropertiesException: The elements [demo-properties.nested-data[2].data] were left unbound. ``` While starting the application itself works fine.  This is because in the `application-test.yml` I have a list of properties (`nested-data`) overridden with a list, smaller than the original one in the `application.yml`  According to the [documentation](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-complex-type-merge) I would expect the list from the `application-test.yml` to just override one from the `application.yml`. Now it looks like it defines a number of elements based on the `application.yml` then tries to fill those three elements and fails because there is no data for the third one (because in the `application-test.yml` we have only two). Adding the third element to the `application-test.yml` fixes the problem.</body>
		<created>2020-02-12 06:21:42</created>
		<closed>2020-02-24 23:02:58</closed>
	</bug>
	<bug>
		<id>20133</id>
		<title>No error message when server.ssl.keyAlias doesn't match an entry</title>
		<body>Forward port of issue #19202 to 2.3.0.M2.</body>
		<created>2020-02-12 03:04:27</created>
		<closed>2020-02-12 03:04:45</closed>
	</bug>
	<bug>
		<id>20132</id>
		<title>No error message when server.ssl.keyAlias doesn't match an entry</title>
		<body>Forward port of issue #19202 to 2.2.5.</body>
		<created>2020-02-12 03:02:37</created>
		<closed>2020-02-12 03:04:44</closed>
	</bug>
	<bug>
		<id>20130</id>
		<title>JSON keys containing a dot from CF environment are not handled as a single path segment</title>
		<body>Forward port of issue #18915 to 2.3.0.M2.</body>
		<created>2020-02-11 22:54:41</created>
		<closed>2020-02-11 22:54:57</closed>
	</bug>
	<bug>
		<id>20129</id>
		<title>JSON keys containing a dot from CF environment are not handled as a single path segment</title>
		<body>Forward port of issue #18915 to 2.2.5.</body>
		<created>2020-02-11 22:53:55</created>
		<closed>2020-02-11 22:54:56</closed>
	</bug>
	<bug>
		<id>20128</id>
		<title>Actuator triggers an early post processor initialization</title>
		<body>springboot 2.2.4-RELEASE * pom.xml ``` &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;!-- database start --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;mysql&lt;/groupId&gt;             &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;!-- database end --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;         &lt;/dependency&gt;      &lt;/dependencies&gt; ``` * application.yml ``` spring:   datasource:     url: jdbc:mysql://127.0.0.1:3306/auth8?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai     username: root     password: 123456 ```` * bootstrap.java ``` @SpringBootApplication public class SessionBootstrap {      public static void main(String[] args) {         SpringApplication.run(SessionBootstrap.class, args);     } } ``` * But why ??? ``` 2020-02-12 00:54:42.986  INFO 95047 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2020-02-12 00:54:43.359  INFO 95047 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) ```  </body>
		<created>2020-02-11 16:50:12</created>
		<closed>2020-02-11 19:11:09</closed>
	</bug>
	<bug>
		<id>20125</id>
		<title>Auto-configured JMS ConnectionFactory should be named jmsConnectionFactory for compatibility with Spring Integration</title>
		<body>Forward port of issue #19565 to 2.3.0.M2.</body>
		<created>2020-02-11 15:27:46</created>
		<closed>2020-02-11 15:28:08</closed>
	</bug>
	<bug>
		<id>20118</id>
		<title>Unnecessary use of / in classpath:/db/changelog/db.changelog-master.yaml prevents Liquibase from identifying that a change set has already been applied when run from the command line</title>
		<body>Forward port of issue #19926 to 2.3.0.M2.</body>
		<created>2020-02-11 09:31:13</created>
		<closed>2020-02-11 09:31:25</closed>
	</bug>
	<bug>
		<id>20117</id>
		<title>Unnecessary use of / in classpath:/db/changelog/db.changelog-master.yaml prevents Liquibase from identifying that a change set has already been applied when run from the command line</title>
		<body>Forward port of issue #19926 to 2.2.5.</body>
		<created>2020-02-11 09:30:28</created>
		<closed>2020-02-14 09:22:30</closed>
	</bug>
	<bug>
		<id>20116</id>
		<title>Conditions evaluation report mistakenly prints '@ConditionalOnBean' for negative matches</title>
		<body>Forward port of issue #19948 to 2.3.0.M2.</body>
		<created>2020-02-11 08:31:18</created>
		<closed>2020-02-11 08:32:10</closed>
	</bug>
	<bug>
		<id>20114</id>
		<title>Health group with composite contributor results in 404</title>
		<body>Forward port of issue #19974 to 2.3.0.M2.</body>
		<created>2020-02-11 01:11:46</created>
		<closed>2020-02-11 01:12:00</closed>
	</bug>
	<bug>
		<id>20037</id>
		<title>Actuator 'loggers' endpoint does not return all loggers for log4j</title>
		<body>Replicated on SB 1.5.15 through SB 2.2.4  Calling `/actuator/loggers` returns 9 entries instead of the 412 returned by the default logback implementation. It appears that anything with `"configuredLevel": null,` is excluded from the log4j output. Basic log4j project with the `loggers` endpoint exposed attached. Run with `./gradle bootRun` [lo4j-test.zip](https://github.com/spring-projects/spring-boot/files/4155321/lo4j-test.zip) </body>
		<created>2020-02-04 18:59:15</created>
		<closed>2020-06-11 01:52:54</closed>
	</bug>
	<bug>
		<id>20030</id>
		<title>Requests are auto-timed when autotime.enabled is set to false</title>
		<body>Forward port of issue #19981 to 2.3.0.M2.</body>
		<created>2020-02-04 09:09:26</created>
		<closed>2020-02-04 09:09:40</closed>
	</bug>
	<bug>
		<id>20029</id>
		<title>Spring Webflux ignores message of custom exception when annotated with @ResponseStatus</title>
		<body>Forward port of issue #19901 to 2.3.0.M2.</body>
		<created>2020-02-04 08:20:24</created>
		<closed>2020-02-04 08:20:37</closed>
	</bug>
	<bug>
		<id>20028</id>
		<title>Spring Webflux ignores message of custom exception when annotated with @ResponseStatus</title>
		<body>Forward port of issue #19901 to 2.2.5.</body>
		<created>2020-02-04 08:19:50</created>
		<closed>2020-02-04 08:20:36</closed>
	</bug>
	<bug>
		<id>20024</id>
		<title>Unlike all other Maven properties, spring-boot.run.arguments on the command line takes precedence over the pom</title>
		<body>**Description:** the `spring-boot.run.jvmArguments` does not take precedence over the `&lt; systemPropertyVariables&gt;` map when there is a `&lt;jvmArguments&gt;` section defined for the `spring-boot-maven-plugin`.  **Documented behavior:** According to the https://docs.spring.io/spring-boot/docs/current/maven-plugin/examples/run-system-properties.html when the `spring-boot.run.jvmArguments` parameter is provided for the `spring-boot:run` command the parameter takes precedence and overwrites the system properties defined within the `&lt;systemPropertyVariables&gt;` XML configuration. I would expect that the presence of the `jvmArguments` section does not influence the documented behavior.  **Steps to reproduce:** There is a sample application which demonstrates non-documented (faulty?) behavior located at https://github.com/rawfg/maven-jvmargs.  1. The sample application prints the system properties starting with the `xyz` and by default there are [two system properties](https://github.com/rawfg/maven-jvmargs/blob/master/pom.xml#L45-L50) configured: one comes from the `&lt;jvmArguments&gt;` section and the other one comes from the `&lt; systemPropertyVariables&gt;` section.  2. When the application is run from the command line via the command: ```bash mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Dxyz.MavenSystemProperty='cmd-system-property'"  ```  the output is (system properties configured in the pom.xml): ```bash xyz.MavenSystemProperty=maven-system-property xyz.MavenJvmProperty=maven-jvm-property ```  3. When the [`&lt;jvmArguments&gt;` section](https://github.com/rawfg/maven-jvmargs/blob/master/pom.xml#L46) is commented out the application behaves as it was documented, so running the command: ```bash mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Dxyz.MavenSystemProperty='cmd-system-property'"  ``` results in the output: ```bash xyz.MavenSystemProperty=cmd-system-property ``` 4. I tested it with the Spring Boot version `2.2.4` but I've downgraded to the `2.1.7` version and I observed the same outcome.  **Expected behavior:** - `-Dspring-boot.run.jvmArguments` always works as documented (step 3) or - the exception is documented in the https://docs.spring.io/spring-boot/docs/current/maven-plugin/examples/run-system-properties.html </body>
		<created>2020-02-03 18:41:32</created>
		<closed>2020-02-25 19:49:44</closed>
	</bug>
	<bug>
		<id>20003</id>
		<title>spring boot cli - rabbit.groovy fails with error</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; When attempting to run [rabbit.groovy](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-cli/samples/rabbit.groovy) with spring cli, it fails with this error  ``` $ spring run rabbit.groovy startup failed: file:rabbit.groovy: 29: You cannot create an instance from the abstract interface 'org.springframework.amqp.rabbit.annotation.Queue'.  @ line 29, column 9.            new Queue("spring-boot", false)            ^  1 error ```  Spring CLI Version ``` $ spring --version Spring CLI v2.2.3.RELEASE ```</body>
		<created>2020-02-01 23:16:10</created>
		<closed>2020-02-04 20:23:56</closed>
	</bug>
	<bug>
		<id>19974</id>
		<title>Health group with composite contributor results in 404</title>
		<body>I would like the ability to assign a `CompositeHealthContributor` to a Health Group via configuration.  Currently, the `management.endpoint.health.group.&lt;groupId&gt;.include`/`exclude` properties only accept health _indicator_ ids.  They do not accept the id of a `CompositeHealthContributor`.  Concrete use case:  In my application, I have exposed a `CompositeHealthContributor` bean, composed of _dynamically created_ HealthIndicators, with dynamically created indicator ids.  Spring boot autoconfiguration will automatically discover the `CompositeHealthContributor` and add it to the system health checks.  This is great.  However, I want to be able to add this contributor to a health group by the composite contributor id.  I cannot configure the health group to include the health indicator ids, since the health indicator ids are dynamically created.  I have attached [an example application](https://github.com/spring-projects/spring-boot/files/4125162/compositehealthindicator.zip) that has a failing unit test that demonstrates the problem.  The example application has the following property configuration:  ```properties management.endpoint.health.show-details=always management.endpoint.health.group.foo.include=foo ```  With the following bean configuration:  ```java /*  * An example health contributor named "foo".  * (note the HealthContributorNameFactory will strip the HealthContributor bean name suffix)  */ @Bean public CompositeHealthContributor fooHealthContributor() { return CompositeHealthContributor.fromMap(Map.&lt;String, HealthIndicator&gt;of( // Pretend this is dynamically created "foo-A", () -&gt; Health.up().build(), "foo-B", () -&gt; Health.up().build())); } ```  The `/actuator/heath` endpoint returns the following (as expected):  ```json {   "status": "UP",   "components": {     "diskSpace": {       "status": "UP",       "details": {         "total": 791643418624,         "free": 399057661952,         "threshold": 10485760       }     },     "foo": {       "status": "UP",       "components": {         "foo-A": {           "status": "UP"         },         "foo-B": {           "status": "UP"         }       }     },     "ping": {       "status": "UP"     }   },   "groups": [     "foo"   ] } ```  However, the `/actuator/health/foo` endpoint returns a 404, because the "foo"  `CompositeHealthContributor` id is not included in the `foo` health group.  If I change `management.endpoint.health.group.foo.include` to `foo,foo-A,foo-B`, the `foo` group will work.  However, I cannot statically configure the individual indicator ids, since they will be dynamically created.   As an alternative, if the include/exclude properties accepted a regex (rather than only `*` or an exact match) , I could finagle the dynamic ids to always be able to be matched by a regex.</body>
		<created>2020-01-28 23:07:31</created>
		<closed>2020-02-11 01:12:00</closed>
	</bug>
	<bug>
		<id>19973</id>
		<title>Jar files added after build time are not loaded </title>
		<body>The [Cloud Foundry Java Buildpack](https://github.com/cloudfoundry/java-buildpack) adds jar files to a container while staging the application for running on CF. With Boot 2.3.0, these added jar files are not loaded when the application is started using the Spring Boot launcher, likely because they are not in the classpath index file that is generated with the fat jar that is typically exploded and sent to CF.   This causes Java Buildpack features like Spring Auto Reconfiguration, Client Certificate Mapper, Container Security Provider, MariaDB JDBC, and PostgreSQL JDBC to not work with Boot 2.3.0. </body>
		<created>2020-01-28 18:54:23</created>
		<closed>2020-01-30 23:40:31</closed>
	</bug>
	<bug>
		<id>19971</id>
		<title>Jetty logs a custom context path incorrectly when compression is enabled</title>
		<body>Forward port of issue #19969 to 2.3.0.M2.</body>
		<created>2020-01-28 17:17:18</created>
		<closed>2020-01-28 17:17:43</closed>
	</bug>
	<bug>
		<id>19970</id>
		<title>Jetty logs a custom context path incorrectly when compression is enabled</title>
		<body>Forward port of issue #19969 to 2.2.5.</body>
		<created>2020-01-28 17:16:36</created>
		<closed>2020-01-28 17:17:43</closed>
	</bug>
	<bug>
		<id>19969</id>
		<title>Jetty logs a custom context path incorrectly when compression is enabled</title>
		<body>When compression is enabled, the `ContextHandler` is wrapped by a `GzipHandler`. When determining the context path to log, this wrapper prevents the `ContextHandler` from being found. As a result, an empty string is logged rather than the actual context path.</body>
		<created>2020-01-28 16:34:33</created>
		<closed>2020-01-28 17:17:42</closed>
	</bug>
	<bug>
		<id>19964</id>
		<title>Image creation fails when packaged application contains a file with a name more than 100 bytes long</title>
		<body>Hi, when I try to build docker image using **gradlew bootBuildImage** I get error regarding long file names. As I use Kotlin I have a lot of long names like this, so renaming it is not an option.  ``` Caused by: java.lang.RuntimeException: file name 'BOOT-INF/classes/tld/whateva/myproduct/manager/StructureManager$sortChildrenByOrder$$inlined$sortBy$1.class' is too long ( &gt; 100 bytes)         at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveOutputStream.java:683)         at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveOutputStream.java:358)         at org.springframework.boot.buildpack.platform.io.ZipFileTarArchive.copy(ZipFileTarArchive.java:76)         at org.springframework.boot.buildpack.platform.io.ZipFileTarArchive.writeTo(ZipFileTarArchive.java:68) ```  Have no idea what would consequences would be, but ``` TarArchiveOutputStream stream = new TarArchiveOutputStream(...) stream.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX) ``` could fix this issue.  </body>
		<created>2020-01-28 13:37:58</created>
		<closed>2020-01-30 13:33:46</closed>
	</bug>
	<bug>
		<id>19949</id>
		<title>Image building ignores failures in CNB build phases</title>
		<body>Currently, when attempting to use the Maven plugin to build an image using Cloud Native Buildpacks (`spring-boot:build-image`) if one of the phases results in a failure, the plugin continues on rather than failing immediately.  As an example, specifying an invalid value for  `$BP_JAVA_VERSION` results in the build failing but some sort of image being exported:  ```shell  &gt; Running builder     [builder]          [builder]     Cloud Foundry OpenJDK Buildpack v1.0.80     [builder]          [builder]     Cloud Foundry OpenJDK Buildpack v1.0.80     [builder]       no valid dependencies for openjdk-jre, 13.0.2, and io.buildpacks.stacks.bionic in [(openjdk-jre, 8.0.232, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jre, 11.0.5, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jre, 13.0.1, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 8.0.232, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 11.0.5, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 13.0.1, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3])]     [builder]     ERROR: failed to build: exit status 102  &gt; Running exporter     [exporter]    Adding layer 'app'     [exporter]    Adding layer 'config'     [exporter]    Reusing layer 'launcher'     [exporter]    Reusing layer 'org.cloudfoundry.openjdk:openjdk-jre'     [exporter]    Reusing layer 'org.cloudfoundry.jvmapplication:executable-jar'     [exporter]    Reusing layer 'org.cloudfoundry.springboot:spring-boot'     [exporter]    Reusing layer 'org.cloudfoundry.springautoreconfiguration:auto-reconfiguration'     [exporter]    ERROR: failed to export: read build metadata: open /layers/config/metadata.toml: no such file or directory  &gt; Running cacher     [cacher]      Reusing layer 'org.cloudfoundry.openjdk:2f08c469c9a8adea1b6ee3444ba2a8242a7e99d87976a077faf037a9eb7f884b'     [cacher]      Reusing layer 'org.cloudfoundry.jvmapplication:executable-jar'     [cacher]      Reusing layer 'org.cloudfoundry.springboot:spring-boot'     [cacher]      Reusing layer 'org.cloudfoundry.springautoreconfiguration:46ab131165317d91fd4ad3186abf755222744e2d277dc413def06f3ad45ab150' Successfully built image 'docker.io/library/build-image-test:0.0.1-SNAPSHOT' ```  The same failure simulated on `pack` results in the following:  ```shell $ pack build applications/jar --path applications/jar --builder cloudfoundry/cnb:bionic --env BP_JAVA_VERSION="13.0.1" bionic: Pulling from cloudfoundry/cnb Digest: sha256:efe9b17ac151ab53d8eaa1149d0fd44357f9cd0842a7bfb5a2894c02ae143ab7 Status: Image is up to date for cloudfoundry/cnb:bionic base-cnb: Pulling from cloudfoundry/run Digest: sha256:ba9998ae4bb32ab43a7966c537aa1be153092ab0c7536eeef63bcd6336cbd0db Status: Image is up to date for cloudfoundry/run:base-cnb ===&gt; DETECTING [detector] 6 of 13 buildpacks participating [detector] org.cloudfoundry.openjdk                   v1.1.8 [detector] org.cloudfoundry.jvmapplication            v1.0.136 [detector] org.cloudfoundry.tomcat                    v1.1.102 [detector] org.cloudfoundry.springboot                v1.1.2 [detector] org.cloudfoundry.distzip                   v1.0.171 [detector] org.cloudfoundry.springautoreconfiguration v1.0.187 ===&gt; ANALYZING [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:java-security-properties" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:jvmkill" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:link-local-dns" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:memory-calculator" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:openjdk-jre" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:security-provider-configurer" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:class-counter" from app image [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:a3092627b082cb3cdbbe4b255d35687126aa604e6b613dcda33be9f7e1277162" from cache [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:897f16fe8e056395209e35d2384013bd1ff250e717465769079e3f4793628c34" from cache [analyzer] Restoring metadata for "org.cloudfoundry.openjdk:90d40eab6959a7b4059c6409c4505040e8a04f75a481f7282e53430df3edda3e" from cache ===&gt; RESTORING [restorer] Restoring data for "org.cloudfoundry.openjdk:897f16fe8e056395209e35d2384013bd1ff250e717465769079e3f4793628c34" from cache [restorer] Restoring data for "org.cloudfoundry.openjdk:90d40eab6959a7b4059c6409c4505040e8a04f75a481f7282e53430df3edda3e" from cache [restorer] Restoring data for "org.cloudfoundry.openjdk:a3092627b082cb3cdbbe4b255d35687126aa604e6b613dcda33be9f7e1277162" from cache ===&gt; BUILDING [builder]  [builder] Cloud Foundry OpenJDK Buildpack v1.1.8 [builder]  [builder] Cloud Foundry OpenJDK Buildpack v1.1.8 [builder]   no valid dependencies for openjdk-jre, 13.0.1, and io.buildpacks.stacks.bionic in [(openjdk-jre, 8.0.242, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jre, 11.0.6, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jre, 13.0.2, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 8.0.242, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 11.0.6, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (openjdk-jdk, 13.0.2, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (jvmkill, 1.16.0, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3]), (memory-calculator, 4.0.0, [io.buildpacks.stacks.bionic org.cloudfoundry.stacks.cflinuxfs3])] [builder] ERROR: failed to build: exit status 102 ERROR: failed with status code: 7 ```  Any failure state generated by the lifecycle should cause failure of the build of the image.</body>
		<created>2020-01-27 17:32:45</created>
		<closed>2020-01-30 00:38:41</closed>
	</bug>
	<bug>
		<id>19941</id>
		<title>NullPointerException on Windows when creating a build image and //./pipe/docker_engine is not available</title>
		<body>``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.BUILD-SNAPSHOT:build-image (default-cli) on project build.docker.image.test: Execution default-cli of goal org.springframew ork.boot:spring-boot-maven-plugin:2.3.0.BUILD-SNAPSHOT:build-image failed.: NullPointerException -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.BUILD-SNAPSHOT:build-image (default-cli) on project build.docker.image.test : Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.BUILD-SNAPSHOT:build-image failed.     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (Unknown Source)     at java.lang.reflect.Method.invoke (Unknown Source)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.BUILD-SNAPSHOT:build-image failed.     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:148)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (Unknown Source)     at java.lang.reflect.Method.invoke (Unknown Source)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) Caused by: java.lang.NullPointerException     at org.springframework.boot.buildpack.platform.socket.NamedPipeSocket.open (NamedPipeSocket.java:66)     at org.springframework.boot.buildpack.platform.socket.NamedPipeSocket.&lt;init&gt; (NamedPipeSocket.java:50)     at org.springframework.boot.buildpack.platform.socket.NamedPipeSocket.get (NamedPipeSocket.java:97)     at org.springframework.boot.buildpack.platform.docker.DockerConnectionSocketFactory.createSocket (DockerConnectionSocketFactory.java:46)     at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect (DefaultHttpClientConnectionOperator.java:119)     at org.apache.http.impl.conn.BasicHttpClientConnectionManager.connect (BasicHttpClientConnectionManager.java:313)     at org.apache.http.impl.execchain.MainClientExec.establishRoute (MainClientExec.java:393)     at org.apache.http.impl.execchain.MainClientExec.execute (MainClientExec.java:236)     at org.apache.http.impl.execchain.ProtocolExec.execute (ProtocolExec.java:186)     at org.apache.http.impl.execchain.RetryExec.execute (RetryExec.java:89)     at org.apache.http.impl.execchain.RedirectExec.execute (RedirectExec.java:110)     at org.apache.http.impl.client.InternalHttpClient.doExecute (InternalHttpClient.java:185)     at org.apache.http.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:83)     at org.apache.http.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:108)     at org.springframework.boot.buildpack.platform.docker.HttpClientHttp.execute (HttpClientHttp.java:135)     at org.springframework.boot.buildpack.platform.docker.HttpClientHttp.post (HttpClientHttp.java:84)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ImageApi.pull (DockerApi.java:150)     at org.springframework.boot.buildpack.platform.build.Builder.pullBuilder (Builder.java:83)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:62)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:117)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:109)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (Unknown Source)     at java.lang.reflect.Method.invoke (Unknown Source)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) ```  We're creating the awaiter after calling `open`, yet `open` uses the awaiter.</body>
		<created>2020-01-27 08:20:53</created>
		<closed>2020-01-27 12:09:23</closed>
	</bug>
	<bug>
		<id>19910</id>
		<title>Spring Boot CLI adds classes from current directory to the classpath on Unix-like platforms</title>
		<body>Running `spring` in a directory which had another Spring Boot fat jar unzipped, resulted in an error because it was using the `Launcher` from the unzipped `org` directory. </body>
		<created>2020-01-24 18:02:51</created>
		<closed>2020-06-08 13:45:55</closed>
	</bug>
	<bug>
		<id>19908</id>
		<title>OCI image creation fails on Windows with an UnsatisfiedLinkError</title>
		<body>I updated a simple Spring Boot App to 2.3.0.M1 and tried to use the new Maven goal `spring-boot:build-image`.  I am receiving the following stacktrace:  ``` org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.M1:build-image (default-cli) on project caffeinators-app: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:2.3.0.M1:build-image failed: An API incompatibility was encountered while executing org.springframework.boot:spring-boot-maven-plugin:2.3.0.M1:build-image: java.lang.UnsatisfiedLinkError: Error looking up function 'write': Die angegebene Prozedur wurde nicht gefunden. [...] Caused by: java.lang.UnsatisfiedLinkError: Error looking up function 'write': Die angegebene Prozedur wurde nicht gefunden.      at com.sun.jna.Function.&lt;init&gt; (Function.java:245)     at com.sun.jna.NativeLibrary.getFunction (NativeLibrary.java:566)     at com.sun.jna.NativeLibrary.getFunction (NativeLibrary.java:542)     at com.sun.jna.NativeLibrary.getFunction (NativeLibrary.java:528)     at com.sun.jna.Native.register (Native.java:1777)     at com.sun.jna.Native.register (Native.java:1648)     at com.sun.jna.Native.register (Native.java:1360)     at org.springframework.boot.buildpack.platform.socket.DomainSocket.&lt;clinit&gt; (DomainSocket.java:56)     at org.springframework.boot.buildpack.platform.docker.DockerConnectionSocketFactory.createSocket (DockerConnectionSocketFactory.java:48)     at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect (DefaultHttpClientConnectionOperator.java:119)     at org.apache.http.impl.conn.BasicHttpClientConnectionManager.connect (BasicHttpClientConnectionManager.java:313)     at org.apache.http.impl.execchain.MainClientExec.establishRoute (MainClientExec.java:393)     at org.apache.http.impl.execchain.MainClientExec.execute (MainClientExec.java:236)     at org.apache.http.impl.execchain.ProtocolExec.execute (ProtocolExec.java:186)     at org.apache.http.impl.execchain.RetryExec.execute (RetryExec.java:89)     at org.apache.http.impl.execchain.RedirectExec.execute (RedirectExec.java:110)     at org.apache.http.impl.client.InternalHttpClient.doExecute (InternalHttpClient.java:185)     at org.apache.http.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:83)     at org.apache.http.impl.client.CloseableHttpClient.execute (CloseableHttpClient.java:108)     at org.springframework.boot.buildpack.platform.docker.HttpClientHttp.execute (HttpClientHttp.java:135)     at org.springframework.boot.buildpack.platform.docker.HttpClientHttp.post (HttpClientHttp.java:84)     at org.springframework.boot.buildpack.platform.docker.DockerApi$ImageApi.pull (DockerApi.java:150)     at org.springframework.boot.buildpack.platform.build.Builder.pullBuilder (Builder.java:83)     at org.springframework.boot.buildpack.platform.build.Builder.build (Builder.java:62)     at org.springframework.boot.maven.BuildImageMojo.buildImage (BuildImageMojo.java:117)     at org.springframework.boot.maven.BuildImageMojo.execute (BuildImageMojo.java:109)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:566)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)     at org.codehaus.classworlds.Launcher.main (Launcher.java:47) ``` Windows Version: 1903 Build 18362.592 Docker for Desktop : 19.03.5</body>
		<created>2020-01-24 16:43:52</created>
		<closed>2020-01-27 06:30:22</closed>
	</bug>
	<bug>
		<id>19904</id>
		<title>TomcatMetrics does not clean up properly when the application context is closed</title>
		<body>Forward port of issue #19880 to 2.3.0.M2.</body>
		<created>2020-01-24 13:18:31</created>
		<closed>2020-01-24 13:18:46</closed>
	</bug>
	<bug>
		<id>19903</id>
		<title>TomcatMetrics does not clean up properly when the application context is closed</title>
		<body>Forward port of issue #19880 to 2.2.5.</body>
		<created>2020-01-24 13:16:56</created>
		<closed>2020-01-24 13:18:45</closed>
	</bug>
	<bug>
		<id>19846</id>
		<title>Spring Webflux ignores message of custom exception when annotated with @ResponseStatus</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; **Affected component:** spring-webflux **Version:** 2.2.4.RELEASE  When returning a custom exception with a `@ResponseStatus` annotation in a controller method, spring mvc extracts the message of the exception into the error attribute `message`. This message will then be available in the default json response and can also be used in templates.  Spring webflux however ignores the message of the exception when it's annotated with `@ResponseStatus`. The only way to set a message then is via the `reason` parameter of the annotation.  I created a [sample application](https://github.com/xabgesagtx/spring-boot-error-message-example) with a (currently failing) WebFluxTest to demonstrate the behaviour of ignoring the message.  After some investigation in the code, I think that in [DefaultErrorAttributes](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java), when the message is determined, it's not checked if the value for the `reason` parameter is an empty string, which is the default value for this parameter. Therefore this empty string is always preferred to the message of the message of the exception.</body>
		<created>2020-01-21 20:27:41</created>
		<closed>2020-01-30 14:22:33</closed>
	</bug>
	<bug>
		<id>19823</id>
		<title>OAuth2 request parameter binding not available in @WebMvcTest</title>
		<body>Here's a `@Controller` mapping, like one in the Spring Security samples:  ```java @Controller class OAuth2LoginController {  @GetMapping("/") public String index(Model model, @RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient authorizedClient, @AuthenticationPrincipal OAuth2User oauth2User) { ...  ```  The handler method params cannot be bound in a `@WebMvcTest`:  ```java @WebMvcTest(OAuth2LoginController.class) class DemoApplicationTests {  @Autowired MockMvc mvc;  @Test public void rootWhenAuthenticatedReturnsUserAndClient() throws Exception { this.mvc.perform(get("/").with(oauth2Login())) .andExpect(model().attribute("userName", "test-subject")) .andExpect(model().attribute("clientName", "test")) .andExpect(model().attribute("userAttributes", Collections.singletonMap("sub", "test-subject"))); }  } ```  unless you manually add 2 beans that in the app (not in the test) are added via autoconfiguration:  ```java @MockBean ClientRegistrationRepository clientRegistrationRepository;  @TestConfiguration static class AuthorizedClient { @Bean public OAuth2AuthorizedClientRepository authorizedClientRepository() { return new HttpSessionOAuth2AuthorizedClientRepository(); } } ```  Seems like maybe `spring-boot-test-autoconfigure` is missing something in `spring.factories`?  There's a sample app here: https://github.com/spring-projects/spring-security/blob/master/samples/boot/oauth2login/src/test/java/sample/web/OAuth2LoginControllerTests.java</body>
		<created>2020-01-20 15:33:01</created>
		<closed>2020-02-04 02:04:29</closed>
	</bug>
	<bug>
		<id>19807</id>
		<title>PortInUseException thrown when Netty does not have the right to use configured port</title>
		<body>I am using Spring Boot 2.2.2.RELEASE and tries to bind my embbed netty server to port 443 with a non root user. The application fails to start with message:  ``` 2020/01/20 09:29:09.465 [] [main] [DEBUG] report(LoggingFailureAnalysisReporter.java:37) - Application failed to start due to an exception org.springframework.boot.web.server.PortInUseException: Port 443 is already in use         at org.springframework.boot.web.embedded.netty.NettyWebServer.start(NettyWebServer.java:85)         at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext$ServerManager.start(ReactiveWebServerApplicationContext.java:259)         at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.startReactiveWebServer(ReactiveWebServerApplicationContext.java:138)         at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.finishRefresh(ReactiveWebServerApplicationContext.java:130)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)         at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)         at com.huaweicloud.rms.RmsApplication.main(RmsApplication.java:21)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:51)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:52) ```  Spend some time trying to find the process using port 443 but there is no. The real cause is that with no more system config it's not allowed for a non root user to use port under 1024. I think the `PortInUseException` is misleading here and a PermissionException is more suitable. </body>
		<created>2020-01-20 02:39:01</created>
		<closed>2020-04-21 00:58:42</closed>
	</bug>
	<bug>
		<id>19779</id>
		<title>Configuring dedicated Cassandra contact points now require a local DC</title>
		<body>We need to expose an additional property as the following is thrown when one wants to customize the contact points to use.  ``` Caused by: java.lang.IllegalStateException: Since you provided explicit contact points, the local DC must be explicitly set (see basic.load-balancing-policy.local-datacenter in the config, or set it programmatically with SessionBuilder.withLocalDatacenter). Current contact points are: Node(endPoint=/127.0.0.1:9042, hostId=3e9d107c-8fab-4458-b217-d84c4491b574, hashCode=22d286ac)=datacenter1. Current DCs in this cluster are: datacenter1 at com.datastax.oss.driver.internal.core.loadbalancing.helper.MandatoryLocalDcHelper.discoverLocalDc(MandatoryLocalDcHelper.java:91) ~[java-driver-core-4.3.1.jar:na] at com.datastax.oss.driver.internal.core.loadbalancing.DefaultLoadBalancingPolicy.discoverLocalDc(DefaultLoadBalancingPolicy.java:73) ~[java-driver-core-4.3.1.jar:na] at com.datastax.oss.driver.internal.core.loadbalancing.BasicLoadBalancingPolicy.init(BasicLoadBalancingPolicy.java:126) ~[java-driver-core-4.3.1.jar:na] at com.datastax.oss.driver.internal.core.metadata.LoadBalancingPolicyWrapper.init(LoadBalancingPolicyWrapper.java:121) ~[java-driver-core-4.3.1.jar:na] at com.datastax.oss.driver.internal.core.session.DefaultSession$SingleThreaded.afterInitialSchemaRefresh(DefaultSession.java:419) ~[java-driver-core-4.3.1.jar:na] at com.datastax.oss.driver.internal.core.session.DefaultSession$SingleThreaded.lambda$afterInitialNodeListRefresh$5(DefaultSession.java:409) ~[java-driver-core-4.3.1.jar:na] at java.util.concurrent.CompletableFuture.uniAccept(CompletableFuture.java:670) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:646) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975) ~[na:1.8.0_232] at com.datastax.oss.driver.internal.core.metadata.MetadataManager$SingleThreaded.lambda$startSchemaRequest$2(MetadataManager.java:420) ~[java-driver-core-4.3.1.jar:na] at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:575) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:594) ~[na:1.8.0_232] at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456) ~[na:1.8.0_232] at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050) ~[netty-common-4.1.43.Final.jar:4.1.43.Final] at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.43.Final.jar:4.1.43.Final] at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.43.Final.jar:4.1.43.Final] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_232] ```  At the moment this even happens by default (i.e. without changing anything) so that's quite annoying.</body>
		<created>2020-01-16 13:08:14</created>
		<closed>2020-01-23 17:32:45</closed>
	</bug>
	<bug>
		<id>19714</id>
		<title>Fat jars do not tolerate entries with an invalid modification date of 0</title>
		<body>Forward port of issue #19595 to 2.3.0.M1.</body>
		<created>2020-01-15 02:52:47</created>
		<closed>2020-01-15 02:53:03</closed>
	</bug>
	<bug>
		<id>19713</id>
		<title>Fat jars do not tolerate entries with an invalid modification date of 0</title>
		<body>Forward port of issue #19595 to 2.2.3.</body>
		<created>2020-01-15 02:52:05</created>
		<closed>2020-01-15 02:53:03</closed>
	</bug>
	<bug>
		<id>19709</id>
		<title>HazelcastClientFactory can return null instead of HazelcastInstance if there is no HazelcastClient for the given name </title>
		<body>Hello,  When I was working on https://github.com/spring-projects/spring-boot/pull/19669 I found that `HazelcastAutoConfiguration` may create a `NullBean` instead of `HazelcastInstance`.  When `HazelcastClientFactory`  tries to find the `HazelcastInstance` by name and there is no instance with that name, the `null` will be returned. It happens only when `ClientConfig` has an instance's name.   Test to reproduce:  ```java // - HazelcastAutoConfigurationClientTests @Test void clientConfigWithInstanceName() { this.contextRunner .withPropertyValues("spring.hazelcast.config=classpath:org/springframework/" + "boot/autoconfigure/hazelcast/hazelcast-client-instance.xml") .run((context) -&gt; assertThat(context).getBean(HazelcastInstance.class) .extracting(HazelcastInstance::getName).isEqualTo("spring-boot")); } ``` ```xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!--hazelcast-client-instance.xml--&gt; &lt;hazelcast-client xmlns="http://www.hazelcast.com/schema/client-config"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://www.hazelcast.com/schema/client-config hazelcast-client-config-3.12.xsd"&gt;  &lt;instance-name&gt;spring-boot&lt;/instance-name&gt; &lt;/hazelcast-client&gt; ```  The test fails due to:  &gt; org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'hazelcastInstance' is expected to be of type 'com.hazelcast.core.HazelcastInstance' but was actually of type 'org.springframework.beans.factory.support.NullBean'    This issue can be fixed with a new method which was provided by Hazelcast (https://github.com/hazelcast/hazelcast/pull/16362), there is also a back-port (https://github.com/hazelcast/hazelcast/pull/16363), so that method should be available in Hazelcast **3.12.6**   My idea is change `HazelcastClient.getHazelcastClientByName(Name)` to `HazelcastClient. getOrCreateHazelcastClient(Config)`  in `HazelcastClientFactory` when a new version of `Hazelcast` will be released.  </body>
		<created>2020-01-14 14:53:45</created>
		<closed>2020-02-10 08:31:10</closed>
	</bug>
	<bug>
		<id>19701</id>
		<title>Duplicate metrics can be recorded by WebMvcTags since it does not rationalize trailing slashes</title>
		<body>Forward port of issue #18207 to 2.3.0.M1.</body>
		<created>2020-01-13 22:15:16</created>
		<closed>2020-01-13 22:15:35</closed>
	</bug>
	<bug>
		<id>19689</id>
		<title>Failure analyser for a missing validation provider does not kick in when using the latest Jakarta Validation API</title>
		<body>Forward port of issue #19671 to 2.3.0.M1.</body>
		<created>2020-01-13 17:10:37</created>
		<closed>2020-01-13 17:10:55</closed>
	</bug>
	<bug>
		<id>19686</id>
		<title>Make equality checks defensive to null reference</title>
		<body>Forward port of issue #19540 to 2.3.0.M1.</body>
		<created>2020-01-13 16:45:13</created>
		<closed>2020-01-13 16:45:24</closed>
	</bug>
	<bug>
		<id>19685</id>
		<title>Make equality checks defensive to null reference</title>
		<body>Forward port of issue #19540 to 2.2.3.</body>
		<created>2020-01-13 16:44:55</created>
		<closed>2020-01-13 16:45:23</closed>
	</bug>
	<bug>
		<id>19683</id>
		<title>PoolingDataSourceBean getParentLogger throws StackOverflowError</title>
		<body>Forward port of issue #19637 to 2.3.0.M1.</body>
		<created>2020-01-13 16:24:16</created>
		<closed>2020-01-13 16:24:29</closed>
	</bug>
	<bug>
		<id>19682</id>
		<title>PoolingDataSourceBean getParentLogger throws StackOverflowError</title>
		<body>Forward port of issue #19637 to 2.2.3.</body>
		<created>2020-01-13 16:21:35</created>
		<closed>2020-01-13 16:24:28</closed>
	</bug>
	<bug>
		<id>19671</id>
		<title>Failure analyser for a missing validation provider does not kick in when using the latest Jakarta Validation API</title>
		<body>We look for a `ValidationException` with a message that starts with the following:  ``` Unable to create a Configuration, because no Bean Validation provider could be found ```  When using the version 2.0.2 Jakarta variant of the API, the message is actually the following:  ``` Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath. ```  Note the addition of `Jakarta` in the first sentence of the message which is absent when using the Javax variant and version 2.0.1 of the Jakarta variant.</body>
		<created>2020-01-13 14:17:29</created>
		<closed>2020-01-13 17:10:54</closed>
	</bug>
	<bug>
		<id>19636</id>
		<title>PoolingDataSourceBean.getParentLogger() method Dead cycle</title>
		<body>When I was browsing the source code, I found that PoolingDataSourceBean class of method getParentLogger there was a Dead cycle code。</body>
		<created>2020-01-11 12:58:23</created>
		<closed>2020-01-12 09:03:16</closed>
	</bug>
	<bug>
		<id>19626</id>
		<title>RabbitProperties addresses field is not sanitized by default and may contain sensitive information</title>
		<body>### Problem: The actuator `configprops` and `env` endpoints show `RabbitProperties#addresses` in un-sanitized form.   ### Workaround: These endpoints expose the `keys-to-sanitize` property and I could set that property to the current defaults plus `addresses`. However, this is not desirable as   1. we have many applications that will use this and will have to do this in every app (or write a starter that does it).  2. copying the current default values in the endpoint code is a risk of getting out of sync w/ that code (defaults in the endpoint).  It feels like this is something that should be handled out-of-box.   #### Couple of options:  1. Update default keys-to-sanitize to include an expression for `addresses`.  2. Add an `additional-keys-to-sanitize` to allow adds to the defaults and set that property in my applications.  3.  Add an annotation that can be set on a `@ConfigurationProperties` field (such as `@Sensitive`) that would automatically get that field excluded from the endpoint reports.  4. Do nothing. Use the existing `keys-to-sanitize` property w/ the current coded defaults and add `addresses` to it. Repeat this in each application. Update each application when/if the defaults happen to change in the endpoint code.  I am happy to submit a merge request for any of these options. </body>
		<created>2020-01-11 02:15:35</created>
		<closed>2020-02-03 18:53:27</closed>
	</bug>
	<bug>
		<id>19611</id>
		<title>STOMP does not work with lazy initialization</title>
		<body>This can be reproduced using the [STOMP getting started guide](https://spring.io/guides/gs/messaging-stomp-websocket/) with lazy initialization enabled. The project's test will fail:  ``` java.lang.AssertionError: Greeting not received at org.junit.Assert.fail(Assert.java:88) at hello.GreetingIntegrationTests.getGreeting(GreetingIntegrationTests.java:102) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) at java.lang.Thread.run(Thread.java:748) ```  This has been raised [on Gitter](https://gitter.im/spring-projects/spring-boot?at=5e186333a74ac8537785b596) by @NicklasWallgren and [on Stack Overflow](https://stackoverflow.com/questions/58775792/websocket-cannot-connect-to-endpoint-when-running-spring-boot-2-2-with-lazy-bean). </body>
		<created>2020-01-10 15:33:18</created>
		<closed>2020-06-09 10:32:49</closed>
	</bug>
	<bug>
		<id>19600</id>
		<title>MetricsWebFilter assigns UNKNOWN outcome to 200 OK responses</title>
		<body>Forward port of issue #19367 to 2.3.0.M1.</body>
		<created>2020-01-10 01:57:55</created>
		<closed>2020-01-10 01:58:07</closed>
	</bug>
	<bug>
		<id>19598</id>
		<title>Rejected value is null when configuration property fails validation</title>
		<body>Forward port of issue #19580 to 2.3.0.M1.</body>
		<created>2020-01-10 01:10:35</created>
		<closed>2020-01-10 01:10:46</closed>
	</bug>
	<bug>
		<id>19582</id>
		<title>Diagnostics are poor when using `@ConfigurationPropertiesScan` and `@ConstructorBinding` on a Kotlin data class without kotlin-reflect</title>
		<body>Forward port of issue #19312 to 2.3.0.M1.</body>
		<created>2020-01-08 21:54:25</created>
		<closed>2020-01-08 21:54:39</closed>
	</bug>
	<bug>
		<id>19580</id>
		<title>Rejected value is null when configuration property fails validation</title>
		<body>After changing from Spring Boot 2.1.9 to Spring Boot 2.2.2, the error messages about constraint validation for some of our configuration properties started including null as the rejected value, rather than the actual value (-1 in this case).  The root cause seems to be that SpringValidationAdapter's `getRejectedValue(ield, violation, bindingResult)` has started returning null in certain cases with the `bindingResult` that's present in 2.2.2. Or rather, the `getRawFieldValue(String)` has started returning null.  Failing case in 2.2.2: `SpringValidationAdapter` calls `ValidationBindHandlers$ValidationResult.getRawFieldValue("intermediatefield.leafFieldInCamelCase")`which returns null because it expects field names in form "intermediatefield.leaf-field-in-camel-case".  Working case in 2.1.9: `SpringValidationAdapter` calls `BeanPropertyBindingResult.getRawFieldValue("intermediatefield.leafFieldInCamelCase")` which returns the actual field value.  I'll try to produce a minimal reproduction later. </body>
		<created>2020-01-08 16:38:52</created>
		<closed>2020-01-10 01:10:45</closed>
	</bug>
	<bug>
		<id>19565</id>
		<title>Auto-configured JMS ConnectionFactory should be named jmsConnectionFactory for compatibility with Spring Integration</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; When using spring integration JMS support and boot default configuration with ActiveMQ there is an error on startup:  &gt; ...Cannot create inner bean '(inner bean)#5c49045d' of type [org.springframework.integration.jms.DynamicJmsTemplate] while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#5c49045d': Cannot resolve reference to bean 'jmsConnectionFactory' while setting bean property 'connectionFactory'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'jmsConnectionFactory' available   It is related to  https://docs.spring.io/spring-integration/reference/html/jms.html#jms-inbound-channel-adapter &gt; By default, all of the JMS adapters that require a reference to the ConnectionFactory automatically look for a bean named jmsConnectionFactory. That is why you do not see a connection-factory attribute in many of the examples. However, if your JMS ConnectionFactory has a different bean name, you need to provide that attribute.  It looks like it is caused that by default spring boot ActiveMQ auto configuration creates `cachingJmsConnectionFactory` bean instead of `jmsConnectionFactory`  The issue can be resolved by configuration      spring.jms.cache.enabled=false  Or by alias     &lt;alias name="cachingJmsConnectionFactory" alias="jmsConnectionFactory"/&gt;  It looks like  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java#L75 should have additional names defined.  From outside it is hard to see it other auto configured beans (nonXaJmsConnectionFactory, pooledJmsConnectionFactory) should be also aliased to `jmsConnectionFactory`  Tested with Spring Boot 2.1.2 Spring Integration 5.1.5  Attaching sample application. [spring-boot-activemq-integration.zip](https://github.com/spring-projects/spring-boot/files/4034679/spring-boot-activemq-integration.zip) </body>
		<created>2020-01-08 10:07:10</created>
		<closed>2020-02-11 15:28:07</closed>
	</bug>
	<bug>
		<id>19562</id>
		<title>HypermediaAutoConfiguration hinges on Spring MVC</title>
		<body>Forward port of issue #19392 to 2.3.0.M1.</body>
		<created>2020-01-07 22:30:05</created>
		<closed>2020-01-07 22:30:26</closed>
	</bug>
	<bug>
		<id>19560</id>
		<title>Profile with comma in name does not work in tests</title>
		<body>Forward port of issue #19556 to 2.2.3.</body>
		<created>2020-01-07 21:34:03</created>
		<closed>2020-01-07 21:35:17</closed>
	</bug>
	<bug>
		<id>19554</id>
		<title>Spring Boot's antlib references a properties file that is no longer packaged in its jar</title>
		<body>Forward port of issue #19552 to 2.3.0.M1.</body>
		<created>2020-01-07 12:06:21</created>
		<closed>2020-01-07 12:07:18</closed>
	</bug>
	<bug>
		<id>19553</id>
		<title>Spring Boot's antlib references a properties file that is no longer packaged in its jar</title>
		<body>Forward port of issue #19552 to 2.2.3.</body>
		<created>2020-01-07 12:05:54</created>
		<closed>2020-01-07 12:07:18</closed>
	</bug>
	<bug>
		<id>19552</id>
		<title>Spring Boot's antlib references a properties file that is no longer packaged in its jar</title>
		<body>https://github.com/spring-projects/spring-boot/blob/4910b518779ed6606b96bb77829dbf2839668a7e/spring-boot-project/spring-boot-tools/spring-boot-antlib/src/main/resources/org/springframework/boot/ant/antlib.xml#L37-L46  The file isn't packaged in any 2.x version. It is there in 1.5.x. I'm not yet sure if its absence is breaking something and no one has noticed or if it's not needed and we can remove the reference to it.</body>
		<created>2020-01-07 11:28:05</created>
		<closed>2020-01-07 12:07:17</closed>
	</bug>
	<bug>
		<id>19537</id>
		<title>@SpringBootTest does not work when @ActiveProfiles contains a comma</title>
		<body>When I define the active profiles like this:      @ActiveProfiles("a,b")  on a Spring Boot Test (noticed on a `@WebMvcTest`), the correct profiles are still applied. This is because of https://github.com/spring-projects/spring-boot/blob/e250cce2744ea226761a20bcf2694e6b4244fc0c/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java#L159  I'm reporting this because it actually confused the hell out of me while I was introducing a newbie to Spring (Boot) and testing support etc. I'm actually not sure whether this is supposed to work like this or not, seems to be an unknown side effect, and I'm not sure whether this is really an issue. This would not work, for instance, if there were a profile with a comma in its name - but no idea if this is allowed either. </body>
		<created>2020-01-05 17:54:53</created>
		<closed>2020-04-18 01:49:00</closed>
	</bug>
	<bug>
		<id>19527</id>
		<title>Incorrect target type with wildcard List</title>
		<body>Forward port of issue #18767 to 2.3.0.M1.</body>
		<created>2020-01-03 19:22:03</created>
		<closed>2020-01-03 19:22:24</closed>
	</bug>
	<bug>
		<id>19526</id>
		<title>Incorrect target type with wildcard List</title>
		<body>Forward port of issue #18767 to 2.2.3.</body>
		<created>2020-01-03 19:19:51</created>
		<closed>2020-01-03 19:22:23</closed>
	</bug>
	<bug>
		<id>19524</id>
		<title>Non-compatible bean instance of type [org.neo4j.ogm.session.SessionFactory]  being injected for [org.springframework.data.cassandra.SessionFactory]</title>
		<body>I am using both spring-boot-starter-data-cassandra and  spring-boot-starter-data-neo4j. Also, I am using multi keyspaces for cassandra so had to overrride AbstractCassandraConfiguration. However, when I am starting application, I get error resolving SessionFactory.  It appears there is a clash of SessionFactory  and org.neo4j.ogm.session.SessionFactory is being injected into cassandra.SessionFactory.   ``` Caused by: java.lang.IllegalStateException: @Bean method AbstractCassandraConfiguration.sessionFactory called as bean reference for type [org.springframework.data.cassandra.SessionFactory] but overridden by non-compatible bean instance of type [org.neo4j.ogm.session.SessionFactory]. Overriding bean of same name declared in: class path resource [org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration$Neo4jOgmSessionFactoryConfiguration.class]```</body>
		<created>2020-01-03 15:00:42</created>
		<closed>2020-01-14 14:24:31</closed>
	</bug>
	<bug>
		<id>19517</id>
		<title>Use RBAC credentials for Couchbase cluster info</title>
		<body>Forward port of issue #19393 to 2.3.0.M1.</body>
		<created>2020-01-03 08:47:48</created>
		<closed>2020-01-03 08:48:34</closed>
	</bug>
	<bug>
		<id>19486</id>
		<title>Non-public property in Saml2RelyingPartyProperties' Registration class</title>
		<body>Forward port of issue #19194 to 2.3.0.M1.</body>
		<created>2019-12-30 16:02:03</created>
		<closed>2019-12-30 16:02:16</closed>
	</bug>
	<bug>
		<id>19471</id>
		<title>Async exceptions not handled by error pages in war deployments</title>
		<body>I am using spring-boot 2.1.7.RELEASE, and packaged it as war deployed in a Tomcat 8.5.45.  I have a async rest controller, when it take long time to process and throw a AsyncRequestTimeoutException, The client get a response with status == 200 and empty body.  When packaged as jar and run with embedded tomcat, I can get 503 error.  I debugged in and found ErrorPageFilter suppressed the status, and doesn't  send any body to client. </body>
		<created>2019-12-27 10:36:01</created>
		<closed>2020-09-09 08:09:25</closed>
	</bug>
	<bug>
		<id>19463</id>
		<title>Support commas embedded in command line arguments from Maven plugin</title>
		<body>Forward port of issue #18711 to 2.3.0.M1.</body>
		<created>2019-12-26 10:19:07</created>
		<closed>2019-12-26 10:19:25</closed>
	</bug>
	<bug>
		<id>19441</id>
		<title>Configuration properties that use the builder pattern are not recognized when used with a generic</title>
		<body>Forward port of issue #19099 to 2.3.0.M1.</body>
		<created>2019-12-23 14:08:30</created>
		<closed>2019-12-23 14:09:54</closed>
	</bug>
	<bug>
		<id>19422</id>
		<title>NoSuchMethodError when deploying to Tomcat 8.5 before 8.5.44 and Tomcat 9 before 9.0.23</title>
		<body>Forward port of issue #19308 to 2.3.0.M1.</body>
		<created>2019-12-20 15:55:31</created>
		<closed>2019-12-20 15:55:52</closed>
	</bug>
	<bug>
		<id>19393</id>
		<title>Use RBAC credentials for Couchbase cluster info</title>
		<body>Hey,  Autoconfiguration for Couchbase driver with RBAC on server side fails. After providing the following configuration: ``` spring:   couchbase:     bootstrap-hosts:       - 127.0.0.1:8091     username: test     password: super_secret     bucket:       name: test ``` I get the error below:  ``` Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.couchbase.client.java.cluster.ClusterInfo]: Factory method 'couchbaseClusterInfo' threw exception; nested exception is com.couchbase.client.java.error.InvalidPasswordException ```  I think the problem lies in the fact that `CouchbaseConfiguration.couchbaseClusterInfo()` passes bucket level credentials to `CouchbaseCluster`'s `clusterManager(String username, String password)`. The javadoc for this method explicitly states:  &gt; Provides access to the ClusterManager to perform cluster-wide operations. Note that the credentials provided here are different from bucket-level credentials. As a rule of thumb, the "Administrator" credentials need to be passed in here or any credentials with enough permissions to perform the underlying operations. **Bucket level credentials will not work.**  In `CouchbaseConfiguration.couchbaseCluster()` we check whether RBAC is used and then we authenticate:  ``` @Bean @Primary public Cluster couchbaseCluster() { CouchbaseCluster couchbaseCluster = CouchbaseCluster.create(couchbaseEnvironment(), determineBootstrapHosts()); if (isRoleBasedAccessControlEnabled()) { return couchbaseCluster.authenticate(this.properties.getUsername(), this.properties.getPassword()); } return couchbaseCluster; } ```  This would mean that we can safely use `couchbaseCluster().clusterManager().info()` inside `couchbaseClusterInfo()` if RBAC is enabled.  I am happy to raise a PR for this change if that would help.  Thanks!</body>
		<created>2019-12-18 00:15:57</created>
		<closed>2020-01-03 08:48:34</closed>
	</bug>
	<bug>
		<id>19392</id>
		<title>HypermediaAutoConfiguration hinges on Spring MVC</title>
		<body>A Spring WebFlux application that uses Spring HATEOAS and has properly excluded Spring MVC will blow up due to `HypermediaAutoConfiguration` pulling in `WebMvcAutoConfiguration`.  Can we somehow further constrain this autoconfiguration to not kick in the there is no Spring MVC on the classpath?  Right now, I have to set `spring.hateoas.use-hal-as-default-json-media-type=false` to manually turn off `HateosConfiguration`.</body>
		<created>2019-12-17 22:06:04</created>
		<closed>2020-01-07 22:30:25</closed>
	</bug>
	<bug>
		<id>19381</id>
		<title>Issue in Micrometer interceptor if intercept calls another endpoint</title>
		<body>As of Spring boot 2.2.2 (and 2.1.9), there is an issue in the micrometer integration when you have a `RestTemplate` call being intercepted and redirected to another URL.  ## Use case  The main use case I have, being affected by the issue, is where I intercept a call to an external API to provide authentication on the call.  For instance, we call an external API, but intercept to check if already authenticated. If authenticated, add the auth token to the call. If NOT authenticated, place a call to another endpoint to perform the authentication, then add the auth token to the original call and complete the original call.  In the case where the auth call is being made, the metrics details for the original call is being lost. TBF, this mainly affects calls with path parameters.  This seems to be an issue in how the `org.springframework.boot.actuate.metrics.web.client.MetricsClientHttpRequestInterceptor` stores the `urlTemplate`, as a `ThreadLocal`. In the example supplied, the `intercept` method will wipe the `urlTemplate` after completion of the auth call.  ```java     @Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { ... try { response = execution.execute(request, body); return response; } finally { getTimeBuilder(request, response).register(this.meterRegistry).record(System.nanoTime() - startTime, TimeUnit.NANOSECONDS); urlTemplate.remove();   // &lt;-- This is the offending command } } ```  Ideally, the `urlTemplate` needs to be a thread local stack of some type, OR if the performance hit on this is too large, there needs to be some way to override the default functionality for anyone needing this sort of functionality.  PS - If a fix is created for this, can it be backported to 2.1.X?  ## Example project Project demonstrating the issue is available here: https://github.com/grahammkelly/sb-issue </body>
		<created>2019-12-16 10:28:25</created>
		<closed>2019-12-30 08:42:49</closed>
	</bug>
	<bug>
		<id>19375</id>
		<title>Micrometer's Dynatrace group property cannot be configured via application properties</title>
		<body>Forward port of issue #19369 to 2.3.0.M1.</body>
		<created>2019-12-15 00:05:47</created>
		<closed>2019-12-15 00:07:39</closed>
	</bug>
	<bug>
		<id>19371</id>
		<title>AbstractErrorWebExceptionHandler keeps original Content-Encoding response header</title>
		<body>I ran into a problem where one of my Gateway Filter which filters an exchange response throws an exception.  There was a header `Content-Encoding: gzip` in the response and this header (along with the rest) was forwarded to error response headers. But the `ServerResponse` body was written as JSON (error attributes) and wasn't zipped therefore a server response is incorrect.  I suggest clearing all headers in an exchange's response in order to fix that and similar header problems.  Currently `AbstractErrorWebExceptionHandler` just overwrites `Content-Type` header of the response: ``` private Mono&lt;? extends Void&gt; write(ServerWebExchange exchange, ServerResponse response) { // force content-type since writeTo won't overwrite response header values exchange.getResponse().getHeaders().setContentType(response.headers().getContentType()); return response.writeTo(exchange, new ResponseContext()); } ``` which can be replaced with `exchange.getResponse().getHeaders().clear();`</body>
		<created>2019-12-13 18:29:56</created>
		<closed>2019-12-16 15:22:33</closed>
	</bug>
	<bug>
		<id>19368</id>
		<title>Micrometer's Dynatrace group property cannot be configured via application properties</title>
		<body>From Micrometer 1.2.0 the following property has been added in order to set the Dynatrace process group name of where the metrics will be published:  `management.metrics.export.dynatrace.group=mycustomgroup`  I added the above property in an `application.properties` file of a simple Spring Boot 2 app, but it is completely unused.  Spring Boot 2 version used `2.2.2.RELEASE`.   More details about that property are in the following Micrometer issue:  https://github.com/micrometer-metrics/micrometer/issues/1464  &lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; </body>
		<created>2019-12-13 15:12:49</created>
		<closed>2019-12-14 23:45:37</closed>
	</bug>
	<bug>
		<id>19367</id>
		<title>MetricsWebFilter assigns UNKNOWN outcome to 200 OK responses</title>
		<body>If REST controller doesn't explicitly set status code (so it defaults to 200 OK), `MetricsWebFilter` will set `outcome` tag to `UNKNOWN` instead of `SUCCESS`.  Example application to reproduce:  ```java package net.example;   import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import reactor.core.publisher.Mono;   @SpringBootApplication public class ExampleApplication {       public static void main(String[] args) {         SpringApplication.run(ExampleApplication.class, args);     }   }   @RestController class ExampleController {       @GetMapping("/example")     Mono&lt;String&gt; example() {         return Mono.just("EXAMPLE");     }   } ``` ```yaml management:     endpoints:         web:             exposure:                 include:                     - metrics ``` ```sh curl http://localhost:8080/example  curl http://localhost:8080/actuator/metrics/http.server.requests?tag=uri:/example # availableTags{tag="outcome"} only has "UNKNOWN" value ```  </body>
		<created>2019-12-13 12:24:21</created>
		<closed>2020-01-10 01:58:06</closed>
	</bug>
	<bug>
		<id>19312</id>
		<title>Diagnostics are poor when using `@ConfigurationPropertiesScan` and `@ConstructorBinding` on a Kotlin data class without kotlin-reflect</title>
		<body>If `@ConstructorBinding` is used on a Kotlin data class without a dependency on `kotlin-reflect`, the annotation isn't found and autowiring is attempted instead. This leads to a failure like this:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of constructor in ind.ericjturley.mcve.configurationproperties.PushServicesProperties1 required a bean of type 'ind.ericjturley.mcve.configurationproperties.PushServicesProperties1$SnsClient' that could not be found.   Action:  Consider defining a bean of type 'ind.ericjturley.mcve.configurationproperties.PushServicesProperties1$SnsClient' in your configuration. Consider adding @ConstructorBinding to ind.ericjturley.mcve.configurationproperties.PushServicesProperties1 if you intended to use constructor-based configuration property binding. ```  The second action is wrong as the class is already annotated with `@ConstructorBinding`. It would be nice to fail in a more helpful way, for example by detecting that it's a Kotlin class but `kotlin-reflect` is missing.  With thanks to @ericjturley, the problem can be reproduced with https://github.com/ericjturley/mcve-configurationproperties.</body>
		<created>2019-12-05 17:10:49</created>
		<closed>2020-01-08 21:54:38</closed>
	</bug>
	<bug>
		<id>19308</id>
		<title>NoSuchMethodError when deploying to Tomcat 8.5 before 8.5.44 and Tomcat 9 before 9.0.23</title>
		<body>From [this question](https://stackoverflow.com/questions/59197056/springboot-2-2-1-nosuchmethoderror-org-apache-catalina-valves-remoteipvalve-s) on Stack Overflow:  ``` 2019 12 05 14:05:45#+00#ERROR#org.apache.catalina.core.ContainerBase##anonymous#localhost-startStop-1#na#s2k4640ult#permitmgmtcoreaic#web##na#na#na#na#ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/permitmgmt-core]]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)     at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:754)     at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:730)     at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)     at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:985)     at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1857)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)     at java.lang.Thread.run(Thread.java:836) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatServletWebServerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is java.lang.NoSuchMethodError: org.apache.catalina.valves.RemoteIpValve.setHostHeader(Ljava/lang/String;)V     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)     at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)     at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:152)     at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:132)     at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:92)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5245)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     ... 10 common frames omitted Caused by: java.lang.NoSuchMethodError: org.apache.catalina.valves.RemoteIpValve.setHostHeader(Ljava/lang/String;)V     at org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer.customizeRemoteIpValve(TomcatWebServerFactoryCustomizer.java:189)     at org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer.customize(TomcatWebServerFactoryCustomizer.java:85)     at org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer.customize(TomcatWebServerFactoryCustomizer.java:60)     at org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor.lambda$postProcessBeforeInitialization$0(WebServerFactoryCustomizerBeanPostProcessor.java:72)     at org.springframework.boot.util.LambdaSafe$Callbacks.lambda$null$0(LambdaSafe.java:287)     at org.springframework.boot.util.LambdaSafe$LambdaSafeCallback.invoke(LambdaSafe.java:159)     at org.springframework.boot.util.LambdaSafe$Callbacks.lambda$invoke$1(LambdaSafe.java:286)     at java.util.ArrayList.forEach(ArrayList.java:1257)     at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1082)     at org.springframework.boot.util.LambdaSafe$Callbacks.invoke(LambdaSafe.java:286)     at org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor.postProcessBeforeInitialization(WebServerFactoryCustomizerBeanPostProcessor.java:72)     at org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor.postProcessBeforeInitialization(WebServerFactoryCustomizerBeanPostProcessor.java:58)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)     ... 28 common frames omitted ```  This is caused by the changes for https://github.com/spring-projects/spring-boot/issues/18233 and the fact that the web server factory customisers run, even though the factory that the customize is never used. We had a [similar problem](https://github.com/spring-projects/spring-boot/issues/16498#issuecomment-496632107) in the past. We could catch the `NoSuchMethodError` and assume an earlier version of Tomcat, but it would be nicer if the customizers weren't called at all.   </body>
		<created>2019-12-05 15:38:12</created>
		<closed>2019-12-20 15:55:52</closed>
	</bug>
	<bug>
		<id>19305</id>
		<title>server.ssl.key-alias is ignored when configuring Netty</title>
		<body>Forward port of issue #19197 to 2.3.0.M1.</body>
		<created>2019-12-05 12:54:39</created>
		<closed>2019-12-05 12:55:06</closed>
	</bug>
	<bug>
		<id>19304</id>
		<title>server.ssl.key-alias is ignored when configuring Netty</title>
		<body>Forward port of issue #19197 to 2.2.2.</body>
		<created>2019-12-05 12:54:14</created>
		<closed>2019-12-05 12:55:06</closed>
	</bug>
	<bug>
		<id>19279</id>
		<title>Actuator does not display immutable configuration properties when using @Validated</title>
		<body>Forward port of issue #19219 to 2.3.0.M1.</body>
		<created>2019-12-04 22:42:46</created>
		<closed>2019-12-04 22:43:12</closed>
	</bug>
	<bug>
		<id>19221</id>
		<title>KafkaAutoConfiguration should back off when a bean of type ConcurrentKafkaListenerContainerFactory is found</title>
		<body>We have a Spring Boot app configured with `@EnableKafka` and multiple instances of `ConcurrentKafkaListenerContainerFactory` to consume from different topics that require different deserializers.  With this configuration application startup fails with message  ``` Error creating bean with name 'kafkaListenerContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.class]: Unsatisfied dependency expressed through method 'kafkaListenerContainerFactory' parameter 1; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.kafka.core.ConsumerFactory&lt;java.lang.Object, java.lang.Object&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} ```  `KafkaAutoConfiguration` attempts to create a `ConcurrentKafkaListenerContainerFactory ` bean due to the condition `@ConditionalOnMissingBean(name = "kafkaListenerContainerFactory")`. Our configuration does not have a bean with this name hence the error.  Should the condition not check a bean exists with type `ConcurrentKafkaListenerContainerFactory ` rather than a specific bean name? It would then backoff in a scenario like ours where we have multiple beans of this type defined?</body>
		<created>2019-12-04 14:57:23</created>
		<closed>2020-03-23 11:57:21</closed>
	</bug>
	<bug>
		<id>19219</id>
		<title>Actuator does not display immutable configuration properties when using @Validated</title>
		<body>Spring Boot: 2.2.1.RELEASE Operating System: Mac OS 10.14.6 (Mojave) Kotlin 1.3.60  When I added `@Validated` annotation to an immutable configuration properties class (using `@ConstructorBinding`), actuator `configprops` does not display its fields.  For example: ```kotlin @Validated @ConfigurationProperties(prefix = "prop.validated") @ConstructorBinding data class ValidatedProp(     val field: String ) ```  actuator does not display its fields: ``` "prop.validated-com.example.demo2.ValidatedProp": {   "prefix": "prop.validated",   "properties": {} } ```  This configuration properties class is correctly initialized and not impacted in my application.  When I remove either `@Validated` or `@ConstructorBinding`, actuator seems to display its properties correctly.  Here is my example project: [demo2.zip](https://github.com/spring-projects/spring-boot/files/3920392/demo2.zip)  </body>
		<created>2019-12-04 06:53:48</created>
		<closed>2019-12-04 22:43:12</closed>
	</bug>
	<bug>
		<id>19216</id>
		<title>Constructor binding fails when configuration class has a generic field with type parameter java.util.Map</title>
		<body>Forward port of issue #19156 to 2.3.0.M1.</body>
		<created>2019-12-03 17:30:54</created>
		<closed>2019-12-03 17:31:10</closed>
	</bug>
	<bug>
		<id>19194</id>
		<title>Non-public property in Saml2RelyingPartyProperties' Registration class</title>
		<body>I was trying to use the properties set in the YAML file through the `Registration` class inside `Saml2RelyingPartyProperties` class.  The problem is that the method has only package visibility and is not public.  ``` public Signing getSigning() { return this.signing; }  --&gt;Identityprovider getIdentityprovider() { return this.identityprovider; }  public static class Signing { ```  P.S. I'm not sure if there is a reason to not make this public.</body>
		<created>2019-11-29 15:29:11</created>
		<closed>2019-12-30 16:02:15</closed>
	</bug>
	<bug>
		<id>19192</id>
		<title>DataSource url property is ignored when there is no connection pool</title>
		<body>When there are multiple drivers on the classpath (e.g. h2 and postgres) and no connection pool is present. Then `spring.datasource.url` is not used, instead the embedded database is used.  I would expect that the datasource that is created is connected with the provided datasource URL.   I was debugging this a bit and from the `DataSourceAutoConfiguration` the `PooledDataSourceConfiguration` is not active since there is no connection pool. This means that `EmbeddedDatabaseConfiguration` would be active leading to `EmbeddedDataSourceConfiguration` to create the datasource and that one then creates `EmbeddedDatabase`.   This has clearly been an error on our side (forgetting to add the connection pool).   I'd suggest that the `EmbeddedDataSourceConfiguration` is actually renamed to `NonPooledDataSourceConfiguration` and then based on whether a datasource url is defined or not a `SimpleDriverDataSource` is used or the current behaviour is kept. </body>
		<created>2019-11-29 11:50:44</created>
		<closed>2020-02-18 16:00:29</closed>
	</bug>
	<bug>
		<id>19191</id>
		<title>Liquibase actuator endpoint does not give correct information when multiple databases are used in one project</title>
		<body>Forward port of issue #19171 to 2.3.0.M1.</body>
		<created>2019-11-29 09:55:31</created>
		<closed>2019-11-29 09:55:54</closed>
	</bug>
	<bug>
		<id>19190</id>
		<title>Liquibase actuator endpoint does not give correct information when multiple databases are used in one project</title>
		<body>Forward port of issue #19171 to 2.2.2.</body>
		<created>2019-11-29 09:52:38</created>
		<closed>2019-11-29 09:55:53</closed>
	</bug>
	<bug>
		<id>19169</id>
		<title>Conditions evaluation report mistakenly prints '@ConditionalOnBean' for negative matches</title>
		<body>Conditions evaluation report wrongly reports `@ConditionalOnMissingBean` conditions as if it was `@ConditionalOnBean` condition for negative matches.  Example:  ``` ============================ CONDITIONS EVALUATION REPORT ============================  ... skipped text ...  Negative matches: -----------------  ... skipped text ...     UserDetailsServiceAutoConfiguration:       Did not match:          - @ConditionalOnBean (types: org.springframework.security.authentication.AuthenticationManager,org.springframework.security.authentication.AuthenticationProvider,org.springframework.security.core.userdetails.UserDetailsService,org.springframework.security.oauth2.jwt.JwtDecoder,org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector; SearchStrategy: all) found beans of type 'org.springframework.security.authentication.AuthenticationManager' authenticationManager and found beans of type 'org.springframework.security.core.userdetails.UserDetailsService' myUserDetailsService and found beans of type 'org.springframework.security.authentication.AuthenticationProvider' anonymousUserAuthenticationProvider, myAuthenticationProvider (OnBeanCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition) ```  Here, we see in the report `Did not match: @ConditionalOnBean...` where it is actually a report for `@ConditionalOnMissingBean` condition from `UserDetailsServiceAutoConfiguration` class.  So, it works right, but mistakenly prints `@ConditionalOnBean` instead of `@ConditionalOnMissingBean`.  --- Spring Boot 2.2.1.RELEASE</body>
		<created>2019-11-28 01:40:54</created>
		<closed>2020-02-11 08:23:59</closed>
	</bug>
	<bug>
		<id>19156</id>
		<title>Constructor binding fails when configuration class has a generic field with type parameter java.util.Map</title>
		<body>Spring Boot: 2.2.1.RELEASE Operating System: Mac OS 10.14.6 (Mojave) Kotlin 1.3.60  In my application, I have a configuration class with generic field, but this does not work with `@ConstructorBinding` when type parameter is `java.util.Map`:  ```kotlin @ConfigurationProperties(prefix = "demo.prop") @ConstructorBinding data class ConstructorBindingPropWithGeneric(@NestedConfigurationProperty var field: GenericObj&lt;Map&lt;String, String&gt;&gt;) {      data class GenericObj&lt;T&gt;(         val subField: T     )  } ```  I was using following declaration before `@ConstructorBinding`, and it was working:  ```kotlin @ConfigurationProperties(prefix = "demo.prop") class OldStylePropWithGeneric {      @NestedConfigurationProperty     var field: GenericObj&lt;Map&lt;String, String&gt;&gt;? = null      class GenericObj&lt;T&gt; {         var subField: T? = null     }  } ```   I think `@ConstructorBinding` should work in this case too.   Example project: [demo1.zip](https://github.com/spring-projects/spring-boot/files/3896151/demo1.zip)</body>
		<created>2019-11-27 09:56:55</created>
		<closed>2019-12-03 17:31:09</closed>
	</bug>
	<bug>
		<id>19146</id>
		<title>Liquibase actuator does not give correct information when multiple databases are used in one project</title>
		<body> Spring Boot 2.2.1.RELEASE  Operating System Windows 10 JVM 1.8  When in a springboot project multiple databases are used then: - springboot liquibase rolls out changes but... - when accessing the liquibase acuator it only shows the executed changelog for one of the liquibase beans.  In org.springframework.boot.actuate.liquibase.LiquibaseEndpoint the following code seems the problem  ```java @ReadOperation public ApplicationLiquibaseBeans liquibaseBeans() { ApplicationContext target = this.context; Map&lt;String, ContextLiquibaseBeans&gt; contextBeans = new HashMap&lt;&gt;(); while (target != null) { Map&lt;String, LiquibaseBean&gt; liquibaseBeans = new HashMap&lt;&gt;(); DatabaseFactory factory = DatabaseFactory.getInstance(); StandardChangeLogHistoryService service = new StandardChangeLogHistoryService(); this.context.getBeansOfType(SpringLiquibase.class) .forEach((name, liquibase) -&gt; liquibaseBeans.put(name, createReport(liquibase, service, factory))); ApplicationContext parent = target.getParent(); contextBeans.put(target.getId(), new ContextLiquibaseBeans(liquibaseBeans, (parent != null) ? parent.getId() : null)); target = parent; } return new ApplicationLiquibaseBeans(contextBeans); } ```  Especially:   ```java StandardChangeLogHistoryService service = new StandardChangeLogHistoryService(); this.context.getBeansOfType(SpringLiquibase.class) .forEach((name, liquibase) -&gt; liquibaseBeans.put(name, createReport(liquibase, service, factory))); ```  cases the problem. As stated in the code for each bean a report is created, but the same StandardChangeLogHistoryService is used each time, while it should be a new service for each call.  Example code is copied. [liquibasedemo.zip](https://github.com/spring-projects/spring-boot/files/3892086/liquibasedemo.zip)</body>
		<created>2019-11-26 13:44:41</created>
		<closed>2019-11-29 09:25:13</closed>
	</bug>
	<bug>
		<id>19087</id>
		<title>Use DeferredLog in CloudFoundryVcapEnvironmentPostProcessor</title>
		<body>Forward port of issue #19027 to 2.3.0.M1.</body>
		<created>2019-11-21 12:43:24</created>
		<closed>2019-11-21 12:43:34</closed>
	</bug>
	<bug>
		<id>19086</id>
		<title>Use DeferredLog in CloudFoundryVcapEnvironmentPostProcessor</title>
		<body>Forward port of issue #19027 to 2.2.2.</body>
		<created>2019-11-21 12:43:00</created>
		<closed>2019-11-21 12:43:34</closed>
	</bug>
	<bug>
		<id>19082</id>
		<title>Spring Boot DevTools YAML property loading does not work</title>
		<body>Forward port of issue #19081 to 2.3.0.M1.</body>
		<created>2019-11-21 01:31:20</created>
		<closed>2019-11-21 01:31:41</closed>
	</bug>
	<bug>
		<id>19081</id>
		<title>Spring Boot DevTools YAML property loading does not work</title>
		<body>Version:  2.2.0.RELEASE and 2.2.1.RELEASE  After loading ~/.config/spring-boot/spring-boot-devtools.yaml  (or the yml equivalent) the properties do not appear correct.  The key seems to be the text on the line as it appears and without it's nested key value.  i.e. ```yaml spring:   profiles:     - production ``` Will make a map like this: ``` "spring": "" "profiles": "" "-": "production" ```  I believe that the problem lies in the fact that **org.springframework.boot.devtools.env.DevToolsHomePropertiesPostProcessor** will call **org.springframework.core.io.support.PropertiesLoaderUtils#loadProperties** to load all DevTools properties.  This component seems to only handle XML and Property formatted files.  It does not use the **org.springframework.boot.env.PropertySourceLoader** framework like **org.springframework.boot.context.config.ConfigFileApplicationListener** does. </body>
		<created>2019-11-20 20:37:39</created>
		<closed>2019-11-21 01:31:40</closed>
	</bug>
	<bug>
		<id>19060</id>
		<title>HealthWebEndpointMapper should expose details if right authority present</title>
		<body>Forward port of issue #18998 to 2.3.0.M1.</body>
		<created>2019-11-19 19:55:45</created>
		<closed>2019-11-19 19:56:09</closed>
	</bug>
	<bug>
		<id>19059</id>
		<title>HealthWebEndpointMapper should expose details if right authority present</title>
		<body>Forward port of issue #18998 to 2.2.2.</body>
		<created>2019-11-19 19:52:37</created>
		<closed>2019-11-19 19:56:09</closed>
	</bug>
	<bug>
		<id>18998</id>
		<title>HealthWebEndpointMapper should expose details if right authority present</title>
		<body>This is a regression of #8471 (which was resolved in d4b52a3538372d837d0f0b7701f1a3f9f7bbfab1): according to the resolution of that issue, the `health` actuator endpoint should check if the supplied "role" is actually an authority (not prefixed with "ROLE_") when deciding whether or not to show health-check details. This appears to have been fixed in the 1.5.2 release, but as of 2.1.7 (and in the latest HealthWebEndpointResponseMapper as of today, if I am reading it correctly), only roles are allowed, not authorities.  https://github.com/spring-projects/spring-boot/blob/f61da8b72398d8e22baf7108bcd5fa76b9fd5cd2/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java#L107</body>
		<created>2019-11-12 18:40:38</created>
		<closed>2019-11-19 19:56:08</closed>
	</bug>
	<bug>
		<id>18941</id>
		<title>Spring Boot - Maven Plugin shutdown broken</title>
		<body>Forward port of issue #18936 to 2.3.0.M1.</body>
		<created>2019-11-08 13:26:53</created>
		<closed>2019-11-08 13:27:12</closed>
	</bug>
	<bug>
		<id>18940</id>
		<title>Spring Boot - Maven Plugin shutdown broken</title>
		<body>Forward port of issue #18936 to 2.2.2.</body>
		<created>2019-11-08 13:26:08</created>
		<closed>2019-11-08 13:27:12</closed>
	</bug>
	<bug>
		<id>18936</id>
		<title>Spring Boot - Maven Plugin shutdown broken</title>
		<body>As of 2.2.0 the shutdown of a spring-boot application is broken and results in a Build Failure when executed.  I ran ```mvnw clean install package spring-boot:run``` as a command.  In attachment the executable file of a boot from https://start.spring.io/ and the resulted build fail. I ran with Java 8, and the Maven wrapper included in the project.   [output.txt](https://github.com/spring-projects/spring-boot/files/3822172/output.txt) </body>
		<created>2019-11-07 23:23:38</created>
		<closed>2019-11-08 13:27:11</closed>
	</bug>
	<bug>
		<id>18917</id>
		<title>Nested object is not initialized if no matching property is defined with constructor binding</title>
		<body>Consider the following example:  ```java @ConfigurationProperties("acme") @ConstructorBinding public class AcmeProperties {  private final Security security;  public AcmeProperties(Security security) { this.security = security; }  public Security getSecurity() { return this.security; }  public static class Security {  private final String username;  private final String password;  public Security(@DefaultValue("user") String username, String password) { this.username = username; this.password = password; }  public String getUsername() { return this.username; }  public String getPassword() { return this.password; } } } ```  If this object is bound and no `acme.security.*` property is available in the environment, `null` is provided to the top-level constructor. If a matching property is found, the `Security` type is initialized and provided to the constructor.  This is consistent with what we do with JavaBean binding. The main difference here is that the object may have default values assigned to the constructor (here a default `user`). One solution would be to provide an instance no matter what. The alternative is for the user to check if the constructor provided a `null` instance and then create a default `Security`.   There are pros and cons for each:  * If we create a default instance no matter what, we no longer have the signal that the user didn't provide any key for that nested `Security` object * If we don't care about that, we have to check for `null` and then create an instance with a copy paste of the `@DefaultValue` we already provided.  A middle-ground would be to make this configurable, perhaps using `@Nullable` as we do for actuator endpoints.</body>
		<created>2019-11-07 12:55:27</created>
		<closed>2020-04-21 14:01:12</closed>
	</bug>
	<bug>
		<id>18913</id>
		<title>BasicJsonParser does not handle whitespace between [ and { correctly</title>
		<body>Forward port of issue #18911 to 2.2.2.</body>
		<created>2019-11-07 09:55:15</created>
		<closed>2019-11-07 09:58:53</closed>
	</bug>
	<bug>
		<id>18912</id>
		<title>@ServletComponentScan does not work with a component index</title>
		<body>Forward port of issue #18910 to 2.2.2.</body>
		<created>2019-11-07 09:33:29</created>
		<closed>2019-11-07 09:34:25</closed>
	</bug>
	<bug>
		<id>18911</id>
		<title>BasicJsonParser does not handle whitespace between [ and { correctly</title>
		<body>Hi team, there is a bug in BasicJsonParser.  The following JSON is **not** correctly parsed: `{"id": "393768460", "description": "claimId",    "notifications": [        {            "code": "003005",            "type": "NBV",            "description": "Corrosión activa asociada al riesgo de la póliza",            "field": "policyNumber",            "priority": "",            "obfuscated": "false",            "resolvingGroup": ["TI","SC","HS","IP","MA","CC"]        }    ]}`  But the following JSON is correctly parsed: `{"id": "393768460", "description": "claimId",    "notifications": [{            "code": "003005",            "type": "NBV",            "description": "Corrosión activa asociada al riesgo de la póliza",            "field": "policyNumber",            "priority": "",            "obfuscated": "false",            "resolvingGroup": ["TI","SC","HS","IP","MA","CC"]        }    ]}`  The difference between both JSON are the spaces between the "[" and the "{".  I think that the problem is that the "tokenize" function does not eliminate the leading and trailling spaces.  Best regards! </body>
		<created>2019-11-07 08:10:02</created>
		<closed>2019-11-07 09:58:52</closed>
	</bug>
	<bug>
		<id>18910</id>
		<title>@ServletComponentScan does not work with a component index</title>
		<body>when ServletComponentRegisteringPostProcessor add @WebServlet, it requires an ScannedGenericBeanDefinition from an ClassPathScanningCandidateComponentProvider.  it works fine without Context-Indexer but wrong with Context-Indexer. ClassPathScanningCandidateComponentProvider will return an AnnotatedGenericBeanDefinition, when their is an spring.components file.  </body>
		<created>2019-11-07 05:03:38</created>
		<closed>2019-11-07 09:34:24</closed>
	</bug>
	<bug>
		<id>18889</id>
		<title>Recursive property in @ConfigurationProperties causes java.lang.StackOverflowError when generating metadata</title>
		<body>Forward port of issue #18365 to 2.2.1.</body>
		<created>2019-11-05 15:51:24</created>
		<closed>2019-11-05 15:51:55</closed>
	</bug>
	<bug>
		<id>18882</id>
		<title>Endpoint filter configured on an endpoint's super-class has no effect</title>
		<body>Forward port of issue #17866 to 2.2.1.</body>
		<created>2019-11-05 11:06:41</created>
		<closed>2019-11-05 11:07:14</closed>
	</bug>
	<bug>
		<id>18878</id>
		<title>Dependency relationships created by AbstractDependsOnBeanFactoryPostProcessors cannot be overridden</title>
		<body>Forward port of issue #18362 to 2.2.1.</body>
		<created>2019-11-05 09:58:18</created>
		<closed>2019-11-05 09:58:43</closed>
	</bug>
	<bug>
		<id>18846</id>
		<title>HazelcastHealthContributorAutoConfiguration not bootstrapped</title>
		<body>Hi,  one of the new features of Spring Boot 2.2.0 (Hazelcast Health Indicator) cannot work directly. In fact, there is not entry for the class : `org.springframework.boot.actuate.autoconfigure.hazelcast.HazelcastHealthContributorAutoConfiguration` In the corresponding 'spring.factories' neither import from the others Hazelcast auto-configuration classes.   François  PS: thx again for this great release, with lot's of features useful for me.</body>
		<created>2019-11-03 18:51:13</created>
		<closed>2019-11-04 09:09:21</closed>
	</bug>
	<bug>
		<id>18810</id>
		<title>Constructor binding for nested class with multiple constructors causes BindException </title>
		<body>```java @ConstructorBinding @ConfigurationProperties("test") static class NestedConstructorProperties {    private final String name;    private final Nested nested;    NestedConstructorProperties(String name, Nested nested) {     this.name = name;     this.nested = nested;   }    String getName() {     return this.name;   }    Nested getNested() {     return this.nested;   }    static class Nested {       private int age;      @ConstructorBinding     Nested(int age) {       this.age = age;     }      Nested() {      }      int getAge() {       return this.age;     }    }  } ```</body>
		<created>2019-10-30 00:35:19</created>
		<closed>2019-11-05 22:45:20</closed>
	</bug>
	<bug>
		<id>18805</id>
		<title>Reactive health indicators are ignored in MVC applications</title>
		<body>The reactive always returns the http status code 200, even if the health check is down. The response body contains the correct status code.  Response ``` &lt; 200 OK OK &lt; Date: [Tue, 29 Oct 2019 16:42:00 GMT] &lt; Content-Type: [application/json]  {"body":{"status":"DOWN"},"status":503} ``` </body>
		<created>2019-10-29 16:56:03</created>
		<closed>2019-10-30 22:13:42</closed>
	</bug>
	<bug>
		<id>18767</id>
		<title>Incorrect target type with wildcard List</title>
		<body>When constructor for `ConfigurationProperties` bean has wildcard parameters, Boot doesn't apply converters, but instead keeps String as-is.  For example, if parameter is `Map&lt;String, ? extends List&lt;? extends InetAddress&gt;&gt;` (this is how Kotlin translates `List&lt;String, Map&lt;InetAddress&gt;&gt;` into Java bytecode), Boot will pass into constructor a map of lists of strings, while it should have converted those strings into `InetAddress`es.  Reproducer:  ```java package net.example;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.context.properties.ConstructorBinding; import org.springframework.context.ConfigurableApplicationContext;  import java.net.InetAddress; import java.util.List; import java.util.Map;  @SpringBootApplication public class ExampleApplication {      public static void main(String[] args) {         ConfigurableApplicationContext ctx = SpringApplication.run(ExampleApplication.class, args);         ExampleProperties properties = ctx.getBean(ExampleProperties.class);          // OK.         System.out.println(properties.getAddresses1().get("localhost").get(0).getHostAddress());          // ClassCastException: class java.lang.String cannot be cast to class java.net.InetAddress         System.out.println(properties.getAddresses2().get("localhost").get(0).getHostAddress());     }      @ConstructorBinding     @ConfigurationProperties("example")     public static class ExampleProperties {         private final Map&lt;String, List&lt;InetAddress&gt;&gt; addresses1;         private final Map&lt;String, ? extends List&lt;? extends InetAddress&gt;&gt; addresses2;          public ExampleProperties(Map&lt;String, List&lt;InetAddress&gt;&gt; addresses1, Map&lt;String, ? extends List&lt;? extends InetAddress&gt;&gt; addresses2) {             this.addresses1 = addresses1;             this.addresses2 = addresses2;         }          public Map&lt;String, List&lt;InetAddress&gt;&gt; getAddresses1() {             return addresses1;         }          public Map&lt;String, ? extends List&lt;? extends InetAddress&gt;&gt; getAddresses2() {             return addresses2;         }     }  } ```  ```yaml example:     addresses1:         localhost:             -   127.0.0.1     addresses2:         localhost:             -   127.0.0.1 ```</body>
		<created>2019-10-28 12:45:09</created>
		<closed>2020-01-03 19:22:23</closed>
	</bug>
	<bug>
		<id>18749</id>
		<title>Failure analysis description for BeanDefinitionOverrideExceptions includes useless information when a bean definition has no resource description</title>
		<body>Forward port of issue #18721 to 2.2.1.</body>
		<created>2019-10-25 13:38:46</created>
		<closed>2019-10-25 13:41:17</closed>
	</bug>
	<bug>
		<id>18748</id>
		<title>Reactive HealthContributors do not hide non-reactive ones</title>
		<body>Lettuce connection factory, which is both reactive and non-reactive, has two active health indicators when running Boot 2.2.0.  Output of `/actuator/health`:  ``` {     "status":"UP",    "components":{        "redis":{           "status":"UP",          "details":{              "cluster_size":2,             "slots_up":16384,             "slots_fail":0          }       },       "redisReactive":{           "status":"UP",          "details":{              "version":"5.0.5"          }       }    } } ```  Only reactive indicator was active in Boot 2.1.</body>
		<created>2019-10-25 11:29:43</created>
		<closed>2019-10-28 11:24:41</closed>
	</bug>
	<bug>
		<id>18721</id>
		<title>Failure analysis description for BeanDefinitionOverrideExceptions includes useless information when a bean definition has no resource description</title>
		<body>Hello, I come to report that the following bug can be reproduced (Spring Boot 2.2.0.RELEASE):  1 - Use the dependencies:   spring-boot-starter-data-jdbc, spring-boot-starter-data-jpa, spring-boot-starter-web, spring-boot-devtools, mysql-connector-java, lombok, spring-boot-starter-test, junit-vintage-engine  2 - Create a repository interface and extending entity JpaRepository  3 - Following error is displayed when starting the spring application using Spring Tool Suite 4:           **The bean 'personRepository', defined in null, could not be registered. A bean with that name has already been defined in null and overriding is disabled.**  4 - When removing the **spring-boot-devtools** dependency the error no longer occurs.  5 - When starting the spring application with the spring-boot-devtools dependency it is possible to verify that the application's Main method is invoked twice.  6 - Example:  `public static void main (String [] args) { System.out.println ("test"); SpringApplication.run (XXXApplication.class, args); }`  [example.zip](https://github.com/spring-projects/spring-boot/files/3765319/example.zip) </body>
		<created>2019-10-24 01:59:00</created>
		<closed>2019-10-25 13:41:17</closed>
	</bug>
	<bug>
		<id>18714</id>
		<title>configprops error when jobscope defined in configuration</title>
		<body>I recently update my spring boot app 2.1.9 to 2.2.0 that use Spring Batch. When i'm calling "configprops" from actuator endpoint, an exception is throw : Scope 'job' is not active for the current thread  I reproduce the bug : https://github.com/guillaumeyan/bugspringbatch (just launch the test). Original project come from https://github.com/spring-guides/gs-batch-processing/tree/master/complete  ``` ExceptionHandlerExceptionResolver[199] - Resolved [org.springframework.beans.factory.BeanCreationException:  Error creating bean with name 'scopedTarget.dossierToDiagnosticReader': Scope 'job' is not active for the current thread;  consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No context holder available for job scope] ```</body>
		<created>2019-10-23 19:46:51</created>
		<closed>2019-10-24 02:50:15</closed>
	</bug>
	<bug>
		<id>18704</id>
		<title>Confusing error message if property not found when ConstructorBinding is used </title>
		<body>When executing the following application:  ``` package com.example.demo  import org.springframework.boot.autoconfigure.SpringBootApplication import org.springframework.boot.context.properties.ConfigurationProperties import org.springframework.boot.context.properties.ConstructorBinding import org.springframework.boot.runApplication  @SpringBootApplication class BadErrorMessageApplication  @ConfigurationProperties(prefix = "test") @ConstructorBinding class MyProperties(val foo: String, val bar: String)  fun main(args: Array&lt;String&gt;) {     runApplication&lt;BadErrorMessageApplication&gt;(*args) } ```  with the following `application.yml` file:  ``` test:   # foo: hello   bar: world ```  where `foo` is intentionally commented out, the application fails to start (as expected), but with a confusing error message:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'test' to com.example.demo.MyProperties:      Property: test.bar     Value: world     Origin: class path resource [application.yml]:3:8     Reason: Parameter specified as non-null is null: method com.example.demo.MyProperties.&lt;init&gt;, parameter foo  Action:  Update your application's configuration ```  The `Reason` part is correct: the parameter foo is missing.  But the `Property` is incorrect: what is missing is the property `foo`, not the property `bar`. And the `Value: world` is irrelevant to the problem, too.   </body>
		<created>2019-10-23 09:35:58</created>
		<closed>2019-10-25 23:08:02</closed>
	</bug>
	<bug>
		<id>18695</id>
		<title>It is unclear that server.tomcat.max-http-post-size and server.jetty.max-http-post-size only apply to POSTed form content</title>
		<body>Forward port of issue #18566 to 2.2.1.</body>
		<created>2019-10-22 23:20:23</created>
		<closed>2019-10-22 23:20:45</closed>
	</bug>
	<bug>
		<id>18687</id>
		<title>NPE is thrown from /actuator/health with an empty composite contributor</title>
		<body>Here's a pom for an app that will reproduce the problem:  ```xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;cloud-stream-health-npe&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;cloud-stream-health-npe&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;  &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Hoxton.M3&lt;/spring-cloud.version&gt; &lt;/properties&gt;  &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-stream&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;  &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;  &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;name&gt;Spring Milestones&lt;/name&gt; &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt;  &lt;/project&gt; ```  Starting the app and accessing `/actuator/health` will result in a `NullPointerException`:  ``` 2019-10-22 16:58:59.360 ERROR 6623 --- [nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause  java.lang.NullPointerException: null at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_181] at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[na:1.8.0_181] at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[na:1.8.0_181] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_181] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_181] at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_181] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_181] at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_181] at org.springframework.boot.actuate.health.HealthEndpointSupport.getCompositeHealth(HealthEndpointSupport.java:136) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.aggregateContributions(HealthEndpointWebExtension.java:98) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.aggregateContributions(HealthEndpointWebExtension.java:42) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateHealth(HealthEndpointSupport.java:124) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:103) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:81) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:68) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.health(HealthEndpointWebExtension.java:80) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.health.HealthEndpointWebExtension.health(HealthEndpointWebExtension.java:69) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181] at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) ~[spring-core-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:77) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$ServletWebOperationAdapter.handle(AbstractWebMvcEndpointHandlerMapping.java:305) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(AbstractWebMvcEndpointHandlerMapping.java:388) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181] at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.0.RELEASE.jar:5.2.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108) ~[spring-boot-actuator-2.2.0.RELEASE.jar:2.2.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.0.RELEASE.jar:5.2.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579) [tomcat-embed-core-9.0.27.jar:9.0.27] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.27.jar:9.0.27] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.27.jar:9.0.27] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181] ```  The problem appears to be that `BindersHealthContributor` is an empty `NamedContributors`. When getting its aggregate health `contributions` is left empty so `null` is returned. This `null` entry is then put into the outer `contributions` map with `binders` as its key. Aggregation of these values then fails due to the presence of the `null` in the map's values.</body>
		<created>2019-10-22 16:06:42</created>
		<closed>2019-10-23 22:18:23</closed>
	</bug>
	<bug>
		<id>18674</id>
		<title>Enabling configuration properties scanning by default prevents conditional registration of @ConfigurationProperties-annoted types that are found by scanning</title>
		<body>Hello,  We were trying to migrate from 2.1.9 to 2.2.0 for our applications last week and encountered a startup failure due to a configuration validation failure. In short, if we are using `@EnableConfigurationProperties` combined with `@ConditionalOnProperty` for some beans, the new version is not respecting the conditional on the config part.  **Here is a tiny example:**  If we add this component to any Spring Boot application, it will fail to start with 2.2.0.  ``` @Component @ConditionalOnProperty(prefix = "foo", name = "enabled") @EnableConfigurationProperties(FooBarConfig.class) public class FooBar {      public FooBar() {         Logger.getGlobal().info("Starting FooBar...");     }      @ConfigurationProperties(prefix = "foo")     @Validated     static class FooBarConfig {          @NotNull         String bar;          public void setBar(String bar) {             this.bar = bar;         }      }  } ```  **Expected behavior:** The bean initialization of `FooBar` and `FooBarConfig` should be skipped because `@ConditionalOnProperty` doesn't match.  **Actual behavior:** `FooBar` is skipped but the `FooBarConfig` keeps initializing thus failed startup.</body>
		<created>2019-10-21 11:52:08</created>
		<closed>2019-11-04 16:40:44</closed>
	</bug>
	<bug>
		<id>18670</id>
		<title>Binding fails in presence of a synthetic constructor</title>
		<body>There are cases that configuration property binding does not work when integrating 3rd party configuration class and it deploy to the application server as war file(= When JndiPropertySource is enabled).  ## Versions  * 2.2.0.RELEASE(2.2.0.M5+) ※2.2.0.M4 work fine  ## Details For example, following properties class does not work.  (As actually, MyBatis's configuration class matches this pattern...)  ```java package com.example;  import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.context.properties.NestedConfigurationProperty;  @ConfigurationProperties(prefix = "my") public class MyProperties {    private String name;    @NestedConfigurationProperty   private ThirdPartyConfiguration configuration; // ### Third party class    public void setName(String name) {     this.name = name;   }    public String getName() {     return name;   }    public void setConfiguration(ThirdPartyConfiguration configuration) {     this.configuration = configuration;   }    public ThirdPartyConfiguration getConfiguration() {     return configuration;   }  } ```  ```java package com.example;  public class ThirdPartyConfiguration {    private String encoding;    private boolean enabled;    private final List&lt;ResultMap&gt; resultMaps = new ArrayList&lt;&gt;(); // ### Collection    public void setEncoding(String encoding) {     this.encoding = encoding;   }    public String getEncoding() {     return encoding;   }    public void setEnabled(boolean enabled) {     this.enabled = enabled;   }    public boolean isEnabled() {     return enabled;   }    public Collection&lt;ResultMap&gt; getResultMaps() {     return resultMaps;   }    public void addResultMap(ResultMap rm) {     resultMaps.add(rm);   }  } ```  ```java package com.example;  public class ResultMap {   private String name;   private String option;    private ResultMap() { // ### Define private (If define public, this issue does not occurred)   }    public String getName() {     return name;   }    public String getOption() {     return option;   }    public static class Builder { // ### Builder class     private final ResultMap resultMap;      public Builder(String name) {       resultMap = new ResultMap();       resultMap.name = name;     }      public Builder option(String option) {       resultMap.option = option;       return this;     }      public ResultMap build() {       return resultMap;     }   } } ```  ## StackTrace  ``` ... [INFO] [talledLocalContainer] Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'my.configuration.result-maps[0]' to com.example.ResultMap [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:337) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:297) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$null$1(Binder.java:385) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:519) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.access$1000(Binder.java:486) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:386) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:106) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:86) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:71) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.CollectionBinder.bindAggregate(CollectionBinder.java:49) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$3(Binder.java:388) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:543) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.access$200(Binder.java:486) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:388) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:349) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:293) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$4(Binder.java:421) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:88) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:77) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$5(Binder.java:425) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:543) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withDataObject(Binder.java:529) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:486) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindDataObject(Binder.java:423) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:364) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:293) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$4(Binder.java:421) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:88) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:77) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$5(Binder.java:425) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:543) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withDataObject(Binder.java:529) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:486) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindDataObject(Binder.java:423) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:364) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:293) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:281) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:211) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:198) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:89) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:107) [INFO] [talledLocalContainer]   ... 60 more [INFO] [talledLocalContainer] Caused by: java.lang.IllegalStateException: Failed to extract parameter names for com.example.ResultMap(com.example.ResultMap$1) [INFO] [talledLocalContainer]   at org.springframework.util.Assert.state(Assert.java:94) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder$DefaultValueObject.parseConstructorParameters(ValueObjectBinder.java:178) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder$DefaultValueObject.&lt;init&gt;(ValueObjectBinder.java:173) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder$DefaultValueObject.get(ValueObjectBinder.java:218) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder$DefaultValueObject.get(ValueObjectBinder.java:206) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder$ValueObject.get(ValueObjectBinder.java:112) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.ValueObjectBinder.bind(ValueObjectBinder.java:51) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.lambda$bindDataObject$5(Binder.java:425) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:543) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.withDataObject(Binder.java:529) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:486) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindDataObject(Binder.java:423) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:364) [INFO] [talledLocalContainer]   at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:293)  ```  ## Related Issue  * #17098   ## Reproduce project  * [spring-boot-gh-18670.zip](https://github.com/spring-projects/spring-boot/files/3750219/spring-boot-gh-18670.zip)  ### How to reproduce  ``` $ ./mvnw package corgo:run ``` </body>
		<created>2019-10-21 10:17:27</created>
		<closed>2019-11-05 22:45:20</closed>
	</bug>
	<bug>
		<id>18656</id>
		<title>Different default profiles are used for loaded profile-specific configuration and for enabling profile-specific beans when spring.profile.default is configured in a config file</title>
		<body>**Environment**  Spring-boot : 2.1.7.RELEASE OS : Ubuntu 16.04  From this issue #1219 :  After application is loaded, Setting `spring.profile.default` value seems it's not working. &gt; You can't change the default profile by declaring it in a config file. It has to be in place before the config files are read.  However, when I pass a value in `spring.profiles.default` in `application.properties`, the spring-boot console shows  &gt; No active profile set, falling back to default profiles: dev  The weird thing is  `dev` profile wasn't actually activated.   I would expect if the default profile have set it up in `application.properties`, the console should display :  &gt; No active profile set, falling back to default profiles: default </body>
		<created>2019-10-18 11:34:54</created>
		<closed>2020-07-31 20:14:37</closed>
	</bug>
	<bug>
		<id>18653</id>
		<title>@TestConfiguration disables proxying of @Bean methods</title>
		<body>After upgrade to Spring Boot v2.2 the test configuration class which is annotated with `@TestConfiguration` is not proxied by CGLIB anymore, thus calling `@Bean` methods return new instances every time.  After quick search in Spring Framework cores [changes](https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#core-container) gives a hint:  &gt; [...]  or not finding annotations anymore where they have previously been found accidentally.   The corresponding [commit](https://github.com/spring-projects/spring-framework/commit/fd8fa301a69e9ce586769c12b7572255d0f83f3c) in Spring Framework. </body>
		<created>2019-10-18 10:41:09</created>
		<closed>2019-10-21 12:45:03</closed>
	</bug>
	<bug>
		<id>18652</id>
		<title>ConfigurationProperties with constructor binding cannot be mocked</title>
		<body>I have migrated https://spring.io/guides/tutorials/spring-boot-kotlin/ to Spring Boot `2.2.0.RELEASE` and updated it to leverage immutable configuration properties. As discussed with @snicoll, `@ConfigurationProperties` are not scanned by default in test slices, so I have to add to my `@WebMvcTest` test either `@EnableConfigurationProperties(BlogProperties::class)` or mock `BlogProperties` bean.  My test works with `@EnableConfigurationProperties(BlogProperties::class)` but fails if I try to mockk `BlogProperties` bean (in my case with `@MockkBean` from https://github.com/Ninja-Squad/springmockk) with following error:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.example.blog.BlogProperties#0': @EnableConfigurationProperties or @ConfigurationPropertiesScan must be used to add @ConstructorBinding type com.example.blog.BlogProperties ```</body>
		<created>2019-10-18 10:25:33</created>
		<closed>2019-11-06 05:57:28</closed>
	</bug>
	<bug>
		<id>18649</id>
		<title>Actuator health check groups allow to specify checks only in lower case</title>
		<body>Spring Boot **2.2.0.RELEASE** provides possibility to separate health checks by different groups  ([docs](https://docs.spring.io/spring-boot/docs/2.2.0.BUILD-SNAPSHOT/reference/html/production-ready-features.html#health-groups))  However is's impossible to add a health check with a camel case name (e.g. the built-in discSpace health check)  because its name is trimmed and converted to lower case before checking if the group contains it or not. Take a look at the [IncludeExcludeGroupMemberPredicate](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/IncludeExcludeGroupMemberPredicate.java)  class (`clean` method).  If the following configuration is used only the `ping` health check is executed. ``` management:   endpoint:     health:       group:         custom:           include: diskSpace,ping ```</body>
		<created>2019-10-18 09:19:19</created>
		<closed>2019-10-29 09:04:52</closed>
	</bug>
	<bug>
		<id>18636</id>
		<title>Immutable configuration properties not shown by Actuator</title>
		<body>From my initial test drive of the freshly released Spring Boot _2.2.0.RELEASE_ it seems that `@ConfigurationProperties` beans declared as immutable with `@ConstructorBinding` show up empty in the Actuator `configprops` endpoint. Example:  ``` "ftp-af.FtpProperties": {   "prefix": "ftp",   "properties": {} } ```  The beans are however correctly bound and their use in other beans is not impacted.  Normal, mutable beans are correctly displayed with their attributes. Example: ``` "ftp-af.FtpProperties": {   "prefix": "ftp",   "properties": {     "host": "andromeda",     "dir": "/path/to/files",     "user": "JohnSmith",     "port": 2121,     "passw": "Unknown"   } } ```</body>
		<created>2019-10-17 13:27:42</created>
		<closed>2019-10-24 12:46:04</closed>
	</bug>
	<bug>
		<id>18618</id>
		<title>Deprecate server.connection-timeout and create server-specific configuration keys</title>
		<body>Forward port of issue #18473 to 2.2.0.</body>
		<created>2019-10-16 12:10:16</created>
		<closed>2019-10-16 12:13:47</closed>
	</bug>
	<bug>
		<id>18570</id>
		<title>LegacyReactiveHealthEndpointCompatibilityConfiguration activates in non-reactive application</title>
		<body>After upgrading to Spring Boot 2.2.0.RC1, `io.micrometer:micrometer-registry-statsd` cannot be used without also added a dependency on `org.springframework.boot:spring-boot-starter-webflux`.  To reproduce, create a Spring Initializr project with Spring Web and Spring Boot Actuator. Alter the dependencies of the generated project to: ``` implementation 'org.springframework.boot:spring-boot-starter-web'         implementation 'io.micrometer:micrometer-registry-statsd'         implementation 'org.springframework.boot:spring-boot-starter-actuator' ``` With Spring Boot 2.1.9 these dependencies are sufficient for creating an application that can publish micrometer stats to statsd, but after upgrading to 2.2.0.RC1 the resulting project fails with:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of method reactiveHealthIndicatorRegistry in org.springframework.boot.actuate.autoconfigure.health.LegacyHealthEndpointCompatibilityConfiguration$LegacyReactiveHealthEndpointCompatibilityConfiguration required a bean of type 'org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry' that could not be found.  The following candidates were found but could not be injected: - Bean method 'reactiveHealthContributorRegistry' in 'ReactiveHealthEndpointConfiguration' not loaded because @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'   Action:  Consider revisiting the entries above or defining a bean of type 'org.springframework.boot.actuate.health.ReactiveHealthContributorRegistry' in your configuration. ```  It turns out that `LegacyHealthEndpointCompatibilityConfiguration#LegacyReactiveHealthEndpointCompatibilityConfiguration` is `@ConditionalOnClass(Mono.class)`, however this particular `Mono` is `io.micrometer.shaded.reactor.core.publisher.Mono`.  The required bean `ReactiveHealthContributorRegistry` is supposed to be created in `ReactiveHealthEndpointConfiguration`, however that class is `@ConditionalOnClass(Flux.class)` with `Flux` being the regular non-shaded version. </body>
		<created>2019-10-13 12:49:57</created>
		<closed>2019-10-14 08:14:48</closed>
	</bug>
	<bug>
		<id>18523</id>
		<title>Use of CGLib proxies is only auto-configured when AspectJ is on the classpath</title>
		<body>Spring Boot version: 2.1.9.RELEASE, 2.2.0.RELEASE Sample project: https://github.com/amarkevich/spring-boot-jwt-test  There are 2 REST controllers: without `@PreAuthorize` annotation (v1) and with it (v2). v1 service calls passed; v2 failed with different errors.  Workaround: add `spring-boot-starter-aop` as runtime dependency.  Its not clear whats wrong with initial project setup.</body>
		<created>2019-10-07 08:48:14</created>
		<closed>2019-11-04 15:33:11</closed>
	</bug>
	<bug>
		<id>18521</id>
		<title>It is unclear that server.tomcat.max-http-post-size and server.jetty.max-http-post-size only apply to POSTed form content</title>
		<body>The [documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html) describes the following:  ``` server.tomcat.max-http-post-size=2MB # Maximum size of the HTTP post content. ```  However this setting only affects post requests with FORM content, not all post requests. This can lead to confusion for myself and others (as per stackoverflow questions). A more precise description would be helpful, such as:  ``` server.tomcat.max-http-post-size=2MB # Maximum size of the FORM content in an HTTP post request. Non-FORM post requests are unaffected by this property. ```</body>
		<created>2019-10-06 17:46:49</created>
		<closed>2019-10-14 10:58:50</closed>
	</bug>
	<bug>
		<id>18502</id>
		<title>DevTools does not correctly handle encoded URLs found in the Class-Path manifest attribute</title>
		<body>Forward port of issue #18410 to 2.2.0.</body>
		<created>2019-10-03 14:34:56</created>
		<closed>2019-10-03 14:36:24</closed>
	</bug>
	<bug>
		<id>18485</id>
		<title>Bean binding might not be used when more than one constructor exists</title>
		<body>Spring Cloud discovered a recent regression with the binder where the `ValueObjectBinder` is used instead of the `JavaBeanBinder`. They use a pattern like this:  ```java public class Foo {      Foo() {     }      Foo(String name) {         ..     }     // getName / setName  } ```  This allows for properties to be defined in two ways: `test[0]=hello` or `test[0].name=hello`.  In the first instance the `ObjectToObject` converter is used to create the instance. In the second case, bean binding should be used.  The regression only happens then the bound object doesn't have a supplied value (e.g. it's in a list).</body>
		<created>2019-10-02 22:06:36</created>
		<closed>2019-10-02 22:48:14</closed>
	</bug>
	<bug>
		<id>18473</id>
		<title>Deprecate server.connection-timeout and create server-specific configuration keys</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt;  https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html documents `server.connection-timeout` as _"Time that connectors wait for another HTTP request before closing the connection. When not set, the connector's container-specific default is used. Use a value of -1 to indicate no (that is, an infinite) timeout"_.  Support for this property was added for Netty, in Issue https://github.com/spring-projects/spring-boot/issues/15368 / PR https://github.com/spring-projects/spring-boot/pull/15385  This was done using `ChannelOption.CONNECT_TIMEOUT_MILLIS`, which does not implement the described functionality.  As far as I can tell, `CONNECT_TIMEOUT_MILLIS` is the timeout for the TCP connection handshake.  The correct way to implement the documented functionality (i.e. an idle/keep-alive timeout) appears to be using Netty's [IdleStateHandler](https://netty.io/4.0/api/io/netty/handler/timeout/IdleStateHandler.html).  An example of doing this in a `WebServerFactoryCustomizer ` might look something like this:  ```java import io.netty.channel.Channel; import io.netty.channel.ChannelHandlerContext; import io.netty.channel.ChannelInitializer; import io.netty.handler.timeout.IdleStateEvent; import io.netty.handler.timeout.IdleStateHandler; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory; import org.springframework.boot.web.server.WebServerFactoryCustomizer; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  import java.time.Duration; import java.util.concurrent.atomic.AtomicBoolean;  import static java.util.concurrent.TimeUnit.NANOSECONDS;  @Configuration public class NettyConfig {      @Bean     public WebServerFactoryCustomizer&lt;NettyReactiveWebServerFactory&gt; idleTimeoutCustomizer(             @Value("${server.netty.idle-timeout}") Duration idleTimeout     ) {         return factory -&gt;                 factory.addServerCustomizers(server -&gt;                         server.tcpConfiguration(tcp -&gt;                                 tcp.bootstrap(bootstrap -&gt; bootstrap.childHandler(new ChannelInitializer&lt;Channel&gt;() {                                     @Override                                     protected void initChannel(Channel channel) {                                         channel.pipeline().addLast(                                                 new IdleStateHandler(0, 0, idleTimeout.toNanos(), NANOSECONDS) {                                                     private final AtomicBoolean closed = new AtomicBoolean();                                                     @Override                                                     protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) {                                                         if (closed.compareAndSet(false, true)) {                                                             ctx.close();                                                         }                                                     }                                                 }                                         );                                     }                                 }))));     }  } ```</body>
		<created>2019-10-02 05:21:27</created>
		<closed>2019-10-16 12:13:46</closed>
	</bug>
	<bug>
		<id>18468</id>
		<title>Main server ResourceConfigCustomizers should not apply to management context</title>
		<body>Forward port of issue #17801 to 2.2.0.RC1.</body>
		<created>2019-10-01 18:35:15</created>
		<closed>2019-10-01 18:40:36</closed>
	</bug>
	<bug>
		<id>18411</id>
		<title>Actuator endpoint time-to-live caching is not respected on WebFlux</title>
		<body>Forward port of issue #18339 to 2.2.0.RC1.</body>
		<created>2019-09-29 05:46:48</created>
		<closed>2019-09-29 05:49:10</closed>
	</bug>
	<bug>
		<id>18410</id>
		<title>DevTools does not correctly handle encoded URLs found in the Class-Path manifest attribute</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; **Environment:**  spring-boot 2.1.6.RELEASE  **Steps to Reproduce:** 1. Download spring-petclinic project into a parent path with **white space**. e.g. `C:/empty space` 2. Open it in VS Code (installed vscode-java-pack extension) 3. Changed the `console` option in launch.json to `integratedTerminal` 4. Run the spring-petclinic project, and the integrated terminal will show a message at the begining. ` The Class-Path manifest attribute in C:\Users\jinbwan\AppData\Local\Temp\cp_4bwsd8d4n0k0fxz6uwwaduweu.jar referenced one or more files that do not exist: file:/C:/Work/Debugger/Bug_Cases/empty%20space/spring-petclinic/target/classes/ `  **Background:** VS Code Java Debugger extension will generate the classpath args into a classpath.jar. And it uses absolute path in classpath.jar, and encode them as URL. When the classpath has white space, it will get the error message above. But if i moved spring-petclinic to a normal folder without whitespace, it works well.   So this looks like a corner case not covered.  </body>
		<created>2019-09-29 03:22:26</created>
		<closed>2019-10-03 14:36:24</closed>
	</bug>
	<bug>
		<id>18409</id>
		<title>Enforce ordering when ObjectProvider is used</title>
		<body>Forward port of issue #18333 to 2.2.0.RC1.</body>
		<created>2019-09-29 01:50:54</created>
		<closed>2019-09-29 01:51:23</closed>
	</bug>
	<bug>
		<id>18396</id>
		<title>ConfigurationProcessor removes inner type nested properties from metadata</title>
		<body>**Spring Boot version: 2.1.8.RELEASE**  spring-boot-configuration-processor removes nested properties declared with inner class types of the `@ConfigurationProperties` class from existing metadata file on incremental build with the IntelliJ IDEA. This is a rather annoying issue that manifests at the development time.  Apparently this bug is caused by the `MetadataCollector#deletedInCurrentBuild` method calling `Elements#getTypeElement` with wrong argument format. According to the API documentation, it should be a _canonical class name_ with inner class name separated by the dot, but configuration processor passes a dollar-separated one. `getTypeElement` returns `null` as such a name does not exists in the symbol table, `deletedInCurrentBuild` considers it was deleted, and upstream `MetadataCollector` methods `shouldBeMerged` and `getMetadata` strips the leaf with this inner class type.  [Sample project.](https://github.com/borisfox73/test-config-props)  *Steps to reproduce* 1. Import project into IntelliJ IDEA. 2. Do NOT delegate build process to Maven in IDE settings. 3. Perform a clean build. 4. View a generated metadata in the target/classes/META-INF/spring-configuration-metadata.json and make sure in contains nested properties of inner class types (nested1.b and nested2.c and d). 5. Modify any class not annotated with `@ConfigurationProperties` (e.g. `TestConfigPropsApplication`) and do an incrementail build in the IDE (Ctrl-F9). 6. Review a metadata file again. Now it has no any inner class nested properties. 7. If metadata apperas correct, repeat steps 5 and 6 once more, sometimes bug does not strike the every build.  Correct and wrong metadata files are attached.  Proposed fix: ``` private boolean deletedInCurrentBuild(String sourceType) { return this.processingEnvironment.getElementUtils().getTypeElement(sourceType.replace('$','.')) == null; } ```  Unfortunately I'm not aware of any conventional way of conversion between string-represented type name formats.   [spring-configuration-metadata (wrong).json.txt](https://github.com/spring-projects/spring-boot/files/3665228/spring-configuration-metadata.wrong.json.txt) [spring-configuration-metadata (correct).json.txt](https://github.com/spring-projects/spring-boot/files/3665229/spring-configuration-metadata.correct.json.txt) </body>
		<created>2019-09-28 08:27:37</created>
		<closed>2019-09-29 14:29:05</closed>
	</bug>
	<bug>
		<id>18379</id>
		<title>Typo in assertion error message produced by ApplicationContextAssert doesNotHaveBean</title>
		<body>Forward port of issue #18372 to 2.2.0.RC1.</body>
		<created>2019-09-27 14:35:11</created>
		<closed>2019-09-27 14:35:24</closed>
	</bug>
	<bug>
		<id>18369</id>
		<title>DataSourceInitializedEvent picks wrong datasource</title>
		<body>Forward port of issue #17061 to 2.2.0.RC1.</body>
		<created>2019-09-26 19:15:16</created>
		<closed>2019-09-26 19:26:12</closed>
	</bug>
	<bug>
		<id>18365</id>
		<title>Recursive property in @ConfigurationProperties causes java.lang.StackOverflowError when generating metadata</title>
		<body>Class `A` has member of Type `A`，if `A` is annotated with `@ConfigurationProperties` and `lombok.Data` together a `java.lang.StackOverflowError` will happen.  For example:  ```java @ConfigurationProperties("prefix") @Data public class A {     A m;  } ```</body>
		<created>2019-09-26 12:41:43</created>
		<closed>2019-11-05 15:51:53</closed>
	</bug>
	<bug>
		<id>18362</id>
		<title>Dependency relationships created by AbstractDependsOnBeanFactoryPostProcessors cannot be overridden</title>
		<body>When upgrading to Spring Boot 2.1.8-RELEASE from 2.1.7-RELEASE we now get a `BeanCreationException` that didn't happen before (no code was changed, only the Spring Boot version number in the pom file).  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseEntityManager' defined in class path resource [xxxxxx/config/DatabaseContext.class]: Circular depends-on relationship between 'baseEntityManager' and 'delayedFlywayInitializer'  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)  at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)  at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)  at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)  at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)  at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)  at org.springframework.boot.SpringApplication.run(SpringApplication.java:1204) ```   The bean definitions (in separate `@Configuration` annotated classes) are as follows:  ```java     @Bean     @Primary     public LocalContainerEntityManagerFactoryBean baseEntityManager() {         return EntityManagerFactoryBuilder.buildEntityManagerFactory(dataSource(), "xxxxxx.config.MySQLCustomDialect",                 "nl.triopsys.aangetekendmailen.domain", JSR310_PACKAGE);     } ```  ```java     @Bean     @DependsOn("baseEntityManager")     FlywayMigrationInitializer delayedFlywayInitializer(Flyway flyway) {         return new FlywayMigrationInitializer(flyway, null);     } ```  Again, in Spring Boot 2.1.7 (and earlier, this code was originally written against Spring Boot 1.3 and has been working in production for several years) this works as expected, the `delayedFlywayInitializer` gets created after the `baseEntityManager` (in order to run Flyway migrations after Hibernate is done with its schema updates).  </body>
		<created>2019-09-26 11:51:01</created>
		<closed>2019-11-05 09:58:40</closed>
	</bug>
	<bug>
		<id>18354</id>
		<title>Legacy HealthAggregator and HealthStatusHttpMapper are incorrectly reset</title>
		<body>In `LegacyHealthEndpointCompatibilityConfiguration` the `HealthAggregator` and `HealthStatusHttpMapper` are called with empty values. The `if` check only checks for `null`, so the default list gets overwritten with empty.</body>
		<created>2019-09-25 16:36:31</created>
		<closed>2019-09-27 01:30:54</closed>
	</bug>
	<bug>
		<id>18345</id>
		<title>ReactiveManagementWebSecurityAutoConfiguration does not back off when oauth2 client configuration present</title>
		<body>Forward port of issue #17949 to 2.2.0.RC1.</body>
		<created>2019-09-24 17:29:09</created>
		<closed>2019-09-24 17:29:43</closed>
	</bug>
	<bug>
		<id>18343</id>
		<title>BasicErrorController returns body even if NO_CONTENT status causing 406 later</title>
		<body>Forward port of issue #18136 to 2.2.0.RC1.</body>
		<created>2019-09-24 15:16:10</created>
		<closed>2019-09-24 15:18:24</closed>
	</bug>
	<bug>
		<id>18322</id>
		<title>Clarify usage of @ConfigurationProperties annotated type declared with @Bean</title>
		<body>The new constructor binding is automatically applied when a constructor is present. If an application was relying on a custom constructor to inject other components, they'll be broken on upgrade as we'll try to call that constructor to bind properties.   Moving to `@Bean` will work but keeping `@ConfigurationProperties` on the type will not generate the expected metadata.  See https://github.com/spring-cloud/spring-cloud-stream-binder-kafka/issues/750 for a concrete example.</body>
		<created>2019-09-23 14:10:28</created>
		<closed>2019-10-14 12:09:08</closed>
	</bug>
	<bug>
		<id>18299</id>
		<title>Concurrent EndpointRequest calls can cause NPE</title>
		<body>Forward port of issue #18211 to 2.2.0.RC1.</body>
		<created>2019-09-21 19:34:27</created>
		<closed>2019-09-21 19:46:39</closed>
	</bug>
	<bug>
		<id>18278</id>
		<title>Logged application startup time has become overly precise</title>
		<body>[Recent changes](https://github.com/spring-projects/spring-framework/commit/a532afb15d298f2114d6072f0d29138c89bda04f) in Framework have caused Boot's startup time to be shown to 9 decimal places:  ``` 2019-09-18 21:00:50.280  INFO 7040 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.975858063 seconds (JVM running for 1.223) ```  At the risk of missing an "it starts so fast we show the startup time to 9 decimal places" ~~BSing~~ marketing opportunity, I don't think we need nanosecond precision.</body>
		<created>2019-09-18 20:08:52</created>
		<closed>2019-09-19 09:21:59</closed>
	</bug>
	<bug>
		<id>18239</id>
		<title>Custom protocols are not honoured when Devtools is active</title>
		<body>Forward port of issue #17214 to 2.2.0.RC1.</body>
		<created>2019-09-16 13:12:49</created>
		<closed>2019-09-16 13:13:19</closed>
	</bug>
	<bug>
		<id>18234</id>
		<title>TestTypeExcludeFilter does not detect JUnit 5's @Testable annotation</title>
		<body>Forward port of issue #18214 to 2.2.0.RC1.</body>
		<created>2019-09-16 07:47:26</created>
		<closed>2019-09-16 08:04:27</closed>
	</bug>
	<bug>
		<id>18226</id>
		<title>Dependency management for Janino is incomplete</title>
		<body>Forward port of issue #18225 to 2.2.0.RC1.</body>
		<created>2019-09-13 17:00:39</created>
		<closed>2019-09-13 17:01:07</closed>
	</bug>
	<bug>
		<id>18225</id>
		<title>Dependency management for Janino is incomplete</title>
		<body>Janino is already in SpringBoot BOM.  ```       &lt;dependency&gt;         &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;         &lt;artifactId&gt;janino&lt;/artifactId&gt;         &lt;version&gt;${janino.version}&lt;/version&gt;       &lt;/dependency&gt; ```  However, it may lack: ```       &lt;dependency&gt;         &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;         &lt;artifactId&gt;commons-compiler&lt;/artifactId&gt;         &lt;version&gt;${janino.version}&lt;/version&gt;       &lt;/dependency&gt; ``` which is itself a dependency of &lt;artifactId&gt;janino&lt;/artifactId&gt;. In my case, I got janino in 3.0.15 while commons-compiler was stuck on 3.0.8, requiring to add  &lt;artifactId&gt;commons-compiler&lt;/artifactId&gt; in our own dependencyManagement section.</body>
		<created>2019-09-13 14:04:46</created>
		<closed>2019-09-13 17:01:06</closed>
	</bug>
	<bug>
		<id>18219</id>
		<title>Bindable.withExistingValue drops annotations</title>
		<body>Forward port of issue #18218 to 2.2.0.RC1.</body>
		<created>2019-09-12 22:11:36</created>
		<closed>2019-09-12 22:12:13</closed>
	</bug>
	<bug>
		<id>18218</id>
		<title>Bindable.withExistingValue drops annotations</title>
		<body>Calling `Bindable.withExistingValue` and `withSuppliedValue` are accidentally dropping any annotations that were previously set.</body>
		<created>2019-09-12 22:02:00</created>
		<closed>2019-09-12 22:12:13</closed>
	</bug>
	<bug>
		<id>18211</id>
		<title>Concurrent EndpointRequest calls can cause NPE</title>
		<body>After upgrade from 2.1.7 to 2.1.8 we started to get these NPE  ```java java.lang.NullPointerException: null     at org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest$AbstractRequestMatcher.matches(EndpointRequest.java:144)     at org.springframework.boot.security.servlet.ApplicationContextRequestMatcher.matches(ApplicationContextRequestMatcher.java:65)     at org.springframework.security.web.access.intercept.DefaultFilterInvocationSecurityMetadataSource.getAttributes(DefaultFilterInvocationSecurityMetadataSource.java:95)     at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:197)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:124)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:176)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118) ```  revert fixed that. I can't really reproduce that locally, thus can't attach a test  Maybe related to #12380 or #14161</body>
		<created>2019-09-12 11:20:38</created>
		<closed>2019-09-21 19:46:39</closed>
	</bug>
	<bug>
		<id>18199</id>
		<title>Inconsistent configuration ordering with profiles</title>
		<body>I have the following application.yml file: ``` --- spring:   profiles: a &amp; b test1: 1 test2: 1  --- spring:   profiles: a &amp; b test1: 2  --- spring:   profiles: a &amp; b &amp; c test2: 2  --- spring:   profiles: a test3: 1  --- spring:   profiles: a test3: 2 ```  Based on documentation https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html#howto-change-configuration-depending-on-the-environment, I would expect `Later values override earlier values`  I'm running the application with profile `a`, `b`, and `c`. However, I'm getting `2` for `test3` (expected), but I'm getting `1` for both `test1` and `test2`. So the ordering is opposite when `spring.profiles` contains a single profile vs an expression.  This works as expected if profiles are comma-separated, but not using profile expression.</body>
		<created>2019-09-10 23:12:55</created>
		<closed>2020-07-31 17:03:08</closed>
	</bug>
	<bug>
		<id>18188</id>
		<title>RSocket configuration property for port not working if transport is websocket</title>
		<body>Spring boot version: 2.2.0.BUILD-SNAPSHOT  Example configuration I'm using: ```yml spring:   rsocket:     server:       transport: websocket       port: 7000 ```  Netty RSocket always starts on a random port when I use this configuration.  Works fine for tcp transport.   Checking NettyRSocketServerFactory.createTransport and configuration prop for the port is never passed to HTTP server configuration there if `resourceFactory != null`.  This is at least strange/confusing because the existence of port property is condition for this auto-config to trigger.</body>
		<created>2019-09-09 20:57:14</created>
		<closed>2019-09-16 07:46:31</closed>
	</bug>
	<bug>
		<id>18184</id>
		<title>Annotation processor does not detect properties with custom constructor</title>
		<body>The annotation processor currently ignores `HealthIndicatorProperties` as it has a custom constructor to inject another properties object which makes it use constructor binding mode.   https://github.com/spring-projects/spring-boot/blob/cd8fab8442c0b14cb8436dadab7e4787106b9d5e/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorProperties.java#L38-L39  As a result, the following is generated  ```json      {       "name": "management.health.status.health-endpoint-properties",       "type": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties",       "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties",       "deprecated": true,       "deprecation": {}     } ```  Moving `@ConfigurationProperties` to a factory method doesn't change anything. One way to mitigate that would be to consider accessor-based binding in such a case as the `@Bean` implementation is not going to be responsible of binding.</body>
		<created>2019-09-09 08:32:36</created>
		<closed>2019-09-09 11:40:33</closed>
	</bug>
	<bug>
		<id>18168</id>
		<title>Get Comment From Nested JarFile Incorrect</title>
		<body>Forward port of issue #18128 to 2.2.0.M6.</body>
		<created>2019-09-06 13:39:00</created>
		<closed>2019-09-06 13:39:13</closed>
	</bug>
	<bug>
		<id>18138</id>
		<title>@Component cannot not longer be used on @ConfigurationProperties beans</title>
		<body>In previous versions I could do:  ``` @Component("properties") @ConfigurationProperties("app") public class MyAppProperties {     private String value;     // getter, setter } ``` ``` @Scheduled(fixedRateString = "#{@properties.getValue()}") public void method() { } ```  But this no longer works, since you cannot mix `@Component` and `@ConfigurationProperties`, and there is no "beanName" or such property inside `@ConfigurationProperties`. I tried removing `@Component` and instead relying on bean name being "myAppProperties" but that did not want to resolve either, it seemed.  Is this a bug/area of improvement? Or is this supposed to be solved in some other way moving forward?</body>
		<created>2019-09-05 09:52:31</created>
		<closed>2019-09-10 06:23:46</closed>
	</bug>
	<bug>
		<id>18136</id>
		<title>BasicErrorController returns body even if NO_CONTENT status causing 406 later</title>
		<body> Having exception defined like this:  ```java @ResponseStatus(HttpStatus.NO_CONTENT) public class NoContentException extends RuntimeException {      public NoContentException(String id) {         super("ID " + id + " has no content.");     } } ```  And the controller method as following:  ```java     @GetMapping(path = "/{id}/content", produces = {             "text/plain",             "audio/wav",             "image/tiff"     })     public ResponseEntity&lt;FileSystemResource&gt; getContent(@PathVariable Id id, @RequestHeader(value = HttpHeaders.ACCEPT, required = false) MediaType requestedMediaType) {         throw new NoContentException(id.toString()));     } ```  I would expect that the response code will be no content no matter what but while executing  ``` curl 'http://localhost:8080/rest/1/content' -i -X GET -H 'Accept: audio/wav' ```  I am getting 406 (Not Acceptable) because the *BasicErrorController* that always attaches the body no matter what the status code is:   ```java @RequestMapping public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) { Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL)); HttpStatus status = getStatus(request); return new ResponseEntity&lt;&gt;(body, status); } ```  will later cause 406 as the body cannot be converted to the requested type. It seems to be a bug to me as according to the spec the no content response should never contain body.</body>
		<created>2019-09-05 08:33:05</created>
		<closed>2019-09-24 15:18:24</closed>
	</bug>
	<bug>
		<id>18129</id>
		<title>Binder can throw NPE if BindHandler.onStart return null</title>
		<body>The `Binder` currently has this code which replaced the target:  ```java target = handler.onStart(name, target, context); ```  Since the result can be null, the subsequent call to `handleBindResult` could throw an NPE</body>
		<created>2019-09-04 20:20:03</created>
		<closed>2019-09-04 21:03:09</closed>
	</bug>
	<bug>
		<id>18128</id>
		<title>Get Comment From Nested JarFile Incorrect</title>
		<body>I found that there may be a bug in spring-boot-loader. When trying to get comment from a nested jar file, the method   `java.util.zip.ZipFile#getComment` will always return the comment of 'root jar‘.  **Here are the steps to reproduce:**  FIrstly, create two jar archive, and set comment for them. The Result is: ```shell &gt; unzip -l a.jar  Archive:  a.jar I am a.jar  &gt; unzip -l b.jar  Archive:  b.jar I am b.jar ```  Secondly, put b.jar into a.jar ```shell zip -r0 a.jar b.jar ```  Finally, write some Java Code to exam it: ```java import org.springframework.boot.loader.jar.JarFile; import java.io.File; import java.util.zip.ZipEntry;  public class Main {     public static void main(String[] args) throws Exception {         JarFile jarFile = new JarFile(new File("a.jar"));          ZipEntry entry = jarFile.getEntry("b.jar");         JarFile nestedJarFile = jarFile.getNestedJarFile(entry);          System.out.println(jarFile.getComment());         // I am a.jar         System.out.println(nestedJarFile.getComment());   // I am a.jar    expected: I am b.jar     } } ```  The version I use is: ``` &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-loader&lt;/artifactId&gt;       &lt;version&gt;2.1.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; ```</body>
		<created>2019-09-04 17:14:50</created>
		<closed>2019-09-06 13:39:13</closed>
	</bug>
	<bug>
		<id>18110</id>
		<title>SolrHealthIndicator reports down when baseUrl references a core instead of the root context</title>
		<body>Forward port of issue #16477 to 2.2.0.M6.</body>
		<created>2019-09-03 21:36:07</created>
		<closed>2019-09-03 21:46:34</closed>
	</bug>
	<bug>
		<id>18107</id>
		<title>Creating a custom CacheManager bean loses the EntityManagerFactory bean's dependency on the cache manager</title>
		<body>When a custom `CacheManager` is defined, all of `CacheAutoConfiguration` will back off, including `CacheManagerJpaDependencyConfiguration` which configures an entity manager factory beans to depend on the `cacheManager` bean. This is not consistent with other auto-configuration that configures dependencies between beans that do not back off when the target of the dependency is customized.</body>
		<created>2019-09-03 12:05:18</created>
		<closed>2019-09-04 15:11:30</closed>
	</bug>
	<bug>
		<id>18106</id>
		<title>NoSuchBeanDefinitionException with a custom FlywayMigrationInitializer bean that is not named flywayInitializer</title>
		<body>Forward port of issue #18105 to 2.2.0.M6.</body>
		<created>2019-09-03 11:58:03</created>
		<closed>2019-09-03 11:58:16</closed>
	</bug>
	<bug>
		<id>18105</id>
		<title>NoSuchBeanDefinitionException with a custom FlywayMigrationInitializer bean that is not named flywayInitializer</title>
		<body>This is a specific example of the problem described in #17888.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactoryBean' defined in org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests$CustomFlywayMigrationInitializerWithJpa: 'entityManagerFactoryBean' depends on missing bean 'flywayInitializer'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flywayInitializer' available  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.configureContext(AbstractApplicationContextRunner.java:330)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAndLoadContext(AbstractApplicationContextRunner.java:307)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.getContextOrStartupFailure(AssertProviderApplicationContextInvocationHandler.java:61)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.&lt;init&gt;(AssertProviderApplicationContextInvocationHandler.java:48)  at org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider.get(ApplicationContextAssertProvider.java:112)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAssertableContext(AbstractApplicationContextRunner.java:301)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$1(AbstractApplicationContextRunner.java:270)  at org.springframework.boot.test.util.TestPropertyValues.applyToSystemProperties(TestPropertyValues.java:129)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$0(AbstractApplicationContextRunner.java:269)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.withContextClassLoader(AbstractApplicationContextRunner.java:281)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.run(AbstractApplicationContextRunner.java:268)  at org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.customFlywayMigrationInitializerWithJpa(FlywayAutoConfigurationTests.java:274)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.lang.reflect.Method.invoke(Method.java:498)  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)  at org.junit.runners.ParentRunner.run(ParentRunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)  at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flywayInitializer' available  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:771)  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1221)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:294)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)  ... 39 more ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jdbcOperations' defined in org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests$CustomFlywayMigrationInitializerWithJdbcConfiguration: 'jdbcOperations' depends on missing bean 'flywayInitializer'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flywayInitializer' available  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:845)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.configureContext(AbstractApplicationContextRunner.java:330)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAndLoadContext(AbstractApplicationContextRunner.java:307)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.getContextOrStartupFailure(AssertProviderApplicationContextInvocationHandler.java:61)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.&lt;init&gt;(AssertProviderApplicationContextInvocationHandler.java:48)  at org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider.get(ApplicationContextAssertProvider.java:112)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAssertableContext(AbstractApplicationContextRunner.java:301)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$1(AbstractApplicationContextRunner.java:270)  at org.springframework.boot.test.util.TestPropertyValues.applyToSystemProperties(TestPropertyValues.java:129)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$0(AbstractApplicationContextRunner.java:269)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.withContextClassLoader(AbstractApplicationContextRunner.java:281)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.run(AbstractApplicationContextRunner.java:268)  at org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.customFlywayMigrationInitializerWithJdbc(FlywayAutoConfigurationTests.java:282)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.lang.reflect.Method.invoke(Method.java:498)  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)  at org.junit.runners.ParentRunner.run(ParentRunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)  at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flywayInitializer' available  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:771)  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1221)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:294)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)  ... 39 more ``` </body>
		<created>2019-09-03 11:35:02</created>
		<closed>2019-09-03 11:58:15</closed>
	</bug>
	<bug>
		<id>18103</id>
		<title>NoSuchBeanDefinitionException with a custom Flyway bean that is not named flyway</title>
		<body>Forward port of issue #18102 to 2.2.0.M6.</body>
		<created>2019-09-03 11:25:52</created>
		<closed>2019-09-03 11:26:15</closed>
	</bug>
	<bug>
		<id>18102</id>
		<title>NoSuchBeanDefinitionException with a custom Flyway bean that is not named flyway</title>
		<body>This is a specific example of the problem described in #17888.  ```  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactoryBean' defined in org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests$CustomFlywayWithJpaConfiguration: 'entityManagerFactoryBean' depends on missing bean 'flyway'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flyway' available  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.configureContext(AbstractApplicationContextRunner.java:330)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAndLoadContext(AbstractApplicationContextRunner.java:307)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.getContextOrStartupFailure(AssertProviderApplicationContextInvocationHandler.java:61)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.&lt;init&gt;(AssertProviderApplicationContextInvocationHandler.java:48)  at org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider.get(ApplicationContextAssertProvider.java:112)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAssertableContext(AbstractApplicationContextRunner.java:301)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$1(AbstractApplicationContextRunner.java:270)  at org.springframework.boot.test.util.TestPropertyValues.applyToSystemProperties(TestPropertyValues.java:129)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$0(AbstractApplicationContextRunner.java:269)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.withContextClassLoader(AbstractApplicationContextRunner.java:281)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.run(AbstractApplicationContextRunner.java:268)  at org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.customFlywayWithJpa(FlywayAutoConfigurationTests.java:269)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.lang.reflect.Method.invoke(Method.java:498)  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)  at org.junit.runners.ParentRunner.run(ParentRunner.java:363)  at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)  at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flyway' available  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:771)  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1221)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:294)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307)  ... 39 more ```</body>
		<created>2019-09-03 10:57:01</created>
		<closed>2019-09-03 11:26:15</closed>
	</bug>
	<bug>
		<id>18101</id>
		<title>Some usage of @ConditionalOnMissingBean does not allow a bean defined as an interface to cause a concrete implementation to back off</title>
		<body>See [DATAMONGO-2355](https://jira.spring.io/browse/DATAMONGO-2355) and [this question on Stack Overflow](https://stackoverflow.com/questions/57761228/spring-boot-2-1-duplicate-reactivemongotemplate-bean) for some background.  We have some places in our auto-configuration where we define a bean using a concrete type where it's typically injected as an interface. The definition that prompted this issue is the following:  https://github.com/spring-projects/spring-boot/blob/54126f6904ed898bfc185f5a14131c46a1ab3537/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java#L74-L79  A `ReactiveMongoOperations` bean won't cause the `reactiveMongoTemplate` bean to back off when it probably should. We're inconsistent about this as another bean in the same class will back off in the presence of a bean defined using the interface:  https://github.com/spring-projects/spring-boot/blob/54126f6904ed898bfc185f5a14131c46a1ab3537/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java#L81-L88  While beans should generally be defined using their concrete type so that the bean factory has as much type information as possible, mocking a bean using an interface that it implements is a use case for defining a bean using an interface. With the current arrangement, a test that mocks `MongoOperations` and attempts to autowire that mock will fail:  ```java @Autowired MongoOperations mongoOperations;  @TestConfiguration static class MockOperationsConfiguration {  @Bean MongoOperations mockedMongoOperations(MongoConverter converter) { MongoOperations mongoOperations = mock(MongoOperations.class); given(mongoOperations.getConverter()).willReturn(converter); return mongoOperations; }  } ```  The failure occurs because there are two `MongoOperations` beans: `mockedMongoOperations` from the test configuration and `mongoTemplate` from Boot's auto-configuration.</body>
		<created>2019-09-03 10:31:25</created>
		<closed>2019-09-24 11:32:49</closed>
	</bug>
	<bug>
		<id>18094</id>
		<title>TypeUtils.process(TypeDescriptor, TypeMirror) swallows exception message and stack trace</title>
		<body>Forward port of issue #17974 to 2.2.0.M6.</body>
		<created>2019-09-02 13:55:03</created>
		<closed>2019-09-02 13:55:18</closed>
	</bug>
	<bug>
		<id>18093</id>
		<title>Duplicate metadata entry for property that is @Deprecated when Lombok runs before spring-boot-configuration-processor</title>
		<body>Forward port of issue #17550 to 2.2.0.M6.</body>
		<created>2019-09-02 13:39:00</created>
		<closed>2019-09-02 13:42:47</closed>
	</bug>
	<bug>
		<id>18091</id>
		<title>RestTemplateBuilder's requestFactory override makes it incompatible with MockRestServiceServer</title>
		<body>In #17091 we've moved some of the customizations of `RestTemplateBuilder` from a regular interceptor to a wrapping `ClientHttpRequestFactory`. This makes the created `RestTemplate` incompatible with `MockRestServiceServer` as the latter will override the `ClientHttpRequestFactory` when it binds a rest template to a mock server.  I am not sure how we could avoid that really as the purpose of the factory is to create a request and it must be mocked.  I discovered this as part of testing a component that valides the proper `Authorization` header is sent. Because the factory is overridden, this header isn't processed at all anymore when managed by `MockRestServiceServer`.</body>
		<created>2019-09-02 08:58:19</created>
		<closed>2019-09-02 11:35:13</closed>
	</bug>
	<bug>
		<id>18085</id>
		<title>Quartz may attempt to use the DataSource before migrations have been run</title>
		<body>Forward port of issue #17539 to 2.2.0.M6.</body>
		<created>2019-09-01 21:54:26</created>
		<closed>2019-09-01 21:54:56</closed>
	</bug>
	<bug>
		<id>18084</id>
		<title>"spring" shell script error on AIX Bash 4.3.0</title>
		<body>Forward port of issue #17579 to 2.2.0.M6.</body>
		<created>2019-09-01 19:21:31</created>
		<closed>2019-09-01 19:21:49</closed>
	</bug>
	<bug>
		<id>18083</id>
		<title>SSL handshake fails when client authentication is enabled and starter-jetty is used</title>
		<body>Forward port of issue #17541 to 2.2.0.M6.</body>
		<created>2019-09-01 19:11:15</created>
		<closed>2019-09-01 19:12:10</closed>
	</bug>
	<bug>
		<id>18027</id>
		<title>When using Netty, an invalid content-type header value causes request to get stuck when compression is enabled</title>
		<body>Forward port of issue #18018 to 2.2.0.M6.</body>
		<created>2019-08-31 07:26:42</created>
		<closed>2019-08-31 07:27:07</closed>
	</bug>
	<bug>
		<id>18021</id>
		<title>ApplicationContextRequestMatcher can use the wrong ApplicationContext</title>
		<body>Forward port of issue #18012 to 2.2.0.M6.</body>
		<created>2019-08-30 21:39:41</created>
		<closed>2019-08-30 21:42:28</closed>
	</bug>
	<bug>
		<id>18018</id>
		<title>When using Netty, an invalid content-type header value causes request to get stuck when compression is enabled</title>
		<body>See https://github.com/spring-cloud/spring-cloud-gateway/issues/1111. We should make our predicate more robust by returning false for a malformed mime type in the `Content-Type` header rather than throwing an exception.</body>
		<created>2019-08-30 11:38:12</created>
		<closed>2019-08-31 07:27:07</closed>
	</bug>
	<bug>
		<id>18012</id>
		<title>ApplicationContextRequestMatcher can use the wrong ApplicationContext</title>
		<body>Discovered during #17912   `ApplicationContextRequestMatcher` uses `WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext())` to obtain the application context and caches the supplier. If there is a management server running on a different port, it's possible for the wrong context to be used depending on who makes the first request.  </body>
		<created>2019-08-30 04:57:41</created>
		<closed>2019-08-30 21:42:28</closed>
	</bug>
	<bug>
		<id>17996</id>
		<title>Spring Boot CLI is unable to always capture ctrl-c</title>
		<body>Forward port of issue #17976 to 2.2.0.M6.</body>
		<created>2019-08-29 12:51:18</created>
		<closed>2019-08-29 12:51:42</closed>
	</bug>
	<bug>
		<id>17994</id>
		<title>throws IllegalArgumentException when downloading file when filename includes '%' for undertow server</title>
		<body>Forward port of issue #17853 to 2.2.0.M6.</body>
		<created>2019-08-29 11:30:23</created>
		<closed>2019-08-29 11:30:41</closed>
	</bug>
	<bug>
		<id>17974</id>
		<title>TypeUtils.process(TypeDescriptor, TypeMirror) swallows exception message and stack trace</title>
		<body>Failures in `TypeUtils.process(TypeDescriptor, TypeMirror)` are very hard to diagnose as the exception message and stack trace is swallowed. See https://github.com/spring-projects/spring-boot/issues/17650 for an example of a problem that was hard to diagnose due to this.</body>
		<created>2019-08-27 14:19:45</created>
		<closed>2019-09-02 13:55:17</closed>
	</bug>
	<bug>
		<id>17959</id>
		<title>Non MVC web applications always return 404 for errors</title>
		<body>Forward port of issue #17938 to 2.2.0.M6.</body>
		<created>2019-08-26 04:32:31</created>
		<closed>2019-08-26 04:37:31</closed>
	</bug>
	<bug>
		<id>17950</id>
		<title>WebClientExchangeTags does not handle non-standard status codes</title>
		<body>Forward port of issue #17695 to 2.2.0.M6.</body>
		<created>2019-08-23 19:34:54</created>
		<closed>2019-08-23 19:35:22</closed>
	</bug>
	<bug>
		<id>17949</id>
		<title>ReactiveManagementWebSecurityAutoConfiguration does not back off when oauth2 client configuration present</title>
		<body>`ReactiveManagementWebSecurityAutoConfiguration` does not configure `oauth2Login()` even when `spring-security-oauth2-client` is in classpath and properties have been configured. It only configures `httpBasic()` and `formLogin()` for all cases.  The configuration logic should follow the default configuration for `SecurityWebFilterChain` in [`WebFluxSecurityConfiguration.springSecurityFilterChain()`](https://github.com/spring-projects/spring-security/blob/bc38a4a3cca41b8fe6b812b8cb1ce4a4cc42bba9/config/src/main/java/org/springframework/security/config/annotation/web/reactive/WebFluxSecurityConfiguration.java#L98).  Related [spring-security#6314](https://github.com/spring-projects/spring-security/issues/6314)</body>
		<created>2019-08-23 19:14:06</created>
		<closed>2019-09-24 17:29:42</closed>
	</bug>
	<bug>
		<id>17948</id>
		<title>Mocking session scoped spy bean calls real method</title>
		<body>Forward port of issue #17817 to 2.2.0.M6.</body>
		<created>2019-08-23 18:09:24</created>
		<closed>2019-08-23 18:15:41</closed>
	</bug>
	<bug>
		<id>17944</id>
		<title>server.ssl.key-alias is ignored when configuring Netty</title>
		<body></body>
		<created>2019-08-23 11:02:10</created>
		<closed>2019-12-04 16:39:56</closed>
	</bug>
	<bug>
		<id>17943</id>
		<title>Cannot override jackson.version using Gradle Dependency Management Plugin</title>
		<body>Forward port of issue #17808 to 2.2.0.M6.</body>
		<created>2019-08-23 10:29:57</created>
		<closed>2019-08-23 10:30:15</closed>
	</bug>
	<bug>
		<id>17942</id>
		<title>DataSourceSchemaCreatedPublisher.getPersistenceProviderRootPackage fails with a NullPointerException when using a custom LocalContainerEntityManagerFactoryBean that has no JpaVendorAdapter</title>
		<body>Forward port of issue #17935 to 2.2.0.M6.</body>
		<created>2019-08-23 10:04:12</created>
		<closed>2019-08-23 10:04:54</closed>
	</bug>
	<bug>
		<id>17938</id>
		<title>Non MVC web applications always return 404 for errors</title>
		<body>This can be reproduced by adding spring security to `SampleJerseyApplication` and setting `management.server.port` to something other than 8080. The difference between the main application port and the management port is that there's an error page for the management context. </body>
		<created>2019-08-22 17:57:44</created>
		<closed>2019-08-26 04:37:31</closed>
	</bug>
	<bug>
		<id>17935</id>
		<title>DataSourceSchemaCreatedPublisher.getPersistenceProviderRootPackage fails with a NullPointerException when using a custom LocalContainerEntityManagerFactoryBean that has no JpaVendorAdapter</title>
		<body>From [this question](https://stackoverflow.com/questions/57607374/spring-boot-doesnt-run-but-service-utest-works-well/57610548#57610548) on Stack Overflow:  ``` Caused by: java.lang.NullPointerException: null at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher$DataSourceSchemaCreatedPublisher.getPersistenceProviderRootPackage(DataSourceInitializedPublisher.java:168) ~[spring-boot-autoconfigure-2.1.4.RELEASE.jar:2.1.4.RELEASE] at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:335) ~[spring-orm-5.1.9.RELEASE.jar:5.1.9.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837) ~[spring-beans-5.1.9.RELEASE.jar:5.1.9.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774) ~[spring-beans-5.1.9.RELEASE.jar:5.1.9.RELEASE] ```</body>
		<created>2019-08-22 13:33:37</created>
		<closed>2019-08-23 10:04:54</closed>
	</bug>
	<bug>
		<id>17889</id>
		<title>Use alwaysApplyingWhenNonNull PropertyMapper to set the values in the LdapContextSource</title>
		<body>Forward port of issue #17861 to 2.2.0.M6.</body>
		<created>2019-08-17 04:38:15</created>
		<closed>2019-08-17 04:38:28</closed>
	</bug>
	<bug>
		<id>17888</id>
		<title>Consistently use type variant of AbstractDependsOnBeanFactoryPostProcessor dependsOn </title>
		<body>#17805 and #16627 switched to using the type variant for mongo and liquibase.   Potential usages which could be switched are  `flyway` `cacheManager` `quartzDataSourceInitializer` </body>
		<created>2019-08-17 00:04:26</created>
		<closed>2019-09-03 12:15:15</closed>
	</bug>
	<bug>
		<id>17887</id>
		<title>Liquibase bean with name other than 'liquibase' breaks context</title>
		<body>Forward port of issue #17805 to 2.2.0.M6.</body>
		<created>2019-08-16 23:53:58</created>
		<closed>2019-08-16 23:54:24</closed>
	</bug>
	<bug>
		<id>17885</id>
		<title>RestTemplateBuilder headers no longer get applied when using MockRestServiceServer</title>
		<body>`build` method in default implementation of `MockRestServiceServerBuilder` overwrites request factory which makes impossible to write tests using remote resources access via `RestTemplate` built through `RestTemplateBuilder.defaultHeader()` with headers.  How to reproduce:  bean definition: ```         @Bean         public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {             return restTemplateBuilder.defaultHeader("x-api-key", "1234567890").build();         } ```  using in test: ```         mockApi = MockRestServiceServer.createServer(restTemplate); ```  And then requests sent to that mock api will come without custom `x-api-key` header</body>
		<created>2019-08-16 11:24:07</created>
		<closed>2019-09-16 08:28:37</closed>
	</bug>
	<bug>
		<id>17866</id>
		<title>Endpoint filter configured on an endpoint's super-class has no effect</title>
		<body>See https://github.com/spring-projects/spring-boot/pull/17807 for the background. It should possibly be using `find…` instead. </body>
		<created>2019-08-14 14:56:56</created>
		<closed>2019-11-05 11:07:12</closed>
	</bug>
	<bug>
		<id>17857</id>
		<title>spring.config.additional-location as environment variable does not work correctly</title>
		<body>Forward port of issue #17843 to 2.2.0.M6.</body>
		<created>2019-08-13 22:15:45</created>
		<closed>2019-08-13 22:16:27</closed>
	</bug>
	<bug>
		<id>17853</id>
		<title>throws IllegalArgumentException when downloading file when filename includes '%' for undertow server</title>
		<body>we map  url:  '/s/com-huawei-dcp-deploy-deploy-service/v1/api/file/download/main/os/mys/larg%25e_1.0.0.zip' to downloading the special file named 'larg%e_1.0.0.zip' ,  but it throws  ``` java.lang.IllegalArgumentException: null at sun.net.www.ParseUtil.decode(Unknown Source) at java.net.JarURLConnection.parseSpecs(Unknown Source) at java.net.JarURLConnection.&lt;init&gt;(Unknown Source) at sun.net.www.protocol.jar.JarURLConnection.&lt;init&gt;(Unknown Source) at sun.net.www.protocol.jar.Handler.openConnection(Unknown Source) at java.net.URL.openConnection(Unknown Source) at io.undertow.server.handlers.resource.URLResource.openConnection(URLResource.java:86) at io.undertow.server.handlers.resource.URLResource.getContentLength(URLResource.java:273) ```  becuase '%25' is decode to '%', and URLResource use the path '/s/com-huawei-dcp-deploy-deploy-service/v1/api/file/download/main/os/mys/larg%e_1.0.0.zip',  the class ParseUtils throws the IllegaglArgumentException when decoding '%e_'   bug is in the class org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory$MetaInfResourcesResourceManager   ``` private URLResource getMetaInfResource(URL resourceJar, String path) { try { URL resourceUrl = new URL(resourceJar + "META-INF/resources" + path); URLResource resource = new URLResource(resourceUrl, path); if (resource.getContentLength() &lt; 0) { return null; } return resource; } catch (MalformedURLException ex) { return null; } } ```  </body>
		<created>2019-08-13 14:04:10</created>
		<closed>2019-08-29 11:30:41</closed>
	</bug>
	<bug>
		<id>17845</id>
		<title>websocket transport not applied on RSocket servers without WebFlux</title>
		<body>The `RSocketServerAutoConfiguration` is not applying the choice of RSocket transport to the server. It's only done when WebFlux is involved and an RSocket server is plugged as a specific endpoint on the Reactor Netty server.</body>
		<created>2019-08-12 19:01:42</created>
		<closed>2019-08-12 19:12:54</closed>
	</bug>
	<bug>
		<id>17843</id>
		<title>spring.config.additional-location as environment variable does not work correctly</title>
		<body>We have a central yml file containing properties for our databases and would like to generically add those to our spring boot services. We just upgraded to spring boot 2.1.6 What I attempted was to set `SPRING_CONFIG_ADDITIONALLOCATION` as system environment variable pointing to the location of the application.yml containing the db properties. Unfortunately, it wouldn't recognize the file, setting it with `SPRING_CONFIG_LOCATION` works fine however. As far as I understood the file in the additional location needs to be named application.yml as long as `spring.config.name` is not set otherwise. I even tried renaming and formatting it to application.properties. Is this the way it's supposed to be or did I anything wrong?</body>
		<created>2019-08-12 14:21:22</created>
		<closed>2019-08-13 22:16:27</closed>
	</bug>
	<bug>
		<id>17831</id>
		<title>Wrong semantic for immutable @ConfigurationProperties contributed via @Import</title>
		<body>Hello,  As of SB 2.2.0.M5, the changelog states that `@ConfigurationProperties-annotated types are no longer scanned in slice tests unless imported explicitly. This restores the behaviour that slice tests should only scan what is described in the documentation.`  When an immutable `@ConfigurationProperties` is imported in a test slice, and the constructor parameters are not beans (ex : strings), the test fail.  As it's not that easy to describe, I have done a repository that reproduces the issue : https://github.com/mpalourdio/demorepro . Please run the [single test](https://github.com/mpalourdio/demorepro/blob/c26895768629855309e963b205498fb009d38293/src/test/java/com/example/demo/MyControllerTest.java) to see it fail.  In order to make it work with SB 2.0.0.M4, remove the `@Import` in the test class, and change the SB version in `pom.xml` to target SB 2.0.0.M4. The test will succeed.  Thanks by advance, and let me know if you need more information.</body>
		<created>2019-08-10 19:33:04</created>
		<closed>2019-10-02 19:55:39</closed>
	</bug>
	<bug>
		<id>17817</id>
		<title>Mocking session scoped spy bean calls real method</title>
		<body>Trying to mock a `@SessionScope`  in a test by autowiring it using `@SpyBean` and then mocking using `doReturn(..).when(sessionScopedBean).method(any())` calls the real method with **null** argument instead of silently registering mock. Removing `@SessionScope` from the bean resolves this issue.  Spring boot 2.1.6.RELEASE</body>
		<created>2019-08-08 23:25:38</created>
		<closed>2019-08-23 18:15:40</closed>
	</bug>
	<bug>
		<id>17813</id>
		<title>UndertowServletWebServerFactory does not configure a temporary directory </title>
		<body>Forward port of issue #17778 to 2.2.0.M6.</body>
		<created>2019-08-08 14:33:44</created>
		<closed>2019-08-08 14:34:08</closed>
	</bug>
	<bug>
		<id>17812</id>
		<title>Wrong annotation lookup with proxied endpoints</title>
		<body>Forward port of issue #17807 to 2.2.0.M6.</body>
		<created>2019-08-08 12:13:25</created>
		<closed>2019-08-08 12:13:55</closed>
	</bug>
	<bug>
		<id>17808</id>
		<title>Cannot override jackson.version using Gradle Dependency Management Plugin</title>
		<body>## Issue Description In a Gradle project using the "Dependency Management Plugin" we can override a property as part of importing a BOM as documented [here](https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/#dependency-management-configuration-bom-import-override-property).  Now when we want to react quickly to an security audit problem, e.g. `jackson-databind` this mechanism is quite useful since we can do something like: ``` dependencyManagement {      imports {            mavenBom('org.springframework.boot:spring-boot-dependencies:2.1.7.RELEASE') {             bomProperties([                  'jackson.version': '2.9.9.20190807'             ])         }      } } ```  Now I would expect this to work since there is a `jackson-bom` with this [particular version](https://search.maven.org/artifact/com.fasterxml.jackson/jackson-bom/2.9.9.20190807/pom). ``` &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-bom&lt;/artifactId&gt; &lt;version&gt;${jackson.version}&lt;/version&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;type&gt;pom&lt;/type&gt; &lt;/dependency&gt; ``` See [spring-boot-dependencies/pom.xml#L642](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml#L642)  However, this fails with: ``` Could not find com.fasterxml.jackson.core:jackson-core:2.9.9.20190807 ```  This is due to the fact that the Spring `jackson.version` seems to "shadow" the `jackson.version` property that the `jackson-bom` uses internally (see [jackson-bom/pom.xml#L29](https://github.com/FasterXML/jackson-bom/blob/jackson-bom-2.9.9.20190807/pom.xml#L29)) and Jackson recently adopted a different release scheme (https://github.com/FasterXML/jackson-databind/issues/2395#issuecomment-516527360).  With Maven this was probably not a problem since this kind of overriding properties was not allowed / documented (https://github.com/spring-projects/spring-boot/issues/12790#issuecomment-383205839) and could only be done by setting it externally with `mvn ... -Djackson.version=x.y.z`.  ## Standalone example Can be found here: https://github.com/franzbecker/spring-bom-problem/blob/master/build.gradle  ## Related issues https://github.com/spring-projects/spring-boot/issues/17698 previous discussion on this issue https://github.com/spring-projects/spring-boot/issues/12790 similar discussion but the author had another issue  ## Possible solutions Rename `jackson.version` to `jackson-bom.version` (proposed here https://github.com/spring-projects/spring-boot/issues/12790#issuecomment-381210632 as well).  I would argue that this naming would represent the semantics better as this property defines which version of the Jackson BOM is imported, not the Jackson version itself.  Another solution I could think of would be to allow a more fine-grained control of the overrides in the "Dependency Management Plugin".</body>
		<created>2019-08-07 17:21:58</created>
		<closed>2019-08-23 10:30:14</closed>
	</bug>
	<bug>
		<id>17801</id>
		<title>Main server ResourceConfigCustomizers should not apply to management context</title>
		<body>Any `ResourceConfigCustomizer` bean is applied within the `JerseyAutoConfiguration` but also in the `JerseyManagementContextConfiguration`. It is not currently possible to exclude the bean's application in the management context. This can be a relevant problem if the management server runs on a different port.  If a singleton resource is registered in both contexts, this breaks the singleton contract as the API is now reachable via two `ResourceConfig`s on two different ports.   Therefore, it should be possible to restrict the application of `ResourceConfigCustomizer` to the main server. Currently, it is only possible to register an API exclusively in the management server via `@ManagementContextConfiguration`.</body>
		<created>2019-08-07 07:44:33</created>
		<closed>2019-10-01 18:40:35</closed>
	</bug>
	<bug>
		<id>17796</id>
		<title>Fat jars cause classloading problems with JDK11 and Security Manager</title>
		<body>We have faced some classloading problems after migrating to Spring Boot 2.1.6 and Spring Framework 5.1.8. The WAR we build is built under JDK8 but the runtime environment is JDK11. We are trying to deploy our application, but then we get ClassNotFoundException and the Spring context fails to initialize.  We have double checked WAR file. The "missing" class is there.  Now, the really interesting part: we are able to reproduce this one only with Security Manager. It seems like it's not a problem with our own custom security policy, as we have also tried granting access to everything. The problem persists even in this, rather extreme, case.  Therefore, to run our application we have only two options: 1. Run it under JDK8 2. Run it under JDK11, but without the Security Manager  Another description of (apparently) the same problem: https://stackoverflow.com/questions/54063602/springboot-on-open-jdk-11-classnotfound-errors-when-securitymanager-is-activ </body>
		<created>2019-08-06 13:51:41</created>
		<closed>2020-04-25 18:04:40</closed>
	</bug>
	<bug>
		<id>17793</id>
		<title>Fix log info</title>
		<body>Forward port of issue #17774 to 2.2.0.M5.</body>
		<created>2019-08-05 22:33:08</created>
		<closed>2019-08-05 22:33:48</closed>
	</bug>
	<bug>
		<id>17769</id>
		<title>Inconsistent behavior turning off the check for the change log location: Liquibase fails anyway</title>
		<body>Forward port of issue #16232 to 2.2.0.M5.</body>
		<created>2019-08-02 16:16:44</created>
		<closed>2019-08-02 16:18:43</closed>
	</bug>
	<bug>
		<id>17768</id>
		<title>CassandraHealthIndicator runs a query that fails on some Consistency Levels</title>
		<body>My team has recently decided to move from a default READ consistency level of `LOCAL_QUORUM` to `THREE`. After this change, the `CassandraHealthIndicator` can no longer execute the query below successfully. I'm wondering if there's a better test query that could work at all Consistency Levels?  ``` @Override protected void doHealthCheck(Health.Builder builder) throws Exception { Select select = QueryBuilder.select("release_version").from("system", "local"); ResultSet results = this.cassandraOperations.getCqlOperations().queryForResultSet(select); ```  &lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (please don't include this emoji/text, just add your details) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (please don't include this emoji/text, just add your details) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.   TIP: You can always edit your issue if it isn't formatted correctly.      See https://guides.github.com/features/mastering-markdown  --&gt; </body>
		<created>2019-08-02 16:12:10</created>
		<closed>2020-03-28 14:46:20</closed>
	</bug>
	<bug>
		<id>17767</id>
		<title>Missing TransactionManager when user provides a custom Neo4j SessionFactory.</title>
		<body>Forward port of issue #17662 to 2.2.0.M5.</body>
		<created>2019-08-02 15:36:00</created>
		<closed>2019-08-02 15:36:28</closed>
	</bug>
	<bug>
		<id>17764</id>
		<title>Wrong bean name on Reactive Cassandra Health Indicator condition</title>
		<body>Forward port of issue #17763 to 2.2.0.M5.</body>
		<created>2019-08-02 11:57:33</created>
		<closed>2019-08-02 11:57:50</closed>
	</bug>
	<bug>
		<id>17763</id>
		<title>Wrong bean name on Reactive Cassandra Health Indicator condition</title>
		<body>The condition on which the reactive cassandra health indicator is created does not look correct. The bean that is being created has the name "cassandraHealthIndicator" however the conditional is on a missing bean with name "cassandraReactiveHealthIndicator".  @Bean @ConditionalOnMissingBean(name = "cassandraReactiveHealthIndicator") public ReactiveHealthIndicator cassandraHealthIndicator( Map&lt;String, ReactiveCassandraOperations&gt; reactiveCassandraOperations) { return createHealthIndicator(reactiveCassandraOperations); }  Shouldn't the conditional bean name be the  same as the name of the bean we are creating?</body>
		<created>2019-08-02 10:01:22</created>
		<closed>2019-08-02 11:57:49</closed>
	</bug>
	<bug>
		<id>17753</id>
		<title>Create RestClient bean from a RestHighLevelClient if such a bean has been contributed by the application.</title>
		<body>Forward port of issue #17488 to 2.2.0.M5.</body>
		<created>2019-08-01 12:24:48</created>
		<closed>2019-08-01 12:25:22</closed>
	</bug>
	<bug>
		<id>17750</id>
		<title>Confusing and incomplete failure analysis when ConfigurationProperties uses constructor for beans</title>
		<body>Consider the following:  ```java @ConfigurationProperties("example") @Component public class ExampleProperties {     private String api;     private final MyBean myBean     public ExampleProperties(MyBean bean) { ... }     // getter setter for api  } ```  This code is wrong in the first place as it does config binding and some logic with a bean but the upgrade to 2.2 can provide an annoying experience.  First a user would get this:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  example.ExampleProperties is annotated with @ConfigurationProperties and @Component. This may cause the @ConfigurationProperties bean to be registered twice.  Action:  Remove @Component from example.ExampleProperties or consider disabling automatic @ConfigurationProperties scanning. ```  When they do that, they remove the actual nature of the component and since there is one constructor, the binding attempts to use it for binding. So it's now trying to bind `example.bean` and are completely ignore `example.api`.   Once `@Component` is removed, we get another failure  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'example' to example.ExampleProperties:      Reason: Failed to bind properties under 'example' to example.ExampleProperties:  Action:  Update your application's configuration ```  We should improve the first failure to add a note about the mix of the two stereotype. If there is a single constructor with at least one argument, we should warn it's going to be used by default for constructor binding.  It would be nice to see if the failure analysis of the second case can be improved as it's rather cryptic at the moment. This may deserve a separate issue.</body>
		<created>2019-08-01 11:19:00</created>
		<closed>2019-08-19 09:04:48</closed>
	</bug>
	<bug>
		<id>17748</id>
		<title>Fix ordering of SPRING_APPLICATION_JSON property source relative to servlet property sources</title>
		<body>Forward port of issue #17652 to 2.2.0.M5.</body>
		<created>2019-07-31 20:02:17</created>
		<closed>2019-07-31 20:03:07</closed>
	</bug>
	<bug>
		<id>17744</id>
		<title>ModifiedClassPathExtension sets a ClassLoader that can break isAssignableFrom</title>
		<body>The JDK11+ build is currently broken following an Hibernate upgrade:  ```  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration: Invocation of init method failed; nested exception is java.util.ServiceConfigurationError: org.hibernate.boot.registry.selector.StrategyRegistrationProvider: org.hibernate.cache.jcache.internal.StrategyRegistrationProviderImpl not a subtype  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1791)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)  at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.configureContext(AbstractApplicationContextRunner.java:419)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAndLoadContext(AbstractApplicationContextRunner.java:395)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.getContextOrStartupFailure(AssertProviderApplicationContextInvocationHandler.java:61)  at org.springframework.boot.test.context.assertj.AssertProviderApplicationContextInvocationHandler.&lt;init&gt;(AssertProviderApplicationContextInvocationHandler.java:48)  at org.springframework.boot.test.context.assertj.ApplicationContextAssertProvider.get(ApplicationContextAssertProvider.java:112)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.createAssertableContext(AbstractApplicationContextRunner.java:389)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$run$0(AbstractApplicationContextRunner.java:358)  at org.springframework.boot.test.util.TestPropertyValues.applyToSystemProperties(TestPropertyValues.java:129)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$run$1(AbstractApplicationContextRunner.java:357)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.withContextClassLoader(AbstractApplicationContextRunner.java:369)  at org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.run(AbstractApplicationContextRunner.java:356)  at org.springframework.boot.autoconfigure.orm.jpa.Hibernate2ndLevelCacheIntegrationTests.hibernate2ndLevelCacheWithJCacheAndEhCache3(Hibernate2ndLevelCacheIntegrationTests.java:56)  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.base/java.lang.reflect.Method.invoke(Method.java:566)  at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)  at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)  at org.springframework.boot.testsupport.classpath.ModifiedClassPathExtension.interceptTestMethod(ModifiedClassPathExtension.java:75)  at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)  at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)  at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)  at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)  at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)  at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)  at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)  at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)  at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at java.base/java.lang.reflect.Method.invoke(Method.java:566)  at org.springframework.boot.testsupport.junit.platform.Launcher.execute(Launcher.java:48)  at org.springframework.boot.testsupport.classpath.ModifiedClassPathExtension.runTest(ModifiedClassPathExtension.java:106)  at org.springframework.boot.testsupport.classpath.ModifiedClassPathExtension.runTestWithModifiedClassPath(ModifiedClassPathExtension.java:90)  at org.springframework.boot.testsupport.classpath.ModifiedClassPathExtension.interceptTestMethod(ModifiedClassPathExtension.java:79)  at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)  at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)  at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)  at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)  at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)  at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)  at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)  at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)  at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)  at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)  at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)  Caused by: java.util.ServiceConfigurationError: org.hibernate.boot.registry.selector.StrategyRegistrationProvider: org.hibernate.cache.jcache.internal.StrategyRegistrationProviderImpl not a subtype  at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:588)  at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1236)  at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1264)  at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1299)  at java.base/java.util.ServiceLoader$ProviderSpliterator.tryAdvance(ServiceLoader.java:1483)  at java.base/java.util.Spliterator.forEachRemaining(Spliterator.java:326)  at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)  at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)  at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)  at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)  at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)  at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)  at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)  at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)  at org.hibernate.boot.registry.classloading.internal.AggregatedServiceLoader$ClassPathAndModulePathAggregatedServiceLoader.loadAll(AggregatedServiceLoader.java:203)  at org.hibernate.boot.registry.classloading.internal.AggregatedServiceLoader$ClassPathAndModulePathAggregatedServiceLoader.getAll(AggregatedServiceLoader.java:183)  at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.loadJavaServices(ClassLoaderServiceImpl.java:251)  at org.hibernate.boot.registry.selector.internal.StrategySelectorBuilder.buildSelector(StrategySelectorBuilder.java:173)  at org.hibernate.boot.registry.BootstrapServiceRegistryBuilder.build(BootstrapServiceRegistryBuilder.java:232)  at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.buildBootstrapServiceRegistry(EntityManagerFactoryBuilderImpl.java:454)  at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:199)  at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:167)  at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:51)  at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)  at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)  at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)  at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1850)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1787)  ... 151 more ```  It looks like the `ClassLoader` we set can break `isAssignableForm` checks if the class is loaded from the system  `ClassLoader`.</body>
		<created>2019-07-31 11:23:03</created>
		<closed>2019-08-19 13:38:36</closed>
	</bug>
	<bug>
		<id>17695</id>
		<title>WebClientExchangeTags does not handle non-standard status codes</title>
		<body>Currently when calling a service that returns non-standard status codes like 490 with the reactive webclient, the tagging for the metrics actuator will cause an exception. I'm using version 2.1.5.RELEASE of spring-boot-starter-actuator and spring-boot-starter-webflux. If I find the time, I'll create a pull request. For which branch should I do that?  In case I don't find the time, here's what I found so far: The issue is that `HttpStatus` is used instead of a raw int. `org.springframework.boot.actuate.metrics.web.reactive.client.WebClientExchangeTags#status(ClientResponse)` itself only needs the raw value, but calls `response.statusCode()` which calls `HttpStatus.valueOf(getRawStatusCode())` which throws an `IllegalArgumentException`. At this point the solution is easy, just use `response.rawStatusCode()`.  But after that it fails in `WebClientExchangeTags#outcome(ClientResponse)`, and here I'm not sure what an elegant solution would be. Either directly use the rawStatusCode and ditch the comfort of the `HttpStatus` enum, or add an option to create `HttpStatus.UNKNOWN` values with the rawStatusCode as constructor argument I guess. I prefer the latter solution, but it may have side effects, as the Enum is part of spring-web and thus used a lot (681 usages according to my IDE).</body>
		<created>2019-07-29 22:39:05</created>
		<closed>2019-08-23 19:35:21</closed>
	</bug>
	<bug>
		<id>17687</id>
		<title>Undertow servers include their own mime mappings in addition to ours</title>
		<body>Due to the [the following line](https://github.com/undertow-io/undertow/blob/0b97ab25f9a68decb5273c9f15bbde31a45c3c56/servlet/src/main/java/io/undertow/servlet/core/DeploymentManagerImpl.java#L506) in `DeploymentManagerImpl` all Undertow servers will include their own mime type mappings in addition to ours. This previously manifested itself with an additional uppercase `Z` mapping, but with Undertow 2.0.22 we also find an additional `ico` mapping.  In order to remove the extra mappings we'll need to call `DeploymentImpl.setMimeExtensionMappings` ourselves at a later point.</body>
		<created>2019-07-29 13:40:24</created>
		<closed>2019-07-29 13:49:00</closed>
	</bug>
	<bug>
		<id>17664</id>
		<title>Reactive health indicators do not log health check failure</title>
		<body>Forward port of issue #17635 to 2.2.0.M5.</body>
		<created>2019-07-29 09:35:33</created>
		<closed>2019-07-29 09:36:00</closed>
	</bug>
	<bug>
		<id>17652</id>
		<title>Fix ordering of SPRING_APPLICATION_JSON property source relative to servlet property sources</title>
		<body>I am trying to override servlet context parameters included in the `web.xml` of a Spring Boot war file. To achieve this, I added the environment variable `SPRING_APPLICATION_JSON` to the `setenv.sh` file of my Tomcat installation.  According to the [documentation](https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/html/boot-features-external-config.html), the JSON config should be evaluated first. This is not the case, the valued from the `web.xml` are used instead.  While debugging `PropertySourcesPropertyResolver`, I discovered that the list of property resolvers has a different ordering than described in the documentation:  ![image](https://user-images.githubusercontent.com/1096199/61947209-edc32f80-afa4-11e9-9569-fe4b112a1cab.png)  Is this a bug or is there any other way to override parameters from `web.xml`?</body>
		<created>2019-07-26 10:59:20</created>
		<closed>2019-07-31 20:03:07</closed>
	</bug>
	<bug>
		<id>17634</id>
		<title>Reactive health indicators do not log health check failure</title>
		<body>Spring-boot 2.0.6 use lettuce as redis default client, and redis health check in actuator do not log the exception. If my redis host is wrong, the console log does not show exception message. I can only get the cause by `/actuator/health`. Why not log warn the exception in `AbstractReactiveHealthIndicator.java` in spring-boot-actuator like this: ```java public abstract class AbstractReactiveHealthIndicator implements ReactiveHealthIndicator {     private static final String DEFAULT_MESSAGE = "Health check failed";      private final Log logger = LogFactory.getLog(getClass());      private final Function&lt;Exception, String&gt; healthCheckFailedMessage;      protected AbstractReactiveHealthIndicator(String healthCheckFailedMessage) { this.healthCheckFailedMessage = (ex) -&gt; healthCheckFailedMessage;     }     @Override     public final Mono&lt;Health&gt; health() { try {     return doHealthCheck(new Health.Builder()).onErrorResume(this::handleFailure); } catch (Exception ex) {             //log the exception              if (this.logger.isWarnEnabled()) { String message = this.healthCheckFailedMessage.apply(ex); this.logger.warn(StringUtils.hasText(message) ? message : DEFAULT_MESSAGE, ex);     }     return handleFailure(ex); }     }     ··········· } ```</body>
		<created>2019-07-25 09:21:08</created>
		<closed>2019-07-29 08:41:59</closed>
	</bug>
	<bug>
		<id>17624</id>
		<title>Trimming the whitespace for the OAuth2 provider property</title>
		<body>Forward port of issue #17497 to 2.2.0.M5.</body>
		<created>2019-07-24 13:40:39</created>
		<closed>2019-07-24 13:41:43</closed>
	</bug>
	<bug>
		<id>17602</id>
		<title>ActiveMQConnectionFactory is not configured when CachingConnectionFactory is missing and enabled properties are false </title>
		<body>Forward port of issue #17531 to 2.2.0.M5.</body>
		<created>2019-07-22 11:17:18</created>
		<closed>2019-07-22 11:19:29</closed>
	</bug>
	<bug>
		<id>17599</id>
		<title>JavaVersion does not cover all available versions of Java</title>
		<body>Forward port of issue #17590 to 2.2.0.M5.</body>
		<created>2019-07-22 08:27:22</created>
		<closed>2019-07-22 08:27:47</closed>
	</bug>
	<bug>
		<id>17580</id>
		<title>@DataJdbcTest is documented as being transactional but isn't</title>
		<body>Forward port of issue #17513 to 2.2.0.M5.</body>
		<created>2019-07-19 08:35:24</created>
		<closed>2019-07-19 08:35:48</closed>
	</bug>
	<bug>
		<id>17579</id>
		<title>"spring" shell script error on AIX Bash 4.3.0</title>
		<body>spring-boot-project/spring-boot-cli/src/main/executablecontent/bin/spring has following weird commands: ``` cd "$(dirname "${PRG}")/../" &gt;&amp;- || exit 1 SPRING_HOME="$(pwd -P)" export SPRING_HOME cd "$SAVED" &gt;&amp;- || exit 1 ```  If I understand bash correctly, "&gt;&amp;-" means to close stdout. I think a more typical approach is to redirect stdout to /dev/null. As a result, we have problems with Bash 4.3 running on AIX. Not sure if that's bash or AIX or combination of both but doing a redirect to /dev/null instead helps.  Here's how I reproduced the problem: ``` -bash-4.3$ bash --version GNU bash, version 4.3.0(1)-release (powerpc-ibm-aix7.1.0.0) Copyright (C) 2013 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;  This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  -bash-4.3$ cat a.sh echo "`pwd`" cd "`pwd`" &gt;&amp;- echo "`pwd`"  -bash-4.3$ bash a.sh /cspbd/64bit-powerpc-aix7.1-gcc4.8-ora12.1-tux12.1-s-rx13/cs.platform.WD2-1.13.1.3/src/cs.mp.vtis-0.0.25/spring-cloud-cli a.sh: line 3: pwd: write error: A file descriptor does not refer to an open file. a.sh: line 3: echo: write error: A file descriptor does not refer to an open file. -bash-4.3$ ```</body>
		<created>2019-07-19 08:32:59</created>
		<closed>2019-09-01 19:21:49</closed>
	</bug>
	<bug>
		<id>17575</id>
		<title>getResourcePaths(String) allows navigation through the loader's directory structure when using Tomcat</title>
		<body>Forward port of issue #17538 to 2.2.0.M5.</body>
		<created>2019-07-18 16:17:26</created>
		<closed>2019-07-18 16:17:56</closed>
	</bug>
	<bug>
		<id>17565</id>
		<title>JavaVersion does not cover all available versions of Java</title>
		<body>We're missing Java 11 in 2.1.x. We also need to decide what to do about non-LTS versions (12 and 13) in 2.2.</body>
		<created>2019-07-18 06:10:21</created>
		<closed>2019-07-22 08:25:58</closed>
	</bug>
	<bug>
		<id>17559</id>
		<title>Auto-configuration of NettyDriverMongoClientSettingsBuilderCustomizer cannot be made to back off</title>
		<body>If Netty is always on the classpath, we will always auto-configure a `NettyDriverMongoClientSettingsBuilderCustomizer` but it's only used when auto-configuring the `MongoClient` bean. This auto-configuration will back off if the user provides their own `MongoClient` bean making the auto-configured customizer redundant or something that will be used by the user's own configuration when it may not be wanted.</body>
		<created>2019-07-17 15:56:32</created>
		<closed>2019-07-18 14:11:27</closed>
	</bug>
	<bug>
		<id>17555</id>
		<title>UndertowReactiveWebServerFactory has DeploymentInfoCustomizers even though it does not create a DeploymentInfo</title>
		<body>`UndertowReactiveWebServerFactory` has `DeploymentInfoCustomizer`s but never does anything with them as it does not create a `DeploymentInfo`. Not creating a `DeploymentInfo` makes sense as it's a Servlet-specific concept. We should deprecate the methods for adding and getting the customizers and then remove them in due course.</body>
		<created>2019-07-17 12:45:17</created>
		<closed>2019-07-18 06:23:38</closed>
	</bug>
	<bug>
		<id>17552</id>
		<title>MockMvc logging requests from all previous tests with Spring Boot Test</title>
		<body>Forward port of issue #17551 to 2.2.0.M5.</body>
		<created>2019-07-17 11:46:09</created>
		<closed>2019-07-17 11:47:08</closed>
	</bug>
	<bug>
		<id>17551</id>
		<title>MockMvc logging requests from all previous tests with Spring Boot Test</title>
		<body>I'm sure this didn't use to happen, but I only just noticed while using 5.1.8.RELEASE. With the default `@AutoConfigureMockMvc` settings, on a test failure it logs not only the requests from the failing tests, but also all previous passing tests.  Some brief testing shows this goes back to at least 5.1.0.RELEASE.</body>
		<created>2019-07-16 14:04:58</created>
		<closed>2019-07-17 11:47:07</closed>
	</bug>
	<bug>
		<id>17550</id>
		<title>Duplicate metadata entry for property that is @Deprecated when Lombok runs before spring-boot-configuration-processor</title>
		<body>When Lombok is used, fields marked @Deprecated will be generated twice in the spring-configuration-metadata.json file  ``` @ConfigurationProperties("my.application") @Setter @Getter public class ApplicationConfig {      // application name     private String name;      // module version     private String version;      // architecture layer     @Deprecated     private String architecture = "hello";  } ``` ``` &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt; ```  As shown in the picture, two descriptions are generated.  ![image](https://user-images.githubusercontent.com/13413715/61369150-1753cb00-a8c2-11e9-9e88-8a92d5f7d185.png)          </body>
		<created>2019-07-17 10:43:51</created>
		<closed>2019-09-02 13:42:46</closed>
	</bug>
	<bug>
		<id>17546</id>
		<title>Quartz auto-configuration will initialise the DataSource with Quartz's DDL when not using a JDBC job store</title>
		<body>Forward port of issue #17545 to 2.2.0.M5.</body>
		<created>2019-07-17 08:07:57</created>
		<closed>2019-07-17 08:09:08</closed>
	</bug>
	<bug>
		<id>17545</id>
		<title>Quartz auto-configuration will initialise the DataSource with Quartz's DDL when not using a JDBC job store</title>
		<body>It looks like `QuartzAutoConfiguration` will perform `DataSource` initialization, irrespective of the job store type. This means that an application with a `DataSource` bean that's using an in-memory job store will still have Quartz's DDL applied to the `DataSource`.</body>
		<created>2019-07-17 07:24:00</created>
		<closed>2019-07-17 08:09:08</closed>
	</bug>
	<bug>
		<id>17541</id>
		<title>SSL handshake fails when client authentication is enabled and starter-jetty is used</title>
		<body>SSL handshake fails when using embedded jetty and client authentication for incoming requests.   ## Version:  2.1.6.RELEASE  ## Steps to reproduce: 1.  Exclude starter-tomcat and include starter-jetty. 2.  Configure server.ssl.client-auth to NEED 3.  Send a request with client certificate. 4.  Below logs will be seen on server( debug has to be enabled) ``` Caused by: java.security.cert.CertificateException: No subject alternative names matching IP address &lt;redacted&gt; found at sun.security.util.HostnameChecker.matchIP(HostnameChecker.java:154) ~[na:1.8.0_40] at sun.security.util.HostnameChecker.match(HostnameChecker.java:91) ~[na:1.8.0_40] at sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:455) ~[na:1.8.0_40] at sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:436) ~[na:1.8.0_40] at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:252) ~[na:1.8.0_40] at sun.security.ssl.X509TrustManagerImpl.checkClientTrusted(X509TrustManagerImpl.java:130) ~[na:1.8.0_40] at sun.security.ssl.ServerHandshaker.clientCertificate(ServerHandshaker.java:1835) ~[na:1.8.0_40] ... 24 common frames omitted ```  5.  Sample project to reproduce the issue.   https://github.com/kmailkarthik/demo-springboot-issue   ## Root cause:  https://github.com/eclipse/jetty.project/issues/3454 https://github.com/eclipse/jetty.project/issues/3464  ## Fix: Tried to change SslContextFactory to SslContextFactory.Server in below fork and it fixes the issue.  https://github.com/kmailkarthik/spring-boot/tree/2.1.x</body>
		<created>2019-07-17 02:34:38</created>
		<closed>2019-09-01 19:12:09</closed>
	</bug>
	<bug>
		<id>17513</id>
		<title>@DataJdbcTest is documented as being transactional but isn't</title>
		<body>I'll propose to support the `@Transactional` as meta-annotation at `@DataJdbcTest` as same with `@JdbcTest`. WDYT?</body>
		<created>2019-07-14 20:02:17</created>
		<closed>2019-07-19 08:35:48</closed>
	</bug>
	<bug>
		<id>17487</id>
		<title>Whitespace in provider name in the OAuth2 properties causes mismatch</title>
		<body>&lt;!-- For Security Vulnerabilities, please use https://pivotal.io/security#reporting --&gt;  ### Summary Whitespace in provider name in the OAuth2 properties causes mismatch for provider ID as it is not able to match the ID to the other proprty parameters   ### Actual Behavior  1. Define oauth2 properties in application.properties file  ``` spring.security.oauth2.client.registration.xxx.provider=xxx      spring.security.oauth2.client.provider.xxx.authorization-uri=http://localhost:8282/o/oauth2/v2/auth ```  2. Start Spring Boot 3. Spring Boot throws error: `Caused by: java.lang.IllegalStateException: Unknown provider ID 'xxx    '`  ### Expected Behavior Expect 'xxx' provider name to match provider properties  ### Configuration ``` spring.security.oauth2.client.registration.fake_oauth.client-id=dummy-client-id spring.security.oauth2.client.registration.fake_oauth.client-secret=dummy-client-secret spring.security.oauth2.client.registration.fake_oauth.client-name=fake_oauth spring.security.oauth2.client.registration.fake_oauth.scope= spring.security.oauth2.client.registration.fake_oauth.provider=fake_oauth    spring.security.oauth2.client.registration.fake_oauth.authorization-grant-type=authorization_code spring.security.oauth2.client.registration.fake_oauth.client-authentication-scheme=basic spring.security.oauth2.client.registration.fake_oauth.redirect-uri-template=http://localhost:8000/oseries-auth/login/oauth2/code/fake_oauth  spring.security.oauth2.client.provider.fake_oauth.authorization-uri=http://localhost:8282/o/oauth2/v2/auth spring.security.oauth2.client.provider.fake_oauth.token-uri=http://localhost:8282/oauth2/v4/token spring.security.oauth2.client.provider.fake_oauth.user-info-uri=http://localhost:8282/oauth2/v3/userinfo spring.security.oauth2.client.provider.fake_oauth.user-info-authentication-method=basic spring.security.oauth2.client.provider.fake_oauth.user-name-attribute=name ```  ### Version  Spring boot 2.1.2.RELEASE spring-security-oauth2-client-5.1.3.RELEASE ### Sample  &lt;!-- Providing a complete sample (i.e. link to a github repository) will give this issue higher priority than issues that do not have a complete sample --&gt; </body>
		<created>2019-07-03 15:32:51</created>
		<closed>2019-07-12 17:46:29</closed>
	</bug>
	<bug>
		<id>17486</id>
		<title>/actuator/logfile endpoint returning 404 when logging.file property contains a random value</title>
		<body>Forward port of issue #17434 to 2.2.0.M5.</body>
		<created>2019-07-10 22:32:42</created>
		<closed>2019-07-10 22:34:05</closed>
	</bug>
	<bug>
		<id>17483</id>
		<title>ActiveMQConnectionFactory is not configured when CachingConnectionFactory is missing and enabled properties are false</title>
		<body>When both properties `spring.activemq.pool.enabled` and  `spring.jms.cache.enabled` set to `false` and `CachingConnectionFactory` is not on the classpath then `ActiveMQAutoConfiguration` will not register `ActiveMQConnectionFactory` bean.   ```java @RunWith(ModifiedClassPathRunner.class) @ClassPathExclusions("spring-jms-*.jar") public class ActiveMQAutoConfigurationTestsWithoutCachingConnectionFactoryTests {  private final ApplicationContextRunner contextRunner = new ApplicationContextRunner() .withConfiguration(AutoConfigurations.of(ActiveMQAutoConfiguration.class));  @Test public void whenThereIsNoCachingConnectionFactoryOnTheClasspathThenSimpleConnectionFactoryAutoConfigured() { this.contextRunner.withPropertyValues("spring.activemq.pool.enabled=false", "spring.jms.cache.enabled=false") .run((context) -&gt; assertThat(context).hasSingleBean(ActiveMQConnectionFactory.class)); }  } ```  It happens because `@ConditionalOnClass(CachingConnectionFactory.class)` is present on `ActiveMQConnectionFactoryConfiguration$SimpleConnectionFactoryConfiguration` configuration class.</body>
		<created>2019-07-10 13:07:15</created>
		<closed>2019-07-22 08:32:10</closed>
	</bug>
	<bug>
		<id>17481</id>
		<title>EmbeddedMongoAutoConfiguration should depend on bean by type</title>
		<body>Forward port of issue #16627 to 2.2.0.M5.</body>
		<created>2019-07-10 12:30:35</created>
		<closed>2019-07-10 12:31:43</closed>
	</bug>
	<bug>
		<id>17477</id>
		<title>Mutation of Jackson2ObjectMapperBuilder in one injection point may affect subsequent usages</title>
		<body>`Jackson2ObjectMapperBuilder` is stateful and we have a few places where it's injected and mutated:  https://github.com/spring-projects/spring-boot/blob/3c28622ebc81444974859685b14a663697612e23/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration.java#L63-L68  https://github.com/spring-projects/spring-boot/blob/3c28622ebc81444974859685b14a663697612e23/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java#L102-L107  https://github.com/spring-projects/spring-boot/blob/3c28622ebc81444974859685b14a663697612e23/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java#L76-L85  As things stand, depending on auto-configuration ordering, whether or not you have Jackson's XML format on the classpath, and when precisely the `Jackson2ObjectMapperBuilder` is used, you may or may not get an XML mapper. Perhaps that's OK and we expect consumers of the builder to always call `createXmlMapper(true|false)` to meet their needs but I'm not sure that the current behaviour is intentional and I think it could be a bit brittle and confusing. https://github.com/spring-projects/spring-boot/issues/17425 is an example of that.</body>
		<created>2019-07-10 10:37:16</created>
		<closed>2019-07-19 13:01:21</closed>
	</bug>
	<bug>
		<id>17470</id>
		<title>JUL logger configuration may be lost before usage due to GC</title>
		<body>Forward port of issue #17217 to 2.2.0.M5.</body>
		<created>2019-07-09 19:04:19</created>
		<closed>2019-07-09 19:06:35</closed>
	</bug>
	<bug>
		<id>17466</id>
		<title>Batch app fails to start if there's an entityManagerFactory bean but no DataSource bean</title>
		<body>Forward port of issue #17465 to 2.2.0.M5.</body>
		<created>2019-07-09 15:52:30</created>
		<closed>2019-07-09 15:53:49</closed>
	</bug>
	<bug>
		<id>17465</id>
		<title>Batch app fails to start if there's an entityManagerFactory bean but no DataSource bean</title>
		<body></body>
		<created>2019-07-09 14:45:11</created>
		<closed>2019-07-09 15:53:49</closed>
	</bug>
	<bug>
		<id>17454</id>
		<title>Batch auto-configuration backs off too aggressively without a dependency on spring-jdbc</title>
		<body>Forward port of issue #17451 to 2.2.0.M5.</body>
		<created>2019-07-08 14:54:25</created>
		<closed>2019-07-08 14:54:49</closed>
	</bug>
	<bug>
		<id>17453</id>
		<title>Batch app fails to start if spring-jdbc is on the classpath but there's no DataSource bean</title>
		<body>Forward port of issue #17449 to 2.2.0.M5.</body>
		<created>2019-07-08 13:44:43</created>
		<closed>2019-07-08 13:56:15</closed>
	</bug>
	<bug>
		<id>17451</id>
		<title>Batch auto-configuration backs off too aggressively without a dependency on spring-jdbc</title>
		<body>If I don't want a database for my jobs in Spring Batch, I want to exclude jdbc from my dependencies like this: ``` &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-batch&lt;/artifactId&gt;     &lt;exclusions&gt;         &lt;exclusion&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;         &lt;/exclusion&gt;     &lt;/exclusions&gt; &lt;/dependency&gt; ``` And have it work. see https://stackoverflow.com/questions/25077549 Currently, `org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration` does not get picked up because of conditions not matched, so I have to copy paste the relevant stuff like this: ``` import org.springframework.batch.core.configuration.ListableJobLocator; import org.springframework.batch.core.converter.JobParametersConverter; import org.springframework.batch.core.explore.JobExplorer; import org.springframework.batch.core.launch.JobLauncher; import org.springframework.batch.core.launch.JobOperator; import org.springframework.batch.core.launch.support.SimpleJobOperator; import org.springframework.batch.core.repository.JobRepository; import org.springframework.beans.factory.ObjectProvider; import org.springframework.boot.ExitCodeGenerator; import org.springframework.boot.autoconfigure.batch.BatchProperties; import org.springframework.boot.autoconfigure.batch.JobExecutionExitCodeGenerator; import org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner; import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.util.StringUtils;  //copied from org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration @Configuration @EnableConfigurationProperties(BatchProperties.class) public class BatchAutoConfiguration {      private final BatchProperties properties;      private final JobParametersConverter jobParametersConverter;      public BatchAutoConfiguration(             BatchProperties properties,             ObjectProvider&lt;JobParametersConverter&gt; jobParametersConverter) {         this.properties = properties;         this.jobParametersConverter = jobParametersConverter.getIfAvailable();     }      @Bean     @ConditionalOnMissingBean     @ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true)     public JobLauncherCommandLineRunner jobLauncherCommandLineRunner(             JobLauncher jobLauncher, JobExplorer jobExplorer,             JobRepository jobRepository) {         JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(jobLauncher, jobExplorer, jobRepository);         String jobNames = this.properties.getJob().getNames();         if (StringUtils.hasText(jobNames)) {             runner.setJobNames(jobNames);         }         return runner;     }      @Bean     @ConditionalOnMissingBean(ExitCodeGenerator.class)     public JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {         return new JobExecutionExitCodeGenerator();     }      @Bean     @ConditionalOnMissingBean(JobOperator.class)     public SimpleJobOperator jobOperator(             JobExplorer jobExplorer, JobLauncher jobLauncher,             ListableJobLocator jobRegistry, JobRepository jobRepository) throws Exception {         SimpleJobOperator factory = new SimpleJobOperator();         factory.setJobExplorer(jobExplorer);         factory.setJobLauncher(jobLauncher);         factory.setJobRegistry(jobRegistry);         factory.setJobRepository(jobRepository);         if (this.jobParametersConverter != null) {             factory.setJobParametersConverter(this.jobParametersConverter);         }         return factory;     } } ```</body>
		<created>2019-07-08 12:20:10</created>
		<closed>2019-07-08 14:54:48</closed>
	</bug>
	<bug>
		<id>17449</id>
		<title>Batch app fails to start if spring-jdbc is on the classpath but there's no DataSource bean</title>
		<body>``` 2019-07-08 13:02:59.744 DEBUG 46977 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : Application failed to start due to an exception  org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'javax.sql.DataSource' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1658) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1217) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:845) ~[spring-beans-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.8.RELEASE.jar:5.1.8.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:743) [classes/:na] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:390) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:312) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1214) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1203) [classes/:na] at sample.batch.SampleBatchApplication.main(SampleBatchApplication.java:68) [classes/:na]  2019-07-08 13:02:59.744 ERROR 46977 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 1 of method batchConfigurer in org.springframework.boot.autoconfigure.batch.BatchConfigurerConfiguration$JdbcBatchConfiguration required a bean of type 'javax.sql.DataSource' that could not be found.  The following candidates were found but could not be injected: - Bean method 'dataSource' in 'JndiDataSourceAutoConfiguration' not loaded because @ConditionalOnProperty (spring.datasource.jndi-name) did not find property 'jndi-name' - Bean method 'dataSource' in 'XADataSourceAutoConfiguration' not loaded because @ConditionalOnClass did not find required class 'javax.transaction.TransactionManager'   Action:  Consider revisiting the entries above or defining a bean of type 'javax.sql.DataSource' in your configuration. ```</body>
		<created>2019-07-08 12:04:23</created>
		<closed>2019-07-08 13:56:15</closed>
	</bug>
	<bug>
		<id>17434</id>
		<title>/actuator/logfile endpoint returning 404 when logging.file property contains a random value</title>
		<body>I'm running a Spring Boot 2.1.6.RELEASE application using `spring-boot-starter-actuator` to expose the application's logfile over HTTP. My `application.properties` looks as follows (runnable example [here](https://github.com/morth/spring-boot-actuator-test)):  ``` spring.application.name=actuator-test spring.application.instance_id=${random.value}  management.endpoints.web.exposure.include=*  logging.file=./target/logs/${spring.application.name}/${spring.application.instance_id}.log ```  When I run the application and call up `http://localhost:8080/actuator/logfile` I get a 404 error, even though the endpoint is listed in `http://localhost:8080/actuator`: ``` {   "_links": {     "self": {       "href": "http://localhost:8080/actuator",       "templated": false     },     ...     "logfile": {       "href": "http://localhost:8080/actuator/logfile",       "templated": false     },     ...   } } ``` The logfile itself is successfully generated and stored in the expected path.  I've found out that this has something to do with the use of placeholders in the `logging.file` property definition. As soon as I replace `logging.file=./target/logs/${spring.application.name}/${spring.application.instance_id}.log` with something like `logging.file=./target/logs/test.log`, everything works as expected.</body>
		<created>2019-07-05 00:07:38</created>
		<closed>2019-07-10 22:34:05</closed>
	</bug>
	<bug>
		<id>17432</id>
		<title>MongoDataAutoConfiguration not applied when a MongoDbFactory is provided by Spring Cloud</title>
		<body>Forward port of issue #17416 to 2.2.0.M5.</body>
		<created>2019-07-04 11:56:45</created>
		<closed>2019-07-04 11:57:39</closed>
	</bug>
	<bug>
		<id>17425</id>
		<title>ClassCastException in RSocket auto-configuration when Jackson XML is present</title>
		<body>See this case ,spring boot env  spring boot 2.2.0 M4 , spring framework 5.2.0.M3  JDK 11.0.3  this  error :  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rSocketStrategies' defined in class path resource [org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.messaging.rsocket.RSocketStrategies]: Factory method 'rSocketStrategies' threw exception; nested exception is java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:638) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:618) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1326) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:870) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.2.0.M3.jar:5.2.0.M3] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.2.0.M3.jar:5.2.0.M3] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:748) [spring-boot-2.2.0.M4.jar:2.2.0.M4] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.2.0.M4.jar:2.2.0.M4] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-2.2.0.M4.jar:2.2.0.M4] at com.apsaras.platform.container.boot.PlatformJavaApplication.run(PlatformJavaApplication.java:69) [apsaras-bootstarp-3.3.5-SNAPSHOT.jar:3.3.5-SNAPSHOT] at com.apsaras.platform.container.boot.PlatformJavaApplication.start(PlatformJavaApplication.java:48) [apsaras-bootstarp-3.3.5-SNAPSHOT.jar:3.3.5-SNAPSHOT] at com.apsaras.platform.container.boot.PlatformJavaApplication.main(PlatformJavaApplication.java:90) [apsaras-bootstarp-3.3.5-SNAPSHOT.jar:3.3.5-SNAPSHOT] at TestExecutorApp.main(TestExecutorApp.java:10) [apsaras-job-executor-sample/:?] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.messaging.rsocket.RSocketStrategies]: Factory method 'rSocketStrategies' threw exception; nested exception is java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:633) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] ... 19 more Caused by: java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$XmlObjectMapperInitializer.create(Jackson2ObjectMapperBuilder.java:866) ~[spring-web-5.2.0.M3.jar:5.2.0.M3] at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.build(Jackson2ObjectMapperBuilder.java:628) ~[spring-web-5.2.0.M3.jar:5.2.0.M3] at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration$JacksonCborStrategyConfiguration.lambda$jacksonCborRSocketStrategyCustomizer$0(RSocketStrategiesAutoConfiguration.java:81) ~[spring-boot-autoconfigure-2.2.0.M4.jar:2.2.0.M4] at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration.lambda$rSocketStrategies$0(RSocketStrategiesAutoConfiguration.java:63) ~[spring-boot-autoconfigure-2.2.0.M4.jar:2.2.0.M4] at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:?] at java.util.ArrayList.forEach(ArrayList.java:1540) ~[?:?] at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395) ~[?:?] at java.util.stream.Sink$ChainedReference.end(Sink.java:258) ~[?:?] at java.util.stream.Sink$ChainedReference.end(Sink.java:258) ~[?:?] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[?:?] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[?:?] at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:?] at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:?] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:?] at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497) ~[?:?] at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration.rSocketStrategies(RSocketStrategiesAutoConfiguration.java:63) ~[spring-boot-autoconfigure-2.2.0.M4.jar:2.2.0.M4] at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?] at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?] at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?] at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:633) ~[spring-beans-5.2.0.M3.jar:5.2.0.M3] ... 19 more  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rSocketStrategies' defined in class path resource [org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.messaging.rsocket.RSocketStrategies]: Factory method 'rSocketStrategies' threw exception; nested exception is java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:638) at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:618) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1326) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1165) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:870) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:748) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) at com.apsaras.platform.container.boot.PlatformJavaApplication.run(PlatformJavaApplication.java:69) at com.apsaras.platform.container.boot.PlatformJavaApplication.start(PlatformJavaApplication.java:48) at com.apsaras.platform.container.boot.PlatformJavaApplication.main(PlatformJavaApplication.java:90) at TestExecutorApp.main(TestExecutorApp.java:10) Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.messaging.rsocket.RSocketStrategies]: Factory method 'rSocketStrategies' threw exception; nested exception is java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:633) ... 19 more Caused by: java.lang.ClassCastException: class com.fasterxml.jackson.dataformat.cbor.CBORFactory cannot be cast to class com.fasterxml.jackson.dataformat.xml.XmlFactory (com.fasterxml.jackson.dataformat.cbor.CBORFactory and com.fasterxml.jackson.dataformat.xml.XmlFactory are in unnamed module of loader 'app') at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$XmlObjectMapperInitializer.create(Jackson2ObjectMapperBuilder.java:866) at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.build(Jackson2ObjectMapperBuilder.java:628) at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration$JacksonCborStrategyConfiguration.lambda$jacksonCborRSocketStrategyCustomizer$0(RSocketStrategiesAutoConfiguration.java:81) at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration.lambda$rSocketStrategies$0(RSocketStrategiesAutoConfiguration.java:63) at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) at java.base/java.util.ArrayList.forEach(ArrayList.java:1540) at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395) at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258) at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258) at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497) at org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration.rSocketStrategies(RSocketStrategiesAutoConfiguration.java:63) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ... 20 more ```</body>
		<created>2019-07-04 07:24:19</created>
		<closed>2019-07-10 10:07:38</closed>
	</bug>
	<bug>
		<id>17424</id>
		<title>ValidationBindHandler fails if setters cannot be accessed</title>
		<body>The `ValidationBindHandler` uses `BeanPropertyBindingResult` to collect errors. This makes the assumption that bean properties are available as standard visible getters/setters. Whilst this is a relatively safe assumption for 2.1.x, with the constructor binding of 2.2.x we should no longer assume that properties have getters. We also want to support package private binding (#17394) which is not supported by `BeanPropertyBindingResult`. </body>
		<created>2019-07-04 04:55:21</created>
		<closed>2019-07-04 04:59:33</closed>
	</bug>
	<bug>
		<id>17422</id>
		<title>Validation does not apply to hander replaced results</title>
		<body>Forward port of issue #17421 to 2.2.0.M5.</body>
		<created>2019-07-03 23:02:45</created>
		<closed>2019-07-03 23:06:38</closed>
	</bug>
	<bug>
		<id>17421</id>
		<title>Validation does not apply to hander replaced results</title>
		<body>The `ValidationBindHandler` does not validate results if another `BindHandler` returns a non null result from `onFailure`. In such cases, we should probably clear any existing validation errors and re-run against the new result.</body>
		<created>2019-07-03 22:49:10</created>
		<closed>2019-07-03 23:06:38</closed>
	</bug>
	<bug>
		<id>17416</id>
		<title>MongoDataAutoConfiguration not applied when a MongoDbFactory is provided by Spring Cloud</title>
		<body>in Spring Boot 2.1.5, `org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration` has the condition `AnyMongoClientAvailable` that requires a MongoClient bean to be present. When using the `ServiceConnectionFactory` from Spring Cloud Spring Services 2.0.5, only a `MongoDbFactory` is present, thus `MongoDataAutoConfiguration` is never applied. `org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration` will not create a client either.  The `AnyMongoClientAvailable` condition should be only on `org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration#mongoDbFactory`.</body>
		<created>2019-07-03 12:49:54</created>
		<closed>2019-07-04 11:57:39</closed>
	</bug>
	<bug>
		<id>17409</id>
		<title>Jetty logs a warning about an empty context path when using WebFlux</title>
		<body>Forward port of issue #17399 to 2.2.0.M5.</body>
		<created>2019-07-02 16:34:32</created>
		<closed>2019-07-02 16:36:16</closed>
	</bug>
	<bug>
		<id>17408</id>
		<title>Shutdown endpoint is called when the application context is closed as its shutdown() method is inferred to be a destroy method</title>
		<body>Forward port of issue #17407 to 2.2.0.M5.</body>
		<created>2019-07-02 13:08:20</created>
		<closed>2019-07-02 13:11:46</closed>
	</bug>
	<bug>
		<id>17407</id>
		<title>Shutdown endpoint is called when the application context is closed as its shutdown() method is inferred to be a destroy method</title>
		<body>See https://github.com/spring-projects/spring-boot/issues/17398#issuecomment-507660110 for background.</body>
		<created>2019-07-02 12:53:16</created>
		<closed>2019-07-02 13:11:46</closed>
	</bug>
	<bug>
		<id>17401</id>
		<title>Dependency management for Infinispan is incomplete</title>
		<body>Forward port of issue #17346 to 2.2.0.M5.</body>
		<created>2019-07-02 10:48:09</created>
		<closed>2019-07-02 10:49:33</closed>
	</bug>
	<bug>
		<id>17399</id>
		<title>Jetty logs a warning about an empty context path when using WebFlux</title>
		<body>Jetty warns "Empty contextPath" while my server application, which depends on spring-boot-starter-webflux 2.1.6 and spring-boot-starter-jetty 2.1.6, is starting.  ``` 2019-07-02 19:00:40,472 WARN  main (ContextHandler) [-:-] Empty contextPath ```  It seems that `JettyReactiveWebServerFactory` sets the context path always to "".  https://github.com/spring-projects/spring-boot/blob/4f47b397e79f6bfc6600c6c4c0d6b0d82c16503e/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java#L176  So it makes Jetty logs the warning message.  ```java         if (contextPath.length() == 0)         {             LOG.warn("Empty contextPath");             contextPath = "/";         } ``` -- https://github.com/eclipse/jetty.project/blob/cf4e7412d440c581bc351de69fee1d00eac1a33e/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java#L1536-L1540</body>
		<created>2019-07-02 10:08:49</created>
		<closed>2019-07-02 16:36:15</closed>
	</bug>
	<bug>
		<id>17396</id>
		<title>StringToEnumIgnoringCaseConverterFactory getLettersAndDigits returns an integer string</title>
		<body>Forward port of issue #17327 to 2.2.0.M5.</body>
		<created>2019-07-02 04:52:47</created>
		<closed>2019-07-02 04:53:16</closed>
	</bug>
	<bug>
		<id>17381</id>
		<title>Classes and resources with a single letter component in their package name cannot be loaded from jar files with /./ or /../ in their path</title>
		<body>Forward port of issue #17341 to 2.2.0.M5.</body>
		<created>2019-07-01 14:48:06</created>
		<closed>2019-07-01 14:48:40</closed>
	</bug>
	<bug>
		<id>17346</id>
		<title>Dependency management for Infinispan is incomplete</title>
		<body></body>
		<created>2019-06-28 15:40:48</created>
		<closed>2019-07-02 10:49:33</closed>
	</bug>
	<bug>
		<id>17341</id>
		<title>Classes and resources with a single letter component in their package name cannot be loaded from jar files with /./ or /../ in their path</title>
		<body>our project load mysql 8 class fail:  ![loadmysqlfail](https://user-images.githubusercontent.com/8428331/60338822-93e93d00-99d9-11e9-8723-e758b46efc67.png)  package config:  ```xml &lt;plugin&gt;       &lt;groupId&gt;org.spring.framework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;       &lt;executions&gt;              &lt;execution&gt;                     &lt;goals&gt;                          &lt;goal&gt;repackage&lt;/goal&gt;                     &lt;/goals&gt;              &lt;/execution&gt;       &lt;/executions&gt;       &lt;configuration&gt;             &lt;mainClass&gt;our main class&lt;/mainClass&gt;             &lt;layout&gt;ZIP&lt;/layout&gt;             &lt;excludes&gt;                   &lt;exclude&gt;                          &lt;groupId&gt;mysql&lt;/groupId&gt;                          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                   &lt;/exclude&gt;             &lt;/excludes&gt;       &lt;/configuration&gt; &lt;/plugin&gt; ``` project dist directory: ``` /--bin/  --config/  --lib/      --drivers/           -- mysql-connector-java-8.0.15.jar      --bootstrap.jar  --scripts/ ```  by debug, I found when load 'com/mysql/cj/protocol/a/result/NativeResultset.class'，  the spring boot custom  URLStremHandler  (***org/springframework/boot/loader/jar/Handler.java***   [Handler.java](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java)  ) will parse 'com/mysql/cj/protocol/a/result/NativeResultset.class' as 'com/mysql/cj/protocol/result/NativeResultset.class'  。  In other words, every single letter directory will be parse as empty string "";   </body>
		<created>2019-06-28 11:31:22</created>
		<closed>2019-07-01 14:48:39</closed>
	</bug>
	<bug>
		<id>17327</id>
		<title>StringToEnumIgnoringCaseConverterFactory getLettersAndDigits returns an integer string</title>
		<body>The `StringToEnumIgnoringCaseConverterFactory.getLettersAndDigits` accidentally returns a string containing the integer representations of the chars. We get away with it because the same method is used to compare the source and candidate but it makes debugging harder.  We should be casting the `int` back to a `char` when we build the String.</body>
		<created>2019-06-26 19:59:49</created>
		<closed>2019-07-02 04:53:16</closed>
	</bug>
	<bug>
		<id>17288</id>
		<title>HibernateJpaAutoConfiguration's condition uses deprecated classes</title>
		<body>See original issue  #17283</body>
		<created>2019-06-21 13:25:10</created>
		<closed>2019-06-21 13:29:18</closed>
	</bug>
	<bug>
		<id>17283</id>
		<title>HibernateJpaAutoConfiguration's condition uses deprecated classes</title>
		<body>`HibernateEntityManagerCondition` checks for deprecated classes, we should review the condition and update it accordingly.</body>
		<created>2019-06-21 08:07:48</created>
		<closed>2019-06-21 13:24:12</closed>
	</bug>
	<bug>
		<id>17262</id>
		<title>getResourcePaths(String) allows navigation through the loader's directory structure when using Tomcat</title>
		<body>While we prevent individual `ServletContext.getResource(String)` requests for the loader and do not allow it to be served static resources, when using Tomcat `getResourcePath(String)` will return paths that allow navigation of the loader's directory structure. The same is not possible when using Jetty. We should see if we can prevent it with Tomcat as well.</body>
		<created>2019-06-19 05:46:48</created>
		<closed>2019-07-18 15:17:04</closed>
	</bug>
	<bug>
		<id>17243</id>
		<title>ServletContext.getResourcePaths() does not return all matching resources with Undertow</title>
		<body>Our `CompositeResourceManager` only works property for `ServletContext.getResource()`. For `ServletContext.getResourcePaths()` the search stops as soon as the first delegate `ResourceManager` returns a non-null `Resource`. As a result, any resource paths that would have been provided by any subsequent `ResourceManager`s are lost.</body>
		<created>2019-06-18 14:16:24</created>
		<closed>2019-09-02 08:42:57</closed>
	</bug>
	<bug>
		<id>17232</id>
		<title>Gradle plugin creates fat jars that do not align with unspecified assumption that META-INF/MANIFEST.MF should be the first or second entry</title>
		<body>Forward port of issue #16698 to 2.2.0.M4.</body>
		<created>2019-06-17 22:55:07</created>
		<closed>2019-06-17 23:05:13</closed>
	</bug>
	<bug>
		<id>17228</id>
		<title>Netty connection timeouts of 0 or -1 are not applied correctly</title>
		<body>Forward port of issue #16535 to 2.2.0.M4.</body>
		<created>2019-06-17 18:53:17</created>
		<closed>2019-06-17 18:55:29</closed>
	</bug>
	<bug>
		<id>17227</id>
		<title>PropertyMapper does not chain when and whenNot calls</title>
		<body>Forward port of issue #17225 to 2.2.0.M4.</body>
		<created>2019-06-17 18:52:59</created>
		<closed>2019-06-17 18:55:29</closed>
	</bug>
	<bug>
		<id>17225</id>
		<title>PropertyMapper does not chain when and whenNot calls</title>
		<body>The `PropertyMapper` currently replaces rather than combines the predicates passed to `with` or `withNot`.</body>
		<created>2019-06-17 18:18:13</created>
		<closed>2019-06-17 18:55:28</closed>
	</bug>
	<bug>
		<id>17223</id>
		<title>Dependency management for JavaBeans Activation Framework is incomplete</title>
		<body>Forward port of issue #17062 to 2.2.0.M4.</body>
		<created>2019-06-17 15:08:58</created>
		<closed>2019-06-17 15:09:48</closed>
	</bug>
	<bug>
		<id>17220</id>
		<title>@WebMvcTest ignores base path configured via @WebAppConfiguration</title>
		<body>Forward port of issue #16485 to 2.2.0.M4.</body>
		<created>2019-06-17 13:05:56</created>
		<closed>2019-06-17 13:06:39</closed>
	</bug>
	<bug>
		<id>17219</id>
		<title>Missing outcome tag for WebClient metrics on errors</title>
		<body>**Affects:** 2.2.0.M3  ### Description On error signal there is a problem in MetricsWebClientFilterFunction::filter. There could be no response and DefaultWebClientExchangeTagsProvider::tags will return not enough tags (no outcome tag) for metrics and we will get: ``` java.lang.IllegalArgumentException: Prometheus requires that all meters with the same name have the same set of tag keys. There is already an existing meter named 'http_client_requests_seconds' containing tag keys [application, clientName, method, outcome, status, uri]. The meter you are attempting to register has keys [application, clientName, method, status, uri]. at io.micrometer.prometheus.PrometheusMeterRegistry.lambda$collectorByName$9(PrometheusMeterRegistry.java:372) at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1932) at io.micrometer.prometheus.PrometheusMeterRegistry.collectorByName(PrometheusMeterRegistry.java:359) at io.micrometer.prometheus.PrometheusMeterRegistry.newTimer(PrometheusMeterRegistry.java:165) at io.micrometer.core.instrument.MeterRegistry.lambda$timer$2(MeterRegistry.java:270) at io.micrometer.core.instrument.MeterRegistry.getOrCreateMeter(MeterRegistry.java:575) at io.micrometer.core.instrument.MeterRegistry.registerMeterIfNecessary(MeterRegistry.java:528) at io.micrometer.core.instrument.MeterRegistry.timer(MeterRegistry.java:268) at io.micrometer.core.instrument.Timer$Builder.register(Timer.java:464) at org.springframework.boot.actuate.metrics.web.reactive.client.MetricsWebClientFilterFunction.lambda$filter$0(MetricsWebClientFilterFunction.java:99) ```</body>
		<created>2019-06-17 13:00:25</created>
		<closed>2019-06-18 13:37:07</closed>
	</bug>
	<bug>
		<id>17218</id>
		<title>Flyway and Liquibase auto-configuration does not consider DataSource properties configured via @AutoConfigureTestDatabase</title>
		<body>Forward port of issue #16814 to 2.2.0.M4.</body>
		<created>2019-06-17 12:20:09</created>
		<closed>2019-06-17 12:20:40</closed>
	</bug>
	<bug>
		<id>17217</id>
		<title>JUL logger configuration may be lost before usage due to GC</title>
		<body>```java // java version "12.0.1" 2019-04-16 // Java(TM) SE Runtime Environment (build 12.0.1+12) // Java HotSpot(TM) 64-Bit Server VM (build 12.0.1+12, mixed mode, sharing) //  // org.springframework.boot:spring-boot:2.1.5.RELEASE   import org.springframework.boot.logging.LogLevel; import org.springframework.boot.logging.java.JavaLoggingSystem;  import java.util.logging.Level; import java.util.logging.Logger;  var logger = "some.logger";  var loggingSystem = new JavaLoggingSystem(getClass().getClassLoader()); loggingSystem.setLogLevel(logger, LogLevel.TRACE);  // Just configured logger works as expected. assert Logger.getLogger(logger).isLoggable(Level.FINEST);  // But configuration and usage are usually separated in time, // GC may happen between `LoggingApplicationListener.initializeFinalLoggingLevels`  // and obtaining logger (e.g. static log field initialization). // JUL LogManager uses weak references to store loggers. // Spring JavaLoggingSystem doesn't hold strong references to configured loggers. System.gc();  // So configuration may be lost :( assert Logger.getLogger(logger).isLoggable(Level.FINEST); ```  Maybe `JavaLoggingSystem` should keep strong references to configured loggers?</body>
		<created>2019-06-17 12:11:42</created>
		<closed>2019-07-09 19:06:35</closed>
	</bug>
	<bug>
		<id>17214</id>
		<title>Custom protocols are not honoured when Devtools is active</title>
		<body>See https://github.com/spring-projects/spring-boot/issues/9331#issuecomment-502481425</body>
		<created>2019-06-17 10:27:46</created>
		<closed>2019-09-16 13:13:19</closed>
	</bug>
	<bug>
		<id>17213</id>
		<title>@JooqTest does not auto-configure caching</title>
		<body>Forward port of issue #17066 to 2.2.0.M4.</body>
		<created>2019-06-17 09:59:44</created>
		<closed>2019-06-17 10:00:11</closed>
	</bug>
	<bug>
		<id>17211</id>
		<title>Fat jar launcher mishandles root jar files with + characters in their path, making nested entries unloadable</title>
		<body>Forward port of issue #17208 to 2.2.0.M4.</body>
		<created>2019-06-17 09:38:49</created>
		<closed>2019-06-17 09:39:58</closed>
	</bug>
	<bug>
		<id>17208</id>
		<title>Fat jar launcher mishandles root jar files with + characters in their path, making nested entries unloadable</title>
		<body>When a URL contains a special character such as `+`, the call `getRootJarFileFromUrl` fails. Here is a sample repro: ``` public static void main(String[] args) throws IOException {     URL url = new URL("jar:file:/tmp/test/test+1.jar!/META-INF/MANIFEST.MF");     JarFile jarFile = new Handler().getRootJarFileFromUrl(url); } ```  This is the exception: ``` Exception in thread "main" java.io.IOException: Unable to open root Jar file 'file:/tmp/test/test+1.jar' at org.springframework.boot.loader.jar.Handler.getRootJarFile(Handler.java:324) at org.springframework.boot.loader.jar.Handler.getRootJarFileFromUrl(Handler.java:305) at Main.main(Main.java:11) Caused by: java.lang.IllegalArgumentException: File /tmp/test/test 1.jar must exist at org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess.openIfNecessary(RandomAccessDataFile.java:234) at org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess.&lt;init&gt;(RandomAccessDataFile.java:216) at org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess.&lt;init&gt;(RandomAccessDataFile.java:206) at org.springframework.boot.loader.data.RandomAccessDataFile.&lt;init&gt;(RandomAccessDataFile.java:49) at org.springframework.boot.loader.jar.JarFile.&lt;init&gt;(JarFile.java:88) at org.springframework.boot.loader.jar.Handler.getRootJarFile(Handler.java:318) ... 2 more ```  I believe the root cause is the decoding of the root path that happens [here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java#L306). The returned String from `decode` omits the special character.</body>
		<created>2019-06-16 03:05:22</created>
		<closed>2019-06-17 09:39:58</closed>
	</bug>
	<bug>
		<id>17192</id>
		<title>Logback debugging property is ignored unless a logback file is present</title>
		<body>Forward port of issue #16876 to 2.2.0.M4.</body>
		<created>2019-06-14 14:15:29</created>
		<closed>2019-06-14 14:15:53</closed>
	</bug>
	<bug>
		<id>17191</id>
		<title>Embedded MongoDB uses HTTP rather than HTTPS by default to download Mongo binaries</title>
		<body>Embedded MongoDB 1.x uses HTTP rather than HTTPS to download Mongo binaries. This has been [fixed in 2.x](https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo/commit/b925115be5868d0ff037045acaba95af474b4208) but 1.x has not be updated. We should update our auto-configuration to use `https` download paths by default.</body>
		<created>2019-06-14 11:43:25</created>
		<closed>2019-06-14 11:49:43</closed>
	</bug>
	<bug>
		<id>17127</id>
		<title>Getting an InputStream from a JarURLConnection for a nested jar or an entry in a nested jar creates a JarFile that's never closed</title>
		<body></body>
		<created>2019-06-12 13:10:36</created>
		<closed>2019-06-12 13:24:20</closed>
	</bug>
	<bug>
		<id>17126</id>
		<title>JarFileArchive creates a JarFile that is never closed</title>
		<body>When a `JarFileArchive` is created with a `File`, it creates a `JarFile` instance that is never closed. There's no accessor for the underlying `JarFile` and no `close()` method so, without resorting to reflection, there's nothing that a user of `JarFileArchive` can do to avoid leaking an open file.  This problem affects our tests where the open files prevent JUnit 5 from cleaning up a temporary directory. We could resort to reflection in our tests to close the underlying `JarFile`, but we may want to fix it more "properly" which I think will require changes to public API.</body>
		<created>2019-06-12 12:48:56</created>
		<closed>2019-06-13 08:28:02</closed>
	</bug>
	<bug>
		<id>17124</id>
		<title>JarFile leaks a file handle if central directory parsing fails</title>
		<body>Forward port of issue #17123 to 2.2.0.M4.</body>
		<created>2019-06-12 12:01:46</created>
		<closed>2019-06-12 12:03:05</closed>
	</bug>
	<bug>
		<id>17123</id>
		<title>JarFile leaks a file handle if central directory parsing fails</title>
		<body>If a failure occurs when our `JarFile`'s constructor is parsing the zip's central directory, the file handle opened by the super constructor will never be closed.</body>
		<created>2019-06-12 11:58:10</created>
		<closed>2019-06-12 12:03:05</closed>
	</bug>
	<bug>
		<id>17122</id>
		<title>JarResourceManager leaks an InputStream when asked for a Resource for the root of a jar</title>
		<body>Forward port of issue #17121 to 2.2.0.M4.</body>
		<created>2019-06-12 11:54:03</created>
		<closed>2019-06-12 11:55:02</closed>
	</bug>
	<bug>
		<id>17121</id>
		<title>JarResourceManager leaks an InputStream when asked for a Resource for the root of a jar</title>
		<body>Due to how Undertow's `URLResource` and the JDK's `JarURLConnection` work, if `JarResourceManager` is asked for an entry for the root of a jar (a path of `""` or `"/"`), it will open an `InputStream` and never close it. To avoid this, we need to avoid asking the `URLResource` for its content length for such resources.</body>
		<created>2019-06-12 11:51:01</created>
		<closed>2019-06-12 11:55:01</closed>
	</bug>
	<bug>
		<id>17120</id>
		<title>Embedded Undertow containers may lose access log entries when shut down</title>
		<body>Forward port of issue #17119 to 2.2.0.M4.</body>
		<created>2019-06-12 11:41:28</created>
		<closed>2019-06-12 11:42:00</closed>
	</bug>
	<bug>
		<id>17119</id>
		<title>Embedded Undertow containers may lose access log entries when shut down</title>
		<body>When the embedded Undertow containers are stopped, the receiver used for access logging is closed and its worker is shut down. Closing the receiver causes it to execute itself using its worker so that any buffered entries can be written. However, after telling the worker to shut down we do not await its termination. The worker uses daemon threads so the JVM may exit before shutdown has completed. As a result, there's a race condition between shutting down the JVM and the access log entries being written and entries could be lost.</body>
		<created>2019-06-12 11:36:56</created>
		<closed>2019-06-12 11:41:59</closed>
	</bug>
	<bug>
		<id>17118</id>
		<title>Repackaging with Maven may not close a library's input stream when adding it to the jar</title>
		<body>Forward port of issue #17115 to 2.2.0.M4.</body>
		<created>2019-06-12 11:28:27</created>
		<closed>2019-06-12 11:29:20</closed>
	</bug>
	<bug>
		<id>17117</id>
		<title>DevTools' ChangeableUrls creates JarFiles that are not closed when looking for Class-Path manifest entries</title>
		<body>Forward port of issue #17095 to 2.2.0.M4.</body>
		<created>2019-06-12 11:27:03</created>
		<closed>2019-06-12 11:27:46</closed>
	</bug>
	<bug>
		<id>17115</id>
		<title>Repackaging with Maven may not close a library's input stream when adding it to the jar</title>
		<body></body>
		<created>2019-06-12 10:42:46</created>
		<closed>2019-06-12 11:29:19</closed>
	</bug>
	<bug>
		<id>17114</id>
		<title>DevTools' ChangeableUrls creates JarFiles that are not closed when looking for Class-Path manifest entries</title>
		<body>Forward port of issue #17095 to 2.2.0.M4.</body>
		<created>2019-06-12 10:33:32</created>
		<closed>2019-06-12 10:39:35</closed>
	</bug>
	<bug>
		<id>17104</id>
		<title>DevTools uses the wrong command to shut down an in-memory Derby database</title>
		<body>Forward port of issue #17099 to 2.2.0.M4.</body>
		<created>2019-06-11 09:32:02</created>
		<closed>2019-06-11 10:51:39</closed>
	</bug>
	<bug>
		<id>17099</id>
		<title>DevTools uses the wrong command to shut down an in-memory Derby database</title>
		<body>``` 2019-06-10 20:19:49.372  INFO 70310 --- [      Thread-32] o.s.b.f.support.DisposableBeanAdapter    : Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': java.sql.SQLSyntaxErrorException: Syntax error: Encountered "SHUTDOWN" at line 1, column 1. ```</body>
		<created>2019-06-10 19:20:54</created>
		<closed>2019-06-11 10:51:39</closed>
	</bug>
	<bug>
		<id>17098</id>
		<title>Constructor binding can fail with non iterable property sources</title>
		<body>The constructor binding feature is very cool. But there are cases that does not work fine when integrating 3rd party configuration class and it deploy to the application server as war file(= When `JndiPropertySource` is enabled).   ### Versions  * 2.2.0.M3 and snapshot version * Tomcat 9.0.20  ### Details  For example, following properties class does not work.  ```java @ConfigurationProperties(prefix = "my") public class MyProperties {    private String name;    @NestedConfigurationProperty   private ThirdPartyConfiguration configuration; // Third party class    public void setName(String name) {     this.name = name;   }    public String getName() {     return name;   }    public void setConfiguration(ThirdPartyConfiguration configuration) {     this.configuration = configuration;   }    public ThirdPartyConfiguration getConfiguration() {     return configuration;   }  } ```  ```java public class ThirdPartyConfiguration {    private String encoding;    private boolean enabled;    private final List&lt;Attribute&gt; attributes = new ArrayList&lt;&gt;();    public void setEncoding(String encoding) {     this.encoding = encoding;   }    public String getEncoding() {     return encoding;   }    public void setEnabled(boolean enabled) {     this.enabled = enabled;   }    public boolean isEnabled() {     return enabled;   }    public void addAttribute(Attribute attribute) {     this.attributes.add(attribute);   }    public List&lt;Attribute&gt; getAttributes() {     return attributes;   }    public static class Attribute {      private final String name;     private final Object value;      public Attribute(String name, Object value) {       Objects.requireNonNull(name, "'name' must be not null.");       Objects.requireNonNull(value, "'value' must be not null.");       this.name = name;       this.value = value;     }      public String getName() {       return name;     }      public Object getValue() {       return value;     }    }  } ```  * application.properties  ``` # empty ```  ### Stacktrace  ``` ... Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'my.configuration.attributes[0]' to com.example.springbootstartergh350.ThirdPartyConfiguration$Attribute at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:243) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:219) at org.springframework.boot.context.properties.bind.Binder.lambda$null$0(Binder.java:291) at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:406) at org.springframework.boot.context.properties.bind.Binder$Context.access$1000(Binder.java:373) at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$1(Binder.java:292) at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:106) at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:86) at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:71) at org.springframework.boot.context.properties.bind.CollectionBinder.bindAggregate(CollectionBinder.java:49) at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56) at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:294) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:430) at org.springframework.boot.context.properties.bind.Binder$Context.access$200(Binder.java:373) at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:294) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:255) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:215) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$3(Binder.java:327) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:80) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) at org.springframework.boot.context.properties.bind.Binder.lambda$null$4(Binder.java:330) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$5(Binder.java:331) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:430) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:416) at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:373) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:329) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:270) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:215) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$3(Binder.java:327) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:80) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) at org.springframework.boot.context.properties.bind.Binder.lambda$null$4(Binder.java:330) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$5(Binder.java:331) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:430) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:416) at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:373) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:329) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:270) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:215) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:203) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:186) at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:93) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:115) ... 66 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.example.springbootstartergh350.ThirdPartyConfiguration$Attribute]: Constructor threw exception; nested exception is java.lang.NullPointerException: 'name' is not null. at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:213) at org.springframework.boot.context.properties.bind.ConstructorParametersBinder.bind(ConstructorParametersBinder.java:60) at org.springframework.boot.context.properties.bind.Binder.lambda$null$4(Binder.java:330) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$5(Binder.java:331) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:430) [2019-06-11 03:48:48,181] Artifact spring-boot-starter-gh-350:war: Error during artifact deployment. See server log for details. at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:416) at org.springframework.boot.context.properties.bind.Binder$Context.access$500(Binder.java:373) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:329) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:270) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:215) ... 127 more Caused by: java.lang.NullPointerException: 'name' must be not null. at java.util.Objects.requireNonNull(Objects.java:228) at com.example.springbootstartergh350.ThirdPartyConfiguration$Attribute.&lt;init&gt;(ThirdPartyConfiguration.java:47) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:200) ... 145 more ```  ### Repro project  [spring-boot-gh-17098-master.zip](https://github.com/spring-projects/spring-boot/files/3273545/spring-boot-gh-17098-master.zip) </body>
		<created>2019-06-10 18:56:29</created>
		<closed>2019-06-15 01:15:42</closed>
	</bug>
	<bug>
		<id>17095</id>
		<title>DevTools' ChangeableUrls creates JarFiles that are not closed when looking for Class-Path manifest entries</title>
		<body></body>
		<created>2019-06-10 16:13:33</created>
		<closed>2019-06-12 10:39:35</closed>
	</bug>
	<bug>
		<id>17065</id>
		<title>Cannot use sliced tests(JooqTest) with caching</title>
		<body>Hi, i have some sliced repository test mark with `@JooqTest` and app has enable the cache using `@EnableCaching` like this:  ```java @RunWith(SpringRunner.class) @JooqTest @Import(JooqBillingDataRepository.class) public class JooqBillingDataRepositoryIT {      @Autowired     private DSLContext dslContext;      @Autowired     private JooqBillingDataRepository repository;      @Test     public void insert() {         final long accommodationId = RandomUtils.nextLong();         final String lastModifiedBy = RandomStringUtils.randomAlphabetic(10, 30);         final LocalDateTime lastModifiedDate = LocalDateTime.now();          final BillingDataRecord record = new BillingDataRecord();         record.setLastModifiedBy(lastModifiedBy);         record.setLastModifiedDate(lastModifiedDate);         record.setAccommodationId(accommodationId);          final Mono&lt;BillingDataRecord&gt; mono = repository.insert(record);          StepVerifier.create(mono)             .consumeNextWith(r -&gt; {                 assertThat(r.getBillingDataId()).isPositive();                 assertThat(r.getAccommodationId()).isEqualTo(accommodationId);                 assertThat(r.getLastModifiedBy()).isEqualTo(lastModifiedBy);                 assertThat(r.getLastModifiedDate()).isEqualToIgnoringSeconds(lastModifiedDate);             })             .expectComplete()             .verify();     } ```  however, they are failing because some missing cache beans:  ``` Caused by: java.lang.IllegalStateException: No CacheResolver specified, and no bean of type CacheManager found. Register a CacheManager bean or remove the @EnableCaching annotation from your configuration. at org.springframework.cache.interceptor.CacheAspectSupport.afterSingletonsInstantiated(CacheAspectSupport.java:227) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:860) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:127) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) ... 25 more ```   </body>
		<created>2019-06-05 11:42:34</created>
		<closed>2019-06-05 13:12:50</closed>
	</bug>
	<bug>
		<id>17062</id>
		<title>Dependency management for JavaBeans Activation Framework is incomplete</title>
		<body>We manage the API dependency but not the implementation. Both should be managed as, while they have different group IDs, they are developed as part of the same project and are tagged and released together.</body>
		<created>2019-06-05 08:35:35</created>
		<closed>2019-06-17 15:09:47</closed>
	</bug>
	<bug>
		<id>17061</id>
		<title>DataSourceInitializedEvent picks wrong datasource</title>
		<body>With spring boot 2.1.x the `DataSourceInitializedEvent` picks the wrong datasource again because the property to get the datasource from the `EntityManagerFactory` changed to `hibernate.connection.datasource` compared to `javax.persistence.nonJtaDataSource` used in the fix for #8296.  As a workaround one can fix this by passing the legacy property `javax.persistence.nonJtaDataSource` to the `EntityManagerFactoryBuilder` with the correct datasource. I have created a minimal example with everything needed to initialize two datasources at https://github.com/m-kay/spring-boot-init-two-datasources and you can see the fix in `FirstDbConfig`line 84 and `SecondDbConfig` line 83. I had to create my own `DataSourceInitializer` which executes init scripts after the event is fired for my second datasource, since the defaults only work with a single datasource. </body>
		<created>2019-06-05 08:13:17</created>
		<closed>2019-09-26 19:26:11</closed>
	</bug>
	<bug>
		<id>17035</id>
		<title>Configuration Processor should use the constructor as a source only with @ConstructorBinding</title>
		<body>Starting with 2.2.0.M3 `spring-boot-configuration-processor` generates an incorrect `spring-configuration-metadata.json` when configuration property class contains another autowired ConfigurationProperties.  [For example](https://github.com/bdemers/spring-config-problem/blob/master/src/main/java/com/example/spring/configproblem/BrokenConfigProperties.java#L33-L36):  ```java     @Autowired     public BrokenConfigProperties(@Autowired(required = false) NestedConfigProperties nested) {         this.nested = nested;     } ```  This works in 2.1.5.RELEASE and 2.2.0.M1. Full example: https://github.com/bdemers/spring-config-problem  Running this example with M2 or M3 creates metadata: ```json {   "groups": [     {       "name": "another.namespace",       "type": "com.example.spring.configproblem.NestedConfigProperties",       "sourceType": "com.example.spring.configproblem.NestedConfigProperties"     },     {       "name": "example.broken",       "type": "com.example.spring.configproblem.BrokenConfigProperties",       "sourceType": "com.example.spring.configproblem.BrokenConfigProperties"     }   ],   "properties": [     {       "name": "another.namespace.other-property",       "type": "java.lang.String",       "sourceType": "com.example.spring.configproblem.NestedConfigProperties"     },     {       "name": "example.broken.nested",       "type": "com.example.spring.configproblem.NestedConfigProperties",       "sourceType": "com.example.spring.configproblem.BrokenConfigProperties"     }   ],   "hints": [] } ```  expected (and 2.1.5.RELEASE output): ```json {   "groups": [     {       "name": "another.namespace",       "type": "com.example.spring.configproblem.NestedConfigProperties",       "sourceType": "com.example.spring.configproblem.NestedConfigProperties"     },     {       "name": "example.broken",       "type": "com.example.spring.configproblem.BrokenConfigProperties",       "sourceType": "com.example.spring.configproblem.BrokenConfigProperties"     }   ],   "properties": [     {       "name": "another.namespace.other-property",       "type": "java.lang.String",       "sourceType": "com.example.spring.configproblem.NestedConfigProperties"     },     {       "name": "example.broken.a-string-value",       "type": "java.lang.String",       "sourceType": "com.example.spring.configproblem.BrokenConfigProperties"     }   ],   "hints": [] } ```  In this case the property `a-string-value` is missing from the M3 version.  A work around (not fully tested), is to add a default constructor the the config properties object: ```java     private BrokenConfigProperties() {         this(null);     }      @Autowired     public BrokenConfigProperties(@Autowired(required = false) NestedConfigProperties nested) {         this.nested = nested;     } ``` </body>
		<created>2019-05-31 18:51:14</created>
		<closed>2019-10-02 20:41:26</closed>
	</bug>
	<bug>
		<id>17018</id>
		<title>SpringIterableConfigurationPropertySource cache is not thread safe</title>
		<body>Forward port of issue #17017 to 2.2.0.M4.</body>
		<created>2019-05-29 23:12:09</created>
		<closed>2019-05-29 23:12:43</closed>
	</bug>
	<bug>
		<id>17017</id>
		<title>SpringIterableConfigurationPropertySource cache is not thread safe</title>
		<body>Whilst investigating #17013 it was discovered that the cache logic in `SpringIterableConfigurationPropertySource` is not thread safe. Specifically the key and cache are two different fields and are not synchronized. </body>
		<created>2019-05-29 22:26:34</created>
		<closed>2019-05-29 23:12:43</closed>
	</bug>
	<bug>
		<id>17016</id>
		<title>Handle all getters first in JavaBeanBinder.addProperties()</title>
		<body>Forward port of issue #17005 to 2.2.0.M4.</body>
		<created>2019-05-29 21:37:00</created>
		<closed>2019-05-29 21:37:20</closed>
	</bug>
	<bug>
		<id>17001</id>
		<title>When using log4j2 log4j2-test.* files are not detected</title>
		<body>When using log4j2 via the `spring-boot-starter-log4j2`, I'd expect the `log4j2-test.xml` file (actually, all `*-test.*`, as seen here: https://logging.apache.org/log4j/2.x/manual/configuration.html#Automatic_Configuration) to be picked up and used by Spring for unit tests.  We want to use log4j2, and have separate logging config files for tests and in the final artifact.  The log4j2 project specifies an exact order in which log config files should be picked up: https://logging.apache.org/log4j/2.x/manual/configuration.html#Automatic_Configuration</body>
		<created>2019-05-29 12:04:27</created>
		<closed>2020-05-05 21:15:02</closed>
	</bug>
	<bug>
		<id>16998</id>
		<title>server.port should not be set to -1 if the test does not start an embedded web server</title>
		<body>when i use spring-boot for no-web application, in the spring-boot-test ,"server.port" was be override by `org.springframework.boot.test.context.SpringBootContextLoader.getInlinedProperties()` `properties.add("server.port=-1")` . therefore on my unit test, i cannot start server.  application.properties:  ``` server.port=12345 server.name=myserver` ```  MyServer.java:  ```java @Component public class MyServer implements Closeable {      @Value("${server.port}")     private int serverPort;      @Value("${server.name}")     private String serverName;      private ServerSocket serverSocket;      @PostConstruct     public void init() {         System.out.println("server.port:" + serverPort);         System.out.println("server.name:" + serverName);         // start my server on port "server.port"         ....     }     } ```  SpringBootDemoApplication.java:  ```java @SpringBootApplication public class SpringBootDemoApplication {  public static void main(String[] args) { SpringApplication.run(SpringBootDemoApplication.class, args); }  } ```  SpringBootDemoApplicationTest.java:  ```java @RunWith(SpringRunner.class) @SpringBootTest public class SpringBootDemoApplicationTest {      @Resource     private MyServer myServer;      @After     public void tearDown() throws Exception {         myServer.close();     }      @Test     public void contextLoads() throws Exception {         String message = MyClient.sendToServer();         assertThat(message, startsWith("hello client!"));     }   } ```  [spring-boot-demo.zip](https://github.com/spring-projects/spring-boot/files/3230669/spring-boot-demo.zip) </body>
		<created>2019-05-29 03:47:25</created>
		<closed>2020-04-02 16:12:57</closed>
	</bug>
	<bug>
		<id>16995</id>
		<title>JVM can't exit due to threads left if Tomcat throws exceptions during shutdown</title>
		<body>Forward port of issue #16892 to 2.2.0.M4.</body>
		<created>2019-05-28 23:31:54</created>
		<closed>2019-05-28 23:32:17</closed>
	</bug>
	<bug>
		<id>16992</id>
		<title>Spring Session without Spring Security leads to NoClassDefFoundError: org/springframework/security/web/authentication/RememberMeServices</title>
		<body>Forward port of issue #16889 to 2.2.0.M4.</body>
		<created>2019-05-28 22:06:41</created>
		<closed>2019-05-28 22:07:05</closed>
	</bug>
	<bug>
		<id>16990</id>
		<title>Spring Data Cassandra auto-configuration should be conditional on Cluster bean</title>
		<body>Forward port of issue #16971 to 2.2.0.M4.</body>
		<created>2019-05-28 20:49:53</created>
		<closed>2019-05-28 20:50:13</closed>
	</bug>
	<bug>
		<id>16988</id>
		<title>JavaBeanBinder.Bean.get() does not use updated resolved type when checking for type differences</title>
		<body>Forward port of issue #16974 to 2.2.0.M4.</body>
		<created>2019-05-28 20:26:54</created>
		<closed>2019-05-28 20:27:18</closed>
	</bug>
	<bug>
		<id>16978</id>
		<title>Wrong reference to org.apache.catalina.core.ApplicationContext in ServletWebServerFactory</title>
		<body>hi,  just found this gem:  spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/server/ServletWebServerFactory.java  has an import to org.apache.catalina.core.ApplicationContext which is broken, if you don't have any Tomcat depdendencies in your project.  kr Mustafa </body>
		<created>2019-05-27 14:45:33</created>
		<closed>2019-05-27 14:59:56</closed>
	</bug>
	<bug>
		<id>16960</id>
		<title>spring-boot:run uses the wrong default working directory for a forked JVM</title>
		<body>Forward port of issue #16811 to 2.2.0.M4.</body>
		<created>2019-05-24 19:50:39</created>
		<closed>2019-05-24 19:51:08</closed>
	</bug>
	<bug>
		<id>16940</id>
		<title>WebSphere Liberty's WSJdbcDataSource logs an exception during startup when using a JNDI DataSource with Hikari still on the classpath</title>
		<body>Forward port of issue #16863 to 2.2.0.M4.</body>
		<created>2019-05-22 12:00:54</created>
		<closed>2019-05-22 12:01:32</closed>
	</bug>
	<bug>
		<id>16939</id>
		<title>ReactiveSecurityAutoConfiguration can cause TypeNotPresentExceptionProxy</title>
		<body>Forward port of issue #16934 to 2.2.0.M4.</body>
		<created>2019-05-22 11:36:10</created>
		<closed>2019-05-22 11:37:24</closed>
	</bug>
	<bug>
		<id>16934</id>
		<title>ReactiveSecurityAutoConfiguration can cause TypeNotPresentExceptionProxy</title>
		<body>See https://github.com/spring-cloud/spring-cloud-gateway/issues/1070</body>
		<created>2019-05-21 23:28:38</created>
		<closed>2019-05-22 11:37:24</closed>
	</bug>
	<bug>
		<id>16931</id>
		<title>FileEditor not applied for String to File property conversion</title>
		<body>In Spring Integration, we have a number of properties that are of type `File` and can be specified in XML config as a `Resource`      directory="file:${some.path}"  This works fine in a stand-alone Spring application but not in a Spring Boot application.  Boot adds a conversion service to the bean factory, by default:  ```java if (this.addConversionService) { context.getBeanFactory().setConversionService( ApplicationConversionService.getSharedInstance()); } ```  When there is no custom conversion service, the `BeanWrapper` uses a `FileEditor` to convert the property; it, in turn, detects the the String is a URL and delegates to a `ResourceEditor`.  When there is a custom conversion service, it is used by the `BeanWrapper` instead and it ends up with a `java.io.File` with the name `file:somePath`.  The `ConversionService` uses a simple `ObjectToObjectConverter`.  So, I believe that Boot's `ApplicationConversionService` needs a converter than provides similar functionality to the `FileEditor` `PropertyEditor`.   Users can `.setAddConversionService(false)`, but that's not a good work-around.  See https://github.com/spring-projects/spring-integration/issues/2930</body>
		<created>2019-05-21 19:32:20</created>
		<closed>2019-10-03 05:16:41</closed>
	</bug>
	<bug>
		<id>16928</id>
		<title>Constructor-based configuration property binding fails silently when parameter name information is not available</title>
		<body>I tried using `@ConfigurationProperties` with an immutable class, but the object has all values set to default null values  I used `2.2.0-BUILD-SNAPSHOT` version to test this  Please find the test project in the attachment  [spring-boot-playground.zip](https://github.com/spring-projects/spring-boot/files/3202653/spring-boot-playground.zip) </body>
		<created>2019-05-21 13:11:55</created>
		<closed>2019-05-28 14:52:27</closed>
	</bug>
	<bug>
		<id>16925</id>
		<title>spring-boot-dependencies manages jetty-infinispan which no longer exists</title>
		<body>The `jetty-infinispan` module appears to have been dropped as of 9.4.17. We should remove our dependency management for it so that Bomr can verify the bom without error.</body>
		<created>2019-05-21 09:54:55</created>
		<closed>2019-05-21 09:58:42</closed>
	</bug>
	<bug>
		<id>16902</id>
		<title>Application is still running with "APPLICATION FAILED TO START" message</title>
		<body>H2 is missing so the following "APPLICATION FAILED TO START" message has been printed but the application was still running:  ``` $ ./gradlew clean bootRun  &gt; Task :compileJava Note: /Users/izeye/IdeaProjects/sample-micrometer-spring-boot/src/main/java/com/izeye/sample/web/SampleController.java uses unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details.  &gt; Task :bootRun    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::             (v2.2.0.M3)  2019-05-20 10:56:19.939  INFO 6231 --- [           main] com.izeye.sample.Application             : Starting Application on AL01404673.local with PID 6231 (/Users/izeye/IdeaProjects/sample-micrometer-spring-boot/build/classes/java/main started by user in /Users/izeye/IdeaProjects/sample-micrometer-spring-boot) 2019-05-20 10:56:19.942  INFO 6231 --- [           main] com.izeye.sample.Application             : No active profile set, falling back to default profiles: default 2019-05-20 10:56:20.711  INFO 6231 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$42357030] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2019-05-20 10:56:20.968  INFO 6231 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) 2019-05-20 10:56:20.998  INFO 6231 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat] 2019-05-20 10:56:20.998  INFO 6231 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.19] 2019-05-20 10:56:21.094  INFO 6231 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2019-05-20 10:56:21.094  INFO 6231 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1114 ms 2019-05-20 10:56:21.254 ERROR 6231 --- [           main] o.s.b.web.embedded.tomcat.TomcatStarter  : Error starting Tomcat context. Exception: org.springframework.beans.factory.BeanCreationException. Message: Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: Failed to determine a suitable driver class 2019-05-20 10:56:21.276  INFO 6231 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat] 2019-05-20 10:56:21.280  WARN 6231 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat 2019-05-20 10:56:21.291  INFO 6231 --- [           main] ConditionEvaluationReportLoggingListener :   Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2019-05-20 10:56:21.293 ERROR 6231 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.  Reason: Failed to determine a suitable driver class   Action:  Consider the following:         If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.         If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).  &lt;==========---&gt; 80% EXECUTING [1m 14s] &gt; :bootRun ```  This is the sample project I used: https://github.com/izeye/sample-micrometer-spring-boot/tree/spring-boot-gh-16902</body>
		<created>2019-05-20 02:01:21</created>
		<closed>2019-05-29 10:33:24</closed>
	</bug>
	<bug>
		<id>16876</id>
		<title>Logback debugging property is ignored unless a logback file is present</title>
		<body>See #16851 for background. If you start an app that has no `logback.xml` file then the`-Dlogback.debug=true` system property is totally ignored.  This is probably because we programmatically configure logback.</body>
		<created>2019-05-15 19:06:29</created>
		<closed>2019-06-14 14:15:53</closed>
	</bug>
	<bug>
		<id>16863</id>
		<title>WebSphere Liberty's WSJdbcDataSource logs an exception during startup when using a JNDI DataSource with Hikari still on the classpath</title>
		<body>When configuring spring to use a `jndi-datasource` with an application server (liberty in my case), it will try to configure the `/health` endpoint, and receive the following exception while doing so:  ``` java.sql.SQLException: DSRA9122E: com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource@39ac924b does not wrap any objects of type com.zaxxer.hikari.HikariDataSource. com.ibm.ws.rsadapter.jdbc.WSJdbcDataSource.unwrap 441 ```  This is caused by spring using `HikariDataSourcePoolMetadataProvidersConfiguration` because hikaricp is on the classpath. When attempting to do unwrap() on the datasource-object however, it will get the one from the application server.</body>
		<created>2019-05-15 08:05:25</created>
		<closed>2019-05-22 12:01:31</closed>
	</bug>
	<bug>
		<id>16860</id>
		<title>RedisReactiveHealthIndicator makes blocking call on error</title>
		<body>Forward port of issue #16756 to 2.2.0.M3.</body>
		<created>2019-05-15 04:31:00</created>
		<closed>2019-05-15 04:33:15</closed>
	</bug>
	<bug>
		<id>16859</id>
		<title>Binder can fail when multiple overloaded setters exist</title>
		<body>Forward port of issue #16206 to 2.2.0.M3.</body>
		<created>2019-05-15 04:04:13</created>
		<closed>2019-05-15 04:04:36</closed>
	</bug>
	<bug>
		<id>16858</id>
		<title>HTTPS urls cause NPE when using Jetty Reactor</title>
		<body>Forward port of issue #16810 to 2.2.0.M3.</body>
		<created>2019-05-15 03:05:11</created>
		<closed>2019-05-15 03:05:38</closed>
	</bug>
	<bug>
		<id>16857</id>
		<title>Binder can fail with POJOs that have generic types</title>
		<body>Forward port of issue #16821 to 2.2.0.M3.</body>
		<created>2019-05-15 01:52:04</created>
		<closed>2019-05-15 01:52:33</closed>
	</bug>
	<bug>
		<id>16855</id>
		<title>ConfigurationPropertyName.equals can fail with dashed names</title>
		<body>Raised by @snicoll in Slack  Found what might be a very weird bug in binding. I wasn’t able to reproduce in an isolated test but you can easily update one to reproduce it here: https://github.com/spring-projects/spring-boot/blob/4d8df3cc47b7abca2ea966491fbaf7656b39891d/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebFluxMetricsAutoConfigurationTests.java#L119 - Just remove the `s` in `requests` (so the last character of the property) and the test will pass. I confirmed it was binding to the setter.  Looks like, in this particular case, binding does not care if there is a “s” at the end or not. I’ve tried other combination and the test was failing as it didn’t bind</body>
		<created>2019-05-14 22:36:52</created>
		<closed>2019-05-15 05:47:07</closed>
	</bug>
	<bug>
		<id>16826</id>
		<title>Cannot call HTTP when rsocket server is activated</title>
		<body>I tried to make rsocket server work with my api in webflux using the spring boot 2.2.0.M2 but unfortunately the http request stopped working </body>
		<created>2019-05-13 06:44:39</created>
		<closed>2019-05-27 13:21:43</closed>
	</bug>
	<bug>
		<id>16821</id>
		<title>Binder can fail with POJOs that have generic types</title>
		<body>This year I'm upgrading my application from Java 8 to **OpenJDK 11.0.2** so that necessitated upgrading Spring Boot from v1.5.3 to **2.1.4**.  After I did that the POJO to store my YAML properties failed.  For convenience I had created a simple POJO to hold any key and value type, this allowed for complex YAML tag configurations without having to create a lot of specialized POJO classes. ```java public class GenericProperty &lt;K,V&gt; { private K key; private V value;  public GenericProperty() { //Default }  /**  * Creates an instance of SimpleProperty  * @param aKey Represents a property key  * @param aValue Represents a property value  */ public GenericProperty(K aKey, V aValue) { key = aKey; value = aValue; } } ``` ```yaml examples: # Map&lt;Integer, GenericProperty&lt;Integer,String&gt;&gt;   pojo-map: {14: {key: 23, value: "hello"}, 98: {key: 85, value: "world"}}    # Maping with Boolean as Key, and Value is list of Objects  # Map&lt;Boolean,List&lt;GenericProperty&lt;String,String&gt;&gt;&gt;   pojo-map-list: {     true: [        {key: "hello", value: "hola"},        {key: "night", value: "nochas"}     ],      false: [        {key: "blue", value: "azul"},        {key: "white", value: "blanco"}     ]   }   ``` In v1.5.3 this worked fine when the YAML was mapped to attributes on a POJO like this: ```java @Configuration @EnableConfigurationProperties @ConfigurationProperties(prefix="examples")//Root level within .yml config file public class YamlPojo {  private Map&lt;Integer,GenericProperty&lt;Integer,String&gt;&gt; pojoMap;  /** Only with SpringBoot 1.5.x can reuse GenericProperty again */ private Map&lt;Boolean,List&lt;GenericProperty&lt;String,String&gt;&gt;&gt; pojoMapList;  public YamlPojo() { //Default } } ``` ``` # To String Output after YAML loaded and mapped to Object YamlPojo[ Pojo Map:, 98=GenericProperty[Key=85,Value=world], 14=GenericProperty[Key=23,Value=hello], Pojo Map2:, false=[GenericProperty[Key=blue,Value=azul], GenericProperty[Key=white,Value=blanco]], true=[GenericProperty[Key=hello,Value=hola], GenericProperty[Key=night,Value=nochas]]] ] ``` But when switching to **v2.1.4** reusing the same `GenericPropery.java` on a different attribute failed.  I think that's because the library used a binder on the first attribute, `pojoMap`, for `&lt;Integer,String&gt;` and did not create another binder for `&lt;String,String&gt;` on the second attribute, `pojoMapList`.   ``` Caused by: org.springframework.boot.context.properties.ConfigurationPropertiesBindException:    Error creating bean with name 'yamlPojo':    Could not bind properties to 'YamlPojo' :    prefix=examples, ignoreInvalidFields=false, ignoreUnknownFields=true;    nested exception is org.springframework.boot.context.properties.bind.BindException:      Failed to bind properties under      'examples.pojo-map-list[true][0].key' to java.lang.Integer at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:110) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:93) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:414) ~[spring-beans-5.1.6.RELEASE.jar:5.1.6.RELEASE] ``` My only workaround is to create another Class to handle mapping the second attribute.  I've attached a project ([yaml-generics.zip](https://github.com/spring-projects/spring-boot/files/3167855/yaml-generics.zip)) so you can test the scenario.  My `pom.xml` is using the latest code, so if you try both JUnit classes then the test case that tries to reuse `GenericProperty.java` twice will fail.  If you modify the pom.xml to revert to the older release, v1.5, then both JUnit cases work.  Was that just a "happy accident" under v1.5 that using generics with a Collection was handled, or is this a bug with the latest version?  This might be similar to these issues:  #11408, #13376 </body>
		<created>2019-05-10 19:28:10</created>
		<closed>2019-05-15 01:52:32</closed>
	</bug>
	<bug>
		<id>16811</id>
		<title>spring-boot:run uses the wrong default working directory for a forked JVM</title>
		<body>I would like to migrate some ancient multi module spring application containing lots of JSPs to spring-boot.  I know https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations but some preceding (single module) tests all ran fine.  Since I would like to preserve the multi module structure, I first ran into a problem, which  fortunately has been solved here: https://github.com/spring-projects/spring-boot/issues/3436  So, I can start my multi module project with the usual `mvn spring-boot:run` but unfortunately JSPs can **not** be served this way!  I created a simple example project https://github.com/drahkrub/spring-boot-multi-module-jsp (a simplified version of https://github.com/spring-projects/spring-boot/tree/v2.1.4.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-jsp turned into a multi module project) with the following minimalistic content: ``` . ├── pom.xml └── webapp     ├── pom.xml     └── src         └── main             ├── java             │   └── de             │       └── idon             │           └── sandbox             │               ├── SandboxJspApplication.java             │               └── WelcomeController.java             ├── resources             │   └── application.properties             └── webapp                 └── WEB-INF                     └── jsp                         └── welcome.jsp ``` Now, if started with `mvn spring-boot:run` (or `mvn -pl webapp -am spring-boot:run`) http://localhost:8080/ gives ``` There was an unexpected error (type=Not Found, status=404). /WEB-INF/jsp/welcome.jsp ``` But if running the WAR file, i.e. `mvn clean package` followed by ``` java -jar webapp/target/spring-boot-multi-module-jsp-webapp-0.0.1-SNAPSHOT.war ``` http://localhost:8080 works as expected.  I noticed that `mvn spring-boot:run` also works if the content of `webapp/src/main/webapp` is copied in a folder `src/main/webapp` in the **parent module** (obviously the place expected by the spring-boot maven plugin if operating in single module mode).  Is there a clean solution for this problem?  I tried some of the parameters described [here](https://docs.spring.io/spring-boot/docs/current/maven-plugin/run-mojo.html) but maybe I've used them incorrectly or tried the wrong ones... ;-) </body>
		<created>2019-05-09 15:25:30</created>
		<closed>2019-05-24 19:51:08</closed>
	</bug>
	<bug>
		<id>16810</id>
		<title>HTTPS urls cause NPE when using Jetty Reactor</title>
		<body>**Affects:** 5.1.x, 5.2.x  ---  This code ```java @Autowired private WebClient.Builder builder; public void run(String... args) {     String result = builder.build().get().uri("https://www.google.com").retrieve().bodyToMono(String.class).block(); } ``` using a dependency list like ```groovy dependencies {     compile("org.springframework.boot:spring-boot-starter")     compile("org.springframework.boot:spring-boot-starter-webflux") {         exclude group: "org.springframework.boot", module: "spring-boot-starter-reactor-netty"     }     compile("org.springframework.boot:spring-boot-starter-jetty")     compile("org.eclipse.jetty:jetty-reactive-httpclient")     compile("org.springframework:spring-webflux") } ``` causes exceptions due to a missing SslContextFactory ``` 2019-05-02 12:48:31.061 ERROR 6144 --- [           main] o.s.boot.SpringApplication               : Application run failed  java.lang.IllegalStateException: Failed to execute CommandLineRunner at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:816) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:797) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:324) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] at bnf.App.main(App.java:26) [classes/:na] Caused by: java.lang.NullPointerException: Missing SslContextFactory at java.util.Objects.requireNonNull(Objects.java:228) ~[na:1.8.0_202] at org.eclipse.jetty.io.ssl.SslClientConnectionFactory.&lt;init&gt;(SslClientConnectionFactory.java:55) ~[jetty-io-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpClient.newSslClientConnectionFactory(HttpClient.java:1170) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpDestination.newSslClientConnectionFactory(HttpDestination.java:137) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpDestination.&lt;init&gt;(HttpDestination.java:94) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.PoolingHttpDestination.&lt;init&gt;(PoolingHttpDestination.java:25) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.http.HttpDestinationOverHTTP.&lt;init&gt;(HttpDestinationOverHTTP.java:32) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.http.HttpClientTransportOverHTTP.newHttpDestination(HttpClientTransportOverHTTP.java:51) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpClient.destinationFor(HttpClient.java:542) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpClient.send(HttpClient.java:575) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:726) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:718) ~[jetty-client-9.4.15.v20190215.jar:9.4.15.v20190215] at org.eclipse.jetty.reactive.client.internal.ResponseListenerPublisher.send(ResponseListenerPublisher.java:137) ~[jetty-reactive-httpclient-1.0.3.jar:na] at org.eclipse.jetty.reactive.client.internal.ResponseListenerPublisher.onRequest(ResponseListenerPublisher.java:123) ~[jetty-reactive-httpclient-1.0.3.jar:na] at org.eclipse.jetty.reactive.client.internal.AbstractSinglePublisher.request(AbstractSinglePublisher.java:91) ~[jetty-reactive-httpclient-1.0.3.jar:na] at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenAcceptInner.onSubscribe(MonoIgnoreThen.java:285) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at org.eclipse.jetty.reactive.client.internal.AbstractSinglePublisher.subscribe(AbstractSinglePublisher.java:63) ~[jetty-reactive-httpclient-1.0.3.jar:na] at reactor.core.publisher.MonoFromPublisher.subscribe(MonoFromPublisher.java:43) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at reactor.core.publisher.Mono.block(Mono.java:1493) ~[reactor-core-3.2.8.RELEASE.jar:3.2.8.RELEASE] at bnf.App.run(App.java:32) [classes/:na] at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:813) ~[spring-boot-2.1.4.RELEASE.jar:2.1.4.RELEASE] ... 3 common frames omitted ``` as far as I can tell, the SslContextFactory being initialized to null due to the constructors used by org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration.JettyClient:73 ```java @Bean public JettyClientHttpConnector jettyClientHttpConnector( JettyResourceFactory jettyResourceFactory) { return new JettyClientHttpConnector(jettyResourceFactory, (httpClient) -&gt; { }); } ``` I was able to work around this in my code by registering my own JettyClientHttpConnector with with an SslContextFactory ```kotlin @Bean fun jettyClientHttpConnector(): JettyClientHttpConnector {     val resourceFactory = JettyResourceFactory()     val ssl = SslContextFactory()     val httpClient = HttpClient(ssl).apply {         executor = resourceFactory.executor         byteBufferPool = resourceFactory.byteBufferPool         scheduler = resourceFactory.scheduler     }     return JettyClientHttpConnector(httpClient) } ```</body>
		<created>2019-05-02 19:01:46</created>
		<closed>2019-05-15 03:05:37</closed>
	</bug>
	<bug>
		<id>16809</id>
		<title>Redis pooling minIdle property is ignored as timeBetweenEvictionRun defaults to -1 and cannot be configured</title>
		<body>Forward port of issue #16703 to 2.2.0.M3.</body>
		<created>2019-05-09 14:42:04</created>
		<closed>2019-05-09 14:42:56</closed>
	</bug>
	<bug>
		<id>16807</id>
		<title>JUnit 4 is no longer on the compile classpath with Gradle</title>
		<body>We've recently moved `spring-boot-starter-test` to JUnit 5 and the vintage engine brings JUnit 4 to keep backward compatibility.  Unfortunately, the junit dependency is defined in `runtime` scope so it is not available at compilation time with Gradle.   We have no other choice than to add `junit` ourselves in our starter, which will make it harder to exclude JUnit 4 for applications that have migrated their tests. </body>
		<created>2019-05-09 12:33:42</created>
		<closed>2019-05-09 12:54:47</closed>
	</bug>
	<bug>
		<id>16746</id>
		<title>Dependency management for Kafka is incomplete</title>
		<body>Forward port of issue #16728 to 2.2.0.M3.</body>
		<created>2019-05-08 13:51:39</created>
		<closed>2019-05-08 13:52:47</closed>
	</bug>
	<bug>
		<id>16705</id>
		<title>RedisReactiveHealthIndicator blocks on error by calling close, which is not supported in thread reactor-http-epoll</title>
		<body>``` Caused by: java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-epoll-3 at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:77) at reactor.core.publisher.Mono.block(Mono.java:1494) at org.springframework.data.redis.connection.ReactiveRedisConnection.close(ReactiveRedisConnection.java:60) at org.springframework.boot.actuate.redis.RedisReactiveHealthIndicator.lambda$doHealthCheck$1(RedisReactiveHealthIndicator.java:50) at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.runFinally(FluxDoFinally.java:156) ... 203 common frames omitted ```  While running a Spring Cloud Gateway application with Redis as session store, I observed the stack trace above. The cause is a blocking call in: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicator.java#L49  There is a `Mono&lt;Void&gt; closeLater();` https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/connection/ReactiveRedisConnection.java#L68 which could be called instead.</body>
		<created>2019-05-02 15:43:08</created>
		<closed>2019-05-09 14:15:59</closed>
	</bug>
	<bug>
		<id>16698</id>
		<title>Gradle plugin creates fat jars that do not align with unspecified assumption that META-INF/MANIFEST.MF should be the first or second entry</title>
		<body>The boot jars produced by the Gradle plugin injects the launcher classes first, violating an implicit specification discussed here and in `JarInputStream`:  https://bugs.openjdk.java.net/browse/JDK-8031748  ```     public JarInputStream(InputStream in, boolean verify) throws IOException {         super(in);         this.doVerify = verify;          // This implementation assumes the META-INF/MANIFEST.MF entry         // should be either the first or the second entry (when preceded         // by the dir META-INF/). It skips the META-INF/ and then         // "consumes" the MANIFEST.MF to initialize the Manifest object. ```  In our case we're indexing jars from in a context where we don't have random access to the file, so that implicit contract makes it easy to know if we can expect a manifest or if we need to fallback, but it's not possible for these jars:  ```   Length      Date    Time    Name ---------  ---------- -----   ----         0  2019-02-15 10:26   org/         0  2019-02-15 10:26   org/springframework/         0  2019-02-15 10:26   org/springframework/boot/         0  2019-02-15 10:26   org/springframework/boot/loader/         0  2019-02-15 10:26   org/springframework/boot/loader/data/         0  2019-02-15 10:26   org/springframework/boot/loader/jar/         0  2019-02-15 10:26   org/springframework/boot/loader/archive/         0  2019-02-15 10:26   org/springframework/boot/loader/util/      2688  2019-02-15 10:26   org/springframework/boot/loader/data/RandomAccessDataFile$DataInputStream.class      5267  2019-02-15 10:26   org/springframework/boot/loader/jar/CentralDirectoryFileHeader.class      3263  2019-02-15 10:26   org/springframework/boot/loader/data/RandomAccessDataFile$FileAccess.class      1487  2019-02-15 10:26   org/springframework/boot/loader/archive/ExplodedArchive$FileEntryIterator$EntryComparator.class      3837  2019-02-15 10:26   org/springframework/boot/loader/archive/ExplodedArchive$FileEntryIterator.class       282  2019-02-15 10:26   org/springframework/boot/loader/data/RandomAccessDataFile$1.class      3116  2019-02-15 10:26   org/springframework/boot/loader/jar/CentralDirectoryEndRecord.class     11548  2019-02-15 10:26   org/springframework/boot/loader/jar/Handler.class      5243  2019-02-15 10:26   org/springframework/boot/loader/archive/ExplodedArchive.class      4015  2019-02-15 10:26   org/springframework/boot/loader/data/RandomAccessDataFile.class      4624  2019-02-15 10:26   org/springframework/boot/loader/jar/CentralDirectoryParser.class      1813  2019-02-15 10:26   org/springframework/boot/loader/jar/ZipInflaterInputStream.class       302  2019-02-15 10:26   org/springframework/boot/loader/archive/Archive$Entry.class       273  2019-02-15 10:26   org/springframework/boot/loader/archive/ExplodedArchive$1.class       485  2019-02-15 10:26   org/springframework/boot/loader/data/RandomAccessData.class       437  2019-02-15 10:26   org/springframework/boot/loader/archive/Archive$EntryFilter.class      7336  2019-02-15 10:26   org/springframework/boot/loader/archive/JarFileArchive.class      1953  2019-02-15 10:26   org/springframework/boot/loader/PropertiesLauncher$PrefixMatchingArchiveFilter.class      1484  2019-02-15 10:26   org/springframework/boot/loader/PropertiesLauncher$ArchiveEntryFilter.class       266  2019-02-15 10:26   org/springframework/boot/loader/PropertiesLauncher$1.class     19737  2019-02-15 10:26   org/springframework/boot/loader/PropertiesLauncher.class      4684  2019-02-15 10:26   org/springframework/boot/loader/Launcher.class      1502  2019-02-15 10:26   org/springframework/boot/loader/MainMethodRunner.class      3608  2019-02-15 10:26   org/springframework/boot/loader/ExecutableArchiveLauncher.class      1721  2019-02-15 10:26   org/springframework/boot/loader/WarLauncher.class      1585  2019-02-15 10:26   org/springframework/boot/loader/JarLauncher.class      5203  2019-02-15 10:26   org/springframework/boot/loader/util/SystemPropertyUtils.class      1535  2019-02-15 10:26   org/springframework/boot/loader/LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class      5699  2019-02-15 10:26   org/springframework/boot/loader/LaunchedURLClassLoader.class       616  2019-02-15 10:26   org/springframework/boot/loader/jar/Bytes.class       702  2019-02-15 10:26   org/springframework/boot/loader/jar/JarURLConnection$1.class      1779  2019-02-15 10:26   org/springframework/boot/loader/archive/JarFileArchive$EntryIterator.class      4306  2019-02-15 10:26   org/springframework/boot/loader/jar/JarURLConnection$JarEntryName.class      1081  2019-02-15 10:26   org/springframework/boot/loader/archive/JarFileArchive$JarFileEntry.class      9854  2019-02-15 10:26   org/springframework/boot/loader/jar/JarURLConnection.class       945  2019-02-15 10:26   org/springframework/boot/loader/archive/Archive.class      1233  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFile$2.class      2062  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFile$1.class      1374  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFile$JarFileType.class     15076  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFile.class      4976  2019-02-15 10:26   org/springframework/boot/loader/jar/AsciiBytes.class      1593  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFileEntries$1.class      2046  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFileEntries$EntryIterator.class       540  2019-02-15 10:26   org/springframework/boot/loader/jar/CentralDirectoryVisitor.class       299  2019-02-15 10:26   org/springframework/boot/loader/jar/JarEntryFilter.class      3619  2019-02-15 10:26   org/springframework/boot/loader/jar/JarEntry.class       345  2019-02-15 10:26   org/springframework/boot/loader/jar/FileHeader.class      3650  2019-02-15 10:26   org/springframework/boot/loader/jar/StringSequence.class     14087  2019-02-15 10:26   org/springframework/boot/loader/jar/JarFileEntries.class      1102  2019-02-15 10:26   org/springframework/boot/loader/archive/ExplodedArchive$FileEntry.class         0  2019-04-30 01:41   META-INF/       858  2019-04-30 01:41   META-INF/MANIFEST.MF ``` In the meantime we're going to have our code check for this case specifically.</body>
		<created>2019-05-01 20:29:56</created>
		<closed>2019-06-17 23:05:12</closed>
	</bug>
	<bug>
		<id>16691</id>
		<title>AbstractErrorWebExceptionHandler fails when the response has a non-standard status code</title>
		<body>**Version**: spring-boot-2.1.4.RELEASE with spring-boot-starter-webflux  Providing custom error codes on the default web exception handler via `AbstractErrorWebExceptionHandler`, such as `ServerResponse.status(498)`, the error handling logic fails with `java.lang.IllegalArgumentException: No matching constant for [498]` when it attempts to log the exception:  ```java private void logError(ServerRequest request, ServerResponse response, Throwable throwable) { // line 293 - statusCode lookup on HttpStatus enum if (response.statusCode().equals(HttpStatus.INTERNAL_SERVER_ERROR)) { ```  `AbstractErrorWebExceptionHandler` should be able to handle "rawStatusCodes" besides the ones defined on HttpStatus enum, and/or return the response even if logging fails.  Related to: #15769, [SPR-16073](https://github.com/spring-projects/spring-framework/commit/9623cdec4883e134c2691cec56c39e59e1b4b80a#diff-e85b8359b4eaa4209148612aa0fbd3beR309) </body>
		<created>2019-04-30 20:37:59</created>
		<closed>2019-08-15 15:39:40</closed>
	</bug>
	<bug>
		<id>16663</id>
		<title>The -d option of spring init CLI command is not POSIX compliant</title>
		<body>Currently, supplying a list of dependencies to `spring init` using the short version of the dependencies option requires separating the option from its argument with an equals sign like this `spring init -d=lombok,devtools,web`. This special syntax does not follow the [POSIX standard regarding utility argument syntax](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_01) and consequently feels very unnatural to me as a command line user.  I cannot think of another utility that uses this kind of syntax for a single-letter option with arguments.  I can get around the awkwardness of remembering this special case by using the long GNU-style option `--dependencies` instead since that style allows `=` to separate the option and its argument(s) ([GNU](https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html) actually says `=` should be used, but most utilities I've used will allow a space as well), but I would prefer to use the shorter `-d` with the expected syntax.  Can the `-d` option be made to allow a space to separate it from its argument in order to make it POSIX-compliant (e.g. `spring init -d lombok,devtools,web`) ?</body>
		<created>2019-04-26 01:52:43</created>
		<closed>2019-07-09 08:50:12</closed>
	</bug>
	<bug>
		<id>16649</id>
		<title>JacksonTester handles some characters asymmetrically</title>
		<body>Forward port of issue #16629 to 2.2.0.M3.</body>
		<created>2019-04-25 02:51:49</created>
		<closed>2019-04-25 02:53:43</closed>
	</bug>
	<bug>
		<id>16644</id>
		<title>Metrics may be updated twice when CompositeMeterRegistry exists</title>
		<body>Forward port of issue #16221 to 2.2.0.M3.</body>
		<created>2019-04-24 14:09:55</created>
		<closed>2019-04-24 14:10:36</closed>
	</bug>
	<bug>
		<id>16624</id>
		<title>Decoding of key from file specified by spring.security.oauth2.resourceserver.public-key-location fails on Windows</title>
		<body>When the key is written to a file that uses `\r\n` line separators (as is typically the case on Windows) decoding fails reporting an illegal Base64 character. The root cause looks something like this:  ```  Caused by: java.lang.IllegalArgumentException: Illegal base64 character d   at java.util.Base64$Decoder.decode0(Base64.java:714)   at java.util.Base64$Decoder.decode(Base64.java:526)   at java.util.Base64$Decoder.decode(Base64.java:549)   at org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration.getKeySpec(ReactiveOAuth2ResourceServerJwkConfiguration.java:76)   at org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerJwkConfiguration.jwtDecoderByPublicKeyValue(ReactiveOAuth2ResourceServerJwkConfiguration.java:69)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)   ... 81 more ```  Switching to a [MIME](https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html#mime) decoder should fix the problem on Windows while not adversely affecting other platforms.</body>
		<created>2019-04-23 10:22:14</created>
		<closed>2019-04-23 11:31:44</closed>
	</bug>
	<bug>
		<id>16623</id>
		<title>Dependency management for Glassfish JAXB is incomplete</title>
		<body>Forward port of issue #16619 to 2.2.0.M3.</body>
		<created>2019-04-23 08:52:55</created>
		<closed>2019-04-23 08:53:30</closed>
	</bug>
	<bug>
		<id>16619</id>
		<title>Dependency management for Glassfish JAXB is incomplete</title>
		<body>Hi! I know, you can't add whole JAXB BOM file to spring-boot-dependencies (https://github.com/spring-projects/spring-boot/issues/15599), but, maybe you can add only ``` &lt;dependency&gt;     &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;     &lt;artifactId&gt;jaxb-xjc&lt;/artifactId&gt;     &lt;version&gt;${glassfish-jaxb.version}&lt;/version&gt; &lt;/dependency&gt; ``` You already have property glassfish-jaxb.version in your file for dependency org.glassfish.jaxb:jaxb-runtime.</body>
		<created>2019-04-22 07:02:05</created>
		<closed>2019-04-23 08:53:30</closed>
	</bug>
	<bug>
		<id>16612</id>
		<title>@ConfigurationPropertiesScan not compatible with @Profile @ConfigurationProperties</title>
		<body>With the new way of scanning `@ConfigurationProperties` with `@ConfigurationPropertiesScan`, a `@ConfigurationProperties` annotated class is not instanciated when `@Profile` is used in conjunction:  ```java @Profile("mail") @ConfigurationProperties("mail") public class MailProperties { private String address;  public String getAddress() { return address; }  public void setAddress(String address) { this.address = address; } } ```  The full demo repo is available [here](https://github.com/romainmoreau/configuration-properties-scan-and-profile). </body>
		<created>2019-04-20 11:39:06</created>
		<closed>2019-04-23 01:38:27</closed>
	</bug>
	<bug>
		<id>16596</id>
		<title>EL-based validation message interpolation does not work when using spring-boot-starter-webflux</title>
		<body>`spring-boot-starter-webflux` does not include an EL implementation. This means that EL-based interpolation for validation messages does not work. For example, with an annotation like this:  ``` @Size(min = 2, max = 14, message = "The item '${validatedValue}' must have {min} to {max} characters") private String item; ```  The resulting message will look like this:  ``` The item '${validatedValue}' must have 2 to 14 characters ```  Adding an EL implementation to the classpath changes the message to this:  ``` The item 'a' must be between 2 and 14 characters long ```</body>
		<created>2019-04-17 16:32:01</created>
		<closed>2019-04-18 09:15:58</closed>
	</bug>
	<bug>
		<id>16572</id>
		<title>Dependency management is provided for solr-uima which does not exist in 7.7</title>
		<body>Forward port of issue #16490 to 2.2.0.M2.</body>
		<created>2019-04-16 08:12:37</created>
		<closed>2019-04-16 08:13:26</closed>
	</bug>
	<bug>
		<id>16565</id>
		<title>ConfigurationMetadataProperty name not stripped with same source types</title>
		<body>See original issue #16549.</body>
		<created>2019-04-15 14:18:43</created>
		<closed>2019-04-15 14:19:19</closed>
	</bug>
	<bug>
		<id>16549</id>
		<title>ConfigurationMetadataProperty name not stripped with same source types</title>
		<body>Sample for this issue is in https://github.com/jvalkeal/randomstuff/tree/master/metadatanaming which uses `2.1.4.RELEASE`.  Running a sample app prints (`ConfigurationMetadataProperty.getId() / ConfigurationMetadataProperty.getName()`): ``` spring.rabbitmq.listener.direct.acknowledge-mode / acknowledge-mode spring.rabbitmq.listener.direct.auto-startup / auto-startup spring.rabbitmq.listener.direct.consumers-per-queue / consumers-per-queue spring.rabbitmq.listener.direct.default-requeue-rejected / default-requeue-rejected spring.rabbitmq.listener.direct.idle-event-interval / idle-event-interval spring.rabbitmq.listener.direct.missing-queues-fatal / missing-queues-fatal spring.rabbitmq.listener.direct.prefetch / prefetch spring.rabbitmq.listener.direct.retry.enabled / enabled spring.rabbitmq.listener.direct.retry.initial-interval / initial-interval spring.rabbitmq.listener.direct.retry.max-attempts / max-attempts spring.rabbitmq.listener.direct.retry.max-interval / max-interval spring.rabbitmq.listener.direct.retry.multiplier / multiplier spring.rabbitmq.listener.direct.retry.stateless / stateless spring.rabbitmq.listener.simple.acknowledge-mode / acknowledge-mode spring.rabbitmq.listener.simple.auto-startup / auto-startup spring.rabbitmq.listener.simple.concurrency / concurrency spring.rabbitmq.listener.simple.default-requeue-rejected / default-requeue-rejected spring.rabbitmq.listener.simple.idle-event-interval / idle-event-interval spring.rabbitmq.listener.simple.max-concurrency / max-concurrency spring.rabbitmq.listener.simple.missing-queues-fatal / missing-queues-fatal spring.rabbitmq.listener.simple.prefetch / prefetch spring.rabbitmq.listener.simple.retry.enabled / spring.rabbitmq.listener.simple.retry.enabled spring.rabbitmq.listener.simple.retry.initial-interval / spring.rabbitmq.listener.simple.retry.initial-interval spring.rabbitmq.listener.simple.retry.max-attempts / spring.rabbitmq.listener.simple.retry.max-attempts spring.rabbitmq.listener.simple.retry.max-interval / spring.rabbitmq.listener.simple.retry.max-interval spring.rabbitmq.listener.simple.retry.multiplier / spring.rabbitmq.listener.simple.retry.multiplier spring.rabbitmq.listener.simple.retry.stateless / spring.rabbitmq.listener.simple.retry.stateless spring.rabbitmq.listener.simple.transaction-size / transaction-size ``` As you can see every property under `spring.rabbitmq.listener.simple.retry` group will not strip `groupId` from its `name`.  When you i.e. use `ConfigurationMetadataRepositoryJsonBuilder` manually to build repository to get access to `ConfigurationMetadataProperty`'s, `RawConfigurationMetadata` is getting slightly confused when it's trying to strip group id from a fully qualified property name to set a simple name.  Below is metadata for `spring.rabbitmq.listener.direct.retry.enabled` and `spring.rabbitmq.listener.simple.retry.enabled` which have a same `sourceType`.  ``` {   "properties": [     {       "name": "spring.rabbitmq.listener.direct.retry.enabled",       "type": "java.lang.Boolean",       "description": "Whether publishing retries are enabled.",       "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",       "defaultValue": false     },     {       "name": "spring.rabbitmq.listener.simple.retry.enabled",       "type": "java.lang.Boolean",       "description": "Whether publishing retries are enabled.",       "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",       "defaultValue": false     }   ] } ``` Issue seem to be `RawConfigurationMetadata.getSource()` which returns first `ConfigurationMetadataSource` matching a source type. As seen above, these two properties have different group but same `sourceType`, thus first match is returned. However as seen in below, when actual `ConfigurationMetadataItem` name is tried to re-set to a simple name(stripping group id), group prefix doesn't match, thus stripping doesn't happen.   https://github.com/spring-projects/spring-boot/blob/ddc8b6f6b9fa8e8c82e0fb843f961d0c76d3167d/spring-boot-project/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/RawConfigurationMetadata.java#L83-L86  I created this issue from https://github.com/spring-cloud/spring-cloud-dataflow-ui/issues/769 and as @snicoll asked to create a sample to provide more details. `MetadataResolver` class in a sample is pretty much how we're using boot metadata in a dataflow space.</body>
		<created>2019-04-12 13:36:43</created>
		<closed>2019-04-15 14:19:19</closed>
	</bug>
	<bug>
		<id>16540</id>
		<title>EmbeddedMongoAutoConfiguration should depend on bean by type</title>
		<body>Currently the `DependsOnBeanFactoryPostProcessor` beans in  `EmbeddedMongoAutoConfiguration` declare dependencies on a bean named "embeddedMongoServer". The `@Bean` method for `embeddedMongoServer` is `@ConditionalOnMissingBean` so it's possible that that a custom type will mean the name changes and the dependsOn check fails.  Se should probably check against `MongodExecutable.cass` instead.  See #16048 for background.  </body>
		<created>2019-04-11 17:03:38</created>
		<closed>2019-07-10 11:41:40</closed>
	</bug>
	<bug>
		<id>16490</id>
		<title>Dependency management is provided for solr-uima which does not exist in 7.7</title>
		<body>Hi,  Looks like as a part of https://github.com/spring-projects/spring-boot/issues/16273, you also made   ```xml &lt;groupId&gt;org.apache.solr&lt;/groupId&gt; &lt;artifactId&gt;solr-uima&lt;/artifactId&gt; ```  to also refer to version 7.7.1 as it uses a common version property ${solr.version}. But, as per https://mvnrepository.com/artifact/org.apache.solr/solr-uima, there is no 7.7.1 version for solr-uima and hence the build fails if one refers to this dependency from org.springframework.boot:spring-boot-dependencies:2.1.4.   Or am I missing something? </body>
		<created>2019-04-08 14:30:47</created>
		<closed>2019-04-16 08:13:26</closed>
	</bug>
	<bug>
		<id>16489</id>
		<title>Exclude correct HikariCP version</title>
		<body>Hello,  Spring Boot 2.1.4-RELEASE uses Quartz 2.3.1 which contains hikaricp-java7 (since this release - see https://github.com/quartz-scheduler/quartz/issues/294) but the spring-boot-dependencies POM still excludes hikaricp-java6.  This causes an AbstractMethodError when using HikariCP and Quartz together.  `Caused by: java.lang.AbstractMethodError: Receiver class com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory does not define or inherit an implementation of the resolved method abstract create(Ljava/lang/String;Lcom/zaxxer/hikari/metrics/PoolStats;)Lcom/zaxxer/hikari/metrics/MetricsTracker; of interface com.zaxxer.hikari.metrics.MetricsTrackerFactory.`  Best regards Sebastian</body>
		<created>2019-04-08 11:32:53</created>
		<closed>2019-04-15 09:19:52</closed>
	</bug>
	<bug>
		<id>16473</id>
		<title>When running on a separate port, Actuator health endpoint may report healthy before the main port is listening</title>
		<body>See original issue #15378.</body>
		<created>2019-04-05 16:38:01</created>
		<closed>2019-04-05 16:38:35</closed>
	</bug>
	<bug>
		<id>16461</id>
		<title>Liquibase endpoint does not honor custom change log table</title>
		<body>See original issue #16442.</body>
		<created>2019-04-04 13:41:18</created>
		<closed>2019-04-04 13:42:09</closed>
	</bug>
	<bug>
		<id>16442</id>
		<title>Liquibase endpoint does not honor custom change log table</title>
		<body>Hello, I am using Spring Boot 2.1.3. With this, I have a project where I use Liquibase to build my database. My config is like this:  &lt;pre&gt; spring:   liquibase:     change-log: classpath:/db/changelog/db.changelog-master.yaml     check-change-log-location: true     drop-first: false     enabled: true     database-change-log-lock-table: liquibase_database_changelog_lock     database-change-log-table: liquibase_database_changelog &lt;/pre&gt;  It is working fine. But, when I used Spring Boot Admin (and so the end point **/actuator/liquibase**), It is not working ==&gt; No datas. In my log file, I have:   &lt;pre&gt; 2019-04-03 17:19:01.002  INFO 6 --- [nio-7911-exec-6] liquibase.executor.jvm.JdbcExecutor      : SELECT COUNT(*) FROM portal_partners.DATABASECHANGELOG &lt;/pre&gt;  ==&gt; The endpoint doesn't use the config from the spring.liquibase.*** config.  </body>
		<created>2019-04-03 17:12:50</created>
		<closed>2019-04-04 13:42:08</closed>
	</bug>
	<bug>
		<id>16415</id>
		<title>server.tomcat.processor-cache cannot be used to configure an unlimited processor cache</title>
		<body>The property is only applied when it is positive which prevents it from being used to configure an unlimited cache size (-1).</body>
		<created>2019-04-02 14:06:47</created>
		<closed>2019-04-02 14:27:57</closed>
	</bug>
	<bug>
		<id>16329</id>
		<title>Kafka Streams auto-configuration should only configure default streams builder</title>
		<body>**KafkaStreamsAnnotationDrivenConfiguration**  ```java @Bean public KafkaStreamsFactoryBeanConfigurer kafkaStreamsFactoryBeanConfigurer( StreamsBuilderFactoryBean factoryBean) { return new KafkaStreamsFactoryBeanConfigurer(this.properties, factoryBean); } ```  This blows up if there are multiple factory beans. Consider making it an `ObjectProvider` and `getIfUnique()` (or resolve in some other way).  2 people have reported this issue recently on [Stack Overflow](https://stackoverflow.com/questions/55009501/how-to-configure-two-instances-of-kafka-streamsbuilderfactorybean-in-spring-boot) and [today](https://stackoverflow.com/questions/55359604/cannot-mark-default-streams-config-bean-name-as-primary).</body>
		<created>2019-03-26 18:39:18</created>
		<closed>2019-03-27 09:18:44</closed>
	</bug>
	<bug>
		<id>16309</id>
		<title>Content strategy does not work with Thymeleaf and WelcomePageHandlerMapping</title>
		<body>When the `WelcomePageHandlerMapping` is used to resolve the `index.html` from Thymeleaf and `spring.resources.chain.strategy.content.enabled=true` is set then the resolving of the `th:src` and `th:href` does not work as expected. The reason for that is that the `ResourceUrlEncodingRequestWrapper` does not have the `ResourceUrlProvider` set. The reason for it not having set is that `ResourceUrlProviderExposingInterceptor` is not in the `WelcomePageHandlerMapping`.   If I add a `@Controller` that maps on `/` then everything works as expected.  I've created a reproducal repository (https://github.com/filiphr/spring-boot-thymeleaf-content-strategy-problem) that displays this problem.   I've spent quite some time debugging this, trying to understand why it isn't working. Let me know if I can provide more information.</body>
		<created>2019-03-25 23:41:28</created>
		<closed>2019-08-01 19:46:06</closed>
	</bug>
	<bug>
		<id>16290</id>
		<title>Binding to collection fails with unbound elements error if collection overridden in another property source</title>
		<body>Hello,  after migrated from Spring Boot 1.5.3.RELEASE to 2.1.3.RELEASE we've encountered a bug(?) with property binding.  The example code can be found [here](https://github.com/mschallar/spring-boot-configurationproperties-bug). It's a simple application with one property class that receives values from the application.yml via the @ConfigurationProperties annotation.  Starting the DemoApplication works fine.  But starting the simple DemoApplicationTests does not work, as the demo uses "test" profile and therefore the property class receives it's values from "application-test.yml".  The excepton does NOT occur if "ignoreUnknownFields" is NOT present (i.e., set to true).  ``` Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'demo-properties' to com.example.demo.DemoApplication$DemoProperties at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:249) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:225) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:208) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:190) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:83) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:107) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 43 common frames omitted Caused by: org.springframework.boot.context.properties.bind.UnboundConfigurationPropertiesException: The elements [demo-properties.data[2]] were left unbound. at org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandler.checkNoUnboundElements(NoUnboundElementsBindHandler.java:88) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandler.onFinish(NoUnboundElementsBindHandler.java:73) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.handleBindResult(Binder.java:235) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:222) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 47 common frames omitted ```  The bug does only appear when the list in application-test.yml is SMALLER than the list in application.yml.  Regards, Manuel</body>
		<created>2019-03-22 09:32:30</created>
		<closed>2019-03-25 23:04:47</closed>
	</bug>
	<bug>
		<id>16268</id>
		<title>Missing jaxb-api dependency in spring-boot-starter-jersey</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; Similar to what is described in #14287, when including the ```spring-boot-starter-jersey``` dependency, the application won't start as expected as there are some classes that are not present in the classpath. Here is an example stacktrace:  ``` org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:157) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at ar.edu.itba.cep.evaluations_service.application.Application.main(Application.java:21) ~[classes/:na] Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:125) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:86) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:415) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:174) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 6 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration': Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceConfigCustomizer' defined in class path resource [org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration$JacksonResourceConfigCustomizer.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer]: Factory method 'resourceConfigCustomizer' threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:139) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:414) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1754) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:392) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:235) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:226) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:101) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:88) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:54) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5125) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1377) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1367) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na] at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) ~[na:na] at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:902) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1377) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1367) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na] at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) ~[na:na] at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:902) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.StandardService.startInternal(StandardService.java:423) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:928) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.apache.catalina.startup.Tomcat.start(Tomcat.java:455) ~[tomcat-embed-core-9.0.16.jar:9.0.16] at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:106) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 11 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceConfigCustomizer' defined in class path resource [org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration$JacksonResourceConfigCustomizer.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer]: Factory method 'resourceConfigCustomizer' threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1305) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1144) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1470) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1427) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1273) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1205) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.resolveStream(DefaultListableBeanFactory.java:1928) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.orderedStream(DefaultListableBeanFactory.java:1922) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.customize(JerseyAutoConfiguration.java:110) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration.path(JerseyAutoConfiguration.java:106) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na] at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:363) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:307) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] ... 59 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer]: Factory method 'resourceConfigCustomizer' threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] ... 84 common frames omitted Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement at com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.&lt;init&gt;(JaxbAnnotationIntrospector.java:139) ~[jackson-module-jaxb-annotations-2.9.8.jar:2.9.8] at com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector.&lt;init&gt;(JaxbAnnotationIntrospector.java:126) ~[jackson-module-jaxb-annotations-2.9.8.jar:2.9.8] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer$ObjectMapperCustomizer.addJaxbAnnotationIntrospector(JerseyAutoConfiguration.java:233) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer$ObjectMapperCustomizer.access$100(JerseyAutoConfiguration.java:229) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer.addJaxbAnnotationIntrospectorIfPresent(JerseyAutoConfiguration.java:225) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer.resourceConfigCustomizer(JerseyAutoConfiguration.java:214) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer$$EnhancerBySpringCGLIB$$165935bf.CGLIB$resourceConfigCustomizer$0(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer$$EnhancerBySpringCGLIB$$165935bf$$FastClassBySpringCGLIB$$bd1def95.invoke(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration$JacksonResourceConfigCustomizer$$EnhancerBySpringCGLIB$$165935bf.resourceConfigCustomizer(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na] at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] ... 85 common frames omitted Caused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlElement at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583) ~[na:na] at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na] at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na] ... 101 common frames omitted ```  Maybe adding the ```jaxb-api ``` dependency to ```spring-boot-starter-jersey``` would make it easier to bootstrap a Jersey application.</body>
		<created>2019-03-19 23:25:12</created>
		<closed>2019-03-27 10:42:30</closed>
	</bug>
	<bug>
		<id>16256</id>
		<title>spring-boot-actuator solr health indicator reports solr down when solr client baseUrl contains core</title>
		<body>Using 2.1.3.RELEASE and the `SolrHealthIndicator` reports `down` when the `SolrClient` is created with a particular core specified in the baseUrl, e.g. http://localhost:8983/solr/techproducts`  The health indicator tries to use `http://localhost:8983/solr/techproducts/admin/cores` (`CoreAdminRequest`) which is a 404.  Example Project: https://github.com/schuch/spring-boot-actuator-solr-issue  To start solr with the techproducts collection run a fresh extracted solr distro with ``` solr -e techproducts ```  Output from http://localhost:8080/actuator/health ``` {   "status": "DOWN",   "details": {     "solr": {       "status": "DOWN",       "details": {         "solrClient": {           "status": "UP",           "details": {             "status": 0           }         },         "solrClientWithCollection": {           "status": "DOWN",           "details": {             "error": "org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://localhost:8983/solr/techproducts: Expected mime type application/octet-stream but got text/html. &lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/&gt;\n&lt;title&gt;Error 404 Not Found&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;h2&gt;HTTP ERROR 404&lt;/h2&gt;\n&lt;p&gt;Problem accessing /solr/techproducts/admin/cores. Reason:\n&lt;pre&gt;    Not Found&lt;/pre&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"           }         }       }     },     "diskSpace": {       "status": "UP",       "details": {         "total": 251627827200,         "free": 202209427456,         "threshold": 10485760       }     }   } } ```  Related solr mailing list thread: to https://www.mail-archive.com/solr-user@lucene.apache.org/msg144629.html </body>
		<created>2019-03-18 22:53:08</created>
		<closed>2019-07-19 08:10:58</closed>
	</bug>
	<bug>
		<id>16236</id>
		<title>When using Log4j2 log4j2.properties files are not detected</title>
		<body></body>
		<created>2019-03-15 08:24:36</created>
		<closed>2019-03-22 19:03:35</closed>
	</bug>
	<bug>
		<id>16232</id>
		<title>Inconsistent behavior turning off the check for the change log location: Liquibase fails anyway</title>
		<body>Using spring-boot-autoconfigure 2.1.2 and liquibase-core-3.6.2, I would have expected that missing change logs are handled gracefully when checkChangeLogLocation/checkLocation is set to false. This is the case for Flyway, however, for Liquibase it only means that the LiquibaseAutoConfiguration won't complain, though Liquibase will fail slightly later. What is the use case for setting checkChangeLogLocation to false, if a missing changelog will result in a failure anyway, or am I missing something?  If this used to work differently, is there a known liquibase bug for that? Otherwise, I suggest removing the checkChangeLogLocation property.  I get: ```  Caused by: liquibase.exception.ChangeLogParseException: Error parsing classpath:/db/changelog/db.changelog-master.yaml  at liquibase.parser.core.yaml.YamlChangeLogParser.parse(YamlChangeLogParser.java:84)  at liquibase.Liquibase.getDatabaseChangeLog(Liquibase.java:217)  at liquibase.Liquibase.update(Liquibase.java:190)  at liquibase.Liquibase.update(Liquibase.java:179)  at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:353)  at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:305)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)  ... 62 more  Caused by: java.io.FileNotFoundException: class path resource [db/changelog/db.changelog-master.yaml] cannot be resolved to URL because it does not exist  at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:195)  at liquibase.integration.spring.SpringLiquibase$SpringResourceOpener.getResourcesAsStream(SpringLiquibase.java:556)  at liquibase.util.StreamUtil.singleInputStream(StreamUtil.java:186)  at liquibase.parser.core.yaml.YamlChangeLogParser.parse(YamlChangeLogParser.java:27)  ... 69 more ``` instead of: ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'liquibase' defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Invocation of init method failed; nested exception is liquibase.exception.ChangeLogParseException: Error Reading Migration File: class path resource [db/liquibase/changelog-master.xml] cannot be resolved to URL because it does not exist at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1745) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:307) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863) ~[spring-context-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at com.kpit.diagnostics.dds.core.Application.main(Application.java:13) ~[classes/:na] Caused by: liquibase.exception.ChangeLogParseException: Error Reading Migration File: class path resource [db/liquibase/changelog-master.xml] cannot be resolved to URL because it does not exist at liquibase.parser.core.xml.XMLChangeLogSAXParser.parseToNode(XMLChangeLogSAXParser.java:118) ~[liquibase-core-3.6.2.jar:na] at liquibase.parser.core.xml.AbstractChangeLogParser.parse(AbstractChangeLogParser.java:15) ~[liquibase-core-3.6.2.jar:na] at liquibase.Liquibase.getDatabaseChangeLog(Liquibase.java:217) ~[liquibase-core-3.6.2.jar:na] at liquibase.Liquibase.update(Liquibase.java:190) ~[liquibase-core-3.6.2.jar:na] at liquibase.Liquibase.update(Liquibase.java:179) ~[liquibase-core-3.6.2.jar:na] at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:353) ~[liquibase-core-3.6.2.jar:na] at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:305) ~[liquibase-core-3.6.2.jar:na] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE] ... 16 common frames omitted Caused by: java.io.FileNotFoundException: class path resource [db/liquibase/changelog-master.xml] cannot be resolved to URL because it does not exist at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:195) ~[spring-core-5.1.4.RELEASE.jar:5.1.4.RELEASE] at liquibase.integration.spring.SpringLiquibase$SpringResourceOpener.getResourcesAsStream(SpringLiquibase.java:556) ~[liquibase-core-3.6.2.jar:na] at liquibase.util.StreamUtil.singleInputStream(StreamUtil.java:186) ~[liquibase-core-3.6.2.jar:na] at liquibase.parser.core.xml.XMLChangeLogSAXParser.parseToNode(XMLChangeLogSAXParser.java:71) ~[liquibase-core-3.6.2.jar:na] ... 24 common frames omitted ```</body>
		<created>2019-03-14 17:10:09</created>
		<closed>2019-08-02 16:18:43</closed>
	</bug>
	<bug>
		<id>16206</id>
		<title>Binder can fail when multiple overloaded setters exist</title>
		<body>If a `ConfigurationProperties` class has a `String` property but two setters for that property, one that takes a `String` and sets it and another that takes in a `int` coverts value to a `String` and then sets it.  ``` @ConfigurationProperties("app") public class ApplicationSettings {     private String property;      public void setProperty(int property) {         this.property = String.valueOf(property);     }      public void setProperty(String property) {         this.property = property;     } } ``` and the properties files has a `String` value ``` app.property=string ``` At startup, the `Binder` sometimes uses the setter with the `int` param and fails with an error as follows: ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'spring.cloud.stream.kafka.binder.required-acks' to int:      Property: spring.cloud.stream.kafka.binder.requiredacks     Value: all     Origin: class path resource [application.properties]:1:47     Reason: failed to convert java.lang.String to int  Action:  Update your application's configuration ```  Turning on debug has the following stacktrace: ``` 2019-03-12 02:49:07.915 DEBUG 30020 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : Application failed to start due to an exception  org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'app.property' to int at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:249) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:225) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$3(Binder.java:336) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:83) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:72) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.lambda$null$4(Binder.java:344) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_191] at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) ~[na:1.8.0_191] at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) ~[na:1.8.0_191] at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) ~[na:1.8.0_191] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[na:1.8.0_191] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_191] at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) ~[na:1.8.0_191] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_191] at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) ~[na:1.8.0_191] at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$5(Binder.java:345) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:448) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:434) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.access$400(Binder.java:388) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:342) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:277) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:220) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:208) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:190) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:83) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:107) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:93) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:414) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1754) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at com.walliee.springcorebindstringtointissue.SpringCoreBindStringToIntIssueApplication.main(SpringCoreBindStringToIntIssueApplication.java:12) [classes/:na] Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [int] for value 'string'; nested exception is java.lang.NumberFormatException: For input string: "string" at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:46) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.context.properties.bind.BindConverter$CompositeConversionService.convert(BindConverter.java:177) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:98) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:90) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:326) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:265) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:220) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 43 common frames omitted Caused by: java.lang.NumberFormatException: For input string: "string" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.8.0_191] at java.lang.Integer.parseInt(Integer.java:580) ~[na:1.8.0_191] at java.lang.Integer.valueOf(Integer.java:766) ~[na:1.8.0_191] at org.springframework.util.NumberUtils.parseNumber(NumberUtils.java:211) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(StringToNumberConverterFactory.java:62) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.core.convert.support.StringToNumberConverterFactory$StringToNumber.convert(StringToNumberConverterFactory.java:49) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:436) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:40) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] ... 50 common frames omitted ```  I created a [sample](https://github.com/Walliee/spring-core-bind-string-to-int-issue/tree/master) that can help reproduce this issue. The issue happens intermittently, but  re-running the application a few times should produce the error.  **Spring Boot Version: 2.1.3.RELEASE**</body>
		<created>2019-03-12 07:10:06</created>
		<closed>2019-05-15 04:04:36</closed>
	</bug>
	<bug>
		<id>16202</id>
		<title>Including finalName in plugin configuration results in StackOverflowError</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; This bug is present in version 2.1.3.RELEASE.   Trying to run a jar created with the maven plugin where finalName has been specified results in a StackOverflowError during class loading. To reproduce the error, see the attached sample and run the following commands.  [sample.tar.gz](https://github.com/spring-projects/spring-boot/files/2954205/sample.tar.gz)  ``` mvn clean install java -jar target/exec.jar ```  The finalName property is no longer customizable but still exists in plugin.xml. Also, a jar is still built with the specified name from the finalName property, but with the described bad behavior. It seems like it might be better to either not allow that property to be specified or to ignore it and display a warning.</body>
		<created>2019-03-11 21:14:00</created>
		<closed>2019-03-29 09:47:03</closed>
	</bug>
	<bug>
		<id>16189</id>
		<title>Clients with incompatible default encoding may corrupt output from log file endpoint as it does not specify the charset that it produces</title>
		<body>I download a plugin for chrome before. And the default encoding for chrome doesn't support very well. And convert to utf-8 by plugin,the Chinese display right.  I assume it's a browser problem. But I found Firefox it's the same.  By browser default encoding without   ··· meta charset="UTF-8" ···  "enterpriseName":"企业名称" is be corrupted  as  "enterpriseName":"浜胯仈缃戠粶" which is unreadable. </body>
		<created>2019-03-11 08:44:25</created>
		<closed>2019-04-02 09:53:32</closed>
	</bug>
	<bug>
		<id>16188</id>
		<title>logfile endpoint returns HTTP 406 on Accept: text/plain</title>
		<body>The logfile endpoint responds with a content of type `text/plain`. When doing the get request with `Accept: text/plain` a HTTP 406 (Not Acceptable) is returned. I'd expected such a request to succeed.</body>
		<created>2019-03-11 06:39:15</created>
		<closed>2019-03-11 08:32:34</closed>
	</bug>
	<bug>
		<id>16184</id>
		<title>Skip lazy initialization of beans that explicitly set the lazy attribute to false</title>
		<body>Hi,  The suspected issue described below is related to the version 2.2.0.M1 of Spring Boot.  It appears that the management endpoints are not reachable when using the new lazy initialization feature with actuator endpoints exposed on another port than the default one.  Steps to reproduce :  - Create a new project from spring initializr with the new Spring Boot 2.2.0.M1 version - Add Reactive Web and Actuator dependencies - Set the properties `management.server.port=8081` and `spring.main.lazy-initialization=true`  Hit the endpoint `http://localhost:8081/actuator/health` and you'll get a connection refused.  Switch off the lazy initialization and the actuator endpoints will be back again.  Note that actuator endpoints are working correctly if I switch on the lazy initialization and do not change the management port.  Is something I didn't understand or is there a little bug in the lazy initialization feature ?  By the way, thank you for this feature that I have been waiting for a long time!</body>
		<created>2019-03-09 16:40:33</created>
		<closed>2019-04-06 01:03:33</closed>
	</bug>
	<bug>
		<id>16183</id>
		<title>JsonTest isn't annotated with @ExtendWith(SpringExtension.class)</title>
		<body>Spring Boot 2.1.3.RELEASE: unlike other XxxTest annotations, `JsonTest` isn't annotated with `@ExtendWith(SpringExtension.class)`, and I haven't seen any indication in the documentation or the developer guide that it shouldn't be.</body>
		<created>2019-03-09 15:27:01</created>
		<closed>2019-03-09 20:02:24</closed>
	</bug>
	<bug>
		<id>16177</id>
		<title>WebFlux or MVC app with the Validation API and no implementation fails to start</title>
		<body>``` 2019-03-08 17:10:01.946 [main] DEBUG o.s.b.d.LoggingFailureAnalysisReporter - Application failed to start due to an exception javax.validation.NoProviderFoundException: Unable to create a Configuration, because no Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.     at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:291)     at org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)     at org.springframework.boot.autoconfigure.validation.ValidatorAdapter.create(ValidatorAdapter.java:138)     at org.springframework.boot.autoconfigure.validation.ValidatorAdapter.getExistingOrCreate(ValidatorAdapter.java:119)     at org.springframework.boot.autoconfigure.validation.ValidatorAdapter.get(ValidatorAdapter.java:111)     at org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$EnableWebFluxConfiguration.webFluxValidator(WebFluxAutoConfiguration.java:243) ```</body>
		<created>2019-03-08 17:16:52</created>
		<closed>2019-04-01 22:51:50</closed>
	</bug>
	<bug>
		<id>16168</id>
		<title>No error message when server.ssl.keyAlias doesn't match an entry</title>
		<body>Hello!  This is a feature request to handle an error.  I ran into an issue when updating my project from version 1.x.x to 2.x.x. Seems like the property `server.ssl.keyAlias` was turned case sensitive and the application couldn't load the key from the keystore on startup. The application is still able to startup with no error or warn log about it but clients cannot complete a handshake.  **Example:** Keystore `keystore.jks` contains a private key entry with an alias `myprivatekey` Set the properties ``` server:   ssl:     enabled: true     key-store: keystore.jks     key-store-password: changeit     keyAlias: MyPrivateKey ```  **The symptoms:** Chrome gives the following error: `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` openssl printout:  ``` CONNECTED(00000003) 140162214049696:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:s23_clnt.c:744: --- no peer certificate available --- No client certificate CA names sent --- SSL handshake has read 7 bytes and written 247 bytes --- New, (NONE), Cipher is (NONE) Secure Renegotiation IS NOT supported Compression: NONE Expansion: NONE --- ```  **The resolution:** The application shouldn't be able to start with SSL turned on if the alias specified doesn't match anything in the keystore provided.  Used Spring Boot version: 2.1.2.RELEASE</body>
		<created>2019-03-08 07:28:24</created>
		<closed>2019-12-05 18:08:12</closed>
	</bug>
	<bug>
		<id>16109</id>
		<title>When using WebFlux /actuator/health/{component} returns a 200 response when the component is down</title>
		<body> When using the spring-boot-starter-webflux dependency custom health indicators return a status code of 200 when navigating to /actuator/health/{custom} despite the health object being down.  Sample project [here](https://github.com/jrushto1/springbootactuatortest).</body>
		<created>2019-03-06 09:55:41</created>
		<closed>2019-03-06 13:25:05</closed>
	</bug>
	<bug>
		<id>16102</id>
		<title>Random management.server.port gets set to the same value as local.server.port</title>
		<body>A minimum project to reproduce this issue is available here: https://github.com/gkonupek/SpringBootActuatorIssue  The project is a basic Spring Boot web application with Actuator. A problem occurs in tests when using Spring Boot version 2.1.x. In this case, I'm using version 2.1.3.RELEASE.  In the mentioned project, on branch "master" there is the following situation:  - `DemoApplicationTests` I'm using `@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)` annotation to run the application on a random, free port. - In `application.properties` file, I've specified `management.server.port=0` to make Actuator endpoint run on a random, free port as well. - Furthermore, in `DemoApplicationTests`:   - I'm injecting 2 values: `serverPort` (annotated with `@LocalServerPort`) and `managementPort` (annotated with `@LocalManagementPort`).   - I've created a simple JUnit 5 test in which I'm checking, that both mentioned ports have a different value (that's my expectation).   - Notice, that the test is also annotated with `@ActiveProfiles("test")` - it will be important later. - The Spring Boot version used in this case is 2.0.5.RELEASE.  In this configuration I expect the test to pass. Indeed, the generated ports are different.  **Spring Boot 2.1.x**  Now, in the repository there is a second branch named "spring-boot-2.1.x". The only difference between master is that the Spring Boot version has been upgraded to 2.1.3.RELEASE.  Unfortunately, in this configuration the test is failing. Both `serverPort` and `managementPort` have the same value.  **Role of `@ActiveProfiles` annotation?**  Another interesting case is present on the branch named "without-active-profile". In this case, the Spring Boot version is still 2.1.3.RELEASE. However, I've removed the `@ActiveProfiles("test")` annotation from `DemoApplicationTests`. In this case, the test is passing again - the port numbers are different.  The last scenario is actually the workaround, which I've applied to make my application work. Instead of using the annotation I could just import my `application-test.properties` file manually, by using `@TestPropertySource` annotation. However, I'd really love to see this issue explained and eventually fixed.  Cheers, Grzegorz</body>
		<created>2019-03-05 14:06:53</created>
		<closed>2019-03-08 19:17:19</closed>
	</bug>
	<bug>
		<id>16101</id>
		<title>@WebFluxTest does not enable auto-configuration for any reactive template engines</title>
		<body>Mustache, FreeMarker, and Thymeleaf all support reactive web apps and should be included in `@WebFluxTest`</body>
		<created>2019-03-05 12:03:32</created>
		<closed>2019-03-08 12:40:02</closed>
	</bug>
	<bug>
		<id>16096</id>
		<title>AbstractRefreshableApplicationContext should not appear in the type hierarchy of our application context implementations</title>
		<body>Several `ApplicationContext` implementations we use inherits from `AbstractRefreshableApplicationContext` which is a hierarchy we shouldn't be using in modern-day arrangements:  * `AnnotationConfigWebApplicationContext` * `AnnotationConfigReactiveWebApplicationContext`  While the latter is in our code base, the former is in the framework code base with no clear sign we shouldn't be using it anymore. Those contexts don't hold a `BeanFactory` instance before they refresh and therefore prevent any use of functional bean registration.  A potential replacement would be a `GenericWebApplicationContext` sub-class with a `AnnotationConfigUtils.registerAnnotationConfigProcessors(ctx)` invocation.</body>
		<created>2019-03-05 07:07:54</created>
		<closed>2019-04-05 14:52:47</closed>
	</bug>
	<bug>
		<id>16079</id>
		<title>ThymeleafAutoConfiguration fails if thymeleaf-spring5 is not present</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general `ideal-for-contribution` issues. Thanks!  ## Background Auto-configurations declare conditions to make sure that they back-off when conditions aren't met. For instance, `@ConditionalOnClass` allows to refer to classes that must be present on the classpath for an auto-configuration to be considered. Spring Boot will parse the bytecode using ASM to identify those classes and skip the auto-configuration altogether if one of them is not present.  ## Problem The thymeleaf auto-configuration support relies on the Spring integration module provided by the Thymeleaf project (currently `thymeleaf-spring5`). Unfortunately, `ThymeleafAutoConfiguration` only checks for a class in the core thymelaf jar (`thymeleaf`): if the core jar is present but the integration one isn't, the auto-configuration will be considered and fail:  ``` java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafDefaultConfiguration.templateEngine at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:181) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:141) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:117) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:327) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:232) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:275) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:95) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:705) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at com.example.demo.DemoApplicationKt.main(DemoApplication.kt:13) [classes/:na] Caused by: java.lang.IllegalStateException: @ConditionalOnMissingBean did not specify a bean using type, name or annotation and the attempt to deduce the bean's type failed at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.validate(OnBeanCondition.java:451) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.&lt;init&gt;(OnBeanCondition.java:441) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.&lt;init&gt;(OnBeanCondition.java:416) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:158) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 16 common frames omitted Caused by: org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanTypeDeductionException: Failed to deduce bean type for org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafDefaultConfiguration.templateEngine at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanTypeForBeanMethod(OnBeanCondition.java:496) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanType(OnBeanCondition.java:483) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.&lt;init&gt;(OnBeanCondition.java:435) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 19 common frames omitted Caused by: java.lang.ClassNotFoundException: org.thymeleaf.spring5.SpringTemplateEngine at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_171] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_171] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349) ~[na:1.8.0_171] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_171] at java.lang.Class.forName0(Native Method) ~[na:1.8.0_171] at java.lang.Class.forName(Class.java:348) ~[na:1.8.0_171] at org.springframework.util.ClassUtils.forName(ClassUtils.java:275) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.getReturnType(OnBeanCondition.java:505) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanTypeForBeanMethod(OnBeanCondition.java:491) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE] ... 21 common frames omitted ```  ## Solution The conditions on `ThymeleafAutoConfiguration` should be refined so that we don't process it if `thymeleaf-spring5` is not on the classpath. A good solution for this is to extend `@ConditionalOnClass` to also checks for the presence of `SpringTemplateEngine`.  ## Steps to Fix    - [x] Claim this issue with a comment below and ask any clarifying questions you need - [x] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [x] Try to fix the issue following the steps above - [x] Commit your changes and start a pull request.</body>
		<created>2019-03-04 03:47:25</created>
		<closed>2019-03-28 09:14:51</closed>
	</bug>
	<bug>
		<id>16073</id>
		<title>Auto-configured PrometheusPushGatewayManager cannot be configured to use HTTPS to connect to the gateway</title>
		<body>The String-based `PushGateway` constructor that we use hardcodes an `http` scheme to the `URL`. We should switch to the `URL`-based constructor instead to allow users to specify an `https` URL via `management.metrics.export.prometheus.pushgateway.base-url`. We'll have to take care to do so in a backwards-compatible manner, probably by preserving the existing assumption that the scheme should be `http` if not specified.</body>
		<created>2019-03-02 13:04:10</created>
		<closed>2019-03-06 05:40:53</closed>
	</bug>
	<bug>
		<id>16068</id>
		<title>Gradle plugin does not write all required manifest entries</title>
		<body>The Java buildpack relies on a few manifest entries to detect Spring Boot archives. With the Maven Plugin these are written [here]( https://github.com/spring-projects/spring-boot/blob/25bf0c2493a5b21c8ff2233c4751d3d06eb6613e/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java#L307).  Since Spring Boot 2.0 the Gradle plugin no longer uses the `Repackager` class and we've unfortunately lost these entries. We'll likely need to change [these lines](https://github.com/spring-projects/spring-boot/blob/25bf0c2493a5b21c8ff2233c4751d3d06eb6613e/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootArchiveSupport.java#L82).  </body>
		<created>2019-03-01 20:39:41</created>
		<closed>2019-04-02 09:28:15</closed>
	</bug>
	<bug>
		<id>16044</id>
		<title>NullPointerException with empty X-Forwarded-For header</title>
		<body>spring-boot: 2.1.3 spring-boot-actuator: 2.1.3  A NullPointerException is thrown in [line 49](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/ServerWebExchangeTraceableRequest.java#L49) of [ServerWebExchangeTraceableRequest](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/ServerWebExchangeTraceableRequest.java) because `request.getRemoteAddress().getAddress()` is null when you make a request with an empty X-Forwarded-For header.  You can reproduce it with a request like this ```http GET http://localhost:8080/some-path X-Forwarded-For:  ```  The path doesn't matter because the request doesn't reach the routing system.</body>
		<created>2019-02-27 03:53:19</created>
		<closed>2019-02-28 13:47:24</closed>
	</bug>
	<bug>
		<id>16040</id>
		<title>AprLifecycleListener is configured even though Tomcat's native library is not available</title>
		<body>When an app using Tomcat starts up, due to the presence of the `AprLifecycleListener`, it logs the following info message:  ``` 2019-02-26 13:59:29.961  INFO 67175 --- [           main] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: … ```  I think, and it's only an educated guess, that this is causing some confusion and leading people to believe that Tomcat isn't going to perform well in production. The listener was added in https://github.com/spring-projects/spring-boot/commit/5f57578b714576f68589fbfc7c8205e2d31e3027. I wonder if there's a way to be a bit smarter about when we add it and only add it when it will be used.</body>
		<created>2019-02-26 14:06:56</created>
		<closed>2019-04-02 09:47:56</closed>
	</bug>
	<bug>
		<id>16032</id>
		<title>Database migrations may not have run before NamedParameterJdbcTemplate is used</title>
		<body>This is a variation of already fixed issue with `JdbcTemplate` #13155. But this is for `NamedParameterJdbcTemplate`.  The fix (4881925) doesn't take into account another kind of `JdbcTemplate` - `NamedParameterJdbcTemplate`, which implements `NamedParameterJdbcOperations` (and doesn't implement `JdbcOperations`).  So, if an application doesn't create `JdbcTemplate` bean but only creates `NamedParameterJdbcTemplate` bean (using it's `NamedParameterJdbcTemplate(DataSource dataSource)` constructor), this bean still created before migration tool (e.g. Flyway) runs their migrations. So any `@PostConstruct`, that uses `NamedParameterJdbcTemplate`, runs earlier than migration. What is worse: there is not always the case. Sometimes migrations runs earlier. I think this is more or less "random" order because there is no explicit `@DependsOn` here.  So I think it's need to create a `NamedParameterJdbcOperationsDependsOnPostProcessor` in line with `JdbcOperationsDependsOnPostProcessor` and Flyway/Liqbase childs of it.  Spring Boot version tested: 2.0.5. But I don't see any `NamedParameterJdbcOperations` postprocessors in master, so I think this bug affects current version too.</body>
		<created>2019-02-25 21:17:17</created>
		<closed>2019-02-27 14:06:53</closed>
	</bug>
	<bug>
		<id>16028</id>
		<title>When unzipping, spring init may write zip entries outside the specified output location</title>
		<body></body>
		<created>2019-02-25 11:27:10</created>
		<closed>2019-04-03 08:53:18</closed>
	</bug>
	<bug>
		<id>16023</id>
		<title>When spring.profiles.include is set in a property source with higher precedence than the config files, spring.profiles.include in the config files should be ignored</title>
		<body></body>
		<created>2019-02-22 17:52:40</created>
		<closed>2020-08-05 19:08:18</closed>
	</bug>
	<bug>
		<id>16001</id>
		<title>Gradle POM-only dependencies cause jar application loader to fail</title>
		<body>Dependencies with pom packaging are included on the classpath and the boot jar process nor the loader considers the type of the file cause application startup to fail.  To reproduce take the following build:  ``` plugins { id 'org.springframework.boot' version '2.1.3.RELEASE' id 'java' }  repositories { mavenCentral() }  dependencies { compile 'com.googlecode.matrix-toolkits-java:mtj:1.0.3' }  bootJar { mainClassName = 'com.example.ExampleApplication' } ```  Run `bootJar` and run `java -jar build/libs/spring.jar` and note the failure:  ``` Exception in thread "main" java.lang.IllegalStateException: Failed to get nested archive for entry BOOT-INF/lib/all-1.1.2.pom at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:108) at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchives(JarFileArchive.java:86) at org.springframework.boot.loader.ExecutableArchiveLauncher.getClassPathArchives(ExecutableArchiveLauncher.java:70) at org.springframework.boot.loader.Launcher.launch(Launcher.java:49) at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) Caused by: java.io.IOException: Unable to open nested jar file 'BOOT-INF/lib/all-1.1.2.pom' at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:256) at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:241) at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:103) ... 4 more Caused by: java.io.IOException: Unable to find ZIP central directory records after reading 4270 bytes at org.springframework.boot.loader.jar.CentralDirectoryEndRecord.&lt;init&gt;(CentralDirectoryEndRecord.java:65) at org.springframework.boot.loader.jar.CentralDirectoryParser.parse(CentralDirectoryParser.java:52) at org.springframework.boot.loader.jar.JarFile.&lt;init&gt;(JarFile.java:123) at org.springframework.boot.loader.jar.JarFile.&lt;init&gt;(JarFile.java:111) at org.springframework.boot.loader.jar.JarFile.createJarFileFromFileEntry(JarFile.java:289) at org.springframework.boot.loader.jar.JarFile.createJarFileFromEntry(JarFile.java:264) at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:252) ... 6 more ```  POM files can be expected on configurations for either `pom` packaged dependencies like this, or for `pom` dependency management files for new native BOM support.  Gradle version:  ``` ------------------------------------------------------------ Gradle 5.1.1 ------------------------------------------------------------  Build time:   2019-01-10 23:05:02 UTC Revision:     3c9abb645fb83932c44e8610642393ad62116807  Kotlin DSL:   1.1.1 Kotlin:       1.3.11 Groovy:       2.5.4 Ant:          Apache Ant(TM) version 1.9.13 compiled on July 10 2018 JVM:          1.8.0_202 (Azul Systems, Inc. 25.202-b05) OS:           Mac OS X 10.14.3 x86_64 ```</body>
		<created>2019-02-20 03:40:24</created>
		<closed>2019-02-20 18:26:07</closed>
	</bug>
	<bug>
		<id>15983</id>
		<title> Order TaskExecutionAutoConfiguration before TaskSchedulerAutoConfiguration</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general `ideal-for-contribution` issues. Thanks!  ## Background Spring Boot 2.1 has introduced auto-configuration for task execution and scheduling with creation of a `ThreadPoolTaskExecutor` and `ThreadPoolTaskScheduler` bean if necessary. Both these classes share a common parent which led to a number of issues in the past.  ## Problem `ThreadPoolTaskExecutor` is conditional on the absence of a `java.util.concurrent.Executor`. If `TaskSchedulingAutoConfiguration` runs before `TaskExecutionAutoConfiguration`, it may create a bean that implements `Executor` and therefore the task execution auto-configuration will back off unecessary.  ## Solution There is no strict ordering between those two auto-configurations and things are working right now because the chosen order is so that `TaskExecutionAutoConfiguration` runs before `TaskSchedulingAutoConfiguration`. To make this explicit, we should order them explictly as well. The `@AutoConfigureBefore` or `@AutoConfigureAfter` annotation can be used for that purpose. Given that `TaskSchedulingAutoConfiguration` may be problematic here, it sounds more logical to use `@AutoConfigureAfter` on it and refer to `TaskExecutionAutoConfiguration`.  ## Steps to Fix    - [x] Claim this issue with a comment below and ask any clarifying questions you need - [x] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [x] Try to fix the issue following the steps above - [x] Commit your changes and start a pull request.</body>
		<created>2019-02-18 16:33:09</created>
		<closed>2019-02-18 20:15:47</closed>
	</bug>
	<bug>
		<id>15963</id>
		<title>Order TaskExecutionAutoConfiguration before TaskSchedulerAutoConfiguration</title>
		<body>        In Spring Boot 2.1.2, if ThreadPoolTaskExecutor and ThreadPoolTaskScheduler exist,  the two instance beans will be automatically configured, but both classes implement java.util.concurrent.Executor.  After testing, ThreadPoolTaskExecutor takes precedence over  ThreadPoolTaskScheduler instantiation, there is no problem. but these two kinds of instantiation do not specify priority, If ThreadPoolTaskScheduler first instantiates will cause ThreadPoolTaskExecutor to fail to instantiate because the existence of  java.util.concurrent.Executor implementation classes is checked before ThreadPoolTaskExecutor instantiation. ![image](https://user-images.githubusercontent.com/13413715/52845421-0d2a7680-3142-11e9-987c-b895fd21994a.png) ![image](https://user-images.githubusercontent.com/13413715/52845447-1adffc00-3142-11e9-8229-d13d231ceee5.png)      </body>
		<created>2019-02-15 08:52:48</created>
		<closed>2019-02-18 16:33:44</closed>
	</bug>
	<bug>
		<id>15898</id>
		<title>TestRestTemplateContextCustomizer and WebTestClientContextCustomizer can cause early FactoryBean instantiation</title>
		<body>Hi!  ### Description A assume there is a bug in spring-boot-test, related to `TestRestTemplate` `BeanDefinition` initialization. To be precise, class `TestRestTemplateContextCustomizer#TestRestTemplateRegistrar` in it's method `postProcessBeanDefinitionRegistry` calls `BeanFactoryUtils#beanNamesForTypeIncludingAncestors`. As `beanNamesForTypeIncludingAncestors` says, that's method invocation can cause `FactoryBean` initialization (and their dependencies, of course). And, in context of `BeanDefinitionRegistryPostProcessor` this, I guess, is incorrect behavior.  ### Reproducing One file reproducer is as follows: ``` @Configuration @RunWith(SpringJUnit4ClassRunner.class) @SpringBootTest(classes = SingleFileReproducerTest.class,         webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT) @EnableAutoConfiguration public class SingleFileReproducerTest {      @Test     public void dummy() {}      @Component     public static class SimpleFactoryBean implements FactoryBean {         public SimpleFactoryBean(ApplicationContext context) {}         public Object getObject() { return new Object(); }         public Class&lt;?&gt; getObjectType() { return Object.class; }     } } ```  Note, when `webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT` is commented out, test passes, as there is no need for `TestRestTemplate`.  ### Versions  1. org.springframework.boot.spring-boot-starter:2.1.2.RELEASE 2. org.springframework.boot.spring-boot-starter-web:2.1.2.RELEASE 3. org.springframework.boot.spring-boot-starter-test:2.1.2.RELEASE 4. junit.junit:4.12 5. Java 1.8  </body>
		<created>2019-02-12 06:32:41</created>
		<closed>2019-03-25 18:03:43</closed>
	</bug>
	<bug>
		<id>15891</id>
		<title>ServletEndpoints should not register under the Jersey context path if there is a management port</title>
		<body>In Spring Boot 2.1.2 (since 2.0.7) with a Jersey webapp, a @ServletEndpoint will be registered under the jersey context-path even on the management port.  ## Current behavior If the configuration looks like this, ``` @ApplicationPath("/app") public class JerseyConfig extends ResourceConfig { ``` ``` @ServletEndpoint(id = "selftest") public class SelftestEndpoint implements Supplier&lt;EndpointServlet&gt; { ``` ``` server.port: 8080 management.server.port: 8081 ``` the actuator will be registered under `http://localhost:8081/app/actuator/selftest`.  The actuator overview `http://localhost:8081/actuator` lists the actuator under `http://localhost:8081/actuator/selftest`.  ## Expectations * All actuators should be reachable following the links from the actuator overview. * If there is a management port, all actuators should sit directly under the same actuator context-path.  ## Sample project https://github.com/1and1/httpselftest/tree/servletendpoint (branch `servletendpoint`, sub-module `selftest-springboot-example`) </body>
		<created>2019-02-11 14:57:30</created>
		<closed>2019-02-13 21:33:37</closed>
	</bug>
	<bug>
		<id>15890</id>
		<title>Fat jar built with Maven does not repackage META-INF/&lt;module-name&gt;.kotlin-module files into BOOT-INF/classes</title>
		<body>When building a fat jar with Gradle, `META-INF/&lt;module-name&gt;.kotlin-module` files are written into `BOOT-INF/classes`. When building a fat jar with Maven they are left in the root of the jar. Gradle's behaviour is correct.</body>
		<created>2019-02-11 14:30:49</created>
		<closed>2019-02-20 07:30:48</closed>
	</bug>
	<bug>
		<id>15879</id>
		<title>Auto-configured OpenEntityManagerInViewInterceptor does not back off when an OpenEntityManagerInViewFilter is only defined as a registration bean</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general `ideal-for-contribution` issues. Thanks!  ## Background  Spring Boot auto-configures an `OpenEntityManagerInViewInterceptor` in `JpaWebConfiguration`. When the user provides their own equivalent bean, the auto-configured interceptor should back off.  ## Problem  The auto-configuration is conditional on there being no `OpenEntityManagerInViewInterceptor` or `OpenEntityManagerInViewFilter`:  https://github.com/spring-projects/spring-boot/blob/99656b9dd8e26b0741d55e9937d8c1aa8aa751a9/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java#L212-L213  This means that it correctly backs off when the user defines a bean of either type, however it does not back off if the user defines a `FilterRegistrationBean&lt;OpenEntityManagerInViewFilter&gt;` bean unless they also define an `OpenEntityManagerInViewFilter` bean. Defining only a `FilterRegistrationBean&lt;OpenEntityManagerInViewFilter&gt;` bean should be sufficient to cause the auto-configuration of the interceptor to back off.  ## Solution  Rather than considering `OpenEntityManagerInViewFilter` in the `@ConditionalOnMissingBean`, `@ConditionalOnMissingFilterBean(OpenEntityManagerInViewFilter.class)` should be used instead. This will cause the auto-configured filter to back off when there is a user-defined `OpenEntityManagerInViewFilter` or `FilterRegistrationBean&lt;OpenEntityManagerInViewFilter&gt;` bean.  There is an existing test that checks the `OpenEntityManagerInViewFilter` case:  https://github.com/spring-projects/spring-boot/blob/99656b9dd8e26b0741d55e9937d8c1aa8aa751a9/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java#L149-L159  A new test for the filter registration bean case should be added. Rather than using `TestFilterConfiguration` it should use a new `TestFilterRegistrationConfiguration` class that defines a `FilterRegistrationBean&lt;OpenEntityManagerInViewFilter&gt;` bean.  ## Steps to Fix    - [x] Claim this issue with a comment below and ask any clarifying questions you need - [ ] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [ ] Try to fix the issue following the steps above - [ ] Commit your changes and start a pull request.</body>
		<created>2019-02-08 18:05:36</created>
		<closed>2019-02-11 16:35:39</closed>
	</bug>
	<bug>
		<id>15877</id>
		<title>Jersey-based actuator endpoints not available without ResourceConfig bean</title>
		<body>[This issue](https://github.com/spring-projects/spring-boot/issues/11939) intended to make jersey-based actuator endpoints available even when the user has not yet configured a `ResourceConfig` bean. We still need to call the [`ResourceConfigCustomizer`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/jersey/JerseyWebEndpointManagementContextConfiguration.java#L75) for that to happen. </body>
		<created>2019-02-08 17:07:24</created>
		<closed>2019-02-09 02:38:47</closed>
	</bug>
	<bug>
		<id>15850</id>
		<title>Configuration processor does not handle generics</title>
		<body>Given  ```java @ConfigurationProperties("foo.bar") public class GenericProperties extends AbstractPropeties&lt;Foo&gt; {  } ```  and ```java public class AbstractPropeties&lt;T&gt; {  private Map&lt;String, T&gt; props;  public Map&lt;String, T&gt; getProps() { return props; }  public void setProps(Map&lt;String, T&gt; props) { this.props = props; }  } ```  The generated metadata is  ```json {   "groups": [     {       "name": "foo.bar",       "type": "com.example.GenericProperties",       "sourceType": "com.example.GenericProperties"     }   ],   "properties": [     {       "name": "foo.bar.props",       "type": "java.util.Map&lt;java.lang.String,T&gt;",       "sourceType": "com.example.GenericProperties"     }   ],   "hints": [] } ```  Should be ```json {   "groups": [     {       "name": "foo.bar",       "type": "com.example.GenericProperties",       "sourceType": "com.example.GenericProperties"     }   ],   "properties": [     {       "name": "foo.bar.props",       "type": "java.util.Map&lt;java.lang.String,com.example.Foo&gt;",       "sourceType": "com.example.GenericProperties"     }   ],   "hints": [] } ```  The generator should be able to determine the generic type.  Per Kris De Volder in Slack  &gt;Generics is complex, so I'm never surprised if it breaks stuff like this. But in my opinion it should be considered a bug. The method may be inherted from a generic superclass (or overridden). But from the subclass point of view we know that type 'T' is really 'RabbitBindingProperties'. So its reasonable to expect the Spring boot annotation processor to treat 'T' as if it is equal to 'RabbitBindingProperties' in that context. So I think you should raise a bug against spring boot configuration processor.  See https://github.com/spring-cloud/spring-cloud-stream/issues/1601</body>
		<created>2019-02-05 15:54:24</created>
		<closed>2019-02-20 12:25:22</closed>
	</bug>
	<bug>
		<id>15844</id>
		<title>Illegal reflective access by org.springframework.boot.loader.jar.Handler when resolving classpath* resource pattern</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; Has anyone faced such a problem?  ``WARNING: An illegal reflective access operation has occurred   WARNING: Illegal reflective access by org.springframework.boot.loader.jar.Handler to method java.net.URLStreamHandler.openConnection(java.net.URL)      WARNING: Please consider reporting this to the maintainers of org.springframework.boot.loader.jar.Handler   WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations   WARNING: All illegal access operations will be denied in a future release  ``  * **Spring Boot 2.1.2.RELEASE** * **Java 11 - (_openjdk 11.0.2-  Runtime Environment 18.9 (build 11.0.2+9)_)** * **Gradle 5.1.1**  I'm running this app using java -jar. Beside this warning everything works fine.</body>
		<created>2019-02-04 16:28:28</created>
		<closed>2019-02-05 11:11:58</closed>
	</bug>
	<bug>
		<id>15843</id>
		<title>ClassCastException in TestRestTemplateContextCustomizer</title>
		<body>When trying to decorate the ApplicationContext used for tests, the ones using a TestRestTemplate are failing with a ClassCastException. A brief glimpse reveals, that TestRestTemplateContextCustomizer is doing a type check on the beanFactory before upcasting, but is later on casting the context itself, which happens to work with most spring-provided ApplicationContexts, but not for custom ones, as long as they are not doing the same decoration trick as the spring ones. Additionally one would normally also expect the checked reference to be casted, and not some other one.  ``` java.lang.ClassCastException: xxx.TestEnvironment$Loader$Context cannot be cast to org.springframework.beans.factory.support.BeanDefinitionRegistry at org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer.registerTestRestTemplate(TestRestTemplateContextCustomizer.java:65) ~[spring-boot-test-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer.customizeContext(TestRestTemplateContextCustomizer.java:58) ~[spring-boot-test-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.test.context.SpringBootContextLoader$ContextCustomizerAdapter.initialize(SpringBootContextLoader.java:320) ~[spring-boot-test-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:649) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:373) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE] ... many more common frames omitted ``` </body>
		<created>2019-02-04 13:43:27</created>
		<closed>2019-02-05 11:40:01</closed>
	</bug>
	<bug>
		<id>15819</id>
		<title>java.lang.NullPointerException: null occurs in HttpExchangeTracer</title>
		<body>When we are doing performance test for our endpoint, time to time happens the exception:  ``` java.lang.NullPointerException: null at java.util.HashMap.merge(HashMap.java:1225) ~[?:1.8.0_191] at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) ~[?:1.8.0_191] at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) ~[?:1.8.0_191] at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_191] at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_191] at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_191] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_191] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_191] at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[?:1.8.0_191] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_191] at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[?:1.8.0_191] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer.getHeadersIfIncluded(HttpExchangeTracer.java:107) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer.access$200(HttpExchangeTracer.java:38) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer$FilteredTraceableResponse.getHeaders(HttpExchangeTracer.java:170) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.trace.http.HttpTrace$Response.&lt;init&gt;(HttpTrace.java:185) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer.sendingResponse(HttpExchangeTracer.java:76) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.web.trace.reactive.HttpTraceWebFilter.lambda$filter$3(HttpTraceWebFilter.java:103) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:325) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:1713) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onComplete(ChannelSendOperator.java:374) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:81) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxConcatIterable$ConcatIterableSubscriber.onComplete(FluxConcatIterable.java:120) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at org.springframework.http.server.reactive.WriteResultPublisher$State.publishComplete(WriteResultPublisher.java:244) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.WriteResultPublisher.publishComplete(WriteResultPublisher.java:84) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$3.writeComplete(AbstractListenerWriteFlushProcessor.java:291) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onComplete(AbstractListenerWriteFlushProcessor.java:415) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.WriteResultPublisher$State.publishComplete(WriteResultPublisher.java:244) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.WriteResultPublisher.publishComplete(WriteResultPublisher.java:84) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.changeStateToComplete(AbstractListenerWriteProcessor.java:269) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.access$400(AbstractListenerWriteProcessor.java:45) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$2.onComplete(AbstractListenerWriteProcessor.java:341) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onComplete(AbstractListenerWriteProcessor.java:131) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete(ChannelSendOperator.java:221) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:101) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:164) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:75) ~[spring-web-5.1.3.RELEASE.jar!/:5.1.3.RELEASE] at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2041) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1849) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1723) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1476) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:92) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1476) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:142) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1463) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:147) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at org.springframework.boot.actuate.health.HealthIndicatorReactiveAdapter.invoke(HealthIndicatorReactiveAdapter.java:49) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at org.springframework.boot.actuate.health.HealthIndicatorReactiveAdapter.lambda$null$0(HealthIndicatorReactiveAdapter.java:43) ~[spring-boot-actuator-2.1.1.RELEASE.jar!/:2.1.1.RELEASE] at reactor.core.scheduler.ElasticScheduler$DirectScheduleTask.run(ElasticScheduler.java:291) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27) ~[reactor-core-3.2.3.RELEASE.jar!/:3.2.3.RELEASE] at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_191] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_191] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_191] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_191] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_191] at java.lang.Thread.run(Thread.java:748) [?:1.8.0_191] ```  **Spring Boot version is 2.1.2.RELEASE**</body>
		<created>2019-01-31 11:07:47</created>
		<closed>2019-02-08 17:36:23</closed>
	</bug>
	<bug>
		<id>15815</id>
		<title>/actuator/scheduletasks endpoint fails with null pointer exception when there is custom SchedulingConfigurer</title>
		<body>If a custom SchedulingConfigurer is registered with spring boot, then the scheduledtasks actuator will fail with a null pointer exception.  Spring boot 2.1.2  Stack trace: ``` java.lang.NullPointerException: null at java.util.Objects.requireNonNull(Objects.java:203) at java.util.Optional.&lt;init&gt;(Optional.java:96) at java.util.Optional.of(Optional.java:108) at java.util.stream.FindOps$FindSink$OfRef.get(FindOps.java:193) at java.util.stream.FindOps$FindSink$OfRef.get(FindOps.java:190) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint$TaskDescription.of(ScheduledTasksEndpoint.java:130) at org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint$TaskDescription.access$900(ScheduledTasksEndpoint.java:108) at org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint.lambda$scheduledTasks$1(ScheduledTasksEndpoint.java:63) ```  Sample code: https://stackoverflow.com/questions/14630539/scheduling-a-job-with-spring-programmatically-with-fixedrate-set-dynamically/14632758#14632758  The endpoint defined in ScheduledTasksEndpoint.java can only handle CronTrigger's and PeriodicTrigger's. Anything else will cause the endpoint to fail with a null pointer exception  ``` // org.springframework.boot.actuate.scheduling.ScheduleTaskEndpoint.java          private static ScheduledTasksEndpoint.TaskDescription describeTriggerTask(TriggerTask triggerTask) {             Trigger trigger = triggerTask.getTrigger();             if (trigger instanceof CronTrigger) {                 return new ScheduledTasksEndpoint.CronTaskDescription(triggerTask, (CronTrigger)trigger);             } else if (trigger instanceof PeriodicTrigger) {                 PeriodicTrigger periodicTrigger = (PeriodicTrigger)trigger;                 return (ScheduledTasksEndpoint.TaskDescription)(periodicTrigger.isFixedRate() ? new ScheduledTasksEndpoint.FixedRateTaskDescription(triggerTask, periodicTrigger) : new ScheduledTasksEndpoint.FixedDelayTaskDescription(triggerTask, periodicTrigger));             } else {                 return null;             }         } ```  It would be great if there were a mechanism for custom SchedulingConfigurer's to show up in the endpoint, but since there isn't one yet, the endpoint should perhaps just ignore them rather than throwing an exception. </body>
		<created>2019-01-30 23:13:00</created>
		<closed>2019-02-05 12:33:49</closed>
	</bug>
	<bug>
		<id>15810</id>
		<title>Repackaging moves an existing module-info.class file into BOOT-INF/classes</title>
		<body>I am in the process of porting several CLI and Spring Boot applications to Java 12 + Jigsaw modules. This will allow us to create a customized JRE image that is smaller &amp; more secure (Cloud native with Alpine Linux + a 50 MBish JRE).  I was able to port all CLI applications to proper Jigsaw modules - except the Spring Boot ones. The problem is, that the `spring-boot-maven-plugin` doesn't respect the existing &amp; valid `module-info.java` and creates an automated module/or drops it (I don't know the exact technical details: Maybe dropping, getting overwritten etc.).  To show you the problem/bug I created a small apllication called `springmodule` + a few helper scripts (Link: [https://github.com/swaechter/springmodule](https://github.com/swaechter/springmodule)).  The valid original module description of the original JAR looks like this (Can be checked with `./check_module.sh target/springmodule-1.0.0.jar.original` or `jar --file X.jar.original --describe-module`):  ``` swaechter@debian:~/Nextcloud/Workspace_Java/springmodule$ ./check_module.sh target/springmodule-1.0.0.jar.original  swaechter.springmodule jar:file:///home/swaechter/Nextcloud/Workspace_Java/springmodule/target/springmodule-1.0.0.jar.original/!module-info.class open exports ch.swaechter.springmodule requires java.base requires spring.beans requires spring.boot requires spring.boot.autoconfigure requires spring.context requires spring.core requires spring.web requires spring.webmvc ```  The Fat-Jar generated by `spring-boot-maven-plugin` is dropping (I guess?) the module name `swaechter.springmodule`. An automatic name based on the insecure JAR name detection is instead used (`./check_module.sh target/springmodule-1.0.0.jar`):  ``` swaechter@debian:~/Nextcloud/Workspace_Java/springmodule$ ./check_module.sh target/springmodule-1.0.0.jar No module descriptor found. Derived automatic module.  springmodule@1.0.0 automatic requires java.base mandated contains org.springframework.boot.loader contains org.springframework.boot.loader.archive contains org.springframework.boot.loader.data contains org.springframework.boot.loader.jar contains org.springframework.boot.loader.util main-class org.springframework.boot.loader.JarLauncher ```  Is it possible to add the original modules to the new module file (Or respect it)? Otherwise it's impossible to use Spring Boot in an Alpine Linux without I guess a few 100 - 200 MBs of Java JRE/JDK.   Not working idea to abuse the orignal JAR module + replace the JAR in the JRE later: `/usr/lib/jvm/jdk-12/bin/jlink --no-header-files --no-man-pages --compress=2 --module-path target/springmodule-1.0.0.jar --add-modules springmodule --launcher launch=springmodule/ch.swaechter.springmodule.SpringModule --output custom_jre`:  `Error: automatic module cannot be used with jlink: springmodule from file:///home/swaechter/Nextcloud/Workspace_Java/springmodule/target/springmodule-1.0.0.jar ` </body>
		<created>2019-01-30 17:00:59</created>
		<closed>2019-02-01 13:49:31</closed>
	</bug>
	<bug>
		<id>15797</id>
		<title>Undertow connection timeout is set incorrectly</title>
		<body>Spring Boot version: 2.1.1 Undertow version: 2.0.16 (Spring Boot's managed dependency)  Setting ``` server     connection-timeout: whatever ``` then the autoconfiguration class UndertowWebServerFactoryCustomizer sets this property as **socket option**  `builder.setSocketOption(UndertowOptions.NO_REQUEST_TIMEOUT, (int) connectionTimeout.toMillis())`  This is ignored by Undertow since this property is expected to be set in **server options**. Therefore it should be  `builder.setServerOption(UndertowOptions.NO_REQUEST_TIMEOUT, (int) connectionTimeout.toMillis())`  see Undertow#start() where is merged a default value for this option with all options set in the builder. ``` OptionMap serverOptions = OptionMap.builder()                     .set(UndertowOptions.NO_REQUEST_TIMEOUT, 60 * 1000)                     .addAll(this.serverOptions)                     .getMap(); ```</body>
		<created>2019-01-28 14:06:01</created>
		<closed>2019-02-01 13:49:58</closed>
	</bug>
	<bug>
		<id>15769</id>
		<title>Unhandled exceptions are not logged with WebFlux</title>
		<body>Consider this simple controller:  ```java @RestController public class FooController { @GetMapping("/") public String foo() { throw new RuntimeException("foo"); } } ```  With Spring Boot 2.1.2 and Spring MVC:  ``` 2019-01-23 12:13:22.249 ERROR 7563 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: foo] with root cause  java.lang.RuntimeException: foo at com.example.demologgingerrors.FooController.foo(FooController.java:11) ~[classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181] ... ```  With Spring Boot 2.1.2 and Spring WebFlux, nothing is logged and even if I configure `logging.level.org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler=debug` I don't have the stacktrace, juste the exception class and the message. Same behavior with `Mono.error(new RuntimeException("foo"))` or when using the functional WebFlux API.  Maybe something missing in `AbstractErrorWebExceptionHandler` as suggested by @bclozel. I think this is a pretty serious issue.</body>
		<created>2019-01-23 11:20:38</created>
		<closed>2019-02-08 11:30:37</closed>
	</bug>
	<bug>
		<id>15767</id>
		<title>When user switching is configured insecurely (allowing switching from an anonymous user), Actuator's `AuthenticationAuditListener` will NPE when exiting the switch</title>
		<body>Our application has an anonymous landing page that allows one to impersonate multiple users. The first impersonation works, the second in the same session fails because of an NPE.   SwitchUserFilter tries to exit the impersonated user before doing the next impersonation. As the previous user is anonymous the originalUser will be NULL (SwitchUserFilter:284 is not executed as obj is a string with value "anonymousUser") and as such the  audit listener fails with an NPE (AuthenticationAuditListener:106).  This is using spring-boot 1.5.7 and corresponding spring-security 4.2.3 but looking at the code this is still there in the latest 1.5.18 release.  A potential workaround is to have no audit listener, or a custom one.   Note: will provide simple example later</body>
		<created>2019-01-23 09:19:33</created>
		<closed>2019-02-12 16:27:05</closed>
	</bug>
	<bug>
		<id>15766</id>
		<title>DevTools incorrectly logs a change in condition evaluation when starting an application with multiple contexts</title>
		<body>I tried to run multi-context spring-boot application as Andy Wilkinson described in his [answer](https://stackoverflow.com/a/54309688/758991) and it works, but some strange thing happen: `ConditionEvaluationDeltaLoggingListener`  prints report between first and second child context start.  It prints:  ``` 2019-01-22 16:40:46.477  INFO 3268 --- [  restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation delta:   ========================== CONDITION EVALUATION DELTA ==========================   Positive matches: -----------------     DispatcherServletAutoConfiguration matched:       - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)       - found 'session' scope (OnWebApplicationCondition) ```  ..and many more rows.  Andy thinks that it can be a bug in `dev-tools`, so I opened report here. MCVE: [gh-15766.zip](https://github.com/spring-projects/spring-boot/files/2786494/gh-15766.zip) You can run it with `mvnw spring-boot:run`.  Spring boot: 2.1.2.RELEASE </body>
		<created>2019-01-23 09:12:57</created>
		<closed>2019-02-14 15:21:55</closed>
	</bug>
	<bug>
		<id>15729</id>
		<title>Async configuration ignores `applicationTaskExecutor` when `EnableScheduling` is enabled</title>
		<body>If you enable both `@EnableScheduling` and `@EnableAsync` it looks like the async processing is detecting the `taskScheduler` as a candidate for async processing.  This leads to   ``` 2019-01-17 07:53:16.174  INFO 48078 --- [   scheduling-1] .s.a.AnnotationAsyncExecutionInterceptor : More than one TaskExecutor bean found within the context, and none is named 'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly as an alias) in order to use it for async processing: [applicationTaskExecutor, taskScheduler] ```  and the auto-configured `applicationTaskExecutor` is ignored and replaced by the simple `AsyncTaskExecutor`.</body>
		<created>2019-01-17 12:56:27</created>
		<closed>2019-01-28 09:05:23</closed>
	</bug>
	<bug>
		<id>15679</id>
		<title>JspTemplateAvailabilityProvider causes java.security.AccessControlException</title>
		<body>We are running a Spring Boot powered application in form of a WAR file in a dedicated Tomcat server due to customer requirements. We're also using the Java Security Manager in order to fullfill our security requirements.  Yesterday we finally upgraded our stack to Spring Boot 2.1.1 (from 2.0.2). Since then our application is unable to start because `JspTemplateAvailabilityProvider` is causing a `java.security.AccessControlException`.  ``` ... Caused by: java.security.AccessControlException: access denied ("java.io.FilePermission" "src/main/webapp/index" "read")         at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)         at java.security.AccessController.checkPermission(AccessController.java:884)         at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)         at java.lang.SecurityManager.checkRead(SecurityManager.java:888)         at java.io.File.exists(File.java:814)         at org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider.isTemplateAvailable(JspTemplateAvailabilityProvider.java:45)         at org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders.findProvider(TemplateAvailabilityProviders.java:158)         at org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders.getProvider(TemplateAvailabilityProviders.java:145)         at org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders.getProvider(TemplateAvailabilityProviders.java:119)         at org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.welcomeTemplateExists(WelcomePageHandlerMapping.java:69)         at org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping.&lt;init&gt;(WelcomePageHandlerMapping.java:59)         at org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.welcomePageHandlerMapping(WebMvcAutoConfiguration.java:362)         at org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$$EnhancerBySpringCGLIB$$84cc0ba.CGLIB$welcomePageHandlerMapping$10(&lt;generated&gt;)         at org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$$EnhancerBySpringCGLIB$$84cc0ba$$FastClassBySpringCGLIB$$bfd95f3a.invoke(&lt;generated&gt;)         at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)         at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)         at org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$$EnhancerBySpringCGLIB$$84cc0ba.welcomePageHandlerMapping(&lt;generated&gt;)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)         ... 39 more ```  I looks like this is caused by this code in `JspTemplateAvailabilityProvider`:  ``` @Override public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("org.apache.jasper.compiler.JspConfig", classLoader)) { String resourceName = getResourceName(view, environment); if (resourceLoader.getResource(resourceName).exists()) { return true; } return new File("src/main/webapp", resourceName).exists(); } return false; } ```  The line of interest is this:  ``` return new File("src/main/webapp", resourceName).exists(); ```  This code was added in June 2018 and introduced in Spring Boot 2.0.4, see [pull request](https://github.com/spring-projects/spring-boot/commit/b1d8cc55fcc7b354d056707cd820c6f1c19e718d).  I can't see a way to disable this component and it is messing with our security policy. All rules in this policy have to be explained and discussed with our customer. Right now the best explanation I have is this: Our framework is doing a check for a file we don't have and we don't need which is used by a technology (JSP) we don't use.</body>
		<created>2019-01-11 09:03:01</created>
		<closed>2019-01-25 08:39:12</closed>
	</bug>
	<bug>
		<id>15675</id>
		<title>Application with spring.main.web-application-type=NONE doesn't shut down in conjunction with data mongodb reactive starter</title>
		<body>Non web application (spring.main.web-application-type=NONE) with the dependency to spring-boot-starter-data-mongodb-reactive will not shutdown when close() is called on it's context. If spring-boot-starter-data-mongodb-reactive dependency is removed application stops regularly.  Spring Boot version is 2.1.1.RELEASE (but it was also occurring in 2.0.x version)  Here's the thread dump after calling close(): ``` Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.191-b12 mixed mode):  "nioEventLoopGroup-2-1" #18 prio=10 os_prio=2 tid=0x0000000021240800 nid=0x92d8 runnable [0x0000000027b9e000]    java.lang.Thread.State: RUNNABLE         at sun.nio.ch.WindowsSelectorImpl$SubSelector.poll0(Native Method)         at sun.nio.ch.WindowsSelectorImpl$SubSelector.poll(WindowsSelectorImpl.java:296)         at sun.nio.ch.WindowsSelectorImpl$SubSelector.access$400(WindowsSelectorImpl.java:278)         at sun.nio.ch.WindowsSelectorImpl.doSelect(WindowsSelectorImpl.java:159)         at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)         - locked &lt;0x00000007713b5550&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)         - locked &lt;0x00000007713a1e98&gt; (a java.util.Collections$UnmodifiableSet)         - locked &lt;0x00000007713a1d30&gt; (a sun.nio.ch.WindowsSelectorImpl)         at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)         at io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:62)         at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:757)         at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:412)         at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)         at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)         at java.lang.Thread.run(Thread.java:748)  "Service Thread" #9 daemon prio=9 os_prio=0 tid=0x000000001dfc0800 nid=0x3f14 runnable [0x0000000000000000] d:\Workspaces\workspace\console&gt;   java.lang.Thread.State: RUNNABLE  "C1 CompilerThread2" #8 daemon prio=9 os_prio=2 tid=0x000000001c652800 nid=0x8b98 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "C2 CompilerThread1" #7 daemon prio=9 os_prio=2 tid=0x000000001c64e800 nid=0x8380 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "C2 CompilerThread0" #6 daemon prio=9 os_prio=2 tid=0x000000001c64b800 nid=0x7718 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Attach Listener" #5 daemon prio=5 os_prio=2 tid=0x000000001c64b000 nid=0x6920 runnable [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Signal Dispatcher" #4 daemon prio=9 os_prio=2 tid=0x000000001c659800 nid=0x1338 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Finalizer" #3 daemon prio=8 os_prio=1 tid=0x0000000002fdd800 nid=0x9b94 in Object.wait() [0x000000001d9af000]    java.lang.Thread.State: WAITING (on object monitor)         at java.lang.Object.wait(Native Method)         - waiting on &lt;0x00000006c32da1b8&gt; (a java.lang.ref.ReferenceQueue$Lock)         at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)         - locked &lt;0x00000006c32da1b8&gt; (a java.lang.ref.ReferenceQueue$Lock)         at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)         at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)  "Reference Handler" #2 daemon prio=10 os_prio=2 tid=0x000000001c63a800 nid=0x5e60 in Object.wait() [0x000000001d8af000]    java.lang.Thread.State: WAITING (on object monitor)         at java.lang.Object.wait(Native Method)         - waiting on &lt;0x00000006c3c0ce18&gt; (a java.lang.ref.Reference$Lock)         at java.lang.Object.wait(Object.java:502)         at java.lang.ref.Reference.tryHandlePending(Reference.java:191)         - locked &lt;0x00000006c3c0ce18&gt; (a java.lang.ref.Reference$Lock)         at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)  "main" #1 prio=5 os_prio=0 tid=0x0000000002ee2800 nid=0x9d50 in Object.wait() [0x000000000170d000]    java.lang.Thread.State: WAITING (on object monitor)         at java.lang.Object.wait(Native Method)         - waiting on &lt;0x00000007723ad288&gt; (a io.netty.util.concurrent.FastThreadLocalThread)         at java.lang.Thread.join(Thread.java:1252)         - locked &lt;0x00000007723ad288&gt; (a io.netty.util.concurrent.FastThreadLocalThread)         at java.lang.Thread.join(Thread.java:1326)         at org.springframework.boot.maven.RunMojo.join(RunMojo.java:110)         at org.springframework.boot.maven.RunMojo.runWithMavenJvm(RunMojo.java:96)         at org.springframework.boot.maven.AbstractRunMojo.run(AbstractRunMojo.java:249)         at org.springframework.boot.maven.AbstractRunMojo.execute(AbstractRunMojo.java:198)         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)         at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)         at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:954)         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)         at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)         at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)         at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)         at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)  "VM Thread" os_prio=2 tid=0x000000001c617800 nid=0x8794 runnable  "GC task thread#0 (ParallelGC)" os_prio=0 tid=0x0000000002ef7800 nid=0x87fc runnable  "GC task thread#1 (ParallelGC)" os_prio=0 tid=0x0000000002ef9000 nid=0x90dc runnable  "GC task thread#2 (ParallelGC)" os_prio=0 tid=0x0000000002efa800 nid=0x2704 runnable  "GC task thread#3 (ParallelGC)" os_prio=0 tid=0x0000000002efd000 nid=0xce0 runnable  "VM Periodic Task Thread" os_prio=2 tid=0x000000001c6ae800 nid=0x78c4 waiting on condition  JNI global references: 839  Heap  PSYoungGen      total 200192K, used 126492K [0x000000076b800000, 0x000000077d880000, 0x00000007c0000000)   eden space 184832K, 68% used [0x000000076b800000,0x0000000773387210,0x0000000776c80000)   from space 15360K, 0% used [0x000000077c980000,0x000000077c980000,0x000000077d880000)   to   space 19968K, 0% used [0x000000077b180000,0x000000077b180000,0x000000077c500000)  ParOldGen       total 216064K, used 36008K [0x00000006c2800000, 0x00000006cfb00000, 0x000000076b800000)   object space 216064K, 16% used [0x00000006c2800000,0x00000006c4b2a348,0x00000006cfb00000)  Metaspace       used 48553K, capacity 50012K, committed 50176K, reserved 1093632K   class space    used 6317K, capacity 6654K, committed 6656K, reserved 1048576K ``` Apparently, the nioEventLoopGroup-2-1 thread is preventing application to shut down.  Attached is the sample minimal project for reproducing the issue. [console.zip](https://github.com/spring-projects/spring-boot/files/2745841/console.zip) </body>
		<created>2019-01-10 15:02:35</created>
		<closed>2019-04-02 09:30:18</closed>
	</bug>
	<bug>
		<id>15597</id>
		<title>@ConfigurationProperty validation not working when a key matching the prefix is set</title>
		<body>`@ConfigurationProperty` validation is great as it forces the application to not start if properties are invalid or missing. However, there is a case of partially missing properties that does not work as I expected.   * Spring Boot version: `2.1.1.RELEASE`  * Java version: `1.8`  # Steps to reproduce Consider the following web app which exposes the property `app.value` at the endpoint `/`:  ```java package io.github.mamachanko.configurationpropertyvalidation;  import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Configuration; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController;  import javax.validation.constraints.NotBlank;  @SpringBootApplication public class ConfigurationPropertyValidationApplication {      public static void main(String[] args) {         SpringApplication.run(ConfigurationPropertyValidationApplication.class, args);     } }  @RestController class Web {      private Config config;      Web(Config config) {         this.config = config;     }      @GetMapping     public String index() {         return String.format("The configured value is '%s'.", config.getValue());     } }  @Configuration @ConfigurationProperties(prefix = "app") @Validated class Config {      @NotBlank     private String value;      public String getValue() {         return value;     }      public void setValue(String value) {         this.value = value;     } } ```  Assume I provide partially missing configuration in my `application.yml` as follows: ```yml app: ``` The application comes up and exposes a null value: ```bash ➜  ~ curl localhost:8080/ The configured value is 'null'.% ```  What I would have expected is the same behaviour as for the following case. If I either fail to provide any configuration - `application.yml` is empty - or fail to provide the value ```yml app:   value: ``` ... then (as expected) the application fails to come up ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'app' to io.github.mamachanko.configurationpropertyvalidation.Config$$EnhancerBySpringCGLIB$$e06d273 failed:      Property: app.value     Value: null     Reason: must not be blank   Action:  Update your application's configuration ```  Am I missing an annotation or setting to also fail in the _odd_ case?  Thanks!</body>
		<created>2019-01-02 11:18:33</created>
		<closed>2019-01-10 21:05:14</closed>
	</bug>
	<bug>
		<id>15591</id>
		<title>server.compression.enabled=true doesn't work when using ssl and http/2 </title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; I use spring boot 2.1.1.RELEASE and embedded tomcat 9.0. In application.properies i configure ssl using: ``` server.ssl.key-store-type=jks server.ssl.key-store=C:\\**** server.ssl.key-store-password=**** server.ssl.key-alias=**** ```  And I enable compression using: ``` server.compression.enabled=true server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml server.compression.min-response-size=1000 ``` The compression now works OK, but if I enable http/2 using ``` server.http2.enabled=true ``` the responses is not compressed anymore.</body>
		<created>2018-12-30 23:56:27</created>
		<closed>2019-01-08 13:27:40</closed>
	</bug>
	<bug>
		<id>15545</id>
		<title>Documentation links in the README have not been updated following the move to pure Asciidoctor</title>
		<body>Please check the links for the documentation in the readme file for repo. It seems, that they are not working.  https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/ - should be https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/ </body>
		<created>2018-12-21 10:31:41</created>
		<closed>2018-12-21 11:16:11</closed>
	</bug>
	<bug>
		<id>15542</id>
		<title>Reactive health indicator for Redis waits forever when the redis server is down</title>
		<body>version: spring-boot-actuator 2.1.1.RELEASE spring-data-redis  2.0.5.RELEASE letuce-core 5.0.4.RELEASE  Class: RedisReactiveHealthIndicator, method: doHealthCheck   Access the actuator health check  hangs when the redis server is down.  It hangs on calling the doHalthCheck method in RedisReactiveHealthIndicator.    Expected behavior would be make it fail quickly instead of continuously hang.   </body>
		<created>2018-12-21 04:07:44</created>
		<closed>2019-01-07 10:47:09</closed>
	</bug>
	<bug>
		<id>15539</id>
		<title>Binding to a Map with EnumSet values fails with "Cannot create EnumSet for unknown element type"</title>
		<body>When binding properties to type EnumSet&lt;MyObject&gt;, there is a failure with "Cannot create EnumSet for unknown element type" as the cause. Stack trace is as follows:  ``` Caused by: java.lang.IllegalArgumentException: Cannot create EnumSet for unknown element type at org.springframework.util.Assert.notNull(Assert.java:193) at org.springframework.core.CollectionFactory.createCollection(CollectionFactory.java:195) at org.springframework.core.CollectionFactory.createCollection(CollectionFactory.java:151) at org.springframework.boot.context.properties.bind.CollectionBinder.lambda$bindAggregate$0(CollectionBinder.java:49) at org.springframework.boot.context.properties.bind.AggregateBinder$AggregateSupplier.get(AggregateBinder.java:109) at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:85) at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:71) at org.springframework.boot.context.properties.bind.CollectionBinder.bindAggregate(CollectionBinder.java:50) at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:58) at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:305) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:441) at org.springframework.boot.context.properties.bind.Binder$Context.access$100(Binder.java:381) at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:304) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:262) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221) ... 57 common frames omitted ```  Debugging into the code, it appears this may be caused by a bug.  Stepping into CollectionBinder.bindAggregate(CollectionBinder.java), I can see that aggregateType is set to EnumSet and elementType is set to MyObject, which is expected. However the next lines are:  ``` IndexedCollectionSupplier result = new IndexedCollectionSupplier( () -&gt; CollectionFactory.createCollection(collectionType, 0)); ```  which does not pass in the elementType. The next line (bindAggregate) is then invoked which eventually results in a call to the IndexedCollectionSupplier created above, which ends up in CollectionFactory.createCollection(): ```         } else if (EnumSet.class == collectionType) {             Assert.notNull(elementType, "Cannot create EnumSet for unknown element type"); ``` which of course does not have an elementType set because it was not passed into the earlier call, which then results in the assertion stack trace.  Perhaps the ```CollectionFactory.createCollection(collectionType, 0))``` should actually be ```CollectionFactory.createCollection(collectionType, elementType, 0));```?</body>
		<created>2018-12-20 16:15:17</created>
		<closed>2019-01-02 18:55:04</closed>
	</bug>
	<bug>
		<id>15532</id>
		<title>Dependency management for XMLUnit is incomplete</title>
		<body>Currently `xmlunit-core`, `xmlunit-legacy` and `xmlunit-matchers` are managed by spring boot.  It would be great if the `xmlunit-assertj` (added in `XMLUnit 2.6.1`) and `xmlunit-placeholders` (added in `XMLUnit 2.6.0`) modules were added to spring boot dependency management.</body>
		<created>2018-12-20 10:31:50</created>
		<closed>2018-12-20 10:49:55</closed>
	</bug>
	<bug>
		<id>15491</id>
		<title>Unlike Jetty and Tomcat, Reactor Netty and Undertow do not cause a startup failure when SSL is enabled but no key store is configured</title>
		<body>Spring Boot Version: `2.0.5`  Case-1 ===== If I set `server.ssl.enabled=true`, but do not provide SSL key-store details (via corresponding properties), what should be the behavior? I mean does server start in SSL mode. I am experiencing a behavior where my app starts without any warning/error, but the requests (over HTTP) fail with `Empty reply from server`.   Case-2 ===== If I set `server.ssl.enabled=true` and `server.ssl.key-store=classpath:ks_does_not_exist.p12`, the app does not start, but I see following log line: ``` 2018-12-18 21:50:01.370 [Thread: main] [WARN] TxPath: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext# Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start reactive web server; nested exception is java.lang.IllegalStateException: java.io.FileNotFoundException: class path resource [ks_does_not_exist.p12] cannot be resolved to URL because it does not exist ```  Case-3 ===== If I set `server.ssl.enabled=true` and `server.ssl.key-store=classpath:valid_ks.p12`, `server.ssl.key-store-password=wrong_password`, the app fails to start with following log line  ``` 2018-12-18 21:53:50.276 [Thread: main] [ERROR] TxPath: org.springframework.boot.SpringApplication# Application run failed org.springframework.context.ApplicationContextException: Unable to start reactive web server; nested exception is java.lang.IllegalStateException: java.io.IOException: keystore password was incorrect ```  Expected behavior ============= **Case-1**: Spring Boot should fail to start with error saying SSL is enabled, but corresponding key-store details are missing.  **Case-2**: Spring Boot should write the log at `ERROR` level with stack trace. The `WARN` level is inconsistent with `Case-3`.  **Case-3**: This is the right behavior.</body>
		<created>2018-12-18 22:17:59</created>
		<closed>2019-01-22 11:42:05</closed>
	</bug>
	<bug>
		<id>15488</id>
		<title>Task input and output annotations on BootJar and BootWar are incomplete</title>
		<body>`BootJar`'s `bootInf` property should be `@Internal` to align it with the [`webInf` property](https://github.com/gradle/gradle/blob/14ec619c384e1f4a9b4db277b0687e95d62e7ef2/subprojects/plugins/src/main/java/org/gradle/api/tasks/bundling/War.java#L107) on Gradle's `War` task.  `BootWar`'s `providedClasspath` property should be `@Classpath` to align it with the [`classpath` property](https://github.com/gradle/gradle/blob/14ec619c384e1f4a9b4db277b0687e95d62e7ef2/subprojects/plugins/src/main/java/org/gradle/api/tasks/bundling/War.java#L147) on Gradle's `War` task.</body>
		<created>2018-12-18 11:54:38</created>
		<closed>2018-12-21 15:44:34</closed>
	</bug>
	<bug>
		<id>15483</id>
		<title>MeterBinder that uses Health infrastructure causes Rabbit metrics to be bound before meter registry customization has completed</title>
		<body>Spring Boot version: 2.1.1 Micrometer version: 1.1.1  While defining a custom micrometer MeterRegistryCustomizer I had to face the following issue: The dependency chain of Spring Boot-HealthIndicator seems to interrupt the MeterRegistry bean creation at runtime. I will try to explain with the following setup. Given:  ``` @Bean public MicrometerConfiguration micrometerConfiguration() {     return new MicrometerConfiguration(); }  @Bean public HealthEndpointMeterBinder healthEndpointMetricRegistry(HealthEndpoint healthEndpoint) {     return new HealthEndpointMeterBinder(healthEndpoint); } ```  Are being defined as follows:  ``` @RequiredArgsConstructor public class MicrometerConfiguration implements MeterRegistryCustomizer {      @Override     public void customize(MeterRegistry registry) {         // do something ...     } }  @RequiredArgsConstructor public class HealthEndpointMeterBinder implements MeterBinder {     private final HealthEndpoint healthEndpoint;      @Override     public void bindTo(MeterRegistry meterRegistry) {         Gauge.builder("unhealthy", healthEndpoint,                 e -&gt; e.health().getStatus() == Status.UP ? 0.0 : 1.0         ).register(meterRegistry);     } } ```  In org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor#getConfigurer you can observe the process being interrupted which for example leads to org.springframework.boot.actuate.metrics.amqp.RabbitMetrics#bindTo being called before MicrometerConfiguration#customize. This results to not being able to register custom common tags for example.  I could solve this issue by defining the HealthIndicator dependency as ObjectProvider&lt;HealthEndpoint&gt;:  ``` @RequiredArgsConstructor public class HealthEndpointMeterBinder implements MeterBinder {     private final ObjectProvider&lt;HealthEndpoint&gt; healthEndpoint;      @Override     public void bindTo(MeterRegistry meterRegistry) {         Gauge.builder("unhealthy", healthEndpoint,                 e -&gt; e.getIfAvailable().health().getStatus() == Status.UP ? 0.0 : 1.0         ).register(meterRegistry);     } } ```  In my mind, injecting the HealthIndicator bean should not lead to the interruption of the MeterRegistry bean creation. I hope i could make myself clear ...  Regards  Dennis</body>
		<created>2018-12-17 15:23:50</created>
		<closed>2018-12-19 16:58:11</closed>
	</bug>
	<bug>
		<id>15468</id>
		<title>Dependency management for Groovy 2.5 is incomplete</title>
		<body>Right now I have to use explicitly a Groovy version in my project for extra Groovy dependencies (e.g. `groovy-dateutils`, `groovy-datetime` etc.) where I can't rely on the Spring Boot as parent, but I use its BOM for imports.  It might be the fact that there is just enough to have a `groovy-all` dependency which is now very close to the BOM structure: https://repo1.maven.org/maven2/org/codehaus/groovy/groovy-all/2.5.2/groovy-all-2.5.2.pom. With the issue that they don't wrap dependencies into the `&lt;dependencyManagement&gt;` (🤷‍♂️), so, I'm not sure how to use in Maven. It works well in Gradle though... But that's already a different story and we may just list all the dependencies from there, plus `groovy-dateutils`, which enhance a `Date` class with extra `format()` and `parse()` methods.   Thanks</body>
		<created>2018-12-14 14:07:13</created>
		<closed>2018-12-19 17:56:28</closed>
	</bug>
	<bug>
		<id>15445</id>
		<title>spring.profiles.active from defaultProperties takes precedence over config files</title>
		<body>The documentation states that Default properties (specified by setting `SpringApplication.setDefaultProperties`) has the lowest precedence. This happens because the `ConfigFileApplicationListener` runs after the `defaultProperties` property source has been added to the environment. The listener only adds active profiles from the config files to the environment if none are already present in the environment.</body>
		<created>2018-12-11 20:12:24</created>
		<closed>2019-03-11 23:18:59</closed>
	</bug>
	<bug>
		<id>15443</id>
		<title>TestRestTemplate.withBasicAuth resets custom requestFactory</title>
		<body>I'm currently using a `RestTemplateCustomizer` bean to set a custom request factory for all RestTemplate's:  https://github.com/freefair/okhttp-spring-boot/blob/f0f6dcc0ba685c40ebe15de725c1170307027173/autoconfigure/src/main/java/io/freefair/spring/okhttp/OkHttpRestTemplateAutoConfiguration.java#L22-L27  The `TestRestTemplate` I get injected into my unit tests also uses this custom request factory, but calling `withBasicAuth()` returns a new `TestRestTemplate`-instance which no longer contains the custom request factory but a default one.  Environment: Spring Boot 2.1.1.RELEASE OpenJDK 11  Similar issues: see #7812 see #7441 see #7265</body>
		<created>2018-12-11 14:15:00</created>
		<closed>2019-03-18 23:57:34</closed>
	</bug>
	<bug>
		<id>15436</id>
		<title>An application that uses Liquibase and spring-boot-starter-log4j2 fails to start due to Logback Classic being on the classpath</title>
		<body>Liquibase 3.6 moved to SLF4J for logging, but also added a compile-scoped dependency on Logback. If you try to use Log4j2 with an app that uses Liquibase, it'll fail to start:  ``` Exception in thread "main" java.lang.IllegalArgumentException: LoggerFactory is not a Logback LoggerContext but Logback is on the classpath. Either remove Logback or the competing implementation (class org.apache.logging.slf4j.Log4jLoggerFactory loaded from file:/Users/awilkinson/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.11.1/log4j-slf4j-impl-2.11.1.jar). If you are using WebLogic you will need to add 'org.slf4j' to prefer-application-packages in WEB-INF/weblogic.xml: org.apache.logging.slf4j.Log4jLoggerFactory at org.springframework.util.Assert.instanceCheckFailed(Assert.java:655) at org.springframework.util.Assert.isInstanceOf(Assert.java:555) at org.springframework.boot.logging.logback.LogbackLoggingSystem.getLoggerContext(LogbackLoggingSystem.java:286) at org.springframework.boot.logging.logback.LogbackLoggingSystem.beforeInitialize(LogbackLoggingSystem.java:102) at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationStartingEvent(LoggingApplicationListener.java:220) at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:199) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127) at org.springframework.boot.context.event.EventPublishingRunListener.starting(EventPublishingRunListener.java:69) at org.springframework.boot.SpringApplicationRunListeners.starting(SpringApplicationRunListeners.java:48) at org.springframework.boot.SpringApplication.run(SpringApplication.java:302) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) at sample.liquibase.SampleLiquibaseApplication.main(SampleLiquibaseApplication.java:26) ```  The workaround is to exclude Logback when declaring the Liquibase dependency:  ```xml &lt;dependency&gt; &lt;groupId&gt;org.liquibase&lt;/groupId&gt; &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; ```  We should exclude the dependency in our dependency management, in the same way that we exclude Commons Logging when necessary. We may be able to revert the exclusion in the future if [CORE-3212](https://liquibase.jira.com/browse/CORE-3212) is fixed.</body>
		<created>2018-12-10 15:15:19</created>
		<closed>2018-12-10 15:40:50</closed>
	</bug>
	<bug>
		<id>15378</id>
		<title>When running on a separate port, Actuator health endpoint may report healthy before the main port is listening</title>
		<body>When configuring an application to use a dedicated port for the management endpoints:  `management.server.port: 8081`  the health endpoint reports "UP" without waiting for the main application port to be exposed. This does not happen when both actuator and application are using the same port, which causes an undesired asymmetry.   This problem can be reproduced easily by having a SmartLifeCycle bean that will be registered to the main application context as is the case when using Spring Cloud Stream with a binding configured (i.e. with Kafka), the InputBindingLifecycle/OutputBindingLifecycle in default configuration will retry for a number of times before failing. During this period, the application has been reported as healthy.  Shouldn't there be an out of the box mechanism for the actuator health endpoint to be aware that the main application port is not yet exposed?  Reproduced with `spring boot version: 2.0.3`.</body>
		<created>2018-12-04 08:32:27</created>
		<closed>2019-04-05 16:38:34</closed>
	</bug>
	<bug>
		<id>15372</id>
		<title>OAuth2ResourceServerAutoConfiguration should also check for JwtDecoder being present</title>
		<body>From [Gitter chat with](https://gitter.im/spring-projects/spring-boot?at=5c01af8f500e8e37283dc146) @mbhave.  Boot’s `OAuth2ResourceServerAutoConfiguration` should also check for `JwtDecoder` as well as `JwtAuthenticationToken` classes being present.  `spring-security-oauth2-jose` is only an optional dependency of `spring-security-oauth2-resource-server`. If I have an app that uses `spring-security-oauth2-resource-server` but does not have `spring-security-oauth2-jose` on the classpath we see the following stack trace  My guess is that the reactive side needs the same change, although I have not looked at the code to verify whether or not that is the case.  ``` Failed to load ApplicationContext java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)     at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349)     at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)     at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)     at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)     at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263)     at java.util.Optional.orElseGet(Optional.java:267)     at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262)     at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:82)     at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:59)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$0(NodeTestTask.java:80)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:80)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:66)     at java.util.ArrayList.forEach(ArrayList.java:1257)     at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:110)     at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)     at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:95) Caused by: java.lang.IllegalStateException: Cannot load configuration class: org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerJwkConfiguration     at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:413)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:253)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:286)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:130)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:691)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:528)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:127)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)     ... 78 more Caused by: java.lang.IllegalStateException: Unable to load cache item     at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79)     at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34)     at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:130)     at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:315)     at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:569)     at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:416)     at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:137)     at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:109)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:402)     ... 89 more Caused by: java.lang.NoClassDefFoundError: org/springframework/security/oauth2/jwt/JwtDecoder     at java.lang.Class.getDeclaredConstructors0(Native Method)     at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)     at java.lang.Class.getDeclaredConstructors(Class.java:2020)     at org.springframework.cglib.proxy.Enhancer.generateClass(Enhancer.java:658)     at org.springframework.cglib.transform.TransformingClassGenerator.generateClass(TransformingClassGenerator.java:33)     at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy.generate(ConfigurationClassEnhancer.java:252)     at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:354)     at org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:582)     at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:106)     at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:104)     at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.j  Caused by: java.lang.ClassNotFoundException: org.springframework.security.oauth2.jwt.JwtDecoder     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 111 more ```</body>
		<created>2018-12-03 12:39:36</created>
		<closed>2018-12-07 21:53:27</closed>
	</bug>
	<bug>
		<id>15370</id>
		<title>spring-boot-dependencies manages Dropwizard Metrics modules that no longer exist</title>
		<body></body>
		<created>2018-12-03 11:58:54</created>
		<closed>2018-12-03 13:02:28</closed>
	</bug>
	<bug>
		<id>15324</id>
		<title>OAuth2ClientPropertiesRegistrationAdapter shouldn't remove issuer's trailing slash</title>
		<body>`OAuth2ClientPropertiesRegistrationAdapter` removes the trailing slash on the user-provided `spring.security.oauth2.client.provider.providername.issuer-uri` property.   This causes a problem when the issuer for the OAuth 2.0 provider actually does have a trailing slash.  For example, Auth0's `iss` field [always has a trailing slash](https://auth0.com/docs/api-auth/tutorials/verify-access-token#validate-the-claims).  Once the trailing slash is removed, then issuer validation fails since it differs from the `iss` claim in JWTs and in the OIDC Discovery endpoint.  There is at least one example of a user working around this in the wild [by adding an extra slash](https://stackoverflow.com/questions/53524595/spring-boot-add-additional-attribute-to-webclient-request-in-serveroauth2authori). :)  Is it necessary to remove the trailing slash?</body>
		<created>2018-11-28 23:58:49</created>
		<closed>2018-12-11 00:45:11</closed>
	</bug>
	<bug>
		<id>15317</id>
		<title>HibernateMetricsAutoConfiguration will fail, when using different JPA implementation</title>
		<body>When using a different JPA implementation than Hibernate, `HibernateMetricsAutoConfiguration` ([link](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java)) will fail, as it is based on Hibernate components.  **The following happens usually:** Hibernate is initialized before this auto configuration class. Then `HibernateMetricsAutoConfiguration` will be checked for conditions  ``` @ConditionalOnClass({ EntityManagerFactory.class, MeterRegistry.class }) @ConditionalOnBean({ EntityManagerFactory.class, MeterRegistry.class }) ```  The conditions are matching, so the auto configuration class will be taken into account.  **Without Hibernate:** Any other JPA vendor (e. g. Eclipse Link) will be set up. Now, with micrometer also active, we also will have as well class and bean of `EntityManagerFactory` and `MeterRegistry`. Now again, `HibernateMetricsAutoConfiguration` will be taken into account. As now, hibernate is *not* in the classpath, we will get `java.lang.ClassNotFoundException: org.hibernate.SessionFactory`.  **Suggestion for a fix** This should be easy to fix, by adding a third class to `@ConditionalOnClass`. That class should be specific to Hibernate, to make sure, that the JPA vendor really is Hibernate. So the fix could be:  ``` @ConditionalOnClass({ EntityManagerFactory.class, MeterRegistry.class, SessionFactory.class }) @ConditionalOnBean({ EntityManagerFactory.class, MeterRegistry.class }) ```  I can take care of this and provide a PR, if this is confirmed. Not sure, if there is a more appropriate way to tell, if the JPA vendor is Hibernate.</body>
		<created>2018-11-28 08:56:34</created>
		<closed>2018-11-28 09:55:30</closed>
	</bug>
	<bug>
		<id>15204</id>
		<title>HttpRequestMethodNotSupportedException prevents timing in WebMvcMetricsFilter</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; This was originally reported in https://github.com/micrometer-metrics/micrometer/issues/1011.  `HttpRequestMethodNotSupportedException` prevents timing in `WebMvcMetricsFilter` and a simple fix seems to be just ignoring `HttpRequestMethodNotSupportedException` in `filterAndRecordMetrics()` and using `null` `handler` but I'm opening an issue in case there's a better approach for it. If ignoring `HttpRequestMethodNotSupportedException` is a right approach, I can create a PR for it.  Here is a sample project to reproduce it: https://github.com/izeye/sample-micrometer-spring-boot/tree/micrometer-gh-1011-2.1.0  Reproduction steps as follows:  - Run the application. - Open http://localhost:8080/login in a web browser. - Submit anything.</body>
		<created>2018-11-17 09:58:02</created>
		<closed>2018-11-26 11:42:46</closed>
	</bug>
	<bug>
		<id>15175</id>
		<title>AnnotationsPropertySource can throw a NPE when `javax` meta-annotations are present</title>
		<body>Hello,  We are trying to adopt Spring Boot 2.1 (currently we are on 2.0.2) but we face issues. Here is an example: ```java @RunWith(SpringRunner.class) @SpringBootTest(classes = { TestApplication.class }, webEnvironment = WebEnvironment.NONE) @Transactional public class SampleIT {    @Autowired   private TestEntityRepository testEntityRepository;    @Autowired   private TransactionalTestService transactionalTestService;    ... } ``` Here is the stacktrace: ```text java.lang.NullPointerException: null         at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.collectProperties(AnnotationsPropertySource.java:73)         at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.collectProperties(AnnotationsPropertySource.java:79)         at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.getProperties(AnnotationsPropertySource.java:64)         at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.&lt;init&gt;(AnnotationsPropertySource.java:59)         at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.&lt;init&gt;(AnnotationsPropertySource.java:54)         at org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizerFactory.createContextCustomizer(PropertyMappingContextCustomizerFactory.java:37)         at org.springframework.test.context.support.AbstractTestContextBootstrapper.getContextCustomizers(AbstractTestContextBootstrapper.java:404)         at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:376)         at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:312)         at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:265)         at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:108)         at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:99)         at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:139)         at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:124)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:151)         at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.&lt;init&gt;(SpringJUnit4ClassRunner.java:142)         at org.springframework.test.context.junit4.SpringRunner.&lt;init&gt;(SpringRunner.java:49)         at sun.reflect.GeneratedConstructorAccessor56.newInstance(Unknown Source)         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)         at java.lang.reflect.Constructor.newInstance(Constructor.java:423)         at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)         at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)         at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)         at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)         at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)         at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)         at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)         at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)         at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)         at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)         at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ``` The problem occurs during because `mergedAnnotations` return `[null]` for the Transactional annotation. Have you seen similar problem before? Do you need more input?  Best regards, Yana &lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; </body>
		<created>2018-11-14 16:59:45</created>
		<closed>2018-11-15 02:27:54</closed>
	</bug>
	<bug>
		<id>15167</id>
		<title>Overriding Jackson2JsonDecoder/Encoder should be easier with CodecCustomizer</title>
		<body>To override the default `Jackson2JsonEncoder`, I have to set to false `CodecConfigurer#registerDefaults` and register my custom `Jackson2JsonEncoder` using `CodecConfigurer#customCodecs`. Hence I cannot rely anymore on Spring Boot to add the `LoggingCodecConfiguration` or potential future configuration improvements.</body>
		<created>2018-11-13 22:28:07</created>
		<closed>2018-11-27 14:01:12</closed>
	</bug>
	<bug>
		<id>15152</id>
		<title>ConfigurationPropertyName equals method fails when uppercase values start the same</title>
		<body>After upgrading to Spring Boot 2.1 I've noticed some configuration property map structures are not properly mapped to the corresponding Java representations as given in the following example. The same code and properties are working without issues with Spring Boot 2.0 and 1.5.  application.yml: ``` example:   mymap:     MY_KEY: value1     MY_KEY_WITH_OTHER_VALUE: value2 ```  Java: ``` @Configuration @Data @ConfigurationProperties("example") public class ExampleConfig {   private Map&lt;String, String&gt; mymap; } ```  When running the above code, `mymap` will contain the following data:  key: `MY_KEY` =&gt; value: `value1` key: `MY_KEY_WITH_OTHER_VALUE` =&gt; value: `value1`  Note that the expected value for key `MY_KEY_WITH_OTHER_VALUE` would be `value2`.</body>
		<created>2018-11-11 10:41:35</created>
		<closed>2018-11-15 21:52:16</closed>
	</bug>
	<bug>
		<id>15087</id>
		<title>BootJar and BootWar do not provide setters for classpath and provided classpath respectively</title>
		<body>Gradle's War task has two setters for its class path:  - [setClasspath(FileCollection)](https://docs.gradle.org/4.4/javadoc/org/gradle/api/tasks/bundling/War.html#setClasspath(org.gradle.api.file.FileCollection)) - [setClasspath(Object)](https://docs.gradle.org/4.4/javadoc/org/gradle/api/tasks/bundling/War.html#setClasspath(java.lang.Object))  BootJar lacks these methods which restricts you to only making additive changes to the classpath. It's also inconsistent with what Gradle offers (and what BootWar offers by being a War subclass) so I consider this to be a bug.</body>
		<created>2018-11-04 22:00:08</created>
		<closed>2018-11-23 14:01:39</closed>
	</bug>
	<bug>
		<id>15083</id>
		<title>WebFlux doesn't render HTTP status error templates</title>
		<body>When I try to create a demo project on spring initializr and choose spring-boot-starter-webflux I can't for my life customize my error pages. I have tried putting the templates under /resources/public/error, /resources/templates/error (I am using Thymeleaf), defining a custom ErrorController to no avail. Each time I want to throw a 404 page for example the application throws the WhiteLabel page. BUT when I change the dependency to spring-boot-starter-web it picks my templates right away.  Is there some other way of declaring the error pages or this is just a bug (currently using Spring Boot 2.1.0.RELEASE)?  I eventually remedied the issue by falling back to 2.0.5 but it is no solution.  Thanks in advance.  [Copy of the issue on stackoverflow](https://stackoverflow.com/questions/52899283/how-to-customize-spring-webflux-error-page/52900277#52900277) </body>
		<created>2018-11-03 18:52:20</created>
		<closed>2018-11-03 20:33:32</closed>
	</bug>
	<bug>
		<id>15074</id>
		<title>Logging performed via Commons Logging below error level is lost when using Log4j2 and Java 11</title>
		<body>If I create a spring-boot application that uses the log4j2 starter and configure it to log to a file and I start the application I see that the log file gets created but it is always empty.  Everything works as expected with java 8 (the logs go in the file) but if I run the application with java 11 I get an empty file  If I add the spring-boot-starter-web to the pom file I then get data in my log file but I think the logging starts later in the startup process than normal.  If my project has a log42.properties in the classpath (versus log4j2-basic.properties ) then logging works.  [log4j2-failures.zip](https://github.com/spring-projects/spring-boot/files/2542738/log4j2-failures.zip)  The attached project demonstrates this. I see this with spring-boot 2.1.0 and 2.0.6</body>
		<created>2018-11-02 14:08:51</created>
		<closed>2018-11-08 09:22:07</closed>
	</bug>
	<bug>
		<id>15070</id>
		<title>When using WebFluxTest, WebTestClient's codecs are not customized breaking JSON (de)serialisation that relies on Module-provided functionality</title>
		<body>Possible bug report/regression:  This code works with v2.0.6.RELEASE &amp; prior versions of Boot, and Jackson dependencies were unchanged between 2.0.6 &amp; 2.1.0.  Unit test fails with this stack trace: https://gist.github.com/mkheck/f94d3a2caea883004fc3442379d3b07d  Sample project is here: https://github.com/mkheck/Boot210JacksonNoCreatorsException  Steps to reproduce: run only active unit test in RouteConfigTest (getAllCoffees()). </body>
		<created>2018-11-02 08:05:59</created>
		<closed>2018-11-27 12:00:58</closed>
	</bug>
	<bug>
		<id>15063</id>
		<title>Skip scoped targets when determining endpoint beans</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general `ideal-for-contribution` issues. Thanks!  ## Background  The `@Endpoint` annotation identifies a type as being an actuator endpoint. Spring Boot's actuator infrastructure looks for beans that have this annotation.    ## Problem  When Spring Cloud's `@RefreshScope` is used on an `@Endpoint` bean, it registers another bean for that endpoint with the bean name prefixed by `scopedTarget`. Spring Boot discovers this bean as well when looking for `@Endpoint` beans an fails because it finds two endpoint beans with the same ID.             ## Solution  We should filter out the `scopedTarget.` version of the endpoint bean using `ScopedProxyUtils.isScopedTarget(name)` as was done for a different type of bean in [this commit]( https://github.com/spring-projects/spring-boot/commit/4919c6f30ce1f6842f40c24e8cb697d7a075f0e).  The code for discovering endpoint beans can be found [here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java#L129).  The [test](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscovererTests.java) can register two beans for the same `@Endpoint` class, one with the name prefixed by `scopedTarget.` and assert that only the original `@Endpoint` bean is discovered.  ## Steps to Fix    - [x] Claim this issue with a comment below and ask any clarifying questions you need - [ ] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [ ] Try to fix the issue following the steps above - [ ] Commit your changes and start a pull request.</body>
		<created>2018-11-01 20:31:05</created>
		<closed>2018-11-15 17:14:55</closed>
	</bug>
	<bug>
		<id>15041</id>
		<title>Jetty management access logs should be written to a different file</title>
		<body>We have `TomcatAccessLogCustomizer` and `UndertowAccessLogCustomizer` in `ServletManagementChildContextConfiguration` but no `Jetty` one.</body>
		<created>2018-10-31 15:36:20</created>
		<closed>2018-11-15 21:29:36</closed>
	</bug>
	<bug>
		<id>15038</id>
		<title>Error when trying to bootstrap Hibernate asynchronously and using @EnableScheduling</title>
		<body>After upgrading application to Spring 2.1.0 I tried to use Hibernate asynchronously bootstrap, but when I'm adding a flag `spring.data.jpa.repositories.bootstrap-mode=deferred` to configuration then application throws error during startup:  &gt; Parameter 0 of method entityManagerFactory in org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration required a single bean, but 2 were found: - [ ] - applicationTaskExecutor: defined by method 'applicationTaskExecutor' in class path resource [org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.class] - taskScheduler: defined by method 'taskScheduler' in class path resource [org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.class]  Looks like Spring have trouble with finding unique `AsyncTaskExecutor` bean and both beans are coming from auto configuration. To make it work I excluded `TaskExecutionAutoConfiguration`:  ``` @SpringBootApplication(exclude = {TaskExecutionAutoConfiguration.class}) @EnableScheduling class MyApp {} ```</body>
		<created>2018-10-31 15:17:18</created>
		<closed>2019-01-07 13:59:05</closed>
	</bug>
	<bug>
		<id>15034</id>
		<title>Cannot run repackage twice with different settings</title>
		<body>Since the release of 2.1.0.RELEASE, we get the following issue in our build:  ```` build31-Oct-2018 15:08:38[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.0.RELEASE:repackage (build-repackaged-jar) on project application: Execution build-repackaged-jar of goal org.springframework.boot:spring-boot-maven-plugin:2.1.0.RELEASE:repackage failed: Source must refer to an existing file, got /atlassian/bamboo/agent/5.15.3/xml-data/build-dir/BC-BGS-JOB1/repo/application/target/gear-exec-linux.jar.original -&gt; [Help 1] ````  We fixed the plugin version to 2.0.6.RELEASE and all works fine again.   This is our specific part in the pom, the special thing about is that it creates two artifacts:  ```xml  &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;2.0.6.RELEASE&lt;/version&gt; &lt;!-- remove this and it will fail --&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;id&gt;build-linux-executable&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;repackage&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;                 &lt;classifier&gt;exec-linux&lt;/classifier&gt;                 &lt;executable&gt;true&lt;/executable&gt;                 &lt;attach&gt;false&lt;/attach&gt;             &lt;/configuration&gt;         &lt;/execution&gt;             &lt;execution&gt;             &lt;id&gt;build-repackaged-jar&lt;/id&gt;             &lt;goals&gt;                 &lt;goal&gt;repackage&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;                 &lt;executable&gt;false&lt;/executable&gt;                 &lt;attach&gt;true&lt;/attach&gt;             &lt;/configuration&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; ```</body>
		<created>2018-10-31 15:06:15</created>
		<closed>2018-11-27 14:15:13</closed>
	</bug>
	<bug>
		<id>15032</id>
		<title>TaskSchedulingAutoConfiguration prevents discovery of ScheduledExecutorService</title>
		<body> We are using `DelegatingSecurityContextExecutorService` to handle security annotatons in our scheduled tasks. It used to work before upgrading to Spring Boot 2.1.0 since `ScheduledAnnotationBeanPostProcessor` uses `ScheduledExecutorService` if it can not find any bean of type `TaskScheduler.`   `TaskSchedulingAutoConfiguration` introduced in 2.1.0 creates a default `TaskScheduler` if there is none, which makes `ScheduledAnnotationBeanPostProcessor` ignore our `ScheduledExecutorService`.  ```java     @Bean     // Ignored since Spring Boot 2.1.0     public ScheduledExecutorService scheduler() {         SecurityContext securityContext = SecurityContextHolder.createEmptyContext();         securityContext.setAuthentication(new AuthenticatedUser(loggedInUser, "root"));          ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(10);          return new DelegatingSecurityContextScheduledExecutorService(scheduledExecutorService, securityContext);     } ```</body>
		<created>2018-10-31 12:00:04</created>
		<closed>2018-11-04 09:00:50</closed>
	</bug>
	<bug>
		<id>14990</id>
		<title>Allow early ServletRequest Autowiring with embedded containers</title>
		<body>Spring Boot Version: 1.5.13.RELEASE  *Setup* ApplicationContext with a Bean declared with an autowire dependency to `HttpServletRequest` (the used ApplicationContext is a little bit more complex).  *Problem* For a non embedded environment (Tomcat deployment) the application context boots successfully. For an embedded environment, the application context fails to start with the exception: &gt; ....NoSuchBeanDefinitionException: No qualifying bean of type 'javax.servlet.http.HttpServletRequest' available: expected at least 1 bean which qualifies as autowire candidate.  *Reason* The `HttpServletRequest` substitution is performed by an `ObjectFactory` registered by `org.springframework.web.context.support.WebApplicationContextUtils.registerWebApplicationScopes(...)`. The `registerWebApplicationScopes(...)` call is performed by `EmbeddedWebApplicationContext.selfInitialize(...)`. For an embedded environment the method `EmbeddedWebApplicationContext.createEmbeddedServletContainer()` is invoked previous to the initializer which causes Eager Bean creation of the ApplicationContext.  *Expected* `HttpServletRequest` is resolved, no matter if it is an embedded or non embedded environment.</body>
		<created>2018-10-29 08:33:41</created>
		<closed>2018-11-23 16:59:51</closed>
	</bug>
	<bug>
		<id>14953</id>
		<title>WebMvcMetricsFilter should not use SLF4J logger</title>
		<body></body>
		<created>2018-10-25 05:03:55</created>
		<closed>2018-10-25 05:50:12</closed>
	</bug>
	<bug>
		<id>14938</id>
		<title>ApplicationConversionService is not binary compatibility with 2.0.x</title>
		<body>Starting with 2.1.0.M4, `org.springframework.boot.convert.ApplicationConversionService.getSharedInstance()` [now returns](https://github.com/spring-projects/spring-boot/blob/0c00508b3cdec4d30641dd26d8503299e0391fd3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/ApplicationConversionService.java#L60) an `ApplicationConversionService` instead of a `ConversionService`.  While `ApplicationConversionService ` inherits from `ConversionService`, this [does break binary compatibility](https://wiki.eclipse.org/Evolving_Java-based_APIs_2#Evolving_API_interfaces_-_API_methods) according to Java rules. This means that client code that called `ApplicationConversionService.getSharedInstance()` needs to be recompiled to work with Spring Boot 2.1, and will not be backward compatible with prior Spring Boot versions.  Currently this affects jasypt-spring-boot, as seen in  ulisesbocchio/jasypt-spring-boot#102  While I understand that breaking changes must sometimes be introduced, I was wondering if there is a strong reason for this change, and if it might still be reversed if not?  I checked Spring Boot's code base, and it appears that only the following methods require that `ApplicationConversionService.getSharedInstance()` returns a `ConfigurableConversionService` (not an `ApplicationConversionService`).  * [org.springframework.boot.SpringApplication#configureEnvironment](https://github.com/spring-projects/spring-boot/blob/0c00508b3cdec4d30641dd26d8503299e0391fd3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L510) * [org.springframework.boot.SpringApplication#postProcessApplicationContext](https://github.com/spring-projects/spring-boot/blob/0c00508b3cdec4d30641dd26d8503299e0391fd3/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L655)  The commit that introduces this change was 0c00508b3cdec4d30641dd26d8503299e0391fd3, with the comment  &gt; Update `SpringApplication` to automatically register the shared `ApplicationConversionService` instance with the `BeanFactory` and `Environment`.  Thanks in advance</body>
		<created>2018-10-23 21:48:27</created>
		<closed>2018-10-24 22:23:08</closed>
	</bug>
	<bug>
		<id>14924</id>
		<title>Web Services starter depends on a missing mimepull version</title>
		<body>Hi everyone,  # The context  We tried to migrate one of our projects from Spring Boot 2.1.0.M4 to 2.1.0.RC1 and encountered an error while building. The project depends on spring-boot-starter-web-services.  # The error  While building : ``` * What went wrong: Could not resolve all files for configuration ':compileClasspath'. &gt; Could not find org.jvnet.mimepull:mimepull:1.9.8.   Required by:       project : &gt; org.springframework.boot:spring-boot-starter-web-services:2.1.0.RC1 &gt; com.sun.xml.messaging.saaj:saaj-impl:1.5.0 ```  # Our analysis  It seems like while the version 1.5.0 on[ the archived Java EE ](https://github.com/eclipse-ee4j/metro-saaj) repository (the one used in the starter) [depends on mimepull 1.9.8](https://github.com/javaee/metro-saaj/blob/1.5.0/saaj-ri/pom.xml#L482), mimepull isn't available on repositories like Maven Central.  While migrating to the new EE4J repository, it seems like saaj [has been silently upgraded to 1.5.1 ](https://github.com/eclipse-ee4j/metro-saaj/commit/9acf1248858d042b0a7590005bc4a1c7830643ec) and  its dependency to mimepull [has been rolled back to 1.9.7](https://github.com/eclipse-ee4j/metro-saaj/commit/9acf1248858d042b0a7590005bc4a1c7830643ec#diff-600376dffeb79835ede4a0b285078036R445).  This should make the application build again.</body>
		<created>2018-10-22 18:07:16</created>
		<closed>2018-10-27 00:28:38</closed>
	</bug>
	<bug>
		<id>14898</id>
		<title>When using Tomcat, closing the application context blocks for two seconds for each DispatcherServlet initialised by a request to the mappings endpoint</title>
		<body>Let me try and explain the problem that I am seeing.  With https://github.com/spring-projects/spring-boot/issues/13186 support for lazy loading `DispatcherServlet` when hitting `/actuator/mappings` has been added to Spring Boot 2.0.6. However, when that happens and one tries to close the application it takes 2s per `DispatcherServlet` to close its `WebApplicationContext` (this is on 2.0.6.RELEASE). However, if each context was initialized by hitting it's path then everything is fine. Therefore, I think that there might be some problem with the way the async `DispatcherServlet`(s) are initialized in the Actuator.  I have created a small project that displays the problem. You can find it [here](https://github.com/filiphr/spring-boot-issues/tree/master/multi-dispatcher-issue).  Note: #13186 actually does not work with 2.1.0.RC1 (which means that you won't see the problem there, as the other contexts are not initialized).</body>
		<created>2018-10-18 21:40:46</created>
		<closed>2018-10-19 10:42:11</closed>
	</bug>
	<bug>
		<id>14897</id>
		<title>Resource Versioning Handler not being called if any FilterRegistrationBean is found</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report (do not copy/paste) Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement (do not copy/paste) Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; ### Issue: If actuator starter dependency is included in the project, the resource strategies stop working, for instance, GZip or Content Versioning strategies are not called. Even AbstractResourceHandler stops getting invoked. Removing the actuator starter dependency makes the config start working again. This is reproducible on a simple https://start.spring.io template (with thymeleaf, web and actuator starters) as well. This also gets resolved on downgrading to 2.0.5. Sample repo is provided below  ### Sample Repo: https://github.com/iamareebjamal/spring-boot-resource-versioning-bug  ### Environment: Spring Boot 2.0.6</body>
		<created>2018-10-18 20:10:00</created>
		<closed>2018-10-22 21:35:33</closed>
	</bug>
	<bug>
		<id>14895</id>
		<title>Servlet endpoints on Jersey do not take application path property into account</title>
		<body>Reproduced by setting `spring.jersey.application-path=/admin`. The Jolokia endpoint was still available under `/actuator/jolokia` while all other actuators were under `/admin/actuator`.</body>
		<created>2018-10-18 17:22:10</created>
		<closed>2018-11-29 01:41:41</closed>
	</bug>
	<bug>
		<id>14883</id>
		<title>2.1.0.RC1, startup failed by Log4j2Metrics bean creation when third party library depends on log4j-core</title>
		<body>## Minimum dependencies for reproduction  ```groovy dependencies {   implementation('org.springframework.boot:spring-boot-starter-actuator')   implementation('org.springframework.boot:spring-boot-starter-web')    implementation('org.apache.logging.log4j:log4j-core')// if remove it, works fine } ```  ## Part of stacktrace  ```txt Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'log4j2Metrics' defined in class path resource [org/springframework/boot/actuate/autoconfigure/metrics/Log4J2MetricsAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [io.micrometer.core.instrument.binder.logging.Log4j2Metrics]: Factory method 'log4j2Metrics' threw exception; nested exception is java.lang.ClassCastException: org.apache.logging.slf4j.SLF4JLoggerContext cannot be cast to org.apache.logging.log4j.core.LoggerContext at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:625) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:455) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1462) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1419) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1265) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1197) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.resolveStream(DefaultListableBeanFactory.java:1917) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.orderedStream(DefaultListableBeanFactory.java:1911) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor.asOrderedList(MeterRegistryPostProcessor.java:80) ~[spring-boot-actuator-autoconfigure-2.1.0.RC1.jar:2.1.0.RC1] at org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor.getConfigurer(MeterRegistryPostProcessor.java:72) ~[spring-boot-actuator-autoconfigure-2.1.0.RC1.jar:2.1.0.RC1] at org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryPostProcessor.postProcessAfterInitialization(MeterRegistryPostProcessor.java:64) ~[spring-boot-actuator-autoconfigure-2.1.0.RC1.jar:2.1.0.RC1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:434) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1749) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] ... 63 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [io.micrometer.core.instrument.binder.logging.Log4j2Metrics]: Factory method 'log4j2Metrics' threw exception; nested exception is java.lang.ClassCastException: org.apache.logging.slf4j.SLF4JLoggerContext cannot be cast to org.apache.logging.log4j.core.LoggerContext at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:620) ~[spring-beans-5.1.1.RELEASE.jar:5.1.1.RELEASE] ... 85 common frames omitted Caused by: java.lang.ClassCastException: org.apache.logging.slf4j.SLF4JLoggerContext cannot be cast to org.apache.logging.log4j.core.LoggerContext at io.micrometer.core.instrument.binder.logging.Log4j2Metrics.&lt;init&gt;(Log4j2Metrics.java:56) ~[micrometer-core-1.1.0-rc.1.jar:1.1.0-rc.1] ```  ## Workaround  ```groovy  implementation('some-third-party-library') {   exclude group: 'org.apache.logging.log4j', module: 'log4j-core' }  ```  In this case, `org.apache.logging.log4j.LogManager#getContext(boolean)` returns not `org.apache.logging.log4j.core.LoggerContext` but `org.apache.logging.slf4j.SLF4JLoggerContext`. So `Log4j2Metrics` constructor crashed.</body>
		<created>2018-10-18 02:23:55</created>
		<closed>2018-10-18 09:36:10</closed>
	</bug>
	<bug>
		<id>14882</id>
		<title>Upgrade to 2.1.0.RC1 breaks message source with DevTools</title>
		<body>A Spring Boot app that has a message source in default location (i.e. `messages.properties` in `src/main/resources`) suddenly stopped resolving messages after upgrade to `2.1.0.RC1` when started from IDE.  I've tracked this to enabling of `spring.messages.reloadable` for DevTools that was done in #14699 - I believe this shouldn't have been done with the existing default for `spring.messages.basename` (i.e. `messages`), since [`ReloadableResourceBundleMessageSource`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/support/ReloadableResourceBundleMessageSource.html) won't resolve the supplied basename from the classpath unless explicitly prefixed with `classpath:`.  Having said that I've tried setting `spring.messages.basename` to `classpath:messages` but that didn't work either.</body>
		<created>2018-10-17 22:45:11</created>
		<closed>2018-10-29 16:33:02</closed>
	</bug>
	<bug>
		<id>14874</id>
		<title>Support primary beans with ApplicationContextAssert.getBean</title>
		<body>When having multiple beans defined with one marked with `@Primary` I'd expect that `ApplicationContextAssert#getBean(Class&lt;T&gt;)` to return the primary bean (like it is for application contexts). Instead it throws following error: ```  java.lang.AssertionError:  Expecting:  &lt;Started application [AnnotationConfigWebApplicationContext@5c909414 id = 'org.springframework.web.context.support.AnnotationConfigWebApplicationContext@5c909414', applicationName = '', beanDefinitionCount = 76]&gt; single bean of type:  &lt;de.codecentric.boot.admin.server.notify.Notifier&gt; but found:  &lt;["testNotifierPrimary", "testNotifier2"]&gt; ```</body>
		<created>2018-10-17 15:12:03</created>
		<closed>2018-10-25 04:34:46</closed>
	</bug>
	<bug>
		<id>14839</id>
		<title>WavefrontPropertiesConfigAdapter does not extend StepRegistryPropertiesConfigAdapter</title>
		<body>See https://github.com/micrometer-metrics/micrometer/issues/929.</body>
		<created>2018-10-15 20:49:11</created>
		<closed>2018-10-15 21:18:42</closed>
	</bug>
	<bug>
		<id>14780</id>
		<title>MeterFilters and MeterRegistryCustomizers are not ordered</title>
		<body>#11843 applies `MeterFilter` beans, but the user cannot control the order in which the `MeterFilter`s are applied, which may matter depending on what all the MeterFilters do.  For instance, I would like to turn on percentile histograms for my application's endpoints, but I want them off for all Actuator endpoints and unmapped requests because this adds ~70 time series for each endpoint per instance (and per status/exception!). My initial thought was to use the property `management.metrics.distribution.percentiles-histogram` like below.  ```yaml management:   metrics:     distribution:       percentiles-histogram:         http.server.requests: true ```  Then I would only need to make a `MeterFilter` to turn this off if the `uri` tag seemed like an Actuator request (since there isn't a more direct way to do this without #13435) or unmapped request:  ```java @Bean MeterFilter noActuatorHistogramsFilter() { return new MeterFilter() { @Override public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) { if ("http.server.requests".equals(id.getName()) &amp;&amp; id.getTag("uri") != null &amp;&amp; (id.getTag("uri").contains("actuator") || id.getTag("uri").equals("/**"))) { return DistributionStatisticConfig.builder() .percentilesHistogram(false) .build() .merge(config); } return config; } }; } ```  Looking at the `MetricsAutoConfiguration` class and seeing that the `PropertiesMeterFilter` has an `@Order(0)`, I thought my custom `MeterFilter` bean would be applied after it, but this was not the case.  https://github.com/spring-projects/spring-boot/blob/a170bfcc76cfb47b1c94481ccd35509eaa619b74/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java#L57-L61  The way I can work around this is to not use the property-based meter filter at all and just put all the logic I want in my own `MeterFilter`, but I think being able to control of the order of `MeterFilter` is a generally good idea regardless of this specific use-case.</body>
		<created>2018-10-11 02:40:48</created>
		<closed>2018-10-11 16:21:03</closed>
	</bug>
	<bug>
		<id>14773</id>
		<title>Endpoint IDs should support camelCase</title>
		<body>Regarding #11107 as discussed with @snicoll , an endpoint id with camel case (or pascal case) is rejected when a method is added to the Endpoint .  This was tested on Spring Boot 2.0.5 and 2.1.0.M4  e.g.:  ``` @Component @Endpoint(id = "camelCase") public class CamelCaseEndpoint {    @ReadOperation   public String hello() {     return "hello";   } } ```  ``` Description:  Configuration property name 'management.endpoint.camelCase.cache.time-to-live' is not valid:      Invalid characters: 'C'     Bean: jmxMBeanExporter     Reason: Canonical names should be kebab-case ('-' separated), lowercase alpha-numeric characters and must start with a letter  Action:  Modify 'management.endpoint.camelCase.cache.time-to-live' so that it conforms to the canonical names requirements. ```</body>
		<created>2018-10-10 13:24:30</created>
		<closed>2018-10-15 21:23:36</closed>
	</bug>
	<bug>
		<id>14743</id>
		<title>Invalid target type for logging.group</title>
		<body>It's a map of group name to a list of loggers, not a single logger.</body>
		<created>2018-10-09 16:16:26</created>
		<closed>2018-10-09 16:18:24</closed>
	</bug>
	<bug>
		<id>14723</id>
		<title>Cannot set enableLoggingRequestDetails via WebFluxConfigurer</title>
		<body>I tried adding:  ```java @Configuration static class WebConfig implements WebFluxConfigurer {  @Override public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) { configurer.defaultCodecs().enableLoggingRequestDetails(true); } } ``` However it gets overridden from the `CodecsAutoConfiguration` which uses the value from `HttpProperties#isLogRequestDetails()` but I have not set that property. Perhaps the `logRequestDetails` property should return `Boolean`, so it's possible to check if it was explicitly set, and if not then leave it to whatever it is already set to?  </body>
		<created>2018-10-08 19:57:39</created>
		<closed>2018-10-11 20:48:19</closed>
	</bug>
	<bug>
		<id>14714</id>
		<title>server.ssl.key-store-provider and server.ssl.trust-store-provider are ignored when configuring Netty</title>
		<body></body>
		<created>2018-10-08 10:29:13</created>
		<closed>2018-10-08 11:41:41</closed>
	</bug>
	<bug>
		<id>14713</id>
		<title>server.ssl.key-store-provider and server.ssl.trust-store-provider are ignored when configuring Undertow</title>
		<body></body>
		<created>2018-10-08 10:28:06</created>
		<closed>2018-10-08 11:20:59</closed>
	</bug>
	<bug>
		<id>14701</id>
		<title>When using WebFlux, having Jersey on the classpath without an embedded servlet container causes the web application type to be deduced as none</title>
		<body>since 2.0.4 if jersey is present on classpath application starts and stops immediately. </body>
		<created>2018-10-05 15:57:36</created>
		<closed>2018-10-06 12:02:04</closed>
	</bug>
	<bug>
		<id>14700</id>
		<title>Dependency management for Micrometer is incomplete</title>
		<body>In 2.0, we're missing dependency management for the following modules:  - `io.micrometer:micrometer-jersey2` - `io.micrometer:micrometer-spring-legacy` - `io.micrometer:micrometer-test`  Using `io.micrometer:micrometer-spring-legacy` does not make sense in the context of a Spring Boot app. We should add dependency management for the other two modules though.</body>
		<created>2018-10-05 14:11:18</created>
		<closed>2018-10-05 14:19:24</closed>
	</bug>
	<bug>
		<id>14692</id>
		<title>Dependency management for Johnzon is incomplete</title>
		<body></body>
		<created>2018-10-05 10:39:08</created>
		<closed>2018-10-05 11:11:54</closed>
	</bug>
	<bug>
		<id>14691</id>
		<title>Artemis starter has a transitive dependency on an alpha of the Geronimo variant of the JSON API</title>
		<body>2.0, which uses Artemis 2.4, doesn't have the same problem. It looks like a regression that was introduced when we upgraded to Artemis 2.6.</body>
		<created>2018-10-05 10:32:06</created>
		<closed>2018-10-05 11:59:58</closed>
	</bug>
	<bug>
		<id>14685</id>
		<title>Couchbase health check fails due to timeout</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  Spring boot -  2.0.5.RELEASE  I see in release notes a similar issues was supposed to be resolved. However, I am seeing this quite frequently(every 30min-60min) in logs, service become unhealthy and gets back healthy in about 30sec or so.  ``` 2018-10-04 12:08:01.182  WARN 1 --- [io-8080-exec-15] o.s.b.a.c.CouchbaseHealthIndicator       : Couchbase health check failed --   | java.util.concurrent.TimeoutException: null   | at com.couchbase.client.java.util.Blocking.blockForSingle(Blocking.java:77)   | at com.couchbase.client.java.bucket.DefaultBucketManager.info(DefaultBucketManager.java:127)   | at org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator.getBucketInfo(CouchbaseHealthIndicator.java:84)   | at org.springframework.boot.actuate.couchbase.CouchbaseHealthIndicator.doHealthCheck(CouchbaseHealthIndicator.java:75)   | at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:84)   | at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:68)   | at org.springframework.boot.actuate.health.HealthEndpointWebExtension.getHealth(HealthEndpointWebExtension.java:50)   | at sun.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)   | at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   | at java.lang.reflect.Method.invoke(Method.java:498)   | at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:223)   | at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:76)   | at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:61)   | at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$ServletWebOperationAdapter.handle(AbstractWebMvcEndpointHandlerMapping.java:274)   | at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(AbstractWebMvcEndpointHandlerMapping.java:330)   | at sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)   | at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   | at java.lang.reflect.Method.invoke(Method.java:498)   | at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)   | at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)   | at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)   | at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:891)   | at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)   | at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)   | at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)   | at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)   | at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)   | at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866)   | at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)   | at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)   | at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:155)   | at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:123)   | at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)   | at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)   | at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)   | at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)   | at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)   | at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)   | at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)   | at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)   | at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)   | at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)   | at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   | at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800)   | at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)   | at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:806)   | at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498)   | at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)   | at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)   | at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)   | at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   | at java.lang.Thread.run(Thread.java:748) ``` </body>
		<created>2018-10-04 17:33:03</created>
		<closed>2018-10-15 12:59:23</closed>
	</bug>
	<bug>
		<id>14675</id>
		<title>An application with the JSON-B API and no implementation on the classpath fails to start</title>
		<body>``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jsonb' defined in class path resource [org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.json.bind.Jsonb]: Factory method 'jsonb' threw exception; nested exception is javax.json.bind.JsonbException: JSON Binding provider org.eclipse.yasson.JsonBindingProvider not found at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:625) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1287) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:848) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:865) ~[spring-context-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:548) ~[spring-context-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:797) [spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:421) [spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:340) [spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1291) [spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1279) [spring-boot-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at sample.freemarker.SampleWebFreeMarkerApplication.main(SampleWebFreeMarkerApplication.java:26) [classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181] at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:558) [spring-boot-maven-plugin-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.json.bind.Jsonb]: Factory method 'jsonb' threw exception; nested exception is javax.json.bind.JsonbException: JSON Binding provider org.eclipse.yasson.JsonBindingProvider not found at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:620) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] ... 25 common frames omitted Caused by: javax.json.bind.JsonbException: JSON Binding provider org.eclipse.yasson.JsonBindingProvider not found at javax.json.bind.spi.JsonbProvider.provider(JsonbProvider.java:120) ~[javax.json.bind-api-1.0.jar:1.0] at javax.json.bind.JsonbBuilder.create(JsonbBuilder.java:108) ~[javax.json.bind-api-1.0.jar:1.0] at org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration.jsonb(JsonbAutoConfiguration.java:41) ~[spring-boot-autoconfigure-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration$$EnhancerBySpringCGLIB$$65ca376d.CGLIB$jsonb$0(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration$$EnhancerBySpringCGLIB$$65ca376d$$FastClassBySpringCGLIB$$fc7bd83b.invoke(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.1.0.RELEASE.jar:5.1.0.RELEASE] at org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration$$EnhancerBySpringCGLIB$$65ca376d.jsonb(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.0.BUILD-SNAPSHOT.jar:2.1.0.BUILD-SNAPSHOT] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.0.RELEASE.jar:5.1.0.RELEASE] ... 26 common frames omitted Caused by: java.lang.ClassNotFoundException: org.eclipse.yasson.JsonBindingProvider at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_181] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_181] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_181] at java.lang.Class.forName0(Native Method) ~[na:1.8.0_181] at java.lang.Class.forName(Class.java:264) ~[na:1.8.0_181] at javax.json.bind.spi.JsonbProvider.provider(JsonbProvider.java:117) ~[javax.json.bind-api-1.0.jar:1.0] ... 38 common frames omitted ```  It's trying to load `org.eclipse.yasson.JsonBindingProvider` as that's the hard-coded default provider that's used by `JsonbProvider` when the `ServiceLoader` mechanism doesn't provide one.   We might be able to do something similar to what we've done for Bean Validation with a conditional on resource:  ``` @ConditionalOnResource(resources = "classpath:META-INF/services/javax.json.bind.spi.JsonbProvider") ```  We'll need something more complex if Yasson relies on being the default provider and doesn't have a `META-INF/services` file.</body>
		<created>2018-10-03 13:29:44</created>
		<closed>2018-10-05 12:07:02</closed>
	</bug>
	<bug>
		<id>14666</id>
		<title>ReactiveWebServerApplicationContext.getHttpHandler() causes early bean initialization</title>
		<body>The config is like this:  ```java @EnableIntegration @SpringBootApplication public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }      @Bean     public DirectChannel channel1() {         return new DirectChannel();     }      @Bean     public DirectChannel channel2() {         return new DirectChannel();     }      @Bean // remove this bean to fix Transformer creation     public JavaTimeModule timeModule() {         return new JavaTimeModule();     }      /**      * This method depends on object mapper, which is not yet configured (with module above) when      * Spring DI is trying to instantiate transformer.      *      * Useful debug points:      * {@link org.springframework.beans.factory.support.DefaultListableBeanFactory#getBeansOfType(Class, boolean, boolean)}      * {@link org.springframework.integration.config.annotation.TransformerAnnotationPostProcessor#createHandler(Object, Method, List)}      *      */     @Bean     @Transformer(inputChannel = "channel1", outputChannel = "channel2")     public AbstractPayloadTransformer transformer(ObjectMapper dependency) {         return new AbstractPayloadTransformer&lt;Object, Object&gt;() {             @Override             protected Object transformPayload(Object payload) {                 return payload;             }         };     } } ```  But Spring Integration is not relevant here at all.  The main point that we have some Jackson `Module` bean definition and other one depends on the `ObjectMapper` auto-configured in the mentioned `JacksonAutoConfiguration`.  The `JacksonAutoConfiguration` has the code like this:  ```java @Bean @ConditionalOnMissingBean public Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(       List&lt;Jackson2ObjectMapperBuilderCustomizer&gt; customizers) {    Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();    builder.applicationContext(this.applicationContext);    customize(builder, customizers);    return builder; } ```  That `customize()` calls a  ```java Collection&lt;Module&gt; moduleBeans = getBeans(this.applicationContext,       Module.class); ``` eventually.  This is really inappropriate to call `getBeansOfType()` from the other bean definition: it's too early to instantiate all the beans in the application context.  I wonder why `ObjectProvider&lt;Module&gt;` is not used as a dependency for that `jacksonObjectMapperBuilder` bean definition...  For more info see https://github.com/spring-projects/spring-integration/issues/2565</body>
		<created>2018-10-02 22:23:33</created>
		<closed>2018-10-04 15:00:49</closed>
	</bug>
	<bug>
		<id>14651</id>
		<title>Publication of DataSourceSchemaCreatedEvent is more prone to creating a cycle than it was in 2.0</title>
		<body>Spring Boot 2.1.M3 *Issue* We found a `BeanCreationException` using Spring Boot 2.1 while creating a Spring Cloud Task application that uses JPA.  In our example a user has marked a method (which executes a `JPARepository.save`) with the `@BeforeTask` annotation that allows Spring Cloud Task to call this method prior to `ApplicationRunner`.  Specifically the `BeanCreationException` occurs when Spring Cloud Task `TaskLifecycleListener` (`ApplicationLifecycleListener` impl) tries to resolve the `Component` that contains the `JPARepository` Autowire.  *Discussion* Had a discussion with Andy Wilkinson and he validated the case.  *To Reproduce*  * Pull from my local repo this branch of Spring Cloud Task: https://github.com/cppwfs/spring-cloud-task/tree/TASK-439A * Build `mvn clean install`.   The JPA sample test will fail.  &lt;Build time about 2 min 10 sec&gt;</body>
		<created>2018-10-01 17:30:09</created>
		<closed>2018-10-03 16:30:49</closed>
	</bug>
	<bug>
		<id>14646</id>
		<title>Actuator's EndpointRequest doesn't consider server.servlet.path</title>
		<body>Same issue #12934 was fixed in spring-boot 2.0.2 and it worked until spring-boot 2.0.5 Sample is the same as @candrews provided in his [comment](https://github.com/spring-projects/spring-boot/issues/12934#issuecomment-383201943).</body>
		<created>2018-10-01 09:25:32</created>
		<closed>2018-10-16 12:33:27</closed>
	</bug>
	<bug>
		<id>14636</id>
		<title>@AutoConfigureMockMvc does not honor FilterRegistrationBean.enabled=false</title>
		<body>I think the FilterRegistrationBean.enabled flag should be use at the [org.springframework.boot.test.autoconfigure.web.servlet.SpringBootMockMvcBuilderCustomizer#addFilters] </body>
		<created>2018-09-29 02:28:25</created>
		<closed>2018-10-01 13:03:02</closed>
	</bug>
	<bug>
		<id>14589</id>
		<title>SpringApplication.setApplicationContextClass does not correctly deduce REACTIVE type</title>
		<body>This appears not to cause any problems with existing applications, but it seems inconsistent and results in a `SpringApplication` having `webApplicationType=NONE` in an integration test (per the logic in `setApplicationContextClass()` which is called by the test context loader).</body>
		<created>2018-09-24 09:59:57</created>
		<closed>2018-10-05 14:43:52</closed>
	</bug>
	<bug>
		<id>14550</id>
		<title>WebRequestTraceFilter calls methods on the request and response to retrieve information that then isn't included in the trace</title>
		<body>`org.springframework.boot.actuate.trace.WebRequestTraceFilter.getTrace()` is calling a number of methods on the request even when they are not going to be included in the trace. The issue is that the `add` method is passed an `Include` and the data to include. This function calls that generate the data are called even if `add` never actually adds anything to the trace.  This came up during performance testing of an application at loads of about 500 requests per second. In particular, the call to `getPathTranslated()` was showing up in profiles as taking 5% of the overall execution time. On Linux with openjdk, this method makes native filesystem calls which are relatively slow. This is especially bad since `DEFAULT_INCLUDES` does not include this data and it's never put in the trace. If I remove this one call, I see between a 5% and 50% improvement in throughput depending on total throughput and concurrency.  The add method should be reworked so that the data is not generated until it is added to the trace.</body>
		<created>2018-09-20 14:01:23</created>
		<closed>2018-10-01 13:49:18</closed>
	</bug>
	<bug>
		<id>14482</id>
		<title>CLI ExtendedGroovyClassLoader does not filter resources</title>
		<body>The `ExtendedGroovyClassLoader` used in the CLI will filter out classes but it doesn't filter resources correctly. This means we can get failures because a non-filtered `spring.factories` file is loaded that refers to a class that is later filtered out.</body>
		<created>2018-09-16 00:01:22</created>
		<closed>2018-09-16 01:04:24</closed>
	</bug>
	<bug>
		<id>14479</id>
		<title>Environment variable that does not follow guidelines for use of _ is still successfully bound if another property source contains a property that is bound to the same target</title>
		<body>We have custom properties, built like this:  ``` @ConfigurationProperties("yona") @Configuration public class YonaProperties { @NestedConfigurationProperty private final AnalysisServiceProperties analysisService = new AnalysisServiceProperties(); ```  Properties would be set on ``AnalysisServiceProperties`` in this way: ``` yona.analysisService.someProperty=someValue ```  Or through an environment variable, like this: ``` YONA_ANALYSIS_SERVICE_SOME_PROPERTY=someValue ```  With Spring Boot 1.5, it was OK to not have any ``yona.analysisService.xxx`` property in ``application.properties`` and still set one through an environment variable like ``YONA_ANALYSIS_SERVICE_XXX``.   With Spring Boot 2.0.4, that doesn't work anymore. At least one ``yona.analysisService.xxx`` must exist in ``application.properties``. It's OK to set ``xxx`` in ``application.properties`` and ``yyy`` through the environment, but there needs to be at least one.</body>
		<created>2018-09-15 09:28:56</created>
		<closed>2020-05-06 18:37:22</closed>
	</bug>
	<bug>
		<id>14448</id>
		<title>Tomcat's failCtxIfServletStartFails should not be ignored</title>
		<body>Using the latest version of Spring Boot (2.0.5), registering a servlet that fails to initialize does not cause the whole context to fail. This is by Tomcat's design, which apparently stems from the servlet spec (as seen in [StandardContext](https://github.com/apache/tomcat85/blob/trunk/java/org/apache/catalina/core/StandardContext.java#L4982) source). Tomcat, however, exposes a context configuration that allows one to specify that if some part of the application fails to startup, the whole application should fail. The property is called `failCtxIfServletStartFails`, and as [documented](https://tomcat.apache.org/tomcat-8.5-doc/config/context.html):  &gt; Set to true to have the context fail its startup if any servlet that has load-on-startup &gt;=0 fails its own startup. &gt;  &gt; If not specified, the attribute of the same name in the parent Host configuration is used if specified. Otherwise the default value of false is used.`  Currently, it would appear that Spring Boot does not honor this property, even when applied to the context through a `org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#addContextCustomizers`.  Tomcat's own `org.apache.catalina.core.StandardContext#startInternal` uses the result of `org.apache.catalina.core.StandardContext#loadOnStartup` to determine if the whole context should fail.  Spring Boot, however does not call `startInternal` on it's implementation, calling instead `org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext#deferredLoadOnStartup`. This method does not process the [boolean result](https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/core/StandardContext.html#loadOnStartup(org.apache.catalina.Container[])) of `org.apache.catalina.core.StandardContext#loadOnStartup`:  &gt; public boolean loadOnStartup(Container[] children) &gt; Load and initialize all servlets marked "load on startup" in the web application deployment descriptor. &gt; **Parameters**: &gt;     children - Array of wrappers for all currently defined servlets (including those not declared load on startup) &gt; **Returns**: &gt;     true if load on startup was considered successful  It would be interesting to have Spring Boot honor this context configuration, and perhaps expose it under the `server.tomcat` property namespace.  I created a [sample project](https://github.com/jpmsilva/servlet-failure) demonstrating the scenario.  If you feel that this is desirable, I may be able to contribute a PR for this. Otherwise, please feel free to close this.</body>
		<created>2018-09-12 14:17:52</created>
		<closed>2018-10-12 03:20:42</closed>
	</bug>
	<bug>
		<id>14444</id>
		<title>HTTP/2 on Jetty: ALPNServerConnectionFactory default protocol set to "h2"</title>
		<body>When using an embedded Jetty server, configured for HTTP/2 (using Conscrypt), the ALPNServerConnectionFactory is configured to use "h2" as it's default protocol. This has the consequence, as I understand it and observe from testing, that when negotiating with a client that does not support ALPN, it will default to using the HTTP/2 protocol. In my experience, clients that do not support ALPN are unlikely to support HTTP/2, at least the clients that I have tested with. I suggest that the default protocol should be set to "HTTP/1.1", or be made configurable.  I am using Spring Boot version 2.0.4, with the dependency versions defined in the spring-boot-starter-parent pom ```xml         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.jetty.http2&lt;/groupId&gt;             &lt;artifactId&gt;http2-server&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;             &lt;artifactId&gt;jetty-alpn-conscrypt-server&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt; ```  My workaround is to set the default protocol to HTTP/1.1 using a JettyServerCustomizer ```java  /**      * Spring Boot configures ALPN with HTTP/2 as default protocol      * Clients that do not support ALPN are unlikely to support HTTP/2.      * HTTP/1.1 is a better default.      *      * @see org.springframework.boot.web.embedded.jetty.SslServerCustomizer      */     @Configuration     @ConditionalOnClass(NegotiatingServerConnectionFactory.class)    class JettyAlpnFallbackModifyingWebServerFactoryCustomizer implements WebServerFactoryCustomizer&lt;ConfigurableJettyWebServerFactory&gt; {          @Override         public void customize(ConfigurableJettyWebServerFactory factory) {             factory.addServerCustomizers((JettyServerCustomizer) server -&gt; Arrays.stream(server.getConnectors())                     .flatMap(connector -&gt; connector.getConnectionFactories().stream())                     .flatMap(ofType(NegotiatingServerConnectionFactory.class))                     .forEach(negotiatingServerConnectionFactory -&gt; negotiatingServerConnectionFactory.setDefaultProtocol(HTTP_1_1.asString())));         }          @SuppressWarnings("SameParameterValue")         private static &lt;F, T&gt; Function&lt;F, Stream&lt;T&gt;&gt; ofType(Class&lt;T&gt; type) {             return value -&gt; type.isInstance(value) ? Stream.of(type.cast(value)) : Stream.empty();         }     } ``` (note my workaround is not a suggested solution and is probably not generic enough to support all use cases)</body>
		<created>2018-09-12 07:31:41</created>
		<closed>2018-10-13 15:56:54</closed>
	</bug>
	<bug>
		<id>14340</id>
		<title>Spring Boot 2.0.4: Spring Data Web configuration throws ClassNotFoundException when Jackson is not on the classpath</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  🙅 "Please DO NOT Raise an Issue" Cases - Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag. - Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly. - Managed Dependency Upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. BUT pull requests for upgrades that are more involved than just a version property change are still most welcome. - With an Immediate Pull Request An issue will be closed as a duplicate of the immediate pull request, so you don't have to raise an issue if you plan to create a pull request immediately.  🐞 Bug report Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🎁 Enhancement Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  I am using Spring Boot 2.0.4 and have a requirement that Jackson cannot be included in a project that I am working on.  I am using Gson as my JSON library.  To enable it, I have done the following:  - Added gson as a dependency to my project ```         &lt;dependency&gt;             &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;             &lt;artifactId&gt;gson&lt;/artifactId&gt;         &lt;/dependency&gt; ``` - Set the following property ```spring.http.converters.preferred-json-mapper=gson```  - Excluded the spring-boot-starter-json dependency to prevent adding Jackson to the classpath ```         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;                 &lt;/exclusion&gt;                 &lt;!--Exclude Jackson--&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt; ```  When I start the application I get the following error:  ``` java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration.pageableCustomizer at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:180) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:141) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:117) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:328) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:233) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:271) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:91) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:694) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532) ~[spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:398) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:330) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1258) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1246) [spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE] at com.example.app.Application.main(Application.java:17) [classes/:?] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161] at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161] at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.0.4.RELEASE.jar:2.0.4.RELEASE] Caused by: java.lang.IllegalStateException: Failed to introspect Class [org.springframework.data.web.config.SpringDataWebConfiguration] from ClassLoader [sun.misc.Launcher$AppClassLoader@18b4aac2] at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:659) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:556) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:541) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:599) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:718) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:659) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:627) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1489) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1012) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:180) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:160) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanType(BeanTypeRegistry.java:153) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.updateTypesIfNecessary(BeanTypeRegistry.java:215) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:115) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:265) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:254) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:196) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:116) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] ... 22 more Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/ObjectMapper at java.lang.Class.getDeclaredMethods0(Native Method) ~[?:1.8.0_161] at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[?:1.8.0_161] at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[?:1.8.0_161] at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:641) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:556) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:541) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:599) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:718) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:659) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:627) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1489) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1012) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:180) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:160) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanType(BeanTypeRegistry.java:153) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.updateTypesIfNecessary(BeanTypeRegistry.java:215) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:115) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:265) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:254) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:196) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:116) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] ... 22 more Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.ObjectMapper at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[?:1.8.0_161] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[?:1.8.0_161] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338) ~[?:1.8.0_161] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:1.8.0_161] at java.lang.Class.getDeclaredMethods0(Native Method) ~[?:1.8.0_161] at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[?:1.8.0_161] at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[?:1.8.0_161] at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:641) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:556) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:541) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:599) ~[spring-core-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:718) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:659) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:627) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1489) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1012) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:180) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:160) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanType(BeanTypeRegistry.java:153) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.updateTypesIfNecessary(BeanTypeRegistry.java:215) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:115) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:265) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:254) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:196) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:116) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-2.0.4.RELEASE.jar:2.0.4.RELEASE] ... 22 more ```  I can workaround the issue if I exclude SpringDataWebAutoConfiguration.  ``` @SpringBootApplication         (exclude = {         //Excluding this as it requires Jackson         SpringDataWebAutoConfiguration.class }) @EnableTransactionManagement public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }  } ```</body>
		<created>2018-09-06 19:12:47</created>
		<closed>2018-09-07 08:00:11</closed>
	</bug>
	<bug>
		<id>14310</id>
		<title>Unable to override org.springframework logging levels since 2.1.0.M2</title>
		<body>Since 2.1.0M2, overriding Spring logging levels in dev mode using `logback-spring.xml` doesn't work. Attaching a project generated with Initializr, with `logback-spring.xml` file (that lowers spring level to WARN) added in resources [demo (8).zip](https://github.com/spring-projects/spring-boot/files/2352593/demo.8.zip). To reproduce: - run `gradlew bootRun` - observe log messages - revert boot version to 2.1.0.M1 in `build.gradle` - run `gradlew bootRun` again and watch spring related log entries disappear  On a side note, I'm not sure if the decision to include these DEBUG logs by default, even in dev mode, was well thought. The result is a lot of unhelpful information in the log. Frankly I would rather leave the DEBUG off by default, as 99% percent of the time I don't need these logs while developing.  Also reported [here](https://stackoverflow.com/questions/51243923/logback-logging-levels-are-ignored-spring-boot-2-1-0)</body>
		<created>2018-09-05 11:51:37</created>
		<closed>2018-09-12 19:02:13</closed>
	</bug>
	<bug>
		<id>14308</id>
		<title>Harmonize JAXB version in dependency management</title>
		<body>To support Java11, we've added dependency management for `jaxb-runtime` (#14028) but its version doesn't match the version of the API. Those should be aligned.</body>
		<created>2018-09-05 08:31:58</created>
		<closed>2018-09-05 12:18:27</closed>
	</bug>
	<bug>
		<id>14301</id>
		<title>@WebMvcTest does not include applicationTaskExecutor</title>
		<body>Hi, this is a `first-timers-only` issue. This means we've worked to make it more legible to folks who either haven't contributed to our codebase before, or even folks who haven't contributed to open source before.  If that's you, we're interested in helping you take the first step and can answer questions and help you out as you do. Note that we're especially interested in contributions from people from groups underrepresented in free and open source software!  If you have contributed before, consider leaving this one for someone new, and looking through our general [`ideal-for-contribution` issues](https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution). Thanks!  ## Problem When an MVC controller defines an async result (for instance a `Mono` or `Flux` from Project Reactor) it has to be processed in a background thread and Spring MVC couldn't have an opinion about the pool settings to use so it creates a `SimpleAsyncTaskExecutor` that's not suitable for production use. In such setup, the following warning is emitted:  ``` An Executor is required to handle java.util.concurrent.Callable return values. Please, configure a TaskExecutor in the MVC config under "async support". The SimpleAsyncTaskExecutor currently in use is not suitable under load. ```  An earlier milestone of Spring Boot 2.1 introduced support for an `applicationTaskExecutor` bean and a general `TaskExecutorAutoConfiguration`. When such bean is present, the MVC configuration [is automatically configured to use it](https://github.com/spring-projects/spring-boot/blob/14337a8c96914dafec3d2b52f284031f1eade0fd/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java#L217-L224). So far so good except that if you write a test with such setup and `@WebMvcTest` the warning is emitted again. The problem is that `TaskExecutorAutoConfiguration` is not part of the auto-configurations contributed by `@WebMvcTest` and therefore the `applicationTaskExecutor` bean is not created.   ## Solution  We should write a test that uses `@WebMvcTest` and verifies the MVC configuration has been updated properly. There is [an existing test](https://github.com/spring-projects/spring-boot/blob/14337a8c96914dafec3d2b52f284031f1eade0fd/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java#L480-L492) that could be used for inspiration. Another solution would be to update the `ExampleController` so that a method returns a `Mono&lt;String&gt;` rather than `String` and check with an `OutputCapture` that the warning is not emitted.  Either way, once the test fails, we can fix the code by adding `TaskExecutorAutoConfiguration` to `@WebMvcTest`. MVC is auto-configured via `@AutoConfigureWebMvc` and the list of auto-configurations are in `META-INF/spring.factories` under the `org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc` key. When you add the extra entry, pay attention that they ordered alphabetically.  ## Steps to Fix    - [x] Claim this issue with a comment here, below, and ask any clarifying questions you need - [x] Set up a repository locally following the [Contributing Guidelines](https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc) - [x] Try to fix the issue following the steps above - [x] Commit your changes and start a pull request.</body>
		<created>2018-09-04 18:26:47</created>
		<closed>2018-09-11 10:24:34</closed>
	</bug>
	<bug>
		<id>14294</id>
		<title>Could not bind number to DataSize</title>
		<body>We're missing a `NumberToDataSize` converter as YAML parses the String to a number. Right now, we can't use `DataSize` in YAML for that reason.</body>
		<created>2018-09-04 08:46:57</created>
		<closed>2018-09-04 09:05:06</closed>
	</bug>
	<bug>
		<id>14292</id>
		<title>Improve endpoint mapping debug logging</title>
		<body>I have an app that exports metrics to Prometheus with `--debug`. Prometheus calls `/actuator/prometheus` every 5 sec which leads to the following  ``` 2018-09-03 17:47:49.995 DEBUG 8241 --- [nio-8081-exec-2] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:47:49.996 DEBUG 8241 --- [nio-8081-exec-2] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:47:54.995 DEBUG 8241 --- [nio-8081-exec-3] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:47:54.996 DEBUG 8241 --- [nio-8081-exec-3] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:47:59.996 DEBUG 8241 --- [nio-8081-exec-5] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:47:59.997 DEBUG 8241 --- [nio-8081-exec-5] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:04.995 DEBUG 8241 --- [nio-8081-exec-4] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:04.996 DEBUG 8241 --- [nio-8081-exec-4] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:09.996 DEBUG 8241 --- [nio-8081-exec-6] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:09.997 DEBUG 8241 --- [nio-8081-exec-6] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:14.995 DEBUG 8241 --- [nio-8081-exec-7] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:14.996 DEBUG 8241 --- [nio-8081-exec-7] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:19.995 DEBUG 8241 --- [nio-8081-exec-8] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:19.996 DEBUG 8241 --- [nio-8081-exec-8] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:24.996 DEBUG 8241 --- [nio-8081-exec-9] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:24.996 DEBUG 8241 --- [nio-8081-exec-9] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:29.995 DEBUG 8241 --- [io-8081-exec-10] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:29.996 DEBUG 8241 --- [io-8081-exec-10] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2018-09-03 17:48:34.995 DEBUG 8241 --- [nio-8081-exec-1] s.b.a.e.w.s.WebMvcEndpointHandlerMapping : Mapped to public java.lang.Object org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(javax.servlet.http.HttpServletRequest,java.util.Map&lt;java.lang.String, java.lang.String&gt;) ```  To complement with recent improvements in logging, I think we should attempt to improve this log if we can.</body>
		<created>2018-09-03 15:51:04</created>
		<closed>2018-11-14 13:59:21</closed>
	</bug>
	<bug>
		<id>14269</id>
		<title>WebClientMetricsAutoConfiguration relies on ResTemplateMetricsAutoConfiguration</title>
		<body>Right now, `WebClientMetricsAutoConfiguration` relies on a `Filter` created by `RestTemplateMetricsAutoConfiguration`.  `RestTemplate` is always present when `WebClient` is present (as the former is in `spring-web` and the latter in `spring-webflux` that as a compile dependency on `spring-web`). However, it makes a bit hard to figure out what the scope of the filter is so it would be better to have a first class concept for this.  Looking at `WebClientMetricsAutoConfiguration` it probably should be in the `client` package, which would allow to have a single auto-configuration for both use cases.  Also, since the introduction of  `WebClient` metrics, the message is wrong as [it refers to `RestTemplate`](https://github.com/spring-projects/spring-boot/blob/2fc557a5a90d32fb2cf6ebe2491b031a72507dd3/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsAutoConfiguration.java#L81) which kinda proves the point the scope is currently hard to track.</body>
		<created>2018-08-31 12:00:21</created>
		<closed>2018-08-31 12:45:55</closed>
	</bug>
	<bug>
		<id>14264</id>
		<title>EmbeddedWebServerFactoryCustomizerAutoConfiguration is missing conditions</title>
		<body>We should add basic class condition and at least a check on the application type there.</body>
		<created>2018-08-31 07:31:21</created>
		<closed>2018-08-31 09:35:29</closed>
	</bug>
	<bug>
		<id>14263</id>
		<title>ReactiveSecurityAutoConfiguration is missing conditions</title>
		<body>It only does an import of another class that has some conditions on them. That looks weird to me. It should at the very least check Spring Security and Project reactor</body>
		<created>2018-08-31 07:30:23</created>
		<closed>2018-09-07 18:40:51</closed>
	</bug>
	<bug>
		<id>14260</id>
		<title>MockReset is extremely slow for large project in 1.5.x branch</title>
		<body>Spring Boot 1.5.15  The line:  https://github.com/spring-projects/spring-boot/blob/bd482d70631ddb69d8835cdb9b6c076f727a648f/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java#L106  ...checks for the presence of `Mockito` on every call. This is executed before AND after each test for every bean in the context.  In spring-boot 2.0 this has already been refactored to check once in the `ResetMocksTestExecutionListener` and store the result in a static variable. It would be nice if this could be back ported to 1.5.x as well.  Our project has about 1500 beans and we run around 8,300 tests. This results in over 12 *million* calls to this method. Stubbing out the `ResetMocksTestExecutionListener` improves performance by about 10x.</body>
		<created>2018-08-30 21:10:16</created>
		<closed>2018-09-05 20:43:42</closed>
	</bug>
	<bug>
		<id>14243</id>
		<title>Quartz Scheduler name not set by the spring.quartz.properties.org.quartz.scheduler.instanceName property</title>
		<body>## Summary:  The spring boot QuartzProperties configuration property: `spring.quartz.properties.org.quartz.scheduler.instanceName` Is not picked up when  the quartz factory is created resulting in the quartz scheduler having the beanName as the scheduler name.   ##  Possible Fix  Perhaps QuartzAutoConfiguration could be enhanced to look for the StdSchedulerFactory properties utilized by the SchedulerFactoryBean initSchedulerFactory() method.    OR  QuartzProperties could simply add a property `schedularName` that would be applied to the new factory rather then relying on the properties.   ## Workaround  Implement `SchedulerFactoryBeanCustomizer` and set the name via the `customize()` method.       ## More Details  Issue has been raised in:  https://jira.spring.io/browse/SPR-16884</body>
		<created>2018-08-29 22:06:12</created>
		<closed>2018-09-20 09:28:45</closed>
	</bug>
	<bug>
		<id>14205</id>
		<title>Remote devtools lose reference to component after making a change</title>
		<body>Spring Boot version: 2.0.4.RELEASE JDK: 8.0_151  **Video**: https://youtu.be/dBkZ7BY9k4Y  **Prepare stage**: - Package a spring boot application to JAR - Run JAR with remote debug - Run RemoteSpringApplication  **Steps**: - Create new component - Compile class - Change something inside the new component - Compile again  **Expected**: Component was load with changes **Actual**: Component was load in first time but not int second time</body>
		<created>2018-08-26 10:53:02</created>
		<closed>2018-09-19 18:53:16</closed>
	</bug>
	<bug>
		<id>14175</id>
		<title>Auto-configuration of Spring Integration's JDBC support does not use the auto-configured DataSource</title>
		<body>With Boot 2.0.4:  ```xml &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-integration&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt; &lt;artifactId&gt;spring-integration-jdbc&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; ``` ```java @SpringBootApplication public class Igh25431Application {  public static void main(String[] args) { SpringApplication.run(Igh25431Application.class, args); }  @Bean public JdbcMessageStore store(DataSource dataSource) { return new JdbcMessageStore(dataSource); }  } ``` ```properties spring.datasource.url=jdbc:mysql://localhost/integration spring.datasource.username=root #spring.datasource.password=dbpass spring.datasource.driver-class-name=com.mysql.jdbc.Driver  spring.integration.jdbc.initialize-schema=always  logging.level.root=debug ``` ``` 2018-08-22 14:12:42.704 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'store' 2018-08-22 14:12:42.704 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating instance of bean 'store' 2018-08-22 14:12:42.704 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor' 2018-08-22 14:12:42.704 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'igh25431Application' 2018-08-22 14:12:42.705 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating shared instance of singleton bean 'dataSource' 2018-08-22 14:12:42.705 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Creating instance of bean 'dataSource' ... 2018-08-22 14:12:42.744 DEBUG 64743 --- [           main] com.zaxxer.hikari.HikariConfig           : Driver class com.mysql.jdbc.Driver found in Thread context class loader sun.misc.Launcher$AppClassLoader@764c12b6 ... 2018-08-22 14:12:42.765 DEBUG 64743 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Finished creating instance of bean 'dataSource' ``` ```    IntegrationAutoConfiguration.IntegrationJdbcConfiguration:       Did not match:          - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)       Matched:          - @ConditionalOnClass found required class 'org.springframework.integration.jdbc.store.JdbcMessageStore'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition) ```  Clearly we have a `DataSource` but auto config doesn't find it for some reason.</body>
		<created>2018-08-22 18:27:55</created>
		<closed>2018-08-23 08:28:18</closed>
	</bug>
	<bug>
		<id>14161</id>
		<title>NullPointerException in EndpointServerWebExchangeMatcher.matches</title>
		<body>We're getting NPE in `EndpointServerWebExchangeMatcher.matches` when starting our service (Spring Boot 2.0.4)  ``` java.lang.NullPointerException: null at org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest$EndpointServerWebExchangeMatcher.matches(EndpointRequest.java:238) at org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcher.matches(ApplicationContextServerWebExchangeMatcher.java:57) at org.springframework.security.web.server.MatcherSecurityWebFilterChain.matches(MatcherSecurityWebFilterChain.java:48) at org.springframework.security.web.server.WebFilterChainProxy.lambda$filter$0(WebFilterChainProxy.java:50) at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:242) at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:131) at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onNext(ScopePassingSpanSubscriber.java:81) at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244) at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202) at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.request(ScopePassingSpanSubscriber.java:69) at reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:190) at org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onSubscribe(ScopePassingSpanSubscriber.java:63) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140) at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64) at reactor.core.publisher.FluxLiftFuseable.subscribe(FluxLiftFuseable.java:70) at reactor.core.publisher.FluxFilterWhen.subscribe(FluxFilterWhen.java:68) at reactor.core.publisher.FluxLift.subscribe(FluxLift.java:46) at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoPeek.subscribe(MonoPeek.java:71) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) at reactor.core.publisher.MonoLift.subscribe(MonoLift.java:46) at reactor.core.publisher.Mono.subscribe(Mono.java:3080) at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172) at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) at reactor.core.publisher.MonoLiftFuseable.subscribe(MonoLiftFuseable.java:56) at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380) at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:398) at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:464) at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) at java.lang.Thread.run(Thread.java:748) ``` </body>
		<created>2018-08-21 12:13:12</created>
		<closed>2018-09-05 00:10:32</closed>
	</bug>
	<bug>
		<id>14158</id>
		<title>installBootDist creates executables with wrong permission</title>
		<body>With Gradle `application` plugin, `installBootDist` task is available to install distribution files.  When performing `installBootDist`, I observed the installed executables have wrong permission: ``` $ ./gradlew clean installBootDist  BUILD SUCCESSFUL in 1s 5 actionable tasks: 5 executed $ ls -l build/install/initial-boot/bin/ total 24 -r-x-wSr-t  1 (xxx)  (xxx)  5207  8 21 19:19 initial -r-x-wSr-t  1 (xxx)  (xxx)  2178  8 21 19:19 initial.bat $ gstat -c "%a %n" ./build/install/initial-boot/bin/initial* 3525 ./build/install/initial-boot/bin/initial 3525 ./build/install/initial-boot/bin/initial.bat ``` Tested on mac.  The file permission is set to `-r-x-wSr-t` (0x755 in hex is 3525 in octal). It should be like `-rwxr-xr-x` (0755, octal).  https://github.com/spring-projects/spring-boot/blob/v2.0.4.RELEASE/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java#L83  ## Sample project  https://github.com/occho/gs-spring-boot/tree/filemode-bug-with-application-plugin/initial ## Version tested  spring-boot-gradle-plugin: 2.0.4.RELEASE</body>
		<created>2018-08-21 10:23:56</created>
		<closed>2018-10-04 14:56:59</closed>
	</bug>
	<bug>
		<id>14084</id>
		<title>Different actuator port changes HTTP status codes on errors</title>
		<body>See #10560. This has been fixed in `2.0.x` but should be backported to `1.5.x`.</body>
		<created>2018-08-16 18:47:32</created>
		<closed>2018-08-16 20:11:00</closed>
	</bug>
	<bug>
		<id>14058</id>
		<title>Reactor Netty resources created by the auto-configured WebClient may outlive the application context</title>
		<body>We should hopefully be able to use a `ReactorResourceFactory` bean and a custom `ReactorClientHttpConnector` to tie the lifecycle of the resources to the application context. See [SPR-16963](https://jira.spring.io/browse/SPR-16963) for some background information.</body>
		<created>2018-08-14 11:23:02</created>
		<closed>2018-08-22 17:18:36</closed>
	</bug>
	<bug>
		<id>14054</id>
		<title>Due to gradle/gradle#5510, compileJava may be executed unnecessarily when not using Gradle's daemon</title>
		<body>spring-boot-gradle-plugin applied to a project build with no-daemon Gradle breaks incremental build - causes a retriggering of `compileJava` with every run  **Steps to reproduce:** - Check out https://github.com/spring-guides/gs-spring-boot - run `gradlew --no-daemon clean assemble` - run `gradlew --no-daemon testClasses`  **Expected behaviour** Task `compileJava` is UP-TO-DATE as nothing has changed that should trigger recompilation.  **Actual behaviour** Task `compileJava` is run because, as Gradle prints, "Task ':compileJava' has additional actions that have changed"  **Probable cause** During up-to-date checks Gradle compares task's previously known actions with current actions for equality (see `org.gradle.api.internal.changedetection.rules.TaskTypeTaskStateChanges`). Spring boot's `org.springframework.boot.gradle.plugin.JavaPluginAction` configures a JavaCompile task in `configureAdditionalMetadataLocations` with an action using a labda.  When building with a daemon that configuration probably happens once and in JavaCompile task's actions we can see the same lambda instance, which makes it equal and up-to-date check passes. When executing without a daemon another run has a different lambda instance and it fails the equality check.  In our project we have multiple steps configured as separate gradle runs and each of them recompiles the whole project.  **Versions** Gradle 4.9 Spring Boot 2.0.4.RELEASE</body>
		<created>2018-08-14 08:25:44</created>
		<closed>2018-08-14 11:33:40</closed>
	</bug>
	<bug>
		<id>14033</id>
		<title>LambdaSafe does not work on Java 11</title>
		<body>There is a check of an error message that is a bit sensible and breaks with Java 11 as the standard `ClassCastException` error message now starts with `class`  See #14028</body>
		<created>2018-08-09 17:05:04</created>
		<closed>2018-08-10 07:56:24</closed>
	</bug>
	<bug>
		<id>14031</id>
		<title>Boot's API documentation does not successfully link to external API documentation</title>
		<body>We have a number of places in our javadoc that should link to Java EE's API documentation. `ServletComponentScan`, brought to our attention in https://github.com/spring-projects/spring-boot/pull/14029, is one such place. [`ServletRegistrationBean`](https://docs.spring.io/spring-boot/docs/1.5.15.RELEASE/api/org/springframework/boot/web/servlet/ServletRegistrationBean.html) is another.</body>
		<created>2018-08-09 12:40:25</created>
		<closed>2018-08-13 12:19:26</closed>
	</bug>
	<bug>
		<id>14011</id>
		<title>Query and ref are lost from `jar:` URLs that are processed by fat jar loader's handler</title>
		<body>When a `ref` is used in a `java.net.URL`, `org.springframework.boot.loader.jar.Handler.parseURL()` lose the information.  Code to reproduce: ``` URL url = new URL("jar:file:/archive.jar!/file.txt#some-ref"); System.out.println(url); ``` Actual output: ``` jar:file:/archive.jar!/file.txt ``` Expected output: ``` jar:file:/archive.jar!/file.txt#some-ref ```  This bug occurs only when the application is started with `spring-boot-loader`. Some frameworks need reference to work properly, this information cannot be lost.</body>
		<created>2018-08-07 13:01:03</created>
		<closed>2018-08-13 10:39:33</closed>
	</bug>
	<bug>
		<id>13977</id>
		<title>NoSuchBeanDefinitionException with starter-web, starter-webflux and spring.main.web-application-type=reactive</title>
		<body>Spring boot version: 2.0.4.RELEASE Java versione: 9.0.4  I'm trying to create a project with both spring-boot-starter-web and spring-boot-starter-webflux. If in my application.properties I declare `spring.main.web-application-type=reactive` then at runtime a bean of type `ErrorAttributes` is missing and this exception is thrown: ``` 2018-08-01 21:47:48.854  WARN 17460 --- [           main] onfigReactiveWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start reactive web server; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'httpHandler' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration$AnnotationConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.http.server.reactive.HttpHandler]: Factory method 'httpHandler' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.web.server.adapter.WebHttpHandlerBuilder$SortedBeanContainer': Unsatisfied dependency expressed through method 'setExceptionHandlers' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'errorWebExceptionHandler' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/error/ErrorWebFluxAutoConfiguration.class]: Unsatisfied dependency expressed through method 'errorWebExceptionHandler' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.boot.web.reactive.error.ErrorAttributes' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 2018-08-01 21:47:48.862  INFO 17460 --- [           main] ConditionEvaluationReportLoggingListener :  Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2018-08-01 21:47:49.022 ERROR 17460 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :  *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of method errorWebExceptionHandler in org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration required a bean of type 'org.springframework.boot.web.reactive.error.ErrorAttributes' that could not be found.   Action:  Consider defining a bean of type 'org.springframework.boot.web.reactive.error.ErrorAttributes' in your configuration.  ``` To replicate the issue I attached a minimal gradle project: [error-attribute.zip](https://github.com/spring-projects/spring-boot/files/2250960/error-attribute.zip)</body>
		<created>2018-08-01 20:03:50</created>
		<closed>2018-08-13 19:24:22</closed>
	</bug>
	<bug>
		<id>13970</id>
		<title>Parsing date into @RequestParam LocalDate argument using spring.mvc.date-format fails with 'yyyy-MM-dd'</title>
		<body>When using the new feature to set a global date pattern for all `@RequestParam LocalDate` arguments by specifying the property `spring.mvc.date-format`, which is discussed [here](https://github.com/spring-projects/spring-boot/issues/5523), I noticed that the common ISO pattern `yyyy-MM-dd` does not work.  The exception thrown looks like this:  ``` Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalDate'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestParam java.time.LocalDate] for value '2018-04-20'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2018-04-20] ```  Through debugging, I found that the root cause is this exception:  ``` Text '2018-04-20' could not be parsed: Unable to obtain LocalDate from TemporalAccessor: {DayOfMonth=20, YearOfEra=2018, MonthOfYear=4},ISO of type java.time.format.Parsed ```  And I also found that the DateTimeFormatter that gets used for parsing is represented like that by `toString()`:  ``` Value(YearOfEra,4,19,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2) ```  I _presume_ that the reason why a `LocalDate` could not be obtained is that the `TemporalAccessor` that gets constructed lacks a value for the `Era` field, but has a filled `YearOfEra` field.  So I tried with `uuuu-MM-dd` instead, which works perfectly. @wilkinsona suspected that this is unintended and a symptom of a bug, therefore this bug report.</body>
		<created>2018-08-01 08:25:01</created>
		<closed>2018-08-17 23:05:09</closed>
	</bug>
	<bug>
		<id>13924</id>
		<title>HttpExchangeTracer#postProcessRequestHeaders is never called</title>
		<body>Hi, my use case is to remove/sanitize a specific custom header from the response of `/httptrace` endpoint. I did some digging in the code and tried to provide my own implementaion of `HttpExchangeTracer` which has `postProcessRequestHeaders()` method. I overrode this method to sanitize my custom header. But it didn't work. On doing some more digging, i noticed that `postProcessRequestHeaders()` method is not being called from anywhere. I am on Spring Boot 2.0.3. I checked the code of Spring Boot 1.5.7, and found that there is class called `WebRequestTraceFilter` which has method `postProcessRequestHeaders()`. In boot 1.5.7 this method is being called from a private method `org.springframework.boot.actuate.trace.WebRequestTraceFilter.getRequestHeaders(HttpServletRequest)`. Is there a simple way of achieveing what i am trying to achieve. Few things i tried in spring boot 2.0.3: - tried overriding `org.springframework.boot.actuate.web.trace.servlet.TraceableHttpServletRequest.getHeaders()` but the class itself is final and package-private. - triedd overriding `org.springframework.boot.actuate.trace.http.HttpExchangeTracer.FilteredTraceableRequest.getHeaders()` but again same issue.  </body>
		<created>2018-07-27 10:22:37</created>
		<closed>2018-08-06 16:36:18</closed>
	</bug>
	<bug>
		<id>13921</id>
		<title>`/actuator/` not secured when using `EndpointRequest.toAnyEndpoint()` (`/actuator` is) </title>
		<body>If I have the following app..  ``` package com.example.actuator;  import org.springframework.boot.SpringApplication; import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;  @SpringBootApplication public class ActuatorApplication {  @Configuration @EnableWebSecurity public static class ActuatorConfig extends WebSecurityConfigurerAdapter {  @Override protected void configure(HttpSecurity http) throws Exception { http .requestMatcher(EndpointRequest.toAnyEndpoint()) .authorizeRequests() .anyRequest().authenticated(); } }  public static void main(String[] args) { SpringApplication.run(ActuatorApplication.class, args); } }  ```  with the following build..    ```  &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;actuator&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt;  &lt;name&gt;actuator&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;  &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.3.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt;  &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt;  &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;  &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;   &lt;/project&gt;  ```  and the following properties...  ``` management.endpoints.web.exposure.include=* management.endpoint.health.show-details=always ```  and hit `/actuator` i get access denied, but i am able to get the output if i hit `/actuator/` via `curl` or the browser.  </body>
		<created>2018-07-26 19:28:36</created>
		<closed>2018-07-27 19:24:16</closed>
	</bug>
	<bug>
		<id>13900</id>
		<title>Project specific settings not getting applied in Eclipse</title>
		<body>Probably related to #13306, possibly because the Eclipse doesn't seem to find the plugin at all</body>
		<created>2018-07-25 15:31:41</created>
		<closed>2018-07-26 12:24:17</closed>
	</bug>
	<bug>
		<id>13895</id>
		<title>Property management.metrics.web.server.auto-time-requests is not taken into account in case of reactive web application</title>
		<body>In current Spring Boot version (2.0.3.RELEASE) configuration property `management.metrics.web.server.auto-time-requests` is not taken into account so it is not possible to disable automatic incoming HTTP request timing. It might be an issue if web application acts as a proxy (e.g. as in case of spring-cloud-gateway) and request URIs contain variables that are not replaced by placeholders. As a result metrics get accumulated (because there are separate metric instead of single one containing variable placeholder just as in case of Spring controllers) until OutOfMemoryError occurs. Current workaround is to exclude `org.springframework.boot.actuate.autoconfigure.metrics.web.reactive.WebFluxMetricsAutoConfiguration` auto configuration. Disabling auto request timing in case of reactive web application should work same as in case of servlet based web application (`WebMvcMetricsAutoConfiguration`).</body>
		<created>2018-07-25 12:44:23</created>
		<closed>2018-10-08 14:53:53</closed>
	</bug>
	<bug>
		<id>13879</id>
		<title>CouchbaseHealthIndicator can hang when Couchbase goes away</title>
		<body>When couchbase is stoped completely the health endpoint does not return and the below logs continuously spew out.  Steps to reproduce: - Start couchbase - Boot up spring boot app with couchbase and couchbase health indicator enabled - Kill couchbase - Request health endpoint /actuator/health  Versions: spring-data-couchbase:3.0.8.RELEASE spring-boot-gradle-plugin:2.0.3.RELEASE  ``` 2018-07-24 22:52:14.877  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.877  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.877  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:14.980  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.083  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.083  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.084  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.084  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.084  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.084  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.185  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.186  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.186  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.189  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.190  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.190  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.286  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.286  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.286  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.294  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.295  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.295  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.392  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.393  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.394  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.395  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.395  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.395  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.498  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.498  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.499  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.499  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.499  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.499  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.603  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.603  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.604  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.604  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.604  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.604  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.705  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.705  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.706  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.706  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.706  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.706  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.809  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.809  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.810  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.810  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.810  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.810  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:15.913  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.017  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.017  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.018  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.018  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.018  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.018  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.119  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.119  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.120  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.120  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.120  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.120  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.221  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.221  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.222  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.222  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.222  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.222  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.325  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.325  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.327  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.327  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.327  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.327  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.430  WARN 5945 --- [      cb-io-1-1] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.430  WARN 5945 --- [      cb-io-1-2] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.431  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.431  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.431  WARN 5945 --- [      cb-io-1-4] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.431  WARN 5945 --- [      cb-io-1-3] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.532  WARN 5945 --- [      cb-io-1-5] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.532  WARN 5945 --- [      cb-io-1-6] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.533  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.533  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : [localhost:8091][ConfigEndpoint]: Could not connect to remote socket: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.533  WARN 5945 --- [      cb-io-1-7] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 2018-07-24 22:52:16.533  WARN 5945 --- [      cb-io-1-8] c.c.client.core.endpoint.Endpoint        : Error during reconnect: com.couchbase.client.deps.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8091 ```</body>
		<created>2018-07-24 22:17:26</created>
		<closed>2018-08-08 14:06:03</closed>
	</bug>
	<bug>
		<id>13878</id>
		<title>`/actuator/configprops`  does not expose a property when second character is uppercase</title>
		<body>Hi! In migrating to Spring Boot 2 I came across a curious mismatch in our properties, illustrated in the following project &amp; test: https://github.com/timtebeek/env-matching/blob/master/src/test/java/com/github/timtebeek/envmatching/EnvMatchingApplicationTests.java#L29  My application is nothing more than: ```java @Data @SpringBootApplication @ConfigurationProperties("sample") @Validated public class EnvMatchingApplication {      private String someProp1;     private String oAuthProp2;      public static void main(String[] args) {         SpringApplication.run(EnvMatchingApplication.class, args);     } } ``` But when I run my simple JUnit test: ```java @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = {         "sample.someProp1=bla",         "sample.oAuthProp2=bla", }) public class EnvMatchingApplicationTests {     @Autowired     private TestRestTemplate restTemplate;      @Test     public void contextLoads() {         ResponseEntity&lt;String&gt; entity = restTemplate.getForEntity("/actuator/configprops", String.class);         assertThat(entity.getStatusCode()).isEqualByComparingTo(HttpStatus.OK);         assertThat(entity.getBody()).contains("someProp1");         assertThat(entity.getBody()).contains("oAuthProp2");     }  } ``` It fails on the final assertion. So `sample.someProp1` is matched perfectly fine, whereas `sample.oAuthProp2` is not matched. In our case this leads to ~misconfiguration(!) and~ some confusion. I've found the workaround to be to lowercase the property, but that's quite surprising to me. Can you enlighten me if I'm correct in having assumed this would work?  I'm aware there were substantial changes to the relaxed binding in Spring Boot 2, but never expected the second character being uppercase to be a problem at all. An uppercase letter as third character also work fine, so really weird behavior here.</body>
		<created>2018-07-24 17:59:05</created>
		<closed>2018-08-08 09:13:45</closed>
	</bug>
	<bug>
		<id>13834</id>
		<title>Provide a consistent way to discover the primary DispatcherServlet's path</title>
		<body>We've introduced a `DispatcherServletPathProvider` in `2.x` to resolve the effective servlet path of the application. We've also recently updated it to support the case of an application with multiple `DispatcherServlet` instances (#13603).  We're not using that information consistently: `StaticResourceRequest` and Error pages registration rely on on the path in properties and their usage is unknown if there are several dispatcher servlets.  I don't really know if we need to bring back a concept of "main" `DispatcherServlet` but it feels to me that it would be useful that one is flagged as the one where auto-configuration can apply. We could have a default `getAdditionalServletPaths` that returns an empty set and that users could implement for their use cases.  The lifecycle of `DispatcherServletPathProvider` is also a bit weird (see [this getBean call](https://github.com/spring-projects/spring-boot/blob/14a0064c53bff67372ec281bda7c35270a96cb79/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.java#L75-L76)).</body>
		<created>2018-07-20 12:02:41</created>
		<closed>2018-07-26 12:24:18</closed>
	</bug>
	<bug>
		<id>13832</id>
		<title>Liquibase actuator endpoint cannot retrieve change sets when using Hikari and a custom Liquibase DataSource URL</title>
		<body>**SpringBoot 2.0.3.RELEASE**  I am create simple project for repeat error. https://github.com/vova-uvarov/liquibase-actuator-error steps for repeat 1) run project 2) get http://localhost:8080/actuator/liquibase  get error on browser:  ``` Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback.  Fri Jul 20 13:22:46 MSK 2018 There was an unexpected error (type=Internal Server Error, status=500). Unable to get Liquibase change sets ```  error in application logs  ``` java.sql.SQLException: HikariDataSource HikariDataSource (HikariPool-1) has been closed. at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:96) ~[HikariCP-2.7.9.jar:na] at org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.createReport(LiquibaseEndpoint.java:82) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.lambda$liquibaseBeans$0(LiquibaseEndpoint.java:69) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684) ~[na:1.8.0_121] at org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.liquibaseBeans(LiquibaseEndpoint.java:68) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121] at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:223) ~[spring-core-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:76) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:61) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$ServletWebOperationAdapter.handle(AbstractWebMvcEndpointHandlerMapping.java:243) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(AbstractWebMvcEndpointHandlerMapping.java:299) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121] at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:866) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) ~[spring-webmvc-5.0.7.RELEASE.jar:5.0.7.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90) ~[spring-boot-actuator-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468) [tomcat-embed-core-8.5.31.jar:8.5.31] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.31.jar:8.5.31] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.31.jar:8.5.31] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121] ```   the mistake is that org.springframework.boot.actuate.liquibase.LiquibaseEndpoint#createReport use for getConnection this code  ```java DataSource dataSource = liquibase.getDataSource(); JdbcConnection connection = new JdbcConnection(dataSource.getConnection()); ```  datasource here it was already closed earlier in `org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.DataSourceClosingSpringLiquibase` </body>
		<created>2018-07-20 10:27:36</created>
		<closed>2018-10-15 14:29:37</closed>
	</bug>
	<bug>
		<id>13822</id>
		<title>@AutoConfigureMockMvc imports auto-configurations manually</title>
		<body>`@AutoConfigureMockMvc` has a `secure` attribute that's `true` by default. It is possible for the user to set that to `false` in which case security should not apply.  It is currently implemented using an `@Import` that is conditional on the property. This makes that a very unusual construct for importing auto-configurations. The side effect is that if you exclude the security auto-configuration in your app (via `exclude` on  `@SpringBootApplication`) that exclude is ignored, even if #12586 is implemented.</body>
		<created>2018-07-19 07:50:14</created>
		<closed>2019-02-28 21:17:39</closed>
	</bug>
	<bug>
		<id>13821</id>
		<title>Documented defaults for some server properties do not match runtime defaults</title>
		<body>For a number of properties, the default in the code and, therefore, in the generated metadata is zero or null. At runtime, such values are interpreted as meaning that the component's default should be used. An unwanted side-effect of this is that the default from the metadata that is shown in your IDE does not match the default that you'll get at runtime. We should align the defaults in the code and metadata with the runtime defaults and add tests to ensure that the two are kept in sync.</body>
		<created>2018-07-19 07:33:11</created>
		<closed>2018-09-07 13:20:50</closed>
	</bug>
	<bug>
		<id>13803</id>
		<title>Application does not fail to start when Jetty's WebAppContext fails to start</title>
		<body></body>
		<created>2018-07-18 09:19:39</created>
		<closed>2018-07-18 10:22:41</closed>
	</bug>
	<bug>
		<id>13798</id>
		<title>Default value for server.tomcat.internal-proxies is not aligned with Tomcat's default</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  ❓Question STOP!! Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  🐞 Bug report Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🚨 Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly.  🎁 Enhancement Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered.  🙅 Managed dependency upgrade You DO NOT need to raise an issue for a managed dependency version upgrade as there's a semi-automatic process for checking managed dependencies for new versions before a release. But pull requests for upgrades that are more involved than just a version property change are still most welcome. --&gt; Current default regular expression in ServerProperties overrides tomcat fix for: https://bz.apache.org/bugzilla/show_bug.cgi?id=62389  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java  We should extend internalProxies with IPv6 compliant version.  Thanks </body>
		<created>2018-07-17 13:16:58</created>
		<closed>2018-09-11 11:41:56</closed>
	</bug>
	<bug>
		<id>13789</id>
		<title>An application launched with an incompatible version of Spring Framework may fail silently</title>
		<body>I am trying to create a Spring Boot project with _spring-boot-starter-hateoas_.  **pom.xml** ```xml &lt;project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;com.company&lt;/groupId&gt;     &lt;artifactId&gt;project&lt;/artifactId&gt;     &lt;version&gt;0.1.0&lt;/version&gt;      &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;maven.compiler.source&gt;10&lt;/maven.compiler.source&gt;         &lt;maven.compiler.target&gt;10&lt;/maven.compiler.target&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;commons-logging&lt;/groupId&gt;             &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;             &lt;version&gt;1.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-hateoas&lt;/artifactId&gt;             &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/project&gt; ```  **ProjectApplication.java** ```java package com.company.project.web;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class ProjectApplication {     public static void main(String[] args) {         SpringApplication.run(ProjectApplication.class, args);     } } ```  **HelloWorldController.java** ```java package com.company.project.web.controller;  import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  @RestController @RequestMapping("/hello-world") public class HelloWorldController {     @GetMapping     public ResponseEntity&lt;String&gt; getHelloWorld() {         final var body = "Hello, World!";         return ResponseEntity.ok(body);     } } ```  "Process finished with exit code 1" is all I get in IntelliJ IDEA when I run this application. I've also tried packaging it as a JAR and running it outside the IDE. Setting the parent to `spring-boot-starter-parent` or including `spring-boot-starter-web` as well solves the problem.  I might be mistaken, but just including the HATEOAS starter should be enough to get everything up and running, right? I also had to include the logging library. Not sure if that is related.</body>
		<created>2018-07-16 19:14:03</created>
		<closed>2018-07-17 14:13:14</closed>
	</bug>
	<bug>
		<id>13783</id>
		<title>Misleading error message in ApplicationContextServerWebExchangeMatcher#createContext</title>
		<body>`ApplicationContextServerWebExchangeMatcher#createContext` has a misleading exception message when the `ApplicationContext` on a `ServerWebExchange` is `null`  &gt; No WebApplicationContext found.  The reason why it's misleading is that `WebApplicationContext` is the base contract for Spring MVC. </body>
		<created>2018-07-16 13:41:37</created>
		<closed>2018-07-18 00:09:51</closed>
	</bug>
	<bug>
		<id>13738</id>
		<title>localProperties get more preference over environmentProperties in spring boot 2.x</title>
		<body>Hi,  In spring boot 2.x i think localProperties loaded through `PropertySourcesPlaceholderConfigurer` are getting more preference over cloud config server properties with `localOverride` flag as false(by default).   Working fine in spring boot version 1.5.x.  To reproduce the issue:  1) Create a cloud config server having some property let say `spring.sample-property=sample property server` 2) Now create a local properties file `local-config.properties` having same property `spring.sample-property=sample property client` and load it through `PropertySourcesPlaceholderConfigurer`. 3) Intialize POJO class through `@ConfigurationProperties` 4) It will load value as "sample property client" from local properties file rather than from cloud config server.  I am attaching a sample project that will demonstrate the above steps.  1) Zip file contains 3 projects -  - config-server which contains cloud config server - configClient-1.5.14.RELEASE which contains spring boot application with version 1.5.14.RELEASE - configClient-2.0.3.RELEASE which contains spring boot application with version 1.5.14.RELEASE  2) Run config-server it will contains the cloud config property with property  `spring.sample-property=sample property server`  3) Run configClient-1.5.14.RELEASE it contains local property file(local-config.properties) with property `spring.sample-property=sample property client`  4) Run configClient-2.0.3.RELEASE it contains local property file(local-config.properties) with property `spring.sample-property=sample property client`  Now after running the clients these are the value that is bind to SpringProperty POJO class -  For configClient-1.5.14.RELEASE - `sampleProperty = sample property server` **(Correct behaviour)** For configClient-2.0.3.RELEASE - `sampleProperty = sample property client`  Output could be checked in log file(search for sample-property ------) or could be accessed through rest controller.   I triaged the issue and could see that in `PropertySourcesDeducer` following snippet where there is filtering on **enviromentProperties**. Hence localProperties take more preference over enviromentProperties whether localOverride flag is true or not.  ```java private PropertySources merge(PropertySources environmentPropertySources, PropertySources appliedPropertySources) {     FilteredPropertySources filtered = new FilteredPropertySources(appliedPropertySources, new String[]{"environmentProperties"});     return new CompositePropertySources(new PropertySources[]{filtered, environmentPropertySources});   } ```  [propertiesIssue.zip](https://github.com/spring-projects/spring-boot/files/2179662/propertiesIssue.zip)  </body>
		<created>2018-07-10 09:09:32</created>
		<closed>2018-08-02 22:20:18</closed>
	</bug>
	<bug>
		<id>13737</id>
		<title>Bean definitions in DataSourceConfiguration's inner classes override each other when multiple pools are on the classpath</title>
		<body>There are no missing bean conditions on the pool-specific inner classes of `DataSourceConfiguration` so they can override each other when multiple pools are available. This can be seen by running `org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests.testDataSourceHasEmbeddedDefault()`. The overrides appear in the logs:  ``` 2018-07-09 17:31:19.975  INFO   --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@52bf72b5: startup date [Mon Jul 09 17:31:19 BST 2018]; root of context hierarchy 2018-07-09 17:31:20.178  INFO   --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'dataSource' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2; factoryMethodName=dataSource; initMethodName=null; destroyMethodName=(inferred); defined in org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat; factoryMethodName=dataSource; initMethodName=null; destroyMethodName=(inferred); defined in org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat] 2018-07-09 17:31:20.179  INFO   --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'dataSource' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat; factoryMethodName=dataSource; initMethodName=null; destroyMethodName=(inferred); defined in org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari; factoryMethodName=dataSource; initMethodName=null; destroyMethodName=(inferred); defined in org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari] 2018-07-09 17:31:20.314  INFO   --- [           main] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2018-07-09 17:31:20.777  INFO   --- [           main] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@52bf72b5: startup date [Mon Jul 09 17:31:19 BST 2018]; root of context hierarchy ```</body>
		<created>2018-07-09 16:33:33</created>
		<closed>2018-07-10 09:38:58</closed>
	</bug>
	<bug>
		<id>13720</id>
		<title>Repackaging may fail with "ZipException: invalid entry compressed size" when input jar has been built with non-default compression settings</title>
		<body>I have an obfuscated jar created by proguard and with an application.properties file. If I try to recreate it with mavaen plugin, I got following error  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.15.BUILD-SNAPSHOT:repackage (default) on project project: invalid entry compressed size (expected 1052 but got 1053 bytes) -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.15.BUILD-SNAPSHOT:repackage (default) on project project: invalid entry compressed size (expected 1052 but got 1053 bytes)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: invalid entry compressed size (expected 1052 but got 1053 bytes)     at org.springframework.boot.maven.RepackageMojo.repackage (RepackageMojo.java:220)     at org.springframework.boot.maven.RepackageMojo.execute (RepackageMojo.java:204)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: java.util.zip.ZipException: invalid entry compressed size (expected 1052 but got 1053 bytes)     at java.util.zip.ZipOutputStream.closeEntry (ZipOutputStream.java:267)     at org.springframework.boot.loader.tools.JarWriter.writeEntry (JarWriter.java:268)     at org.springframework.boot.loader.tools.JarWriter.writeEntries (JarWriter.java:146)     at org.springframework.boot.loader.tools.Repackager.repackage (Repackager.java:281)     at org.springframework.boot.loader.tools.Repackager.repackage (Repackager.java:262)     at org.springframework.boot.loader.tools.Repackager.repackage (Repackager.java:194)     at org.springframework.boot.maven.RepackageMojo.repackage (RepackageMojo.java:217)     at org.springframework.boot.maven.RepackageMojo.execute (RepackageMojo.java:204)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) [ERROR] [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ``` The problem occurs after update from Proguard 5.3.3 to 6.0.3 but Proguard should not be the problem because in source ja the file has correct size. The file size in source jar is compressed 1058 but if the maven plugin want to repacke this this will be 1057 in resulting jar. This stops the recreation.  I've tested the latest snapshot version due error 'https://github.com/spring-projects/spring-boot/issues/13525'</body>
		<created>2018-07-06 13:28:34</created>
		<closed>2018-07-09 12:40:12</closed>
	</bug>
	<bug>
		<id>13636</id>
		<title>Properties that cannot be bound due to a missing default constructor are hard to diagnose</title>
		<body>Using Spring Boot 2.0.3, running the following code:  ```java package com.example.demo;  import java.util.ArrayList; import java.util.List;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component;  @SpringBootApplication public class So51149634Application {  public static void main(String[] args) { SpringApplication.run(So51149634Application.class, "--printers[0].deviceNo=123"); }  }  class Printer {  private String deviceNo;  public Printer(String deviceNo) { this.deviceNo = deviceNo; }  public String getDeviceNo() { return deviceNo; }  public void setDeviceNo(String deviceNo) { this.deviceNo = deviceNo; }  }  @Component @ConfigurationProperties class PrinterProperties {  List&lt;Printer&gt; printers = new ArrayList&lt;&gt;();  public List&lt;Printer&gt; getPrinters() { return printers; }  public void setPrinters(List&lt;Printer&gt; printers) { this.printers = printers; }  } ```  Results in the following output:  ```   .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v2.0.3.RELEASE)  2018-07-03 12:02:44.836  INFO 94960 --- [           main] com.example.demo.So51149634Application   : Starting So51149634Application on aw-rmbp.local with PID 94960 (/Users/awilkinson/dev/workspaces/spring/spring-boot/2.0.x/so-51149634/target/classes started by awilkinson in /Users/awilkinson/dev/workspaces/spring/spring-boot/2.0.x/so-51149634) 2018-07-03 12:02:44.840  INFO 94960 --- [           main] com.example.demo.So51149634Application   : No active profile set, falling back to default profiles: default 2018-07-03 12:02:44.883  INFO 94960 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@62bd765: startup date [Tue Jul 03 12:02:44 BST 2018]; root of context hierarchy 2018-07-03 12:02:45.255  WARN 94960 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'printerProperties': Could not bind properties to 'PrinterProperties' : prefix=, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'printers' to java.util.List&lt;com.example.demo.Printer&gt; 2018-07-03 12:02:45.262  INFO 94960 --- [           main] ConditionEvaluationReportLoggingListener :   Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2018-07-03 12:02:45.264 ERROR 94960 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'printers' to java.util.List&lt;com.example.demo.Printer&gt;:      Reason: Failed to bind properties under 'printers' to java.util.List&lt;com.example.demo.Printer&gt;  Action:  Update your application's configuration ```  The actual problem is that `Printer` does not have a default constructor.   Running with `--debug` reveals the following exception:  ``` org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'printers' to java.util.List&lt;com.example.demo.Printer&gt; at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:250) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:226) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:333) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:73) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:62) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:54) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:341) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_151] at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1357) ~[na:1.8.0_151] at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_151] at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_151] at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) ~[na:1.8.0_151] at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:342) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:441) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:427) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.access$400(Binder.java:381) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:339) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:278) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:210) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:192) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:82) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.bind(ConfigurationPropertiesBindingPostProcessor.java:107) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:93) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:424) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1700) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at com.example.demo.So51149634Application.main(So51149634Application.java:15) [classes/:na] Caused by: java.lang.NullPointerException: null at java.util.TreeMap.compare(TreeMap.java:1294) ~[na:1.8.0_151] at java.util.TreeMap.put(TreeMap.java:538) ~[na:1.8.0_151] at java.util.TreeSet.add(TreeSet.java:255) ~[na:1.8.0_151] at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) ~[na:1.8.0_151] at java.util.LinkedList$LLSpliterator.forEachRemaining(LinkedList.java:1235) ~[na:1.8.0_151] at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580) ~[na:1.8.0_151] at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[na:1.8.0_151] at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[na:1.8.0_151] at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_151] at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_151] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_151] at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_151] at org.springframework.boot.context.properties.bind.IndexedElementsBinder.assertNoUnboundChildren(IndexedElementsBinder.java:146) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:120) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:89) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.IndexedElementsBinder.bindIndexed(IndexedElementsBinder.java:71) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.CollectionBinder.bindAggregate(CollectionBinder.java:50) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:58) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:305) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:441) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder$Context.access$100(Binder.java:381) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:304) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:262) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE] ... 43 common frames omitted ```  The `NullPointerException` is occurring because `knownIndexedChildren` contains two `null` entries for a key, `elementBinder.bind(name, Bindable.of(elementType), source)` returns `null` due to the lack of default constructor on `Printer`, the loop's broken and the entry isn't removed from `knownIndexedChildren`, `assertNoUnboundChildren` then tries to stream the values and add `null` to a `TreeSet` which is rejected with a `NullPointerException`.    </body>
		<created>2018-07-03 11:15:34</created>
		<closed>2018-07-25 00:44:07</closed>
	</bug>
	<bug>
		<id>13620</id>
		<title>Auto-restart stops working after watched directory is deleted and recreated</title>
		<body>I try to use Spring-boot with Gradle and Kotlin. The restarter monitors build/classes/kotlin/main directory. It works fine when Kotlin classes are updated after changes. But when there is a build failure (due to any error in Kotlin code), Kotlin's Gradle plugin removes build/classes/kotlin/main directory. It is recreated after fixing the error, but the auto-restart feature no longer works. You can reproduce the problem also by manually moving any watched directory for a few seconds to any other location and back.  Unfortunately I don't see any way to configure Kotlin's plugin not to remove this directory on failure and no way to make Spring-boot restarter watch other directory instead (e.g. build/classes).  I'm using Spring-boot 2.0.3, Kotlin 1.2.50 on Linux.</body>
		<created>2018-06-30 11:00:15</created>
		<closed>2018-07-02 15:26:53</closed>
	</bug>
	<bug>
		<id>13607</id>
		<title>spring-boot-starter-parent inadvertently overrides spring-boot-dependencies' managed version for maven-resources-plugin</title>
		<body></body>
		<created>2018-06-28 13:35:12</created>
		<closed>2018-06-28 13:43:04</closed>
	</bug>
	<bug>
		<id>13602</id>
		<title>Properties getting trimmed since 2.0</title>
		<body>The following application running under Spring Boot 1.5.14 outputs ``` :1 abc   :6 ```  but after upgrading to 2.0.0 outputs ``` :0 abc:3 ```  Is that intended behavior? The [comment](https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825) on #4106 by @wilkinsona suggests that properties should not be trimmed. But discussion under #11029 suggests that there were in fact some changes related to trimming of collection properties.  I used a "separator" property in an application that does CSV parsing just like in the example below. The separator is a tab and with 2.0 it seems I have no way to specify that via properties.  Application.java: ```java @SpringBootApplication @ConfigurationProperties("application") public class Application {      private String separator;      private String string;      public String getSeparator() {         return separator;     }      public void setSeparator(String separator) {         this.separator = separator;     }      public String getString() {         return string;     }      public void setString(String string) {         this.string = string;     }      @PostConstruct     void postConstruct() {         System.out.println(separator + ":" + separator.length());         System.out.println(string + ":" + string.length());     }      public static void main(String args[]) {         SpringApplication.run(Application.class, args);     }  } ```  application.properties: ```properties application.separator=\t application.string=   abc    ```</body>
		<created>2018-06-27 14:22:18</created>
		<closed>2018-07-02 18:19:15</closed>
	</bug>
	<bug>
		<id>13601</id>
		<title>Clean line breaks in configuration metadata descriptions</title>
		<body>SB 2.0.3. RELEASE  has  ```     {       "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",       "defaultValue": 5,       "name": "spring.jta.atomikos.properties.recovery.max-retries",       "description": "Number of retry attempts to commit the transaction before throwing an\n exception.",       "type": "java.lang.Integer"     } ```  Clients as IDEs shouldn't need to escape/handle such linebreaks.</body>
		<created>2018-06-27 12:24:12</created>
		<closed>2018-07-13 07:28:03</closed>
	</bug>
	<bug>
		<id>13596</id>
		<title>WebFluxTags.method fails with a NullPointerException for requests with a non-standard HTTP method</title>
		<body>Hello,  I just got this NPE on test server. Unfortunately I am not able to reproduce it. Spring Boot 2.0.3. The stacktrace does not go through my code.  Let me know if I can help somehow.   ``` java.lang.NullPointerException: null     at org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTags.method(WebFluxTags.java:58)     at com.avast.spring.boot.webflux.metrics.ExtensibleWebFluxTagsProvider.httpRequestTags(ExtensibleWebFluxTagsProvider.java:31)     at org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter.error(MetricsWebFilter.java:84)     at org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter.lambda$null$2(MetricsWebFilter.java:70)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at org.springframework.http.server.reactive.AbstractServerHttpResponse.doCommit(AbstractServerHttpResponse.java:225)     at org.springframework.http.server.reactive.AbstractServerHttpResponse.lambda$writeWith$1(AbstractServerHttpResponse.java:176)     at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onNext(ChannelSendOperator.java:181)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)     at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)     at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)     at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:156)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)     at org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(ChannelSendOperator.java:163)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)     at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)     at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)     at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)     at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)     at org.springframework.http.server.reactive.ChannelSendOperator.subscribe(ChannelSendOperator.java:74)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)     at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)     at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)     at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)     at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)     at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)     at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)     at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)     at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)     at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)     at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454)     at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328)     at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.Mono.subscribe(Mono.java:3080)     at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)     at reactor.core.publisher.Operators.complete(Operators.java:128)     at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)     at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)     at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.Mono.subscribe(Mono.java:3080)     at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)     at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onError(FluxPeekFuseable.java:222)     at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)     at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)     at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)     at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:270)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)     at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1323)     at reactor.core.publisher.Operators.error(Operators.java:178)     at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)     at reactor.core.publisher.Mono.subscribe(Mono.java:3080)     at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)     at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)     at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349)     at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)     at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)     at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)     at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)     at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)     at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)     at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)     at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:247)     at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:329)     at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)     at reactor.core.publisher.MonoZip$ZipInner.onSubscribe(MonoZip.java:318)     at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)     at reactor.core.publisher.Mono.subscribe(Mono.java:3080)     at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)     at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)     at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)     at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:773)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:543)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:523)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:409)     at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)     at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)     at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)     at reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)     at reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)     at reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)     at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)     at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)     at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)     at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)     at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)     at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)     at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)     at reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)     at reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)     at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)     at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)     at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)     at reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)     at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)     at reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)     at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)     at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)     at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)     at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)     at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)     at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)     at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)     at reactor.core.publisher.Mono.subscribe(Mono.java:3080)     at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)     at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)     at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)     at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)     at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380)     at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:398)     at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)     at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)     at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:313)     at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)     at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2018-06-27 08:12:26</created>
		<closed>2018-06-28 13:27:43</closed>
	</bug>
	<bug>
		<id>13594</id>
		<title>Failure analysis for NoSuchBeanDefinitionException does not include information about qualifiers or the class on which auto-configured bean methods are declared</title>
		<body>See #13592 for an example.</body>
		<created>2018-06-27 05:43:28</created>
		<closed>2018-10-11 10:52:25</closed>
	</bug>
	<bug>
		<id>13588</id>
		<title>Overridden bean definitions may cause incorrect bean condition evaluation due to stale information being held by BeanTypeRegistry</title>
		<body>I have an interface `AuditEventRepository` in my project which is definitely not same as `org.springframework.boot.actuate.audit.AuditEventRepository` and also has a different purpose. but this is clashing with the bean declared in `org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration#auditEventsEndpoint`  ```java @Bean @ConditionalOnMissingBean @ConditionalOnBean(AuditEventRepository.class) @ConditionalOnEnabledEndpoint public AuditEventsEndpoint auditEventsEndpoint( AuditEventRepository auditEventRepository) { return new AuditEventsEndpoint(auditEventRepository); } ```  Reproduction step: Have a bean with class simple name `AuditEventRepository`.</body>
		<created>2018-06-26 21:27:15</created>
		<closed>2018-07-11 15:52:47</closed>
	</bug>
	<bug>
		<id>13531</id>
		<title>FailureAnalyzer doesn't provide useful information for the "null" bean case</title>
		<body>As of 5.0, if you have a `null` bean, autowiring fails rather than injecting `null`. The bean is present in the bean factory but the context won't resolve it for you anymore.  This is the failure analysis you get on startup with such a bean:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of constructor in com.example.demo.MyStuff required a bean of type 'java.lang.String' that could not be found.   Action:  Consider defining a bean of type 'java.lang.String' in your configuration.  ```  We should try to extract some more information (perhaps that the bean is `null` now we know it's a special case?).</body>
		<created>2018-06-20 08:01:30</created>
		<closed>2018-07-17 13:46:42</closed>
	</bug>
	<bug>
		<id>13521</id>
		<title>Attempting to use WebTestClient to test a Jersey-based app causes the app to switch to WebFlux</title>
		<body>Spring Boot / Jersey can not find a handler method when the application is startet and accessed from a test. If I start the application separately and access `http://localhost:8080/demo` with a browser everything is fine.  The log says: "Did not find handler method for [/demo]". The relevant logging output:      2018-06-18 17:04:31.071 DEBUG 7628 --- [nio-8080-exec-1] o.s.web.reactive.DispatcherHandler       : Processing GET request for [http://localhost:8080/demo]     2018-06-18 17:04:31.083 DEBUG 7628 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Looking up handler method for path /demo     2018-06-18 17:04:31.085 DEBUG 7628 --- [nio-8080-exec-1] s.w.r.r.m.a.RequestMappingHandlerMapping : Did not find handler method for [/demo]     2018-06-18 17:04:31.087 DEBUG 7628 --- [nio-8080-exec-1] o.s.w.r.handler.SimpleUrlHandlerMapping  : Matching pattern for request [[path='/demo']] is /**  The application consists of the following classes (written in Kotlin):  Resource     ```java import org.springframework.stereotype.Component import javax.ws.rs.GET import javax.ws.rs.Path import javax.ws.rs.core.Response  @Component @Path("/") class Resource {      @GET     @Path("demo")     fun test() = Response.ok("Hi!").encoding("UTF-8").build() } ```  JerseyConfig  ```java import org.glassfish.jersey.server.ResourceConfig import org.springframework.stereotype.Component  @Component class JerseyConfig : ResourceConfig() {      init {         register(Resource::class.java)     } } ```  App:  ```java import org.springframework.boot.autoconfigure.SpringBootApplication import org.springframework.boot.runApplication  @SpringBootApplication class App  fun main(args: Array&lt;String&gt;) {     runApplication&lt;App&gt;(*args) } ```  The failing test:  ```java import org.junit.jupiter.api.Test import org.junit.jupiter.api.TestInstance import org.junit.jupiter.api.extension.ExtendWith import org.springframework.beans.factory.annotation.Autowired import org.springframework.boot.test.context.SpringBootTest import org.springframework.test.context.junit.jupiter.SpringExtension import org.springframework.test.web.reactive.server.WebTestClient  @ExtendWith(SpringExtension::class) @TestInstance(TestInstance.Lifecycle.PER_CLASS) @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT) class ResourceTest {      @Autowired     lateinit var client: WebTestClient      @Test     fun getTest() {         client.get().uri("demo").exchange().expectStatus().isOk     } } ```  I get the same error, if I use the Jersey client for testing:  ```java @Test fun testWithJersey() {     val client = ClientBuilder.newClient()     val response = client.target("http://localhost:8080/demo").request().get()     assertThat(response.status).isEqualTo(200) } ```  build.gradle:  ```gradle buildscript {     ext {         kotlinVersion = '1.2.50'         springBootVersion = '2.0.3.RELEASE'     }     repositories {         mavenCentral()     }     dependencies {         classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")         classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")         classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")     } }  apply plugin: 'kotlin' apply plugin: 'kotlin-spring' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management'  compileKotlin {     kotlinOptions {         freeCompilerArgs = ["-Xjsr305=strict"]         jvmTarget = "1.8"     } } compileTestKotlin {     kotlinOptions {         freeCompilerArgs = ["-Xjsr305=strict"]         jvmTarget = "1.8"     } }  repositories {     mavenCentral() }  dependencies {     compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")     compile("org.jetbrains.kotlin:kotlin-reflect")     compile('org.springframework.boot:spring-boot-starter-jersey')     testCompile("org.springframework.boot:spring-boot-starter-test") {         exclude group: "junit", module: "junit"     }     testCompile('org.springframework.boot:spring-boot-starter-webflux')     testCompile("org.junit.jupiter:junit-jupiter-api")     testRuntime("org.junit.jupiter:junit-jupiter-engine") } ```  The test code itself seems to be ok, since when I replace the body of the test method with `Thread.sleep(...)` and then access the server from a browser, I get the same error (404 due to "Did not find handler method for [/demo]"). </body>
		<created>2018-06-19 07:22:35</created>
		<closed>2018-06-20 09:12:52</closed>
	</bug>
	<bug>
		<id>13508</id>
		<title>Missing `@ConditionalOnClass` check on RedisCacheConfiguration</title>
		<body></body>
		<created>2018-06-18 13:31:40</created>
		<closed>2018-06-18 15:54:57</closed>
	</bug>
	<bug>
		<id>13470</id>
		<title>Duplicate logging in Tomcat console with default settings</title>
		<body>Spring boot version: 2.0.2.RELEASE Last worked in version: 1.5.13.RELEASE Tomcat version: 9.0.0.0 (also reproducible on older version of Tomcat) Java version: 1.8.0_121-b13  Messages logged using Logger.getLogger().log() are logged twice into console when application is deployed to Tomcat with default Spring boot configuration (application.properties and logback.xml are missing).   When application is started standalone from console, the issue does not occur and each call of Logger.getLogger().log() causes only one message in console.  I attach a sample project in which the issue can be easily reproduced: [logging-bug.zip](https://github.com/spring-projects/spring-boot/files/2098285/logging-bug.zip)  To reproduce the issue, follow these steps: 1. Build the project using `mvn package`. 2. Deploy created war file to Tomcat in default configuration. 3. Access URL: http://localhost:8080/logging-bug/rest/status -&gt; Two log messages are printed in console instead of only one message. See screenshot: &lt;img width="821" alt="screen shot 2018-06-13 at 15 33 02" src="https://user-images.githubusercontent.com/26658588/41354379-27598a40-6f1f-11e8-8522-a1e636dfc38c.png"&gt;  </body>
		<created>2018-06-13 13:37:48</created>
		<closed>2018-07-30 12:02:52</closed>
	</bug>
	<bug>
		<id>13450</id>
		<title>Property placeholders are not replaced when used in name attribute of &lt;springProfile&gt;</title>
		<body>**Use case:**  Application on certain environments should write logs into the file. In order to turn this on/off we provide property in application.yml configuration which tells for which spring profile it is allowed or not allowed (like '!prod' for example).  The logback-spring.xml configuration for such case looks as follows: ``` &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;     &lt;include resource="org/springframework/boot/logging/logback/defaults.xml"/&gt;    &lt;include resource="org/springframework/boot/logging/logback/console-appender.xml"/&gt;     &lt;springProperty scope="context" name="allowed-profiles" source="logback.allowed-profiles"/&gt;    &lt;springProfile name="${allowed-profiles}"&gt;         &lt;appender name="ROLLING-FILE"                   class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;             &lt;encoder&gt;                 &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;             &lt;/encoder&gt;             &lt;file&gt;${LOG_FILE}&lt;/file&gt;             &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;                 &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;             &lt;/rollingPolicy&gt;         &lt;/appender&gt;     &lt;/springProfile&gt;      &lt;root&gt;         &lt;appender-ref ref="CONSOLE"/&gt;         &lt;springProfile name="${allowed-profiles}"&gt;             &lt;appender-ref ref="ROLLING-FILE"/&gt;         &lt;/springProfile&gt;     &lt;/root&gt;&lt;/configuration&gt; ```  In the Spring-Boot version **1.5.x** it doesn't work. From the source code (**org.springframework.boot.logging.logback.SpringProfileAction**) there is a piece of logic which isn't applied:  ``` private boolean acceptsProfiles(InterpretationContext ic, Attributes attributes) {       String[] profileNames = StringUtils.trimArrayElements(StringUtils .commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE)));      if (profileNames.length != 0) {          for (String profileName : profileNames) {             OptionHelper.substVars(profileName, ic, this.context);         }          return this.environment != null &amp;&amp;               this.environment.acceptsProfiles(profileNames);      }     return false;  } ``` Here `OptionHelper.substVars(profileName, ic, this.context)` should return substituted value from the properties or from environment variables. But it isn't assigned to anything and in the next check where environment accepts profiles it still passes expression but not actual value.  The change like that could fix it: ``` String[] profiles = new String[profileNames.length];  for (int i = 0; i &lt; profileNames.length; i++) {      profiles[i] = OptionHelper.substVars(profileNames[i], ic, this.context);  }  return this.environment != null &amp;&amp;        this.environment.acceptsProfiles(profiles); ```</body>
		<created>2018-06-12 09:18:15</created>
		<closed>2018-06-20 10:42:52</closed>
	</bug>
	<bug>
		<id>13412</id>
		<title>AuditEventsJmxEndpoint is unnecessarily flagged with @ConfigurationProperties</title>
		<body>`AuditEventsJmxEndpoint` is flagged with `@ConfigurationProperties(prefix = "endpoints.auditevents")` that looks unnecessary. As a side effects all properties for `endpoints.auditevents` are exposed twice with two sources (as the same namespace is used by `AuditEventsMvcEndpoint`)</body>
		<created>2018-06-07 16:00:44</created>
		<closed>2018-06-08 06:35:05</closed>
	</bug>
	<bug>
		<id>13399</id>
		<title>EndpointRequest should support Jersey rather than hardcoding DispatcherServlet </title>
		<body>See the following line in `EndpointRequest` where the `DispatcherServlet` is hardcoded:  https://github.com/spring-projects/spring-boot/blob/fe3de2816cc6c4ed480417c4a1ca8fab76c824f2/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java#L141  Since we are using Jersey in our application without the `DispatcherServlet` on the classpath, an exception is thrown here, resulting in `EMPTY_MATCHER` being used. The result for the client is that the `EndpointRequest` never matches any pattern.  Our workaround is simply to use an `AntMatcher` instead, but it would be nicer if this was fixed in `EndpointRequest` so that we could use the more convenient `EndpointMatcher` API.   At a minimum, it should be documented that `EndpointRequest` matchers are only compatible with `DispatcherServlet` Endpoints.  </body>
		<created>2018-06-06 13:13:25</created>
		<closed>2018-06-06 17:50:13</closed>
	</bug>
	<bug>
		<id>13372</id>
		<title>DefaultErrorWebExceptionHandler should ignore invalid Accept header</title>
		<body>Originally reported in [SPR-16903](https://jira.spring.io/browse/SPR-16903) but the root cause is in [DefaultErrorWebExceptionHandler](https://github.com/spring-projects/spring-boot/blob/ace5ba598487825a216e3fb2dd66ef7963cd3f1f/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java#L187).  The scenario is a bogus accept header, e.g. "Accept: v=3.0" which results in `NotAcceptableStatusException` initially (406) but then becomes `InvalidMediaTypeException` (500) during error handling.  ``` org.springframework.http.InvalidMediaTypeException: Invalid mime type "v=3.0": does not contain '/'org.springframework.http.InvalidMediaTypeException: Invalid mime type "v=3.0": does not contain '/' at org.springframework.http.MediaType.parseMediaType(MediaType.java:534) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:558) at org.springframework.http.MediaType.parseMediaTypes(MediaType.java:577) at org.springframework.http.HttpHeaders.getAccept(HttpHeaders.java:443) at org.springframework.web.reactive.function.server.DefaultServerRequest$DefaultHeaders.accept(DefaultServerRequest.java:220) at org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler.lambda$acceptsTextHtml$3(DefaultErrorWebExceptionHandler.java:190) at org.springframework.web.reactive.function.server.RouterFunctions$DefaultRouterFunction.route(RouterFunctions.java:396) at org.springframework.web.reactive.function.server.RouterFunctions$SameComposedRouterFunction.route(RouterFunctions.java:317) at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.handle(AbstractErrorWebExceptionHandler.java:239) at org.springframework.web.server.handler.ExceptionHandlingWebHandler.lambda$handle$0(ExceptionHandlingWebHandler.java:68) ... ```</body>
		<created>2018-06-05 14:39:45</created>
		<closed>2018-06-06 12:08:19</closed>
	</bug>
	<bug>
		<id>13362</id>
		<title>Lists in spring.profiles cause "property source cannot be added relative to itself" error</title>
		<body>See https://github.com/spring-cloud/spring-cloud-commons/issues/348 and the demo in https://github.com/spring-cloud/spring-cloud-commons/issues/348#issuecomment-394497977</body>
		<created>2018-06-04 22:29:25</created>
		<closed>2018-06-04 22:42:34</closed>
	</bug>
	<bug>
		<id>13361</id>
		<title>Include of self causes infinite loop</title>
		<body>Give the following  ``` application-cloud.properties    spring.profiles.include=microservice application-microservice.properties     spring.profiles.include=microservice ```  Running the app with `--spring.profiles.active=cloud` causes an infinite loop.</body>
		<created>2018-06-04 21:30:56</created>
		<closed>2018-06-04 22:02:45</closed>
	</bug>
	<bug>
		<id>13357</id>
		<title>Reason in the analysis for a binding failure caused by a type conversion failure isn't as informative as it was in 1.5</title>
		<body>In 1.5, if you set `server.port=alpha`, you are shown the following failure analysis:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target org.springframework.boot.autoconfigure.web.ServerProperties@44c73c26 failed:      Property: server.port     Value: alpha     Reason: Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'port'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [java.lang.Integer]   Action:  Update your application's configuration ```  The same configuration in 2.0 results in the following failure analysis:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'server.port' to java.lang.Integer:      Property: server.port     Value: alpha     Origin: "server.port" from property source "commandLineArgs"     Reason: For input string: "alpha"  Action:  Update your application's configuration ```</body>
		<created>2018-06-04 15:08:47</created>
		<closed>2018-06-04 15:30:59</closed>
	</bug>
	<bug>
		<id>13330</id>
		<title>Hikari-specific meters are not registered in the absence of a DataSourcePoolMetadataProvider</title>
		<body>Hikari provides native Micrometer integration that Boot auto-configures by configuring Hikari with a metrics tracker factory that uses the auto-configured `MeterRegistry`. At present, this auto-configuration is conditional on a `DataSourcePoolMetadataProvider` bean, however this isn't necessary as no such bean is required for exposing Hikari's native Micrometer metrics.  See https://github.com/spring-projects/spring-boot/issues/13295 for some background.</body>
		<created>2018-06-01 13:37:45</created>
		<closed>2018-06-01 16:58:44</closed>
	</bug>
	<bug>
		<id>13319</id>
		<title>When using ApplicationContextRunner condition evaluation does not use runner's class loader</title>
		<body>Test [here](https://github.com/mbhave/spring-boot/commit/487666776136960cf699f42aba926a042023e8a8#diff-cec762db80b60bdf463e838f0efdfa2fR46). </body>
		<created>2018-05-31 18:08:44</created>
		<closed>2018-06-01 16:29:15</closed>
	</bug>
	<bug>
		<id>13314</id>
		<title>Building a RestTemplate using RestTemplateBuilder fails with a ClassNotFoundException when OkHttp 2 is on the classpath</title>
		<body>I just updated a project with Spring Boot 2.0.2 and I am getting the following exception  ``` Caused by: java.lang.IllegalArgumentException: Could not find class [org.springframework.http.client.OkHttpClientHttpRequestFactory] at org.springframework.util.ClassUtils.resolveClassName(ClassUtils.java:313) at org.springframework.boot.web.client.RestTemplateBuilder.detectRequestFactory(RestTemplateBuilder.java:600) at org.springframework.boot.web.client.RestTemplateBuilder.configureRequestFactory(RestTemplateBuilder.java:566) at org.springframework.boot.web.client.RestTemplateBuilder.configure(RestTemplateBuilder.java:535) at org.springframework.boot.web.client.RestTemplateBuilder.build(RestTemplateBuilder.java:523) at org.springframework.boot.web.client.RestTemplateBuilder.build(RestTemplateBuilder.java:509) at org.springframework.boot.test.web.client.TestRestTemplate.&lt;init&gt;(TestRestTemplate.java:133) ```  The `RestTemplateBuilder` is trying to validate if some HTTP client factories exist and the `org.springframework.http.client.OkHttpClientHttpRequestFactory` doesn't exist anymore in Spring Framework.   </body>
		<created>2018-05-31 10:49:05</created>
		<closed>2018-05-31 12:43:08</closed>
	</bug>
	<bug>
		<id>13303</id>
		<title>Regression with property binding to List&lt;String&gt;</title>
		<body>With 1.5.x I used to have a property binding like this; a comma-separated String to `List&lt;String&gt;`.  ```java @ConfigurationProperties(prefix = "foo.bar") public class MyAppProperties {     private final Kafka kafka = new Kafka();      public Kafka getKafka() {         return this.kafka;     }      public static class Kafka {         private List&lt;String&gt; topics;         public void setTopics(List&lt;String&gt; topics) {             this.topics = topics;         } ... ```  ```yaml foo.bar:     kafka:       topics: test,failures ```  With Boot 2.0.2 this now fails with   ``` Failed to bind properties under 'foo.bar.kafka.topics' to java.util.List&lt;java.lang.String&gt;:      Reason: Unable to get value for property topics ```  Replacing `List&lt;String&gt;` in the setter with `String[]` fixes this.  ```java public void setTopics(String[] topics) {   this.topics = Lists.newArrayList(topics); } ```</body>
		<created>2018-05-30 15:29:45</created>
		<closed>2018-06-01 22:03:19</closed>
	</bug>
	<bug>
		<id>13273</id>
		<title>TraceableHttpServletRequest fails to create URI instance when query string contains special characters</title>
		<body>When you open urls like `http://localhost:8080/script?a=${b}` in browser, the exception is thrown in `return URI.create(urlBuffer.toString());` line at:  ``` @Override public URI getUri() { StringBuffer urlBuffer = this.request.getRequestURL(); if (StringUtils.hasText(this.request.getQueryString())) { urlBuffer.append("?"); urlBuffer.append(this.request.getQueryString()); } return URI.create(urlBuffer.toString()); } ```  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/servlet/TraceableHttpServletRequest.java#L56  As a workaround I disabled tracing via `management.trace.http.enabled=false` but it would be nice, if the issue is fixed.  full stacktrace:  ``` java.lang.IllegalArgumentException: Illegal character in query at index 32: http://localhost:8080/script?a=${b} at java.net.URI.create(URI.java:852) ~[na:1.8.0_172] at org.springframework.boot.actuate.web.trace.servlet.TraceableHttpServletRequest.getUri(TraceableHttpServletRequest.java:56) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer$FilteredTraceableRequest.getUri(HttpExchangeTracer.java:130) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.trace.http.HttpTrace$Request.&lt;init&gt;(HttpTrace.java:111) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.trace.http.HttpTrace$Request.&lt;init&gt;(HttpTrace.java:99) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.trace.http.HttpTrace.&lt;init&gt;(HttpTrace.java:49) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.trace.http.HttpExchangeTracer.receivedRequest(HttpExchangeTracer.java:58) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:81) ~[spring-boot-actuator-2.0.2.RELEASE.jar:2.0.2.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE] at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) ~[jetty-security-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) ~[jetty-servlet-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.Server.handle(Server.java:531) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) ~[jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) [jetty-server-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:132) [jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760) ~[jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678) ~[jetty-util-9.4.10.v20180503.jar:9.4.10.v20180503] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_172] Caused by: java.net.URISyntaxException: Illegal character in query at index 32: http://localhost:8080/script?a=${b} at java.net.URI$Parser.fail(URI.java:2848) ~[na:1.8.0_172] at java.net.URI$Parser.checkChars(URI.java:3021) ~[na:1.8.0_172] at java.net.URI$Parser.parseHierarchical(URI.java:3111) ~[na:1.8.0_172] at java.net.URI$Parser.parse(URI.java:3053) ~[na:1.8.0_172] at java.net.URI.&lt;init&gt;(URI.java:588) ~[na:1.8.0_172] at java.net.URI.create(URI.java:850) ~[na:1.8.0_172] ... 50 common frames omitted ```  &lt;!-- Thanks for raising a Spring Boot issue. Please take the time to review the following categories as some of them do not apply here.  ❓Question Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  🐞 Bug report Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  🚨 Security Vulnerability STOP!! Please don't raise security vulnerabilities here. Head over to https://pivotal.io/security to learn how to disclose them responsibly.  🎁 Enhancement Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; </body>
		<created>2018-05-27 17:07:37</created>
		<closed>2018-06-04 19:51:34</closed>
	</bug>
	<bug>
		<id>13249</id>
		<title>OnExpressionCondition triggers a NullPointerException when it's evaluated with a ConditionContext with no BeanFactory</title>
		<body>This was discovered while working on https://github.com/spring-projects/spring-boot/issues/13226. Unlike #13226, this part of the problem affects both 1.5 and 2.0.  Unlike most other condition implementations, `OnExpressionCondition` does not tolerate a `null` `BeanFactory`. Instead, it triggers a `NullPointerException` by passing a `null` `BeanExpressionContext` into `BeanExpressionResolver.evaluate(String, BeanExpressionContext)`:  ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [/Users/awilkinson/dev/spring/spring-boot/1.5.x/spring-boot-autoconfigure/target/test-classes/org/springframework/boot/autoconfigure/condition/AnyNestedConditionTests$Config.class]; nested exception is java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.condition.AnyNestedConditionTests$Config at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:311) at org.springframework.boot.autoconfigure.condition.SpringBootConditionTests.evaluationSucceedsWithoutABeanFactory(SpringBootConditionTests.java:60) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206) Caused by: java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.condition.AnyNestedConditionTests$Config at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:63) at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:81) at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:64) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isConditionMatch(ClassPathScanningCandidateComponentProvider.java:371) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isCandidateComponent(ClassPathScanningCandidateComponentProvider.java:355) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:288) ... 26 more Caused by: org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is java.lang.NullPointerException at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:163) at org.springframework.boot.autoconfigure.condition.OnExpressionCondition.getMatchOutcome(OnExpressionCondition.java:54) at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberOutcomes.getConditionOutcome(AbstractNestedCondition.java:194) at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberOutcomes.&lt;init&gt;(AbstractNestedCondition.java:187) at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions.getMatchOutcomes(AbstractNestedCondition.java:165) at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberMatchOutcomes.&lt;init&gt;(AbstractNestedCondition.java:80) at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition.getMatchOutcome(AbstractNestedCondition.java:64) at org.springframework.boot.autoconfigure.condition.AnyNestedCondition.getMatchOutcome(AnyNestedCondition.java:1) at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ... 32 more Caused by: java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:144) ... 40 more ```  </body>
		<created>2018-05-24 09:37:15</created>
		<closed>2018-05-28 12:29:20</closed>
	</bug>
	<bug>
		<id>13221</id>
		<title>ErrorPageFilter produces pointless logging when failure is due to a ClientAbortException</title>
		<body>I want to suppress logging of `org.apache.catalina.connector.ClientAbortException`. It's possible to catch to ignore this exception in an own filter but in some cases `ClientAbortException` is thrown by `response.flushBuffer()` in `ErrorPageFilter#doFilter`.  I would propose to make `ErrorPageFilter#handleCommittedResponse` protected, to be able to customize exception handling.</body>
		<created>2018-05-21 07:30:41</created>
		<closed>2018-05-30 21:09:31</closed>
	</bug>
	<bug>
		<id>13186</id>
		<title>Include DispatcherServlets only exposed as a ServletRegistrationBean in the mappings endpoint</title>
		<body>When a `DispatcherServlet` is registered via:  ``` @Bean public ServletRegistrationBean&lt;DispatcherServlet&gt; idmServlet(MyProperties properties) {     return registerServlet(properties.getServlet(), IdmEngineRestConfiguration.class); } ```  Then when the `mappings` endpoint is invoked then the  `context.application.mappings.servlet` correctly contains that servlet information. However, under `context.application.mappings.dispatcherServlets` only the `dispatcherServlet` and not my custom servlet mappings are displayed.  It would be good if `ServletRegistrationBean`(s) are also considered as part of the `MappingsEndpoint`</body>
		<created>2018-05-15 20:24:51</created>
		<closed>2018-07-10 15:08:08</closed>
	</bug>
	<bug>
		<id>13160</id>
		<title>Cannot initialize Quartz with scripts containing custom prefix comment </title>
		<body>Some quartz initialization scripts contain a different symbol for comments and users of such stores won't be able to initialize the datasource on startup.  We should provide a way to customize the prefix comment.  See also #13041 </body>
		<created>2018-05-14 09:33:24</created>
		<closed>2018-05-14 09:33:34</closed>
	</bug>
	<bug>
		<id>13155</id>
		<title>Database migrations may not have run before JdbcTemplate is used</title>
		<body>Using Spring Boot 2.0.2.RELEASE I set up a simple project that uses Flyway for migrations and JDBC template for accessing the DB. I expect all Flyway migrations to finish running _before_ I can use the datasource. However, I noticed that PostConstruct runs before Flyway migrations. That means I access the _old_ version of the schema, causing application failures.  As mentioned [here](https://github.com/spring-projects/spring-boot/issues/8649), one may annotate the component that uses JdbcTemplate with: `@DependsOn({"flyway", "flywayInitializer"})`, but this is cumbersome and error prone - it is easy to forget to do so, and I don't see a reason this shouldn't be the default behaviour.  The attached project is a minimal Spring Boot application with a single component that uses the database in its PostConstruct method. The output shows that PostConstruct is called _before_ Flyway runs.  [demo-4.zip](https://github.com/spring-projects/spring-boot/files/1998477/demo-4.zip) </body>
		<created>2018-05-13 13:17:29</created>
		<closed>2018-07-11 09:24:26</closed>
	</bug>
	<bug>
		<id>13154</id>
		<title>spring-boot-autoconfigure makes direct use of the JPA API but the dependency isn't managed</title>
		<body>yes, this is pulled in by hibernate, but if you're writing a module (think jigsaw) that needs to expose a JPA api as part of its public api. You may wish to do this to create things like specifications that depend on the criteria api, or entities, and have them isolated without full hibernate access.  ``` &gt; Task :compileJava UP-TO-DATE Errors occurred while build effective model from C:\Users\xeno\.gradle\caches\modules-2\files-2.1\com.xenoterracide.entities\entities-jpa\0.2.0-SNAPSHOT\f61290a7e1a7460dfcc92591cc8eb027d4af1ee2\entities-jpa-0.2.0-SNAPSHOT.pom:     'dependencies.dependency.version' for org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar is missing. in com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT Errors occurred while build effective model from C:\Users\xeno\.gradle\caches\modules-2\files-2.1\com.xenoterracide.rpf\sec\0.1.0-SNAPSHOT\f66c6ce4a9f182d95b8dc39db36f959c77723151\sec-0.1.0-SNAPSHOT.pom:     'dependencies.dependency.version' for org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar is missing. in com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT ``` here's the deps of the dependent module ```  ./gradlew dependencies  &gt; Task :dependencies  ------------------------------------------------------------ Root project - Registration ------------------------------------------------------------  annotationProcessor - Annotation processors and their dependencies for source set 'main'. No dependencies  api - API dependencies for source set 'main'. (n) No dependencies  apiElements - API elements for main. (n) No dependencies  archives - Configuration for archive artifacts. No dependencies  checkstyle - The Checkstyle libraries to be used for this project. \--- com.puppycrawl.tools:checkstyle:8.10      +--- antlr:antlr:2.7.7      +--- org.antlr:antlr4-runtime:4.7.1      +--- commons-beanutils:commons-beanutils:1.9.3      |    \--- commons-collections:commons-collections:3.2.2      +--- commons-cli:commons-cli:1.4      +--- com.google.guava:guava:24.1-jre      |    +--- com.google.code.findbugs:jsr305:1.3.9      |    +--- org.checkerframework:checker-compat-qual:2.0.0      |    +--- com.google.errorprone:error_prone_annotations:2.1.3      |    +--- com.google.j2objc:j2objc-annotations:1.1      |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14      \--- net.sf.saxon:Saxon-HE:9.8.0-11  compile - Dependencies for source set 'main' (deprecated, use 'implementation ' instead). No dependencies  compileClasspath - Compile classpath for source set 'main'. Errors occurred while build effective model from C:\Users\xeno\.gradle\caches\modules-2\files-2.1\com.xenoterracide.entities\entities-jpa\0.2.0-SNAPSHOT\f61290a7e1a7460dfcc92591cc8eb027d4af1ee2\entities-jpa-0.2.0-SNAPSHOT.pom:     'dependencies.dependency.version' for org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar is missing. in com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT Errors occurred while build effective model from C:\Users\xeno\.gradle\caches\modules-2\files-2.1\com.xenoterracide.rpf\sec\0.1.0-SNAPSHOT\f66c6ce4a9f182d95b8dc39db36f959c77723151\sec-0.1.0-SNAPSHOT.pom:     'dependencies.dependency.version' for org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar is missing. in com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT +--- com.google.errorprone:error_prone_annotations:latest.release -&gt; 2.3.1 +--- com.google.code.findbugs:jsr305:latest.release -&gt; 3.0.2 +--- com.xenoterracide:util:0.1.4-SNAPSHOT |    +--- org.slf4j:slf4j-api:1.7.25 |    \--- com.google.guava:guava:latest.release -&gt; 25.0-jre |         +--- com.google.code.findbugs:jsr305:1.3.9 -&gt; 3.0.2 |         +--- org.checkerframework:checker-compat-qual:2.0.0 |         +--- com.google.errorprone:error_prone_annotations:2.1.3 -&gt; 2.3.1 |         +--- com.google.j2objc:j2objc-annotations:1.1 |         \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT |    \--- org.springframework:spring-core:5.0.6.RELEASE |         \--- org.springframework:spring-jcl:5.0.6.RELEASE +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE |    |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.aspectj:aspectjrt:1.8.12 -&gt; 1.8.13 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-data-rest:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.yaml:snakeyaml:1.19 |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |    |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |    |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -&gt; 0.24.0.RELEASE |    |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |    |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -&gt; 1.7.25 |    |         |    +--- org.atteo:evo-inflector:1.2.2 |    |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |    |         |    \--- org.slf4j:slf4j-api:1.7.25 |    |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-security:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |    |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |         \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    \--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.springframework.boot:spring-boot-starter-data-rest -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-web -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-hateoas -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE (*) |    +--- org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE (*) |    \--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE (*) \--- org.apache.commons:commons-lang3 -&gt; 3.7  compileOnly - Compile only dependencies for source set 'main'. +--- com.google.errorprone:error_prone_annotations:latest.release -&gt; 2.3.1 \--- com.google.code.findbugs:jsr305:latest.release -&gt; 3.0.2  default - Configuration for default artifacts. +--- com.xenoterracide:util:0.1.4-SNAPSHOT |    +--- org.slf4j:slf4j-api:1.7.25 |    \--- com.google.guava:guava:latest.release -&gt; 25.0-jre |         +--- com.google.code.findbugs:jsr305:1.3.9 |         +--- org.checkerframework:checker-compat-qual:2.0.0 |         +--- com.google.errorprone:error_prone_annotations:2.1.3 |         +--- com.google.j2objc:j2objc-annotations:1.1 |         \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT |    \--- org.springframework:spring-core:5.0.6.RELEASE |         \--- org.springframework:spring-jcl:5.0.6.RELEASE +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE |    |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.aspectj:aspectjrt:1.8.12 -&gt; 1.8.13 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-data-rest:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.yaml:snakeyaml:1.19 |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |    |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |    |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -&gt; 0.24.0.RELEASE |    |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |    |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -&gt; 1.7.25 |    |         |    +--- org.atteo:evo-inflector:1.2.2 |    |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |    |         |    \--- org.slf4j:slf4j-api:1.7.25 |    |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-security:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |    |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |         \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    \--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.springframework.boot:spring-boot-starter-data-rest -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-web -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-hateoas -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE (*) |    +--- org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE (*) |    \--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE (*) +--- org.apache.commons:commons-lang3 -&gt; 3.7 \--- com.xenoterracide.rpf:http-config:0.1.0-SNAPSHOT      +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT (*)      +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*)      +--- org.springframework:spring-web:5.0.6.RELEASE (*)      +--- javax.servlet:javax.servlet-api:3.1.0      \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE (*)  errorprone +--- com.google.guava:guava:latest.release -&gt; 25.0-jre |    +--- com.google.code.findbugs:jsr305:1.3.9 -&gt; 3.0.0 |    +--- org.checkerframework:checker-compat-qual:2.0.0 |    +--- com.google.errorprone:error_prone_annotations:2.1.3 -&gt; 2.3.1 |    +--- com.google.j2objc:j2objc-annotations:1.1 |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 \--- com.google.errorprone:error_prone_core:latest.release -&gt; 2.3.1      +--- com.google.errorprone:error_prone_annotation:2.3.1      |    \--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.errorprone:error_prone_type_annotations:2.3.1      +--- com.google.errorprone:error_prone_check_api:2.3.1      |    +--- com.google.errorprone:error_prone_annotation:2.3.1 (*)      |    +--- com.google.code.findbugs:jsr305:3.0.0      |    +--- org.checkerframework:dataflow:2.5.0      |    |    +--- org.checkerframework:checker-qual:2.5.0      |    |    \--- org.checkerframework:javacutil:2.5.0      |    |         \--- org.checkerframework:checker-qual:2.5.0      |    +--- com.google.errorprone:javac:9+181-r4173-1      |    +--- com.googlecode.java-diff-utils:diffutils:1.3.0      |    +--- com.google.errorprone:error_prone_annotations:2.3.1      |    \--- com.github.kevinstern:software-and-algorithms:1.0      +--- com.github.stephenc.jcip:jcip-annotations:1.0-1      +--- org.pcollections:pcollections:2.1.2      +--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.auto:auto-common:0.10      |    \--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.code.findbugs:jFormatString:3.0.0      +--- com.google.code.findbugs:jsr305:3.0.0      +--- org.checkerframework:dataflow:2.5.0 (*)      +--- com.google.errorprone:javac:9+181-r4173-1      \--- com.google.errorprone:error_prone_annotations:2.3.1  implementation - Implementation only dependencies for source set 'main'. (n) +--- com.xenoterracide:util:0.1.4-SNAPSHOT (n) +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT (n) +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (n) +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (n) +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (n) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT (n) +--- org.springframework.boot:spring-boot-starter-data-jpa (n) +--- org.springframework.boot:spring-boot-starter-data-rest (n) +--- org.springframework.boot:spring-boot-starter-web (n) +--- org.springframework.boot:spring-boot-starter-hateoas (n) \--- org.apache.commons:commons-lang3 (n)  runtime - Runtime dependencies for source set 'main' (deprecated, use 'runtimeOnly ' instead). No dependencies  runtimeClasspath - Runtime classpath of source set 'main'. +--- com.xenoterracide:util:0.1.4-SNAPSHOT |    +--- org.slf4j:slf4j-api:1.7.25 |    \--- com.google.guava:guava:latest.release -&gt; 25.0-jre |         +--- com.google.code.findbugs:jsr305:1.3.9 |         +--- org.checkerframework:checker-compat-qual:2.0.0 |         +--- com.google.errorprone:error_prone_annotations:2.1.3 |         +--- com.google.j2objc:j2objc-annotations:1.1 |         \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT |    \--- org.springframework:spring-core:5.0.6.RELEASE |         \--- org.springframework:spring-jcl:5.0.6.RELEASE +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE |    |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.aspectj:aspectjrt:1.8.12 -&gt; 1.8.13 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-data-rest:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.yaml:snakeyaml:1.19 |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |    |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |    |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -&gt; 0.24.0.RELEASE |    |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |    |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -&gt; 1.7.25 |    |         |    +--- org.atteo:evo-inflector:1.2.2 |    |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |    |         |    \--- org.slf4j:slf4j-api:1.7.25 |    |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-security:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |    |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |         \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    \--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.springframework.boot:spring-boot-starter-data-rest -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-web -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-hateoas -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE (*) |    +--- org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE (*) |    \--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE (*) +--- org.apache.commons:commons-lang3 -&gt; 3.7 \--- com.xenoterracide.rpf:http-config:0.1.0-SNAPSHOT      +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT (*)      +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*)      +--- org.springframework:spring-web:5.0.6.RELEASE (*)      +--- javax.servlet:javax.servlet-api:3.1.0      \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE (*)  runtimeElements - Elements of runtime for main. (n) No dependencies  runtimeOnly - Runtime only dependencies for source set 'main'. (n) \--- com.xenoterracide.rpf:http-config:0.1.0-SNAPSHOT (n)  spotbugs - The SpotBugs libraries to be used for this project. \--- com.github.spotbugs:spotbugs:3.1.3      +--- org.ow2.asm:asm:6.1.1      +--- org.ow2.asm:asm-analysis:6.1.1      |    \--- org.ow2.asm:asm-tree:6.1.1      |         \--- org.ow2.asm:asm:6.1.1      +--- org.ow2.asm:asm-commons:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    +--- org.ow2.asm:asm-tree:6.1.1 (*)      |    \--- org.ow2.asm:asm-analysis:6.1.1 (*)      +--- org.ow2.asm:asm-tree:6.1.1 (*)      +--- org.ow2.asm:asm-util:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    +--- org.ow2.asm:asm-tree:6.1.1 (*)      |    \--- org.ow2.asm:asm-analysis:6.1.1 (*)      +--- org.ow2.asm:asm-xml:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    \--- org.ow2.asm:asm-util:6.1.1 (*)      +--- org.apache.bcel:bcel:6.2      +--- net.jcip:jcip-annotations:1.0      +--- org.dom4j:dom4j:2.1.0      |    \--- jaxen:jaxen:1.1.6      +--- jaxen:jaxen:1.1.6      +--- commons-lang:commons-lang:2.6      +--- com.google.code.findbugs:jFormatString:3.0.0      \--- com.github.spotbugs:spotbugs-annotations:3.1.3           \--- com.google.code.findbugs:jsr305:3.0.2  spotbugsPlugins - The SpotBugs plugins to be used for this project. No dependencies  testAnnotationProcessor - Annotation processors and their dependencies for source set 'test'. No dependencies  testCompile - Dependencies for source set 'test' (deprecated, use 'testImplementation ' instead). No dependencies  testCompileClasspath - Compile classpath for source set 'test'. +--- com.xenoterracide:util:0.1.4-SNAPSHOT |    +--- org.slf4j:slf4j-api:1.7.25 |    \--- com.google.guava:guava:latest.release -&gt; 25.0-jre |         +--- com.google.code.findbugs:jsr305:1.3.9 |         +--- org.checkerframework:checker-compat-qual:2.0.0 |         +--- com.google.errorprone:error_prone_annotations:2.1.3 |         +--- com.google.j2objc:j2objc-annotations:1.1 |         \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT |    \--- org.springframework:spring-core:5.0.6.RELEASE |         \--- org.springframework:spring-jcl:5.0.6.RELEASE +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE |    |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.aspectj:aspectjrt:1.8.12 -&gt; 1.8.13 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-data-rest:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.yaml:snakeyaml:1.19 |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |    |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |    |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -&gt; 0.24.0.RELEASE |    |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |    |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -&gt; 1.7.25 |    |         |    +--- org.atteo:evo-inflector:1.2.2 |    |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |    |         |    \--- org.slf4j:slf4j-api:1.7.25 |    |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-security:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |    |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |         \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    \--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.springframework.boot:spring-boot-starter-data-rest -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-web -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-hateoas -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE (*) |    +--- org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE (*) |    \--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE (*) +--- org.apache.commons:commons-lang3 -&gt; 3.7 +--- org.junit.jupiter:junit-jupiter-api:5.+ -&gt; 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.platform:junit-platform-commons:1.1.1 |         \--- org.apiguardian:apiguardian-api:1.0.0 +--- org.assertj:assertj-core:3.+ -&gt; 3.9.1 +--- org.springframework.boot:spring-boot-starter-test -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-test-autoconfigure:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE (*) |    |    \--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE (*) |    +--- com.jayway.jsonpath:json-path:2.4.0 |    |    +--- net.minidev:json-smart:2.3 |    |    |    \--- net.minidev:accessors-smart:1.2 |    |    |         \--- org.ow2.asm:asm:5.0.4 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- junit:junit:4.12 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.assertj:assertj-core:3.9.1 |    +--- org.mockito:mockito-core:2.15.0 |    |    +--- net.bytebuddy:byte-buddy:1.7.9 -&gt; 1.7.11 |    |    +--- net.bytebuddy:byte-buddy-agent:1.7.9 -&gt; 1.7.11 |    |    \--- org.objenesis:objenesis:2.6 |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- org.hamcrest:hamcrest-library:1.3 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.skyscreamer:jsonassert:1.5.0 |    |    \--- com.vaadin.external.google:android-json:0.0.20131108.vaadin1 |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-test:5.0.6.RELEASE |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.xmlunit:xmlunit-core:2.5.1 +--- org.springframework.security:spring-security-config -&gt; 5.0.5.RELEASE (*) +--- com.google.code.gson:gson -&gt; 2.8.4 +--- org.hamcrest:hamcrest-library -&gt; 1.3 (*) +--- com.jcabi:jcabi-matchers:1.+ -&gt; 1.4 |    +--- org.hamcrest:hamcrest-library:1.3 (*) |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- com.jcabi:jcabi-log:0.17.2 |    |    +--- org.slf4j:slf4j-api:1.7.5 -&gt; 1.7.25 |    |    \--- com.jcabi:jcabi-aspects:0.22 |    |         +--- org.aspectj:aspectjrt:1.8.4 -&gt; 1.8.13 |    |         \--- javax.validation:validation-api:1.1.0.Final -&gt; 2.0.1.Final |    \--- org.glassfish.jaxb:jaxb-runtime:2.2.11 |         +--- org.glassfish.jaxb:jaxb-core:2.2.11 |         |    +--- javax.xml.bind:jaxb-api:2.2.12-b140109.1041 -&gt; 2.3.0 |         |    +--- org.glassfish.jaxb:txw2:2.2.11 |         |    \--- com.sun.istack:istack-commons-runtime:2.21 |         +--- org.jvnet.staxex:stax-ex:1.7.7 |         \--- com.sun.xml.fastinfoset:FastInfoset:1.2.13 \--- nl.jqno.equalsverifier:equalsverifier:2.+ -&gt; 2.4.6  testCompileOnly - Compile only dependencies for source set 'test'. No dependencies  testImplementation - Implementation only dependencies for source set 'test'. (n) +--- org.junit.jupiter:junit-jupiter-api:5.+ (n) +--- org.assertj:assertj-core:3.+ (n) +--- org.springframework.boot:spring-boot-starter-test (n) +--- org.springframework.security:spring-security-config (n) +--- com.google.code.gson:gson (n) +--- org.hamcrest:hamcrest-library (n) +--- com.jcabi:jcabi-matchers:1.+ (n) \--- nl.jqno.equalsverifier:equalsverifier:2.+ (n)  testRuntime - Runtime dependencies for source set 'test' (deprecated, use 'testRuntimeOnly ' instead). No dependencies  testRuntimeClasspath - Runtime classpath of source set 'test'. +--- com.xenoterracide:util:0.1.4-SNAPSHOT |    +--- org.slf4j:slf4j-api:1.7.25 |    \--- com.google.guava:guava:latest.release -&gt; 25.0-jre |         +--- com.google.code.findbugs:jsr305:1.3.9 |         +--- org.checkerframework:checker-compat-qual:2.0.0 |         +--- com.google.errorprone:error_prone_annotations:2.1.3 |         +--- com.google.j2objc:j2objc-annotations:1.1 |         \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT |    \--- org.springframework:spring-core:5.0.6.RELEASE |         \--- org.springframework:spring-jcl:5.0.6.RELEASE +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final |    |    +--- javax.validation:validation-api:2.0.1.Final |    |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    |    \--- com.fasterxml:classmate:1.3.4 |    \--- org.hibernate:hibernate-core:5.2.17.Final |         +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |         +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |         +--- org.javassist:javassist:3.22.0-GA |         +--- antlr:antlr:2.7.7 |         +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |         +--- org.jboss:jandex:2.0.3.Final |         +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |         +--- dom4j:dom4j:1.6.1 |         \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |              \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT |    +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (*) |    +--- com.xenoterracide.entities:entities-jpa:0.2.0-SNAPSHOT (*) |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-context:5.0.6.RELEASE |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE |    |         \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-tx:5.0.6.RELEASE |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    +--- org.aspectj:aspectjrt:1.8.12 -&gt; 1.8.13 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-data-rest:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |    |    |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    \--- org.yaml:snakeyaml:1.19 |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5 |    |    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.5 |    |    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE |    |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-json:2.0.2.RELEASE (*) |    |    |    +--- org.springframework.boot:spring-boot-starter-tomcat:2.0.2.RELEASE |    |    |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    |    +--- org.apache.tomcat.embed:tomcat-embed-el:8.5.31 |    |    |    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:8.5.31 |    |    |    |         \--- org.apache.tomcat.embed:tomcat-embed-core:8.5.31 |    |    |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    |    |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-webmvc:5.0.6.RELEASE |    |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE |    |         +--- org.springframework.data:spring-data-rest-core:3.0.7.RELEASE |    |         |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |         |    +--- org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE -&gt; 0.24.0.RELEASE |    |         |    |    +--- org.springframework:spring-aop:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-beans:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-core:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-web:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-webmvc:4.3.12.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |         |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |         |    +--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE |    |         |    |    +--- org.springframework:spring-beans:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-context:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    +--- org.springframework:spring-aop:4.0.9.RELEASE -&gt; 5.0.6.RELEASE (*) |    |         |    |    \--- org.slf4j:slf4j-api:1.7.10 -&gt; 1.7.25 |    |         |    +--- org.atteo:evo-inflector:1.2.2 |    |         |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5 (*) |    |         |    \--- org.slf4j:slf4j-api:1.7.25 |    |         +--- org.springframework:spring-webmvc:5.0.6.RELEASE (*) |    |         +--- com.fasterxml.jackson.core:jackson-databind:2.9.5 (*) |    |         +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    |         \--- org.slf4j:slf4j-api:1.7.25 |    +--- org.springframework.boot:spring-boot-starter-security:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework.security:spring-security-config:5.0.5.RELEASE |    |    |    +--- org.springframework.security:spring-security-core:5.0.5.RELEASE |    |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    |    \--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.springframework.security:spring-security-web:5.0.5.RELEASE |    |         +--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) |    |         +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-expression:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-web:5.0.6.RELEASE (*) |    \--- com.xenoterracide.rpf:is:0.1.0-SNAPSHOT |         \--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) +--- com.xenoterracide.rpf:sec-dtos:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0 |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.hibernate.validator:hibernate-validator:6.0.9.Final (*) |    \--- org.springframework.security:spring-security-core:5.0.5.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE (*) |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.springframework.boot:spring-boot-starter-data-rest -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-web -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-hateoas -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE (*) |    +--- org.springframework.hateoas:spring-hateoas:0.24.0.RELEASE (*) |    \--- org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE (*) +--- org.apache.commons:commons-lang3 -&gt; 3.7 +--- com.xenoterracide.rpf:http-config:0.1.0-SNAPSHOT |    +--- com.xenoterracide.rpf:constants:0.1.0-SNAPSHOT (*) |    +--- com.xenoterracide.rpf:sec:0.1.0-SNAPSHOT (*) |    +--- org.springframework:spring-web:5.0.6.RELEASE (*) |    +--- javax.servlet:javax.servlet-api:3.1.0 |    \--- org.springframework.data:spring-data-rest-webmvc:3.0.7.RELEASE (*) +--- org.junit.jupiter:junit-jupiter-api:5.+ -&gt; 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.platform:junit-platform-commons:1.1.1 |         \--- org.apiguardian:apiguardian-api:1.0.0 +--- org.assertj:assertj-core:3.+ -&gt; 3.9.1 +--- org.springframework.boot:spring-boot-starter-test -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    +--- org.springframework.boot:spring-boot-test-autoconfigure:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE (*) |    |    \--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE (*) |    +--- com.jayway.jsonpath:json-path:2.4.0 |    |    +--- net.minidev:json-smart:2.3 |    |    |    \--- net.minidev:accessors-smart:1.2 |    |    |         \--- org.ow2.asm:asm:5.0.4 |    |    \--- org.slf4j:slf4j-api:1.7.25 |    +--- junit:junit:4.12 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.assertj:assertj-core:3.9.1 |    +--- org.mockito:mockito-core:2.15.0 |    |    +--- net.bytebuddy:byte-buddy:1.7.9 -&gt; 1.7.11 |    |    +--- net.bytebuddy:byte-buddy-agent:1.7.9 -&gt; 1.7.11 |    |    \--- org.objenesis:objenesis:2.6 |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- org.hamcrest:hamcrest-library:1.3 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.skyscreamer:jsonassert:1.5.0 |    |    \--- com.vaadin.external.google:android-json:0.0.20131108.vaadin1 |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.springframework:spring-test:5.0.6.RELEASE |    |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.xmlunit:xmlunit-core:2.5.1 +--- org.springframework.security:spring-security-config -&gt; 5.0.5.RELEASE (*) +--- com.google.code.gson:gson -&gt; 2.8.4 +--- org.hamcrest:hamcrest-library -&gt; 1.3 (*) +--- com.jcabi:jcabi-matchers:1.+ -&gt; 1.4 |    +--- org.hamcrest:hamcrest-library:1.3 (*) |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- com.jcabi:jcabi-log:0.17.2 |    |    +--- org.slf4j:slf4j-api:1.7.5 -&gt; 1.7.25 |    |    \--- com.jcabi:jcabi-aspects:0.22 |    |         +--- org.aspectj:aspectjrt:1.8.4 -&gt; 1.8.13 |    |         \--- javax.validation:validation-api:1.1.0.Final -&gt; 2.0.1.Final |    \--- org.glassfish.jaxb:jaxb-runtime:2.2.11 |         +--- org.glassfish.jaxb:jaxb-core:2.2.11 |         |    +--- javax.xml.bind:jaxb-api:2.2.12-b140109.1041 -&gt; 2.3.0 |         |    +--- org.glassfish.jaxb:txw2:2.2.11 |         |    \--- com.sun.istack:istack-commons-runtime:2.21 |         +--- org.jvnet.staxex:stax-ex:1.7.7 |         \--- com.sun.xml.fastinfoset:FastInfoset:1.2.13 +--- nl.jqno.equalsverifier:equalsverifier:2.+ -&gt; 2.4.6 +--- org.junit.jupiter:junit-jupiter-engine:5.+ -&gt; 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.junit.platform:junit-platform-engine:1.1.1 |    |    +--- org.apiguardian:apiguardian-api:1.0.0 |    |    +--- org.junit.platform:junit-platform-commons:1.1.1 (*) |    |    \--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.jupiter:junit-jupiter-api:5.1.1 (*) \--- com.h2database:h2 -&gt; 1.4.197  testRuntimeOnly - Runtime only dependencies for source set 'test'. (n) +--- org.junit.jupiter:junit-jupiter-engine:5.+ (n) \--- com.h2database:h2 (n)  (*) - dependencies omitted (listed previously)  (n) - Not resolved (configuration is not meant to be resolved) ```  the dep that pulls it in  ```  &gt; Task :dependencies  ------------------------------------------------------------ Root project - JPA implementation ------------------------------------------------------------  annotationProcessor - Annotation processors and their dependencies for source set 'main'. No dependencies  api - API dependencies for source set 'main'. (n) +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT (n) +--- org.springframework.data:spring-data-commons (n) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api (n) \--- org.hibernate.validator:hibernate-validator (n)  apiElements - API elements for main. (n) No dependencies  archives - Configuration for archive artifacts. No dependencies  checkstyle - The Checkstyle libraries to be used for this project. \--- com.puppycrawl.tools:checkstyle:8.10      +--- antlr:antlr:2.7.7      +--- org.antlr:antlr4-runtime:4.7.1      +--- commons-beanutils:commons-beanutils:1.9.3      |    \--- commons-collections:commons-collections:3.2.2      +--- commons-cli:commons-cli:1.4      +--- com.google.guava:guava:24.1-jre      |    +--- com.google.code.findbugs:jsr305:1.3.9      |    +--- org.checkerframework:checker-compat-qual:2.0.0      |    +--- com.google.errorprone:error_prone_annotations:2.1.3      |    +--- com.google.j2objc:j2objc-annotations:1.1      |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14      \--- net.sf.saxon:Saxon-HE:9.8.0-11  compile - Dependencies for source set 'main' (deprecated, use 'implementation ' instead). No dependencies  compileClasspath - Compile classpath for source set 'main'. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.data:spring-data-commons -&gt; 2.0.7.RELEASE (*) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final +--- org.hibernate.validator:hibernate-validator -&gt; 6.0.9.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    \--- com.fasterxml:classmate:1.3.4 +--- com.google.errorprone:error_prone_annotations:latest.release -&gt; 2.3.1 +--- com.google.code.findbugs:jsr305:latest.release -&gt; 3.0.2 \--- org.hibernate:hibernate-core -&gt; 5.2.17.Final      +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final      +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final      +--- org.javassist:javassist:3.22.0-GA      +--- antlr:antlr:2.7.7      +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final      +--- org.jboss:jandex:2.0.3.Final      +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4      +--- dom4j:dom4j:1.6.1      \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final           \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final  compileOnly - Compile only dependencies for source set 'main'. +--- com.google.errorprone:error_prone_annotations:latest.release -&gt; 2.3.1 \--- com.google.code.findbugs:jsr305:latest.release -&gt; 3.0.2  default - Configuration for default artifacts. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.data:spring-data-commons -&gt; 2.0.7.RELEASE (*) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final +--- org.hibernate.validator:hibernate-validator -&gt; 6.0.9.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    \--- com.fasterxml:classmate:1.3.4 \--- org.hibernate:hibernate-core -&gt; 5.2.17.Final      +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final      +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final      +--- org.javassist:javassist:3.22.0-GA      +--- antlr:antlr:2.7.7      +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final      +--- org.jboss:jandex:2.0.3.Final      +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4      +--- dom4j:dom4j:1.6.1      \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final           \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final  errorprone +--- com.google.guava:guava:latest.release -&gt; 25.0-jre |    +--- com.google.code.findbugs:jsr305:1.3.9 -&gt; 3.0.0 |    +--- org.checkerframework:checker-compat-qual:2.0.0 |    +--- com.google.errorprone:error_prone_annotations:2.1.3 -&gt; 2.3.1 |    +--- com.google.j2objc:j2objc-annotations:1.1 |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14 \--- com.google.errorprone:error_prone_core:latest.release -&gt; 2.3.1      +--- com.google.errorprone:error_prone_annotation:2.3.1      |    \--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.errorprone:error_prone_type_annotations:2.3.1      +--- com.google.errorprone:error_prone_check_api:2.3.1      |    +--- com.google.errorprone:error_prone_annotation:2.3.1 (*)      |    +--- com.google.code.findbugs:jsr305:3.0.0      |    +--- org.checkerframework:dataflow:2.5.0      |    |    +--- org.checkerframework:checker-qual:2.5.0      |    |    \--- org.checkerframework:javacutil:2.5.0      |    |         \--- org.checkerframework:checker-qual:2.5.0      |    +--- com.google.errorprone:javac:9+181-r4173-1      |    +--- com.googlecode.java-diff-utils:diffutils:1.3.0      |    +--- com.google.errorprone:error_prone_annotations:2.3.1      |    \--- com.github.kevinstern:software-and-algorithms:1.0      +--- com.github.stephenc.jcip:jcip-annotations:1.0-1      +--- org.pcollections:pcollections:2.1.2      +--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.auto:auto-common:0.10      |    \--- com.google.guava:guava:23.5-jre -&gt; 25.0-jre (*)      +--- com.google.code.findbugs:jFormatString:3.0.0      +--- com.google.code.findbugs:jsr305:3.0.0      +--- org.checkerframework:dataflow:2.5.0 (*)      +--- com.google.errorprone:javac:9+181-r4173-1      \--- com.google.errorprone:error_prone_annotations:2.3.1  implementation - Implementation only dependencies for source set 'main'. (n) \--- org.hibernate:hibernate-core (n)  runtime - Runtime dependencies for source set 'main' (deprecated, use 'runtimeOnly ' instead). No dependencies  runtimeClasspath - Runtime classpath of source set 'main'. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.data:spring-data-commons -&gt; 2.0.7.RELEASE (*) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final +--- org.hibernate.validator:hibernate-validator -&gt; 6.0.9.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    \--- com.fasterxml:classmate:1.3.4 \--- org.hibernate:hibernate-core -&gt; 5.2.17.Final      +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final      +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final      +--- org.javassist:javassist:3.22.0-GA      +--- antlr:antlr:2.7.7      +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final      +--- org.jboss:jandex:2.0.3.Final      +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4      +--- dom4j:dom4j:1.6.1      \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final           \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final  runtimeElements - Elements of runtime for main. (n) No dependencies  runtimeOnly - Runtime only dependencies for source set 'main'. (n) No dependencies  spotbugs - The SpotBugs libraries to be used for this project. \--- com.github.spotbugs:spotbugs:3.1.3      +--- org.ow2.asm:asm:6.1.1      +--- org.ow2.asm:asm-analysis:6.1.1      |    \--- org.ow2.asm:asm-tree:6.1.1      |         \--- org.ow2.asm:asm:6.1.1      +--- org.ow2.asm:asm-commons:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    +--- org.ow2.asm:asm-tree:6.1.1 (*)      |    \--- org.ow2.asm:asm-analysis:6.1.1 (*)      +--- org.ow2.asm:asm-tree:6.1.1 (*)      +--- org.ow2.asm:asm-util:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    +--- org.ow2.asm:asm-tree:6.1.1 (*)      |    \--- org.ow2.asm:asm-analysis:6.1.1 (*)      +--- org.ow2.asm:asm-xml:6.1.1      |    +--- org.ow2.asm:asm:6.1.1      |    \--- org.ow2.asm:asm-util:6.1.1 (*)      +--- org.apache.bcel:bcel:6.2      +--- net.jcip:jcip-annotations:1.0      +--- org.dom4j:dom4j:2.1.0      |    \--- jaxen:jaxen:1.1.6      +--- jaxen:jaxen:1.1.6      +--- commons-lang:commons-lang:2.6      +--- com.google.code.findbugs:jFormatString:3.0.0      \--- com.github.spotbugs:spotbugs-annotations:3.1.3           \--- com.google.code.findbugs:jsr305:3.0.2  spotbugsPlugins - The SpotBugs plugins to be used for this project. No dependencies  testAnnotationProcessor - Annotation processors and their dependencies for source set 'test'. No dependencies  testCompile - Dependencies for source set 'test' (deprecated, use 'testImplementation ' instead). No dependencies  testCompileClasspath - Compile classpath for source set 'test'. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.data:spring-data-commons -&gt; 2.0.7.RELEASE (*) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final +--- org.hibernate.validator:hibernate-validator -&gt; 6.0.9.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    \--- com.fasterxml:classmate:1.3.4 +--- org.hibernate:hibernate-core -&gt; 5.2.17.Final |    +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |    +--- org.javassist:javassist:3.22.0-GA |    +--- antlr:antlr:2.7.7 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |    +--- org.jboss:jandex:2.0.3.Final |    +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |    +--- dom4j:dom4j:1.6.1 |    \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |         \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- org.junit.jupiter:junit-jupiter-api:5.+ -&gt; 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.platform:junit-platform-commons:1.1.1 |         \--- org.apiguardian:apiguardian-api:1.0.0 +--- org.assertj:assertj-core:3.9.1 +--- com.jcabi:jcabi-matchers:1.+ -&gt; 1.4 |    +--- org.hamcrest:hamcrest-library:1.3 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- com.jcabi:jcabi-log:0.17.2 |    |    +--- org.slf4j:slf4j-api:1.7.5 -&gt; 1.7.25 |    |    \--- com.jcabi:jcabi-aspects:0.22 |    |         +--- org.aspectj:aspectjrt:1.8.4 -&gt; 1.8.13 |    |         \--- javax.validation:validation-api:1.1.0.Final -&gt; 2.0.1.Final |    \--- org.glassfish.jaxb:jaxb-runtime:2.2.11 |         +--- org.glassfish.jaxb:jaxb-core:2.2.11 |         |    +--- javax.xml.bind:jaxb-api:2.2.12-b140109.1041 -&gt; 2.3.0 |         |    +--- org.glassfish.jaxb:txw2:2.2.11 |         |    \--- com.sun.istack:istack-commons-runtime:2.21 |         +--- org.jvnet.staxex:stax-ex:1.7.7 |         \--- com.sun.xml.fastinfoset:FastInfoset:1.2.13 +--- nl.jqno.equalsverifier:equalsverifier:2.+ -&gt; 2.4.6 +--- org.springframework:spring-test -&gt; 5.0.6.RELEASE |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) +--- org.springframework.boot:spring-boot-test-autoconfigure -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-context:5.0.6.RELEASE |    |              +--- org.springframework:spring-aop:5.0.6.RELEASE |    |              |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |              |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |              +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |              +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |              \--- org.springframework:spring-expression:5.0.6.RELEASE |    |                   \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |         \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-test -&gt; 2.0.2.RELEASE (*) \--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE      +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE      |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*)      |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE (*)      |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE      |    |    +--- ch.qos.logback:logback-classic:1.2.3      |    |    |    +--- ch.qos.logback:logback-core:1.2.3      |    |    |    \--- org.slf4j:slf4j-api:1.7.25      |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0      |    |    |    +--- org.slf4j:slf4j-api:1.7.25      |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0      |    |    \--- org.slf4j:jul-to-slf4j:1.7.25      |    |         \--- org.slf4j:slf4j-api:1.7.25      |    +--- javax.annotation:javax.annotation-api:1.3.2      |    +--- org.springframework:spring-core:5.0.6.RELEASE (*)      |    \--- org.yaml:snakeyaml:1.19      +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE      |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*)      |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*)      |    \--- org.aspectj:aspectjweaver:1.8.13      +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE      |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*)      |    +--- com.zaxxer:HikariCP:2.7.9      |    |    \--- org.slf4j:slf4j-api:1.7.25      |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE      |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*)      |         +--- org.springframework:spring-core:5.0.6.RELEASE (*)      |         \--- org.springframework:spring-tx:5.0.6.RELEASE      |              +--- org.springframework:spring-beans:5.0.6.RELEASE (*)      |              \--- org.springframework:spring-core:5.0.6.RELEASE (*)      +--- org.hibernate:hibernate-core:5.2.17.Final (*)      +--- javax.transaction:javax.transaction-api:1.2      +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE      |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*)      |    +--- org.springframework:spring-orm:5.0.6.RELEASE      |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*)      |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*)      |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE (*)      |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*)      |    +--- org.springframework:spring-context:5.0.6.RELEASE (*)      |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*)      |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*)      |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*)      |    +--- org.springframework:spring-core:5.0.6.RELEASE (*)      |    \--- org.slf4j:slf4j-api:1.7.25      \--- org.springframework:spring-aspects:5.0.6.RELEASE           \--- org.aspectj:aspectjweaver:1.8.13  testCompileOnly - Compile only dependencies for source set 'test'. No dependencies  testImplementation - Implementation only dependencies for source set 'test'. (n) +--- org.junit.jupiter:junit-jupiter-api:5.+ (n) +--- org.assertj:assertj-core:3.9.1 (n) +--- com.jcabi:jcabi-matchers:1.+ (n) +--- nl.jqno.equalsverifier:equalsverifier:2.+ (n) +--- org.springframework:spring-test (n) +--- org.springframework.boot:spring-boot-test-autoconfigure (n) +--- org.springframework.boot:spring-boot-test (n) \--- org.springframework.boot:spring-boot-starter-data-jpa (n)  testRuntime - Runtime dependencies for source set 'test' (deprecated, use 'testRuntimeOnly ' instead). +--- org.apache.tomcat.embed:tomcat-embed-el -&gt; 8.5.31 \--- com.h2database:h2 -&gt; 1.4.197  testRuntimeClasspath - Runtime classpath of source set 'test'. +--- com.xenoterracide.entities:entities-api:0.2.1-SNAPSHOT |    \--- org.springframework.data:spring-data-commons:2.0.7.RELEASE |         +--- org.springframework:spring-core:5.0.6.RELEASE |         |    \--- org.springframework:spring-jcl:5.0.6.RELEASE |         +--- org.springframework:spring-beans:5.0.6.RELEASE |         |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |         \--- org.slf4j:slf4j-api:1.7.25 +--- org.springframework.data:spring-data-commons -&gt; 2.0.7.RELEASE (*) +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api -&gt; 1.0.0.Final +--- org.hibernate.validator:hibernate-validator -&gt; 6.0.9.Final |    +--- javax.validation:validation-api:2.0.1.Final |    +--- org.jboss.logging:jboss-logging:3.3.2.Final |    \--- com.fasterxml:classmate:1.3.4 +--- org.hibernate:hibernate-core -&gt; 5.2.17.Final |    +--- org.jboss.logging:jboss-logging:3.3.1.Final -&gt; 3.3.2.Final |    +--- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final |    +--- org.javassist:javassist:3.22.0-GA |    +--- antlr:antlr:2.7.7 |    +--- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final |    +--- org.jboss:jandex:2.0.3.Final |    +--- com.fasterxml:classmate:1.3.0 -&gt; 1.3.4 |    +--- dom4j:dom4j:1.6.1 |    \--- org.hibernate.common:hibernate-commons-annotations:5.0.1.Final |         \--- org.jboss.logging:jboss-logging:3.3.0.Final -&gt; 3.3.2.Final +--- org.junit.jupiter:junit-jupiter-api:5.+ -&gt; 5.1.1 |    +--- org.apiguardian:apiguardian-api:1.0.0 |    +--- org.opentest4j:opentest4j:1.0.0 |    \--- org.junit.platform:junit-platform-commons:1.1.1 |         \--- org.apiguardian:apiguardian-api:1.0.0 +--- org.assertj:assertj-core:3.9.1 +--- com.jcabi:jcabi-matchers:1.+ -&gt; 1.4 |    +--- org.hamcrest:hamcrest-library:1.3 |    |    \--- org.hamcrest:hamcrest-core:1.3 |    +--- org.hamcrest:hamcrest-core:1.3 |    +--- com.jcabi:jcabi-log:0.17.2 |    |    +--- org.slf4j:slf4j-api:1.7.5 -&gt; 1.7.25 |    |    \--- com.jcabi:jcabi-aspects:0.22 |    |         +--- org.aspectj:aspectjrt:1.8.4 -&gt; 1.8.13 |    |         \--- javax.validation:validation-api:1.1.0.Final -&gt; 2.0.1.Final |    \--- org.glassfish.jaxb:jaxb-runtime:2.2.11 |         +--- org.glassfish.jaxb:jaxb-core:2.2.11 |         |    +--- javax.xml.bind:jaxb-api:2.2.12-b140109.1041 -&gt; 2.3.0 |         |    +--- org.glassfish.jaxb:txw2:2.2.11 |         |    \--- com.sun.istack:istack-commons-runtime:2.21 |         +--- org.jvnet.staxex:stax-ex:1.7.7 |         \--- com.sun.xml.fastinfoset:FastInfoset:1.2.13 +--- nl.jqno.equalsverifier:equalsverifier:2.+ -&gt; 2.4.6 +--- org.springframework:spring-test -&gt; 5.0.6.RELEASE |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) +--- org.springframework.boot:spring-boot-test-autoconfigure -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-test:2.0.2.RELEASE |    |    \--- org.springframework.boot:spring-boot:2.0.2.RELEASE |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-context:5.0.6.RELEASE |    |              +--- org.springframework:spring-aop:5.0.6.RELEASE |    |              |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |              |    \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |              +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |              +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |              \--- org.springframework:spring-expression:5.0.6.RELEASE |    |                   \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    \--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE |         \--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-test -&gt; 2.0.2.RELEASE (*) +--- org.springframework.boot:spring-boot-starter-data-jpa -&gt; 2.0.2.RELEASE |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot:2.0.2.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.0.2.RELEASE (*) |    |    +--- org.springframework.boot:spring-boot-starter-logging:2.0.2.RELEASE |    |    |    +--- ch.qos.logback:logback-classic:1.2.3 |    |    |    |    +--- ch.qos.logback:logback-core:1.2.3 |    |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    |    +--- org.apache.logging.log4j:log4j-to-slf4j:2.10.0 |    |    |    |    +--- org.slf4j:slf4j-api:1.7.25 |    |    |    |    \--- org.apache.logging.log4j:log4j-api:2.10.0 |    |    |    \--- org.slf4j:jul-to-slf4j:1.7.25 |    |    |         \--- org.slf4j:slf4j-api:1.7.25 |    |    +--- javax.annotation:javax.annotation-api:1.3.2 |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.yaml:snakeyaml:1.19 |    +--- org.springframework.boot:spring-boot-starter-aop:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    \--- org.aspectj:aspectjweaver:1.8.13 |    +--- org.springframework.boot:spring-boot-starter-jdbc:2.0.2.RELEASE |    |    +--- org.springframework.boot:spring-boot-starter:2.0.2.RELEASE (*) |    |    +--- com.zaxxer:HikariCP:2.7.9 |    |    |    \--- org.slf4j:slf4j-api:1.7.25 |    |    \--- org.springframework:spring-jdbc:5.0.6.RELEASE |    |         +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |         +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |         \--- org.springframework:spring-tx:5.0.6.RELEASE |    |              +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |              \--- org.springframework:spring-core:5.0.6.RELEASE (*) |    +--- org.hibernate:hibernate-core:5.2.17.Final (*) |    +--- javax.transaction:javax.transaction-api:1.2 |    +--- org.springframework.data:spring-data-jpa:2.0.7.RELEASE |    |    +--- org.springframework.data:spring-data-commons:2.0.7.RELEASE (*) |    |    +--- org.springframework:spring-orm:5.0.6.RELEASE |    |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    |    +--- org.springframework:spring-jdbc:5.0.6.RELEASE (*) |    |    |    \--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-context:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-aop:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-tx:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-beans:5.0.6.RELEASE (*) |    |    +--- org.springframework:spring-core:5.0.6.RELEASE (*) |    |    \--- org.slf4j:slf4j-api:1.7.25 |    \--- org.springframework:spring-aspects:5.0.6.RELEASE |         \--- org.aspectj:aspectjweaver:1.8.13 +--- org.apache.tomcat.embed:tomcat-embed-el -&gt; 8.5.31 +--- com.h2database:h2 -&gt; 1.4.197 \--- org.junit.jupiter:junit-jupiter-engine:5.+ -&gt; 5.1.1      +--- org.apiguardian:apiguardian-api:1.0.0      +--- org.junit.platform:junit-platform-engine:1.1.1      |    +--- org.apiguardian:apiguardian-api:1.0.0      |    +--- org.junit.platform:junit-platform-commons:1.1.1 (*)      |    \--- org.opentest4j:opentest4j:1.0.0      \--- org.junit.jupiter:junit-jupiter-api:5.1.1 (*)  testRuntimeOnly - Runtime only dependencies for source set 'test'. (n) \--- org.junit.jupiter:junit-jupiter-engine:5.+ (n)  (*) - dependencies omitted (listed previously)  (n) - Not resolved (configuration is not meant to be resolved)  A web-based, searchable dependency report is available by adding the --scan option.  BUILD SUCCESSFUL in 4s 1 actionable task: 1 executed ```</body>
		<created>2018-05-13 09:23:07</created>
		<closed>2018-05-14 10:50:01</closed>
	</bug>
	<bug>
		<id>13150</id>
		<title>Dependency management for Spring Web Services is incomplete</title>
		<body>There's no dependency management for `org.springframework.ws:spring-xml`. It's a dependency of `spring-ws-core` which is managed.</body>
		<created>2018-05-11 22:08:35</created>
		<closed>2018-05-14 16:56:02</closed>
	</bug>
	<bug>
		<id>13134</id>
		<title>ServletContextListener contextDestroyed is not called when Undertow stops</title>
		<body>Spring boot：1.5.12.RELEASE Container：spring-boot-starter-undertow  when i defined the MyServletContextListener class with the @WebListener annotation and add the @ServletComponentScan annotation on the bootstrap class  when i start the server 1、EmbeddedWebApplicationContext#onRefresh called the createEmbeddedServletContainer 2、UndertowEmbeddedServletContainerFactory#createDeploymentManager 3、DeploymentImpl#deploy method will add the MyServletContextListene 4、the MyServletContextListener#contextInitialized method called but when i stop the server 1、EmbeddedWebApplicationContext#onClose called the stopAndReleaseEmbeddedServletContainer 2、UndertowEmbeddedServletContainer#stop 3、DeploymentManager#stop， do not called the undeploy method, so the contextDestroyed is not called  How can I solve it? By the way，change the spring-boot-starter-tomcat it is ok</body>
		<created>2018-05-10 08:40:28</created>
		<closed>2018-05-14 19:08:50</closed>
	</bug>
	<bug>
		<id>13122</id>
		<title>Misleading exception when binding fails with NoClassDefFoundError</title>
		<body>If you set `spring.datasource.url` to some database for which you don't have the driver on the classpath, the failure analyzer swallows the original exception.  This is described in [this SO question](https://stackoverflow.com/questions/50215936/failed-to-bind-properties-under-to-com-zaxxer-hikari-hikaridatasource-spring/50222432#50222432)</body>
		<created>2018-05-09 15:13:00</created>
		<closed>2018-05-31 23:54:17</closed>
	</bug>
	<bug>
		<id>13106</id>
		<title>ServletEndpoints do not consider server.servlet.path</title>
		<body>For example, the jolokia endpoint</body>
		<created>2018-05-08 21:29:13</created>
		<closed>2018-05-10 17:02:15</closed>
	</bug>
	<bug>
		<id>13089</id>
		<title>Jolokia (or any @ServletEndpoint) does not work with EndpointRequest include/exclude</title>
		<body></body>
		<created>2018-05-07 21:20:07</created>
		<closed>2018-05-09 19:05:07</closed>
	</bug>
	<bug>
		<id>13082</id>
		<title>EndpointWebExtension fails when the user declares their own implementation of spring provided Endpoint</title>
		<body>As discussed on the gitter channel I extend the `CachesEndpoint` with my own functionality: ```` public class MyCachesEndpoint extends CachesEndpoint { ````  and then I register it like this: ````     @Bean(name = MyCachesEndpoint.NAME)     @ConditionalOnEnabledEndpoint     public CachesEndpoint defaultMyCachesEndpoint(ObjectProvider&lt;Map&lt;String, CacheManager&gt;&gt; cacheManagers) {         return new MyCachesEndpoint(cacheManagers.getIfAvailable(LinkedHashMap::new));     } ````` but then when I start the server I get: ```` Caused by: java.lang.IllegalStateException: Invalid extension 'cachesEndpointWebExtension': no endpoint found with type 'org.springframework.boot.actuate.cache.CachesEndpoint'     at org.springframework.util.Assert.state(Assert.java:94)     at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.addExtensionBeans(EndpointDiscoverer.java:155)     at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.discoverEndpoints(EndpointDiscoverer.java:123) ```` Looks like the `EndpointDiscoverer` is trying to find a bean of type `CachesEndpoint`: ```             EndpointBean endpointBean = byType.get(extensionBean.getEndpointType()); ``` but the `byType` map contains `MyCachesEndpoint.class` instead of `CachesEndpoint.class`. So to overcome this I will have to register also a `CachesEndpointWebExtension `</body>
		<created>2018-05-06 07:51:41</created>
		<closed>2018-05-29 12:18:41</closed>
	</bug>
	<bug>
		<id>13077</id>
		<title>LoggerContext changes when using Spring Cloud, eliminating Logback metrics</title>
		<body>See https://github.com/micrometer-metrics/micrometer/issues/564.  It seems from the OP's description that every time the context is refreshed, the Logback turbo filter list is reset. His workaround is to rebind Logback metrics on each event in a `ApplicationListener&lt;ContextRefreshedEvent&gt;`.  Any thoughts?</body>
		<created>2018-05-05 02:34:35</created>
		<closed>2019-09-19 07:41:48</closed>
	</bug>
	<bug>
		<id>13038</id>
		<title>CacheAutoConfiguration triggers early initialization of cache components</title>
		<body>While working on a feature to demonstrate how to swap a `CacheManager` in a BPP, I found that the cache auto-configuration was triggering early initializations.  This basically boil down to `CacheManagerValidator` whose purpose is to throw an exception "early enough" if no `CacheManager` could be auto-configured. Removing that locally was enough to fix the problem</body>
		<created>2018-05-03 10:42:22</created>
		<closed>2018-05-04 14:57:46</closed>
	</bug>
	<bug>
		<id>13032</id>
		<title>ZipHeaderPeekInputStream may miss bytes in the zip header</title>
		<body>The code in `ZipHeaderPeekInputStream` looks wrong. The `headerStream` gets set to `null` if data has been read but it's possible that there's still data in the header stream.</body>
		<created>2018-05-02 20:39:17</created>
		<closed>2018-05-11 09:32:30</closed>
	</bug>
	<bug>
		<id>13027</id>
		<title>Merge of additional metadata may remove metadata</title>
		<body>While working on #12193 I noticed that we may inadvertently remove existing metadata while searching for a candidate for a merge (as [we mutate a collection that shouldn't be](https://github.com/spring-projects/spring-boot/blob/38f7b2b9da2b4e052d6f15f310ff51bd4672495e/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java#L152)).  </body>
		<created>2018-05-02 13:28:17</created>
		<closed>2018-05-02 14:00:49</closed>
	</bug>
	<bug>
		<id>13026</id>
		<title>It is unclear that configuring a JNDI name for the auto-configured mail sender's session causes property-based configuration to back off</title>
		<body>The following bean definition in MailSenderAutoConfiguration does not set any mail properties when configuring the JavaMailSenderImpl using the session, especially the default encoding. This causes any message created via the MimeMessageHelper to generate the wrong content type.  ``` @Bean public JavaMailSenderImpl mailSender() { JavaMailSenderImpl sender = new JavaMailSenderImpl(); if (this.session != null) { sender.setSession(this.session); } else { applyProperties(sender); } return sender; } ``` </body>
		<created>2018-05-02 13:22:37</created>
		<closed>2018-05-31 14:39:29</closed>
	</bug>
	<bug>
		<id>12987</id>
		<title>When using Actuator with HTTP tracing enabled, a request with a malformed Host header produces a 500 response</title>
		<body>This was raised by @domi55 on Gitter. Making a request like this:  ``` $ telnet localhost 8082 Trying ::1... Connected to localhost. Escape character is '^]'. GET /RaNdoM_JuNk HTTP/1.1 Connection: Keep-Alive Host: "&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt; ```  Results in a 500 response:  ``` HTTP/1.1 500  Content-Type: application/json;charset=UTF-8 Transfer-Encoding: chunked Date: Fri, 27 Apr 2018 10:50:55 GMT Connection: close ```  `TraceableHttpServletRequest` attempts to create a `URI` from the request URL of the `HttpServletRequest`. This uses the `Host` header so an attempt is made to create a `URI` containing `"&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;`. This fails with an exception and results in a 500 response.  RFC2616 says that "The Host field value MUST represent the naming authority of the origin server or gateway given by the original URL". The `Host` header above doesn't meet that requirement so, arguably, the container should have rejected the request with a 400 response.</body>
		<created>2018-04-27 11:43:16</created>
		<closed>2018-06-07 19:53:59</closed>
	</bug>
	<bug>
		<id>12986</id>
		<title>RandomAccessData.read(long, long) allows bytes to be read beyond the end of a subsection</title>
		<body>#12984 has made it apparent that `RandomAccessData.read(long, long)` does not define its behaviour in the following scenarios:  1. the offset is beyond the end of the file 2. the offset is beyond the end of a subsection 3. the offset plus length is greater than the length of the file 4. the offset plus length is greater than the length of the subsection  We need to decide what the behaviour should be in each case and update the interface and implementation accordingly.  I am leaning towards the following at the moment:  1. Throw an `IndexOutOfBoundsException` 2. Throw an `IndexOutOfBoundsException` 3. Throw an `EOFException` 4. Throw an `EOFException`  </body>
		<created>2018-04-27 10:35:27</created>
		<closed>2018-05-01 23:42:45</closed>
	</bug>
	<bug>
		<id>12975</id>
		<title>JerseyManagementChildContextConfiguration requires ResourceConfigCustomizer bean</title>
		<body>&lt;!-- Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it. --&gt;  Steps to reproduce: 1. Go to https://start.spring.io 1. Generate a Spring Boot 2.0.1.RELEASE project with only Jersey and Actuator 1. Set `management.server.port` to something different than 8080 in `application.properties` 1. Attempt to start the application  Application startup will fail with the attached stack trace because no bean of type `org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer` was defined. If you do create say an empty `@Bean` of that type, the application will start up as expected. I suppose it should work without having to create such a bean.  ``` org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:155) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$DifferentManagementContextConfiguration.afterSingletonsInstantiated(ManagementContextAutoConfiguration.java:141) ~[spring-boot-actuator-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:777) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at com.example.demo.DemoApplication.main(DemoApplication.java:10) [classes/:na] Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.&lt;init&gt;(TomcatWebServer.java:86) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:409) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:174) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:179) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:152) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] ... 13 common frames omitted Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.web.jersey.JerseyManagementChildContextConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:729) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:192) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1250) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1099) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:225) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:90) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:79) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:250) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:237) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:54) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE] at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5204) ~[tomcat-embed-core-8.5.29.jar:8.5.29] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.5.29.jar:8.5.29] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1421) ~[tomcat-embed-core-8.5.29.jar:8.5.29] at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1411) ~[tomcat-embed-core-8.5.29.jar:8.5.29] at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_162] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_162] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_162] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_162] Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.autoconfigure.jersey.ResourceConfigCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1509) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE] ... 33 common frames omitted ```</body>
		<created>2018-04-26 08:01:27</created>
		<closed>2018-05-08 20:13:57</closed>
	</bug>
	<bug>
		<id>12966</id>
		<title>IntegrationJmxConfiguration does not backoff if no mBeanServer bean is present</title>
		<body>If you try to enable `IntegrationAutoConfiguration` without JMX support it fails with the following exception:  ```  Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'mbeanServer' available  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:686)  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1210)  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)  at org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration.integrationMbeanExporter(IntegrationAutoConfiguration.java:108)  at org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration$$EnhancerBySpringCGLIB$$991ed790.CGLIB$integrationMbeanExporter$0(&lt;generated&gt;)  at org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration$$EnhancerBySpringCGLIB$$991ed790$$FastClassBySpringCGLIB$$95185fed.invoke(&lt;generated&gt;) ```  While the `MBeanServer` bean is configurable, we should at least backoff if there isn't any bean at all.</body>
		<created>2018-04-25 12:14:27</created>
		<closed>2018-05-02 08:42:21</closed>
	</bug>
	<bug>
		<id>12965</id>
		<title>Empty YAML array does not override property from source with lower precedence</title>
		<body>SpringBoot version - 1.5.10.RELEASE I'm using Spring Centralized Configuration to store my application configuration and it works fine for single valued properties but for MultiValued properties remote config is not able to override local properties.  remote config file: test-cloud-config.yml  ```yaml test:   empty:     strKey:      listKey: [] ```  SpringBoot resource local: application.yml  ```yaml test:   empty:     strKey: local str Key     listKey: localOne, localTwo ```  My spring boot class:-       ```java @Component public class TestRemoteConfig {          @Value("${test.empty.strKey}")     private String testEmptyStrKey;          @Value("${test.empty.listKey}")     private String[] testEmptyListKey;          @PostConstruct     public void init(){         System.out.println("Test override EmptyStrKey's value :- "+ testEmptyStrKey);         System.out.println("Test override EmptyListKey's value :- "+ Arrays.asList(testEmptyListKey));     }  } ```  Output  ``` Test override EmptyStrKey's value :-  Test override EmptyListKey's value :- [localOne, localTwo] ```  but I expect 'testEmptyListKey' to be empty.  &gt; Note: This works when I use .properties in place of .yml as config file</body>
		<created>2018-04-25 11:59:24</created>
		<closed>2018-05-11 15:53:13</closed>
	</bug>
	<bug>
		<id>12947</id>
		<title>DataSource FailureAnalyzer wrongly assumes that only auto-configuration can throw a DataSourceBeanCreationException</title>
		<body>hi    application.properties has configured spring.datasource.url value in src/main/resources,Startup class configuration:  ``` @SpringBootApplication @EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class})  @ComponentScan public class Application {     public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } ```  Run, throw Failed to auto-configure a DataSource: 'spring.datasource.url' is not specified and no embedded datasource could be auto-configured</body>
		<created>2018-04-23 09:24:22</created>
		<closed>2018-05-03 09:47:50</closed>
	</bug>
	<bug>
		<id>12934</id>
		<title>Actuator's EndpointRequest doesn't consider server.servlet.path</title>
		<body>In application.properties, set `server.servlet.path=/spring`  Now notice that EndpointRequest.* doesn't match anything. For example, a request for `/spring/actuator`/health doesn't match (a request for `/actuator/health` does match, though - even though it will return a 404).</body>
		<created>2018-04-20 16:31:45</created>
		<closed>2018-05-04 19:07:51</closed>
	</bug>
	<bug>
		<id>12906</id>
		<title>Timeout for reactive Spring Session is configured using Servlet-specific property</title>
		<body>Configuration of session timeout for reactive Spring Session repositories (Redis, MongoDB) uses  `server.servlet.session.timeout` which is advertised as Servlet-specific configuration property.  `SessionProperties` populates `timeout` property from `org.springframework.boot.web.servlet.server.Session` via `ServerProperties`, which is OK for Servlet apps but very confusing and not obvious for WebFlux apps.</body>
		<created>2018-04-18 11:47:48</created>
		<closed>2018-04-27 20:20:20</closed>
	</bug>
	<bug>
		<id>12900</id>
		<title>Spring boot 2.0.1 - Actuator endpoint failing when content negotiation`favorPathExtension` set as true</title>
		<body>Getting error of HTTP ERROR 406 Not acceptable content, when using spring boot 2.0.1.  when we set favorPathExtension to true , then we get HTTP ERROR 406 Not acceptable content for each actuator endpoint.  but it was working fine with spring boot 2.0.0.  As now in spring boot 2.0.1, we have defined order for `WebMvcAutoConfigurationAdapter` to be executed at higher precedence so that any custom configuration get executed after this.  But it is causing issue for actuator endpoint when we set `favorPathExtension` as true. </body>
		<created>2018-04-18 09:39:35</created>
		<closed>2018-04-23 11:55:37</closed>
	</bug>
	<bug>
		<id>12872</id>
		<title>Default user password logged even if AuthenticationManagerBuilder is configured</title>
		<body>I have the following configuration (for a simple demo) using Spring Boot `2.0.1.RELEASE`:  ```java @Configuration static class SecurityConfig extends GlobalAuthenticationConfigurerAdapter {  @Override public void init(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser("hero").password("{noop}hero").roles("HERO", "USER").and() .withUser("user").password("{noop}user").roles("USER"); }  } ```  The configuration works fine and my users are recognized but I can see the following in the logs:  ```java Using generated security password: 01e94f0f-b575-46e1-96f6-f35f4027432a ```  Same with  ``` @Configuration static class SecurityConfig extends WebSecurityConfigurerAdapter {  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication() .withUser("hero").password("{noop}hero").roles("HERO", "USER").and() .withUser("user").password("{noop}user").roles("USER"); }  } ```</body>
		<created>2018-04-16 13:56:09</created>
		<closed>2018-06-07 19:53:59</closed>
	</bug>
	<bug>
		<id>12857</id>
		<title>InvalidEndpointRequestException not properly handled with JMX</title>
		<body>While working on #10448 I noticed that `InvalidEndpointRequestException` was not handled properly. It should be translated and a `ReflectionException` per the contract of `invoke`.</body>
		<created>2018-04-13 14:49:01</created>
		<closed>2018-04-16 09:34:23</closed>
	</bug>
	<bug>
		<id>12855</id>
		<title>RabbitMetricsAutoConfiguration is instantiated too late</title>
		<body>Hi,  Micrometer metrics for RabbitMQ are instantiated too late which leads that metrics are never updated. Instead a `NoOpMetricsCollector` is used and it's methods are invoked. It seems that rabbitmq connection is created before in `com.rabbitmq.client.ConnectionFactory`.  ```     public Connection newConnection(ExecutorService executor, AddressResolver addressResolver, String clientProvidedName)         throws IOException, TimeoutException {         if(this.metricsCollector == null) {             this.metricsCollector = new NoOpMetricsCollector();         } ```  Workaround that works for me now is to create a RabbitMQConfiguration class with:  ``` @PostConstruct public void init() {   com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = this.connectionFactory.getRabbitConnectionFactory();   rabbitConnectionFactory.setMetricsCollector(new MicrometerMetricsCollector(registry)); } ```  spring-boot: `2.0.1.RELEASE`</body>
		<created>2018-04-13 11:44:06</created>
		<closed>2018-05-18 09:55:11</closed>
	</bug>
	<bug>
		<id>12853</id>
		<title>Unexpected startup of web server with RabbitMQ starter</title>
		<body>Since 2.0.1, Spring Boot creates a AnnotationConfigReactiveWebServerApplicationContext as the application context instead of, as in 2.0.0, AnnotationConfigApplicationContext. This happens even if there is no web functionality in the project. This leads to the application trying to start a Netty web server on port 8080 for no apparent reason.  The attached project was generated from start.spring.io and includes only a RabbitMQ starter. On startup it creates handlers for URLs /webjars/** and /** for no apparent reason. This is both surprising and inconvenient as there doesn't seem to be any easy way to turn it off.  [demo.zip](https://github.com/spring-projects/spring-boot/files/1906986/demo.zip)  </body>
		<created>2018-04-13 10:50:04</created>
		<closed>2018-04-26 14:45:30</closed>
	</bug>
	<bug>
		<id>12827</id>
		<title>environmentWebEndpointExtension bean name used for two different classes</title>
		<body>`EnvironmentEndpointAutoConfiguration` has a bean with name `environmentWebEndpointExtension` of type `EnvironmentEndpointWebExtension` and `LifecycleMvcEndpointAutoConfiguration` also has bean with same name `environmentWebEndpointExtension` but of type `EnvironmentWebEndpointExtension` which seems right.  I think we should change the name for bean of type `EnvironmentEndpointWebExtension` or I am missing something here?  Below from LifecycleMvcEndpointAutoConfiguration: ``` @Configuration     @ConditionalOnClass(EnvironmentEndpoint.class)     @ConditionalOnWebApplication     protected static class EndpointConfiguration {         @Bean         @ConditionalOnBean(EnvironmentEndpoint.class)         @ConditionalOnEnabledEndpoint         public EnvironmentWebEndpointExtension environmentWebEndpointExtension(                 EnvironmentManager environment) {             return new EnvironmentWebEndpointExtension(environment);         }     } ```  Below from EnvironmentEndpointAutoConfiguration:  ``` @Bean @ConditionalOnMissingBean @ConditionalOnEnabledEndpoint @ConditionalOnBean(EnvironmentEndpoint.class) public EnvironmentEndpointWebExtension environmentWebEndpointExtension( EnvironmentEndpoint environmentEndpoint) { return new EnvironmentEndpointWebExtension(environmentEndpoint); } ```</body>
		<created>2018-04-11 07:30:57</created>
		<closed>2018-04-11 09:37:45</closed>
	</bug>
	<bug>
		<id>12823</id>
		<title>Quartz auto-configuration can mutate an existing TaskScheduler via properties config</title>
		<body>See [Stack Overflow #49762112](https://stackoverflow.com/questions/49762112/spring-boot-2-0-quartz-spring-integration-not-working/49763132#49763132).  Since SI wires in a `TaskScheduler`, Quartz autowiring wires it in and the resulting adapter doesn't expose standard quartz properties.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'quartzScheduler' defined in class path resource [org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.class]: Invocation of init method failed; nested exception is org.quartz.SchedulerException: ThreadPool class 'org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool' props could not be configured. [See nested exception: java.lang.NoSuchMethodException: No setter for property 'threadCount']     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1710) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:741) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) ~[spring-context-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE]     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1246) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1234) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE]     at com.xxx.t3.starter.Application.main(Application.java:31) [classes/:na] Caused by: org.quartz.SchedulerException: ThreadPool class 'org.springframework.scheduling.quartz.LocalTaskExecutorThreadPool' props could not be configured.     at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:849) ~[quartz-2.3.0.jar:na]     at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1559) ~[quartz-2.3.0.jar:na]     at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:636) ~[spring-context-support-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:510) ~[spring-context-support-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1769) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1706) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE]     ... 15 common frames omitted Caused by: java.lang.NoSuchMethodException: No setter for property 'threadCount'     at org.quartz.impl.StdSchedulerFactory.setBeanProps(StdSchedulerFactory.java:1447) ~[quartz-2.3.0.jar:na]     at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:847) ~[quartz-2.3.0.jar:na]     ... 20 common frames omitted ```  and  ```yml spring:   mail:     host: XXXXXXXXXX     port: 25     protocol: smtp     defaultEncoding: UTF-8   quartz:     jdbc:       initialize-schema: never     properties:       org:         quartz:           scheduler:             instanceId: AUTO             #instanceName: ETL             batchTriggerAcquisitionMaxCount: 25             skipUpdateCheck: true           threadPool:             threadCount: 50           jobStore:             class: org.quartz.impl.jdbcjobstore.JobStoreTX             driverDelegateClass: org.quartz.impl.jdbcjobstore.oracle.OracleDelegate             tablePrefix: QRTZ_              useProperties: true             acquireTriggersWithinLock: true ``` </body>
		<created>2018-04-10 21:53:15</created>
		<closed>2018-04-12 13:49:28</closed>
	</bug>
	<bug>
		<id>12765</id>
		<title>JarURLConnection does not decode nested jar names</title>
		<body>Related to the tests provided for #11367. The `JarURLConnection` does not currently attempt to decode names of nested jars. This means URLs of the form `jar:file:some.jar!/space%20nested.jar!/3.dat` fail.  </body>
		<created>2018-04-04 21:21:24</created>
		<closed>2018-04-04 21:45:49</closed>
	</bug>
	<bug>
		<id>12742</id>
		<title>When Undertow has access logging enabled, threads are leaked when the container is stopped</title>
		<body>The `XnioWorker` that's created for use by the `DefaultAccessLogReceiver` is never shut down so its threads are leaked.</body>
		<created>2018-04-03 14:29:03</created>
		<closed>2018-06-20 15:54:22</closed>
	</bug>
	<bug>
		<id>12736</id>
		<title>A failure in TomcatEmbeddedServletContainer.initialize() may leave Tomcat partially running and leak threads</title>
		<body></body>
		<created>2018-04-03 12:51:33</created>
		<closed>2018-04-03 15:02:16</closed>
	</bug>
	<bug>
		<id>12735</id>
		<title>A failure in JettyEmbeddedServletContainer.start() may leave Jetty partially running and leak threads</title>
		<body></body>
		<created>2018-04-03 11:19:16</created>
		<closed>2018-04-03 15:02:16</closed>
	</bug>
	<bug>
		<id>12728</id>
		<title>Cannot set property by OS environment with dots  in spring boot 2.0</title>
		<body>I am tring to upgrade my springboot project from 1.5.x to 2.0.0. I started the project by setting the environment variable with docker env. One of the environment variables was like `this.is.a.key=value`, but after the startup, the project did not read this value. The previous version 1.5.x was OK. Besides，both in 2.0 and 1.5，it can access the environment variable like "THIS_IS_A_KEY", but setting environment variables with dots did not work in 2.0. I am not sure this is a bug or just is a useless feature to be excluded. One demo will show this problem by follow steps:  1. use `@Value("${this.is.a.key}")` and print the value 2. build a  executable jar of spring boot 3. set an env in bash `$ env "this.is.a.key=value" sh` 4. start the jar `$ java -jar target/demo-0.0.1-SNAPSHOT.jar`  then, the value would be printed in 1.5.x , but, in 2.0, it wouldn't.</body>
		<created>2018-04-03 06:32:20</created>
		<closed>2018-04-03 21:51:25</closed>
	</bug>
	<bug>
		<id>12716</id>
		<title>Unicode parsing in OriginTrackedPropertiesLoader does not work with all code points</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; ![image](https://user-images.githubusercontent.com/16256642/38191496-938c14b0-369b-11e8-8805-0cf7380703e5.png)  OriginTrackedPropertiesLoader.readUnicode()函数： 字符判断条件中有错误，前面多了一个负号 "-" digit &gt; -'0' &amp;&amp; digit &lt;= '9'  digit &gt; -'a' &amp;&amp; digit &lt;= 'f'  digit &gt; -'A' &amp;&amp; digit &lt;= 'F'  导致unicode字符转换异常</body>
		<created>2018-04-02 07:36:53</created>
		<closed>2018-04-02 17:14:08</closed>
	</bug>
	<bug>
		<id>12712</id>
		<title>Gradle build error is unclear when no main class is specified or the main class could not be resolved</title>
		<body>This is, admittedly, a very low-priority issue.  If, for some reason (I just answered a StackOverflow question about that problem), there is no main class configured, and the Spring Boot gradle plugin can't resolve any main class, the bootJar task fails with the following error:  &gt; The value of a manifest attribute must not be null (Key=Start-Class)  This error message could be clearer, and clearly state that the specified main class is null, or that no main class could be resolved.</body>
		<created>2018-04-01 19:08:21</created>
		<closed>2018-06-08 17:09:34</closed>
	</bug>
	<bug>
		<id>12663</id>
		<title>Dependency management for Quartz is missing quartz-jobs</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; Is it possible to add the following dependency to spring boot 2.0.x dependencies:         &lt;dependency&gt;             &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;             &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;             &lt;version&gt;${quartz.version}&lt;/version&gt;         &lt;/dependency&gt; </body>
		<created>2018-03-28 20:46:59</created>
		<closed>2018-03-29 06:49:34</closed>
	</bug>
	<bug>
		<id>12660</id>
		<title>AutoConfigurationSorter does not produce the expected result if the complete chain is not provided</title>
		<body>Consider the following example:  ``` @Configuration public class A { }  @Configuration @AutoConfigureAfter(A.class) public class B { }  @Configuration @AutoConfigureAfter(B.class) public class C { } ```  If `AutoConfigurationSorter` is invoked with `getInPriorityOrder(C.class, B.class, A.class)` then the expected result is returned: A,B,C  However if `getInPriorityOrder` is only called with A and C, i.e. `getInPriorityOrder(C.class, A.class)` then the result is C,A.  The reason for that is that `B` is not harvested and its metadata information is lost. As a result, the algorithm ignores the fact that C must be configured before B since B doesn't exist.   This prevents completion of #12366 </body>
		<created>2018-03-28 16:01:22</created>
		<closed>2018-03-30 01:08:37</closed>
	</bug>
	<bug>
		<id>12659</id>
		<title>Starting executable war with -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager produces a ClassNotFoundException</title>
		<body>I would like to use Log4j2 as the logging implementation.  As per the documentation here: https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging, I have set the following system property: -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager.  The following error is printed at startup:  ``` Could not load Logmanager "org.apache.logging.log4j.jul.LogManager" java.lang.ClassNotFoundException: org.apache.logging.log4j.jul.LogManager at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:93) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at java.util.logging.LogManager$1.run(LogManager.java:195) at java.util.logging.LogManager$1.run(LogManager.java:181) at java.security.AccessController.doPrivileged(Native Method) at java.util.logging.LogManager.&lt;clinit&gt;(LogManager.java:181) at java.util.logging.Logger.demandLogger(Logger.java:448) at java.util.logging.Logger.getLogger(Logger.java:502) at com.sun.jmx.remote.util.ClassLogger.&lt;init&gt;(ClassLogger.java:55) at javax.management.NotificationBroadcasterSupport.&lt;clinit&gt;(NotificationBroadcasterSupport.java:365) at javax.management.MBeanServerDelegate.&lt;init&gt;(MBeanServerDelegate.java:72) at com.sun.jmx.mbeanserver.MBeanServerDelegateImpl.&lt;init&gt;(MBeanServerDelegateImpl.java:100) at com.sun.jmx.mbeanserver.JmxMBeanServer.newMBeanServerDelegate(JmxMBeanServer.java:1374) at javax.management.MBeanServerBuilder.newMBeanServerDelegate(MBeanServerBuilder.java:66) at javax.management.MBeanServerFactory.newMBeanServer(MBeanServerFactory.java:321) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:231) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:192) at java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:469) at org.apache.logging.log4j.core.jmx.Server.reregisterMBeansAfterReconfigure(Server.java:139) at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:556) at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:617) at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:634) at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:229) at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:153) at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:45) at org.apache.logging.log4j.LogManager.getContext(LogManager.java:194) at org.apache.commons.logging.LogFactory$Log4jLog.&lt;clinit&gt;(LogFactory.java:199) at org.apache.commons.logging.LogFactory$Log4jDelegate.createLog(LogFactory.java:166) at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:109) at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:99) at org.springframework.boot.SpringApplication.&lt;clinit&gt;(SpringApplication.java:198) at com.example.Application.main(Application.java:10) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) at org.springframework.boot.loader.WarLauncher.main(WarLauncher.java:58) ```  Attached is a sample project that demonstrates the problem.  Build it with "mvn package", unzip the log4j-war-example-1.0.0-SNAPSHOT.zip and run bin/run.sh.  I am using Spring Boot 2.0.0.   [log4j-war-example.zip](https://github.com/spring-projects/spring-boot/files/1856458/log4j-war-example.zip)   </body>
		<created>2018-03-28 14:27:04</created>
		<closed>2018-06-04 18:39:42</closed>
	</bug>
	<bug>
		<id>12631</id>
		<title>Gradle plugin: bootStartScripts doesn't honor applicationDefaultJvmArgs</title>
		<body>Hi, I'm using Spring Boot `2.0.0.RELEASE`, Gradle and the `org.springframework.boot` Gradle plugin. I also applied the `application` plugin in my build.gradle.  I've set `applicationDefaultJvmArgs` to some Xmx settings. `bootRun` seems to use this setting, but when I build a distribution with the `bootDistZip`, the starter scripts don't contain the Xmx values.  I can get them to do that by specifying  ``` bootStartScripts {     defaultJvmOpts = project.applicationDefaultJvmArgs } ```  but it looks like a bug to me that `bootRun` uses the `applicationDefaultJvmArgs`, but `bootDistZip` doesn't. Am I missing something?</body>
		<created>2018-03-25 17:19:50</created>
		<closed>2018-06-04 16:54:37</closed>
	</bug>
	<bug>
		<id>12580</id>
		<title>Cookie http-only setting has no effect when using embedded Tomcat</title>
		<body>I am using spring boot 2.0.0.RELEASE  When I set the http-only flag to false it has no effect on the browser. I am able to inspect the session cookie in the browser -&gt; I see the http flag is enabled. And therefore I am not able to access the cookie via javascript...  Here is the definition part in my application.yaml  ``` server:   servlet:     session:       cookie:         max-age: 30m         name: my_app_session         http-only: false         secure: false       timeout: 30m ```  The reason why I do this is: I have an SPA where I would like to check the session cookie periodically to  figure out when the session is expired (to present a certain view to the user)    </body>
		<created>2018-03-21 17:01:39</created>
		<closed>2018-05-30 19:42:22</closed>
	</bug>
	<bug>
		<id>12577</id>
		<title>WebMvgTags.uri uses NOT_FOUND for a matched request mapping that produces a 404 response</title>
		<body>Greetings,  I'm migrating my project from Boot 1.5.x to 2.0.0.RELEASE and to micrometer in the process. I'm a bit annoyed with WebMvcTags' default behavior regarding exceptions and URI tracking for a WebMVC REST API application :  ``` public static Tag uri(HttpServletRequest request, HttpServletResponse response) { if (response != null) { HttpStatus status = extractStatus(response); if (status != null &amp;&amp; status.is3xxRedirection()) { return Tag.of("uri", "REDIRECTION"); } if (status != null &amp;&amp; status.equals(HttpStatus.NOT_FOUND)) { return Tag.of("uri", "NOT_FOUND"); } } if (request == null) { return Tag.of("uri", "UNKNOWN"); } String uri = getUri(request); uri = uri.replaceAll("//+", "/").replaceAll("/$", ""); return Tag.of("uri", uri.isEmpty() ? "root" : uri); } ```  This implies that All 404 errors won't have any specific URI information, being grouped in that NOT_FOUND uri. This does effectly prevents anything relevant from being retrieved of those metrics.  It seems to me that using relevant http codes for functional returns is a good practice, but this default tag provider harms this.  Was the reason backing this implementation to avoid creating meaningless metrics entries for each and every false / crawled URI ? It could be worth it checking wether the initial URI did match a correct route, and in that case, use the route's mapping as uri.  Thanks for any hint / answer  </body>
		<created>2018-03-21 13:43:26</created>
		<closed>2018-03-29 18:37:53</closed>
	</bug>
	<bug>
		<id>12557</id>
		<title>management.metrics.export.tags-as-prefix property seems not to be honored in Spring Boot 2.0.0.RELEASE</title>
		<body>Greetings,  I'm currently migrating a 1.5.X Spring Boot project to 2.0.0.RELEASE and did struggle a bit on the metrics to micrometer side.  It seems to me that https://github.com/spring-projects/spring-boot/issues/12262 is still relevant. I have to manually override the HierarchicalNameMapper to a GraphiteHierarchicalNameMapper so as to use the tags as prefix feature (tested and working).  ```     @Bean     public HierarchicalNameMapper hierarchicalNameMapper() {         return new GraphiteHierarchicalNameMapper("myTag");     } ```  The HierarchicalNameMapper.DEFAULT.toHierarchicalName() does not use this property at all and is in my case used by default.  **It is as if there was some missing autoconfiguration somewhere that would not use the correct name mapper in a Graphite context.**  As a result the management.metrics.export.graphite.tags-as-prefix property seems totally useless by default in my context, which is a Graphite context. I can see that it is correctly valued in the MeterRegistry's config and such, but as the DEFAULT Name Mapper is used, it's to no avail.</body>
		<created>2018-03-20 10:25:57</created>
		<closed>2018-04-03 08:46:43</closed>
	</bug>
	<bug>
		<id>12549</id>
		<title>Exceptions raised in `running` listeners called from SpringApplication.run can leak application context</title>
		<body>On Spring Boot 2.0.0.RELEASE, the `SpringApplication.run` method reads: ```java try { ... start up context... listeners.started(context); callRunners(context, applicationArguments); } catch (Throwable ex) { handleRunFailure(context, listeners, exceptionReporters, ex); throw new IllegalStateException(ex); } listeners.running(context); return context; ``` Notably, the `listeners.running` call is outside the large try/catch block.  If an exception is thrown from a running listener, it is never caught:  ``` Exception in thread "main" org.apache.kafka.streams.errors.InvalidStateStoreException: the state store, private.chat.endpoint, may have migrated to another instance. at org.apache.kafka.streams.state.internals.QueryableStoreProvider.getStore(QueryableStoreProvider.java:60) at org.apache.kafka.streams.KafkaStreams.store(KafkaStreams.java:1043) ...         at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:353) at org.springframework.boot.context.event.EventPublishingRunListener.running(EventPublishingRunListener.java:103) at org.springframework.boot.SpringApplicationRunListeners.running(SpringApplicationRunListeners.java:78) at org.springframework.boot.SpringApplication.run(SpringApplication.java:341) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:137) at com.opentable.server.OTApplication.run(OTApplication.java:48) at com.opentable.server.OTApplication.run(OTApplication.java:32) at com.opentable.chat.service.WorkerMain.main(WorkerMain.java:28) ``` and by exiting SpringApplication.run abnormally on line 341, notice how we leak a started and running `context` -- the caller is not able to close the context, nor does Spring Boot do it for you -- so you end up with a "zombie" partially initialized instance.</body>
		<created>2018-03-19 21:00:49</created>
		<closed>2018-03-28 15:43:00</closed>
	</bug>
	<bug>
		<id>12546</id>
		<title>Request-scoped beans do not work in the management context when it's using a separate port</title>
		<body>Hi,  I have a question. We are using OAuth2 for securing our API's including the management endpoints. However, we are having an issue when authenticating the requests for the management URL's. Spring Security's OAuth2AuthenticationManager requires at some point a request scoped OAuth2ClientContext. The problem is that this request scoped bean can not be created. It logs the following warning:  ``` Could not fetch user details: class org.springframework.beans.factory.BeanCreationException, Error creating bean with name 'scopedTarget.oauth2ClientContext': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. ```  After googling this issue, it was suggested to make sure that the request is passing the RequestContextFilter. I was convinced that this was already done by Spring Boot's auto configuration. Then I noticed that this filter is not used for actuator URL's. The opposite is also true for non-actuator URL's. Is there a reason why this filter is not automatically applied for actuator endpoints? What do I have to do to make sure that actuator endpoints also make use of that specific filter?  Additional info: Actuator endpoints are configured to be served on a different port and context root compared to the standard application endpoints.</body>
		<created>2018-03-19 19:36:29</created>
		<closed>2018-04-02 18:19:50</closed>
	</bug>
	<bug>
		<id>12526</id>
		<title>Dependency management for Infinispan is incomplete</title>
		<body>`infinispan-hibernate-cache` is missing. Other modules may be missing as well.</body>
		<created>2018-03-16 16:06:41</created>
		<closed>2018-03-29 11:17:25</closed>
	</bug>
	<bug>
		<id>12489</id>
		<title>Assert WebEndpointProperties basePath starts with '/' or is empty</title>
		<body>I made a demo project on github to demonstrate the issue: https://github.com/HaVonTe1/de.dkutzer.demo.spring.actuator.securityfail  ### Description  Even with disabled anonymous user access - actuators health endpoint is accessable without authentication if a `base-path` without a beginning `/` is defined.  ###### Details   The `WebSecurityConfig` is done in the class `SecurityConfig`  ```java     @Override     protected void configure(HttpSecurity http) throws Exception {         http             .anonymous().disable()//Do not allow anonymous access.             .authorizeRequests()             .requestMatchers(EndpointRequest.to(InfoEndpoint.class, HealthEndpoint.class)).permitAll()//Everybody and his grandma should be allowed -- not anonymous             .requestMatchers(EndpointRequest.toAnyEndpoint()).hasRole("ACTUATOR")//special actuator user for all other              ...             } ```  As the comments tell no anonymous access should be allowed. Even the exposed Actuator Endpoints `Health` and `Info` should be restricted to an authenticated access.  ##### Configuration  The `application.yml` is:  ```yaml  management:   endpoints:     web:       #default base-path is "/actuator"       base-path: actuator #this leads to faulty anonymous access       exposure:         include: '*'   endpoint:     health:       show-details: when_authorized       enabled: true ```   Please pay attention to the `base-path` propertie.  ### How to reproduce  Start with `gradle bootRun` and execute  GET request to the `health` endpoint.  ```bash curl --request GET \   --url http://localhost:8080/actuator/health  ```  The result is: &lt; HTTP/1.1 200  ```json { "status": "UP" } ``` So access granted for the anonymous user...which should not be allowed.   Edit the `application.yml` and delete the `base-path` propertie or set one with a beginning `/` and everthing works as intended.    ```bash curl --request GET \   --url http://localhost:8080/actuator/health  ```  The result is: &lt; &lt; HTTP/1.1 401 ```json { "timestamp": "2018-03-15T06:57:00.117+0000", "status": 401, "error": "Unauthorized", "message": "Unauthorized", "path": "/actuator/health" } ```  </body>
		<created>2018-03-15 07:04:36</created>
		<closed>2018-03-15 18:41:08</closed>
	</bug>
	<bug>
		<id>12485</id>
		<title>Assert H2ConsoleProperties and WebServicesProperties path has length &gt; 1</title>
		<body>See https://github.com/spring-projects/spring-boot/commit/f42ebe428cfc570b98b5663122c1bc2470aad10b#r28091624. I think an empty path or a path of `/` should not be allowed.</body>
		<created>2018-03-14 19:41:55</created>
		<closed>2018-03-15 19:17:19</closed>
	</bug>
	<bug>
		<id>12483</id>
		<title>Jar loader fails when using full path from different context handler</title>
		<body>## Problem I faced an exception when loading more than 2 dozer mapping files with dozer-spring and Spring Boot. The following exception is exactly thrown at the time when loading the 2nd dozer mapping file. It is usual for dozer users to load many dozer mapping files. I think this problem should be resolved.  This exception is **NOT** thrown without Spring Boot.  ``` org.xml.sax.SAXException: Parsing Fatal Error Line:   1 URI:   null Message: Content is not allowed in prolog. ```  ## Analysis This behavior may be caused by  ``org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream`` that loads the 2nd dozer mapping file. On the other hands, the 1st dozer mapping file is loaded by ``org.springframework.boot.loader.data.ZipInflaterInputStream``. It successes to load as I wrote.  I doubt the difference comes from how to get URL of the 2nd mapping file. For the 2nd dozer mapping file, URL is got through ``Thread.currentThread().getContextClassLoader().getResource(stringValue)``. This may lead to use ``org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream`` for the 2nd dozer mapping file. (``stringValue`` is like ``"jar:file:/C:/xxx/target/xxx.jar!/META-INF/xxx/xxx-mapping.xml"`` )  Without Spring Boot, ``Thread.currentThread().getContextClassLoader().getResource(stringValue)`` is never called and ``sun.net.www.protocl.jar.JarURLConnection$JarURLInputStream`` is used to load every dozer mapping file.  ## Repro Repro: https://github.com/debugroom/sample/blob/develop/sample-spring-boot/src/main/java/org/debugroom/sample/spring/boot/config/TestDozerApp.java  Spring Boot: 1.5.9.RELEAE, 2.0.0.RELEASE Dozer: 5.5.1 Dozer-Spring: 5.5.1</body>
		<created>2018-03-14 17:27:52</created>
		<closed>2018-03-16 22:07:38</closed>
	</bug>
	<bug>
		<id>12463</id>
		<title>Jersey-based Actuator links to Spring MVC-specific endpoints that are not available</title>
		<body>It's a slightly contrived situation, but if you use the Actuator with Jersey and have a bean like the following:  ```java @Component @RestControllerEndpoint(id = "test") public class TestControllerEndpoint {  @GetMapping public String foo() { return "bar"; }  } ```  The endpoint will be discovered and listed in the endpoint links but won't actually be available. The Jersey-based Actuator is conditional on there being no `DispatcherServlet` bean so I think we can safely ignore controller-based endpoints when using Jersey.</body>
		<created>2018-03-13 12:03:19</created>
		<closed>2018-03-13 14:56:32</closed>
	</bug>
	<bug>
		<id>12458</id>
		<title>Allow web client builder without customizer beans</title>
		<body>```    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v2.0.0.RELEASE)  2018-03-12 20:51:42.769  INFO 71330 --- [           main] c.e.webinar.load.LoadTesterApplication   : Starting LoadTesterApplication on pwmb16 with PID 71330 (/Users/pwebb/demos/spring-boot-2-webinar/code/micrometer/webinar-loadtest/target/classes started by pwebb in /Users/pwebb/demos/spring-boot-2-webinar/code/micrometer/webinar-loadtest) 2018-03-12 20:51:42.772  INFO 71330 --- [           main] c.e.webinar.load.LoadTesterApplication   : No active profile set, falling back to default profiles: default 2018-03-12 20:51:42.823  INFO 71330 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@731f8236: startup date [Mon Mar 12 20:51:42 PDT 2018]; root of context hierarchy 2018-03-12 20:51:43.289  WARN 71330 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'loadTesterApplication': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webClientBuilder' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.class]: Unsatisfied dependency expressed through method 'webClientBuilder' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.web.reactive.function.client.WebClientCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} 2018-03-12 20:51:43.296  INFO 71330 --- [           main] ConditionEvaluationReportLoggingListener :   Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2018-03-12 20:51:43.353 ERROR 71330 --- [           main] o.s.boot.SpringApplication               : Application run failed  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'loadTesterApplication': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webClientBuilder' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.class]: Unsatisfied dependency expressed through method 'webClientBuilder' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.web.reactive.function.client.WebClientCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:729) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:192) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) ~[spring-context-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) ~[spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) ~[spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) ~[spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE] at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:137) [spring-boot-2.0.0.RELEASE.jar:2.0.0.RELEASE] at com.example.webinar.load.LoadTesterApplication.main(LoadTesterApplication.java:75) [classes/:na] Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webClientBuilder' defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientAutoConfiguration.class]: Unsatisfied dependency expressed through method 'webClientBuilder' parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.web.reactive.function.client.WebClientCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:729) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:470) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1250) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1099) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:330) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] ... 17 common frames omitted Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.List&lt;org.springframework.boot.web.reactive.function.client.WebClientCustomizer&gt;' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1509) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721) ~[spring-beans-5.0.4.RELEASE.jar:5.0.4.RELEASE] ... 29 common frames omitted  ```</body>
		<created>2018-03-13 03:54:35</created>
		<closed>2018-03-15 09:49:37</closed>
	</bug>
	<bug>
		<id>12451</id>
		<title>PropertySourcesKey doesn't recognize a replaced property source with the same name</title>
		<body>https://github.com/spring-cloud/spring-cloud-commons/issues/328 https://github.com/spring-cloud/spring-cloud-commons/issues/290</body>
		<created>2018-03-12 21:43:31</created>
		<closed>2018-03-15 23:15:06</closed>
	</bug>
	<bug>
		<id>12447</id>
		<title>Templated requests with Jersey may cause an explosion of URI tag values</title>
		<body>See https://github.com/micrometer-metrics/micrometer/issues/486 for a reproducible example. </body>
		<created>2018-03-12 19:41:18</created>
		<closed>2018-06-04 14:45:24</closed>
	</bug>
	<bug>
		<id>12441</id>
		<title>Validation not working properly with @RestControllerEndpoint custom actuator</title>
		<body>I have a custom actuator that uses `@RestControllerEndpoint` since it allows me to use complex DTOs among other things. However, I cannot get validation of path parameters or DTOs to work.  Issues I have encountered:  1. Adding `@Validated` to a class with `@RestControllerEndpoint` annotation causes the actuator not be exposed anymore. All rest calls return 404. Using the annotation on a method level seems to work.  2. Validating a path parameter with for instance `@Size` does not work. Not sure if this is because of my set up or due to a bug.  Sample project:  Just run the application and use the actuator at localhost:8080/actuator/flows. Uncomment the `@Validated` annotation to reproduce the problem.  https://github.com/debbiche/spring-boot-actuator-validation-bug  Spring boot version: 2.0.0 RELEASE </body>
		<created>2018-03-12 16:36:26</created>
		<closed>2018-04-10 18:24:40</closed>
	</bug>
	<bug>
		<id>12407</id>
		<title>Spring boot creates two mongo clients using spring-boot-starter-data-mongodb-reactive</title>
		<body>Hi,  spring boot auto configures two MongoDB clients, one through MongoAutoConfiguration and one through MongoReactiveAutoConfiguration. If I try to exclude MongoAutoConfiguration I get the following error: ```` *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 0 of method mongoDbFactory in org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration required a bean of type 'com.mongodb.MongoClient' that could not be found. - Bean method 'mongo' not loaded because auto-configuration 'MongoAutoConfiguration' was excluded ````  Then, If I try to exclude MongoDataAutoConfiguration as well I get the following error: ```` *************************** APPLICATION FAILED TO START ***************************  Description:  Parameter 1 of method reactiveMongoTemplate in org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration required a bean of type 'org.springframework.data.mongodb.core.convert.MongoConverter' that could not be found. - Bean method 'mappingMongoConverter' not loaded because auto-configuration 'MongoDataAutoConfiguration' was excluded ````  Looks that is not possible to exclude the non reactive part.  Below you can find a simple example where "Cluster created with settings....etc" is logged two times: https://github.com/cmario/spring-boot-embedded-mongodb  Regards Mario</body>
		<created>2018-03-08 15:47:00</created>
		<closed>2018-07-11 21:45:21</closed>
	</bug>
	<bug>
		<id>12393</id>
		<title>Dependency management for Spring AMQP is missing spring-rabbit-test and spring-rabbit-junit</title>
		<body>You can find more info about these modules in the [Reference Manual](https://docs.spring.io/spring-amqp/docs/2.0.2.RELEASE/reference/html/_reference.html#testing).  Right now to use them in our target Spring Boot project we have to specify the version for these dependencies explicitly.  Would be better to have them as out-of-the-box, like we have for `spring-kafka-test`, for example.  Thanks</body>
		<created>2018-03-07 18:36:16</created>
		<closed>2018-03-15 12:59:04</closed>
	</bug>
	<bug>
		<id>12390</id>
		<title>Binding should not consider static methods</title>
		<body>Right now it is possible to bind a property if a "somewhat" JavaBean property is defined with static accessors. For consistency, we should ignore those altogether.</body>
		<created>2018-03-07 14:11:15</created>
		<closed>2018-03-07 16:55:46</closed>
	</bug>
	<bug>
		<id>12380</id>
		<title>NPE in EndpointRequestMatcher.matches</title>
		<body>Courtesy of @ptahchiev:  ``` java.lang.NullPointerException     at org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest$EndpointRequestMatcher.matches(EndpointRequest.java:191)     at org.springframework.boot.security.servlet.ApplicationContextRequestMatcher.matches(ApplicationContextRequestMatcher.java:57)     at org.springframework.security.web.DefaultSecurityFilterChain.matches(DefaultSecurityFilterChain.java:57)     at org.springframework.security.web.FilterChainProxy.getFilters(FilterChainProxy.java:226)     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:198)     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)     at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)     at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) ```  The problem's in ApplicationContextRequestMatcher, which `EndpointRequestMatcher` extends:  ``` private Supplier&lt;C&gt; getContext(HttpServletRequest request) { if (this.context == null) { synchronized (this.contextLock) { if (this.context == null) { this.context = createContext(request); initialized(this.context); } } } return this.context; } ```  If two threads call `getContext` at roughly the same time, there's a window where `this.context` is no longer null but when `initialized` hasn't been called or is still in the process of being called. In the case of `EndpointRequestMatcher`, this leads to `matches` being called while `this.delegate` is still `null`. The problem's exacerbated by `this.delegate` not being `volatile` so there's a visibility problem too.</body>
		<created>2018-03-07 09:34:16</created>
		<closed>2018-03-07 11:37:41</closed>
	</bug>
	<bug>
		<id>12364</id>
		<title>Quartz scheduler dependency conflicts on HikariCP</title>
		<body>Quartz scheduler, in `spring-boot-starter-quartz`, has a compile dependency on `com.zaxxer:HikariCP-java6:jar:2.3.13:compile`  whereas spring-boot depends on `com.zaxxer:HikariCP:jar:2.7.8:compile`  Moreover Quartz seems to depend on C3P0 too.  Thoses dependencies should be excluded.  This can cause a `java.lang.NoSuchMethodError:` exception when Tomcat is loading the classes at startup :   ``` SEVERE: The required Server component failed to start so Tomcat is unable to start. Caused by: java.lang.NoSuchMethodError: com.zaxxer.hikari.HikariDataSource.getMetricsTrackerFactory()Lcom/zaxxer/hikari/metrics/MetricsTrackerFactor ```</body>
		<created>2018-03-06 13:40:32</created>
		<closed>2018-03-06 16:01:13</closed>
	</bug>
	<bug>
		<id>12363</id>
		<title>ConfigurationPropertyName.isIndexed fails when argument is the empty string</title>
		<body>After migrating from spring-boot 2.0.0.M7 to 2.0.0.RELEASE (from maven central repo) I get this error: ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'application' to commons.utils.Application:      Reason: String index out of range: 0  Action: Update your application's configuration ```  The application.properties for application looks like:  ``` application.name=my-app application.version=1.0.0 ```  The stacktrace (see below) shows the issue is at  `org.springframework.boot.context.properties.source.ConfigurationPropertyName` line 413 where element is the empty string ``` private static boolean isIndexed(CharSequence element) { return element.charAt(0) == '[' &amp;&amp; element.charAt(element.length() - 1) == ']'; } ```  In 2.0.0.M7 the (working) code is ``` private static boolean isIndexed(CharSequence element) { int length = element.length(); return length &gt; 2 &amp;&amp; element.charAt(0) == '[' &amp;&amp; element.charAt(length - 1) == ']'; } ```  ``` Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 at java.lang.String.charAt(String.java:658) at org.springframework.boot.context.properties.source.ConfigurationPropertyName.isIndexed(ConfigurationPropertyName.java:413) at org.springframework.boot.context.properties.source.ConfigurationPropertyName.append(ConfigurationPropertyName.java:188) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:332) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:72) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:61) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:53) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:339) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:340) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:439) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:425) at org.springframework.boot.context.properties.bind.Binder$Context.access$400(Binder.java:379) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:337) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:279) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221) ```  Additional note: The Application class is a singleton retrieved using a static method:  ```     @Bean     @ConfigurationProperties("application")     public Application application()     {         return Application.get();     } ```</body>
		<created>2018-03-06 11:40:45</created>
		<closed>2018-03-07 14:15:06</closed>
	</bug>
	<bug>
		<id>12353</id>
		<title>EndpointRequest should include path to links actuator (unless excluded)</title>
		<body></body>
		<created>2018-03-05 23:48:44</created>
		<closed>2018-03-08 03:06:41</closed>
	</bug>
	<bug>
		<id>12325</id>
		<title>Properties launcher `loader.path` has problems with properly encoded file urls</title>
		<body>To reproduce, create a Spring Boot 2.0 app with 'ZIP' layout.   Build and launch it from the commandline with a command like this:  ``` java -Dloader.path=&lt;file-url&gt; -jar &lt;my-app&gt;.jar ```  Make sure that file url point to a jar file in a path that contains spaces anywhere. If the url is properly encoded, spaces should be represented with `%20`.  An error like the following results (even though the file exists).  ```  java.lang.IllegalArgumentException: File C:\Program%20Files\Java\jdk1.8.0_161\lib\tools.jar must exist at org.springframework.boot.loader.data.RandomAccessDataFile.&lt;init&gt;(RandomAccessDataFile.java:55) at org.springframework.boot.loader.jar.JarFile.&lt;init&gt;(JarFile.java:83) at org.springframework.boot.loader.archive.JarFileArchive.&lt;init&gt;(JarFileArchive.java:60) at org.springframework.boot.loader.archive.JarFileArchive.&lt;init&gt;(JarFileArchive.java:56) at org.springframework.boot.loader.PropertiesLauncher.getArchive(PropertiesLauncher.java:494) at org.springframework.boot.loader.PropertiesLauncher.getClassPathArchives(PropertiesLauncher.java:470) ```  Ran into this bug trying to use properties launcher to address this issue:  https://github.com/spring-projects/sts4/issues/40  A workaround that works for me is to pass the path of the file directly rather than turning into a proper url. </body>
		<created>2018-03-02 21:45:14</created>
		<closed>2018-03-05 11:56:00</closed>
	</bug>
	<bug>
		<id>12322</id>
		<title>Binding to a collection passes in the current instance to the setter</title>
		<body>In a `@ConfigurationProperties` bean if you bind to a collection Spring Boot binds the value *and* calls the setter (with the same instance). It's a bit confusing and probably unexpected.  Failing test:  ```java @RunWith(SpringRunner.class) @SpringBootTest(properties = "app.values=foo") public class BindingApplicationTests {  @Autowired private ConfigProps props;  @Test public void contextLoads() { assertThat(props.getValues()).contains("foo"); }  }  @ConfigurationProperties("app") @Component class ConfigProps { private Set&lt;String&gt; values = new HashSet&lt;&gt;();  public Set&lt;String&gt; getValues() { return values; }  public void setValues(Set&lt;String&gt; values) { this.values.clear(); this.values.addAll(values); } } ```  Set a debug breakpoint in the setter to see what I mean.</body>
		<created>2018-03-02 16:15:54</created>
		<closed>2018-03-19 11:41:46</closed>
	</bug>
	<bug>
		<id>12318</id>
		<title>`@AutoConfigureWebTestClient` breaks when SpringMVC is on the classpath</title>
		<body>spring boot 2.0.0-RELEASE + spring-boot-starter-web-services 2.0.0.RELEASE Tests with   ``` @RunWith(SpringRunner::class) @SpringBootTest @AutoConfigureWebTestClient class DemoApplicationTests {... ```  Application not started after adding **spring-boot-starter-web-services** to dependencies  Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.test.web.reactive.server.WebTestClient]: Factory method 'webTestClient' threw exception; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'webHandler' available</body>
		<created>2018-03-02 14:00:51</created>
		<closed>2018-04-03 09:47:34</closed>
	</bug>
	<bug>
		<id>12297</id>
		<title>BasicJsonParser failing to parse string with comma</title>
		<body>The version of BasicJsonParser in spring-boot-1.5.10.RELEASE is throwing an ArrayIndexOutOfBoundsException parsing the following string:  `"{\"foo\":\"bar1,bar2\"}"`  Test case attached:  [BasicJsonParserTest.java.zip](https://github.com/spring-projects/spring-boot/files/1771540/BasicJsonParserTest.java.zip)  Edit: Removing the comma causes the test case to pass.</body>
		<created>2018-03-01 14:47:17</created>
		<closed>2018-03-01 16:29:43</closed>
	</bug>
	<bug>
		<id>12296</id>
		<title>JarFileTests jarFileCanBeDeletedOnceItHasBeenClosed fails on Windows</title>
		<body></body>
		<created>2018-03-01 11:50:00</created>
		<closed>2018-03-16 15:59:10</closed>
	</bug>
	<bug>
		<id>12286</id>
		<title>ClassCastException on LogbackMetrics when logback is present but not the SLF4J binding</title>
		<body>We need some additional conditional guard around the autoconfiguration of `LogbackMetrics` to ensure that `LoggerFactory.getILoggerFactory()` is of type `ch.qos.logback.classic.LoggerContext` before proceeding to wire the binder.</body>
		<created>2018-02-28 16:14:33</created>
		<closed>2018-02-28 17:20:42</closed>
	</bug>
	<bug>
		<id>12271</id>
		<title>App does not load with a proxied DataSource using Hikari</title>
		<body>With Spring-boot 2.0.0.RC2, when using HikariCP and a datasource proxy or any wrapper around a datasource, there is UnsatisfiedDependencyException:  ``` Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'dataSource' is expected to be of type 'com.zaxxer.hikari.HikariDataSource' but was actually of type 'com.sun.proxy.$Proxy49' ```  Instead of a blocking exception I expect this to succeed like it was in Spring-boot 1.x.  Test case: https://github.com/evernat/datasource-proxy-hikaricp Use mvn spring-boot:run and see UnsatisfiedDependencyException instead of success.  The test case uses a DataSourceBeanPostProcessor to create a proxy as just a "a wrapper around the original" as suggested by the BeanPostProcessor's javadoc and it does not use ProxyFactory.setProxyTargetClass(true) to create a CGLIB proxy.  I think that it should still work in Spring-boot 2.0 and there are several really valid use cases for setProxyTargetClass(true) not being used in my opinion: 1. Calling setProxyTargetClass in this case is not needed in Spring-boot 1.x. And JMX enabled by default is not a good reason to change that in Spring-boot 2.x. 2. Or the datasource proxy may not be created by the application's code and may not be created with Spring either. 3. Or CGLIB may not be available in this application. 4. And the BeanPostProcessor's javadoc only suggest to create here a "wrapper around the original" as a standard practice ; it does not suggest to create a CGLIB proxy.  so why Spring-boot 2.0.0.RC2 requires to use CGLIB here to create a proxy of a standard DataSource ? (The fact that it is a HikariDataSource and that Spring-boot registers the HikariDataSource into JMX is unknown in the DataSourceBeanPostProcessor by separation of concerns and should also be transparent for the application as much as possible in my opinion.)  I will submit a PR in a minute.</body>
		<created>2018-02-28 00:33:20</created>
		<closed>2018-02-28 14:39:52</closed>
	</bug>
	<bug>
		<id>12266</id>
		<title>bootBuildInfo does not re-generate build-info.properties (2.0.0.RC2)</title>
		<body>We are using Spring Boot 2 in a few projects, and I have noticed that build-info.properties has never changed since the first build of the project and that /actuator/info returns this first build information.  It appears on each run, the bootBuildInfo always shows UP-TO-DATE and doesn't re-run.  I can reproduce this with simple starter project:  1. Used start.spring.io to generate sample project. Spring Boot 2.0.0.RC2, gradle-4.5.1-all.zip, Java 8 1. Add ```springBoot { buildInfo() }``` to build.gradle. I placed this after "sourceCompatibility" line. 1. Run gradlew bootBuildInfo, observe build/resources/main/META-INF/build-info.properties is version 0.0.1-SNAPSHOT 1. Update build.gradle ```version='1.0.0-SNAPSHOT'``` 1. Run gradlew bootBuildInfo, it will say task is "UP-TO-DATE". Observe build-info.properties has NOT changed in build.version or build.time values.  Specific to my use case: as I am behind firewall I modified build.gradle repositories and wrapper properties to point to Maven (Nexus) repo mirror and gradle-4.5.1-all.zip on my network. These are mirror of public files so I don't expect this step to matter.  Our project uses 2.0.0.RC1 but the example project above exhibited same behavior with RC1 or RC2.  Workarounds: delete build-info.properties, such as via clean task</body>
		<created>2018-02-27 19:15:51</created>
		<closed>2018-02-27 21:21:49</closed>
	</bug>
	<bug>
		<id>12240</id>
		<title>EndpointRequest shouldn't 500 if management.endpoints.web.exposure.exclude=*</title>
		<body></body>
		<created>2018-02-27 01:48:29</created>
		<closed>2018-10-12 21:57:39</closed>
	</bug>
	<bug>
		<id>12227</id>
		<title>Don't validate getters for non root bindings</title>
		<body>I'm using Spring Boot milestones since M1, and updated without any problem until milestone RC1.  But when trying to use RC2 I get a very strange startup error I'm unable to understand. It seems having something to do with websocket threads or something similar, I attach the (hoping) relevant message errors.  If I just use RC1 or earlier milestone the code runs without problems.  ``` [...] Caused by: java.lang.IllegalStateException: Unable to get value for property session-info         at org.springframework.boot.context.properties.bind.JavaBeanBinder$BeanProperty.lambda$getValue$0(JavaBeanBinder.java:306)         at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:80)         at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:61)         at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:53)         at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:339)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1357)         at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)         at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)         at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:340)         at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:439)         at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:425)         at org.springframework.boot.context.properties.bind.Binder$Context.access$400(Binder.java:379)         at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:337)         at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:279)         at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:221)         ... 82 more Caused by: java.lang.reflect.InvocationTargetException         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.context.properties.bind.JavaBeanBinder$BeanProperty.lambda$getValue$0(JavaBeanBinder.java:303)         ... 102 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.sessionData': Scope 'websocket' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound SimpAttributes found. Your code is probably not processing a client message and executing in message-handling methods invoked by the SimpAnnotationMethodMessageHandler?         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:357)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)         at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)         at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)         at wf.bitcoin.chainmaster.services.SessionData$$EnhancerBySpringCGLIB$$7eebe356.getSessionId(&lt;generated&gt;)         at wf.bitcoin.chainmaster.services.SessionService.getSessionInfo(SessionService.java:351)         ... 107 more Caused by: java.lang.IllegalStateException: No thread-bound SimpAttributes found. Your code is probably not processing a client message and executing in message-handling methods invoked by the SimpAnnotationMethodMessageHandler?         at org.springframework.messaging.simp.SimpAttributesContextHolder.currentAttributes(SimpAttributesContextHolder.java:83)         at org.springframework.messaging.simp.SimpSessionScope.get(SimpSessionScope.java:37)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:345)         ... 112 more ```</body>
		<created>2018-02-26 16:28:32</created>
		<closed>2018-02-27 07:11:16</closed>
	</bug>
	<bug>
		<id>12213</id>
		<title>Spring Boot app fails to start when user.language=tr</title>
		<body>Overwriting Jackson configuration in application.properties i.e. ``` spring.jackson.mapper.accept-case-insensitive-properties=false ``` causes app fail to start with the following error: ``` $ java -Duser.language=tr -jar springboot-localebugdemo-0.0.1-SNAPSHOT.jar 20:45:12.014 [main] INFO springboot.localebugdemo.LocaleBugDemoApplication - user.language=tr    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::       (v1.5.10.RELEASE)  2018-02-25 20:45:12.683  INFO 3448 --- [           main] s.l.LocaleBugDemoApplication             : Starting LocaleBugDemoApplication on DanBarMBP with PID 3448 (/Users/danbar/Projects/lab/springboot-localebugdemo/build/libs/springboot-localebugdemo-0.0.1-SNAPSHOT.jar started by danbar in /Users/danbar/Projects/lab/springboot-localebugdemo/build/libs) 2018-02-25 20:45:12.684 DEBUG 3448 --- [           main] s.l.LocaleBugDemoApplication             : Running with Spring Boot v1.5.10.RELEASE, Spring v4.3.14.RELEASE 2018-02-25 20:45:12.684  INFO 3448 --- [           main] s.l.LocaleBugDemoApplication             : No active profile set, falling back to default profiles: default 2018-02-25 20:45:14.157  INFO 3448 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat] 2018-02-25 20:45:14.159  INFO 3448 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.27 2018-02-25 20:45:14.267  INFO 3448 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2018-02-25 20:45:14.489 ERROR 3448 --- [           main] o.s.b.b.PropertiesConfigurationFactory   : Properties configuration failed validation 2018-02-25 20:45:14.490 ERROR 3448 --- [           main] o.s.b.b.PropertiesConfigurationFactory   : Field error in object 'spring.jackson' on field 'null': rejected value [accept-case-insensitive-properties]; codes [typeMismatch.spring.jackson.null,typeMismatch.null,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [spring.jackson.null,null]; arguments []; default message [null]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'com.fasterxml.jackson.databind.MapperFeature' for property 'null'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [com.fasterxml.jackson.databind.MapperFeature] for value 'accept-case-insensitive-properties'; nested exception is java.lang.IllegalArgumentException: No enum constant com.fasterxml.jackson.databind.MapperFeature.accept-case-insensitive-properties] 2018-02-25 20:45:14.492  WARN 3448 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'standardJacksonObjectMapperBuilderCustomizer' defined in class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration.class]: Unsatisfied dependency expressed through method 'standardJacksonObjectMapperBuilderCustomizer' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties': Could not bind properties to JacksonProperties (prefix=spring.jackson, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'spring.jackson' on field 'null': rejected value [accept-case-insensitive-properties]; codes [typeMismatch.spring.jackson.null,typeMismatch.null,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [spring.jackson.null,null]; arguments []; default message [null]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'com.fasterxml.jackson.databind.MapperFeature' for property 'null'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [com.fasterxml.jackson.databind.MapperFeature] for value 'accept-case-insensitive-properties'; nested exception is java.lang.IllegalArgumentException: No enum constant com.fasterxml.jackson.databind.MapperFeature.accept-case-insensitive-properties] 2018-02-25 20:45:14.495  INFO 3448 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat] 2018-02-25 20:45:14.521 ERROR 3448 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target org.springframework.boot.autoconfigure.jackson.JacksonProperties@4b4523f8 failed:      Property: spring.jackson.null     Value: accept-case-insensitive-properties     Reason: Failed to convert property value of type 'java.lang.String' to required type 'com.fasterxml.jackson.databind.MapperFeature' for property 'null'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [com.fasterxml.jackson.databind.MapperFeature] for value 'accept-case-insensitive-properties'; nested exception is java.lang.IllegalArgumentException: No enum constant com.fasterxml.jackson.databind.MapperFeature.accept-case-insensitive-properties   Action:  Update your application's configuration ```  The same app, started with `user.language=en` (tried some other languages as well) works fine. Seems like any Spring Boot application (even freshly generated, like the one in attached zip) is affected.  [springboot-localebugdemo.zip](https://github.com/spring-projects/spring-boot/files/1755863/springboot-localebugdemo.zip) </body>
		<created>2018-02-25 09:51:06</created>
		<closed>2018-02-26 23:19:41</closed>
	</bug>
	<bug>
		<id>12195</id>
		<title>org.springframework.boot.loader.jar.JarFile.size() does not return the number of entries in the jar</title>
		<body>It's been overridden to return the length of the underlying data. It's inherited from `ZipFile` where it's described as returning "the number of entries in the ZIP file."</body>
		<created>2018-02-23 12:09:58</created>
		<closed>2018-02-23 17:16:04</closed>
	</bug>
	<bug>
		<id>12193</id>
		<title>Cannot provide additional manual metadata for keys that are not unique</title>
		<body>Consider the following additional metadata  ``` {       "name": "spring.flyway.locations",       "type": "java.util.List&lt;java.lang.String&gt;",       "defaultValue": [         "classpath:db/migration"       ] } ```  `spring.flyway.locations` is present as a `List` (in `FlywayProperties`) and as a `String[]` (in `Flyway` itself).   I have a suspicion that because they are two keys with the same id, the merge operation fails. As a result, we get a third entry in the metadata, rather than reconciling with the existing key. Note that adding the `type` as a hint does not make a difference.</body>
		<created>2018-02-23 09:55:00</created>
		<closed>2018-05-02 14:08:26</closed>
	</bug>
	<bug>
		<id>12174</id>
		<title>WildFly deployment with Spring Security generates WARNING on startup</title>
		<body>I've ran into this upgrading from RC1 to RC2. It is basically the issue to one reported in #11891, which wasn't fully fixed.  The cause is presumably the same as import of `WebFluxSecurityConfiguration` in `ReactiveSecurityAutoConfiguration` isn't guarded by a condition, and in turn import of `ServerHttpSecurityConfiguration` (which implements `WebFluxConfigurer`) as well.  ``` 11:46:30,994 WARN  [org.jboss.modules] (ServerService Thread Pool -- 65) Failed to define class org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration in Module "deployment.kaas.war:main" from Service Module Loader: java.lang.NoClassDefFoundError: Failed to link org/springframework/security/config/annotation/web/reactive/ServerHttpSecurityConfiguration (Module "deployment.kaas.war:main" from Service Module Loader): org/springframework/web/reactive/config/WebFluxConfigurer at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:446) at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:274) at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:78) at org.jboss.modules.Module.loadModuleClass(Module.java:606) at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190) at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:363) at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:351) at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:93) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:348) at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114) at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125) at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) at sun.reflect.annotation.AnnotationParser.parseSig(AnnotationParser.java:439) at sun.reflect.annotation.AnnotationParser.parseClassValue(AnnotationParser.java:420) at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) at java.lang.Class.createAnnotationData(Class.java:3521) at java.lang.Class.annotationData(Class.java:3510) at java.lang.Class.getAnnotations(Class.java:3446) at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:237) at org.springframework.core.type.classreading.AnnotationAttributesReadingVisitor.visitEnd(AnnotationAttributesReadingVisitor.java:77) at org.springframework.asm.ClassReader.readAnnotationValues(ClassReader.java:2020) at org.springframework.asm.ClassReader.accept(ClassReader.java:676) at org.springframework.asm.ClassReader.accept(ClassReader.java:527) at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:65) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:103) at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:88) at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:75) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:81) at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:699) at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getRelated(ConfigurationClassParser.java:929) at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getAnnotationAttributes(ConfigurationClassParser.java:910) at org.springframework.context.annotation.ConfigurationClassParser.collectImports(ConfigurationClassParser.java:532) at org.springframework.context.annotation.ConfigurationClassParser.getImports(ConfigurationClassParser.java:505) at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:296) at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:241) at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:606) at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:548) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:184) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:316) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:233) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:693) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172) at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:186) at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:171) at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42) at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:234) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:100) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:82) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) at org.jboss.threads.JBossThread.run(JBossThread.java:320) ``` </body>
		<created>2018-02-22 11:31:09</created>
		<closed>2018-02-23 20:52:25</closed>
	</bug>
	<bug>
		<id>12171</id>
		<title>RestartClassLoader doesn't use synchronization in loadClass method.</title>
		<body>When classes are loaded in parallel RestartClassLoader causes this exception:  ``` Caused by: java.lang.LinkageError: loader (instance of  org/springframework/boot/devtools/restart/classloader/RestartClassLoader): attempted  duplicate class definition for name: "XXX" at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:763) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) at java.net.URLClassLoader.access$100(URLClassLoader.java:73) at java.net.URLClassLoader$1.run(URLClassLoader.java:368) at java.net.URLClassLoader$1.run(URLClassLoader.java:362) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:361) at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.findClass(RestartClassLoader.java:165) at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:148) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ```  It seems that RestartClassLoader.loadClass doesn't use synchronization for loading classes as specified in  [https://docs.oracle.com/javase/9/docs/api/java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-](https://docs.oracle.com/javase/9/docs/api/java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-)  Thanks.   &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2018-02-22 09:42:12</created>
		<closed>2018-02-23 15:35:21</closed>
	</bug>
	<bug>
		<id>12107</id>
		<title>Add org.apache.httpcomponents:fluent-hc in spring-boot-dependencies pom.xml</title>
		<body>I use Spring Boot dependencies management in my project, which uses some org.apache.httpcomponents denpendencies. Here's my proposal:  Since the org.apache.httpcomponents:httpclient dependency is provided by Spring Boot, it would be nice if the org.apache.httpcomponents:fluent-hc was provided too, since it uses the same version as httpclient (same as httpmime, which is provided by Spring Boot).  Thanks.</body>
		<created>2018-02-18 16:53:59</created>
		<closed>2018-02-19 10:38:30</closed>
	</bug>
	<bug>
		<id>12104</id>
		<title>Controller endpoints map a RequestMapping with no path to the wrong place</title>
		<body>``` @RestControllerEndpoint(id = "example") class ExampleController {  @GetMapping public String example() { return "Example"; }  } ```  The mapping for `example()` is an empty string. It should be `/actuator/example`. If the `@GetMapping` has a path of `"/"`, the mapping becomes `/actuator/example` as expected.</body>
		<created>2018-02-18 10:05:18</created>
		<closed>2018-02-18 19:54:46</closed>
	</bug>
	<bug>
		<id>12103</id>
		<title>Jersey’s 2.26 bom breaks dependencies on org.glassfish.jersey.bundles.repackaged:jersey-jsr166e</title>
		<body>The managed version is 2.26 which doesn’t exist in Maven Central. We need to revert #12082.</body>
		<created>2018-02-18 09:42:05</created>
		<closed>2018-02-18 09:52:53</closed>
	</bug>
	<bug>
		<id>12086</id>
		<title>Align ReactiveWebServerAutoConfiguration with ServletWebServerFactoryAutoConfiguration</title>
		<body>Having just worked with `ServletWebServerFactoryAutoConfiguration`, I stumbled trying to find `ReactiveWebServerFactoryAutoConfiguration` as it doesn't exist. `ReactiveWebServerAutoConfiguration` is the reactive equivalent of `ServletWebServerFactoryAutoConfiguration`. I think it should be named `ReactiveWebServerFactoryAutoConfiguration` to reflect that equivalence.</body>
		<created>2018-02-16 09:03:51</created>
		<closed>2018-02-16 10:03:13</closed>
	</bug>
	<bug>
		<id>12058</id>
		<title>Embedded Tomcat fails to start when configured to use SSL session tracking</title>
		<body>I have been experimenting with session tracking by SSL in a SpringBoot application, by using the application property **server.session.tracking-modes=ssl**.  See https://docs.spring.io/spring-boot/docs/1.5.x/reference/html/common-application-properties.html  SSL is already working in the application. But when I set tracking mode to SSL, SpringBoot fails to start with an      Caused by java.lang.IllegalArgumentException: The session tracking mode SSL requested for context  is not supported by that context  Step debugging reveals that populateSessionTrackingModes() in https://github.com/apache/tomcat/blob/TOMCAT_9_0_5/java/org/apache/catalina/core/ApplicationContext.java has this code:  **ApplicationContext at line 1011**      // SSL not enabled by default as it can only used on its own     // Context &gt; Host &gt; Engine &gt; Service     Service s = ((Engine) context.getParent().getParent()).getService();     Connector[] connectors = s.findConnectors();     // Need at least one SSL enabled connector to use the SSL session ID.     for (Connector connector : connectors) {         if (Boolean.TRUE.equals(connector.getAttribute("SSLEnabled"))) {            supportedSessionTrackingModes.add(SessionTrackingMode.SSL);            break;         }     }  This code makes perfect sense not to allow SSL tracking without an SSL connector.  But initialize() in https://github.com/joansmith/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java seems to break it by a single line of code:  **TomcatEmbeddedServletContainer at line 85**      // Remove service connectors to that protocol binding doesn't happen yet removeServiceConnectors();  This code is run before the code in ApplicationContext, and it seems to explain why there are no connectors at all when the check for an SSL enabled connector is performed.  I believe this very well could be why session tracking by SSL fails.</body>
		<created>2018-02-14 09:56:04</created>
		<closed>2018-02-14 17:23:36</closed>
	</bug>
	<bug>
		<id>12015</id>
		<title>ApplicationContextAssert does not consider parent</title>
		<body>Currently we use `getBeanNamesForType` in `ApplicationContextAssert` which doesn't really match what getBean will do.</body>
		<created>2018-02-12 23:24:08</created>
		<closed>2018-02-13 01:50:27</closed>
	</bug>
	<bug>
		<id>12014</id>
		<title>Cloud Foundry health endpoint only shows full details if flag is set</title>
		<body></body>
		<created>2018-02-12 23:00:36</created>
		<closed>2018-02-12 23:34:38</closed>
	</bug>
	<bug>
		<id>12013</id>
		<title>ConfigurationPropertySources fails to resolve correctly with parent context</title>
		<body>Attaching a `ConfigurationPropertySources` in a parent/child `ApplicationContext` setup currently doesn't work correctly. The child will merge property sources from the parent, including the adapter. Caching then gets messed up.</body>
		<created>2018-02-12 22:57:25</created>
		<closed>2018-02-13 01:50:27</closed>
	</bug>
	<bug>
		<id>12006</id>
		<title>MeterRegistry implementations are not stopped when the context is closed.</title>
		<body>Many of them have a `stop` method but it isn't called when the context is closed. As a result the registry doesn't tidy up its resources. For example, the Ganglia exporter leaks threads. This is apparent in our tests for the auto-configuration, but it will also affect apps where the lifecycle of an application context that's using Micrometer isn't the same as the lifecycle of the JVM.  I think we need to configure `stop` as a custom destroy method.  /cc @jkschneider</body>
		<created>2018-02-12 17:30:48</created>
		<closed>2018-02-13 09:35:46</closed>
	</bug>
	<bug>
		<id>11998</id>
		<title>AnnotationConfigRegistry.register(Class&lt;?&gt;... annotatedClasses) implementations have inconsistent behaviour</title>
		<body>The following implementations accumulate classes across multiple calls:  - `AnnotationConfigReactiveWebApplicationContext.register(Class&lt;?&gt;...)`  The following implementations overwrite previously registered classes:  - `AnnotationConfigReactiveWebServerApplicationContext.register(Class&lt;?&gt;...)` - `AnnotationConfigServletWebServerApplicationContext.register(Class&lt;?&gt;...)`  Spring Framework's two implementations of the method accumulate the classes across multiple calls. When should align all of Boot's implementations with Framework's behaviour.</body>
		<created>2018-02-12 09:45:46</created>
		<closed>2018-02-12 10:04:03</closed>
	</bug>
	<bug>
		<id>11992</id>
		<title>BasicJsonParser parse string that only contains digit as long </title>
		<body>https://github.com/spring-projects/spring-boot/blob/5e0df39c660c41709a2baaefa5158c5845feef46/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java#L114  ```java BasicJsonParser parser = new BasicJsonParser(); Map&lt;String, Object&gt; map = parser.parseMap("{\"name\": \"11111\"}"); ``` The entry is  String-&gt;Long</body>
		<created>2018-02-11 08:11:38</created>
		<closed>2018-02-12 16:08:30</closed>
	</bug>
	<bug>
		<id>11988</id>
		<title>Querying secured /auditevents results in status 400</title>
		<body>Querying the **secured** `/audievents` endpoint always results in a status 400 response using the current BUILD-SNAPSHOT. When the endpoint is not secured everything works fine.  log: ``` 2018-02-10 13:43:13.271  WARN 19856 --- [nio-9090-exec-9] .w.s.m.a.ResponseStatusExceptionResolver : Resolved exception caused by Handler execution: org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$BadOperationRequestException: Parameter mapping failure ```  The stacktrace of the caught `InvalidEndpointRequestException` (whose message is used to create the `BadOperationRequestException`): ``` org.springframework.boot.actuate.endpoint.invoke.ParameterMappingException: Failed to map org.springframework.security.authentication.UsernamePasswordAuthenticationToken@ffc98171: Principal: org.springframework.security.core.userdetails.User@36ebcb: Username: user; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Not granted any authorities; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@957e: RemoteIpAddress: 127.0.0.1; SessionId: null; Not granted any authorities of type class org.springframework.security.authentication.UsernamePasswordAuthenticationToken to principal of type java.lang.String at org.springframework.boot.actuate.endpoint.invoke.convert.ConversionServiceParameterValueMapper.mapParameterValue(ConversionServiceParameterValueMapper.java:62) at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.resolveArgument(ReflectiveOperationInvoker.java:102) at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.lambda$resolveArguments$1(ReflectiveOperationInvoker.java:96) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:545) at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260) at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438) at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:444) at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.resolveArguments(ReflectiveOperationInvoker.java:96) at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:72) at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:62) at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$ServletWebOperationAdapter.handle(AbstractWebMvcEndpointHandlerMapping.java:244) at org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping$OperationHandler.handle(AbstractWebMvcEndpointHandlerMapping.java:303) at sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:870) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:776) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:870) at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:855) at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:158) at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:126) at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:111) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:84) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:215) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215) at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178) at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357) at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748) Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [org.springframework.security.authentication.UsernamePasswordAuthenticationToken] to type [java.lang.String] at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:321) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:194) at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:174) at org.springframework.boot.context.properties.bind.convert.BinderConversionService.lambda$convert$0(BinderConversionService.java:106) at org.springframework.boot.context.properties.bind.convert.BinderConversionService.callConversionServices(BinderConversionService.java:119) at org.springframework.boot.context.properties.bind.convert.BinderConversionService.convert(BinderConversionService.java:106) at org.springframework.boot.actuate.endpoint.invoke.convert.ConversionServiceParameterValueMapper.mapParameterValue(ConversionServiceParameterValueMapper.java:59) ... 113 more ```</body>
		<created>2018-02-10 12:48:29</created>
		<closed>2018-02-12 10:47:15</closed>
	</bug>
	<bug>
		<id>11979</id>
		<title>Datadog metrics export requires an API key even when you've provided a custom DatadogConfig bean</title>
		<body>I don't think `DatadogMetricsExportAutoConfiguration` should be `@ConditionalOnProperty("management.metrics.export.datadog.api-key")` as it means that, even when you provide a custom `DatadogConfig` bean, you still need to set `management.metrics.export.datadog.api-key` to activate the auto-configuration even then it then probably won't be used.</body>
		<created>2018-02-09 15:34:51</created>
		<closed>2018-02-09 16:04:59</closed>
	</bug>
	<bug>
		<id>11968</id>
		<title>Servlet endpoints are not affected by expose and exclude properties</title>
		<body>It looks like we're missing a `ExposeExcludePropertyEndpointFilter` bean for `ExposableServletEndpoint`.</body>
		<created>2018-02-08 20:26:41</created>
		<closed>2018-02-09 11:24:47</closed>
	</bug>
	<bug>
		<id>11931</id>
		<title>Generic information on @Bean method is not considered when binding</title>
		<body>Give the following:  ```java @Bean  @ConfigurationProperties("foo") public AGenericBean&lt;String&gt; aBeanToBind() {     return new AGenericBean&lt;&gt;(); } ```  Our `ConfigurationPropertiesBindingPostProcessor` creates a `Bindable` from the bean instance and won't consider the method return type. If we instead created a `Bindable` from the result of `ConfigurationBeanFactoryMetaData.findFactoryMethod` we'd actually have the generic.     </body>
		<created>2018-02-06 20:02:05</created>
		<closed>2018-02-07 21:58:38</closed>
	</bug>
	<bug>
		<id>11926</id>
		<title>Path request matcher not matching correctly for H2 console (PathRequest.toH2Console())</title>
		<body>Hi,   using PathRequest.toH2Console() for getting H2 console request matcher is not working properly (or should be better documented).  I tried to configure .ignoring() for WebSecurity: ```java @ConditionalOnProperty(value = "security.form.enabled", matchIfMissing = true) @Configuration class FormLoginConfiguration extends WebSecurityConfigurerAdapter {  @Override public void configure(WebSecurity web) throws Exception { web.ignoring() .requestMatchers(PathRequest.toH2Console()); }  /* @Override public void configure(WebSecurity web) throws Exception { web.ignoring() .requestMatchers("/h2-console/**"); }  */  @Override protected void configure(HttpSecurity http) throws Exception { http .exceptionHandling() .defaultAuthenticationEntryPointFor(new Http403ForbiddenEntryPoint(), new RequestHeaderRequestMatcher("X-Requested-With", "XMLHttpRequest")) .and() .authorizeRequests() .antMatchers("/login**").permitAll() .requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll() .antMatchers("/**.map").permitAll() .anyRequest().authenticated() .and() .formLogin() .loginPage("/login").permitAll() .and() .rememberMe(); }  } ``` With this configuration I get login page from H2 console but when I click on *Login*, I get 403 page.  If using ```.requestMatchers("/h2-console/**")``` instead, then all is working normally.  Problem could be with `H2ConsoleRequestMatcher` because it is using H2 console path (default */h2-console*) in `AntPathRequestMatcher` without wildcards.  (Using Spring Boot 2.0.0.RC1)</body>
		<created>2018-02-06 16:15:32</created>
		<closed>2018-02-06 21:26:06</closed>
	</bug>
	<bug>
		<id>11912</id>
		<title>Reduce metrics debug logging when HandlerMapping is not a MatchableHandlerMapping</title>
		<body>When using both spring-boot-starter-data-rest and spring-boot-starter-actuator with debug enabled I noticed the following errors starting with RC1 (skipped M7 so it might have started at M7).  ``` java.lang.IllegalStateException: HandlerMapping is not a MatchableHandlerMapping at org.springframework.web.servlet.handler.HandlerMappingIntrospector.getMatchableHandlerMapping(HandlerMappingIntrospector.java:133) ~[spring-webmvc-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.getHandler(WebMvcMetricsFilter.java:129) [spring-boot-actuator-2.0.0.RC1.jar:2.0.0.RC1] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117) [spring-boot-actuator-2.0.0.RC1.jar:2.0.0.RC1] at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109) [spring-boot-actuator-2.0.0.RC1.jar:2.0.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:84) [spring-boot-actuator-2.0.0.RC1.jar:2.0.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.27.jar:8.5.27] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.27.jar:8.5.27] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.27.jar:8.5.27] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144] ```  Issue appears to be with `DelegatingHandlerMapping` not being an instance of `MatchableHandlerMapping` and requests to endpoints that use spring data rest don't generate metrics data.</body>
		<created>2018-02-05 17:38:16</created>
		<closed>2018-02-07 17:07:18</closed>
	</bug>
	<bug>
		<id>11908</id>
		<title>Nullpointer exception when binding `ConfigurationProperties` to generic class</title>
		<body>The following application fails to start:  ```java package com.example.demo;  import org.springframework.beans.factory.FactoryBean; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.ApplicationListener; import org.springframework.context.annotation.Bean; import org.springframework.core.env.ConfigurableEnvironment; import org.springframework.core.env.PropertySource;  @SpringBootApplication public class DemoApplication {  public static void main(String[] args) { new SpringApplicationBuilder(DemoApplication.class) .listeners(new EventListener()) .run(args); }  @Bean @ConfigurationProperties(prefix = "foo") public AFactoryBean&lt;String&gt; fooFactoryBean() { return new AFactoryBean&lt;&gt;(); }  public static class AFactoryBean&lt;T&gt; implements FactoryBean&lt;T&gt; { @Override public T getObject() { return null; }  @Override public Class&lt;?&gt; getObjectType() { return null; } }  static class EventListener implements ApplicationListener&lt;ApplicationEnvironmentPreparedEvent&gt; { @Override public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) { final ConfigurableEnvironment environment = event.getEnvironment(); environment.getPropertySources().addLast(new PropertySource&lt;String&gt;("AXY") { @Override public String getProperty(String name) { return null; } }); } } } ```  Error:  ``` 2018-02-05 13:59:05.903  WARN 27735 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fooFactoryBean': Could not bind properties to 'DemoApplication.AFactoryBean': prefix=foo, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'foo.object' to ? 2018-02-05 13:59:05.908  INFO 27735 --- [           main] ConditionEvaluationReportLoggingListener :   Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled. 2018-02-05 13:59:05.910 ERROR 27735 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Failed to bind properties under 'foo.object' to ?:      Reason: Failed to bind properties under 'foo.object' to ?  Action:  Update your application's configuration ```  Stacktrace:  ``` java.lang.NullPointerException at java.lang.Class.isAssignableFrom(Native Method) at org.springframework.boot.context.properties.bind.Binder.getAggregateBinder(Binder.java:266) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:243) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:198) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:313) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:321) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:322) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:415) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:405) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:319) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:261) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:198) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:187) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:169) at org.springframework.boot.context.properties.ConfigurationPropertiesBinder.bind(ConfigurationPropertiesBinder.java:79) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:167) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:423) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1702) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:742) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:136) at com.example.demo.DemoApplication.main(DemoApplication.java:19) ```  Binding the object fails at [`Map.class.isAssignableFrom(resolvedType)`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L265) with a `NullPointerException` due to the `resolvedType` being null (Spring cannot resolve the return type of the Method, internally this is done: `ResolvableType.forMethodReturnType(AFactoryBean.class.getMethod("getObject"))`).  This only happens in combination with a `PropertySource` that does not extend `EnumerablePropertySource` (e.g. a JndiPropertySource) because the property will not be skipped at  [`if (property == null &amp;&amp; containsNoDescendantOf(context.streamSources(), name))`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L240).  Sample Project: [cpf.zip](https://github.com/spring-projects/spring-boot/files/1695180/cpf.zip)</body>
		<created>2018-02-05 13:27:58</created>
		<closed>2018-02-07 21:58:38</closed>
	</bug>
	<bug>
		<id>11903</id>
		<title>@MockBean and @SpyBean don't work when @DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD) is used</title>
		<body>Spring Boot 1.5.10.RELEASE  `@SpyBean` doesn't work when `@DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD)` is placed on the test class.  Example:  ```java @RunWith(SpringRunner.class) @SpringBootTest @DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD) public class MyServiceTests {  @Autowired private MyService myService;  @SpyBean private SpyMe spyMe;  @Test public void spyBean() { myService.serviceMethod(); verify(spyMe).someMethod(); // doesn't pass }  }  @Service public class MyService {  @Autowired private SpyMe spyMe;  public void serviceMethod() { spyMe.someMethod(); }  }  @Component public class SpyMe {  public void someMethod() { System.out.println("SpyMe.someMethod() was called"); }  } ```  If I remove `@DirtiesContext` or use other `classMode` (`AFTER_EACH_TEST_METHOD` for example) - test passes.  MCVE: https://github.com/xak2000/spybean-dirtiescontext-bug</body>
		<created>2018-02-05 00:05:51</created>
		<closed>2018-02-05 11:05:31</closed>
	</bug>
	<bug>
		<id>11891</id>
		<title>WildFly deployment with Spring Security generates WARNING on startup</title>
		<body>This was originally reported at https://github.com/spring-projects/spring-security/issues/4989  When spring-boot-starter-security is on the classpath of a WildFly application it produces the following warning at startup:  ``` 22:35:30,807 WARN  [org.jboss.modules] (ServerService Thread Pool -- 64) Failed to define class org.springframework.security.web.reactive.result.method.annotation.AuthenticationPrincipalArgumentResolver in Module "deployment.demo.war:main" from Service Module Loader: java.lang.NoClassDefFoundError: Failed to link org/springframework/security/web/reactive/result/method/annotation/AuthenticationPrincipalArgumentResolver (Module "deployment.demo.war:main" from Service Module Loader): org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverSupport at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:446) at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:274) at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:78) at org.jboss.modules.Module.loadModuleClass(Module.java:606) at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190) at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:363) at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:351) at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:93) at org.springframework.boot.autoconfigure.condition.OnClassCondition$MatchType.forName(OnClassCondition.java:234) at org.springframework.boot.autoconfigure.condition.OnClassCondition$MatchType.isPresent(OnClassCondition.java:223) at org.springframework.boot.autoconfigure.condition.OnClassCondition$MatchType.access$300(OnClassCondition.java:198) at org.springframework.boot.autoconfigure.condition.OnClassCondition$MatchType$2.matches(OnClassCondition.java:213) at org.springframework.boot.autoconfigure.condition.OnClassCondition.getMatches(OnClassCondition.java:181) at org.springframework.boot.autoconfigure.condition.OnClassCondition.access$400(OnClassCondition.java:52) at org.springframework.boot.autoconfigure.condition.OnClassCondition$StandardOutcomesResolver.getOutcome(OnClassCondition.java:318) at org.springframework.boot.autoconfigure.condition.OnClassCondition$StandardOutcomesResolver.getOutcomes(OnClassCondition.java:310) at org.springframework.boot.autoconfigure.condition.OnClassCondition$StandardOutcomesResolver.resolveOutcomes(OnClassCondition.java:298) at org.springframework.boot.autoconfigure.condition.OnClassCondition.getOutcomes(OnClassCondition.java:99) at org.springframework.boot.autoconfigure.condition.OnClassCondition.match(OnClassCondition.java:63) at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.filter(AutoConfigurationImportSelector.java:243) at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.selectImports(AutoConfigurationImportSelector.java:101) at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:547) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:184) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:316) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:233) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:693) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:138) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135) at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87) at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172) at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:186) at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:171) at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42) at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44) at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:234) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:100) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:82) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) at org.jboss.threads.JBossThread.run(JBossThread.java:320) ```  The WARNING is logged because Spring Boot `ReactiveSecurityAutoConfiguration` is conditional on [AuthenticationPrincipalArgumentResolver](https://github.com/spring-projects/spring-boot/blob/v2.0.0.RC1/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java#L39) being present. When Boot attempts to load the class to see if it is present and determine if `ReactiveSecurityAutoConfiguration` should be loaded it fails because `org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverSupport` is not on the classpath. When JBoss modules finds `AuthenticationPrincipalArgumentResolver` and does not find `org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverSupport` it logs this warning message.  To avoid the warning we could change the conditional to include a conditional on Spring WebFlux being on the classpath before we check to see if Spring Security WebFlux is present.</body>
		<created>2018-02-02 15:43:35</created>
		<closed>2018-02-08 00:18:50</closed>
	</bug>
	<bug>
		<id>11890</id>
		<title>MetricsAutoConfiguration causes big chunk of early instantiations</title>
		<body>&lt;!-- Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it. --&gt;  The [`MeterRegistryPostProcessor`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java#L75) defined in `MetricsAutoConfiguration` causes a bunch of early bean instantiations.  ``` 2018-02-02 14:36:04.166  INFO 15124 --- [           main] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2018-02-02 14:36:04.339  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e97a5208] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.456  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBinderBuilder$ConversionServiceFactory' of type [org.springframework.boot.context.properties.ConfigurationPropertiesBinderBuilder$ConversionServiceFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.463  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties' of type [org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.469  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.actuate.autoconfigure.metrics.MeterBindersConfiguration' of type [org.springframework.boot.actuate.autoconfigure.metrics.MeterBindersConfiguration$$EnhancerBySpringCGLIB$$8cd1e0d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.479  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'jvmGcMetrics' of type [io.micrometer.core.instrument.binder.jvm.JvmGcMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.482  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'jvmMemoryMetrics' of type [io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.485  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'jvmThreadMetrics' of type [io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.487  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'logbackMetrics' of type [io.micrometer.core.instrument.binder.logging.LogbackMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.489  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'uptimeMetrics' of type [io.micrometer.core.instrument.binder.system.UptimeMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.492  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'processorMetrics' of type [io.micrometer.core.instrument.binder.system.ProcessorMetrics] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.498  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration' of type [org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration$$EnhancerBySpringCGLIB$$9f3a1161] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.510  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'metricsWebClientUriTagFilter' of type [io.micrometer.core.instrument.config.MeterFilter$8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.536  INFO 15124 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$5945505] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:36:04.768  INFO 15124 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) ```  Disabling the AutoConfiguration with: ```java @SpringBootApplication(exclude = {MetricsAutoConfiguration.class}) ```  Changes the log-output to: ``` 2018-02-02 14:28:16.366  INFO 13668 --- [           main] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2018-02-02 14:28:16.554  INFO 13668 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b23ad491] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:28:16.688  INFO 13668 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$ce54d78e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2018-02-02 14:28:16.948  INFO 13668 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http) ``` </body>
		<created>2018-02-02 13:41:47</created>
		<closed>2018-02-07 11:13:54</closed>
	</bug>
	<bug>
		<id>11872</id>
		<title>TestRestTemplate constructor with RestTemplate param should not change error handler</title>
		<body>Using Spring Boot 2.0 M7.  Similar to https://github.com/spring-projects/spring-boot/issues/7441 , the main `TestRestTemplate` constructor replaces the `RestTemplate`'s configured error handler with `NoOpResponseErrorHandler` (constructor signature is `TestRestTemplate(RestTemplate restTemplate, String username, String password, HttpClientOption... httpClientOptions)`)  `RestTemplate` is a parameter and therefore the constructor should respect its configuration and not change it.  The other `TestRestTemplate` constructors internally instantiate a `RestTemplate` so can replace the default error handler without issue. </body>
		<created>2018-01-31 21:05:53</created>
		<closed>2018-02-12 15:58:18</closed>
	</bug>
	<bug>
		<id>11855</id>
		<title>redis sentinel default configuration broken</title>
		<body>https://github.com/spring-projects/spring-boot/blob/d478e9bf57b73ca84539c0e9bfa82961256e50d9/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/JedisConnectionConfiguration.java#L88  https://github.com/spring-projects/spring-data-redis/blob/2fe048bfff856012f42aed9f702334bc5b7d28fd/src/main/java/org/springframework/data/redis/connection/jedis/JedisConnectionFactory.java#L275  Using springBoot with version `2.0.0.M6` and `redis.clients:jedis:2.9.0`,with config: ```yml spring:   redis:     sentinel:       nodes: 0.0.0.0:26379,0.0.0.0:26479,0.0.0.0:26579       master: mymaster ```  But Spring Boot not use sentinel config,but resolve to `localhost:6379`.By debugging I found the above code is the cause: **If the pool configuration is leave out,Spring Boot will resolve to `localhost:6379`**</body>
		<created>2018-01-31 03:19:17</created>
		<closed>2018-02-02 11:25:37</closed>
	</bug>
	<bug>
		<id>11814</id>
		<title>ErrorPageFilter causes a forwarded request that sends an error to actually send a 200 OK response instead</title>
		<body># Question With default servlet enabled, when deployed in an external Tomcat, the request to non-existent resource returned 200 instead of 404. I created a demo for this problem. https://github.com/tankilo/spring-boot-problem-demo Version Info : Spring Boot 1.5.9.RELEASE  Tomcat 8.5.24  1. When i used IDEA to deploy war, visiting http://localhost:8080/ will get 200. ![445bf743-f7f8-4056-9d55-2928f87ceffa](https://user-images.githubusercontent.com/10413284/35478028-9269d970-040d-11e8-8f5e-ae6bf5c5d586.png) And in the log ,i found ``` 2018-01-28 09:38:28.495 ERROR 12928 --- [nio-8080-exec-4] o.s.boot.web.support.ErrorPageFilter     : Cannot forward to error page for request [/] as the response has already been committed. As a result, the response may have the wrong status code. If your application is running on WebSphere Application Server you may be able to resolve this problem by setting com.ibm.ws.webcontainer.invokeFlushAfterService to false ``` 2. When i used IDEA to run com.tankilo.demo.DemoApplication, visiting http://localhost:8080/ will get Spring Whitelabel Error Page. ![image](https://user-images.githubusercontent.com/10413284/35478056-118053e2-040e-11e8-9638-f0d36734276f.png)  # Personal Understanding  After i debug and compare the two scenes, i find: 1. Only when deployed as a war will ErrorPageFilter be in used. (SpringBootServletInitializer#createRootApplicationContext)  2. When running com.tankilo.demo.DemoApplication, even without ErrorPageFilter, ErrorMvcAutoConfiguration will configure Tomcat ErrorPage，and we still see the Whitelabel Error Page.  I am still not clear about this question, is there something wrong with the way i use springboot? -_- </body>
		<created>2018-01-28 02:33:29</created>
		<closed>2018-04-04 12:49:51</closed>
	</bug>
	<bug>
		<id>11795</id>
		<title>Endpoint caching  does not work if all parameters of a @ReadOperation are nullable</title>
		<body>https://github.com/spring-projects/spring-boot/issues/11703#issuecomment-360823686</body>
		<created>2018-01-26 15:56:37</created>
		<closed>2018-01-31 16:49:23</closed>
	</bug>
	<bug>
		<id>11794</id>
		<title>Confusing legacy properties report for properties that have a replacement with a non-matching type</title>
		<body>Considering  `spring.messages.cache-seconds` that is a `Long` in the previous version and remapped to `spring.messages.cache` of type `Duration`. The current output is as follows:  ``` Property source 'applicationConfig: [classpath:/application.properties]':     Key: spring.messages.cache-seconds         Line: 135         Reason: none ```  Two things about this:  * We could not rename the property unless we start adding some logic in the migrator. This logic doesn't sound too bad but maybe we have more use cases * As we couldn't rename the property, maybe we should compute a reason, something like "Failed to rename to `spring.message.cache` as it uses an incompatible type (`java.time.Duration`)."</body>
		<created>2018-01-26 14:42:07</created>
		<closed>2018-01-29 09:31:34</closed>
	</bug>
	<bug>
		<id>11793</id>
		<title>Revisit `LoggersEndpointAutoConfiguration` conditions</title>
		<body>The `LoggersEndpointAutoConfiguration` currently has `LoggersEndpoint` as `@ConditionalOnBean(LoggingSystem.class)`. However, if Boot's logging configuration is disabled by setting `org.springframework.boot.logging.LoggingSystem` system property to `none` this will still result in `NoOpLoggingSystem` being registered, and in turn the `LoggersEndpoint` as well which will return just the  this:  ```json {     "levels": [         "OFF",         "FATAL",         "ERROR",         "WARN",         "INFO",         "DEBUG",         "TRACE"     ],     "loggers": {     } } ```  Arguably condition on `LoggersEndpoint` should be such that it doesn't match when Boot's logging configuration is disabled.</body>
		<created>2018-01-26 14:32:29</created>
		<closed>2018-01-29 15:38:01</closed>
	</bug>
	<bug>
		<id>11761</id>
		<title>When using a non-standard logback.xml location, -Dlogback.configurationFile must also be specified</title>
		<body>Version: Spring-boot 2.0.0M7 We have scripts that wrap our spring-boot applications for execution. For both our server and command line interface, we've got the following:  ``` LOGGING_CONFIG=${ETC_DIR}/logback.xml ... LOG_DIR="${LOG_DIR}" PLUGIN_DIR="${PLUGIN_DIR}" "${JAVA_HOME}/bin/java" \     $JAVA_OPTS \     -Dlogging.config="${LOGGING_CONFIG}" \     -Djava.awt.headless=true \     -jar "${MAIN_JAR}" "$@" \     $DEFAULT_ARGS \     --spring.config.additional-location="${MAIN_CONFIG}" ```  logback.xml itself having the following snippet in it:  ```     &lt;logger name="org.springframework" level="INFO"/&gt; ```  With this command (edited for some slight anonymity), I was getting the following print out:  ``` ➜  cli git:(master) ✗ bin/my-app 16:14:18.612 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.exception-conversion-word' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.pattern.console' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.pattern.file' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.file.max-history' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.file.max-size' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.pattern.level' in any property source 16:14:18.617 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'logging.pattern.dateformat' in any property source ```  After this, everything respected the rules of the logback.xml I provided, just not these statements. However, by adding `-Dlogback.configurationFile="${LOGGING_CONFIG}"` to my script, these statements go away, so to put that all together:  ``` LOGGING_CONFIG=${ETC_DIR}/logback.xml ... LOG_DIR="${LOG_DIR}" PLUGIN_DIR="${PLUGIN_DIR}" "${JAVA_HOME}/bin/java" \     $JAVA_OPTS \     -Dlogging.config="${LOGGING_CONFIG}" \     -Dlogback.configurationFile="${LOGGING_CONFIG}" \     -Djava.awt.headless=true \     -jar "${MAIN_JAR}" "$@" \     $DEFAULT_ARGS \     --spring.config.additional-location="${MAIN_CONFIG}" ```  Bug, or is there a spring-boot 2.0.0 setting I'm unaware of?</body>
		<created>2018-01-24 23:07:31</created>
		<closed>2018-02-01 12:53:58</closed>
	</bug>
	<bug>
		<id>11756</id>
		<title>WebFilters are not ordered explicitly</title>
		<body>We currently auto-configure two `WebFilter` beans:  - `WebFilterChainProxy` from Spring Security - `MetricsWebFilter` for Micrometer  A third will shortly be added:  - `HttpTraceWebFilter` for actuator request-response exchange tracing  `WebFilterChainProxy` is ordered (-100) but `MetricsWebFilter` is not. As a result it picks up the default order (lowest precedence). We need to explicitly order all `WebFilter` beans so that their ordering is predictable and documented.</body>
		<created>2018-01-24 14:20:04</created>
		<closed>2018-01-25 11:55:19</closed>
	</bug>
	<bug>
		<id>11719</id>
		<title>HikariCP logs 'testdb starting' when no testdb has been configured</title>
		<body>With just a simple jdbc configuration of a datasource  ``` spring.datasource.url = jdbc:postgresql://localhost:5433/mydb spring.datasource.username=postgres spring.datasource.password=postgres ``` When starting a Spring Boot 2.0.0 M7 application, we get a confusing log statement ``` 2018-01-21 21:11:49.996  INFO 15380 --- [           main] com.zaxxer.hikari.HikariDataSource       : testdb - Starting... 2018-01-21 21:11:50.040  INFO 15380 --- [           main] com.zaxxer.hikari.pool.PoolBase          : testdb - Driver does not support get/set network timeout for connections. (Method org.postgresql.jdbc.PgConnection.getNetworkTimeout() is not yet implemented.) 2018-01-21 21:11:50.052  INFO 15380 --- [           main] com.zaxxer.hikari.HikariDataSource       : testdb - Start completed. 2018-01-21 21:11:50.056  INFO 15380 --- [           main] o.f.c.internal.database.DatabaseFactory  : Database: jdbc:postgresql://localhost:5433/mydb(PostgreSQL 9.5) ``` It appears it comes from auto-configuration https://github.com/spring-projects/spring-boot/blob/v2.0.0.M7/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java where the default value for spring.datasource.name is 'testdb'  See https://github.com/openbouquet/HikariCP/blob/master/src/main/java/com/zaxxer/hikari/HikariDataSource.java  Looks like Spring Boot is setting the spring.datasource.name as the pool name in HikariConfig somehow.  `org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration`  ```          @ConditionalOnClass(HikariDataSource.class) @ConditionalOnProperty(name = "spring.datasource.type", havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true) static class Hikari extends DataSourceConfiguration {  @Bean @ConfigurationProperties(prefix = "spring.datasource.hikari") public HikariDataSource dataSource(DataSourceProperties properties) { HikariDataSource dataSource = createDataSource(properties, HikariDataSource.class); if (properties.getName() != null) { dataSource.setPoolName(properties.getName()); } return dataSource; } } ```</body>
		<created>2018-01-22 15:05:53</created>
		<closed>2018-01-25 04:44:38</closed>
	</bug>
	<bug>
		<id>11717</id>
		<title>WebRequestTraceFilter misses sessions that are created downstream</title>
		<body>WebRequestTraceFilter gets the current session and stores its ID before it passes the request to the next filter in the chain. This means that if a downstream filter or the servlet at the end of the chain creates a new session it will be missing from the trace.</body>
		<created>2018-01-22 14:34:41</created>
		<closed>2018-01-29 15:28:55</closed>
	</bug>
	<bug>
		<id>11710</id>
		<title>Conditions report output potentially shadows classes with the same name</title>
		<body>A [sample project](https://github.com/snicoll-scratches/test-auto-configuration-clashing-names) is available to illustrate the issue.  If two auto-configuration classes are named the same way, conditions processing work just fine but the report only shows the condition evaluation of one of them as conditions are mapped by `Class#getSimpleName`.  ``` SampleAutoConfiguration:       Did not match:          - @ConditionalOnProperty (sample.second) did not find property 'sample.second' (OnPropertyCondition)  ```  This affects both `/actuator/conditions` and the report in the console.</body>
		<created>2018-01-22 07:46:49</created>
		<closed>2018-04-02 20:03:12</closed>
	</bug>
	<bug>
		<id>11703</id>
		<title>Only generate cache meta-data for endpoints with operations</title>
		<body>See #10257  &gt; The caching feature would feel awkward: we provide a cache property automatically but it has no effect. That could be fixed by moving the cache configuration at management.endpoints.cache like we did for web path customization. The annotation processor would only generate an enabled flag and we should not be able to add any extra property to that namespace then. We need to figure out if we are ready to pay that price.</body>
		<created>2018-01-20 16:51:02</created>
		<closed>2018-01-27 05:12:43</closed>
	</bug>
	<bug>
		<id>11696</id>
		<title>Loader Tools: application classes should appear before libraries on the runtime classpath</title>
		<body>See https://github.com/spring-projects/spring-boot/issues/9128#issuecomment-358980565 (second paragraph) for the original discussion.  In short: the runtime classpath should have application classes from `BOOT-INF/classes` before libraries taken from `BOOT-INF/lib`. This would match the observed behaviour of Eclipse, Maven, Surefire, etc.  The current implementation of the `Repackager` respects that order but without any guarantee: it is more because of the current implementation rather than by specification. There is also no test case to assert this order is respected. </body>
		<created>2018-01-19 16:16:32</created>
		<closed>2018-02-01 11:40:08</closed>
	</bug>
	<bug>
		<id>11695</id>
		<title>Loader Tools: unpacking a library alters its position in the classpath</title>
		<body>The order of libraries on the runtime classpath should match the order they were initially added in the fat jar.  The `Repackager` adds libraries in the following order: 1. unpack libraries 2. application classes 3. other libraries 4. loader classes  Marking a library as unpacked affects its position on the classpath - which is not expected.  See https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java#L252-L267 See https://github.com/spring-projects/spring-boot/issues/9128#issuecomment-358980565 </body>
		<created>2018-01-19 16:07:02</created>
		<closed>2018-02-01 11:40:08</closed>
	</bug>
	<bug>
		<id>11686</id>
		<title>AnnotationConfigReactiveWebServerApplicationContext does not implement AnnotationConfigRegistry</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2018-01-19 06:35:31</created>
		<closed>2018-01-19 08:21:05</closed>
	</bug>
	<bug>
		<id>11677</id>
		<title>renderDefaultErrorView throws NPE</title>
		<body>Stacktrace: ``` 2018-01-19 00:56:11.256 ERROR 26888 --- [ctor-http-nio-4] o.s.w.s.adapter.HttpWebHandlerAdapter    : Failed to handle request  java.lang.NullPointerException: null at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.renderDefaultErrorView(AbstractErrorWebExceptionHandler.java:199) ~[spring-boot-autoconfigure-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.autoconfigure.web.reactive.error.DefaultErrorWebExceptionHandler.renderErrorView(DefaultErrorWebExceptionHandler.java:125) ~[spring-boot-autoconfigure-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.lambda$handle$0(AbstractErrorWebExceptionHandler.java:234) ~[spring-boot-autoconfigure-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner.onError(MonoIgnoreThen.java:229) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1309) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:455) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators.error(Operators.java:175) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoError.subscribe(MonoError.java:52) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators.complete(Operators.java:125) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:460) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) [reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:532) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:516) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:252) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.Mono.subscribe(Mono.java:3006) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:71) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:76) ~[reactor-core-3.1.3.RELEASE.jar:3.1.3.RELEASE] at reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT] at reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359) ~[reactor-netty-0.7.3.BUILD-SNAPSHOT.jar:0.7.3.BUILD-SNAPSHOT] at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:163) ~[netty-common-4.1.19.Final.jar:4.1.19.Final] at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java) ~[netty-common-4.1.19.Final.jar:4.1.19.Final] at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) ~[netty-common-4.1.19.Final.jar:4.1.19.Final] at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) ~[netty-transport-4.1.19.Final.jar:4.1.19.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) ~[netty-common-4.1.19.Final.jar:4.1.19.Final] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152] Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:  Assembly trace from producer [reactor.core.publisher.MonoFlatMap] : reactor.core.publisher.Mono.flatMap(Mono.java:2057) org.springframework.boot.autoconfigure.web.reactive.error.AbstractErrorWebExceptionHandler.handle(AbstractErrorWebExceptionHandler.java:234) org.springframework.web.server.handler.ExceptionHandlingWebHandler.lambda$handle$0(ExceptionHandlingWebHandler.java:68) reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:88) reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185) reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251) reactor.core.publisher.Operators$MonoSubscriber.onError(Operators.java:1112) reactor.core.publisher.MonoIgnoreThen$ThenIgnoreInner.onError(MonoIgnoreThen.java:229) reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165) reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1309) reactor.core.publisher.Operators.error(Operators.java:175) reactor.core.publisher.MonoError.subscribe(MonoError.java:52) reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) reactor.core.publisher.Mono.subscribe(Mono.java:3006) reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174) reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78) reactor.core.publisher.Operators.complete(Operators.java:125) reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45) reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) reactor.core.publisher.Mono.subscribe(Mono.java:3006) reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75) reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96) reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:349) reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) reactor.core.publisher.Mono.subscribe(Mono.java:3006) reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:271) reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:803) reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1626) reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149) reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1440) reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1314) reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86) reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) reactor.core.publisher.Mono.subscribe(Mono.java:3006) reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:418) reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210) reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:128) reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:61) reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) reactor.core.publisher.Mono.subscribe(Mono.java:3006) reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:167) reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70) reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61) reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:390) reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:359) io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:163) io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463) io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886) Error has been observed by the following operator(s): |_Mono.flatMap(AbstractErrorWebExceptionHandler.java:234) |_Mono.flatMap(AbstractErrorWebExceptionHandler.java:235) |_Mono.onErrorResume(ExceptionHandlingWebHandler.java:68) |_Mono.error(ResponseStatusExceptionHandler.java:49) |_Mono.onErrorResume(ExceptionHandlingWebHandler.java:68) ```  Spring-Boot version: using latest 2.0 snapshot Dependencies:  ``` dependencies {     compile('org.springframework.boot:spring-boot-starter-webflux')     compile('com.fasterxml.jackson.module:jackson-module-kotlin')     compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")     compile("org.jetbrains.kotlin:kotlin-reflect")     runtime('org.springframework.boot:spring-boot-devtools')     testCompile('org.springframework.boot:spring-boot-starter-test')     testCompile('io.projectreactor:reactor-test') } ```  Step to reproduce: Just access an non-exist page, It should return a 404 error but I got 500 instead.</body>
		<created>2018-01-18 17:05:57</created>
		<closed>2018-01-19 09:17:06</closed>
	</bug>
	<bug>
		<id>11659</id>
		<title>Property Injection/resolution for @ConfigurationProperties does not honor any registered ProtocolResolver's</title>
		<body>Not sure if this should be a question or a bug report (I could be doing it wrong).  Spring Boot 1.5.9, Spring Framework 4.3.11, JDK 8  I have a custom `ProtocolResolver` registered with:  ```java     public class ConsulProtocolResolverInitializer implements PriorityOrdered, BeanFactoryPostProcessor,             ResourceLoaderAware {          private final ConsulClient consulClient;         private final ConsulConfigProperties configProperties;         private final Environment env;          public ConsulProtocolResolverInitializer(final ConsulClient consulClient,                                                  final ConsulConfigProperties configProperties,                                                  final Environment env) {             this.consulClient = consulClient;             this.configProperties = configProperties;             this.env = env;         }          @Override         public int getOrder() {             return Ordered.HIGHEST_PRECEDENCE;         }          @Override         public void postProcessBeanFactory(final ConfigurableListableBeanFactory beanFactory) throws BeansException {             // we need to implement BeanFactoryPostProcessor + PriorityOrdered to get instantiated early enough to             // add our custom protocol resolver         }          @Override         public void setResourceLoader(final ResourceLoader resourceLoader) {             if (resourceLoader instanceof DefaultResourceLoader) {                 ((DefaultResourceLoader)resourceLoader)                         .addProtocolResolver(new ConsulProtocolResolver(consulClient, configProperties, env));             }         }     } ```  And this works for `@Component` injection + `@Value` annotation: ```java     @Autowired     private TestBean testBean;      @Component     static class TestBean {         @Value("${testBean.resource:#{null}}")         private Resource resource;     } ```  However it does not work for: ```java     @Autowired     private TestBean testBean;      @ConfigurationProperties("testBean")     static class TestBean {         private Resource resource;    } ```  It seems that my custom `ProtocolResolver` is never invoked for `@ConfigurationProperties` but is for `@Value`..  ``` java.lang.IllegalStateException: Failed to load ApplicationContext  at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextPrepareTestInstance(AbstractTestNGSpringContextTests.java:149) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108) at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:523) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:224) at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:146) at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:166) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:105) at org.testng.TestRunner.privateRun(TestRunner.java:744) at org.testng.TestRunner.run(TestRunner.java:602) at org.testng.SuiteRunner.runTest(SuiteRunner.java:380) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340) at org.testng.SuiteRunner.run(SuiteRunner.java:289) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301) at org.testng.TestNG.runSuitesLocally(TestNG.java:1226) at org.testng.TestNG.runSuites(TestNG.java:1144) at org.testng.TestNG.run(TestNG.java:1115) at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72) at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean-com.yapstone.rest.framework.springcloud.io.consul.ConsulResourceIT$TestBean': Could not bind properties to ConsulResourceIT.TestBean (prefix=testBean, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 2 errors Field error in object 'testBean' on field 'inputStream': rejected value [consul://test.txt]; codes [typeMismatch.testBean.inputStream,typeMismatch.inputStream,typeMismatch.java.io.InputStream,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [testBean.inputStream,inputStream]; arguments []; default message [inputStream]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.io.InputStream' for property 'inputStream'; nested exception is java.lang.IllegalArgumentException: Failed to retrieve InputStream for class path resource [consul://test.txt]] Field error in object 'testBean' on field 'path': rejected value [consul://test.txt]; codes [typeMismatch.testBean.path,typeMismatch.path,typeMismatch.java.nio.file.Path,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [testBean.path,path]; arguments []; default message [path]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.nio.file.Path' for property 'path'; nested exception is java.lang.IllegalArgumentException: Failed to retrieve file for class path resource [consul://test.txt]] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:335) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:292) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ... 29 more Caused by: org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 2 errors Field error in object 'testBean' on field 'inputStream': rejected value [consul://test.txt]; codes [typeMismatch.testBean.inputStream,typeMismatch.inputStream,typeMismatch.java.io.InputStream,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [testBean.inputStream,inputStream]; arguments []; default message [inputStream]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.io.InputStream' for property 'inputStream'; nested exception is java.lang.IllegalArgumentException: Failed to retrieve InputStream for class path resource [consul://test.txt]] Field error in object 'testBean' on field 'path': rejected value [consul://test.txt]; codes [typeMismatch.testBean.path,typeMismatch.path,typeMismatch.java.nio.file.Path,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [testBean.path,path]; arguments []; default message [path]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.nio.file.Path' for property 'path'; nested exception is java.lang.IllegalArgumentException: Failed to retrieve file for class path resource [consul://test.txt]] at org.springframework.boot.bind.PropertiesConfigurationFactory.checkForBindingErrors(PropertiesConfigurationFactory.java:359) at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:276) at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:330) ... 47 more  ```  </body>
		<created>2018-01-17 18:53:51</created>
		<closed>2018-02-20 13:47:34</closed>
	</bug>
	<bug>
		<id>11658</id>
		<title>AnnotationConfigServletWebServerApplicationContext does not implement AnnotationConfigRegistry</title>
		<body></body>
		<created>2018-01-17 17:23:01</created>
		<closed>2018-01-17 18:48:34</closed>
	</bug>
	<bug>
		<id>11614</id>
		<title>WebFlux error handling does not handle ResponseStatusException properly</title>
		<body>When a `ResponseStatusException` is thrown, the `message` attribute of the json output should be the reason provided by the user. Rather, the `toString` of the exception is used.  This is inconsistent with how the contract for MVC works.</body>
		<created>2018-01-12 15:25:54</created>
		<closed>2018-01-15 09:03:49</closed>
	</bug>
	<bug>
		<id>11608</id>
		<title>NoClassDefFoundError when running with Liquibase 2.x</title>
		<body>i'm trying to get a spring 4.x application onto spring-boot. a problem i've run into, is that you can't have Liquibase 2.x libraries on the classpath or spring-boot intialization fails.  `java.lang.NoClassDefFoundError: liquibase/servicelocator/CustomResolverServiceLocator  at org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener.onApplicationEvent(LiquibaseServiceLocatorApplicationListener.java:44) at org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener.onApplicationEvent(LiquibaseServiceLocatorApplicationListener.java:35) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.starting(EventPublishingRunListener.java:68) at org.springframework.boot.SpringApplicationRunListeners.starting(SpringApplicationRunListeners.java:48) at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)`  the application listener does this :  `if (ClassUtils.isPresent("liquibase.servicelocator.ServiceLocator", null)) { new LiquibasePresent().replaceServiceLocator(); } ` the problem is, the class it is looking for exists in 2.x Liquibase, but the classes the "replacer" looks for don't.  and there is no switch to stop this from happening, since it is an application listener.  this is a problem for me, as i'd like to upgrade to 3.x, but i'm having trouble, and wanted to be able to do some testing with 2.x vs 3.x ... but this listener prevents me from having any control at all over whether i can have Liquibase 2.x on the classpath.</body>
		<created>2018-01-11 19:30:30</created>
		<closed>2018-01-16 10:16:53</closed>
	</bug>
	<bug>
		<id>11607</id>
		<title>Ordering of `WebMvcMetricsFilter` breaks character encoding</title>
		<body>Actuator's `WebMvcMetricsFilter` has a hard-coded order of `Ordered.HIGHEST_PRECEDENCE`, which in practice puts it ahead of `CharacterEncodingFilter`. Since `WebMvcMetricsFilter` performs the mapping introspection, under some circumstances it will touch the POST data hence breaking the `CharacterEncodingFilter`.  I've managed to put together a [sample app](https://github.com/vpavic/boot-char-encoding) that exhibits this behavior with a specific set of request mapping paths. After starting the app, issue the following HTTP POST request (samples use HTTPie):  ```shell $ http -f POST :8080/pv/post name='Vedran Pavić' Content-Type:'application/x-www-form-urlencoded' HTTP/1.1 200  Content-Length: 21 Content-Type: text/plain;charset=UTF-8 Date: Thu, 11 Jan 2018 17:58:44 GMT  Hello Vedran PaviÄ ```  When `spring-boot-starter-actuator` is removed from the dependencies, which gets `WebMvcMetricsFilter` out of the picture, request is processed as expected:  ```shell $ http -f POST :8080/pv/post name='Vedran Pavić' Content-Type:'application/x-www-form-urlencoded' HTTP/1.1 200  Content-Length: 19 Content-Type: text/plain;charset=UTF-8 Date: Thu, 11 Jan 2018 17:59:32 GMT  Hello Vedran Pavić ```</body>
		<created>2018-01-11 18:37:22</created>
		<closed>2018-01-22 20:11:59</closed>
	</bug>
	<bug>
		<id>11514</id>
		<title>Actuator "http.server.requests" metric has wrong "status" tag for error responses</title>
		<body>Actuator reports a metric with status = 200, but controller actually responds with bad request.  MetricsWebFilter.error(ServerWebExchange exchange, long start, Throwable cause) is called with cause:  org.springframework.web.server.ServerWebInputException: Response status 400 with reason "Type mismatch."; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.util.List'; nested exception is java.lang.NumberFormatException: For input string: "invalidSkuId"  However DefaultWebFluxTagsProvider resolves status tag with 200 because of it gets status from exchange (which is null in this case) and doesn't take exception cause into consideration.  public static Tag status(ServerWebExchange exchange) { HttpStatus status = exchange.getResponse().getStatusCode(); if (status == null) { status = HttpStatus.OK; } return Tag.of("status", status.toString()); }  **Actual metric name** httpServerRequests.exception.ServerWebInputException.method.POST.status.**200**.uri./GoodsService/getActiveGoods.do  **Expected metric name** httpServerRequests.exception.ServerWebInputException.method.POST.status.**400**.uri./GoodsService/getActiveGoods.do</body>
		<created>2018-01-05 10:09:55</created>
		<closed>2018-04-12 09:45:04</closed>
	</bug>
	<bug>
		<id>11512</id>
		<title>Incorrect type generated in the metadata with annotated getter</title>
		<body>It will generate the text as following:  ```     {       "name": "foo",       "sourceType": "x.y.Bar",       "type": "(@javax.validation.Valid :: java.util.List&lt;x.y.Biz&gt;)"     } ```   </body>
		<created>2018-01-05 06:55:24</created>
		<closed>2018-01-18 21:35:59</closed>
	</bug>
	<bug>
		<id>11511</id>
		<title>Misleading error message from DuplicateServerPropertiesDetector when JDK-based proxying prevents ServerProperties beans from being found</title>
		<body>1 custom annotion   ``` @Target({ElementType.TYPE,ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface MyAnno {     String value() default ""; } ```  2 custom aop  ``` @Aspect @Component public class MyAop {          @Around("@target (com.hello.aop.MyAnno)")     public Object around(ProceedingJoinPoint pjp) throws Throwable {         Object result = null;         try {             System.out.println("around start...." + pjp.getArgs());              result = pjp.proceed();             System.out.println("around end....");         }finally {          }         return result;     } } ```  3 start  ok  ``` @ComponentScan(basePackages = "com.hello") @EnableAspectJAutoProxy  public class Application {      public static void main(String[] args) {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Application.class);         HelloService d = context.getBean(HelloService.class);         d.sayHello("zhangsan");     } } ```  4 start tomcat  failed  ``` @SpringBootApplication @ComponentScan(basePackages = "com.hello")  @EnableAspectJAutoProxy  public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class,args);     } } ```  ``` org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Multiple ServerProperties beans registered  at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:536) ~[spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at com.hello.Application.main(Application.java:27) [classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_51] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_51] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_51] at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_51] at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) [idea_rt.jar:na] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Multiple ServerProperties beans registered  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:199) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:162) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] ... 13 common frames omitted Caused by: java.lang.IllegalStateException: Multiple ServerProperties beans registered  at org.springframework.util.Assert.state(Assert.java:70) ~[spring-core-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration$DuplicateServerPropertiesDetector.customize(ServerPropertiesAutoConfiguration.java:84) ~[spring-boot-autoconfigure-1.5.3.RELEASE.jar:1.5.3.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_51] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_51] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_51] at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_51] at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:173) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE] at com.sun.proxy.$Proxy70.customize(Unknown Source) ~[na:na] at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:73) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:59) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE] ... 21 common frames omitted ```</body>
		<created>2018-01-05 06:22:33</created>
		<closed>2018-01-16 08:58:26</closed>
	</bug>
	<bug>
		<id>11508</id>
		<title>spring-boot-test 2.0.0M7 has strong dependency on optional Mockito</title>
		<body>With Spring Boot 2.0.0M7 in `MockReset`, ```java static MockReset get(Object mock) { MockReset reset = MockReset.NONE; MockingDetails mockingDetails = Mockito.mockingDetails(mock); if (mockingDetails.isMock()) { MockCreationSettings&lt;?&gt; settings = mockingDetails.getMockCreationSettings(); List&lt;InvocationListener&gt; listeners = settings.getInvocationListeners(); for (Object listener : listeners) { if (listener instanceof ResetInvocationListener) { reset = ((ResetInvocationListener) listener).getReset(); } } } return reset; } ```  this code fails with: ``` 16:52:57.741 [main] WARN  o.s.test.context.TestContextManager - Caught exception while invoking 'beforeTestMethod' callback on TestExecutionListener [org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@6973b51b] for test method [public void com.opentable.DemoServerTest.testHelloWorld() throws java.lang.Exception] and test instance [com.opentable.DemoServerTest@64469d8] java.lang.NoClassDefFoundError: org/mockito/Mockito at org.springframework.boot.test.mock.mockito.MockReset.get(MockReset.java:105) at org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener.resetMocks(ResetMocksTestExecutionListener.java:69) ```  This seems to be a re-hash of https://github.com/spring-projects/spring-boot/pull/7089  Looking at that issue, the merged fix is not present on master -- seems to only be on the `1.4` release branch?</body>
		<created>2018-01-05 00:57:26</created>
		<closed>2018-01-05 11:14:34</closed>
	</bug>
	<bug>
		<id>11488</id>
		<title>server.ssl.client-auth property is not honoured when using Netty</title>
		<body>Looks like for NettyReactiveWebServerFactory, SslServerCustomizer is not setting clientAuth in SslContextBuilder and configured server.ssl.client-auth property is not honored.  </body>
		<created>2018-01-03 17:53:11</created>
		<closed>2018-01-11 10:16:48</closed>
	</bug>
	<bug>
		<id>11485</id>
		<title>ApplicationFailedEvent should not be published after ApplicationReadyEvent has been published</title>
		<body>This is related to #11484. Irrespective of the introduction of any new events, `SpringApplication` should be reworked such that an `ApplicationFailedEvent` is not published if an `ApplicationReadyEvent` has already been published.</body>
		<created>2018-01-03 14:54:51</created>
		<closed>2018-01-11 11:32:17</closed>
	</bug>
	<bug>
		<id>11474</id>
		<title>NoClassDefFoundError  when  ManagementWebSecurityAutoConfiguration is enabled without RequestMatcher in classpath </title>
		<body>Spring boot version : 1.5.8  ManagementWebSecurityAutoConfiguration in spring boot actuator can be enabled by @ConditionalOnClass({ EnableWebSecurity.class }). But this configuration bean has reference to RequestMatcher class.  In my project we have to only include spring security config and core.  Then ManagementWebSecurityAutoConfiguration is activated but RequestMatcher from spring security web is missing which results in NoClassDefFoundError      </body>
		<created>2018-01-03 01:51:51</created>
		<closed>2018-01-03 09:57:32</closed>
	</bug>
	<bug>
		<id>11468</id>
		<title>Build failure when bootJar or bootWar is configured not to preserve timestamps</title>
		<body>``` Caused by: java.lang.NoSuchFieldError: CONSTANT_TIME_FOR_ZIP_ENTRIES         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.writeDirectory(BootZipCopyAction.java:162)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.writeLoaderClasses(BootZipCopyAction.java:139)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.writeLoaderClassesIfNecessary(BootZipCopyAction.java:129)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.execute(BootZipCopyAction.java:97)         at org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport$ReproducibleOrderingCopyAction.execute(BootArchiveSupport.java:141)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.execute(NormalizingCopyActionDecorator.java:53)         at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.execute(DuplicateHandlingCopyActionDecorator.java:42)         at org.gradle.api.internal.file.copy.CopyActionExecuter.execute(CopyActionExecuter.java:40)         at org.gradle.api.tasks.AbstractCopyTask.copy(AbstractCopyTask.java:174)         at org.springframework.boot.gradle.tasks.bundling.BootJar.copy(BootJar.java:67)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:46)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:780)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:747)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:121)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:110)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:92)         ... 103 more ```  The root cause is the removal of the `CONSTANT_TIME_FOR_ZIP_ENTRIES` constant from `org.gradle.util.GUtil`. We need to use our own constant instead. We should also add an integration test for building reproducible archives so that the affected code path is covered across multiple versions of Gradle.</body>
		<created>2018-01-02 11:35:41</created>
		<closed>2018-01-02 12:59:04</closed>
	</bug>
	<bug>
		<id>11395</id>
		<title>KeyStore and TrustStore are mandatory in SslStoreProvider</title>
		<body>The `getKeyStore` and the `getTrustStore` methods of the [SslStoreProvider](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/embedded/SslStoreProvider.html) interface must always return the desired Key- and TrustStore object (at least in case of using Tomcat, I haven't tested Jetty and Undertow but it seems their case is the same). In other words, there is no way to specify just one of them, e.g.: I want to specify which KeyStore to use but I want to use the default TrustStore shipped with the JDK. Or I want to mess with the TrustStore but I still want to use the KeyStore I configured in the application properties.  I'm using Spring-Boot 1.5.9-RELEASE, OpenJDK 1.8.0_152 and Gradle 4.4  In case of Tomcat, I think this could be fixed in the [TomcatEmbeddedServletContainerFactory](https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java#L403) by just setting the right objects in the right scenarios (see an example below).  The solution in case of Jetty and Undertow seems similar or even simpler to me. I created an [example](https://github.com/jonatan-ivanov/ssl-store-provider-demo) which reproduces the issue, please check the [commit](https://github.com/jonatan-ivanov/ssl-store-provider-demo/commit/c08d9631782eb8af6c5d40dea06e4303d107c2e8) which tries to set the TrustStore to make this work.  ``` if (getSslStoreProvider() != null) {     TomcatURLStreamHandlerFactory instance = TomcatURLStreamHandlerFactory             .getInstance();     instance.addUserFactory(             new SslStoreProviderUrlStreamHandlerFactory(getSslStoreProvider()));      if (getSslStoreProvider().getKeyStore() != null) {         protocol.setKeystoreFile(                 SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL);     }     else {         configureSslKeyStore(protocol, ssl);     }      if (getSslStoreProvider().getTrustStore() != null) {         protocol.setTruststoreFile(                 SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL);     }     else {         configureSslTrustStore(protocol, ssl);     } } else {     configureSslKeyStore(protocol, ssl);     configureSslTrustStore(protocol, ssl); } ```  If this approach could work, I'm happy to create a PR.</body>
		<created>2017-12-21 21:07:56</created>
		<closed>2018-04-19 21:23:02</closed>
	</bug>
	<bug>
		<id>11391</id>
		<title>SslStoreProviderUrlStreamHandlerFactory changes the KeyStore password</title>
		<body># The issue I would like to use HTTPS with spring boot (1.5.9) and I would like to get the KeyStore from memory (eventually from HashiCorp Vault) and not from disk. In order to do this, I implemented a [SslStoreProvider](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/embedded/SslStoreProvider.html) and set it up through an [EmbeddedServletContainerCustomizer](https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizer.html); please check [this example](https://github.com/jonatan-ivanov/ssl-store-provider-demo/commit/b0e2713262d709842460cde73744e6a04fe9c889#diff-ea21a82c84345aba45cc5b6dc567c67c).  The example above fails because of [SslStoreProviderUrlStreamHandlerFactory](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/SslStoreProviderUrlStreamHandlerFactory.java#L103) re-encrypts the KeyStore with an empty password so I get an error: `java.io.IOException: keystore password was incorrect`:  ``` ByteArrayOutputStream stream = new ByteArrayOutputStream(); this.keyStore.store(stream, new char[0]); //the second parameter is the password return new ByteArrayInputStream(stream.toByteArray()); ```  I tried to trick this with an empty password but when Tomcat tries to load the `InputStream` of the KeyStore, in [SSLUtilBase](https://apache.googlesource.com/tomcat/+/refs/heads/trunk/java/org/apache/tomcat/util/net/SSLUtilBase.java#132), it checks if the password is empty and it will use `null` in this case:  ``` char[] storePass = null; if (pass != null &amp;&amp; !"".equals(pass)) {     storePass = pass.toCharArray(); } ks.load(istream, storePass); ``` Based on these code snippets, I can't really see how could this work, the password can never be empty when Tomcat tries to load the KeyStore.   # Additional details Tomcat tries to get the KeyStore this way: `url.openConnection().getInputStream()` in [ConfigFileLoader](https://apache.googlesource.com/tomcat/+/refs/heads/trunk/java/org/apache/tomcat/util/file/ConfigFileLoader.java#96). In order to make this work, [TomcatEmbeddedServletContainerFactory](https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java#L407) will set the url to `springbootssl:keyStore` and register [SslStoreProviderUrlStreamHandlerFactory](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/SslStoreProviderUrlStreamHandlerFactory.java) for this url.  I'm using Spring-Boot 1.5.9-RELEASE, OpenJDK 1.8.0_152 and Gradle 4.4  I created an [example](https://github.com/jonatan-ivanov/ssl-store-provider-demo) which reproduces the issue. I fixed it with a hack (registering a custom url handler before the original one) just to see if this works, please see the commits.  # Possible fix I think this could be fixed in `SslStoreProviderUrlStreamHandlerFactory` [the way I did in the example](https://github.com/jonatan-ivanov/ssl-store-provider-demo/blob/master/src/main/java/com/example/sslstoreproviderdemo/FixedSslStoreProviderUrlStreamHandlerFactory.java) because when `TomcatEmbeddedServletContainerFactory ` sets this up, it has the [Ssl](https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/java/org/springframework/boot/context/embedded/Ssl.java) object which contains the password. If this approach could work, I'm happy to create a PR.</body>
		<created>2017-12-21 16:22:44</created>
		<closed>2018-04-23 19:33:13</closed>
	</bug>
	<bug>
		<id>11380</id>
		<title>Spring Boot profiles and property resolution does not work as expected</title>
		<body>Environment: - Spring Boot: 1.5.9.RELEASE - Java: 1.8.0_151 - Maven: 3.5.0 - Linux Ubuntu 4.10.0-42-generic  From what I can understand, there seems to be a bug in how properties are resolved when `spring.profiles.include` is present in a property file. If `spring.profiles.include` is present in a property file, property overrides done in profile-specific (`application-&lt;profile&gt;.properties`) files are ignored.  To re-produce the issue, please follow the steps below: 1. Download the attached archive file: [spring-profiles.zip](https://github.com/spring-projects/spring-boot/files/1573447/spring-profiles.zip) 2. UnZip the archive file 3. Build the test code: `mvn clean install`  Then, run the test using the command `mvn -Dspring.profiles.active=common,profile1 spring-boot:run`  The test will output something similar to the below: ``` 17-12-19 Tue 22:19:24.339 INFO  RunSpring                      : The following profiles are active: common,profile1 17-12-19 Tue 22:19:24.820 INFO  PropertyOverrideByProfile      : Property1='default1' (expecting 'default1') 17-12-19 Tue 22:19:24.820 INFO  PropertyOverrideByProfile      : Property2='application2' (expecting 'application2') 17-12-19 Tue 22:19:24.821 INFO  PropertyOverrideByProfile      : Property3='common3' (expecting 'common3') 17-12-19 Tue 22:19:24.821 INFO  PropertyOverrideByProfile      : Property4='profile4' (expecting 'profile4') 17-12-19 Tue 22:19:24.821 INFO  PropertyOverrideByProfile      : Property5='local5' (expecting 'local5') 17-12-19 Tue 22:19:24.824 INFO  PropertyOverride               : Property1='default1' (expecting 'default1') 17-12-19 Tue 22:19:24.824 INFO  PropertyOverride               : Property2='application2' (expecting 'application2') 17-12-19 Tue 22:19:24.824 INFO  PropertyOverride               : Property3='common3' (expecting 'common3') 17-12-19 Tue 22:19:24.824 INFO  PropertyOverride               : Property4='profile4' (expecting 'profile4') 17-12-19 Tue 22:19:24.824 INFO  PropertyOverride               : Property5='local5' (expecting 'local5') 17-12-19 Tue 22:19:24.998 INFO  RunSpring                      : Started RunSpring in 0.984 seconds (JVM running for 3.113) ```  Now, un-comment the first line in the `application-profile1.properties` file (the one under `src/main/resources`) and build the code again. Finally, re-run the test using the command `mvn -Dspring.profiles.active=profile1 spring-boot:run`  The test will output something similar to the below: ``` 17-12-19 Tue 22:20:17.562 INFO  RunSpring                      : The following profiles are active: common,profile1 17-12-19 Tue 22:20:18.042 INFO  PropertyOverrideByProfile      : Property1='default1' (expecting 'default1') 17-12-19 Tue 22:20:18.042 INFO  PropertyOverrideByProfile      : Property2='application2' (expecting 'application2') 17-12-19 Tue 22:20:18.042 INFO  PropertyOverrideByProfile      : Property3='common3' (expecting 'common3') 17-12-19 Tue 22:20:18.042 INFO  PropertyOverrideByProfile      : Property4='common4' (expecting 'profile4') 17-12-19 Tue 22:20:18.042 INFO  PropertyOverrideByProfile      : Property5='common5' (expecting 'local5') 17-12-19 Tue 22:20:18.044 INFO  PropertyOverride               : Property1='default1' (expecting 'default1') 17-12-19 Tue 22:20:18.044 INFO  PropertyOverride               : Property2='application2' (expecting 'application2') 17-12-19 Tue 22:20:18.044 INFO  PropertyOverride               : Property3='common3' (expecting 'common3') 17-12-19 Tue 22:20:18.044 INFO  PropertyOverride               : Property4='common4' (expecting 'profile4') 17-12-19 Tue 22:20:18.044 INFO  PropertyOverride               : Property5='common5' (expecting 'local5') 17-12-19 Tue 22:20:18.177 INFO  RunSpring                      : Started RunSpring in 0.933 seconds (JVM running for 2.938) ``` As indicated above, both have the same profile ordering. Hence, I would assume they should both produce the same output. However, the values for Property4 and Property5 are only as expected in the first test run.  NB! In the first test run, I explicitly specify 'common' and 'profile1' as active profiles on the command line. While in the second test run, only 'profile1' is set as active on the command line. However, now the 'common' profile is added (included) by un-commenting the line `spring.profiles.include=common` at the top of the `application-profile1.properties` file.</body>
		<created>2017-12-19 22:35:26</created>
		<closed>2018-04-18 17:30:09</closed>
	</bug>
	<bug>
		<id>11371</id>
		<title>Cannot parse redis password with a colon</title>
		<body>Hello, I use spring boot version is 1.5.7.RELEASE. And if there is a colon in redis password, RedisAutoConfiguration get a error redis password. I'm not sure if this is a bug. redis properties in  application.yml like this: ```     spring:         redis:             url: redis://:crs-7629154:aucyr7632@localhost:6379             database: 0             timeout: 1000 ``` redis password is crs-7629154:aucyr7632.</body>
		<created>2017-12-18 06:50:15</created>
		<closed>2018-01-30 09:43:08</closed>
	</bug>
	<bug>
		<id>11367</id>
		<title>LaunchedURLClassLoader can return unrelated JAR content</title>
		<body>Hello.   We use Spring Boot 1.5.8 as part of midPoint, open source identity management software. Recently we found out that during startup, midPoint is unable to correctly resolve URIs like the following one (note: schema-3.7.jar is one of our components):  `jar:file:/C:/tmp/mp/lib/midpoint.war!/WEB-INF/lib/schema-3.7.jar!/prism/xml/ns/public/types-3.xsd`  Instead of expected XML content of types-3.xsd, the calling method gets - without any error indication - entirely unrelated binary data! It turned out that the data is the content of this file:  `C:\tmp\mp\lib\midpoint.war!/WEB-INF/lib/hibernate-commons-annotations-4.0.5.Final.jar`  The schema-3.7.jar and hibernate-commons-annotations-4.0.5.Final.jar files have nothing in common, besides the fact they are both on classpath (hibernate jar first, schema second - this is important).  We were able to create a test case for this condition (inspired by similar tests in LaunchedURLClassLoaderTests):  ```java @Test public void resolveFromNestedNestedJarAbsolutePath() throws Exception {     File file = this.temporaryFolder.newFile();     TestJarCreator.createTestJar(file, false, true);   // creates a structure described below     JarFile jarFile = new JarFile(file);     JarFile nestedJarFile = jarFile.getNestedJarFile(jarFile.getEntry("nesting-nested.jar"));     JarFile nJarFile = jarFile.getNestedJarFile(jarFile.getEntry("n123456789012345678901234567890.jar"));     LaunchedURLClassLoader loader = new LaunchedURLClassLoader(new URL[] { nJarFile.getUrl(), nestedJarFile.getUrl() }, null);     String absolutePath = nestedJarFile.getUrl() + "nested.jar!/3.dat";     URL resource = loader.getResource(absolutePath);     System.out.println("Looked for: " + absolutePath);     System.out.println("Found resource: " + resource);     assertThat(resource.toString()).isEqualTo(absolutePath);     assertThat(resource.openConnection().getInputStream().read()).isEqualTo(3); } ```  The test JAR file is a simulation of our midpoint.war and contains the following entries (among others):  - nesting-nested.jar (this is analogous to schema-3.7.jar in midPoint)   - nested.jar (this is not present in midPoint)     - 3.dat (contains a value of 3) (analogous to types-3.xsd) - n123456789012345678901234567890.jar (analogous to hibernate-commons-annotations-4.0.5.Final.jar)   - (contains no entries besides manifest)  If the classpath is:  1. jar:file:/C:/Users/.../junit4507521104116618629.tmp!/n123456789012345678901234567890.jar!/ 1. jar:file:/C:/Users/.../junit4507521104116618629.tmp!/nesting-nested.jar!/  then the method call:  `loader.getResource("jar:file:/C:/Users/.../junit4507521104116618629.tmp!/nesting-nested.jar!/nested.jar!/3.dat")`  returns the content of **n123456789012345678901234567890.jar instead of 3.dat**, without any warning.  Just for the completeness, the sysout is  ``` Looked for: jar:file:/C:/Users/.../junit4507521104116618629.tmp!/nesting-nested.jar!/nested.jar!/3.dat Found resource: jar:file:/C:/Users/.../junit4507521104116618629.tmp!/nesting-nested.jar!/nested.jar!/3.dat ```  but then the exception is  ``` org.junit.ComparisonFailure:  Expected: 3 Actual: 80 ```  (note that 80 is 'P' character, the first one of the n1234...jar file)  The problem is in **JarURLConnection.get(URL, JarFile)** method in connection with **extractFullSpec(String, String)** method in the same class. The implementation ignores the fact that the URL to be resolved might point to a JAR file different from the JarFile provided by the caller. In such cases, usually nothing wrong happens; but there is a chance of file name length collision leading to extractFullSpec returning an empty string which is later interpreted in the get method as "we have found a match". I can provide more details if needed.  Please find a couple of test cases (both in LaunchedURLClassLoaderTests and JarURLConnectionTests) and a proposed fix in a forthcoming commit.  ---  While reading the code of JarURLConnection.get/extractFullSpec we have found two more bugs, for which we have written separate test cases. The first one is related to resolution of more than one segment in the path returned by extractFullSpec (there should be "=" instead of "+=" on [this line](https://github.com/spring-projects/spring-boot/blob/v1.5.8.RELEASE/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java#L267)). The second one is related to spaces and other non-URI-compliant characters in jar entry names. Again, please see the test cases created and fixes proposed.  ---  Could you please have a look at the problems and the proposed fixes? If they are correct, we can submit a PR. If they are not, please could you provide us a hint what should we do to resolve them in a proper way?  Thanks.</body>
		<created>2017-12-16 23:44:11</created>
		<closed>2018-05-31 03:31:36</closed>
	</bug>
	<bug>
		<id>11360</id>
		<title>Log4j2 shutdown before it prints the last messages during graceful shutdown of spring boot application.</title>
		<body>Hi, I'm using spring boot with version 1.5.7.RELEASE. Also I'm using Log4j2 logger with excluding `SimpleLogger` from hateoas, data-jpa and adding dependencies for it.  ```xml  &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-hateoas&lt;/artifactId&gt;       &lt;exclusions&gt;         &lt;exclusion&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;         &lt;/exclusion&gt;       &lt;/exclusions&gt;      &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;       &lt;exclusions&gt;         &lt;exclusion&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;         &lt;/exclusion&gt;       &lt;/exclusions&gt;     &lt;/dependency&gt; ```  The main problem that U have code this is running in thread and has logger.  ``` private void run() {       while (!notStopped) {         } catch (InterruptedException e) {           logger.info("===============================================SHUTDOWN===============================================");   }      }         } ```  ```java @PreDestroy   public void stop() throws InterruptedException {       notStopped = true;       SOME CODE   } ```    So, the problem is that when I'm stopping the server with Crtl+C I'm expecting that logger will output   ``` ===============================================SHUTDOWN===============================================  ```  but instead of that I'm receiving   ``` Thread-3 WARN Unable to register Log4j shutdown hook because JVM is shutting down. Using SimpleLogger ```  When I'm deleting all dependencies for Log4j2 and deleting exclusions  for logging from starters, it prints me the expected result SHUTDOWN. As I understood there is a problem with shutdown hook of Log4j2. I found a related issues with Log4j2, and all of them described that it was problem in Log4j2 which would be fixed in 2.6 version. But now it is 2.7 version of Log4j2. How to fix this? </body>
		<created>2017-12-15 12:27:53</created>
		<closed>2018-06-21 10:42:01</closed>
	</bug>
	<bug>
		<id>11342</id>
		<title>Deprecate RegistrationBean methods that don't apply to ServletListenerRegistrationBean</title>
		<body>spring boot version: 1.5.9.RELEASE  YetAnotherConfiguration ```java     @Bean     public ServletListenerRegistrationBean yetAnotherServletContextListener() {         YetAnotherServletContextListener servletContextListener = new YetAnotherServletContextListener();          ServletListenerRegistrationBean&lt;ServletContextListener&gt; servletListenerRegistrationBean =             new ServletListenerRegistrationBean&lt;ServletContextListener&gt;();          servletListenerRegistrationBean.setListener(servletContextListener);         servletListenerRegistrationBean.addInitParameter("test", "test");         servletListenerRegistrationBean.setOrder(0);          return servletListenerRegistrationBean;     } ```  YetAnotherServletContextListener ````java     @Override     public void contextInitialized(ServletContextEvent servletContextEvent) {         // value is null?         String value = servletContext.getInitParameter("test");     } ````</body>
		<created>2017-12-13 13:33:50</created>
		<closed>2017-12-13 21:11:15</closed>
	</bug>
	<bug>
		<id>11338</id>
		<title>2.0.0.M7 “spring-boot-starter-actuator”  caused OOM</title>
		<body>maybe this jar will caused the OOM problem  &lt;dependency&gt;     &lt;groupId&gt;org.latencyutils&lt;/groupId&gt;     &lt;artifactId&gt;LatencyUtils&lt;/artifactId&gt;     &lt;version&gt;2.0.3&lt;/version&gt; &lt;/dependency&gt;</body>
		<created>2017-12-13 09:46:57</created>
		<closed>2018-01-30 08:37:40</closed>
	</bug>
	<bug>
		<id>11308</id>
		<title>Actuator CORS Support Does Not Work with Webflux</title>
		<body>CORS for Actuator endpoints does not appear to work when running Spring Boot `2.0.0.M7` and `spring-boot-starter-webflux` on Netty.   My CORS configuration is this: ``` management:   endpoints:     web:       base-path: /       cors:         allowed-methods: GET         allowed-origins: http://localhost:4200 ```  Hitting the `/info` endpoint with a command line client, regardless of the `Origin` header, always yields `200`. However, hitting the same endpoint from my Angular app running on `localhost:4200` always fails with a missing CORS header (I suppose Angular uses CORS by default).  If I add `spring-boot-starter-web` to my POM, the CORS configuration for Actuator works as expected in all aspects. However, doing this switches the web server from Netty to Tomcat.  Perhaps this is expected? My expectation would be I do not need to add `spring-boot-starter-web` to enable CORS support for Actuator and I can continue to run on Netty. </body>
		<created>2017-12-10 20:51:26</created>
		<closed>2017-12-11 21:59:51</closed>
	</bug>
	<bug>
		<id>11285</id>
		<title>Health details always shown when using custom management.server.port</title>
		<body>When setting up a custom management port :  ```properties management.server.port=8088 ```  The property `management.endpoint.health.show-details=false` is ignored. Health details is always shown.  Here's my test repository : https://github.com/philippeboyd/spring-boot-health-bug</body>
		<created>2017-12-07 15:10:20</created>
		<closed>2017-12-13 16:47:52</closed>
	</bug>
	<bug>
		<id>11282</id>
		<title>spring-boot-autoconfigure-processor incorrectly process @ConditionalOnClass with an inner class value</title>
		<body>## Problem Detail:  I'm using Spring Boot 1.5.9.RELEASE.  When spring-boot-autoconfigure-processor process  `@ConditionalOnClass` with an inner class value, there is no dollar sign in the generated text of inner class.  ## Verify Steps:  1. Clone this repository: `https://github.com/jearton/spring-boot-autoconfigure-processor-issue.git`  2. Execute `cd spring-boot-autoconfigure-processor-issue &amp;&amp; ./mvnw clean compile`  3. View the file `target/classes/META-INF/spring-autoconfigure-metadata.properties`,     you'll see the difference. First is dot, second is dollar. The second is correct.  </body>
		<created>2017-12-07 09:28:55</created>
		<closed>2017-12-07 17:43:25</closed>
	</bug>
	<bug>
		<id>11245</id>
		<title>Spring Data Couchbase reactive should add rxjava as dependencies</title>
		<body>I converted a  spring data couchbase reactive sample to [boot based](https://github.com/hantsy/spring-reactive-sample/tree/master/boot-data-couchbase).   But when I added `spring-boot-starter-data-couchbase-reactive` into dependencies, then starts up the application, I got the error info like this:  ``` can not find adapter for rx.Single. ```  I have to add the `rxjava` into dependencies to overcome this issue.  ```xml         &lt;dependency&gt;             &lt;groupId&gt;io.reactivex&lt;/groupId&gt;             &lt;artifactId&gt;rxjava&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;io.reactivex&lt;/groupId&gt;             &lt;artifactId&gt;rxjava-reactive-streams&lt;/artifactId&gt;         &lt;/dependency&gt;  ```  And another issue confused me for some days,  my data initializer will cause another exception at runtime.  ```java @Component @Slf4j class DataInitializer implements CommandLineRunner {      private final PostRepository posts;      public DataInitializer(PostRepository posts) {         this.posts = posts;     }      @Override     public void run(String[] args) {         log.info("start data initialization  ...");         this.posts             .deleteAll()             .thenMany(                 Flux                     .just("Post one", "Post two")                     .flatMap(                         title -&gt; this.posts.save(Post.builder().id(UUID.randomUUID().toString()).title(title).content("content of " + title).build())                     )             )             .log()             .subscribe(                 null,                 null,                 () -&gt; log.info("done initialization...")             );      }  } ``` The exception details is here. I have posted [this on stackoverflow some days ago](https://stackoverflow.com/questions/46491963/classcastexception-was-threw-when-call-deleteall-of-reative-spring-data-couchbas). ``` 2017-12-02 16:50:50.956 ERROR 15784 --- [-computations-2] reactor.Flux.ConcatArray.1               : onError(java.lang.ClassCastException: rx.Observable cannot be cast to com.couchbase.client.java.view.AsyncViewRow) 2017-12-02 16:50:50.964 ERROR 15784 --- [-computations-2] reactor.Flux.ConcatArray.1               :   java.lang.ClassCastException: rx.Observable cannot be cast to com.couchbase.client.java.view.AsyncViewRow at org.springframework.data.couchbase.repository.support.SimpleReactiveCouchbaseRepository.lambda$deleteAll$8(SimpleReactiveCouchbaseRepository.java:254) ~[spring-data-couchbase-3.0.2.RELEASE.jar:3.0.2.RELEASE] at rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:69) [rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77) [rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onNext(OnSubscribeDoOnEach.java:101) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorMerge$MergeSubscriber.emitScalar(OperatorMerge.java:395) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorMerge$MergeSubscriber.tryEmit(OperatorMerge.java:355) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:846) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77) [rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:77) [rxjava-1.3.4.jar:1.3.4] at rx.internal.producers.SingleProducer.request(SingleProducer.java:65) ~[rxjava-1.3.4.jar:1.3.4] at rx.Subscriber.setProducer(Subscriber.java:211) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.setProducer(OnSubscribeMap.java:102) [rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.setProducer(OnSubscribeMap.java:102) [rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:110) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.checkTerminated(OperatorObserveOn.java:281) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.call(OperatorObserveOn.java:216) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55) ~[rxjava-1.3.4.jar:1.3.4] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_152] at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_152] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[na:1.8.0_152] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[na:1.8.0_152] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_152] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_152] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152] Caused by: rx.exceptions.OnErrorThrowable$OnNextValue: OnError while emitting onNext value: rx.Observable.class at rx.exceptions.OnErrorThrowable.addValueAsLastCause(OnErrorThrowable.java:118) ~[rxjava-1.3.4.jar:1.3.4] at rx.internal.operators.OnSubscribeMap$MapSubscriber.onNext(OnSubscribeMap.java:73) [rxjava-1.3.4.jar:1.3.4] ... 22 common frames omitted ```</body>
		<created>2017-12-02 09:06:48</created>
		<closed>2017-12-11 12:41:24</closed>
	</bug>
	<bug>
		<id>11225</id>
		<title>Buggy javassist library dependency with 2.0.0.M6</title>
		<body>[note: this is tested with Java 9.0.1 (Oracle 9.0.1+11), gradle 4.3]  2.0.0.M6 version of spring-boot-starter-data-jpa includes javassist lib via following dependencies:  ``` +--- org.springframework.boot:spring-boot-starter-data-jpa: -&gt; 2.0.0.M6 .... |    +--- org.hibernate:hibernate-core:5.2.12.Final .... |    |    +--- org.javassist:javassist:3.20.0-GA -&gt; 3.22.0-CR2 ```  Upon startup of the jar application: `gradle bootJar &amp;&amp; java -jar build/libs/app.jar` following runtime exception happens: ```  2017-11-30 12:45:02.661 ERROR 85878 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.boot.archive.spi.ArchiveException: Could not build ClassFile         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1704) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:583) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083) ~[spring-context-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:858) ~[spring-context-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:44) ~[spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:751) [spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:387) [spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) [spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) [spring-boot-2.0.0.M6.jar!/:2.0.0.M6]         at com.company.app.MyApplication.main(MyApplication.java:10) [classes!/:na]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]         at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [affiliate-1.0.jar:na]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [affiliate-1.0.jar:na]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [affiliate-1.0.jar:na]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [affiliate-1.0.jar:na] Caused by: org.hibernate.boot.archive.spi.ArchiveException: Could not build ClassFile         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.toClassFile(ClassFileArchiveEntryHandler.java:64) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.handleEntry(ClassFileArchiveEntryHandler.java:47) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.boot.archive.internal.JarFileBasedArchiveDescriptor.visitArchive(JarFileBasedArchiveDescriptor.java:147) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.boot.archive.scan.spi.AbstractScannerImpl.scan(AbstractScannerImpl.java:47) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.boot.model.process.internal.ScanningCoordinator.coordinateScan(ScanningCoordinator.java:75) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.prepare(MetadataBuildingProcess.java:98) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:228) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:163) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:51) ~[spring-orm-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:358) ~[spring-orm-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:384) ~[spring-orm-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:373) ~[spring-orm-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1763) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1700) ~[spring-beans-5.0.1.RELEASE.jar!/:5.0.1.RELEASE]         ... 24 common frames omitted Caused by: java.io.IOException: invalid constant type: 19 at 5         at javassist.bytecode.ConstPool.readOne(ConstPool.java:1244) ~[javassist-3.22.0-CR2.jar!/:na]         at javassist.bytecode.ConstPool.read(ConstPool.java:1175) ~[javassist-3.22.0-CR2.jar!/:na]         at javassist.bytecode.ConstPool.&lt;init&gt;(ConstPool.java:185) ~[javassist-3.22.0-CR2.jar!/:na]         at javassist.bytecode.ClassFile.read(ClassFile.java:839) ~[javassist-3.22.0-CR2.jar!/:na]         at javassist.bytecode.ClassFile.&lt;init&gt;(ClassFile.java:164) ~[javassist-3.22.0-CR2.jar!/:na]         at org.hibernate.boot.archive.scan.spi.ClassFileArchiveEntryHandler.toClassFile(ClassFileArchiveEntryHandler.java:61) ~[hibernate-core-5.2.12.Final.jar!/:5.2.12.Final]         ... 37 common frames omitted ``` This issue was already reported, discussed and fixed in javaassist v 3.22.0-GA: https://github.com/jboss-javassist/javassist/issues/147  Currently M6 release needs following modification to build.gradle in order to run:  ``` dependencies {     compile('org.springframework.boot:spring-boot-starter-data-jpa') {         exclude group: 'org.javassist' // remove transitive buggy dependency      }     compile('org.javassist:javassist:3.22.0-GA') // add dep with bug fix     // rest of deps } ``` </body>
		<created>2017-11-30 20:55:17</created>
		<closed>2018-01-31 17:13:08</closed>
	</bug>
	<bug>
		<id>11222</id>
		<title>JMX HealthEndpoint exposes the reactive adapter in the response</title>
		<body>Assuming a reactive web  app with 2 wrapped health indicator and a native `ReactiveHealthIndicator` (called `reservationService`).   The output with JMX is as follows:  ``` status=UP details={diskSpace={status=UP, details={total=499963170816, free=211637370880, threshold=10485760}}, mongo={status=UP, details={version=3.4.10}}, restaurantService={status=UP}, reactive={status=UP, details={mongo={status=UP, details={version=3.4.10}}, diskSpace={status=UP, details={total=499963170816, free=211637370880, threshold=10485760}}, restaurantService={status=UP}}}} ```  There is an additional `reactive` key that wraps the two blocking indicators. It shouldn't be exposed.  </body>
		<created>2017-11-30 16:56:57</created>
		<closed>2017-12-02 07:29:44</closed>
	</bug>
	<bug>
		<id>11216</id>
		<title>ConverterNotFoundException for java.time.Duration when using YAML-based configuration</title>
		<body>After upgrading from M6 to M7 I get:  ``` Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'server.session.timeout' to java.time.Duration ... Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.Integer] to type [@org.springframework.boot.context.properties.bind.convert.DefaultDurationUnit java.time.Duration] ```</body>
		<created>2017-11-30 11:18:56</created>
		<closed>2017-11-30 12:31:22</closed>
	</bug>
	<bug>
		<id>11207</id>
		<title>org.springframework.boot.loader.jar.Handler creates unnecessary garbage during URL normalisation</title>
		<body>The changes made in 7a87c69d can cause new `String` instances to be created that are used to create and return a `String` that's the same as the input `String`. This unnecessary object creation is having a noticeable impact on performance when launching a fat jar due to the additional garbage that needs to be collected.</body>
		<created>2017-11-29 20:32:01</created>
		<closed>2017-11-29 20:34:22</closed>
	</bug>
	<bug>
		<id>11200</id>
		<title>Dependencies missing from shade plugin in spring-boot-starter-parent</title>
		<body>In 1.5.8:  ```                &lt;plugin&gt;                     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                     &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;                     &lt;dependencies&gt;                         &lt;dependency&gt;                             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                             &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;                         &lt;/dependency&gt;                     &lt;/dependencies&gt; ... ```   in 2.0.0  ```                &lt;plugin&gt;                     &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;                     &lt;executions&gt; ```   (no dependencies)</body>
		<created>2017-11-29 10:32:17</created>
		<closed>2017-11-29 17:58:43</closed>
	</bug>
	<bug>
		<id>11192</id>
		<title>Fix CF health endpoint </title>
		<body></body>
		<created>2017-11-28 22:59:49</created>
		<closed>2017-11-29 02:54:46</closed>
	</bug>
	<bug>
		<id>11133</id>
		<title>jackson-kotlin dependency causes ClassNotFoundException when finding Jackson modules via service loader</title>
		<body>2.0.0.M6: If I use web-starter and activate `findModulesViaServiceLoader` on `Jackson2ObjectMapperBuilder` the application raises an `java.lang.ClassNotFoundException: kotlin.jvm.internal.DefaultConstructorMarker` on startup.  If I exclude jackson-kotlin dependency from web-starter, the error does not occur.  See example project attached: [sample.zip](https://github.com/spring-projects/spring-boot/files/1501185/sample.zip)</body>
		<created>2017-11-24 09:46:52</created>
		<closed>2017-11-28 13:31:29</closed>
	</bug>
	<bug>
		<id>11132</id>
		<title>MongoClientSettingsBuilderCustomizer not applied to reactive MongoDB client using flapdoodle</title>
		<body>Using reactive MongoDB client with embedded MongoDB does not apply `MongoClientSettingsBuilderCustomizer` beans to `MongoClientSettings.Builder`. `MongoClientSettingsBuilderCustomizer`s are applied if flapdoodle is removed.</body>
		<created>2017-11-24 09:31:51</created>
		<closed>2017-11-24 11:00:08</closed>
	</bug>
	<bug>
		<id>11109</id>
		<title>Conditional documents in profile specific file are not loaded consistently</title>
		<body>I've following problem.  I've an instance with following active profiles:  dev, test, foo  and apllication-test.yaml file ``` --- my.prop1: default my.prop2: default --- spring.profiles: dev my.     prop1: dev     prop3: abc --- spring.profiles: foo my.prop2: foo ```   My intuition would tell me: my.prop1 = dev my.prop2 = foo  Thought the result is really: my.prop1 = default my.prop2 = foo   It seems to use the order of profiles, rather then the order of the document. This seems to be different then what the documentation is saying.  (Correct me if I'm wrong)   Further more my.prop3 seems to be not set at all as if this section is ignored even if dev is set active.   Is this a bug of Spring or is there a trick to it?   lG Lukas</body>
		<created>2017-11-22 12:58:08</created>
		<closed>2020-07-31 01:27:40</closed>
	</bug>
	<bug>
		<id>11053</id>
		<title>Align spring.metrics.datadog.api-key vs spring.metrics.export.datadog.apiKey in condition/properties</title>
		<body>Hello  Was testing the Datadog metrics push on M6 spring boot and micrometer datadog .rc3.  I continue get exceptions when i use the `api-key`, I get this below error  ``` Factory method 'compositeMeterRegistry' threw exception; nested exception is java.lang.IllegalStateException: datadog.apiKey must be set to report metrics to Datadog ```  If we use apiKey, it wont autoconfigure datadog because of  `@ConditionalOnProperty("spring.metrics.datadog.api-key")` on `DatadogExportConfiguration`  What would be the right way to configure datadog publish properties </body>
		<created>2017-11-16 19:57:20</created>
		<closed>2017-11-17 08:48:32</closed>
	</bug>
	<bug>
		<id>11052</id>
		<title>JOOQ DSLContext remains non-transactional after auto-configuration</title>
		<body>Noticed in Spring Boot **2.0.0.M6**.  With no additional configuration, the auto-wired JOOQ `DSLContext` still has `transactional` flag set to `false` and no transaction provider linked in after the application start.  It will become transactional if an explicit `PlatformTransactionManager` bean is provided:  ``` @Configuration @EnableTransactionManagement public class AppConfig {      @Autowired     DataSource dataSource;      @Bean     public PlatformTransactionManager transactionManager() {         return new DataSourceTransactionManager(dataSource);     } } ```  However, I have noticed that even without the explicit manager bean configuration above, an auto-wired `PlatformTransactionManager` within the same service will contain a reference. Apparently another auto-configuration creates it after all. Since transaction provider setup in the `JOOQAutoConfiguration` is declared as dependent on the `PlatformTransactionManager` bean existence, it seems like JOOQ auto-configuration runs too early to pick the manager's reference.</body>
		<created>2017-11-16 19:39:17</created>
		<closed>2017-11-23 11:35:58</closed>
	</bug>
	<bug>
		<id>11046</id>
		<title>Heapdump endpoint should not accessed </title>
		<body>@philwebb   if property "management.server.port" is set 8080,everything is fine,here is output on console ~~~ Mapped "{[/application/loggers],methods=[GET],.... Mapped "{[/application/heapdump],methods=[GET],... ~~~  if property "management.server.port" is set 8081,a different port with web server,both loggers and heapdump can not accessed and was disabled .    pom.xml ~~~ &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.M6&lt;/version&gt; &lt;/parent&gt; ~~~  application.properties:  ~~~ endpoints.default.web.enabled=true management.security.enabled=false management.server.port=8081   ~~~  this my project  to show this problem https://github.com/javamonkey/springboot-2.0.0.M6-heapdump </body>
		<created>2017-11-16 12:55:01</created>
		<closed>2017-11-17 14:14:29</closed>
	</bug>
	<bug>
		<id>11029</id>
		<title>Consider to trim each item in comma-separated configurations</title>
		<body>Recently, I have used `spring-boot-starter-data-redis` and configured its sentinel nodes like "xx.xx.xx.xx:xxxx, xx.xx.xx.xx:xxxx", unfortunately, the application started failed because of the space after the comma. Although the docs point out it is "comma-separated", using space after a comma is more customary, So I think it would be better to `trim()` those items in comma-separated configurations. </body>
		<created>2017-11-15 08:58:38</created>
		<closed>2017-11-17 08:15:20</closed>
	</bug>
	<bug>
		<id>11023</id>
		<title>ContextIdApplicationContextInitializer doesn't produce unique IDs, breaking contract of ApplicationContext.getId()</title>
		<body>In addition to being required by the documented contract of `ApplicationContext.getId()`, being able to uniquely identify contexts is required for https://github.com/spring-projects/spring-boot/issues/11019. `ContextIdApplicationContextInitializer` currently generates duplicate IDs by default as it sets every context's ID to `application`.</body>
		<created>2017-11-14 18:12:40</created>
		<closed>2018-01-10 12:59:44</closed>
	</bug>
	<bug>
		<id>11021</id>
		<title>EndpointRequest doesn't match if endpoints.base-path is /</title>
		<body></body>
		<created>2017-11-14 17:33:38</created>
		<closed>2017-11-17 20:03:30</closed>
	</bug>
	<bug>
		<id>10960</id>
		<title>Tomcat 8.0: java.lang.ClassNotFoundException: org.apache.coyote.UpgradeProtocol</title>
		<body>Running Spring Boot 2.0.0.M6 on Tomcat 8.0 (I'm using 8.0.45, which is the version currently used by AWS Elastic Beanstalk), the follow exception occurs at startup preventing the application from starting. Note that this exception occurs regardless of the value of `server.http2.enabled` - there is no way (that I can figure out) to run Spring Boot 2.0.0.M6 on Tomcat &lt; 8.5.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatServletWebServerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory]: Factory method 'tomcatServletWebServerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: org/apache/coyote/UpgradeProtocol at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:583) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1249) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1098) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) ~[spring-context-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:122) ~[spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:751) ~[spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:387) ~[spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) ~[spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155) [spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135) [spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87) [spring-boot-2.0.0.M6.jar:2.0.0.M6] at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172) [spring-web-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5303) [catalina.jar:8.0.45] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) [catalina.jar:8.0.45] at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:753) [catalina.jar:8.0.45] at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:729) [catalina.jar:8.0.45] at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717) [catalina.jar:8.0.45] at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1129) [catalina.jar:8.0.45] at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1871) [catalina.jar:8.0.45] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_141] at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_141] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_141] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_141] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_141] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory]: Factory method 'tomcatServletWebServerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: org/apache/coyote/UpgradeProtocol at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:186) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:575) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] ... 31 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/apache/coyote/UpgradeProtocol at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat.tomcatServletWebServerFactory(ServletWebServerFactoryAutoConfiguration.java:93) ~[spring-boot-autoconfigure-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat$$EnhancerBySpringCGLIB$$741ce4cb.CGLIB$tomcatServletWebServerFactory$0(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.0.0.M6.jar:2.0.0.M6] at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat$$EnhancerBySpringCGLIB$$741ce4cb$$FastClassBySpringCGLIB$$9a5a8a82.invoke(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.0.0.M6.jar:2.0.0.M6] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361) ~[spring-context-5.0.1.RELEASE.jar:5.0.1.RELEASE] at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat$$EnhancerBySpringCGLIB$$741ce4cb.tomcatServletWebServerFactory(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.0.0.M6.jar:2.0.0.M6] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_141] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_141] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_141] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_141] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:155) ~[spring-beans-5.0.1.RELEASE.jar:5.0.1.RELEASE] ... 32 common frames omitted Caused by: java.lang.ClassNotFoundException: org.apache.coyote.UpgradeProtocol at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1333) ~[catalina.jar:8.0.45] at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1167) ~[catalina.jar:8.0.45] ... 43 common frames omitted ```</body>
		<created>2017-11-09 00:33:20</created>
		<closed>2017-11-09 14:42:51</closed>
	</bug>
	<bug>
		<id>10945</id>
		<title>Application fails to start when an environment variable named SERVER is present</title>
		<body>I have created a small "Hello word" kind of an application to integrate JAX-RS (Jersey) with Spring Boot 2.05M on Spring STS running 3.9.1 release. When I try to run as Spring Boot application, it immediately throws this error:  ``` 2017-11-06 17:25:22.335  WARN 8208 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatServletWebServerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'serverPropertiesWebServerFactoryCustomizer' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.class]: Unsatisfied dependency expressed through method 'serverPropertiesWebServerFactoryCustomizer' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'server-org.springframework.boot.autoconfigure.web.ServerProperties': Could not bind properties to 'ServerProperties': prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'server' to org.springframework.boot.autoconfigure.web.ServerProperties 2017-11-06 17:25:22.335  INFO 8208 --- [           main] utoConfigurationReportLoggingInitializer :   Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled. 2017-11-06 17:25:22.335 ERROR 8208 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :   *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target [Bindable@1ddae9b5 type = org.springframework.boot.autoconfigure.web.ServerProperties, value = 'provided', annotations = array&lt;Annotation&gt;[[empty]]] failed:      Property: server     Value: FIELD01     Origin: System Environment Property "SERVER"     Reason: No converter found capable of converting from type [java.lang.String] to type [org.springframework.boot.autoconfigure.web.ServerProperties]  Action:  Update your application's configuration ```   </body>
		<created>2017-11-06 22:30:39</created>
		<closed>2017-11-23 07:19:16</closed>
	</bug>
	<bug>
		<id>10939</id>
		<title>Boot Actuator not triggering HttpHandler auto configuration when different port is used</title>
		<body>When using spring web flux and Actuator where actuator is on a different port the HttpHandler autoconfiguration [Annotation configuration bean](https://github.com/spring-projects/spring-boot/blob/d3c34ee3d1bfd3db4a98678c524e145ef9bca51c/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java#L59) class isn't triggered when the child management context is created. The outer configuration bean. This is different than the parent reactive application context.  To reproduce this all that is needed is a project with both org.springframework.boot:spring-boot-starter-actuator and org.springframework.boot:spring-boot-starter-webflux and  ``` management:   server:     port: 8081 ```  which will cause Caused by: org.springframework.context.ApplicationContextException: Unable to start ReactiveWebApplicationContext due to missing HttpHandler bean.</body>
		<created>2017-11-06 16:47:53</created>
		<closed>2017-11-18 03:50:08</closed>
	</bug>
	<bug>
		<id>10927</id>
		<title>Devtools with Java 9 can lead to invalid cache</title>
		<body>Running DevTools with Java9 leads to  ``` java.lang.reflect.InaccessibleObjectException: Unable to make field private static final java.util.WeakHashMap com.sun.naming.internal.ResourceManager.propertiesCache accessible: module java.naming does not "opens com.sun.naming.internal" to unnamed module @6039c586 at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:337) ~[na:na] at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:281) ~[na:na] at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:176) ~[na:na] at java.base/java.lang.reflect.Field.setAccessible(Field.java:170) ~[na:na] at org.springframework.boot.devtools.restart.Restarter.clear(Restarter.java:357) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter.clear(Restarter.java:348) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter.cleanupKnownCaches(Restarter.java:343) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter.cleanupCaches(Restarter.java:328) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter.stop(Restarter.java:314) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter.lambda$restart$1(Restarter.java:250) [spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] at org.springframework.boot.devtools.restart.Restarter$LeakSafeThread.run(Restarter.java:617) ~[spring-boot-devtools-2.0.0.BUILD-SNAPSHOT.jar:2.0.0.BUILD-SNAPSHOT] ```  Java 9's `com.sun.naming.internal.ResourceManager` doesn't  have a `propertiesCache` anymore.  </body>
		<created>2017-11-04 15:23:40</created>
		<closed>2017-12-13 11:30:41</closed>
	</bug>
	<bug>
		<id>10900</id>
		<title>Reactor Netty does not support X-Forwarded-* request headers</title>
		<body></body>
		<created>2017-11-03 01:27:59</created>
		<closed>2018-06-13 12:56:24</closed>
	</bug>
	<bug>
		<id>10883</id>
		<title>Duplicate property values in Spring Actuator /env endpoint</title>
		<body>Hello,   I think there is a bug in Spring Boot Actuator 1.5.8 /env endpoint. This endpoint shows all the property sources in precedence order, listing the available properties in each.   However, when the same property key is available in several property sources, the value shown is always the one with highest priority, showing an incorrect value in lower precedence property sources. This can be quite confusing, as shown next:   ``` applicationConfig: [classpath:/config/application.yml]: {    global.t3.environment: "APPLICATION-DEV", }, applicationConfig: [classpath:/config/bootstrap-dev.yml]: {    global.t3.environment: "APPLICATION-DEV" }, applicationConfig: [classpath:/config/bootstrap.yml]: {    global.t3.environment: "APPLICATION-DEV" }, ```  Thank you and regards, Aritz</body>
		<created>2017-11-02 10:59:24</created>
		<closed>2017-11-23 13:15:57</closed>
	</bug>
	<bug>
		<id>10877</id>
		<title>Bean Validation is incorrectly identified as being present on WLP due to a partial leak of its API into the app's class loader</title>
		<body>Spring boot 1.5.8. Liberty version: ``` /opt/Liberty/bin/productInfo version Product name: WebSphere Application Server Product version: 17.0.0.2 Product edition: LIBERTY_CORE ```  I have problems booting on Liberty   ``` WARN org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'methodValidationPostProcessor' defined in class path resource [org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]: Unsatisfied dependency expressed through method 'methodValidationPostProcessor' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultValidator' defined in class path resource [org/springframework/boot/autoconfigure/validation/DefaultValidatorConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.validation.beanvalidation.LocalValidatorFactoryBean]: Factory method 'defaultValidator' threw exception; nested exception is java.lang.LinkageError: loading constraint violation when resolving method "javax/validation/Validation.byDefaultProvider()Ljavax/validation/bootstrap/GenericBootstrap;" : loader "com/ibm/ws/classloading/internal/AppClassLoader@a3fad3f0" of class "org/springframework/boot/validation/MessageInterpolatorFactory" and loader "org/eclipse/osgi/internal/loader/EquinoxClassLoader@65505351" of class "javax/validation/Validation" have different types for the method signature ```   My war contents (alongside other stuff): ``` unzip -t dropins/myapp.war |grep -i val     testing: WEB-INF/lib/validation-api-1.1.0.Final.jar   OK     testing: WEB-INF/lib/hibernate-validator-5.4.1.Final.jar   OK ```   There seems to be other with the same problem: https://www.cpume.com/question/fhfsooff-spring-boot-jpa-applicationeventmulticaster-not-initialized-issue.html </body>
		<created>2017-11-01 21:43:24</created>
		<closed>2017-11-03 14:47:04</closed>
	</bug>
	<bug>
		<id>10872</id>
		<title>Does not stop at breakpoints when using 2.0.0.M5 in IntelliJ with gradle bootRun</title>
		<body>Execution doesn't stop at breakpoints for 2.0.0.M5 applications when running gradle bootRun task in IntelliJ. It works fine with 1.5.8.RELEASE. Also, execution stops when running 2.0.0.M5 applications using `main` method. This is tested when using kotlin.</body>
		<created>2017-11-01 18:57:00</created>
		<closed>2017-11-22 17:23:25</closed>
	</bug>
	<bug>
		<id>10847</id>
		<title>Elasticsearch starter forces use of Log4j2, breaking logging in apps that try to use Logback</title>
		<body>I'm trying to run `spring-boot-starter-data-elasticsearch` in latest Milestone 2.0.0.M5.  I've used project template generated from start.spring.io. Here is the GitHub repo url: https://github.com/staleks/spring-boot-2.0.M5-ES  Run 1. `$ ./gradlew clean build` 2. `$ ./gradlew bootRun`  stale the process of loading application context. Please check the attached image: https://github.com/staleks/spring-boot-2.0.M5-ES/blob/master/images/staled-bootRun-process.png  On the other hand, if I switch back to 1.5.8.RELEASE version (GitHub repo url: https://github.com/staleks/spring-boot-1.5.8-ES)  Run 1. `$ ./gradlew clean build` 2. `$ ./gradlew bootRun`  application context is loaded, and web application is started. Please check the attached image: https://github.com/staleks/spring-boot-1.5.8-ES/blob/master/images/bootRun-process.png  Can someone please verify this?  Thank You    </body>
		<created>2017-10-31 16:49:59</created>
		<closed>2017-11-01 10:41:12</closed>
	</bug>
	<bug>
		<id>10846</id>
		<title>HikariCP not unable to serialize in /configprops</title>
		<body>Hi,  I found that datasource bean unable to serialize when calling actuator endpoint /configprops.  ![image](https://user-images.githubusercontent.com/459124/32231077-3de0f422-be87-11e7-99cb-363352f7a53d.png)  application.properties ``` spring.datasource.url=jdbc:oracle:thin:@xxx.xxx.xxx.xxx:2992:xxxx spring.datasource.username= spring.datasource.password= spring.datasource.type=com.zaxxer.hikari.HikariDataSource  spring.datasource.hikari.connection-timeout=60000 spring.datasource.hikari.maximum-pool-size=32 spring.datasource.hikari.min-pool-size=2 spring.datasource.hikari.idle-timeout=90000 spring.datasource.hikari.leak-detection-threshold=60000 ``` pom.xml ``` &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.zaxxer&lt;/groupId&gt; &lt;artifactId&gt;HikariCP&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;oracle&lt;/artifactId&gt; &lt;version&gt;11.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; ```  After I debug, found that exception was throw from https://github.com/openbouquet/HikariCP/blob/d9f6eddadac19eb12cf08660fe20d0294ba3ca3e/src/main/java/com/zaxxer/hikari/util/DriverDataSource.java#L113 when try to serialize https://github.com/brettwooldridge/HikariCP/blob/4d484ea6358fa4b1727c28203f2b654bdfa20823/src/main/java/com/zaxxer/hikari/HikariDataSource.java#L127  Please give a suggestion.  BR, Korrawit  </body>
		<created>2017-10-31 15:25:04</created>
		<closed>2017-11-15 19:44:11</closed>
	</bug>
	<bug>
		<id>10840</id>
		<title>Binding and environment.getProperty(String) produce different values with additional SystemEnvironmentPropertySource</title>
		<body>Here's a couple of tests from @dsyer that illustrate the problem:  ```java @Test public void propertyValues() {     StandardEnvironment environment = new StandardEnvironment();     Map&lt;String, Object&gt; overrides = new LinkedHashMap&lt;&gt;();     overrides.put("foo.password", "test");     environment.getPropertySources()             .addFirst(new SystemEnvironmentPropertySource("override", overrides));     assertEquals("test", environment.getProperty("foo.password")); }  @Test public void configurationProperties() {     StandardEnvironment environment = new StandardEnvironment();     Map&lt;String, Object&gt; overrides = new LinkedHashMap&lt;&gt;();     overrides.put("foo.password", "test");     environment.getPropertySources()             .addFirst(new SystemEnvironmentPropertySource("override", overrides));     PasswordProperties instance = new PasswordProperties();     Binder.get(environment).bind("foo", Bindable.ofInstance(instance));     assertEquals("test", instance.getPassword()); }  protected static class PasswordProperties {     private String password;      public String getPassword() {         return this.password;     }      public void setPassword(String password) {         this.password = password;     } } ```  `propertyValues` passes and `configurationProperties` fails.</body>
		<created>2017-10-31 09:20:07</created>
		<closed>2017-11-06 21:20:31</closed>
	</bug>
	<bug>
		<id>10809</id>
		<title>JmsHealthIndicator can hang in case failover with infinite max reconnects is used with ActiveMQ</title>
		<body>First of all, I have to say that it would be wrong to use infinite max reconnects with ActiveMQ. However, that is the default starting from ActiveMQ 5.6 (see [failover transport-reference](http://activemq.apache.org/failover-transport-reference.html)).  In case the default is used then the actuator endpoint `/health` will hang forever. Do you think that something like this should be addressed in the `JmsHealthIndicator` itself? I think that it would be good if the endpoint doesn't hang forever. &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2017-10-29 12:13:05</created>
		<closed>2018-10-10 11:21:50</closed>
	</bug>
	<bug>
		<id>10781</id>
		<title>Webflux app with actuator and security fails to start on CF</title>
		<body></body>
		<created>2017-10-26 16:21:58</created>
		<closed>2017-11-03 01:21:35</closed>
	</bug>
	<bug>
		<id>10659</id>
		<title>/application Does Not Return actuator.v2 Media Type</title>
		<body>Currently (2.0.0.M5) all actuator endpoints respond with an `application/vnd.spring-boot.actuator.v2+json` media type specified in the `Content-Type` header, except `/application` and presumably `/cloudfoundry`.  Given that this will be the only way for an application to tell which version of the actuators are in use, these endpoints should respond with the appropriate media type. </body>
		<created>2017-10-16 20:55:37</created>
		<closed>2017-10-17 12:02:29</closed>
	</bug>
	<bug>
		<id>10656</id>
		<title>Nullpointer in Actuator Env endpoint for empty config property in Spring Boot 2.0.0.M5 application</title>
		<body>A ```NullpointerException``` is thrown when i try to call the ```*/env``` Actuator endpoint for my small Spring Boot application.  Spring Boot: 2.0.0.M5 Java: 1.8.0_131  The exception occurs on line 158 of the ```org.springframework.boot.actuate.env.EnvironmentEndpoint```. The code is trying to fetch the value of the ```spring.datasource.password``` property, which in the application is empty since I am using an H2 in-mem database. This results is a nullpointer when the code tries to call ```.toString()``` in the following code:```((OriginLookup)source).getOrigin(name).toString()```.  ```application.yml```: ``` # Spring spring:   # Datasource   datasource:     driverClassName: org.h2.Driver     url: jdbc:h2:mem:sandbox;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;MODE=Oracle     username: sa     password:   # JPA   jpa:     database-platform: org.hibernate.dialect.Oracle12cDialect     show-sql: true     hibernate:       ddl-auto: none   # H2 Database   h2:     console:       enabled: true ```  Stacktrace: ``` java.lang.NullPointerException: null at org.springframework.boot.actuate.env.EnvironmentEndpoint.describeValueOf(EnvironmentEndpoint.java:158) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at org.springframework.boot.actuate.env.EnvironmentEndpoint.lambda$describeSource$4(EnvironmentEndpoint.java:149) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[na:1.8.0_131] at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[na:1.8.0_131] at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[na:1.8.0_131] at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[na:1.8.0_131] at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[na:1.8.0_131] at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[na:1.8.0_131] at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[na:1.8.0_131] at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_131] at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[na:1.8.0_131] at org.springframework.boot.actuate.env.EnvironmentEndpoint.describeSource(EnvironmentEndpoint.java:148) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at org.springframework.boot.actuate.env.EnvironmentEndpoint.lambda$getEnvironmentDescriptor$1(EnvironmentEndpoint.java:95) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684) ~[na:1.8.0_131] at org.springframework.boot.actuate.env.EnvironmentEndpoint.getEnvironmentDescriptor(EnvironmentEndpoint.java:92) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at org.springframework.boot.actuate.env.EnvironmentEndpoint.environment(EnvironmentEndpoint.java:80) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.__invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java) ~[na:1.8.0_131] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131] at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:223) ~[spring-core-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.boot.actuate.endpoint.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:62) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping$OperationHandler.handle(WebMvcEndpointHandlerMapping.java:129) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.__invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java) ~[na:1.8.0_131] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java) ~[na:1.8.0_131] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131] at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:871) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:777) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:870) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:855) ~[spring-webmvc-5.0.0.RELEASE.jar:5.0.0.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:119) ~[spring-boot-actuator-2.0.0.M5.jar:2.0.0.M5] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.0.0.RELEASE.jar:5.0.0.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) [tomcat-embed-core-8.5.23.jar:8.5.23] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.23.jar:8.5.23] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_131] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_131] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.23.jar:8.5.23] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131] ```</body>
		<created>2017-10-16 16:10:56</created>
		<closed>2017-10-24 22:01:17</closed>
	</bug>
	<bug>
		<id>10647</id>
		<title>Java 9 Spring Boot application build throws RuntimeException using Maven</title>
		<body>Spring boot maven plugin is throwing RuntimeException during build for a Java 9 application. The issue occurs at [org.springframework.asm.ClassVisitor:148](https://github.com/spring-projects/spring-framework/blob/8a94077da0526d369d2b8b251671726f804fb8c9/spring-core/src/main/java/org/springframework/asm/ClassVisitor.java#L147) due to the api version used as ASM4. This api version is configured in the child class located at [org.springframework.boot.loader.tools.MainClassFinder:301](https://github.com/spring-projects/spring-boot/blob/d3c34ee3d1bfd3db4a98678c524e145ef9bca51c/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java#L301). Below are some of the details, please let me know if more is needed.  Maven Version: 3.5.0 Spring Boot: 2.0.0.M5 Java: 9 (build 9+181)  Discussion Thread: https://stackoverflow.com/questions/46744154/runtimeexception-during-maven-build-of-java-9-spring-boot-application  Reproducer: https://github.com/techpavan/java9-maven-spring-boot   Stacktrace:  ``` Caused by: java.lang.RuntimeException at org.springframework.asm.ClassVisitor.visitModule(ClassVisitor.java:148) at org.springframework.asm.ClassReader.readModule(ClassReader.java:762) at org.springframework.asm.ClassReader.accept(ClassReader.java:663) at org.springframework.asm.ClassReader.accept(ClassReader.java:527) at org.springframework.boot.loader.tools.MainClassFinder.createClassDescriptor(MainClassFinder.java:267) at org.springframework.boot.loader.tools.MainClassFinder.doWithMainClasses(MainClassFinder.java:223) at org.springframework.boot.loader.tools.MainClassFinder.findSingleMainClass(MainClassFinder.java:203) at org.springframework.boot.loader.tools.Repackager.findMainMethod(Repackager.java:365) at org.springframework.boot.loader.tools.Repackager.findMainMethodWithTimeoutWarning(Repackager.java:354) at org.springframework.boot.loader.tools.Repackager.buildManifest(Repackager.java:325) at org.springframework.boot.loader.tools.Repackager.repackage(Repackager.java:255) at org.springframework.boot.loader.tools.Repackager.repackage(Repackager.java:248) at org.springframework.boot.loader.tools.Repackager.repackage(Repackager.java:193) at org.springframework.boot.maven.RepackageMojo.repackage(RepackageMojo.java:221) at org.springframework.boot.maven.RepackageMojo.execute(RepackageMojo.java:208) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) ... 22 more  ```</body>
		<created>2017-10-16 07:18:54</created>
		<closed>2017-10-17 14:57:17</closed>
	</bug>
	<bug>
		<id>10632</id>
		<title>SpringApplicationAdminJmxAutoConfiguration does not allow for additional MBeanExporters</title>
		<body>Spring-boot version: 1.5.7.RELEASE  I have my own custom MBeanExporter - but when adding actuator it will become a conflict: ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Constructor in org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration required a single bean, but 2 were found: - ucpMbeanExporter: defined by method 'ucpMbeanExporter' in class path resource [com/edb/fs/tac/jfr/srv/service/infra/jmx/JmxConfig.class] - endpointMBeanExporter: defined by method 'endpointMBeanExporter' in class path resource [org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.class]   Action:  Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed ```  I think the actuator auto-config should use a qualifier or the likes, so that the conflict can be avoided. It should be possible (and is a quite common use-case) to define our own custom MBeanExporters in addition to the ones from boot.  Discussion on gitter: https://gitter.im/spring-projects/spring-boot?at=59e09941b20c642429f929d3</body>
		<created>2017-10-13 10:53:58</created>
		<closed>2017-10-13 11:53:14</closed>
	</bug>
	<bug>
		<id>10595</id>
		<title>spring.config.name and spring.config.location are inconsistent; former replaces defaults but latter does not</title>
		<body>Spring Boot 2.0.0.SNAPSHOT  Hello,   I am now spending more than a day on a behaviour that I initially thought is a bug in Spring Boot, however now after I had a deeper look into ConfigFileApplicationListener I am not sure if it is more a misleading documentation than a bug.  When specifying an _alternative_ application.properties file by adding the commandline param  `--spring.config.location=classpath:myApplication.properties`, Spring Boot adds all the default locations anyhow since there is no else statement specified in this method in ConfigFileApplicationListener$Loader:              private Set&lt;String&gt; getSearchLocations() { Set&lt;String&gt; locations = new LinkedHashSet&lt;&gt;(); // User-configured settings take precedence, so we do them first if (this.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) { for (String path : asResolvedSet( this.environment.getProperty(CONFIG_LOCATION_PROPERTY), null)) { if (!path.contains("$")) { path = StringUtils.cleanPath(path); if (!ResourceUtils.isUrl(path)) { path = ResourceUtils.FILE_URL_PREFIX + path; } } locations.add(path); } }                     // Shouldn't here be an else condition? locations.addAll( asResolvedSet(ConfigFileApplicationListener.this.searchLocations, DEFAULT_SEARCH_LOCATIONS)); return locations; }  This leads to the effect that all application.properties props are loaded as well as the ones from the alternative specified source and I think this is not desired semantic, since the regular Dev understands the Spring Boot common properties as an Replacement rather than an extension of certain defaults (and indeed afaik all properties are implemented like that, e. g. `logging.config`   So in my opinion the whole property should act more as an replacement rather than a opportunity to specify additional config locations.   If this behaviour is -against my personal expectation- desired like that though, I would appreciate to have an explicit hint in [Common application properties](https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html), or even better a config for that to indicate replacement over merging:       # SPRING CONFIG - using environment property only (ConfigFileApplicationListener)     spring.config.location= # Additional config file locations.     spring.config.name=application # Config file name.     spring.config.merge= # true if config specified above should merge with default configs, false if above specified configuration acts as replacement   Kind regards,  Stefano  </body>
		<created>2017-10-11 11:15:55</created>
		<closed>2017-11-02 17:15:25</closed>
	</bug>
	<bug>
		<id>10594</id>
		<title>${PID:- } is not properly substituted when providing logging.pattern.console property and logback-spring.xml file</title>
		<body>Spring Boot Version: 1.5.7.RELEASE  I want to insert a custom field into log messages and configure an additional logger at the same time. I have successfully done so in the past using a custom value for `logging.pattern.console` and a custom `logback-spring.xml` file. But since upgrading from Spring Boot 1.3.8.RELEASE to 1.5.7.RELEASE the `${PID:- }` placeholder is not properly substituted anymore.  I have created a test case using [spring-boot-sample-simple](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-simple).  I have added this line to `application.properties`:  `logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] [%X{my_field}] %-40.40logger{39} : %m%n%wex`  `[%X{my_field}]` is my custom field. As no value is provided `[]` will be printed.  Furthermore, I have added a `logback-spring.xml` with this content:  ``` &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;     &lt;include resource="org/springframework/boot/logging/logback/base.xml" /&gt; &lt;/configuration&gt; ```  The purpose of having a custom `logback-spring.xml` is configuring an additional logger. I have removed the actual logger configuration because it is not required for reproducing this issue.  Expected log output (PID “14272” is printed):  ``` 2017-10-11 11:29:00.832  INFO 14272 --- [main] [] sample.simple.SampleSimpleApplication    : Hello Phil ```  Output also is as expected if I either delete `logback-spring.xml` or remove `logging.pattern.console`.  Actual log output (“-” is printed for the PID) with both, custom `logging.pattern.console` and custom `logback-spring.xml` present:  ``` 2017-10-11 11:14:53.379  INFO -  --- [main] [] sample.simple.SampleSimpleApplication    : Hello Phil ```  I am aware that I could add the custom pattern to `logback-spring.xml` using `&lt;property name="CONSOLE_LOG_PATTERN" value="..." /&gt;` and it would work but what I would finally like to do is specifying the pattern at runtime using `-Dlogging.pattern.console=...`.  Test case: [spring-boot-sample-simple.zip](https://github.com/spring-projects/spring-boot/files/1375095/spring-boot-sample-simple.zip) </body>
		<created>2017-10-11 09:54:22</created>
		<closed>2017-11-23 12:43:49</closed>
	</bug>
	<bug>
		<id>10569</id>
		<title>Intermittent webflux test failures due to timeouts</title>
		<body>We're seeing tests regularly fail on CI due to timeout issues. Here's [one example](https://ci.spring.io/teams/spring-boot/pipelines/spring-boot/jobs/build/builds/28).  We keep bumping the timeouts but I feel like there must be an underlying cause that we've not yet identified.  ``` [ERROR] eventsWithDateAfter[Reactive](org.springframework.boot.actuate.audit.AuditEventsEndpointWebIntegrationTests)  Time elapsed: 360.013 s  &lt;&lt;&lt; ERROR! java.lang.IllegalStateException: Timeout on blocking read for 360000 MILLISECONDS at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:110) at reactor.core.publisher.Mono.block(Mono.java:1185) at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.toResponseSpec(DefaultWebTestClient.java:293) at org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:271) at org.springframework.boot.actuate.audit.AuditEventsEndpointWebIntegrationTests.eventsWithDateAfter(AuditEventsEndpointWebIntegrationTests.java:55) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.boot.actuate.endpoint.web.test.AbstractWebEndpointRunner$3.evaluate(AbstractWebEndpointRunner.java:114) at org.springframework.boot.actuate.endpoint.web.test.AbstractWebEndpointRunner$4.evaluate(AbstractWebEndpointRunner.java:129) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.boot.actuate.endpoint.web.test.AbstractWebEndpointRunner$1.evaluate(AbstractWebEndpointRunner.java:81) at org.springframework.boot.actuate.endpoint.web.test.AbstractWebEndpointRunner$2.evaluate(AbstractWebEndpointRunner.java:95) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runners.Suite.runChild(Suite.java:128) at org.junit.runners.Suite.runChild(Suite.java:27) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:369) at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:275) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:239) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:160) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:373) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:334) at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:119) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:407)  [INFO] Running org.springframework.boot.actuate.audit.AuditEventsJmxEndpointExtensionTests ```</body>
		<created>2017-10-09 22:30:40</created>
		<closed>2018-01-23 00:08:48</closed>
	</bug>
	<bug>
		<id>10560</id>
		<title>Different actuator port changes HTTP status codes on errors</title>
		<body>Using spring-boot-actuator 1.5.4 and Spring boot admin 1.5.3 we cannot see the "Environment Manager" tab for our client applications.  The problem is caused by the wrong error code returned by the refresh endpoint with HTTP verb `HEAD.`  The spring admin expects `405` (Method not allowed) but the actuator endpoint returns error `500`.  This problem is related to the definition of an alternative port for the management, in that case the Dispatch Servlet has only one Exception handler and not the standard two because it is configured by the `EndpointWebMvcChildContextConfiguration` class.  If we use the server port for the management, without an alternative port, the request on refresh endpoint with HEAD verb returns the right code 405.  For us the alternative port is necessary and we didn't find a workaround to solve the problem.</body>
		<created>2017-10-09 13:35:26</created>
		<closed>2018-08-16 18:48:03</closed>
	</bug>
	<bug>
		<id>10528</id>
		<title>Undertow doesn't shut down properly if there is a startup error (e.g., port already in use)</title>
		<body>Working with Spring Boot 1.5.6 (but glancing at the code I think it might still be a problem even on master). If I start an app that uses Undertow, and startup fails due to an error such as port in use, then the app is left running. The reason is that Undertow.start is called, and it starts up non-daemon XNIO threads before throwing the exception due to port in use. This exception is caught in UndertowEmbeddedServletContainer.start, however the member variable started has not been set to true since startup failed. Then, UndertowEmbeddedServletContainer.stop is called later in response to the startup failure, but it does nothing since the startup variable is false. It seems calling Undertow.stop() in the exception handler would cause the XNIO threads to be stopped and therefore allow the application to exit. </body>
		<created>2017-10-05 15:53:56</created>
		<closed>2017-10-11 15:20:01</closed>
	</bug>
	<bug>
		<id>10505</id>
		<title>CommonOAuth2Provider default redirectUrl should reference registrationId</title>
		<body>The following constant is defined in `CommonOAuth2Provider`:  `private static final String DEFAULT_REDIRECT_URL = "{scheme}://{serverName}:{serverPort}{contextPath}/oauth2/authorize/code/{clientAlias}`  `{clientAlias}` should be changed to `{registrationId}`  `private static final String DEFAULT_REDIRECT_URL = "{scheme}://{serverName}:{serverPort}{contextPath}/oauth2/authorize/code/{registrationId}` </body>
		<created>2017-10-03 17:14:19</created>
		<closed>2017-10-03 20:19:34</closed>
	</bug>
	<bug>
		<id>10496</id>
		<title>DevTools can live lock during stop/restart</title>
		<body>``` Full thread dump OpenJDK 64-Bit Server VM (25.141-b15 mixed mode):  "Attach Listener" #41 daemon prio=9 os_prio=0 tid=0x00007f7d8c002000 nid=0xa331 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Thread-9" #37 prio=5 os_prio=0 tid=0x00007f7d6c1e6800 nid=0x1fb waiting for monitor entry [0x00007f7da5cf6000]    java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:933) - waiting to lock &lt;0x00000000836b91b8&gt; (a java.lang.Object)  "SIGTERM handler" #40 daemon prio=9 os_prio=0 tid=0x00007f7d8c001000 nid=0x1fa in Object.wait() [0x00007f7da680a000]    java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000db4526b0&gt; (a org.springframework.context.support.AbstractApplicationContext$1) at java.lang.Thread.join(Thread.java:1252) - locked &lt;0x00000000db4526b0&gt; (a org.springframework.context.support.AbstractApplicationContext$1) at java.lang.Thread.join(Thread.java:1326) at java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:106) at java.lang.ApplicationShutdownHooks$1.run(ApplicationShutdownHooks.java:46) at java.lang.Shutdown.runHooks(Shutdown.java:123) at java.lang.Shutdown.sequence(Shutdown.java:167) at java.lang.Shutdown.exit(Shutdown.java:212) - locked &lt;0x00000000837edf28&gt; (a java.lang.Class for java.lang.Shutdown) at java.lang.Terminator$1.handle(Terminator.java:52) at sun.misc.Signal$1.run(Signal.java:212) at java.lang.Thread.run(Thread.java:748)  "Thread-6" #20 prio=5 os_prio=0 tid=0x00007f7d5c002000 nid=0x1c1 in Object.wait() [0x00007f7da732f000]    java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000da13f968&gt; (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1252) - locked &lt;0x00000000da13f968&gt; (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1326) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stopAfter(FileSystemWatcher.java:194) - locked &lt;0x00000000da0b6d18&gt; (a java.lang.Object) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stop(FileSystemWatcher.java:177) at org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher.destroy(ClassPathFileSystemWatcher.java:95) at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:256) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:576) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:552) at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:953) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:521) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.destroySingletons(FactoryBeanRegistrySupport.java:227) at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:960) at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1035) at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1011) at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:963) - locked &lt;0x00000000836b91b8&gt; (a java.lang.Object) at org.springframework.boot.devtools.restart.Restarter.stop(Restarter.java:311) at org.springframework.boot.devtools.restart.Restarter.lambda$restart$1(Restarter.java:250) at org.springframework.boot.devtools.restart.Restarter$$Lambda$199/713682444.call(Unknown Source) at org.springframework.boot.devtools.restart.Restarter$LeakSafeThread.run(Restarter.java:617)  "DestroyJavaVM" #38 prio=5 os_prio=0 tid=0x00007f7dc800c800 nid=0x184 waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "http-nio-auto-1-35746-AsyncTimeout" #36 daemon prio=5 os_prio=0 tid=0x00007f7d789d3800 nid=0x1bb waiting on condition [0x00007f7d3befd000]    java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.coyote.AbstractProtocol$AsyncTimeout.run(AbstractProtocol.java:1211) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-Acceptor-0" #35 daemon prio=5 os_prio=0 tid=0x00007f7d789d2000 nid=0x1ba runnable [0x00007f7d3bffe000]    java.lang.Thread.State: RUNNABLE at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method) at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422) at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250) - locked &lt;0x00000000db2d9e68&gt; (a java.lang.Object) at org.apache.tomcat.util.net.NioEndpoint$Acceptor.run(NioEndpoint.java:455) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-ClientPoller-1" #34 daemon prio=5 os_prio=0 tid=0x00007f7d789cf800 nid=0x1b9 runnable [0x00007f7da414a000]    java.lang.Thread.State: RUNNABLE at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method) at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269) at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93) at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86) - locked &lt;0x00000000db381498&gt; (a sun.nio.ch.Util$3) - locked &lt;0x00000000db381488&gt; (a java.util.Collections$UnmodifiableSet) - locked &lt;0x00000000db381370&gt; (a sun.nio.ch.EPollSelectorImpl) at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97) at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:793) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-ClientPoller-0" #33 daemon prio=5 os_prio=0 tid=0x00007f7d789b5800 nid=0x1b8 runnable [0x00007f7da424b000]    java.lang.Thread.State: RUNNABLE at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method) at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269) at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93) at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86) - locked &lt;0x00000000db370b58&gt; (a sun.nio.ch.Util$3) - locked &lt;0x00000000db370b48&gt; (a java.util.Collections$UnmodifiableSet) - locked &lt;0x00000000db370a30&gt; (a sun.nio.ch.EPollSelectorImpl) at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97) at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:793) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-10" #32 daemon prio=5 os_prio=0 tid=0x00007f7d78999800 nid=0x1b7 waiting on condition [0x00007f7da434c000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-9" #31 daemon prio=5 os_prio=0 tid=0x00007f7d78997800 nid=0x1b6 waiting on condition [0x00007f7da444d000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-8" #30 daemon prio=5 os_prio=0 tid=0x00007f7d78995800 nid=0x1b5 waiting on condition [0x00007f7da454e000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-7" #29 daemon prio=5 os_prio=0 tid=0x00007f7d78993800 nid=0x1b4 waiting on condition [0x00007f7da464f000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-6" #28 daemon prio=5 os_prio=0 tid=0x00007f7d78991800 nid=0x1b3 waiting on condition [0x00007f7da4750000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-5" #27 daemon prio=5 os_prio=0 tid=0x00007f7d7898f800 nid=0x1b2 waiting on condition [0x00007f7da4851000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-4" #26 daemon prio=5 os_prio=0 tid=0x00007f7d7898d800 nid=0x1b1 waiting on condition [0x00007f7da4952000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-3" #25 daemon prio=5 os_prio=0 tid=0x00007f7d7898b800 nid=0x1b0 waiting on condition [0x00007f7da4a53000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-2" #24 daemon prio=5 os_prio=0 tid=0x00007f7d7898a000 nid=0x1af waiting on condition [0x00007f7da4b54000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "http-nio-auto-1-exec-1" #23 daemon prio=5 os_prio=0 tid=0x00007f7d78988000 nid=0x1ae waiting on condition [0x00007f7da4c55000]    java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000db3100f8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039) at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103) at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31) at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)  "NioBlockingSelector.BlockPoller-1" #22 daemon prio=5 os_prio=0 tid=0x00007f7d7896a800 nid=0x1ad runnable [0x00007f7da4d56000]    java.lang.Thread.State: RUNNABLE at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method) at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269) at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93) at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86) - locked &lt;0x00000000db2db078&gt; (a sun.nio.ch.Util$3) - locked &lt;0x00000000db2daff0&gt; (a java.util.Collections$UnmodifiableSet) - locked &lt;0x00000000db2dae70&gt; (a sun.nio.ch.EPollSelectorImpl) at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97) at org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.run(NioBlockingSelector.java:339)  "Live Reload Server" #21 daemon prio=5 os_prio=0 tid=0x00007f7d7895c000 nid=0x1ac runnable [0x00007f7da4e57000]    java.lang.Thread.State: RUNNABLE at java.net.PlainSocketImpl.socketAccept(Native Method) at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409) at java.net.ServerSocket.implAccept(ServerSocket.java:545) at java.net.ServerSocket.accept(ServerSocket.java:513) at org.springframework.boot.devtools.livereload.LiveReloadServer.acceptConnections(LiveReloadServer.java:146) at org.springframework.boot.devtools.livereload.LiveReloadServer$$Lambda$178/353302609.run(Unknown Source) at java.lang.Thread.run(Thread.java:748)  "File Watcher" #19 daemon prio=5 os_prio=0 tid=0x00007f7d78950800 nid=0x1aa waiting for monitor entry [0x00007f7da4f58000]    java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stopAfter(FileSystemWatcher.java:186) - waiting to lock &lt;0x00000000da0b6d18&gt; (a java.lang.Object) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stop(FileSystemWatcher.java:177) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.publishEvent(ClassPathFileChangeListener.java:70) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.onChange(ClassPathFileChangeListener.java:64) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.fireListeners(FileSystemWatcher.java:305) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.updateSnapshots(FileSystemWatcher.java:298) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.scan(FileSystemWatcher.java:258) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.run(FileSystemWatcher.java:238) at java.lang.Thread.run(Thread.java:748)  "container-0" #18 prio=5 os_prio=0 tid=0x00007f7d788c4800 nid=0x1a6 waiting on condition [0x00007f7da5259000]    java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.catalina.core.StandardServer.await(StandardServer.java:427) at org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1.run(TomcatWebServer.java:170)  "ContainerBackgroundProcessor[StandardEngine[Tomcat]]" #17 daemon prio=5 os_prio=0 tid=0x00007f7d788c2000 nid=0x1a4 waiting on condition [0x00007f7da535a000]    java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1355) at java.lang.Thread.run(Thread.java:748)  "Service Thread" #8 daemon prio=9 os_prio=0 tid=0x00007f7dc80bd000 nid=0x190 runnable [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "C1 CompilerThread2" #7 daemon prio=9 os_prio=0 tid=0x00007f7dc80b5800 nid=0x18f waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "C2 CompilerThread1" #6 daemon prio=9 os_prio=0 tid=0x00007f7dc80b4000 nid=0x18e waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "C2 CompilerThread0" #5 daemon prio=9 os_prio=0 tid=0x00007f7dc80b1000 nid=0x18d waiting on condition [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Signal Dispatcher" #4 daemon prio=9 os_prio=0 tid=0x00007f7dc80af000 nid=0x18c runnable [0x0000000000000000]    java.lang.Thread.State: RUNNABLE  "Finalizer" #3 daemon prio=8 os_prio=0 tid=0x00007f7dc8086800 nid=0x18b in Object.wait() [0x00007f7da7cfb000]    java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x000000008362dd98&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143) - locked &lt;0x000000008362dd98&gt; (a java.lang.ref.ReferenceQueue$Lock) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164) at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)  "Reference Handler" #2 daemon prio=10 os_prio=0 tid=0x00007f7dc8081800 nid=0x18a in Object.wait() [0x00007f7da7dfc000]    java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x000000008362dd00&gt; (a java.lang.ref.Reference$Lock) at java.lang.Object.wait(Object.java:502) at java.lang.ref.Reference.tryHandlePending(Reference.java:191) - locked &lt;0x000000008362dd00&gt; (a java.lang.ref.Reference$Lock) at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)  "VM Thread" os_prio=0 tid=0x00007f7dc807a000 nid=0x189 runnable   "GC task thread#0 (ParallelGC)" os_prio=0 tid=0x00007f7dc8022000 nid=0x185 runnable   "GC task thread#1 (ParallelGC)" os_prio=0 tid=0x00007f7dc8023800 nid=0x186 runnable   "GC task thread#2 (ParallelGC)" os_prio=0 tid=0x00007f7dc8025800 nid=0x187 runnable   "GC task thread#3 (ParallelGC)" os_prio=0 tid=0x00007f7dc8027000 nid=0x188 runnable   "VM Periodic Task Thread" os_prio=0 tid=0x00007f7dc80bf800 nid=0x191 waiting on condition   JNI global references: 694 ```  The two interesting threads are:  ``` "File Watcher" #19 daemon prio=5 os_prio=0 tid=0x00007f7d78950800 nid=0x1aa waiting for monitor entry [0x00007f7da4f58000]    java.lang.Thread.State: BLOCKED (on object monitor) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stopAfter(FileSystemWatcher.java:186) - waiting to lock &lt;0x00000000da0b6d18&gt; (a java.lang.Object) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stop(FileSystemWatcher.java:177) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.publishEvent(ClassPathFileChangeListener.java:70) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.onChange(ClassPathFileChangeListener.java:64) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.fireListeners(FileSystemWatcher.java:305) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.updateSnapshots(FileSystemWatcher.java:298) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.scan(FileSystemWatcher.java:258) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.run(FileSystemWatcher.java:238) at java.lang.Thread.run(Thread.java:748) ```  And:  ``` "Thread-6" #20 prio=5 os_prio=0 tid=0x00007f7d5c002000 nid=0x1c1 in Object.wait() [0x00007f7da732f000]    java.lang.Thread.State: WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on &lt;0x00000000da13f968&gt; (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1252) - locked &lt;0x00000000da13f968&gt; (a java.lang.Thread) at java.lang.Thread.join(Thread.java:1326) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stopAfter(FileSystemWatcher.java:194) - locked &lt;0x00000000da0b6d18&gt; (a java.lang.Object) at org.springframework.boot.devtools.filewatch.FileSystemWatcher.stop(FileSystemWatcher.java:177) at org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher.destroy(ClassPathFileSystemWatcher.java:95) at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:256) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:576) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:552) at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:953) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:521) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.destroySingletons(FactoryBeanRegistrySupport.java:227) at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:960) at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1035) at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1011) at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:963) - locked &lt;0x00000000836b91b8&gt; (a java.lang.Object) at org.springframework.boot.devtools.restart.Restarter.stop(Restarter.java:311) at org.springframework.boot.devtools.restart.Restarter.lambda$restart$1(Restarter.java:250) at org.springframework.boot.devtools.restart.Restarter$$Lambda$199/713682444.call(Unknown Source) at org.springframework.boot.devtools.restart.Restarter$LeakSafeThread.run(Restarter.java:617) ```</body>
		<created>2017-10-02 18:47:29</created>
		<closed>2017-10-02 19:10:20</closed>
	</bug>
	<bug>
		<id>10476</id>
		<title>Dependency management for Solr is incomplete</title>
		<body>Missing modules (there may be others):  - `solr-analytics` - `solr-cell` - `solr-clustering` - `solr-core` - `solr-test-framework`</body>
		<created>2017-10-02 07:49:24</created>
		<closed>2017-10-02 10:44:45</closed>
	</bug>
	<bug>
		<id>10475</id>
		<title>Dependency management for SLF4J is incomplete</title>
		<body>Missing modules (there may be others):  - `slf4j-ext`</body>
		<created>2017-10-02 07:47:53</created>
		<closed>2017-10-02 10:25:25</closed>
	</bug>
	<bug>
		<id>10474</id>
		<title>Dependency management for JNA is incomplete</title>
		<body>Missing modules (there may be others):  - `jna-platform`</body>
		<created>2017-10-02 07:46:33</created>
		<closed>2017-10-02 10:14:42</closed>
	</bug>
	<bug>
		<id>10473</id>
		<title>Dependency management for Jetty is incomplete</title>
		<body>Missing modules (there may be others):  - `websocket-api` - `websocket-common`</body>
		<created>2017-10-02 07:45:49</created>
		<closed>2017-10-02 10:11:54</closed>
	</bug>
	<bug>
		<id>10472</id>
		<title>Dependency management for Dropwizard is incomplete</title>
		<body>Missing modules (there may be others):   - `metrics-json` - `metrics-ivm`</body>
		<created>2017-10-02 07:44:20</created>
		<closed>2017-10-02 09:41:02</closed>
	</bug>
	<bug>
		<id>10455</id>
		<title>Static resources are not found in META-INF/resources when using Java 9 and running an unpackaged application</title>
		<body>It looks like a problem with the test itself though I am not 100% sure. The packaging tests work fine.</body>
		<created>2017-09-29 09:38:23</created>
		<closed>2017-09-29 11:49:09</closed>
	</bug>
	<bug>
		<id>10448</id>
		<title>Map all non-core jdk exception types to something that JMX clients know about</title>
		<body>`ParameterMappingException` is one example</body>
		<created>2017-09-28 18:26:57</created>
		<closed>2018-04-13 14:30:01</closed>
	</bug>
	<bug>
		<id>10436</id>
		<title>Very generic bean name "clock" in 2.0.0.M4</title>
		<body>Hi, I've upgraded our app from `2.0.0.M3` to `2.0.0.M4` and it started reporting that bean of type `java.time.Clock` was not found and that I should define it. But I have it defined as shown in the following snippet and it worked correctly in `2.0.0.M3`  ```java import java.time.Clock;  @Configuration public class ServicesConfiguration {     @Bean     public Clock clock()     {         return Clock.systemDefaultZone();     } } ```  It stopped working, because `org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleExportConfiguration` in `2.0.0.M4` defines bean with very generic name `clock` that replaced my definition. Took me a while to figure it out, but enabling debug logs of `org.springframework` helped.  I've already renamed my service, so it's not an issue for me anymore. But `clock` is a very generic name and I think it should be changed to something more specific.</body>
		<created>2017-09-27 22:23:38</created>
		<closed>2017-10-05 10:02:00</closed>
	</bug>
	<bug>
		<id>10428</id>
		<title>EnvironmentEndpoint provides wrong value for the property source details</title>
		<body>If a property is present in several property sources, the `/application/env` endpoint is supposed to show each property source and the respective values in each.   Instead it always shows the same value (the one returned by the `Environment`).</body>
		<created>2017-09-26 15:58:00</created>
		<closed>2017-09-26 16:17:11</closed>
	</bug>
	<bug>
		<id>10391</id>
		<title>Additional tld skip patterns property has no effect</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; As noted on the gitter channel, I have a project working fine with 1.5.x and this project has this property set `server.tomcat.additional-tld-skip-patterns`. With the latest 2.0.0.BUILD-SNAPSHOT however this property has no effect and during startup I see this error: ```` java.io.FileNotFoundException: /home/petar/.m2/repository/com/mchange/c3p0/0.9.5.2/mchange-commons-java-0.2.11.jar (No such file or directory)     at java.util.zip.ZipFile.open(Native Method) ~[na:1.8.0_144]     at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:225) ~[na:1.8.0_144]     at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:155) ~[na:1.8.0_144]     at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:166) ~[na:1.8.0_144]     at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:130) ~[na:1.8.0_144]     at org.apache.tomcat.util.scan.JarFileUrlJar.&lt;init&gt;(JarFileUrlJar.java:60) ~[tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.tomcat.util.scan.JarFactory.newInstance(JarFactory.java:49) ~[tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:338) ~[tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:288) ~[tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.jasper.servlet.TldScanner.scanJars(TldScanner.java:262) [tomcat-embed-jasper-8.5.20.jar:8.5.20]     at org.apache.jasper.servlet.TldScanner.scan(TldScanner.java:104) [tomcat-embed-jasper-8.5.20.jar:8.5.20]     at org.apache.jasper.servlet.JasperInitializer.onStartup(JasperInitializer.java:101) [tomcat-embed-jasper-8.5.20.jar:8.5.20]     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5196) [tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1419) [tomcat-embed-core-8.5.20.jar:8.5.20]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1409) [tomcat-embed-core-8.5.20.jar:8.5.20]     at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_144]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]     at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144] ```` I have tested with a sample project from start.spring.io. Only thing I have added is this dependency to my classpath: ````xml &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.2&lt;/version&gt; &lt;/dependency&gt; ```` </body>
		<created>2017-09-23 16:23:51</created>
		<closed>2017-11-07 22:59:07</closed>
	</bug>
	<bug>
		<id>10336</id>
		<title> /metrics list duplicate names</title>
		<body>using Spring Boot 2.0.0.M4 then `/metrics` endpoint lists duplicate metric names  ```json { "names": [ "jvm.memory.used", "jvm.buffer.memory.used", "jvm.buffer.count", "logback.events", "process.uptime", "jvm.memory.max", "jvm.memory.max", "jvm.memory.max", "jvm.memory.committed", "jvm.buffer.total.capacity", "jvm.memory.max", "logback.events", "jvm.memory.committed", "jvm.memory.used", "jvm.buffer.total.capacity", "jvm.buffer.count", "jvm.memory.used", "jvm.memory.used", "jvm.memory.committed", "process.starttime", "jvm.memory.max", "http.server.requests", "jvm.memory.max", "jvm.memory.used", "logback.events", "logback.events", "jvm.memory.committed", "jvm.memory.used", "jvm.memory.committed", "jvm.memory.committed", "logback.events", "jvm.buffer.memory.used" ] } ```</body>
		<created>2017-09-18 19:38:29</created>
		<closed>2017-09-19 16:14:37</closed>
	</bug>
	<bug>
		<id>10335</id>
		<title>No metrics for root and static resources</title>
		<body>Using Spring Boot Web &amp; Spring Boot Actuator (2.0.0 M4) I want to monitor all http requests. When I look at the metrics, static resources like an `index.html` file, images, css &amp; js files aren't being tracked, nor is the root of the web app.  First observations are that the `HandlerExecutionChain`s don't have the proper `MetricsHandlerInterceptor` set.  Here you can find a working gradle project: https://github.com/TYsewyn/canary-deployment-demo</body>
		<created>2017-09-18 19:21:30</created>
		<closed>2017-11-20 13:24:12</closed>
	</bug>
	<bug>
		<id>10317</id>
		<title>spring-boot-devtools java.net.SocketException: Unexpected end of file from server</title>
		<body>I have an issue to reload my app running inside docker container using  `spring-boot-devtools:1.5.6.RELEASE`  When I connect to the remote app with`org.springframework.boot.devtools.RemoteSpringApplication` and do some changes then after my changes were uploaded I'm getting: `java.net.SocketException: Unexpected end of file from server`  I tried to get it work on my Mac and Linux laptop but the result is always the same. Here is my log:  &lt;pre&gt; 2017-09-16 22:20:29.693  INFO 54043 --- [   File Watcher] o.s.b.d.r.c.ClassPathChangeUploader      : Uploaded 1 class resource Exception in thread "File Watcher" java.lang.IllegalStateException: java.net.SocketException: Unexpected end of file from server at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:100) at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:58) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.publishEvent(ClassPathFileChangeListener.java:68) at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.onChange(ClassPathFileChangeListener.java:64) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.fireListeners(FileSystemWatcher.java:306) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.updateSnapshots(FileSystemWatcher.java:299) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.scan(FileSystemWatcher.java:259) at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.run(FileSystemWatcher.java:239) at java.lang.Thread.run(Thread.java:745) Caused by: java.net.SocketException: Unexpected end of file from server at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:792) at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1569) at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474) at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) at org.springframework.http.client.SimpleClientHttpResponse.getRawStatusCode(SimpleClientHttpResponse.java:52) at org.springframework.http.client.AbstractClientHttpResponse.getStatusCode(AbstractClientHttpResponse.java:33) at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.performUpload(ClassPathChangeUploader.java:116) at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:97) ... 12 more 2017-09-16 22:20:37.719  INFO 54043 --- [pool-1-thread-1] o.s.b.d.r.c.DelayedLiveReloadTrigger     : Remote server has changed, triggering LiveReload 2017-09-16 22:20:38.734  INFO 54043 --- [pool-1-thread-1] o.s.b.d.r.c.DelayedLiveReloadTrigger     : Remote server has changed, triggering LiveReload  &lt;/pre&gt;  Maybe it related to [#1106](https://github.com/spring-projects/spring-boot/issues/1106)</body>
		<created>2017-09-16 19:45:26</created>
		<closed>2019-02-14 14:47:15</closed>
	</bug>
	<bug>
		<id>10268</id>
		<title>All absolute URLs in Class-Path manifest attribute are ignored by DevTools</title>
		<body>See #10111 for all of the background. The summary is:  - The spec for the Class-Path attribute says that entries should be relative URLs - IDEA generates a jar with absolute URLs - We used to support absolute URLs, albeit accidentally - Support for absolute URLs was removed as a side-effect of adding logging for entries that don't exist  Given that we used to support it I think we should put things back the way they were.</body>
		<created>2017-09-12 11:08:08</created>
		<closed>2017-10-02 11:58:57</closed>
	</bug>
	<bug>
		<id>10254</id>
		<title>Spring Session filter is not customized with a custom SessionRepository</title>
		<body>If the user provides its own `SessionRepository` we no longer customize the filter.</body>
		<created>2017-09-11 15:36:45</created>
		<closed>2017-09-11 15:55:14</closed>
	</bug>
	<bug>
		<id>10175</id>
		<title>JettyEmbeddedErrorHandler depends on org.eclipse.jetty.http.HttpMethod</title>
		<body>I'm using spring-boot-1.5.6.RELEASE with jetty8. According to the document, I set the jetty.version to 8.1.15.v20140411. But the class `org.springframework.boot.context.embedded.jetty.JettyEmbeddedErrorHandler` depends on `org.eclipse.jetty.http.HttpMethod`. the later class belongs to jetty9.  when running into JettyEmbeddedErrorHandler , throws java.lang.NoClassDefFoundError: org/eclipse/jetty/http/HttpMethod.  </body>
		<created>2017-09-06 04:22:43</created>
		<closed>2017-09-06 08:59:08</closed>
	</bug>
	<bug>
		<id>10174</id>
		<title>EnvironmentEndpoint no longer supports setKeysToSanitize</title>
		<body>`EnvironmentEndpoint` used to be annotated with `@ConfigurationProperties` but this has been removed with the refactor. This means that `setKeysToSanitize` can no longer be set.</body>
		<created>2017-09-06 04:01:06</created>
		<closed>2017-09-06 10:25:47</closed>
	</bug>
	<bug>
		<id>10144</id>
		<title>AnnotationEndpointDiscover does not look for endpoints in the parent context</title>
		<body></body>
		<created>2017-09-01 13:29:36</created>
		<closed>2017-09-01 14:46:23</closed>
	</bug>
	<bug>
		<id>10143</id>
		<title>ElasticsearchDataAutoConfiguration.elasticsearchTemplate does not back off when beans it needs are missing</title>
		<body>Beans of two different types are required:  - `org.elasticsearch.client.Client` - `org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter`  If either of these is missing, the auto-configuration will fail rather than backing off. </body>
		<created>2017-09-01 12:38:48</created>
		<closed>2017-09-07 08:50:29</closed>
	</bug>
	<bug>
		<id>10131</id>
		<title>Configuration properties binder fails with: Failed to instantiate org.springframework.core.io.Resource, specified class is an interface</title>
		<body>Configuration properties binding fails with an exception after the Spring Cloud bootstrap context is initialized and triggers configuration properties refresh via `ConfigurationPropertiesBindingPostProcessor`. [`VaultProperties`](https://github.com/spring-cloud/spring-cloud-vault/blob/2.0.x/spring-cloud-vault-config/src/main/java/org/springframework/cloud/vault/config/VaultProperties.java) is bound correctly for the bootstrap. The reported property (`spring.cloud.vault.ssl.key-store.u-r-l`) is not provided by `application.properties`/`bootstrap.properties`.  Dependencies: * Spring Boot 2.0.0.M3 * Spring Cloud 2.0.M2 * Spring Cloud Vault 2.0.M2  ``` org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'spring.cloud.vault.ssl.key-store.u-r-l' to java.net.URL at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:226) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:201) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:299) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:307) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:308) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:401) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:391) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:305) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:250) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:197) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:299) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:307) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:308) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:401) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:391) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:305) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:250) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:197) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:299) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:307) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1351) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$6(Binder.java:308) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:401) at org.springframework.boot.context.properties.bind.Binder$Context.withBean(Binder.java:391) at org.springframework.boot.context.properties.bind.Binder.bindBean(Binder.java:305) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:250) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:197) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:186) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:168) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:336) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:306) at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.rebind(ConfigurationPropertiesRebinder.java:117) at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.rebind(ConfigurationPropertiesRebinder.java:98) at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.onApplicationEvent(ConfigurationPropertiesRebinder.java:165) at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.onApplicationEvent(ConfigurationPropertiesRebinder.java:53) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:353) at org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration.afterSingletonsInstantiated(ConfigurationPropertiesRebinderAutoConfiguration.java:79) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:122) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386) at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1245) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1233) at com.example.demo.DemoApplication.main(DemoApplication.java:14) Caused by: java.lang.IllegalStateException: Unable to get value for property u-r-l at org.springframework.boot.context.properties.bind.JavaBeanBinder$BeanProperty.lambda$getValue$0(JavaBeanBinder.java:290) at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.getValidationTarget(ValidationBindHandler.java:106) at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.validate(ValidationBindHandler.java:96) at org.springframework.boot.context.properties.bind.validation.ValidationBindHandler.onFinish(ValidationBindHandler.java:89) at org.springframework.boot.context.properties.bind.Binder.handleBindResult(Binder.java:212) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:198) ... 83 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.core.io.Resource]: Specified class is an interface at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:115) at org.springframework.boot.context.properties.bind.JavaBeanBinder$Bean.lambda$getSupplier$0(JavaBeanBinder.java:164) at org.springframework.boot.context.properties.bind.JavaBeanBinder$BeanSupplier.get(JavaBeanBinder.java:218) at org.springframework.boot.context.properties.bind.JavaBeanBinder$BeanProperty.lambda$getValue$0(JavaBeanBinder.java:287) ... 88 common frames omitted ```</body>
		<created>2017-08-31 15:45:54</created>
		<closed>2017-10-11 00:57:20</closed>
	</bug>
	<bug>
		<id>10106</id>
		<title>Duplicate values should bind properly to List </title>
		<body>With a property such as `List&lt;String&gt; xyz = new ArrayList&lt;&gt;()`, the binder doesn't add duplicate values because we use `CollectionFactory.createCollection(type, 0)` in `CollectionBinder` which gives us a `LinkedHashSet`. </body>
		<created>2017-08-29 21:40:51</created>
		<closed>2017-09-19 21:00:00</closed>
	</bug>
	<bug>
		<id>10105</id>
		<title>Bean methods for MVC endpoints are not consistently annotated with @ConditionalOnMissingBean</title>
		<body>It would be nice if properties were sorted in the `EnvironmentEndpoint` and `EnvironmentMvcEndpoint`. This would greatly help humans when looking at the output of those two endpoints.  Could this feature be integral part of SpringBoot ?  We managed to create our own `SortedEnvironmentEndpoint` bean by subclassing the original version. Luckily, the original factory is already annotated with `@ConditionalOnMissingBean` so our own version is selected without any problem.  This is not the case however for the `EnvironmentMvcEndpoint. The factory is *not* annotated with `@ConditionalOnMissingBean`. The only option is therefore to rely on _overriding bean definition_ which requires proper ordering of the `@Configuration` classes.   --&gt; Could the EnvironmentMvcEndpoint be made `@ConditionalOnMissingBean` as well ?  _Tested on SpringBoot 1.5.6.RELEASE_</body>
		<created>2017-08-29 18:56:03</created>
		<closed>2017-09-06 22:35:22</closed>
	</bug>
	<bug>
		<id>10102</id>
		<title>Wrong XA DataSource reference for Firebird</title>
		<body>Should be `org.firebirdsql.ds.FBXADataSource`</body>
		<created>2017-08-29 11:46:56</created>
		<closed>2017-08-29 12:04:28</closed>
	</bug>
	<bug>
		<id>10092</id>
		<title>`MessageSourceAutoConfigration` should handle dot-based package locations</title>
		<body>The javadoc (and therefore the generated documentation on the property page) states that `basename` of `MessageSourceAutoConfiguration` should be set to  &gt; Comma-separated list of basenames, each following the ResourceBundle convention. &gt; Essentially a fully-qualified classpath location. If it doesn't contain a package &gt; qualifier (such as "org.mypackage"), it will be resolved from the classpath root.  But when using the ResourceBundle convention by setting `spring.messages.basename=org.springframework.security.messages` the Condition specified in `MessageSourceAutoConfiguration` evaluates to false:  ```    MessageSourceAutoConfiguration:       Did not match:          - ResourceBundle did not find bundle with basename org.springframework.security.messages (MessageSourceAutoConfiguration.ResourceBundleCondition) ```  If I specify `spring.messages.basename=org/springframework/security/messages` everything works as expected but this isn't the ResurceBundle convention.</body>
		<created>2017-08-28 15:50:03</created>
		<closed>2018-01-09 12:28:28</closed>
	</bug>
	<bug>
		<id>10085</id>
		<title>Possible wrong import from guava</title>
		<body>In master for boot 2.x, it looks like `TestPropertyValues` has import from guava ``` import com.google.common.collect.Streams;  public static TestPropertyValues of(Iterable&lt;String&gt; pairs) { if (pairs == null) { return empty(); } return of(Streams.stream(pairs)); } ``` Maybe this was a mistake and meant to use something from jdk? Anyway, guava is evil and should not be there. </body>
		<created>2017-08-27 14:01:16</created>
		<closed>2017-08-28 07:05:34</closed>
	</bug>
	<bug>
		<id>10078</id>
		<title>ClassCastException in Neo4jHealthIndicator</title>
		<body>Hi. i get ClassCastException on start of application. it caused by long casted to int in doHealthCheck method.  In `int nodes = (int) result.queryResults().iterator().next().get("nodes");` statement long value returned, not int.  I have this dependencyManagement settings  &gt; dependencyManagement { imports { mavenBom 'io.spring.platform:platform-bom:Brussels-SR4' mavenBom "org.springframework.boot:spring-boot-starter-parent:2.0.0.M3" } }  Exception is:  &gt; java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer at org.springframework.boot.actuate.health.Neo4jHealthIndicator.doHealthCheck(Neo4jHealthIndicator.java:54) ~[spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:43) ~[spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:68) [spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at org.springframework.boot.actuate.endpoint.HealthEndpoint.invoke(HealthEndpoint.java:85) [spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at org.springframework.boot.actuate.endpoint.HealthEndpoint.invoke(HealthEndpoint.java:35) [spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at org.springframework.boot.actuate.endpoint.jmx.DataEndpointMBean.getData(DataEndpointMBean.java:46) [spring-boot-actuator-2.0.0.M3.jar:2.0.0.M3] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144] at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_144] at sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source) ~[na:na] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144] at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_144] at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1252) [na:1.8.0_144] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_144] at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80) [na:1.8.0_144] at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1246) [na:1.8.0_144] at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:1085) [na:1.8.0_144] at org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:90) [spring-context-5.0.0.RC3.jar:5.0.0.RC3] at javax.management.modelmbean.RequiredModelMBean.getAttribute(RequiredModelMBean.java:1562) [na:1.8.0_144] at org.springframework.jmx.export.SpringModelMBean.getAttribute(SpringModelMBean.java:109) [spring-context-5.0.0.RC3.jar:5.0.0.RC3] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:647) [na:1.8.0_144] at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:678) [na:1.8.0_144] at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1445) [na:1.8.0_144] at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_144] at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_144] at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_144] at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:639) [na:1.8.0_144] at sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source) ~[na:na] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144] at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) [na:1.8.0_144] at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_144] at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_144] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_144] at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_144] at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) [na:1.8.0_144] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) [na:1.8.0_144] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) [na:1.8.0_144] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_144] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) [na:1.8.0_144] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_144] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_144] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_144]  &lt;!--  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it. --&gt;</body>
		<created>2017-08-25 15:58:30</created>
		<closed>2017-08-25 16:54:25</closed>
	</bug>
	<bug>
		<id>10049</id>
		<title>DependencyManagementPluginAction doesn't work with Java9</title>
		<body>Hi, I'm using SpringBoot 2.0.0 with OpenJDK 9~b114-0ubuntu1 and Gradle 4.1.  I have the following build script: ```groovy apply plugin: 'java' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management'  buildscript { repositories { jcenter() maven { url 'https://repo.spring.io/snapshot' } maven { url 'https://repo.spring.io/milestone' } } dependencies { classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-SNAPSHOT' } }  repositories { jcenter() maven { url 'https://repo.spring.io/snapshot' } maven { url 'https://repo.spring.io/milestone' } }  dependencies { compile 'org.springframework.boot:spring-boot-starter-web' testCompile 'org.springframework.boot:spring-boot-starter-test' } ```  When I try to execute `gradle dependencyManagement`, I got an error: ``` FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':dependencyManagement'. &gt; Could not resolve all dependencies for configuration ':detachedConfiguration1'.    &gt; Could not find org.springframework.boot:spring-boot-dependencies:null.      Searched in the following locations:          https://jcenter.bintray.com/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom          https://jcenter.bintray.com/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom          https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom          https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom          https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom          https://repo.spring.io/milestone/org/springframework/boot/spring-boot-dependencies/null/spring-boot-dependencies-null.pom      Required by:          project :  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  * Get more help at https://help.gradle.org  BUILD FAILED in 14s 1 actionable task: 1 executed ```  I did some research about it. And the problem is at [DependencyManagementPluginAction.java#L33](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/DependencyManagementPluginAction.java#L33). `DependencyManagementPluginAction.class.getPackage().getImplementationVersion()` returns null and causes the problem.  The problem doesn't appear when I use OpenJDK8.</body>
		<created>2017-08-21 07:09:39</created>
		<closed>2017-09-19 19:47:23</closed>
	</bug>
	<bug>
		<id>10038</id>
		<title>Neo4jDataAutoConfiguration should backoff if Spring Data Neo4j is not available</title>
		<body>`Neo4jDataAutoConfiguration` is missing a `ConditionalOnClass` check on the neo4j transaction manager.   A boot app with `spring-tx` and only `neo4j` is enough to reproduce the issue:  ``` Exception in thread "main" java.lang.NoClassDefFoundError: org/springframework/data/neo4j/transaction/Neo4jTransactionManager at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) at java.lang.Class.getDeclaredMethods(Class.java:1975) at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:613) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:524) at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:510) at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:570) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:697) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:640) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:609) at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1484) at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:425) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:395) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:515) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:508) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1186) at org.springframework.boot.SpringApplication.getExitCodeFromMappedException(SpringApplication.java:818) at org.springframework.boot.SpringApplication.getExitCodeFromException(SpringApplication.java:804) at org.springframework.boot.SpringApplication.handleExitCode(SpringApplication.java:790) at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:744) at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) at com.example.demo.DemoApplication.main(DemoApplication.java:10) Caused by: java.lang.ClassNotFoundException: org.springframework.data.neo4j.transaction.Neo4jTransactionManager at java.net.URLClassLoader.findClass(URLClassLoader.java:381) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ... 24 more ```</body>
		<created>2017-08-18 08:44:19</created>
		<closed>2017-08-18 10:08:39</closed>
	</bug>
	<bug>
		<id>10027</id>
		<title>FreeMarkerAutoConfiguration is missing  class presence checks</title>
		<body>Spring Boot version: 2.0.0.M2  Adding WireMock as a dependency seems to be causing the web server to be configured during integration tests, and consequently accessing servlet jars which are not on the classpath.  I have attached a sample application. Please run the `RemoteWatchServiceTest` to reproduce the bug. The problem is solved using `@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)` on every integration test class (OR removing the WireMock dependency), however this becomes very verbose when many tests are involved. I tried setting `spring.main.web-application-type=none` in `application-test.properties` however that is picked up too late according to @snicoll.  Intellij project below:  [wiremock-webserver-bug.zip](https://github.com/spring-projects/spring-boot/files/1230428/wiremock-webserver-bug.zip) </body>
		<created>2017-08-17 07:25:49</created>
		<closed>2017-08-17 11:29:52</closed>
	</bug>
	<bug>
		<id>10025</id>
		<title>JettyServletWebServerFactory$LoaderHidingResource.close() does not call delegate</title>
		<body>As pointed out [here](https://github.com/spring-projects/spring-boot/blob/758370a70fa432df4a38abb47bc239a8ddd373f6/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java#L750) by @pvorb the [close()](https://github.com/spring-projects/spring-boot/commit/0ab81e4f8f3d7e380b5e9718912f70c3bd0fac87##commitcomment-23684074) method in `JettyServletWebServerFactory$LoaderHidingResource` should call the delegate and not itself.</body>
		<created>2017-08-16 23:32:40</created>
		<closed>2017-08-17 12:25:16</closed>
	</bug>
	<bug>
		<id>9975</id>
		<title>BinderTests is failing when building master 2.0.0.BUILD-SNAPSHOT</title>
		<body>When I run `mvn clean install` on master the Spring Boot module fails with the following error:  ``` Failed tests:   BinderTests.bindWhenHasMalformedDateShouldThrowException Expected test to throw exception with cause an instance of org.springframework.core.convert.ConversionFailedException ```  It looks like the test fails because the date is valid ("2014-04-01") but it needs to be malformed for the exception to be thrown.  Version: 2.0.0.BUILD-SNAPSHOT</body>
		<created>2017-08-08 12:40:51</created>
		<closed>2017-09-18 23:42:46</closed>
	</bug>
	<bug>
		<id>9972</id>
		<title>`spring.profiles.active` from JNDI and context-param are added to active profiles instead of overriding them</title>
		<body>When running a Spring Boot application as a WAR in a servlet container (Tested in Tomcat and WebSphere Liberty), `spring.profiles.active` property set using JNDI or context-param are added to active profiles instead of overriding them.  For example, here's a web.xml that sets both JNDI and context-param: ```xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt; &lt;display-name&gt;demo&lt;/display-name&gt;  &lt;context-param&gt; &lt;param-name&gt;spring.profiles.active&lt;/param-name&gt; &lt;param-value&gt;from-context-param&lt;/param-value&gt; &lt;/context-param&gt;  &lt;!-- sets JNDI --&gt; &lt;env-entry&gt; &lt;env-entry-name&gt;spring.profiles.active&lt;/env-entry-name&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt; &lt;env-entry-value&gt;from-jndi&lt;/env-entry-value&gt; &lt;/env-entry&gt;  &lt;/web-app&gt; ```  With the above, the following profiles become active: `from-context-param,from-jndi`  To reproduce, add the above to `src/main/webapp/WEB-INF/web.xml` in a Spring Boot application packaged as WAR then run it in a servlet container.  Also, I did more tests by setting `spring.profiles.active` from different sources and observing the active profiles. The results were quite inconsistent:  (`X` means I set `spring.profiles.active` in the property source. `1`/`2` means the profile was active and the number is its order in the active profiles)  |context-param|JNDI|system property|environment property|application.properties| |-|-|-|-|-| |X1|X2|X|X|X| |X1|X2|X||X| |X1|X2||X|X| |X1|X2|||X| |X1||X2|X|X| |X1||X2||X| |X1|||X2|X| |X1||||X| ||X2|X1|X|X| ||X2|X1||X| ||X2||X1|X| ||X2|||X1| |||X1|X|X| |||X1||X| ||||X1|X| |||||X1| </body>
		<created>2017-08-08 05:12:38</created>
		<closed>2017-10-02 11:49:47</closed>
	</bug>
	<bug>
		<id>9935</id>
		<title>Main reference docs mention old executable property on springBoot extension</title>
		<body>As described [here](https://stackoverflow.com/questions/45455890/springboot-cant-create-fully-executable-jar-with-2-0-0-m3?noredirect=1#comment77872326_45455890) the documentation of 2.0.0-M3, section [60](http://docs.spring.io/spring-boot/docs/2.0.0.M3/reference/htmlsingle/#deployment-install) is not up to date: the property executable does not exist anymore.</body>
		<created>2017-08-02 11:40:01</created>
		<closed>2017-09-21 10:32:19</closed>
	</bug>
	<bug>
		<id>9918</id>
		<title>/env/{name} does not mask sensitive placeholders for a non-regex name</title>
		<body>The sanitisation is only performed in the code path that handles regular expressions so a request for `/env/my.foo` will not be santized whereas a request for `/env/my.*` will be.</body>
		<created>2017-07-31 14:22:43</created>
		<closed>2017-07-31 14:33:56</closed>
	</bug>
	<bug>
		<id>9917</id>
		<title>Executable jar results in error when using relative imports in XSD</title>
		<body>While upgrading an application to the latest version of Spring Boot (1.5.6.RELEASE), I got an error when running the application as the executable jar. After analysis, it seems like there is an issue introduced in the spring-boot-maven-plugin from 1.4.2.RELEASE on.  The application is hosting a webservice, and as such creates an `org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection`, with a `ClasspathResources` pointing to an xsd. This XSD has an import of another XSD using a relative path.  I have attached a sample application that reproduces the problem. The only change needed to (not) show the issue is change the `spring-boot-maven-plugin` to `1.4.1.RELEASE` (working) or a new version (not working).  Please be aware that the issue doesn't occur when running from an IDE/spring-boot:run; it only happens when running an executable JAR.  I looked in the `JarURLConnection` commit history for the 1.4.2.RELEASE, but I couldn't find anything obvious standing out that could cause this.  [relative_import.zip](https://github.com/spring-projects/spring-boot/files/1187716/relative_import.zip)</body>
		<created>2017-07-31 13:48:21</created>
		<closed>2017-08-03 18:53:07</closed>
	</bug>
	<bug>
		<id>9892</id>
		<title>Automatic detection of the main class is switched off when the application plugin is applied</title>
		<body>If you apply the application plugin and do nothing else, the automatic detection of the project's main class stops working. This is because the application plugin creates the `mainClassName` property but with a `null` value by default and the plugin [contains](https://github.com/spring-projects/spring-boot/blob/4a3d389bc33b5ea1095607f5e8a21d59281189fc/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/MainClassConvention.java#L50) this logic:  ```java if (this.project.hasProperty("mainClassName")) {     return this.project.property("mainClassName"); } return resolveMainClass(); ```</body>
		<created>2017-07-28 11:28:55</created>
		<closed>2017-07-28 13:45:15</closed>
	</bug>
	<bug>
		<id>9871</id>
		<title>SNAPSHOT dependency in 1.5.5.RELEASE</title>
		<body>Looks like the 1.5.5 release has a snapshot dependency in it.  ``` &lt;dependency&gt;         &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;         &lt;artifactId&gt;spring-data-mongodb-log4j&lt;/artifactId&gt;         &lt;version&gt;1.10.5.BUILD-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; ```  Causes release plugins to fail.  Thanks David</body>
		<created>2017-07-26 15:23:29</created>
		<closed>2017-07-27 06:10:01</closed>
	</bug>
	<bug>
		<id>9869</id>
		<title>BackgroundPreinitializer runs multiple times when there are multiple applications</title>
		<body>`BackgroundPreinitializer` creates and starts a new thread for each `ApplicationEnvironmentPreparedEvent`. One such event is fired for each `SpringApplication` that's run. When there's a hierarchy (for example when using Spring Cloud) multiple preinitializers can run in parallel.  Given that the preinitializer is interested in static initialisation it only needs to run once for a given class loader. I believe we can avoid the unnecessary second and subsequent preinitialisation by tracking whether or not it has already run in a `static`.</body>
		<created>2017-07-26 13:59:02</created>
		<closed>2017-07-27 09:30:49</closed>
	</bug>
	<bug>
		<id>9848</id>
		<title>Logging in Launcher prevents use of a custom JUL LogManager</title>
		<body>As suggested in https://github.com/spring-projects/spring-boot/issues/3815#issuecomment-317454246 I create new issue for it.  I want to use log4j-jul instead of SLF4J for JUL logging. To enable it I need to pass -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager during application start up like described https://logging.apache.org/log4j/log4j-2.8/log4j-jul/  It needs to happen before first JUL logger is created.  When I created simple application  https://github.com/pwielgolaski/boot-with-jul and start it like that  `java -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -jar target/boot-with-jul-0.0.1-SNAPSHOT.jar `  I get errors ``` Could not load Logmanager "org.apache.logging.log4j.jul.LogManager" java.lang.ClassNotFoundException: org.apache.logging.log4j.jul.LogManager         at java.net.URLClassLoader.findClass(URLClassLoader.java:381)         at java.lang.ClassLoader.loadClass(ClassLoader.java:424)         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)         at java.lang.ClassLoader.loadClass(ClassLoader.java:357)         at java.util.logging.LogManager$1.run(LogManager.java:195)         at java.util.logging.LogManager$1.run(LogManager.java:181)         at java.security.AccessController.doPrivileged(Native Method)         at java.util.logging.LogManager.&lt;clinit&gt;(LogManager.java:181)         at java.util.logging.Logger.demandLogger(Logger.java:448)         at java.util.logging.Logger.getLogger(Logger.java:502)         at org.springframework.boot.loader.jar.Handler.&lt;init&gt;(Handler.java:74)         at org.springframework.boot.loader.jar.JarFile.getUrl(JarFile.java:313)         at org.springframework.boot.loader.archive.JarFileArchive.getUrl(JarFileArchive.java:74)         at org.springframework.boot.loader.Launcher.createClassLoader(Launcher.java:62)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:49)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) Jul 24, 2017 8:08:14 PM me.wielgolaski.boot.BootWithJulApplication main INFO: Log4j JUL before SpringApplication ```  All points to https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java#L74  Based on search https://github.com/search?l=&amp;q=java.util.logging+path%3Aspring-boot-tools%2Fspring-boot-loader+repo%3Aspring-projects%2Fspring-boot&amp;ref=advsearch&amp;type=Code&amp;utf8=%E2%9C%93 It is only place where JUL logger is used in loader, so removing this logging could make it work. </body>
		<created>2017-07-24 18:11:28</created>
		<closed>2017-07-24 20:02:44</closed>
	</bug>
	<bug>
		<id>9844</id>
		<title>Narayana auto-configuration fails if the JMS API is on the class path and org.jboss.narayana.jta:jms is not</title>
		<body>The failure is:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accountService' defined in file [/Users/awilkinson/dev/spring/spring-boot/1.5.x/spring-boot-samples/spring-boot-sample-jta-narayana/target/classes/sample/narayana/AccountService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsTemplate' defined in class path resource [org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration$JmsTemplateConfiguration.class]: Unsatisfied dependency expressed through method 'jmsTemplate' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsConnectionFactory' defined in class path resource [org/springframework/boot/autoconfigure/jms/artemis/ArtemisXAConnectionFactoryConfiguration.class]: Unsatisfied dependency expressed through method 'jmsConnectionFactory' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xaConnectionFactoryWrapper' defined in class path resource [org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper]: Factory method 'xaConnectionFactoryWrapper' threw exception; nested exception is java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [classes/:na] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [classes/:na] at sample.narayana.SampleNarayanaApplication.main(SampleNarayanaApplication.java:30) [classes/:na] Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsTemplate' defined in class path resource [org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration$JmsTemplateConfiguration.class]: Unsatisfied dependency expressed through method 'jmsTemplate' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsConnectionFactory' defined in class path resource [org/springframework/boot/autoconfigure/jms/artemis/ArtemisXAConnectionFactoryConfiguration.class]: Unsatisfied dependency expressed through method 'jmsConnectionFactory' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xaConnectionFactoryWrapper' defined in class path resource [org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper]: Factory method 'xaConnectionFactoryWrapper' threw exception; nested exception is java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] ... 18 common frames omitted Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsConnectionFactory' defined in class path resource [org/springframework/boot/autoconfigure/jms/artemis/ArtemisXAConnectionFactoryConfiguration.class]: Unsatisfied dependency expressed through method 'jmsConnectionFactory' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xaConnectionFactoryWrapper' defined in class path resource [org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper]: Factory method 'xaConnectionFactoryWrapper' threw exception; nested exception is java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] ... 32 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xaConnectionFactoryWrapper' defined in class path resource [org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper]: Factory method 'xaConnectionFactoryWrapper' threw exception; nested exception is java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] ... 46 common frames omitted Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper]: Factory method 'xaConnectionFactoryWrapper' threw exception; nested exception is java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] ... 59 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/jboss/narayana/jta/jms/TransactionHelper at org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration.xaConnectionFactoryWrapper(NarayanaJtaConfiguration.java:163) ~[classes/:na] at org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration$$EnhancerBySpringCGLIB$$455f9301.CGLIB$xaConnectionFactoryWrapper$0(&lt;generated&gt;) ~[classes/:na] at org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration$$EnhancerBySpringCGLIB$$455f9301$$FastClassBySpringCGLIB$$f213a79b.invoke(&lt;generated&gt;) ~[classes/:na] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration$NarayanaJtaJmsConfiguration$$EnhancerBySpringCGLIB$$455f9301.xaConnectionFactoryWrapper(&lt;generated&gt;) ~[classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_102] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_102] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_102] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_102] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.10.RELEASE.jar:4.3.10.RELEASE] ... 60 common frames omitted Caused by: java.lang.ClassNotFoundException: org.jboss.narayana.jta.jms.TransactionHelper at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_102] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_102] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_102] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_102] ... 71 common frames omitted ```  It can be reproduced by excluding `org.jboss.narayana.jta:jms` from our Narayana sample</body>
		<created>2017-07-24 09:24:32</created>
		<closed>2017-07-24 10:09:26</closed>
	</bug>
	<bug>
		<id>9837</id>
		<title>Deprecate binding PooledConnectionFactory to the environment</title>
		<body>As discovered in #9667 this exposes a `spring.activemq.pool.properties` that exposes the raw `Properties` object of the underlying connection factory but using it does not tune the connection factory as expected.  We should rather expose the properties ourselves and stop binding it to the environment.</body>
		<created>2017-07-22 13:29:30</created>
		<closed>2017-07-24 12:01:01</closed>
	</bug>
	<bug>
		<id>9801</id>
		<title>Nested map binds to null in @ConfigurationProperties</title>
		<body>It's this line [here](https://github.com/spring-projects/spring-boot/blob/56169156211ee7037773e7ac04d39db93cb45ee8/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java#L303). Test case: https://github.com/spring-projects/spring-boot-issues/tree/master/gh-9801.  The original problem we had in Spring Cloud Config was probably a poor design (we didn't need infinite depth in that case), but if you needed to configure a tree of arbitrary depth, this "feature" would prevent you from doing so (and give you a big head scratcher about why it was failing).</body>
		<created>2017-07-20 07:53:36</created>
		<closed>2017-10-11 04:47:25</closed>
	</bug>
	<bug>
		<id>9797</id>
		<title>RestTemplateBuilder auto detecting netty results in broken ssl</title>
		<body>Hi,  I was playing around with `RestTemplateBuilder` and it's `RequestFactory` auto detection. While doing this I noticed that for netty, the resulting `Netty4ClientHttpRequestFactory` will be misconfigured, resulting in ssl/https calls being broken with such a client.  The reason is that `Netty4ClientHttpRequestFactory` sets up it's sslContext in an `afterPropertiesSet` method, which the `RestTemplateBuilder` never calls.  Declaring `Netty4ClientHttpRequestFactory` as a bean an setting it on the builder via `requestFactory(ClientHttpRequestFactory requestFactory)` will result in a working RestTemplate.  Affected versions: * Verified on Spring boot 1.5.4 * Looking at the code, seems to be still in 2.0.0  Steps to reproduce: * Have spring-boot-starter-web and netty-all on the classpath. * Construct a Resttemplate via `new RestTemplateBuilder().build()` * Try to access an HTTPS Url  Result: ``` 2017-07-19 23:30:00.864  WARN 11639 --- [ntLoopGroup-2-1] io.netty.channel.ChannelInitializer      : Failed to initialize a channel. Closing: [id: 0x98b62de7]  java.lang.IllegalArgumentException: sslContext should not be null ```</body>
		<created>2017-07-19 21:32:00</created>
		<closed>2017-07-22 07:18:17</closed>
	</bug>
	<bug>
		<id>9793</id>
		<title>Order HealthIndicatorAutoConfiguration after ActiveMQAutoConfiguration</title>
		<body>I discovered there can be some ordering issues with `HealthIndicatorAutoConfiguration`, it should include `ActiveMQAutoConfiguration` in `@AutoConfigureAfter`.</body>
		<created>2017-07-19 16:35:59</created>
		<closed>2017-07-19 17:23:46</closed>
	</bug>
	<bug>
		<id>9732</id>
		<title>additional-spring-configuration-metadata.json is not being merged when building with Gradle 4</title>
		<body>Set up the simplest possible app according to the documentation wrt generating spring configuration metadata along with `additional-spring-configuration-metadata.json` for those additional "hints" to be merged into the main metadata file. It does not seem to work.  https://github.com/dima767/additional-config-metadata-not-working  Try `./gradlew clean build` or `./gradlew clean bootRun`  This is Boot `1.5.4` and Gradle `4.0`  /cc @mmoayyed </body>
		<created>2017-07-11 18:40:00</created>
		<closed>2017-07-25 15:54:48</closed>
	</bug>
	<bug>
		<id>9693</id>
		<title>ROOT log levels cannot be overridden if they are set using "root" in a lower priority PropertySource</title>
		<body>E.g. Spring Cloud Stream has a test utility library that [sets](https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream-binder-test/src/main/java/org/springframework/cloud/stream/binder/BinderTestEnvironmentPostProcessor.java#L39) `logging.level.root=WARN` in a low priority `PropertySource`. If the user sets `logging.level.ROOT=DEBUG` *both* values come out in the levels map in Spring Boot's `LoggingApplicationListener.setLogLevels(LoggingSystem, Environment)`, and the last one wins, which means the lowest priority. I guess we need to merge those two synonyms before we apply the map to the logging system.</body>
		<created>2017-07-06 11:23:57</created>
		<closed>2017-07-06 22:50:44</closed>
	</bug>
	<bug>
		<id>9667</id>
		<title>ActiveMQConnectionFactoryConfiguration not correctly passing through properties to ActiveMQConnectionFactory</title>
		<body>The ActiveMQ auto-configuration does not properly pass along custom configuration to the underlying `ActiveMQConnectionFactory`.   - `PooledConnectionFactory` only supports post-construction configuration.    - `org.apache.activemq.pool.PooledConnectionFactory#setProperties()` constructs a brand new underlying `ActiveMQConnectionFactory` based on the passed-in properties.    - `org.apache.activemq.pool.PooledConnectionFactory#getProperties()` makes a defensive copy, styming attempts to set configuration by modifying the returned object. - `ActiveMQConnectionFactoryConfiguration` (via `ActiveMQConnectionFactoryFactory`) presumes to create the underlying `ActiveMQConnectionFactory` so that it can set `username`, `password`, and `brokerUrl`.  This is captured in these two test cases (intended for `ActiveMQAutoConfigurationTests`):  ```java @Test public void customActiveMQConnectionFactoryPoolConfigurationFromProperty() { load(EmptyConfiguration.class, "spring.activemq.pool.enabled:true",   "spring.activemq.pool.configuration.properties.nonBlockingRedelivery:true",   "spring.activemq.pool.configuration.properties.producerWindowSize:10"); PooledConnectionFactory pooledConnectionFactory = this.context   .getBean(PooledConnectionFactory.class); ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)   pooledConnectionFactory.getConnectionFactory(); assertThat(connectionFactory.isNonBlockingRedelivery()).isTrue(); assertThat(connectionFactory.getProducerWindowSize()).isEqualTo(10); }  @Test public void customActiveMQConnectionFactoryPoolConfigurationFromProperties() { load(EmptyConfiguration.class, "spring.activemq.pool.enabled:true",   "spring.activemq.pool.configuration.properties:sendTimeout=5000\ncheckForDuplicates=true"); PooledConnectionFactory pooledConnectionFactory = this.context .getBean(PooledConnectionFactory.class); ActiveMQConnectionFactory connectionFactory = (ActiveMQConnectionFactory)   pooledConnectionFactory.getConnectionFactory(); assertThat(connectionFactory.getSendTimeout()).isEqualTo(5000); assertThat(connectionFactory.isCheckForDuplicates()).isTrue(); } ```  Note: If inside `ActiveMQConnectionFactoryConfiguration.PooledConnectionFactoryConfiguration#pooledJmsConnectionFactory` one naively calls `PooledConnectionFactory#setProperties()`, `ActiveMQAutoConfigurationTests` successfully, but the fact that a new `ActiveMQConnectionFactory` is caught by `JmsAutoConfigurationTests`. </body>
		<created>2017-07-02 20:21:16</created>
		<closed>2017-07-24 13:34:33</closed>
	</bug>
	<bug>
		<id>9632</id>
		<title>spring-boot-gradle-plugin-2.0.0.M2 : Output Jar not executable (Permission denied error)</title>
		<body>As per [gradle-plugin-2.0.0.M2-docs](http://docs.spring.io/spring-boot/docs/2.0.0.M2/gradle-plugin//reference/html/#packaging-executable-configuring-launch-script) , we can produce executable jars by adding  ``` bootJar { launchScript { included = true } } ``` but after applying those setting I am still receiving `permission denied: ./non-working-executable-0.0.1-SNAPSHOT.jar`   But if I downgrade to version `1.5.4` and add ```springBoot {     executable = true }```  the produced jar is executed without any errors  **How to Reproduce ?** I have attached two projects (generated via start.spring.io using different spring version). [non-working-executable.zip](https://github.com/spring-projects/spring-boot/files/1111280/non-working-executable.zip) [working-executable.zip](https://github.com/spring-projects/spring-boot/files/1111281/working-executable.zip) 1. cd to project directory 2. execute `./gradlew clean build` 3. execute `./build/libs/*.jar`  In `non-working-executable` we receive permission denied error.  **Current work-around** Need to manually set the executable bit on the jar file by executing `chmod +x ./build/libs/*.jar`  </body>
		<created>2017-06-29 08:14:12</created>
		<closed>2017-06-29 11:46:35</closed>
	</bug>
	<bug>
		<id>9621</id>
		<title>NullPointerException in ConfigurationPropertiesBindingPostProcessor.ValidatedLocalValidatorFactoryBean#supports</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  I came across a `NullPointerException` that is being thrown in the `ConfigurationPropertiesBindingPostProcessor.ValidatedLocalValidatorFactoryBean#supports` method, when invoking the following line:  ```java if (type.getPackage().getName().startsWith("org.springframework.boot")) { ```  if `type.getPackage()` returns `null`, as is the case if the type is a JDK proxy. This error prevents the application from starting.  My use case is that I'm attempting to integrate JavaMelody 1.67.0 (`net.bull.javamelody:javamelody-spring-boot-starter:1.67.0`) with Spring Boot 1.5.4 and Spring Cloud Dalston.SR1.  JavaMelody rebinds a datasource with a JDK proxy to enable gathering SQL statistics, and it seems that Spring Boot is not handling the case where a proxy type is processed through this code.    I was able to modify the code by checking if `type.getPackage()` is null, but was not able to determine whether that case should be returning `true` or `false` from the supports method.   Stack Trace: ``` java.lang.NullPointerException: null at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor$ValidatedLocalValidatorFactoryBean.supports(ConfigurationPropertiesBindingPostProcessor.java:423) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.determineValidator(ConfigurationPropertiesBindingPostProcessor.java:353) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:314) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:296) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.rebind(ConfigurationPropertiesRebinder.java:105) ~[spring-cloud-context-1.2.2.RELEASE.jar:1.2.2.RELEASE] at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.rebind(ConfigurationPropertiesRebinder.java:90) ~[spring-cloud-context-1.2.2.RELEASE.jar:1.2.2.RELEASE] at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.onApplicationEvent(ConfigurationPropertiesRebinder.java:138) ~[spring-cloud-context-1.2.2.RELEASE.jar:1.2.2.RELEASE] at org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder.onApplicationEvent(ConfigurationPropertiesRebinder.java:51) ~[spring-cloud-context-1.2.2.RELEASE.jar:1.2.2.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration.afterSingletonsInstantiated(ConfigurationPropertiesRebinderAutoConfiguration.java:79) ~[spring-cloud-context-1.2.2.RELEASE.jar:1.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:781) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE] at com.example.demo.DemoApplication.main(DemoApplication.java:10) [main/:?] ```  </body>
		<created>2017-06-27 20:13:46</created>
		<closed>2017-06-29 08:00:38</closed>
	</bug>
	<bug>
		<id>9616</id>
		<title>Tomcat does not create temporary directory used to store file uploads when it does not exist</title>
		<body>**Steps to Reproduce** When spring boot application starts with default value of `server.tomcat.basedir` in `application.properties`.  It creates two folders in `/tmp` folder. `/tmp/tomcat.xxxxx/..` and `/tmp-docbase.xxxx/`  These directories are used to save temp files during multipart upload among other needed functions. In production system such as Centos, by default system is configured to delete all `/tmp` files if not touched for 10 days.  Once this file is deleted logs will show this error and upload will fail with following exception  ``` org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [**/tmp/tomcat.1220970741172837513.8080/work/Tomcat/localhost/ROOT]** is not valid at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.parseRequest(StandardMultipartHttpServletRequest.java:111) ```  **Possible Solution:** May be lets check if required temp directory doesn't exist recreate during multipart upload. And upload will work without any additional settings. Other fixes/suggestions are welcome as well.  **Affected Versions** Logs are from Spring Boot v1.4.3.RELEASE but its still same in 1.5.3.RELEASE  **Workarounds**  - On Centos 7 update tmp.conf in following three directories /etc/tmpfiles.d/, /run/tmpfiles.d/ and /usr/lib/tmpfiles.d/. with following line x /tmp/tomcat*  OR handle programmatically  - Catch exception in `GlobalException` Handler and recreate directory and inform user to try upload again.    [full_log.txt](https://github.com/spring-projects/spring-boot/files/1105462/full_log.txt)   </body>
		<created>2017-06-27 13:55:06</created>
		<closed>2019-03-29 11:14:43</closed>
	</bug>
	<bug>
		<id>9573</id>
		<title>Spring Boot Gradle Plugin produces "ZipException: duplicate entry" </title>
		<body>I'm getting an error stating `ZipException: duplicate entry` when a transitive dependency from another configuration on the classpath shares a transitive dependency with the compile configuration. I would expect that this could be handled. For example:   Given the `build.gradle`  ```groovy buildscript { ext { springBootVersion = '2.0.0.BUILD-SNAPSHOT' } repositories { mavenCentral() maven { url "https://repo.spring.io/snapshot" } } dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") } }  apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management'  configurations { provided }  sourceSets.all { compileClasspath += configurations.provided runtimeClasspath += configurations.provided }   repositories { maven { url "https://repo.spring.io/libs-snapshot" } }  dependencies { compile "org.springframework.boot:spring-boot-starter-web"  provided "org.springframework.boot:spring-boot-starter-security" } ```  I get the following:  ```bash bootJar --stacktrace :compileJava :processResources UP-TO-DATE :classes :bootJar FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':bootJar'. &gt; Failed to add file '/home/rwinch/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/2.0.0.BUILD-SNAPSHOT/832f41cc5b34381d1f7305c587155ee2d8463aaa/spring-boot-starter-2.0.0.BUILD-SNAPSHOT.jar' to /home/rwinch/code/temp/demo/build/libs/demo.jar  * Try: Run with --info or --debug option to get more log output.  * Exception is: org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':bootJar'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:84)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:55)         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:62)         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88)         at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:46)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:51)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:236)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:228)         at org.gradle.internal.Transformers$4.transform(Transformers.java:169)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:61)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:228)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:215)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:77)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:58)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:32)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:113)         at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23)         at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43)         at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30)         at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:256)         at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:253)         at org.gradle.internal.Transformers$4.transform(Transformers.java:169)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:56)         at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:175)         at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:119)         at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:102)         at org.gradle.launcher.exec.GradleBuildController.run(GradleBuildController.java:71)         at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)         at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:75)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:49)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:49)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:31)         at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:47)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)         at org.gradle.util.Swapper.swap(Swapper.java:38)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)         at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)         at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46) Caused by: org.gradle.api.GradleException: Failed to add file '/home/rwinch/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/2.0.0.BUILD-SNAPSHOT/832f41cc5b34381d1f7305c587155ee2d8463aaa/spring-boot-starter-2.0.0.BUILD-SNAPSHOT.jar' to /home/rwinch/code/temp/demo/build/libs/demo.jar         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.processFile(BootZipCopyAction.java:226)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator$1$1.processFile(NormalizingCopyActionDecorator.java:66)         at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator$1$1.processFile(DuplicateHandlingCopyActionDecorator.java:60)         at org.gradle.api.internal.file.copy.CopyFileVisitorImpl.processFile(CopyFileVisitorImpl.java:62)         at org.gradle.api.internal.file.copy.CopyFileVisitorImpl.visitFile(CopyFileVisitorImpl.java:46)         at org.gradle.api.internal.file.AbstractFileTree$FilteredFileTreeImpl$1.visitFile(AbstractFileTree.java:181)         at org.gradle.api.internal.file.collections.SingletonFileTree.visit(SingletonFileTree.java:42)         at org.gradle.api.internal.file.collections.FileTreeAdapter.visit(FileTreeAdapter.java:110)         at org.gradle.api.internal.file.AbstractFileTree$FilteredFileTreeImpl.visit(AbstractFileTree.java:172)         at org.gradle.api.internal.file.CompositeFileTree.visit(CompositeFileTree.java:87)         at org.gradle.api.internal.file.copy.CopySpecActionImpl.execute(CopySpecActionImpl.java:39)         at org.gradle.api.internal.file.copy.CopySpecActionImpl.execute(CopySpecActionImpl.java:24)         at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:648)         at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:650)         at org.gradle.api.internal.file.copy.DefaultCopySpec$DefaultCopySpecResolver.walk(DefaultCopySpec.java:650)         at org.gradle.api.internal.file.copy.DefaultCopySpec.walk(DefaultCopySpec.java:458)         at org.gradle.api.internal.file.copy.CopySpecBackedCopyActionProcessingStream.process(CopySpecBackedCopyActionProcessingStream.java:38)         at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator$1.process(DuplicateHandlingCopyActionDecorator.java:44)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator$1.process(NormalizingCopyActionDecorator.java:57)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.execute(BootZipCopyAction.java:95)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.execute(NormalizingCopyActionDecorator.java:53)         at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.execute(DuplicateHandlingCopyActionDecorator.java:42)         at org.gradle.api.internal.file.copy.CopyActionExecuter.execute(CopyActionExecuter.java:40)         at org.gradle.api.tasks.AbstractCopyTask.copy(AbstractCopyTask.java:179)         at org.springframework.boot.gradle.tasks.bundling.BootJar.copy(BootJar.java:67)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.doExecute(DefaultTaskClassInfoStore.java:141)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:123)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:632)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:615)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:95)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:76)         ... 70 more Caused by: java.util.zip.ZipException: duplicate entry: BOOT-INF/lib/spring-boot-starter-2.0.0.BUILD-SNAPSHOT.jar         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.createFile(BootZipCopyAction.java:247)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.processFile(BootZipCopyAction.java:222)         ... 102 more   BUILD FAILED  Total time: 0.706 secs ```</body>
		<created>2017-06-21 21:38:09</created>
		<closed>2017-06-22 20:28:32</closed>
	</bug>
	<bug>
		<id>9559</id>
		<title>Gradle Plugin produces warning when running with Gradle 4.0</title>
		<body>In Gradle 4.0, the structure of the build directory changed so that each compiler task uses a different output directory. This necessitated the deprecation of the `SourceSetOutput.classesDir` property because there are multiple classes directories. Uses of this property should be replaced by `SourceSetOutputs.classesDirs`. API Documentation is [here](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSetOutput.html#org.gradle.api.tasks.SourceSetOutput:classesDir).  Version 1.5.4.RELEASE produces the following warning at the beginning of a build: &gt; Gradle now uses separate output directories for each JVM language, but this build assumes a single directory for all classes from a source set. This behaviour has been deprecated and is scheduled to be removed in Gradle 5.0  Attached [getClassesDirStack.txt](https://github.com/spring-projects/spring-boot/files/1088650/getClassesDirStack.txt) includes the full stack trace. This issue should be reproducible in any spring boot application using gradle by upgrading to gradle version 4.0.</body>
		<created>2017-06-20 15:18:32</created>
		<closed>2017-06-21 19:53:56</closed>
	</bug>
	<bug>
		<id>9550</id>
		<title>spring-boot-test-support is a transitive dependency of spring-boot-loader</title>
		<body>It's missing `&lt;scope&gt;test&lt;/scope&gt;`</body>
		<created>2017-06-19 10:34:44</created>
		<closed>2017-06-19 10:37:21</closed>
	</bug>
	<bug>
		<id>9549</id>
		<title>Neo4J Auto-configuration with HTTPS URI</title>
		<body>The current 1.5.x release version of `Neo4jProperties` autoconfiguration doesn't cope with `https` URI's and will throw the exception:  ``` IllegalArgumentException("Could not deduce driver to use based on URI '" + uri + "'"); ```  I think one way of fixing this would be to change [this](https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java#L153) line to something like:  ``` if ("http".equals(scheme) || "https".equals(scheme)) {     return HTTP_DRIVER; } ```</body>
		<created>2017-06-19 10:17:19</created>
		<closed>2017-06-23 09:48:40</closed>
	</bug>
	<bug>
		<id>9548</id>
		<title>Actuator doesn't use the CORS Configuration with default security config</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  The actuator endpoints don't seem to respect the cors configuration with spring security default configuration. So as per @dsyer suggestion on the gitter channel I'm opening this issue for further investigation. Steps to reproduce:  - Generate project from http://start.spring.io with web, security and actuators  - Make a test to perform `OPTIONS` request against `/env` and expect return status is 200. What is actually returned is 401.  Here's a sample project to reproduce the problem: https://github.com/ptahchiev/boot-cors-problem </body>
		<created>2017-06-19 08:36:22</created>
		<closed>2017-07-17 18:28:06</closed>
	</bug>
	<bug>
		<id>9542</id>
		<title>Potential NPE in NettyWebServer.stop() when context refresh fails</title>
		<body>``` Caused by: java.lang.NullPointerException: null     at org.springframework.boot.web.embedded.netty.NettyWebServer.stop(NettyWebServer.java:113) ~[spring-boot-2.0.0.M2.jar:2.0.0.M2]     at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.stopAndReleaseReactiveWebServer(ReactiveWebServerApplicationContext.java:148) ~[spring-boot-2.0.0.M2.jar:2.0.0.M2]     ... 7 common frames omitted ```  https://stackoverflow.com/questions/44590741/spring-boot-webflux-application-wont-start-illegalstateexception  </body>
		<created>2017-06-16 20:49:47</created>
		<closed>2017-06-26 21:28:46</closed>
	</bug>
	<bug>
		<id>9523</id>
		<title>Redis repositories do not work with lettuce</title>
		<body>`RedisRepositoriesAutoConfiguration` has the following condition  ``` @ConditionalOnClass({ Jedis.class, EnableRedisRepositories.class }) ```  If Jedis is not on the classpath, Redis repositories aren't configured.</body>
		<created>2017-06-15 09:06:22</created>
		<closed>2017-06-15 09:12:18</closed>
	</bug>
	<bug>
		<id>9515</id>
		<title>AutoConfigureJsonTesters isn't ordered correctly</title>
		<body>Take the sample from https://github.com/spring-projects/spring-hateoas/issues/551 and update the annotations to:  ```java @RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureJsonTesters public class DemoApplicationTests { ```  Auto configuration doesn't happen due to:  ``` JsonTestersAutoConfiguration.JacksonJsonTestersConfiguration#jacksonTesterFactoryBean:       Did not match:          - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition) ```  This is probably an auto-configuration ordering issue.</body>
		<created>2017-06-14 18:13:21</created>
		<closed>2017-06-23 21:48:42</closed>
	</bug>
	<bug>
		<id>9484</id>
		<title>JarURLConnection returns -1 from getContentLengthLong()</title>
		<body>Our `JarURLConnection` overrides `getContentLength()` but does not override `getContentLengthLong()`. As a result, the latter returns -1 when the former would have returned a useful content length for the entry in the jar.</body>
		<created>2017-06-12 12:36:49</created>
		<closed>2017-06-12 13:26:00</closed>
	</bug>
	<bug>
		<id>9454</id>
		<title>Health cache of the health endpoint is not thread safe</title>
		<body>In `HealthMvcEndpoint` class of Spring Boot Actuator, there is a cache mechanism that returns a cached health result if it has been requested in less than `endpoints.health.time-to-live` milliseconds ago. For this, class keeps the last access time and the cached health object on instance variables. However, even though those fields can be read/written by multiple http threads in the same time, there is no locking mechanism, neither these fields are `volatile` or atomic references. This can lead to stale reads and visibility issues.</body>
		<created>2017-06-11 20:51:45</created>
		<closed>2017-06-21 21:31:50</closed>
	</bug>
	<bug>
		<id>9449</id>
		<title>Deprecation error level is not merged by the annotation processor</title>
		<body>#9074 is documentation only but miss a critical aspect. If a user writes manual metadata with a deprecation level we should actually write that in the generated metadata when we merge the manual metadata with the one that was generated.</body>
		<created>2017-06-09 19:17:27</created>
		<closed>2017-06-14 07:30:35</closed>
	</bug>
	<bug>
		<id>9435</id>
		<title>OAuth2ClientIdCondition  always true</title>
		<body>It appears, that OAuth2ClientIdCondition always returns a 'ConditionOutcome.match'.  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java#L156  </body>
		<created>2017-06-08 09:05:51</created>
		<closed>2017-06-16 18:39:32</closed>
	</bug>
	<bug>
		<id>9423</id>
		<title>Error "Management-specific SSL cannot be configured as the management server is not listening on a separate port" when "management.ssl.enabled=false"</title>
		<body>`spring-boot/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java` in master only checks that the property `management.ssl.enabled` exists (line 153) instead of actually checking if it is also true.  Failed my application where I had this property set to false for testing due to different environments (test vs. production)</body>
		<created>2017-06-07 08:39:49</created>
		<closed>2017-06-07 13:03:04</closed>
	</bug>
	<bug>
		<id>9416</id>
		<title>When I use spring-boot to create an object that supports transactions, the object can not be correctly created </title>
		<body>https://github.com/lanmolsz/spring-boot-bugs  this github address can reproduce the problem  the FooService object injected into `BootApplication` is a plain object, not an supports transactions proxy object.  When I commented `myValidator` method or `testInject` method，FooService object is correct.  To confirm this bug comes from  spring boot , I added `BasicApplication` class, It is a normal spring application. In `BasicApplication` , It will  correct running.  I’m sorry, my English not so good , I hope you can understand the above words .</body>
		<created>2017-06-06 12:03:15</created>
		<closed>2017-09-11 10:54:19</closed>
	</bug>
	<bug>
		<id>9409</id>
		<title>@JsonComponent cannot use ConversionService without marking it @Lazy</title>
		<body>This application will fail to start:  ``` package com.example;  import java.io.IOException;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.jackson.JsonComponent; import org.springframework.core.convert.ConversionService;  import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JsonDeserializer;  @SpringBootApplication public class JsonComponentConversionServiceCycle {  public static void main(String[] args) { SpringApplication.run(JsonComponentConversionServiceCycle.class, args) .getBean(ConversionService.class); }  @JsonComponent static class ThingDeserializer extends JsonDeserializer&lt;Thing&gt; {  public ThingDeserializer(ConversionService conversionService) { }  @Override public Thing deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { return null; }  }  static class Thing {  }  } ```  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  The dependencies of some of the beans in the application context form a cycle:  ┌─────┐ |  jsonComponentConversionServiceCycle.ThingDeserializer defined in file [/Users/awilkinson/dev/workspaces/spring/spring-boot/1.5.x/security-4202/target/classes/com/example/JsonComponentConversionServiceCycle$ThingDeserializer.class] ↑     ↓ |  org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration ↑     ↓ |  org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter ↑     ↓ |  org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration ↑     ↓ |  mappingJackson2HttpMessageConverter defined in class path resource [org/springframework/boot/autoconfigure/web/JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration.class] ↑     ↓ |  jacksonObjectMapper defined in class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperConfiguration.class] └─────┘ ```  If you bring Spring Security into the mix (by extending WebSecurityConfigurerAdapter) the problem will appear to have gone away as some eager initialisation that Spring Security triggers manages to break the cycle. The cycle is broken by Spring Security triggering the creation of the conversion service before any `WebMvcConfigurerAdapter` beans have been injected into `DelegatingWebMvcConfiguration`. This has the unwanted side-effect of losing any conversion service-related configuration that would have been performed by those beans. There's a [Spring Security issue](https://github.com/spring-projects/spring-security/issues/4202) that can hopefully be used to prevent it from triggering that early initialisation.  A user can avoid the problem by marking the `ConversionService` dependency as `@Lazy`. It would be better if they didn't have to do that, though. One solution that appears to work is for the `HttpMessageConverters` dependency in `WebMvcAutoConfigurationAdapter` to be marked as `@Lazy`.</body>
		<created>2017-06-05 14:12:39</created>
		<closed>2017-06-07 16:20:17</closed>
	</bug>
	<bug>
		<id>9405</id>
		<title>Repackaging a jar or war may corrupt non-Latin characters in entry names</title>
		<body>I faced a following issue with Spring Boot, Maven and non-latin characters on OpenSuse: https://stackoverflow.com/questions/44352414/maven-and-non-latin-characters-in-file-names  What am I doing wrong and how to fix it ?</body>
		<created>2017-06-04 12:11:32</created>
		<closed>2017-06-22 20:28:32</closed>
	</bug>
	<bug>
		<id>9392</id>
		<title>Consider replacing `tomcat-jdbc` with `HikariCP` in JDBC starter</title>
		<body>HikariCP was recently made _default JDBC connection pool_ in Boot in #6013.  However, with JDBC starter still pulling in `tomcat-jdbc` it is a bit questionable what _default_ actually means in practice. Users still need to add `HikariCP` dependency manually on top of Data JPA or JDBC starters.  IMO it should be considered to update JDBC starter in Boot 2.0 to pull in `HikariCP` instead of `tomcat-jdbc`.</body>
		<created>2017-06-02 13:22:43</created>
		<closed>2017-06-02 14:36:12</closed>
	</bug>
	<bug>
		<id>9379</id>
		<title>The Jest Elasticsearch health indicator uses a potentially heavy call to check its status</title>
		<body>The spring-boot-actuator Elasticsearch health check performs a call to `/_all/_stats` which potentially comes with a big response. In my case, this response is ~8MB at the moment and regular health checks were causing a huge load on the system. We create indices at an hourly basis. IMHO, using `/_cat/health` is better suited for this task</body>
		<created>2017-06-01 11:12:50</created>
		<closed>2018-10-29 17:47:14</closed>
	</bug>
	<bug>
		<id>9373</id>
		<title>Dependency management for Byte Buddy is incomplete</title>
		<body>We only manage `byte-buddy` but Mockito, for example, depends on `byte-buddy` and `byte-buddy-agent`. We also have dependency management in both `spring-boot-dependencies` and `spring-boot-parent`. The dependency management in the latter should be removed.</body>
		<created>2017-05-31 22:04:55</created>
		<closed>2017-05-31 22:10:35</closed>
	</bug>
	<bug>
		<id>9364</id>
		<title>Maven publishing of BootJar or BootWar fails with Gradle 4.0</title>
		<body>The failure is:  ``` * Exception is: org.gradle.api.ProjectConfigurationException: A problem occurred configuring root project 'gradle-4.0-problem'.         at org.gradle.execution.TaskNameResolver.discoverTasks(TaskNameResolver.java:100)         at org.gradle.execution.TaskNameResolver.access$100(TaskNameResolver.java:32)         at org.gradle.execution.TaskNameResolver$MultiProjectTaskSelectionResult.collect(TaskNameResolver.java:171)         at org.gradle.execution.TaskNameResolver$MultiProjectTaskSelectionResult.collectTasks(TaskNameResolver.java:166)         at org.gradle.execution.TaskNameResolver.selectWithName(TaskNameResolver.java:55)         at org.gradle.execution.TaskSelector.getSelection(TaskSelector.java:103)         at org.gradle.execution.TaskSelector.getSelection(TaskSelector.java:81)         at org.gradle.execution.commandline.CommandLineTaskParser.parseTasks(CommandLineTaskParser.java:42)         at org.gradle.execution.TaskNameResolvingBuildConfigurationAction.configure(TaskNameResolvingBuildConfigurationAction.java:44)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.access$000(DefaultBuildConfigurationActionExecuter.java:25)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter$1.proceed(DefaultBuildConfigurationActionExecuter.java:54)         at org.gradle.execution.DefaultTasksBuildExecutionAction.configure(DefaultTasksBuildExecutionAction.java:44)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.access$000(DefaultBuildConfigurationActionExecuter.java:25)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter$1.proceed(DefaultBuildConfigurationActionExecuter.java:54)         at org.gradle.execution.ExcludedTaskFilteringBuildConfigurationAction.configure(ExcludedTaskFilteringBuildConfigurationAction.java:47)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)         at org.gradle.execution.DefaultBuildConfigurationActionExecuter.select(DefaultBuildConfigurationActionExecuter.java:36)         at org.gradle.initialization.DefaultGradleLauncher$CalculateTaskGraph.run(DefaultGradleLauncher.java:213)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:303)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:177)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)         at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:168)         at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:44)         at org.gradle.initialization.DefaultGradleLauncher$1.run(DefaultGradleLauncher.java:122)         at org.gradle.internal.work.DefaultWorkerLeaseService$2.execute(DefaultWorkerLeaseService.java:124)         at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:116)         at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:99)         at org.gradle.launcher.exec.GradleBuildController.run(GradleBuildController.java:66)         at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)         at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)         at org.gradle.tooling.internal.provider.ValidatingBuildActionRunner.run(ValidatingBuildActionRunner.java:32)         at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$1.run(RunAsBuildOperationBuildActionRunner.java:43)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:303)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:295)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:177)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)         at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner.run(RunAsBuildOperationBuildActionRunner.java:40)         at org.gradle.tooling.internal.provider.SubscribableBuildActionRunner.run(SubscribableBuildActionRunner.java:51)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:44)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:75)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:49)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:51)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:32)         at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:36)         at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:25)         at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:64)         at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:29)         at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:55)         at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:42)         at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:50)         at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:30)         at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)         at org.gradle.util.Swapper.swap(Swapper.java:38)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:62)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)         at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)         at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)         at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) Caused by: org.gradle.model.internal.core.ModelRuleExecutionException: Exception thrown while executing model rule: PublishingPlugin.Rules#publishing(ExtensionContainer)         at org.gradle.model.internal.registry.DefaultModelRegistry.fireAction(DefaultModelRegistry.java:460)         at org.gradle.model.internal.registry.DefaultModelRegistry.access$700(DefaultModelRegistry.java:41)         at org.gradle.model.internal.registry.DefaultModelRegistry$RunModelAction.apply(DefaultModelRegistry.java:1154)         at org.gradle.model.internal.registry.DefaultModelRegistry.transitionTo(DefaultModelRegistry.java:360)         at org.gradle.model.internal.registry.DefaultModelRegistry.transition(DefaultModelRegistry.java:439)         at org.gradle.model.internal.registry.DefaultModelRegistry.atStateOrMaybeLater(DefaultModelRegistry.java:203)         at org.gradle.model.internal.registry.DefaultModelRegistry.atStateOrLater(DefaultModelRegistry.java:190)         at org.gradle.api.internal.tasks.DefaultTaskContainer.discoverTasks(DefaultTaskContainer.java:226)         at org.gradle.execution.TaskNameResolver.discoverTasks(TaskNameResolver.java:98)         ... 81 more Caused by: java.lang.NoClassDefFoundError: Could not initialize class org.springframework.boot.gradle.plugin.SpringBootSoftwareComponent$BootUsageContext         at org.springframework.boot.gradle.plugin.SpringBootSoftwareComponent.getUsages(SpringBootSoftwareComponent.java:52)         at org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication.getSortedUsageContexts(DefaultMavenPublication.java:145)         at org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication.from(DefaultMavenPublication.java:123)         at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:479)         at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:191)         at org.gradle.internal.metaobject.CompositeDynamicObject.tryInvokeMethod(CompositeDynamicObject.java:98)         at org.gradle.internal.metaobject.MixInClosurePropertiesAsMethodsDynamicObject.tryInvokeMethod(MixInClosurePropertiesAsMethodsDynamicObject.java:30)         at org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:59)         at build_bvunfe5xh9mbnvwunr8xcxhaa$_run_closure3$_closure5$_closure7.doCall(/Users/awilkinson/dev/temp/gradle-4.0-problem/build.gradle:33)         at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:71)         at org.gradle.util.ConfigureUtil.configureTarget(ConfigureUtil.java:160)         at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:106)         at org.gradle.util.ConfigureUtil$1.execute(ConfigureUtil.java:123)         at org.gradle.api.internal.AbstractPolymorphicDomainObjectContainer.create(AbstractPolymorphicDomainObjectContainer.java:61)         at org.gradle.api.internal.PolymorphicDomainObjectContainerConfigureDelegate._configure(PolymorphicDomainObjectContainerConfigureDelegate.java:44)         at org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:68)         at build_bvunfe5xh9mbnvwunr8xcxhaa$_run_closure3$_closure5.doCall(/Users/awilkinson/dev/temp/gradle-4.0-problem/build.gradle:32)         at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:71)         at org.gradle.util.ConfigureUtil.configureTarget(ConfigureUtil.java:160)         at org.gradle.util.ConfigureUtil.configureSelf(ConfigureUtil.java:148)         at org.gradle.api.internal.AbstractNamedDomainObjectContainer.configure(AbstractNamedDomainObjectContainer.java:79)         at org.gradle.api.internal.AbstractNamedDomainObjectContainer.configure(AbstractNamedDomainObjectContainer.java:34)         at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:104)         at org.gradle.util.ConfigureUtil$1.execute(ConfigureUtil.java:123)         at org.gradle.api.publish.internal.DefaultPublishingExtension.publications(DefaultPublishingExtension.java:48)         at org.gradle.api.publish.internal.DefaultPublishingExtension_Decorated.publications(Unknown Source)         at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:479)         at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:191)         at org.gradle.internal.metaobject.CompositeDynamicObject.tryInvokeMethod(CompositeDynamicObject.java:98)         at org.gradle.internal.metaobject.MixInClosurePropertiesAsMethodsDynamicObject.tryInvokeMethod(MixInClosurePropertiesAsMethodsDynamicObject.java:30)         at org.gradle.internal.metaobject.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:59)         at build_bvunfe5xh9mbnvwunr8xcxhaa$_run_closure3.doCall(/Users/awilkinson/dev/temp/gradle-4.0-problem/build.gradle:31)         at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:71)         at org.gradle.util.ConfigureUtil.configureTarget(ConfigureUtil.java:160)         at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:106)         at org.gradle.util.ConfigureUtil$1.execute(ConfigureUtil.java:123)         at org.gradle.internal.ImmutableActionSet$CompositeSet.execute(ImmutableActionSet.java:196)         at org.gradle.internal.MutableActionSet.execute(MutableActionSet.java:35)         at org.gradle.api.internal.plugins.ExtensionsStorage$DeferredConfigurableExtensionHolder.configureNow(ExtensionsStorage.java:211)         at org.gradle.api.internal.plugins.ExtensionsStorage$DeferredConfigurableExtensionHolder.get(ExtensionsStorage.java:190)         at org.gradle.api.internal.plugins.ExtensionsStorage.getByType(ExtensionsStorage.java:78)         at org.gradle.api.internal.plugins.DefaultConvention.getByType(DefaultConvention.java:172)         at org.gradle.api.internal.plugins.DefaultConvention.getByType(DefaultConvention.java:167)         at org.gradle.api.publish.plugins.PublishingPlugin$Rules.publishing(PublishingPlugin.java:79)         at org.gradle.model.internal.method.WeaklyTypeReferencingMethod.invoke(WeaklyTypeReferencingMethod.java:100)         at org.gradle.model.internal.inspect.DefaultModelRuleInvoker.invoke(DefaultModelRuleInvoker.java:36)         at org.gradle.model.internal.inspect.UnmanagedModelCreationRuleExtractor$UnmanagedElementCreationAction.execute(UnmanagedModelCreationRuleExtractor.java:77)         at org.gradle.model.internal.inspect.ModelRuleExtractor$DefaultExtractedRuleSource$ContextualizedModelAction.execute(ModelRuleExtractor.java:515)         at org.gradle.model.internal.registry.DefaultModelRegistry$4.run(DefaultModelRegistry.java:455)         at org.gradle.model.internal.registry.RuleContext.run(RuleContext.java:42)         at org.gradle.model.internal.registry.DefaultModelRegistry.fireAction(DefaultModelRegistry.java:452)         ... 89 more ```  Initialization of `BootUsagesContext` is failing as it tries to call `org.gradle.api.internal.attributes.Usages` which [has been removed in 4.0](https://github.com/gradle/gradle/commit/1ccaad23542778c76deec247cb8167d778768d6c). We're using internal API here as we [don't have much choice](https://github.com/spring-projects/spring-boot/issues/9153) if we want to support Gradle's software model.  In the short term we'll have to resort to some reflection. In the medium term, we should consider requiring Gradle 4.0.  </body>
		<created>2017-05-31 10:41:14</created>
		<closed>2017-05-31 11:17:31</closed>
	</bug>
	<bug>
		<id>9351</id>
		<title>Exception when using FIPS compliant security provider for SSL in Undertow server</title>
		<body>I'm trying to upgrade in my application spring-boot library version from 1.5.2 to 1.5.3 but I've failed with the exception when application is starting. I'm using Bouncy Castle FIPS JCA security provider (https://www.bouncycastle.org/fips-java) as a first security provider on the list of providers.   Looking at the spring-boot code I've noticed that in the method UndertowEmbeddedServletContainerFactory#getKeyManagers() the array of KeyManager's is wrapped in ConfigurableAliasKeyManager class instance by using getConfigurableAliasKeyManagers() method. Because of this wrapping it is impossible to configure SSL when using provider in FIPS mode.  Stack trace:  ``` org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.IllegalStateException: java.security.KeyManagementException: FIPS mode: only SunJSSE KeyManagers may be used at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:536) ~[spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at com.mot.ssc.SscApplication.main(SscApplication.java:43) [main/:?] Caused by: java.lang.IllegalStateException: java.security.KeyManagementException: FIPS mode: only SunJSSE KeyManagers may be used at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.configureSsl(UndertowEmbeddedServletContainerFactory.java:287) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createBuilder(UndertowEmbeddedServletContainerFactory.java:256) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.getEmbeddedServletContainer(UndertowEmbeddedServletContainerFactory.java:237) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:164) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] ... 8 more Caused by: java.security.KeyManagementException: FIPS mode: only SunJSSE KeyManagers may be used at sun.security.ssl.SSLContextImpl.chooseKeyManager(SSLContextImpl.java:148) ~[?:1.8.0_112-internal] at sun.security.ssl.SSLContextImpl.engineInit(SSLContextImpl.java:65) ~[?:1.8.0_112-internal] at javax.net.ssl.SSLContext.init(SSLContext.java:282) ~[?:1.8.0_112-internal] at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.configureSsl(UndertowEmbeddedServletContainerFactory.java:270) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createBuilder(UndertowEmbeddedServletContainerFactory.java:256) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.getEmbeddedServletContainer(UndertowEmbeddedServletContainerFactory.java:237) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:164) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[spring-boot-1.5.3.RELEASE.jar:1.5.3.RELEASE] ... 8 more ```</body>
		<created>2017-05-30 07:10:25</created>
		<closed>2017-07-06 02:02:47</closed>
	</bug>
	<bug>
		<id>9331</id>
		<title>DevTools overrides AppContext.resourceLoader causing custom protocol resolvers to be discarded</title>
		<body># Introduction  In [SPR-12857](https://jira.spring.io/browse/SPR-12857) a feature was implemented for registering custom resource protocol resolvers on `DefaultResourceLoader`, including a setter on `ConfigurableApplicationContext` to expose this feature to application initializers. When enabling DevTools however a custom `ResourceLoader` is injected into the application context, hiding the custom protocol resolvers.  # Analysis  The issue arrises from code in `org.springframework.boot.devtools.restart.ClassLoaderFilesResourcePatternResolver`.  ### Non-web Applications For non-web applications, a `PathMatchingResourcePatternResolver` is used with a reference to either the `ApplicationContext`'s resourceLoader, or a new `DefaultResourceLoader` if that is null: ```java private static class ResourcePatternResolverFactory {  public ResourcePatternResolver getResourcePatternResolver( ApplicationContext applicationContext, ResourceLoader resourceLoader) { return new PathMatchingResourcePatternResolver(resourceLoader == null ? new DefaultResourceLoader() : resourceLoader); }  } ``` Hence the protocol resolvers that are registered onto the `ApplicationContext` itself are no longer considered. I prepared a PR to change this but unfortunately, using `applicationContext` itself instead of a new `DefaultResourceLoader` fails the tests, as circular calls occur when requesting the `ApplicationContext`'s classloader.  ### Web Applications For web applications, a custom code path is followed. Again, when a `ResourceLoader` has been explicitly set onto the `ApplicationContext` it is used, otherwise a `WebApplicationContextResourceLoader` is created instead:  ```java private static class WebResourcePatternResolverFactory extends ResourcePatternResolverFactory {  @Override public ResourcePatternResolver getResourcePatternResolver( ApplicationContext applicationContext, ResourceLoader resourceLoader) { if (applicationContext instanceof WebApplicationContext) { return new ServletContextResourcePatternResolver(resourceLoader == null ? new WebApplicationContextResourceLoader( (WebApplicationContext) applicationContext) : resourceLoader); } return super.getResourcePatternResolver(applicationContext, resourceLoader); }  } ``` This may seem to work as `applicationContext` is used this time, however it is only used for configuring a `ServletContextResource`: ```java private static class WebApplicationContextResourceLoader extends DefaultResourceLoader {  private final WebApplicationContext applicationContext;  WebApplicationContextResourceLoader(WebApplicationContext applicationContext) { this.applicationContext = applicationContext; }  @Override protected Resource getResourceByPath(String path) { if (this.applicationContext.getServletContext() != null) { return new ServletContextResource( this.applicationContext.getServletContext(), path); } return super.getResourceByPath(path); }  } ``` As can be seen, the above implementation returns a `ServletContextResource` without ever consulting the `ApplicationContext`'s custom protocol resolvers. Somehow that feels incorrect, as its parent implementation may have returned an `UrlResource` as well, for example.  # Workaround  I realize now that I can circumvent the problem by setting a new `DefaultResourceLoader` with the `GenericApplicationContext` (not `ConfigurableApplicationContext` unfortunately) from within the initializer and register my custom protocol resolver onto that, as then this resource loader is supposedly kept in the delegation chain:  ```java public class ResourceLoaderInitializer implements ApplicationContextInitializer&lt;GenericApplicationContext&gt; {  @Override public void initialize(GenericApplicationContext context) { DefaultResourceLoader resourceLoader = new DefaultResourceLoader(); resourceLoader.addProtocolResolver(...); context.setResourceLoader(resourceLoader); }  } ``` This potentially introduces another problem however, in that an `AbstractApplicationContext` registers itself as `ResourceLoader` in the main `BeanFactory` and this registration is not reset when a custom resourceLoader is assigned, therefore DI of `ResourceLoader` will continue to resolve the `ApplicationContext` itself. I need to file an issue with Spring Context for this, as this is not a Spring Boot problem.  _@snicoll I am indeed the one who asked you about this at Spring I/O 😃 Only now did I get around to investigate some more and file this report._</body>
		<created>2017-05-26 22:05:14</created>
		<closed>2017-06-06 14:04:53</closed>
	</bug>
	<bug>
		<id>9295</id>
		<title>Clear configurationProperty from context during bind</title>
		<body>Currently the `bindProperty` sets it, but if we get an Exception from the `JavaBeanBinder`, it uses the old value in the `BindException`</body>
		<created>2017-05-23 23:39:19</created>
		<closed>2017-05-24 18:02:57</closed>
	</bug>
	<bug>
		<id>9290</id>
		<title>Changes in bindings cause exception due to unsupported method in collection</title>
		<body>Hello everybody,  I just noticed a changed behavior in bindings. The following code works in Spring Boot 1.5.3:  ```java @Component @ConfigurationProperties(prefix = "foobar") public class Foobar {      private Set&lt;String&gt; scope = Collections.emptySet();      public Set&lt;String&gt; getScope() {         return scope;     }      public void setScope(Collection&lt;String&gt; scope) {         this.scope = scope == null ? Collections                 .&lt;String&gt;emptySet() : new LinkedHashSet&lt;&gt;(scope);     } } ```  Using properties like  ``` foobar.scope = foo ```  The code in question is actually not my own, I found it in Spring Security OAuth, inside `BaseClientDetails` /cc @jgrandja but I wanted to provide a bare example (See [oauth-binding-problem.zip](https://github.com/spring-projects/spring-boot/files/1022254/oauth-binding-problem.zip))  Prior to Spring Boot 2.0.0.M1 setters seemed to be called and made it work. Now it tries to add to the default collection (which is immutable) and it fails with:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'foobar': Could not bind properties to Foobar (prefix=foobar, ignoreInvalidFields=false, ignoreUnknownFields=true); nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'foobar.scope' to java.util.Collection&lt;java.lang.String&gt; at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:340) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:305) // More... Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'foobar.scope' to java.util.Collection&lt;java.lang.String&gt; at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:225) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:200) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:298) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:306) // More... Caused by: java.lang.UnsupportedOperationException: null at java.util.AbstractCollection.add(AbstractCollection.java:262) at java.util.AbstractCollection.addAll(AbstractCollection.java:344) at org.springframework.boot.context.properties.bind.CollectionBinder.merge(CollectionBinder.java:55) at org.springframework.boot.context.properties.bind.CollectionBinder.merge(CollectionBinder.java:31) at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:57) at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:273) at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:400) at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:272) at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:244) at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:196) at org.springframework.boot.context.properties.bind.Binder.lambda$bindBean$4(Binder.java:298) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:70) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:59) at org.springframework.boot.context.properties.bind.JavaBeanBinder.bind(JavaBeanBinder.java:51) at org.springframework.boot.context.properties.bind.Binder.lambda$null$5(Binder.java:306)  ```  I'm not quite sure what you should do with the info, but I would guess that this can break a lot of projects, as it does with Spring Security OAuth atm.</body>
		<created>2017-05-23 13:26:53</created>
		<closed>2017-06-29 22:55:53</closed>
	</bug>
	<bug>
		<id>9282</id>
		<title>Context caching across packages is prevented by using `@AutoConfigure…` on a test class</title>
		<body>Context caching is not performed when two identically configured test classes are in different packages. For example:  ```java package com.example.foo;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner;  @RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureMockMvc public class FooTests {  @Test public void contextLoads() { }  } ```  ```java package com.example.bar;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner;  @RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureMockMvc public class BarTests {  @Test public void contextLoads() { }  } ```  The context will be loaded twice due to `AutoConfigurationPackages$Registrar` returning a `PackageImport` for the test class from `determineImports(AnnotationMetadata)`. The test classes are in different packages (`com.example.foo` and `com.example.bar`) so this is enough to prevent the cache keys from matching.   The problem was introduced in 1.5 as part of the changes made in https://github.com/spring-projects/spring-boot/commit/fa6a13859871b418d1e01fe3f8579b1bf8c5825e for #7953.</body>
		<created>2017-05-22 14:13:36</created>
		<closed>2017-07-24 20:02:43</closed>
	</bug>
	<bug>
		<id>9246</id>
		<title>Converting a Web environment to a Standard environment drops modifications made to the Web environment's property resolver</title>
		<body>Spring-boot version: All? Found on 1.5.3 and reproduced again on 2.0.0.BUILD-SNAPSHOT  ## Demo  https://github.com/EthanRubinson/SpringBootEnvConversionBugDemo  ## Summary  When a web environment is converted to a standard environment ([here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L495-L506)) only the active profiles and the property sources are copied to the new environment. Any modifications that may have been made to the original environment's propertyResolver (the conversion-service, placeholder-prefix, value-separator, or any other modifiable characteristic exposed via ConfigurablePropertyResolver.class) are not copied over.  This is a problem if a component is listening on the ApplicationEnvironmentPreparedEvent and then sets a custom ConversionService. Immediately after all of these listeners are executed ([here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L360)), the web environment is converted to a standard environment and the changes are dropped ([here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java#L364)). </body>
		<created>2017-05-16 21:08:16</created>
		<closed>2017-06-07 09:41:37</closed>
	</bug>
	<bug>
		<id>9232</id>
		<title>Undertow initialises filters lazily so failures are only discovered when the first request is made</title>
		<body>By contrast:  - Jetty initialises the filter on startup and the failure causes the app to fail to start - Tomcat initialises the filter on startup and the failure leaves the web part of the application in a broken state (#9095 will make it behave like Jetty)  This issue is proposing that we also make Undertow behave like Jetty. We can do so by enabling eager filter init on the `DeploymentInfo`. We might want to expose a `server.undertow.eager-filter-init` to allow people to switch back easily (or could just use an `UndertowDeploymentInfoCustomizer`).</body>
		<created>2017-05-15 12:38:22</created>
		<closed>2017-05-22 16:01:49</closed>
	</bug>
	<bug>
		<id>9218</id>
		<title>Liquibase update doesn't close connections, when web application keeps running</title>
		<body>Given I have web application and enable liquibase updates with `liquibase.enabled=true`. The application connects to Oracle db. Let's say I have 2 users/schemas, one for deployment, second one for the application: - appdeploy - appuser  Application properties look like: - liquibase.url=jdbc:oracle:thin:@localhost:1521:XE - liquibase.user=appdeploy - liquibase.password=appdeploy - spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE - spring.datasource.username=appuser - spring.datasource.password=appuser  When I boot up the application (whereas liquibase update is executed) and I try to `DROP USER appdeploy CASCADE; `  Then I get `ORA-01940: cannot drop a user that is currently connected` what indicates web application didn't release db connections </body>
		<created>2017-05-12 23:17:13</created>
		<closed>2017-05-15 16:13:01</closed>
	</bug>
	<bug>
		<id>9210</id>
		<title>Dependency management for Netty is incomplete</title>
		<body>Netty's bom is missing dependency management for its three `netty-transport-native-*` modules. See https://github.com/netty/netty/issues/6738 for details. As a result, `reactor-netty` is pulling in a mixture of Netty 4.1.9 and 4.1.11.</body>
		<created>2017-05-12 13:03:12</created>
		<closed>2017-05-12 13:13:23</closed>
	</bug>
	<bug>
		<id>9209</id>
		<title>Cannot bind to map where value type has a constructor that accepts a string</title>
		<body>Here's a test that fails (`MultipleJGitEnvironmentRepository` is in spring-cloud-config-server):  ```java @RunWith(SpringRunner.class) @SpringBootTest(classes = TestConfiguration.class, properties = { "spring.cloud.config.server.git.uri=https://github.com/scratches/config-repo", "spring.cloud.config.server.git.repos[test1].pattern=test*" }) public class RepoBinderTests {  @Autowired private MultipleJGitEnvironmentRepository repo;  @Test public void bound() { assertThat(repo.getRepos().keySet()).contains("test1"); assertThat(repo.getRepos().get("test1").getPattern()).contains("test*"); }  @EnableConfigurationProperties @SpringBootConfiguration public static class TestConfiguration { @Bean public MultipleJGitEnvironmentRepository repos( ConfigurableEnvironment environment) { return new MultipleJGitEnvironmentRepository(environment); } }  } ```  I can't figure out why, but the map keys are parsed as "test1.pattern" (not "test1").  This test (self-contained and apparently identical expect for the class names) passes:  ```java @RunWith(SpringRunner.class) @SpringBootTest(classes = TestConfiguration.class, properties = { "spring.cloud.config.server.git.uri=Andy", "spring.cloud.config.server.git.repos[test1].pattern=test*" }) public class BinderTests {  @Autowired private TestProperties repo;  @Test public void bound() { assertThat(repo.getRepos().keySet()).contains("test1"); assertThat(repo.getRepos().get("test1").getPattern()).contains("test*"); }  @EnableConfigurationProperties @SpringBootConfiguration public static class TestConfiguration { @Bean public TestProperties testProperties(ConfigurableEnvironment environment) { return new TestProperties(environment); } }  @ConfigurationProperties("spring.cloud.config.server.git") public static class TestProperties { private String uri; private Map&lt;String, Foo&gt; repos = new LinkedHashMap&lt;&gt;();  public TestProperties(ConfigurableEnvironment environment) { }  public Map&lt;String, Foo&gt; getRepos() { return repos; }  public void setRepos(Map&lt;String, Foo&gt; repos) { this.repos = repos; }  public String getUri() { return uri; }  public void setUri(String uri) { this.uri = uri; }  public static class Foo { private String[] pattern = new String[0];  public Foo() { }  public String[] getPattern() { return pattern; }  public void setPattern(String[] pattern) { this.pattern = pattern; }  @Override public String toString() { return Arrays.asList(pattern).toString(); } } }  } ```</body>
		<created>2017-05-12 12:46:05</created>
		<closed>2017-05-17 23:00:39</closed>
	</bug>
	<bug>
		<id>9161</id>
		<title>A web app that runs with spring.main.web-application-type=none should start up and doesn't</title>
		<body>A web app that runs with spring.main.web-application-type=none should start up and doesn't  Sample application can be found here: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-flyway  Steps to reproduce: - Add spring.main.web-application-type=none to application properties: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-samples/spring-boot-sample-flyway/src/main/resources/application.properties - Add `CREATE SEQUENCE hibernate_sequence;` to V1__init.sql (probably because of this issue: https://github.com/spring-projects/spring-boot/issues/7612) - Run the application  It fails to start because of:  &gt; Caused by: java.lang.IllegalStateException:  &gt; WebApplicationObjectSupport instance [ResourceHttpRequestHandler [locations=[class path resource [META-INF/resources/webjars/]], resolvers=[org.springframework.web.servlet.resource.PathResourceResolver@12d40609]]]  &gt; does not run in a WebApplicationContext but in: org.springframework.context.annotation.AnnotationConfigApplicationContext@27ae2fd0:  &gt; startup date [Thu May 11 11:54:14 CEST 2017]; root of context hierarchy   &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it. --&gt;  </body>
		<created>2017-05-11 09:57:49</created>
		<closed>2017-05-11 15:42:49</closed>
	</bug>
	<bug>
		<id>9160</id>
		<title>ConfigurationProperties not rebindable at runtime</title>
		<body>This is a problem for Spring Cloud Context (with `@RefreshScope` in particular). At first I thought it was because the `ConfigurationPropertiesBindingPostProcessor` doesn't use the ambient `Environment`, so if it changes there's a chance it made a copy of something and hasn't updated it.   Here's a test that fails with Spring Boot 2.0.0 and passes with 1.5.3:  ```java @RunWith(SpringRunner.class) @SpringBootTest("test.name=Andy") public class RefreshApplicationTests {  @Autowired private TestProperties properties; @Autowired private ConfigurationPropertiesBindingPostProcessor processor; @Autowired private ConfigurableEnvironment environment;  @Test public void liveRebind() { assertThat(properties.getName()).isEqualTo("Andy"); EnvironmentTestUtils.addEnvironment(environment, "test.name=Dave"); assertThat(properties.getName()).isEqualTo("Andy"); processor.postProcessBeforeInitialization(properties, "testProperties"); assertThat(properties.getName()).isEqualTo("Dave"); }  @ConfigurationProperties("test") @TestConfiguration public static class TestProperties { private String name;  public String getName() { return name; }  public void setName(String name) { this.name = name; } }  } ``` </body>
		<created>2017-05-11 09:23:44</created>
		<closed>2017-05-16 05:57:40</closed>
	</bug>
	<bug>
		<id>9146</id>
		<title>Devtools restart does not work with reactor-netty</title>
		<body>A WebFlux app using netty can lead to "ReactiveWebServerApplicationContext has been closed already"  ``` 2017-05-10 09:07:49.899 ERROR 14583 --- [ctor-http-nio-5] o.s.w.s.adapter.HttpWebHandlerAdapter    : Failed to handle request  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Cannot resolve reference to bean 'reactiveMongoTemplate' while setting bean property 'reactiveMongoOperations'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties': Initialization of bean failed; nested exception is java.lang.IllegalStateException: org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext@426027f3 has been closed already at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1604) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1349) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:574) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:491) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1] at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:250) ~[spring-beans-5.0.0.RC1.jar:5.0.0.RC1]  ```</body>
		<created>2017-05-10 07:11:25</created>
		<closed>2018-08-16 08:29:20</closed>
	</bug>
	<bug>
		<id>9141</id>
		<title>Default Atomikos properties are ignored, at least spring.jta.atomikos.properties.threaded-two-phase-commit=true</title>
		<body>MyApp.java  ``` package my.app; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class MyApp { public static void main(String[] args) throws Exception { SpringApplication.run(MyApp.class, args); } } ```  application.properties ``` spring.datasource.url=jdbc:postgresql://localhost:5432/abc spring.datasource.username=user spring.datasource.password=password ```  pom.xml  ``` &lt;project &gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.3.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;delete-me4&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jta-atomikos&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.postgresql&lt;/groupId&gt; &lt;artifactId&gt;postgresql&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; ```  When I start application, I get **com.atomikos.icatch.threaded_2pc = false:**  &gt; 2017-05-09 13:38:45.633  INFO 11436 --- [           main] c.a.i.c.i.AbstractUserTransactionService : USING core version: 3.9.3 2017-05-09 13:38:45.633  INFO 11436 --- [           main] c.a.i.c.i.AbstractUserTransactionService : USING com.atomikos.icatch.automatic_resource_registration = true 2017-05-09 13:38:45.633  INFO 11436 --- [           main] c.a.i.c.i.AbstractUserTransactionService : USING com.atomikos.icatch.client_demarcation = false 2017-05-09 13:38:45.633  INFO 11436 --- [           main] c.a.i.c.i.AbstractUserTransactionService : USING com.atomikos.icatch.threaded_2pc = false  According to http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties I expect **com.atomikos.icatch.threaded_2pc = true:**  If I modify `appliaction.properties` and append line 4 `spring.jta.atomikos.properties.threaded-two-phase-commit=true` I got  &gt; 2017-05-09 13:51:08.344  INFO 2244 --- [           main] c.a.i.c.i.AbstractUserTransactionService : USING com.atomikos.icatch.serial_jta_transactions = true  But I should **NOT** add line 4 because it is a default</body>
		<created>2017-05-09 11:56:26</created>
		<closed>2017-05-22 13:46:47</closed>
	</bug>
	<bug>
		<id>9135</id>
		<title>Latest spring-boot-gradle-plugin breaks Gradle maven-publish plugin</title>
		<body>After upgrading to Boot 1.5.3, all our projects are now failing with the following error message:  &gt; Error:Cannot configure the 'publishing' extension after it has been accessed.  There is some discussion about this error [here](https://discuss.gradle.org/t/apply-maven-publish-plugin-from-init-script/2460) and on [SO](http://stackoverflow.com/questions/36079404/errorcannot-configure-the-publishing-extension-after-it-has-been-accessed). Part of the problem is that the Gradle team is "incubating" the publishing plugin for the last 3-4 years. That said, the previous versions of Spring Boot plugin didn't trigger this error and now it does, leaving us dead in the water.  Here's a Gradle file that can be used to reproduce this issue. ``` buildscript { ext { springBootVersion = '1.5.3.RELEASE' } repositories { jcenter() } dependencies { classpath( "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" ) } }  apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'org.springframework.boot'  version = '0.0.1-SNAPSHOT' sourceCompatibility = 1.8  repositories { mavenCentral() }   ext { springCloudVersion = 'Dalston.RELEASE' artifactoryUrl = 'http://doesnotexist' }  dependencies { testCompile('org.springframework.boot:spring-boot-starter-test') }  dependencyManagement { imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" } }  apply plugin: 'maven-publish'  project.publishing.publications { mavenJava(MavenPublication) { from components.java } }  def isSnapshot = project.version.toString().toLowerCase().contains('snapshot') logger.info("Publishing project version: ${project.version}") def artifactoryUrl = "${artifactoryUrl}/${isSnapshot ? 'libs-snapshot-local' : 'libs-release-local'}"  project.publishing.repositories { maven { credentials { username "whatever" password "shhh" } url "${artifactoryUrl}" } } ```</body>
		<created>2017-05-08 22:26:09</created>
		<closed>2017-06-05 10:16:04</closed>
	</bug>
	<bug>
		<id>9079</id>
		<title>Unable to get to actuator `/env` when using Spring Boot 1.5.3.RELEASE with SCS 1.3</title>
		<body>I am using Spring Boot version `1.5.3.RELEASE` with Spring Cloud Services `1.3.x` and Spring Cloud `Camden.SR6`. After deploying the app to Cloud Foundry, when I access the `/env` endpoint, I get the following error :  `No converter found capable of converting from type [java.util.LinkedHashMap&lt;?, ?&gt;] to type [java.lang.String] `  This issue does NOT happen with 1.5.2.RELEASE  Full stack trace :  ``` 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT 2017-05-03 14:41:45.120 ERROR 14 --- [io-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.LinkedHashMap&lt;?, ?&gt;] to type [java.lang.String]] with root cause 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.LinkedHashMap&lt;?, ?&gt;] to type [java.lang.String] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:324) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:206) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:187) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.env.AbstractPropertyResolver.convertValueIfNecessary(AbstractPropertyResolver.java:266) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:86) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:61) ~[spring-core-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.endpoint.EnvironmentEndpoint.invoke(EnvironmentEndpoint.java:72) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.endpoint.EnvironmentEndpoint.invoke(EnvironmentEndpoint.java:43) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointMvcAdapter.invoke(AbstractEndpointMvcAdapter.java:56) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:42) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:208) ~[spring-security-web-4.2.2.RELEASE.jar!/:4.2.2.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.2.RELEASE.jar!/:4.2.2.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) ~[spring-boot-actuator-1.5.3.RELEASE.jar!/:1.5.3.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.8.RELEASE.jar!/:4.3.8.RELEASE] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:677) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.14.jar!/:8.5.14] 2017-05-03T09:41:45.12-0500 [APP/PROC/WEB/0] OUT at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121] ``` Here is the link to the sample repo: [Cook repo](https://github.com/pivotalservices/scs-config-client-demo)  The `pom` file and `build.gradle` files from the above repo currently is using the working version of `1.5.2.RELEASE`.  This issue can be replicated by updating Boot dependencies to `1.5.3.RELEASE` </body>
		<created>2017-05-03 15:28:33</created>
		<closed>2017-05-04 21:02:20</closed>
	</bug>
	<bug>
		<id>9054</id>
		<title>Auto-configuration report not displayed if EmbeddedServletContainerFactory fails</title>
		<body>In the process of trying to replace Tomcat with Undertow in a new application, I copied and pasted the standard Maven exclusion and Undertow starter dependency to my POM. My application is failing to launch, however, with this error:  ``` org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean. at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:536) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at com.artsquare.workshop.launcher.WorkshopLauncher.main(WorkshopLauncher.groovy:13) [classes/:na] Caused by: org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean. at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:189) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:162) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] ... 8 common frames omitted ```  I figured this was probably some sort of classpath bug on my part, so I added `--debug` to turn on the auto-configuration report--but it does not display in this case.  Expected behavior: I see the report (and can use it to trace the conditions on the embedded servlet factories).  Actual behavior: The report is not printed when the application bails at the initial context refresh.</body>
		<created>2017-05-01 17:54:57</created>
		<closed>2017-06-06 14:00:37</closed>
	</bug>
	<bug>
		<id>9053</id>
		<title>SpringApplicationBuilder.setSources no longer works with bound sources</title>
		<body>The change in #8910 beans that `SpringApplicationBuilder.setSources` is replaced by bound sources. It's more likely that the build is looking to change the primary sources.</body>
		<created>2017-05-01 16:05:46</created>
		<closed>2017-05-02 07:15:42</closed>
	</bug>
	<bug>
		<id>9043</id>
		<title>Spock 1.0 currently in dependency management has problems running Spring Boot tests</title>
		<body>Spock 1.0 throws errors when testing integration tests with Spring Boot, 1.1 has fixed this. The dependency needs to be upgraded. 1.1 is currently in RC stage, but having a dependency that has issues isn't that great either. </body>
		<created>2017-04-29 06:32:42</created>
		<closed>2017-05-04 08:35:55</closed>
	</bug>
	<bug>
		<id>9014</id>
		<title>TomcatEmbeddedWebappClassLoader.getResources() returns 2 entries for a single resource in a fat war</title>
		<body>I have a Spring Boot 1.5.3 application, packaged as an executable WAR with embedded Tomcat.  When I call [`tccl.getResources()`](https://github.com/jerrinot/booottest/blob/master/src/main/java/info/jerrinot/demo/Controller.java) then I am getting 2 entries for a [single physical resource](https://github.com/jerrinot/booottest/blob/master/src/main/resources/myResource).   Here is a reproducer: https://github.com/jerrinot/booottest  When I build it &amp; execute it: ``` mvn clean install java -jar target/boottest-0.0.1-SNAPSHOT.war ``` and access http://localhost:8080/ then I see this in the sysout: ``` jar:file:/home/jara/devel/tmp/github/boottest/target/boottest-0.0.1-SNAPSHOT.war!/WEB-INF/classes!/myResource war:file:/home/jara/devel/tmp/github/boottest/target/boottest-0.0.1-SNAPSHOT.war*/WEB-INF/classes/myResource ```  This appears as a bug - a single physical resource should not produce 2 entries with different URLs.   It's working fine when I change the packaging from WAR to JAR.   EDIT: Obviously the affected Spring Boot version is 1.5.3, not 1.5.6 :)</body>
		<created>2017-04-27 15:01:55</created>
		<closed>2017-07-21 21:07:02</closed>
	</bug>
	<bug>
		<id>9010</id>
		<title>Incomplete Jetty dependency management can lead to a mixture of versions being used</title>
		<body>http://stackoverflow.com/questions/43639508/nosuchmethoderror-org-eclipse-jetty-websocket-server-websocketserverfactory-in/43642662#43642662</body>
		<created>2017-04-26 19:12:55</created>
		<closed>2017-05-04 14:38:19</closed>
	</bug>
	<bug>
		<id>9009</id>
		<title>Dependency management for Jersey does not cover all Jersey modules used by the starter</title>
		<body>The Jersey starter has transitive dependencies on some Jersey modules that are not covered by dependency management. This means that there's a risk of the starter's Jersey dependencies having a mixture of versions.  Dependency management for the following modules is currently missing:  - `org.glassfish.jersey.bundles.repackaged:jersey-guava` - `org.glassfish.jersey.core:jersey-client` - `org.glassfish.jersey.core:jersey-common` - `org.glassfish.jersey.ext:jersey-entity-filtering` - `org.glassfish.jersey.media:jersey-media-jaxb`</body>
		<created>2017-04-26 13:39:25</created>
		<closed>2017-05-03 10:22:08</closed>
	</bug>
	<bug>
		<id>8984</id>
		<title>CachePublicMetrics does not support TransactionAwareCacheDecorator</title>
		<body>`CacheManager`s that extend from `AbstractTransactionSupportingCacheManager`, for example `JCacheCacheManager`, support transaction awareness by wrapping the `Cache` in a `TransactionAwareCacheDecorator`. If enabled, the cache statistics provided by the Spring Boot Actuator project cease to work.  The problem is, that `CachePublicMetrics#getCacheStatistics` search for a suitable `CacheStatisticsProvider` by comparing the runtime type of the `Cache` against the generic type of all registered `CacheStatisticsProvider`s. This, of course, doesn't work if the Cache is wrapped in a completely different type.  As a workaround, I added a new `AbstractJmxCacheStatisticsProvider&lt;TransactionAwareCacheDecorator&gt;` that contains the same implementation as `JCacheCacheStatisticsProvider` (because we use `JCacheCache`s).  We use Spring Boot 1.4.1, but I quickly checked the latest version on Github, and there doesn't seem to be any changes in this area.  I guess `CachePublicMetrics#getCacheStatistics` should first unwrap `TransactionAwareCacheDecorator` before trying to lookup a stats provider.</body>
		<created>2017-04-24 16:40:58</created>
		<closed>2017-05-22 09:07:48</closed>
	</bug>
	<bug>
		<id>8972</id>
		<title>bootWar fails if there's a src/main/webapp/org directory</title>
		<body>``` org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':bootWar'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:84)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:55)         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:62)         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88)         at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:46)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:51)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:236)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:228)         at org.gradle.internal.Transformers$4.transform(Transformers.java:169)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:61)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:228)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:215)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:77)         at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:58)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:32)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:113)         at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23)         at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43)         at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)         at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30)         at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:256)         at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:253)         at org.gradle.internal.Transformers$4.transform(Transformers.java:169)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:56)         at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:175)         at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:119)         at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:102)         at org.gradle.launcher.exec.GradleBuildController.run(GradleBuildController.java:71)         at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)         at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)         at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:75)         at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:49)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:49)         at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:31)         at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:47)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)         at org.gradle.util.Swapper.swap(Swapper.java:38)         at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)         at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)         at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)         at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)         at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)         at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46) Caused by: org.gradle.api.GradleException: Failed to add file '/Users/awilkinson/dev/temp/boot-war-org-resource-problem/src/main/webapp/org' to /Users/awilkinson/dev/temp/boot-war-org-resource-problem/build/libs/boot-war-org-resource-problem.war         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.processFile(BootZipCopyAction.java:206)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator$1.maybeVisit(NormalizingCopyActionDecorator.java:98)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator$1.process(NormalizingCopyActionDecorator.java:75)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.execute(BootZipCopyAction.java:91)         at org.gradle.api.internal.file.copy.NormalizingCopyActionDecorator.execute(NormalizingCopyActionDecorator.java:53)         at org.gradle.api.internal.file.copy.DuplicateHandlingCopyActionDecorator.execute(DuplicateHandlingCopyActionDecorator.java:42)         at org.gradle.api.internal.file.copy.CopyActionExecuter.execute(CopyActionExecuter.java:40)         at org.gradle.api.tasks.AbstractCopyTask.copy(AbstractCopyTask.java:179)         at org.springframework.boot.gradle.tasks.bundling.BootWar.copy(BootWar.java:61)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.doExecute(DefaultTaskClassInfoStore.java:141)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134)         at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:123)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:632)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:615)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:95)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:76)         ... 70 more Caused by: java.util.zip.ZipException: duplicate entry: org/         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.createDirectory(BootZipCopyAction.java:215)         at org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction$ZipStreamAction.processFile(BootZipCopyAction.java:199)         ... 86 more ```</body>
		<created>2017-04-21 19:22:18</created>
		<closed>2017-04-21 20:04:33</closed>
	</bug>
	<bug>
		<id>8946</id>
		<title>Spring CLI quiet option should suppress "resolving dependencies"</title>
		<body>We have a test that runs with `--quiet` but can fail on a slow internet connection due to the "resolving dependencies..." message.</body>
		<created>2017-04-20 05:12:16</created>
		<closed>2017-04-20 05:58:23</closed>
	</bug>
	<bug>
		<id>8926</id>
		<title>Let Hibernate configure the transaction manager on WebSphere</title>
		<body>When using Spring Boot 1.5.2 in Websphere 8.5.5.10, Sping Data Jpa autoconfiguration (i.e. class `HibernateJpaAutoConfiguration`) detects the WebSphere container and attempts to configure "JtaPlatformManager" using one of the following classes : `org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform` and `org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform`.   The latter is no longer existing in Hibernate 5 (seems to be cleaned out), so there is not point in referring to it in Spring Boot autoconfiguration. The former seems to be an incomplete implementation (many methods raise `UnsupportedOperationException`). So when a transaction is rolled back, e.g. because of a bean validation constraint violation, an `UnsupportedOperationException` is raised instead of  `ConstraintViolationException`.  A workaround is to replace the WebSphereExtendedJtaPlatform with `org.hibernate.service.jta.platform.internal.WebSphereJtaPlatform`, by the means of custom JPA properties (spring.jpa.properties.*) but I am not sure if it has side effects</body>
		<created>2017-04-18 14:52:27</created>
		<closed>2018-08-24 08:50:07</closed>
	</bug>
	<bug>
		<id>8917</id>
		<title>Jetty does not fail to start when its thread pool is misconfigured</title>
		<body>Dear Spring Boot maintainers,   I think I found a bug in the `JettyWebSocketContainerCustomizer` configuration  I wrongly configured `jetty.threadPool.maxThreads` to a value which is less than optimal which should throw an error and not started the server at all. But Spring Boot ignores the error from Jetty and starts the server.  Then when the request comes , TCP/IP connection succeeds but there is no response.  Initially I thought it is Jetty issue but when I run Jetty separately and configure the same values ./etc/jetty.xml , Jetty fails to start the server  So my conclusion is Spring Boot ignores the underlying Jetty exception and starts the server (which could cause serious consequences if one deploys the code where we don't have any control over number of cores)  More detailed in my original ticket here to Jetty team  https://github.com/eclipse/jetty.project/issues/1464#issuecomment-293694115</body>
		<created>2017-04-18 00:36:18</created>
		<closed>2017-05-23 20:58:33</closed>
	</bug>
	<bug>
		<id>8903</id>
		<title>spring.data.cassandra.schema-action does not support relaxed value</title>
		<body>The property is an `Enum` and we fetch it from the environment ourselves. But we don't apply our usual relaxed rules so it must be named exactly like the source code.  </body>
		<created>2017-04-14 11:37:25</created>
		<closed>2017-04-14 14:06:25</closed>
	</bug>
	<bug>
		<id>8902</id>
		<title>Inconsistent binding from environment varaibles to maps</title>
		<body>I've noticed an inconsistency in properties binding from an ENV variable and property defined in `application.properties`  Consider following example:  ```java @ConfigurationProperties("com.test") public class Props {     private Map&lt;String, Map&lt;String, String&gt;&gt; property; } ```  `application.properties` **&lt;- binding works correctly** ``` com.test.property.foo.bar=value ```  Environment variable **&lt;- binding fails** ``` export COM_TEST_PROPERTY_CCC_DDD=VALUE ```  I would expect that the same binding behavior for an externalized configuration. Any idea how to resolve this issue using Spring Boot 1.5.2?   --- I am using Spring Boot 1.5.2, Linux Mint 18.1, Java 8 ("1.8.0_121") Demo application available: https://github.com/peterjurkovic/spring-boot-binding-demo</body>
		<created>2017-04-14 09:14:57</created>
		<closed>2017-04-27 21:35:47</closed>
	</bug>
	<bug>
		<id>8887</id>
		<title>PersistenceExceptionTranslationPostProcessor does not respect spring.aop.proxy-target-class</title>
		<body>https://github.com/spring-projects/spring-boot/issues/8869#issue-220401939</body>
		<created>2017-04-12 07:18:38</created>
		<closed>2017-04-12 08:56:16</closed>
	</bug>
	<bug>
		<id>8886</id>
		<title>Duplicate properties in the meta-data with lombok</title>
		<body>Get more than one statement in META-INF/spring-configuration-metadata.json when Annotate ConfigurationProperties class with lombok.Getter lombok.Setter  Here is a test project https://github.com/zhanhb/configuration-processor-lombok-test &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2017-04-12 06:36:21</created>
		<closed>2017-05-12 14:51:34</closed>
	</bug>
	<bug>
		<id>8883</id>
		<title>Actuator trace parameters are empty when running in embedded Tomcat</title>
		<body>When accessing the Actuator `/trace` endpoint, when the `management.trace.include` property includes 'parameters', I expect request parameters to be shown in the JSON response. Instead, the parameters JSON element is always empty.  This appears to be due to a setting in the Embedded Tomcat server. In `tomcat-embed-core-8.5.11.jar`, the `org.apache.catalina.connector.Request` class, `recycle()` method contains:  ```         if (Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES) {             parameterMap = new ParameterMap&lt;&gt;();         } else {             parameterMap.setLocked(false);             parameterMap.clear();         } ```  If the else clause is executed (as it is by default), it uses a single `ParameterMap` instance for all calls to `getParameterMap()`. When a request is cleared down, the parameters are cleared using `parameterMap.clear()`. This instance of `ParameterMap` is added to the Trace object by the `WebRequestTraceFilter`. When the Request calls the `clear()` method is called on the `ParameterMap`, it clears out the instance held by the Trace object, resulting in an empty parameter list when /trace is invoked.  A workaround is to call `System.setProperty("org.apache.catalina.connector.RECYCLE_FACADES", "true");` in the `@SpringBootApplication` class, before `SpringApplication.run` is called.This makes the `Request.recycle()` method create a new instance of `ParameterMap`. A suggested solution would be to deep copy the `ParameterMap` in `WebRequestTraceFilter` before creating the Trace object.  Found in Spring Boot version 1.5.2.RELEASE Demonstrated in https://github.com/hotblac/actuator-demo  Steps to reproduce: 1. Build and run the actuator-demo project (mvn clean install, java -Dserver.port=18080 -jar target/actuator-demo-0.0.1-SNAPSHOT.jar) 2. Hit the simple endpoint: http://localhost:18080/simple?param1=value1&amp;param2=value2 3. Request the actuator trace: http://localhost:18080/trace  Expected: Response is ```json [   {     "timestamp": "2017-04-11 19:40:50",     "info": {       "method": "GET",       "path": "/simple",       "headers": {},       "parameters": {         "param1": [           "value1"         ],         "param2": [           "value2"         ]  ``` Actual: Response is ```json [   {     "timestamp": "2017-04-11 19:39:03",     "info": {       "method": "GET",       "path": "/simple",       "headers": {},       "parameters": {}     }   } ] ```</body>
		<created>2017-04-11 20:01:39</created>
		<closed>2017-04-11 22:57:43</closed>
	</bug>
	<bug>
		<id>8877</id>
		<title>Batch auto-configuration requires JPA on the classpath</title>
		<body>Our auto-configuration for Spring Batch requires JPA on the classpath and could perfectly work without it. The current workaround for an app that only uses JDBC is to add the JPA api on the classpath.  `BasicBatchConfigurer` should have a `JpaBatchConfigurer` that takes the `EntityManagerFactory` and does the right thing with it. That way you could extend from the base one when JPA isn't available.</body>
		<created>2017-04-10 12:11:14</created>
		<closed>2017-04-12 08:16:04</closed>
	</bug>
	<bug>
		<id>8871</id>
		<title>org.springframework.boot.loader.jar.JarFile doesn't actually close when close() is called</title>
		<body>Hi! I was having trouble with some JUnit test cases where the tests would fail to clean up their temporary directories after running. I tracked down the issue to three things:  1) There doesn't appear to be a way to close a JarFileArchive 2) org.springframework.boot.loader.LaunchedURLClassLoader doesn't close open files when close() is called 3) Even if I could close a JarFileArchive, it contains an instance of org.springframework.boot.loader.jar.JarFile. All instances of org.springframework.boot.loader.jar.JarFile fail to close properly when close() is called on them.  This issue describes item (3). Please let me know if more information is needed.  # Description The JarFile class in org.springframework.boot.loader.jar doesn't close correctly. I verified this by pausing execution after closing the file and checking if the file handle was closed. It was not. With a regular java.util.jar.JarFile, calling close() immediately closes the OS-level file handle.  # Analysis I suspect this is because org.springframework.boot.loader.jar.JarFile doesn't call super.close(). The offending code: ``` @Override public void close() throws IOException {     this.rootFile.close(); } ```  # Failing test case Here is a JUnit test case that fails on my system. I figure out if the JarFile is closed by trying to delete it's containing folder. On Windows, this will fail if the JarFile is still open.   ``` import org.junit.Rule; import org.junit.Test; import org.junit.rules.TemporaryFolder; import org.springframework.boot.loader.jar.JarFile; import org.springframework.boot.loader.tools.JarWriter;  import java.io.File; import java.io.IOException;  import static org.junit.Assert.assertFalse;  public class Example {     @Rule     public TemporaryFolder tmpDir = new TemporaryFolder();      @Test     public void testJarFileCloses() throws IOException {         File tmp2 = tmpDir.newFile();         JarWriter ok = new JarWriter(tmp2);         ok.close();          java.util.jar.JarFile jf2 = new java.util.jar.JarFile(tmp2);         jf2.close();          File tmp = tmpDir.newFile();         JarWriter jarWriter = new JarWriter(tmp);         jarWriter.close();          JarFile jf = new JarFile(tmp);         jf.close();          tmpDir.delete();         assertFalse("tmpDir.delete() should be able to delete the directory", tmpDir.getRoot().exists());     }  } ```  # System information ## java -version ``` java version "1.8.0_121" Java(TM) SE Runtime Environment (build 1.8.0_121-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode) ```  ## IDE information ``` IntelliJ IDEA 2017.1 Build #IU-171.3780.107, built on March 22, 2017 Licensed to Kevin Perkins Subscription is active until August 25, 2017 JRE: 1.8.0_112-release-736-b13 amd64 JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o Windows 10 10.0 ```  ## OS Version Information ``` OS NameMicrosoft Windows 10 Pro Version10.0.14393 Build 14393 System Typex64-based PC ```</body>
		<created>2017-04-08 22:19:30</created>
		<closed>2017-05-23 19:45:15</closed>
	</bug>
	<bug>
		<id>8869</id>
		<title>MethodValidationPostProcessor does not respect spring.aop.proxy-target-class</title>
		<body>Similar to #8434 the `PersistenceExceptionTranslationPostProcessor` currently always sets `proxyTargetClass` to `true`.</body>
		<created>2017-04-08 14:08:19</created>
		<closed>2017-04-12 07:18:56</closed>
	</bug>
	<bug>
		<id>8842</id>
		<title>spring.freemarker.template-loader-path cannot be set as a List</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; Hi, I'm using spring boot 1.5.2.RELEASE in my project classpath. And i use freemarker templates to render my view. ``` spring:   freemarker:     request-context-attribute: request     cache: false     template-loader-path:       - classpath:/templates/view/       - classpath:/webapp/view/  ``` Above is the configuration of freemarker template But its not work. i debug the source code,and found out the reason about why it's not work.   ``` public class FreeMarkerTemplateAvailabilityProvider implements TemplateAvailabilityProvider { @Override public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) { if (ClassUtils.isPresent("freemarker.template.Configuration", classLoader)) { RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment, "spring.freemarker."); String loaderPath = resolver.getProperty("template-loader-path", FreeMarkerProperties.DEFAULT_TEMPLATE_LOADER_PATH); String prefix = resolver.getProperty("prefix", FreeMarkerProperties.DEFAULT_PREFIX); String suffix = resolver.getProperty("suffix", FreeMarkerProperties.DEFAULT_SUFFIX); return resourceLoader.getResource(loaderPath + prefix + view + suffix) .exists(); } return false; } } ``` above is the provider of freemarker template's  source code.  ```  resolver.getProperty("template-loader-path", FreeMarkerProperties.DEFAULT_TEMPLATE_LOADER_PATH);  ``` resover will get the property that named template-loader-path from RelaxedPropertyResolver,  but the property key-value were  'spring.freemarker.template-loader-path[0]=classpath:/templates/view/','spring.freemarker.template-loader-path[1]=classpath:/webapp/view/'  in my debug variables   so, loaderPath  will be set by default value of FreeMarkerProperties.DEFAULT_TEMPLATE_LOADER_PATH;  now i had to change the configuration to a string , so i think it's an issues</body>
		<created>2017-04-07 03:41:34</created>
		<closed>2017-04-10 12:46:24</closed>
	</bug>
	<bug>
		<id>8816</id>
		<title>Archives produced by bootJar and bootWar cannot be unpacked by CloudFoundry</title>
		<body>The loader classes are written to the jar without directory entries. This appears to make Go unable to unzip the archive. macOS's archive utility has a similar problem.</body>
		<created>2017-04-05 09:28:30</created>
		<closed>2017-04-05 12:09:34</closed>
	</bug>
	<bug>
		<id>8804</id>
		<title>Unable to bind nested properties with value from a non-enumerable property source </title>
		<body>Failing test case: https://github.com/mbhave/spring-boot/blob/7ddefad796218a0c371aa5a16fcde4c0c61d5964/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java#L361</body>
		<created>2017-04-03 20:51:52</created>
		<closed>2017-09-01 15:47:28</closed>
	</bug>
	<bug>
		<id>8789</id>
		<title>reactor-test module is imported with compile scope by spring-boot</title>
		<body>This is then bringing reactor-core as a transitive dependency for all projects unrelated to reactor.</body>
		<created>2017-03-31 15:24:08</created>
		<closed>2017-03-31 15:27:46</closed>
	</bug>
	<bug>
		<id>8788</id>
		<title>Welcome page forwards to the wrong location if static-path-pattern has been customized</title>
		<body>We forward to `index.html` which assumes that the static path pattern is `/**`. If it's been customised to `/foo/**` them we'll still forward to `index.html` and a 404 will result. We should avoid making this faulty forward.  There's an argument to be made that we should forward to `foo/index.html`. However, that makes things complicated when relative URLs in the `index.html` page are considered. As it's a forward rather than a redirect, the browser will resolve those URLs using `/` whereas they should be resolved using `/foo/`. We don't want to change it to a redirect so the safest option is to not set up the welcome page when the static path pattern has been customised.</body>
		<created>2017-03-31 15:18:14</created>
		<closed>2017-04-04 09:24:27</closed>
	</bug>
	<bug>
		<id>8771</id>
		<title>reactor-netty server doesn't restart with devtools</title>
		<body>When using devtools with `spring-boot-starter-webflux` and applying a change, the reactor netty server is restarted but the application is closed right after. Using `spring-boot-starter-tomcat` instead of reactor netty does have the right behavior, so this is probably linked to the way manage the daemon thread with the reactor netty server setup, to keep the application running.</body>
		<created>2017-03-29 15:03:04</created>
		<closed>2017-04-10 12:57:50</closed>
	</bug>
	<bug>
		<id>8765</id>
		<title>Getting metrics and loggers by name fails with a 406 if the name ends with an extension known to PathExtensionContentNegotiationStrategy</title>
		<body>When you try to get data about the level of the logger with the name: "com.aaa.cab" I get 406 response.  Request: ``` URL: GET http://localhost:8080/loggers/com.aaa.cab ```  Response: ```json {   "timestamp": 1490705058981,   "status": 406,   "error": "Not Acceptable",   "exception": "org.springframework.web.HttpMediaTypeNotAcceptableException",   "message": "Not Acceptable",   "path": "/customerservice/manage/loggers/com.nds.cab" } ```</body>
		<created>2017-03-28 13:25:33</created>
		<closed>2017-04-18 22:08:29</closed>
	</bug>
	<bug>
		<id>8702</id>
		<title>spring-boot-devtools executes SHUTDOWN on HSQLDB running as a separate server</title>
		<body>Using Spring Boot 1.3.8.RELEASE with `spring-boot-devtools` and a standalone HSQL in server-mode. A `SHUTDOWN` is sent to the database server whenever the application context is refreshed. After that, the database is not accessible any longer.</body>
		<created>2017-03-23 08:19:17</created>
		<closed>2017-04-07 12:55:43</closed>
	</bug>
	<bug>
		<id>8697</id>
		<title>TestRestTemplate replaces custom HttpClients</title>
		<body>**Spring-Boot version** 1.5.2.RELEASE  *Problem:* When apache httpclient jar is in the classpath, TestRestTemplate replaces any HttpClient set by the user in a RestTemplate. Alseo, since the field is final there's no way to change that, even with reflection. See this https://github.com/spring-projects/spring-boot/blob/master/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java#L127-L130.  In my case, I am building a client for mutual authentication and some headers. However, the same applications uses httpclient for other integrations, not only that, previous tests were written in RestAssured which also includes that dependency.  Is it possible to remove that validation, make it optional or just apply it if there's no `requestFactory` set?    </body>
		<created>2017-03-22 21:13:18</created>
		<closed>2018-02-16 11:30:49</closed>
	</bug>
	<bug>
		<id>8669</id>
		<title>spring-boot sets up org.jboss.logging.provider system property to slf4j, thus setting it so for entire vm in which glassfish is running, causing glassfish server to crash whenever any hibernate specific class is loaded.</title>
		<body>**Issue**  In versions v1.1.10.RELEASE and v1.2.0.RC2,  to address gh-1928 [[1](https://github.com/spring-projects/spring-boot/issues/1928)], `org.jboss.logger.provider` system property is being set in `LogbackLoggingSystem.java` [[2](https://github.com/spring-projects/spring-boot/blob/1.1.x/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java)] to `slf4j`.  **Bug Report**  From application server's context, this results in setting this system property for entire jvm thus causing glassfish to crash down when spring-boot sample application is deployed on glassfish [3]. corresponding glassfish issue is GLASSFISH-21641 [[4](https://java.net/jira/browse/GLASSFISH-21641)].  Since glassfish too uses hibernate validator and hibernate validator uses jboss logging [[5](http://docs.jboss.org/hibernate/orm/4.3/topical/html/logging/Logging.html)], setting this property to slf4j results in glassfish looking for sfl4j specific classes, for any other application deployed on glassfish or even for glassfish itself, which results in `java.lang.ClassNotFoundException` for `org.slf4j.LoggerFactory`, thus ultimately resulting in `java.lang.NoClassDefFoundError` while trying to load `org.hibernate.validator.internal.engine.ConfigurationImpl` class.  **Enhancement**  Since jboss logging supports `java.util.ServiceLoader` approach too for finding application specific logger [[5](http://docs.jboss.org/hibernate/orm/4.3/topical/html/logging/Logging.html)], ideally this should be preferred over setting system property which is global to entire vm thus impacting other applications too deployed on the same vm.  [1] https://github.com/spring-projects/spring-boot/issues/1928 [2] https://github.com/spring-projects/spring-boot/blob/1.1.x/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java [3] https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-deployment-test-glassfish/1.4.2.RELEASE [4] https://java.net/jira/browse/GLASSFISH-21641 [5] http://docs.jboss.org/hibernate/orm/4.3/topical/html/logging/Logging.html [6] http://stackoverflow.com/questions/7597925/scope-of-system-setproperty-in-tomcat/7598004#7598004</body>
		<created>2017-03-20 07:02:14</created>
		<closed>2017-05-03 12:32:13</closed>
	</bug>
	<bug>
		<id>8639</id>
		<title>Actuator /loggers endpoint: 'java.lang.IllegalArgumentException: EffectiveLevel must not be null'</title>
		<body>I'm using 1.5.2.RELEASE and configure logging using logback-spring.xml. When I go to the 'loggers' endpoint, I get:  Caused by: java.lang.IllegalArgumentException: EffectiveLevel must not be null at org.springframework.util.Assert.notNull(Assert.java:134) at org.springframework.boot.logging.LoggerConfiguration.&lt;init&gt;(LoggerConfiguration.java:45) at org.springframework.boot.logging.logback.LogbackLoggingSystem.getLoggerConfiguration(LogbackLoggingSystem.java:241) at org.springframework.boot.logging.logback.LogbackLoggingSystem.getLoggerConfigurations(LogbackLoggingSystem.java:218) at org.springframework.boot.actuate.endpoint.LoggersEndpoint.invoke(LoggersEndpoint.java:58) at org.springframework.boot.actuate.endpoint.LoggersEndpoint.invoke(LoggersEndpoint.java:40) at org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointMvcAdapter.invoke(AbstractEndpointMvcAdapter.java:56) at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:42) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ... 86 common frames omitted  (this is just the root cause)  Configuration:      &lt;?xml version="1.0" encoding="UTF-8"?&gt;          &lt;configuration&gt;         &lt;include resource="org/springframework/boot/logging/logback/defaults.xml"/&gt;         &lt;include resource="org/springframework/boot/logging/logback/console-appender.xml"/&gt;              &lt;logger name="com.my.package" level="ALL"/&gt;         &lt;logger name="org.hibernate.SQL" level="DEBUG"/&gt;              &lt;root level="INFO"&gt;             &lt;appender-ref ref="CONSOLE"/&gt;         &lt;/root&gt;     &lt;/configuration&gt;</body>
		<created>2017-03-15 21:00:00</created>
		<closed>2017-03-17 23:20:39</closed>
	</bug>
	<bug>
		<id>8623</id>
		<title>Both spring-boot-devtools and jna-platform [4.3.0,) in the classpath, the project fails to start</title>
		<body>Here is the line in jna-platform-4.3.0.jar/META-INF/MANIFEST.MF which cause the exception ```Class-Path: lib/jna.jar lib/test-classes/```  Here is the stack trace ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'classPathFileSystemWatcher' defined in class path resource [org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration$RestartConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher]: Factory method 'classPathFileSystemWatcher' threw exception; nested exception is java.lang.IllegalArgumentException: Folder 'F:\work\m2\repository\net\java\dev\jna\jna-platform\4.4.0\lib\test-classes' must exist and must be a directory at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE] at demo.Application.main(Application.java:34) [classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112] at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.2.RELEASE.jar:1.5.2.RELEASE] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher]: Factory method 'classPathFileSystemWatcher' threw exception; nested exception is java.lang.IllegalArgumentException: Folder 'F:\work\m2\repository\net\java\dev\jna\jna-platform\4.4.0\lib\test-classes' must exist and must be a directory at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] ... 23 common frames omitted Caused by: java.lang.IllegalArgumentException: Folder 'F:\work\m2\repository\net\java\dev\jna\jna-platform\4.4.0\lib\test-classes' must exist and must be a directory at org.springframework.util.Assert.isTrue(Assert.java:92) ~[spring-core-4.3.7.RELEASE.jar:4.3.7.RELEASE] at org.springframework.boot.devtools.filewatch.FileSystemWatcher.addSourceFolder(FileSystemWatcher.java:124) ~[spring-boot-devtools-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.devtools.filewatch.FileSystemWatcher.addSourceFolders(FileSystemWatcher.java:112) ~[spring-boot-devtools-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher.&lt;init&gt;(ClassPathFileSystemWatcher.java:63) ~[spring-boot-devtools-1.5.2.RELEASE.jar:1.5.2.RELEASE] at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration.classPathFileSystemWatcher(LocalDevToolsAutoConfiguration.java:119) ~[spring-boot-devtools-1.5.2.RELEASE.jar:1.5.2.RELEASE] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE] ... 24 common frames omitted ```</body>
		<created>2017-03-15 03:53:26</created>
		<closed>2017-04-04 11:30:58</closed>
	</bug>
	<bug>
		<id>8620</id>
		<title>Fix configuration property binding for certain list properties</title>
		<body>A few of the classes annotated with `@ConfigurationProperties` have `List` properties initialized with `Arrays.asList`. If the property is configured with a list of a different size, an `UnsupportedOperationException` is thrown. So far I found these in `JestProperties` and `NarayanaProperties`. It can be fixed by initializing the property with a `new ArrayList()`.  </body>
		<created>2017-03-14 23:35:59</created>
		<closed>2017-03-16 11:44:00</closed>
	</bug>
	<bug>
		<id>8602</id>
		<title>management.security.roles cannot be set to multiple roles containing commas</title>
		<body>Following on from issue #8314 if I attempt to set management.security.roles to an array using the config below I get an `UnsupportedOperationException` thrown from `java.util.AbstractList#add` for the second element  ``` management:   context-path: /management   security:     enabled: true     roles:     - CN=some-group,OU=somewhere,OU=in,OU=ldap,DC=example,DC=com     - CN=some-other-group,OU=somewhere,OU=in,OU=ldap,DC=example,DC=com ```  I have updated https://github.com/jonfreedman/spring-boot-management-demo to illustrate</body>
		<created>2017-03-14 09:56:12</created>
		<closed>2017-03-14 20:37:50</closed>
	</bug>
	<bug>
		<id>8584</id>
		<title>1.5.x cannot be deployed to the AppEngine because of Thread usage in OnClassCondition</title>
		<body>I tried to upgrade my Spring Boot 1.4.1 project to 1.5.2 and deploy it to Google AppEngine 1.9.50. Deployment fails with the following exception:  ``` Nested in org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [com....config.AppConfig]; nested exception is java.security.AccessControlException: access denied ("java.lang.RuntimePermission" "modifyThreadGroup"): java.security.AccessControlException: access denied ("java.lang.RuntimePermission" "modifyThreadGroup") at java.security.AccessControlContext.checkPermission(AccessControlContext.java:484) at java.security.AccessController.checkPermission(AccessController.java:698) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at com.google.apphosting.runtime.security.CustomSecurityManager.checkPermission(CustomSecurityManager.java:55) at com.google.apphosting.runtime.security.CustomSecurityManager.checkAccess(CustomSecurityManager.java:136) at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:315) at java.lang.Thread.init(Thread.java:391) at java.lang.Thread.init(Thread.java:349) at java.lang.Thread.&lt;init&gt;(Thread.java:445) at org.springframework.boot.autoconfigure.condition.OnClassCondition$GetOutcomesThread.&lt;init&gt;(OnClassCondition.java:278) at org.springframework.boot.autoconfigure.condition.OnClassCondition.getOutcomes(OnClassCondition.java:93) at org.springframework.boot.autoconfigure.condition.OnClassCondition.match(OnClassCondition.java:62) at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.filter(AutoConfigurationImportSelector.java:253) at org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.selectImports(AutoConfigurationImportSelector.java:102) at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:537) at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:184) at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:686) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:524) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) at org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener.initWebApplicationContext(SpringBootContextLoaderListener.java:61) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548) at org.mortbay.jetty.servlet.Context.startContext(Context.java:136) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50) at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.createHandler(AppVersionHandlerMap.java:203) at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.getHandler(AppVersionHandlerMap.java:176) at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:133) at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.dispatchServletRequest(JavaRuntime.java:559) at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.dispatchRequest(JavaRuntime.java:519) at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:489) at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:453) at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:460) at com.google.tracing.CurrentContext.runInContext(CurrentContext.java:293) at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:319) at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:311) at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:457) at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:238) at java.lang.Thread.run(Thread.java:745) ```  The problem seems to be with using Threads in getOutcomes(). Google AppEngine doesn't allow the use of threads in applications. Would it be possible to get rid of these threads or make it configurable whether to use them or not?</body>
		<created>2017-03-12 17:10:24</created>
		<closed>2017-04-10 14:09:42</closed>
	</bug>
	<bug>
		<id>8565</id>
		<title>New validation of ResourceServerProperties breaks OAuth2Sso Application with multiple providers (1.5.2)</title>
		<body>After migrating to 1.5.2 i've encountered a issue with my OAuth2 setup. The bootstraping of the application fails because the validation of the ResourceServerProperties fails. In my setup i have no `security.oauth2.client` and no `security.oauth2.resource` =&gt; OAuth2AutoConfiguration -(defines)-&gt; ResourceServerProperties without any corresponding .yml-properties. Therefore the validation fails with `Missing tokenInfoUri and userInfoUri and there is no JWT verifier key`. In the past this setup worked because the validation has first checked if there is any value for `clientId` (which is not the case).  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Binding to target org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties@325bb9a6 failed:      Property: security.oauth2.resource.tokenInfoUri     Value: null     Reason: Missing tokenInfoUri and userInfoUri and there is no JWT verifier key ```  ***Example application***  https://github.com/julmuell/tut-spring-boot-oauth2/tree/master/github  ***Workaround***  ``` security:   oauth2:     resource:       userInfoUri: BUGFIX ```</body>
		<created>2017-03-10 14:47:34</created>
		<closed>2017-03-14 19:07:37</closed>
	</bug>
	<bug>
		<id>8540</id>
		<title>ClassCastException during parsing of YAML configuration</title>
		<body>Hello,  I'm currently testing the 2.0.0.BUILD-SNAPSHOTS as I'm working on an example project regarding external configuration.  Latest build delivers a `ClassCastException` during startup:  ``` Caused by: java.lang.ClassCastException: org.springframework.boot.env.OriginTrackedValue$OriginTrackedCharSequence cannot be cast to java.lang.String at org.springframework.beans.factory.config.YamlProcessor.buildFlattenedMap(YamlProcessor.java:277) at org.springframework.beans.factory.config.YamlProcessor.buildFlattenedMap(YamlProcessor.java:294) at org.springframework.beans.factory.config.YamlProcessor.buildFlattenedMap(YamlProcessor.java:302) at org.springframework.beans.factory.config.YamlProcessor.buildFlattenedMap(YamlProcessor.java:294) at org.springframework.beans.factory.config.YamlProcessor.getFlattenedMap(YamlProcessor.java:271) at org.springframework.beans.factory.config.YamlProcessor.process(YamlProcessor.java:223) at org.springframework.beans.factory.config.YamlProcessor.process(YamlProcessor.java:161) at org.springframework.beans.factory.config.YamlProcessor.process(YamlProcessor.java:138) at org.springframework.boot.env.OriginTrackedYamlLoader.load(OriginTrackedYamlLoader.java:76) at org.springframework.boot.env.YamlPropertySourceLoader.load(YamlPropertySourceLoader.java:45) at org.springframework.boot.env.PropertySourcesLoader.load(PropertySourcesLoader.java:127) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.loadIntoGroup(ConfigFileApplicationListener.java:428) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:415) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:335) at org.springframework.boot.context.config.ConfigFileApplicationListener.addPropertySources(ConfigFileApplicationListener.java:190) at org.springframework.boot.context.config.ConfigFileApplicationListener.postProcessEnvironment(ConfigFileApplicationListener.java:172) at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:159) at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:145) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:73) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:369) at org.springframework.boot.SpringApplication.run(SpringApplication.java:338) ```  With the following configuration:  ```yaml someValue: 4711  example:     the-greeting: Hello, World!     interval: 1000     precision: 42.23     servers:         - name: springbootbuch           url: http://springbootbuch.de  --- spring:     profiles: demo1  example:     the-greeting: Hello, Demo1!     servers:         - name: demo           url: http://test.com  --- spring:     profiles: demo2  example:     the-greeting: Hello, Demo2!     interval: 2000     servers:         - name: bootifultodos           url: http://bootifultodos.de  --- spring:     profiles: "!demo2"  someValue: 2109 ```  The configuration is maybe a bit extreme, but serves the purpose of explaining external configuration very well. The whole project is available [here](https://github.com/springbootbuch/extconfig), but that doesn't build right now due to open bug #8011 (present in 1.4.x, 1.5.x and 2.0.x).  I have attached a simplified version that contains the error described in this ticket and nothing else. Using 1.5.x it starts just fine:  [extconfig-simplified.zip](https://github.com/spring-projects/spring-boot/files/827339/extconfig-simplified.zip)  My expectations: Spring Boot should parse this configuration file as before, taking the negated profiles into regard. If it's too early to write bugs for 2.0.0, please let me know.   Edit: The exception also happens if I use " for the string values.  Thanks, Michael</body>
		<created>2017-03-08 10:42:32</created>
		<closed>2017-03-13 18:16:09</closed>
	</bug>
	<bug>
		<id>8525</id>
		<title>ServletContext getResourceAsStream for file in META-INF/resources does not work in an IDE, spring-boot:run, or bootRun</title>
		<body>Hi,  I've just upgraded from Boot 1.5.1 to 1.5.2 and am now getting `null` back from `getServletContext().getResourceAsStream`.  This happens in STS (3.8.3) only and **not** when running from the command line.    I've distilled the problem down into a simple project on [Bit Bucket](https://bitbucket.org/davidmelia/boot1.5.2-resource-as-stream-issue   )  My simple project consists of a WAR which contains a Servlet 'SomeServlet' which looks for a resource `/scripts/lib/dave.js` inside a dependent JAR `/resources/META-INF/resources`. If the resource is not found I throw an exception.   .  Boot 1.5.1 works fine on both command line and in STS.  Boot 1.5.2 works fine on the command line but breaks in Eclipse returning `null`.  Any ideas?  Thanks  </body>
		<created>2017-03-07 14:49:53</created>
		<closed>2017-03-13 20:06:41</closed>
	</bug>
	<bug>
		<id>8510</id>
		<title>EnvironmentMvcEndpoint throws exception for unresolvable properties</title>
		<body>The `EnvironmentMvcEndpoint` throws an exception for unresolvable properties instead of printing their _unresolved_ value.  Suppose the following `application.properties`: ``` my.foo = ${my.bar} ```  A call to the endpoint `/env` shows the `applicationConfig` entry with the properties unresolved: ``` "applicationConfig: [classpath:/application.properties]": {    "my.foo": "${my.bar}" } ```  However, a call to `/env/my.*` throws an exception complaining about `${my.bar}` being unresolvable. This behaviour is annoying when the environment contains some properties that are not used in a given setup (think about `feature.enabled=false` with an incomplete configuration set for the feature _feature_).  Note: tested with SpringBoot `1.3.8.RELEASE` and `1.4.4.RELEASE`</body>
		<created>2017-03-06 16:40:22</created>
		<closed>2017-03-07 19:09:38</closed>
	</bug>
	<bug>
		<id>8485</id>
		<title>Webflux is leaking any static resources by default even application.{properties,yml}</title>
		<body>## Overview  _Spring WebFlux_ and corresponding `org.springframework.web.reactive.resource.ResourceWebHandler` are exposing any resources insides _resources classpath_ (even `application.properties`).  ## Problem  _Spring_ without _WebFlux_ by default only exposes `/static` (and some others, please check [27.1.5 Static Content](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content)).  Thus when using [`spring-boot-samples/spring-boot-sample-tomcat`](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-tomcat) and try to get `http://localhost:8080/application.properties` as expected you get a `404` error.  However when using [`spring-boot-samples/spring-boot-sample-webflux`](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-webflux) when accessing to `http://localhost:8080/application.properties` browser downloads the `application.properties`.  **This inconsistence can be dangerous for people that used to develop with _Spring boot servlet web application_ and forget to _secure_ or _filter_ static resource handler.**  ## How to reproduce  ``` git clone git@github.com:spring-projects/spring-boot.git cd spring-boot/spring-boot-samples/spring-boot-sample-webflux/ ./mvnw clean spring-boot:run ```  Then `curl http://localhost:8080/application.properties` or with any other _user agent_.</body>
		<created>2017-03-03 16:07:14</created>
		<closed>2017-05-15 20:53:25</closed>
	</bug>
	<bug>
		<id>8484</id>
		<title>No dependencies between JCache bootstrap and `Hazelcast` instance</title>
		<body>If JCache is using Hazelcast as a provider, the `HazelcastInstance` that is auto-configured (or provided by user configuration) should be fully initialized before the cache manager is itself initialized.  The reason for this is that the cache infrastructure usually reuse the existing `HazelcastInstance` if found. Currently there is no explicit dependency so the cache manager may start first and create the hazelcast instance that the auto-configuration is meant to create.   Later on, the regular `HazelcastAutoConfiguration` will process the bean, which will start Hazelcast as well. This will start another instance that we should have detected previously ... Worse, if the configuration defines an instance name the boostrap will fail since we attempt to start the same instance twice.  https://github.com/snicoll/hazelcast-springboot-jcache/tree/gh-8467 reproduces the bootstrap problem  </body>
		<created>2017-03-03 15:42:44</created>
		<closed>2017-03-09 17:31:21</closed>
	</bug>
	<bug>
		<id>8477</id>
		<title>setRegisterErrorPageFilter(false) not disable ErrorPageFilter</title>
		<body>If I disable the ErrorPageFilter registration with this configuration, the ErrorPageFilter will be loaded nevertheless.  The configuration: ``` public class Application extends SpringBootServletInitializer {      @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         setRegisterErrorPageFilter(false);       ...     }    } ```  The Filter will be loaded through this code in SpringBootServletInitializer even the configuration above.  ``` @Configuration static class ErrorPageFilterConfiguration { @Bean public ErrorPageFilter errorPageFilter() { return new ErrorPageFilter(); } } ``` The only way for me to disable the filter is with this configuration: ``` @Bean public FilterRegistrationBean disableSpringBootErrorFilter(ErrorPageFilter filter) {         FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();         filterRegistrationBean.setFilter(filter);         filterRegistrationBean.setEnabled(false);         return filterRegistrationBean; } ```  I think it should work without this explicit FilterRegistrationBean configuration.   &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2017-03-03 06:48:43</created>
		<closed>2017-03-03 12:07:17</closed>
	</bug>
	<bug>
		<id>8471</id>
		<title>HealthMvcEndpoint should expose details if right authority present</title>
		<body>@philwebb Related to #8255. The `isUserInRole` check does not check for authorities.</body>
		<created>2017-03-02 17:33:31</created>
		<closed>2017-03-02 21:45:59</closed>
	</bug>
	<bug>
		<id>8467</id>
		<title>early bean initialization of cache-related beans lead to early creating of the cache manager</title>
		<body>When `@EnableCaching` is added to a web application, the following occurs:  ``` 2017-03-02 14:58:35.470  INFO 38838 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@569cfc36: startup date [Thu Mar 02 14:58:35 CET 2017]; root of context hierarchy 2017-03-02 14:58:36.063  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration' of type [class org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.107  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'validator' of type [class org.springframework.validation.beanvalidation.LocalValidatorFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.121  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [class org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$f9726f0f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.125  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cache.jcache.config.ProxyJCacheConfiguration' of type [class org.springframework.cache.jcache.config.ProxyJCacheConfiguration$$EnhancerBySpringCGLIB$$d2a7fb6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.163  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration' of type [class org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$$EnhancerBySpringCGLIB$$ede633b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.176  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.cache-org.springframework.boot.autoconfigure.cache.CacheProperties' of type [class org.springframework.boot.autoconfigure.cache.CacheProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.181  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'cacheManagerCustomizers' of type [class org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2017-03-02 14:58:36.184  INFO 38838 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration' of type [class org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration$$EnhancerBySpringCGLIB$$7ea9635a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) ```  In a non web app, such early initalization doesn't happen. </body>
		<created>2017-03-02 14:02:07</created>
		<closed>2017-03-06 07:27:43</closed>
	</bug>
	<bug>
		<id>8463</id>
		<title>spring-boot-actuator health reports solr down</title>
		<body>Using 2.0.0.BUILD-SNAPSHOT and the health endpoint of spring-boot-actuator for solr queries a URL of `/solr/admin/ping` when it should use `/solr/&lt;corename&gt;/admin/ping`. This results in a 404 error and a "down" status, even though solr is actually running fine. This was tested with solr 6.3.0  This may be related to https://jira.spring.io/browse/DATASOLR-364 but it would be nice for it to be enhanced for multi-core cases anyway. One way this could be done is below, using a `SolrClientFactory` instead of a `SolrClient` and then iterating over all the cores that have been registered:  ``` package org.springframework.boot.actuate.health;  import org.apache.solr.client.solrj.SolrClient; import org.springframework.data.solr.server.SolrClientFactory;  public class SolrHealthIndicator extends AbstractHealthIndicator {  private final SolrClientFactory solrClientFactory;  public SolrHealthIndicator(SolrClientFactory solrClientFactory) { this.solrClientFactory = solrClientFactory; }  @Override protected void doHealthCheck(Health.Builder builder) throws Exception { for (String core : this.solrClientFactory.getCores()) { SolrClient client = this.solrClientFactory.getSolrClient(core); Object status = client.ping().getResponse().get("status"); builder.withDetail(core, status); }                 builder.up(); } } ```</body>
		<created>2017-03-02 11:17:07</created>
		<closed>2017-04-10 11:41:27</closed>
	</bug>
	<bug>
		<id>8434</id>
		<title>@EnableTransactionManagement proxyTargetClass not control by spring.aop.proxyTargetClass</title>
		<body>if use `@Transactional`,and set `spring.aop.proxyTargetClass=false`, this class also create by cglib not jdk proxy,you must config `@EnableTransactionManagement(proxyTargetClass=false)` to use jdk proxy with `@Transactional` ``` @Service public class DemoServiceImpl implements DemoService {      @Transactional     public void test() {         System.out.println("Test");     } }  ```  And `@EnableTransactionManagement` proxyTargetClass default value is false, why spring boot  change to true? </body>
		<created>2017-02-28 09:44:16</created>
		<closed>2017-04-03 06:51:08</closed>
	</bug>
	<bug>
		<id>8403</id>
		<title>Enable auto-configuration for Tomcat, Jetty and Undertow reactive servers</title>
		<body>The `ReactiveWebServerConfiguration` only enables Reactor Netty for now.</body>
		<created>2017-02-24 16:45:14</created>
		<closed>2017-02-24 16:47:08</closed>
	</bug>
	<bug>
		<id>8402</id>
		<title>WebFlux fails with "Type javax.servlet.SessionTrackingMode not present"</title>
		<body>When running a Boot application with the webflux starter and devtools, devtools sets the following property in `DevToolsPropertyDefaultsPostProcessor`:  ``` properties.put("server.session.persistent", "true"); ```  This does bind the `ServerProperties.Session` property class, which itself depends on the Servlet class `javax.servlet.SessionTrackingMode`.  The application fails with `WebFlux fails with "Type javax.servlet.SessionTrackingMode not present"`.</body>
		<created>2017-02-24 16:11:34</created>
		<closed>2017-02-24 16:42:02</closed>
	</bug>
	<bug>
		<id>8397</id>
		<title>When the spring-boot-maven-plugin performs the repackage goal the POM order of the libraries is not maintained</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; When this maven [issue](https://issues.apache.org/jira/browse/MNG-1412) was fixed in maven 2.0.9 the `java.util.LinkedHashSet` was used instead of the `java.util.HashSet`.  When the spring-boot-maven-plugin performs the repackage goal using the `AbstractDependencyFilterMojo.filterDependencies` method the `org.apache.maven.shared.artifact.filter.collection.FilterArtifacts.filter` method will be called and will try to apply all of the filters in its filters ArrayList fields.  In my particular case, the ArrayList contained 4 entries which were:  1. `org.springframework.boot.maven.ExcludeFilter` 2. `org.apache.maven.shared.artifact.filter.collection.ScopeFilter` 3. `org.apache.maven.shared.artifact.filter.collection.ArtifactIdFilter` 4. `org.springframework.boot.maven.MatchingGroupIdFilter`  They are all using `HashSet` instead of `LinkedHashSet`.  This breaks the POM order for libraries and should be fixed.  It looks like two are in the Spring Boot maven plugin which should be easy to fix but the others would require maven source changes.  I do not know what other filters could be used over and above the 4 were in my case but they would also need to be changed.   Fixing this bug will give users some control of the classpath ordering when launching a jar file. </body>
		<created>2017-02-24 03:08:15</created>
		<closed>2017-03-01 12:19:34</closed>
	</bug>
	<bug>
		<id>8347</id>
		<title>ResourceServerFilterChainOrderProcessor breaks on apps with more than one resource server</title>
		<body>Because it unconditionally sets the filter order on all beans of type `ResourceServerConfiguration` the `ResourceServerFilterChainOrderProcessor` causes an app with more than one such bean to fail on startup (filter order has to be unique). I guess we need to work out a way to back off if there are multiple beans.</body>
		<created>2017-02-21 16:54:49</created>
		<closed>2017-02-22 11:32:06</closed>
	</bug>
	<bug>
		<id>8335</id>
		<title>Spring-HATEOS: ClassCastException with ControllerLinkBuilder.methodOn() and hot restart</title>
		<body>Here is my code for adding a HATEOS-Url to my DTO (gopZusammenfassung):  ```java private void enrichWithHATEOS(GopZusammenfassung gopZusammenfassung, long gopId) {     gopZusammenfassung.add(linkTo(methodOn(AnmerkungenListeRestController.class)             .readAnmerkungenListeByGopId(gopId)).withRel("anmerkungen")); } ```  This works well until a hot restart of the backend gets triggered, e.g. by modifying and saving some code. After that, when I refresh my frontend, I get a ClassCastException involving the proxied controller instance:  ``` java.lang.ClassCastException: de.kvbawue.gostamm.pflege.go.api.rest.v1.AnmerkungenListeRestController$$EnhancerByCGLIB$$7ee14ccb cannot be cast to de.kvbawue.gostamm.pflege.go.api.rest.v1.AnmerkungenListeRestController at de.kvbawue.gostamm.pflege.go.domain.orchestration.GoPflegeOrchestrationService.enrichWithHATEOS(GoPflegeOrchestrationService.java:164) at de.kvbawue.gostamm.pflege.go.domain.orchestration.GoPflegeOrchestrationService.requestGopZusammenfassung(GoPflegeOrchestrationService.java:96) at de.kvbawue.gostamm.pflege.go.domain.orchestration.GoPflegeOrchestrationService$$FastClassBySpringCGLIB$$f06dc567.invoke(&lt;generated&gt;) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:721) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:139) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656) at de.kvbawue.gostamm.pflege.go.domain.orchestration.GoPflegeOrchestrationService$$EnhancerBySpringCGLIB$$912aeee0.requestGopZusammenfassung(&lt;generated&gt;) at de.kvbawue.gostamm.pflege.go.api.rest.v1.GoPflegeRestController.getGopZusammenfassungByGnrAndQuartal(GoPflegeRestController.java:74) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at (...) ```  Similar issues have already been reported long ago and marked as closed  (#3784 and #4117). Some kind of regression maybe?  springBootVersion: 1.5.1.RELEASE spring-hateoas: 0.23.0.RELEASE STS Version 3.8.3 </body>
		<created>2017-02-20 11:54:51</created>
		<closed>2017-02-28 12:26:34</closed>
	</bug>
	<bug>
		<id>8330</id>
		<title>Building a tag of spring-boot-sample-custom-layout fails as org.springframework.boot:spring-boot-dependencies:effective-pom:1.5.1.RELEASE cannot be found</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; I git cloned the Spring Boot repository and switched to the 1.5.1.RELEASE branch.  Then I used eclipse-installer to install eclipse MARS as per the instruction.  When everything settles select the spring-boot-sample-custom-layout project and select run as/maven test.  I get this error:      [ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.10:copy (copy-effective-pom) on project spring-boot-sample-custom-layout: Unable to find artifact. Could not find artifact org.springframework.boot:spring-boot-dependencies:effective-pom:1.5.1.RELEASE in gradle (http://repo.gradle.org/gradle/libs-releases-local)  Below is the complete log file.  [maven.txt](https://github.com/spring-projects/spring-boot/files/786448/maven.txt)  And with debug  [maven-debug.txt](https://github.com/spring-projects/spring-boot/files/786469/maven-debug.txt)  I looked at the pom file and I am totally lost.  There are three plugins for the build and 1 plugin management.  It would be very useful for us blokes who do not understand all of the million intricacies of Maven to have a few comments to shed some light.</body>
		<created>2017-02-20 02:51:25</created>
		<closed>2017-02-20 09:00:16</closed>
	</bug>
	<bug>
		<id>8315</id>
		<title>@SpyBean doesn't register spy based on bean name</title>
		<body>Version: 1.4.3-RELEASE  I have two RestTemplate beans for different purpose: ``` @Bean public RestTemplate basicRestTemplate() { // config restTemplate }  @Bean public RestTemplate specialRestTemplate() { // config restTemplate } ```   The following component depends on the specialRestTemplate and @Autowired inject the correct bean by name: ``` @Autowired public MyComponent(RestTemplate specialRestTemplate){} ```  But in my test, I'd like to spy on the specialRestTemplate, using `@SpyBean` is giving me this stacktrace: ``` java.lang.IllegalStateException: No bean found for definition [SpyDefinition@6e0a0baa name = '', typeToSpy = org.springframework.web.client.RestTemplate, reset = AFTER]  at org.springframework.util.Assert.state(Assert.java:392) at org.springframework.boot.test.mock.mockito.MockitoPostProcessor.inject(MockitoPostProcessor.java:391) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:73) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:62) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:49) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) at org.junit.rules.RunRules.evaluate(RunRules.java:20) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ```   When I debug into `MockitoPostProcessor` I found that registerSpy only find existing bean based on type, and when it found more than one bean, then determine the spy candidate by checking `isPrimary`.  So even though `@SpyBean` has an argument for bean name, it doesn't support get bean by name yet.   </body>
		<created>2017-02-16 15:58:20</created>
		<closed>2017-02-21 20:21:00</closed>
	</bug>
	<bug>
		<id>8314</id>
		<title>management.security.roles cannot be set to a single role containing commas</title>
		<body>I have a spring-boot application which sits behind an in-house servlet filter which does kerberos authentication and exposes LDAP groups via HttpServletRequest#isUserInRole  I want to use the following in my application.yaml ``` management:   security:     roles: CN=some-group,OU=somewhere,OU=in,OU=ldap,DC=example,DC=com ``` but this results in checking for membership of the following  * CN=some-group  * ROLE_CN=some-group  * OU=somewhere  * ROLE_OU=somewhere  * etc.</body>
		<created>2017-02-16 14:24:42</created>
		<closed>2017-03-02 08:10:35</closed>
	</bug>
	<bug>
		<id>8311</id>
		<title>@SpringBootTest with WebEnvironment and @ContextHierarchy tries to start multiple webapps</title>
		<body>Hi,  This seems to be related to #8000: I am trying to migrate a test that uses `@ContextHierarchy` and `@WebIntegrationTest` to Spring Boot 1.5.1 and `@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)`.  However, I am getting context loading issues as it seems that multiple spring boot web applications are being started. To reproduce with a minimal example, I tried editing `SpringBootTestContextHierarchyTests` as created within #8000 :  ```java package org.springframework.boot.test.context;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.context.AbstractSpringBootTestEmbeddedWebEnvironmentTests.AbstractConfig; import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ChildConfiguration; import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ParentConfiguration; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.test.annotation.DirtiesContext; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.ContextHierarchy; import org.springframework.test.context.junit4.SpringRunner; import org.springframework.web.servlet.config.annotation.EnableWebMvc;  @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT) @ContextHierarchy({         @ContextConfiguration(classes = ParentConfiguration.class),         @ContextConfiguration(classes = ChildConfiguration.class)}) @DirtiesContext @RunWith(SpringRunner.class) public class SpringBootTestWebEnvironmentContextHierarchyTests {      @Test     public void contextLoads() {  }      @Configuration     static class ParentConfiguration {         @Bean         MyBean myBean() {             return new MyBean();         }     }      @Configuration     @EnableWebMvc     static class ChildConfiguration extends AbstractConfig {         ChildConfiguration(MyBean myBean) { }     }      static class MyBean {  } } ```  This fails with the following message:  &gt; org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.  The loader seems to expect `ParentConfiguration` to provide Web config beans as well. If I do that, i.e. make `static class ParentConfiguration extends AbstractConfig` as above, the test fails when a second embedded Tomcat instance is attempted at the same defined port.  Similar issues occur with RANDOM_PORT or MOCK web configurations, which, while not failing, do start up two web apps and two Tomcat instances (for the random port).  Is this an expected functionality? If so, what would be the best way to migrate web integration tests that use `@ContextHierarchy`? </body>
		<created>2017-02-16 12:33:05</created>
		<closed>2017-04-18 22:08:29</closed>
	</bug>
	<bug>
		<id>8304</id>
		<title>GroovyTemplateAvailabilityProvider does not consider configured resource loader path</title>
		<body>This was [spotted by @bbrouwer](https://github.com/spring-projects/spring-boot/pull/8228#discussion_r101156314) while working on #8228.</body>
		<created>2017-02-15 17:20:45</created>
		<closed>2017-02-15 17:25:38</closed>
	</bug>
	<bug>
		<id>8299</id>
		<title>Resource handling is inconsistent across different embedded containers</title>
		<body>The behaviour of embedded Tomcat, Jetty, and Undertow is inconsistent when the containers themselves are dealing with static resources, i.e. when Spring MVC's resource handling isn't involved. For example, support for loading resources from `META-INF/resources` of nested jars works with Tomcat but doesn't work with Undertow. Furthermore, I believe it only works with Tomcat when Jasper's on the classpath.</body>
		<created>2017-02-15 15:11:43</created>
		<closed>2017-03-01 14:13:49</closed>
	</bug>
	<bug>
		<id>8296</id>
		<title>DataSourceInitializedEvent picks wrong datasource in multi-datasource configuration</title>
		<body>spring boot version 1.5.1  DataSourceInitializedPublisher.java  ```java@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof DataSource) { // Normally this will be the right DataSource this.dataSource = (DataSource) bean; } ... ```  "Normally this will be the right DataSource" only correct if there is only one dataSource configured. In cases where there are two ore more (and one is primary used for JPA) - DataSourceInitializedEvent is fired for a randomly picked dataSource (the one which was initialized last).  DataSourceInitializedEvent should be fired for the datasource specified for EntityManagerFactory instead (it is available via `bean.getProperties().get("javax.persistence.nonJtaDataSource")` ) </body>
		<created>2017-02-15 12:59:24</created>
		<closed>2017-03-02 08:10:35</closed>
	</bug>
	<bug>
		<id>8294</id>
		<title>Colon in profile name yields obscure IllegalArgumentException</title>
		<body>This issue was originally reported to the spring-cloud project as [Colon in profile name yields obscure IllegalArgumentException](https://github.com/spring-cloud/spring-cloud-config/issues/637). Following their and my conclusions, I've adapted the report and added it to this project instead.  Since around Spring Boot 1.4.0 and later, using `:` (colon) in profile names results in a rather unhelpful error message, given a profile `test:abc` the following error and stack trace is shown:  ``` 08:39:09.050 [main] ERROR org.springframework.boot.SpringApplication - Application startup failed java.lang.IllegalArgumentException: name at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:658) at sun.misc.URLClassPath.findResource(URLClassPath.java:188) at java.net.URLClassLoader$2.run(URLClassLoader.java:569) at java.net.URLClassLoader$2.run(URLClassLoader.java:567) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findResource(URLClassLoader.java:566) at org.springframework.boot.loader.LaunchedURLClassLoader.findResource(LaunchedURLClassLoader.java:58) at java.lang.ClassLoader.getResource(ClassLoader.java:1096) at org.springframework.core.io.ClassPathResource.resolveURL(ClassPathResource.java:147) at org.springframework.core.io.ClassPathResource.exists(ClassPathResource.java:135) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.loadIntoGroup(ConfigFileApplicationListener.java:469) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:444) at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:380) at org.springframework.boot.context.config.ConfigFileApplicationListener.addPropertySources(ConfigFileApplicationListener.java:215) at org.springframework.boot.context.config.ConfigFileApplicationListener.postProcessEnvironment(ConfigFileApplicationListener.java:184) at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:171) at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:157) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:73) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:336) at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:138) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:84) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:62) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:122) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:73) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:336) at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) at com.example.ConfigServerApplication.main(ConfigServerApplication.java:12) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) ```  Which points to a part of `URLClassPath` where a `MalformedURLException` is caught on constructing a `URL`, the exception is handled by the following rather unhelpful line: ``` throw new IllegalArgumentException("name"); ```  which explains the exception as presented in the error message above.  Using `:` in profile names works fine with Spring Boot 1.3.8.RELEASE or earlier.  To complicate matters, it seems the issue only occurs when running the jar with `java -jar &lt;jarfile&gt;`, when for instance running with the Maven plugin, `mvn spring-boot:run` the issue does not occur.  I originally reported this issue to the spring-cloud project, as I discovered the issue when updating a cloud-config server. But it is their and my conclusion that it should be reported here.  I suspect the following commit may have something to do with the issue [Use a conventional delegation model in LaunchedURLClassLoader](https://github.com/spring-projects/spring-boot/commit/87fe0b2adeef85c842c009bfeebac1c84af8a5d7).  Project demonstrating the issue: https://github.com/anders-holmberg-baath/spring-cloud-config-issue-637 especially the "shorter path", as it was added after concluding that the issue is not within the domain of the config-server, but rather the spring-boot core.</body>
		<created>2017-02-15 08:01:53</created>
		<closed>2017-04-04 09:04:02</closed>
	</bug>
	<bug>
		<id>8277</id>
		<title>v1.5 requires @Validated annotation on @ConfigurationProperties, which creates JDK proxy if class implements interface</title>
		<body>Since Spring Boot v1.5, configuration property beans are required to be annotated with `@Validated` in order to be validated. This works great, until the class implements an interface.  **Cause** Beans annotated with `@Validated` are post-processed using `MethodValidationPostProcessor`, which is defined as `@ConditionalOnMissingBean` in class `ValidationAutoConfiguration`, which is automatically included with `@EnableAutoConfiguration`.  `MethodValidationPostProcessor` is never created with `setProxyTargetClass`. Therefore, it creates JDK dynamic proxy from the instance, which in return fails dependency injection.  **Steps to reproduce** ```java public interface MyInterface {     String getFoo(); }  @Validated @ConfigurationProperties public class MyProperties implements MyInterface {     private String foo;      @Override     public String getFoo() { return foo; }     public void setFoo(String foo) { this.foo = foo; } }  @SpringBootApplication @EnableConfigurationProperties(MyProperties.class) public class MyApplication {      // This fails, since MyProperties is JDK proxy with only MyInterface implementation     @Autowired     private MyProperties properties;      // ... main etc } ```  This produces a misleading error ``` Description: The bean 'foo.MyProperties' could not be injected as a 'foo.MyProperties' because it is a JDK dynamic proxy that implements: foo.MyInterface  Action: Consider injecting the bean as one of its interfaces or forcing the use of CGLib-based proxies by setting proxyTargetClass=true on @EnableAsync and/or @EnableCaching. ```  **Solution** This behaves exactly as it is supposed to. Its side-effect of adding `@Validated` to property class. The problem lies in Spring Boot autoconfig, where is no nice way of telling Spring to set `MethodValidationPostProcessor.proxyTargetClass=true`.  Some possible solutions: 1. Make `MethodValidationPostProcessor.proxyTargetClass=true` by default, if possible. 2. Add configurable property like `spring.validation.proxy-target-class` 3. Read existing `spring.aop.proxy-target-class` value. I'm not sure what consequences this might have.  And last but not least, it should be documented, both in docs and in error message. Took me while of debugging to find what processor causes this behavior (and I know my way around Spring).  **Workaround** Use that `@ConditionalOnMissingBean`, and declare your own `MethodValidationPostProcessor` bean: ```java @Bean public MethodValidationPostProcessor methodValidationPostProcessor(Validator validator) {     MethodValidationPostProcessor processor = new MethodValidationPostProcessor();     processor.setValidator(validator);     processor.setProxyTargetClass(true);     return processor; } ``` It's however bit ugly, and feels like replacing inner workings of Spring Boot, which might easily break in future versions.</body>
		<created>2017-02-13 12:38:38</created>
		<closed>2017-02-14 09:33:03</closed>
	</bug>
	<bug>
		<id>8269</id>
		<title>@ConditionalOnBean with an annotation attribute may instantiate factory bean that provides no type information</title>
		<body> When `@ConditionalOnBean` has annotation :  ``` @ConditionalOnBean(annotation = { MyAnnotation.class }) public class MyAutoConfiguration { ```  In `org.springframework.boot.autoconfigure.condition.OnBeanCondition#getBeanNamesForAnnotation` call `beanFactory#getBeanNamesForAnnotation`:  ```java private String[] getBeanNamesForAnnotation( ConfigurableListableBeanFactory beanFactory, String type, ClassLoader classLoader, boolean considerHierarchy) throws LinkageError { String[] result = NO_BEANS; try { @SuppressWarnings("unchecked") Class&lt;? extends Annotation&gt; typeClass = (Class&lt;? extends Annotation&gt;) ClassUtils .forName(type, classLoader); result = beanFactory.getBeanNamesForAnnotation(typeClass); ```  stack:  ``` java.lang.Thread.State: RUNNABLE     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:239)     at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1474)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)     at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:615)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(DefaultListableBeanFactory.java:597)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForAnnotation(DefaultListableBeanFactory.java:564)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForAnnotation(OnBeanCondition.java:198)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:144)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:81)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47)     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:436)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:425)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:127)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523)     - locked &lt;0x1c78&gt; (a java.lang.Object)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) ```  ---  As described above, bean creation before `BeanFactoryPostProcessor`, so `BeanFactoryPostProcessor` will not work.  </body>
		<created>2017-02-13 03:33:59</created>
		<closed>2017-03-01 15:08:42</closed>
	</bug>
	<bug>
		<id>8255</id>
		<title>Spring Boot 1.5.1 Actuator Endpoints security configuration issue</title>
		<body>This is my Spring Boot 1.5.1 Actuator `application.properties`:      #Spring Boot Actuator     management.contextPath: /actuator     management.security.roles=R_0  This is my `WebSecurityConfig`:      @Configuration     @EnableWebSecurity     public class WebSecurityConfig extends WebSecurityConfigurerAdapter {          @Autowired     private UserDetailsService userDetailsService;          @Value("${logout.success.url}")     private String logoutSuccessUrl;          @Override     protected void configure(HttpSecurity http) throws Exception {          // @formatter:off     http.addFilterBefore(new CorsFilter(), ChannelProcessingFilter.class);          http     .csrf().ignoringAntMatchers("/v1.0/**", "/logout")             .and()             .authorizeRequests()                          .antMatchers("/oauth/authorize").authenticated()                 //Anyone can access the urls             .antMatchers("/signin/**").permitAll()             .antMatchers("/v1.0/**").permitAll()                 .antMatchers("/auth/**").permitAll()                 .antMatchers("/actuator/health").permitAll()                 .antMatchers("/actuator/**").hasAuthority("R_0")                 .antMatchers("/login").permitAll()                 .anyRequest().authenticated()             .and()                 .formLogin()                 .loginPage("/login")                 .loginProcessingUrl("/login")                 .failureUrl("/login?error=true")                 .usernameParameter("username")                 .passwordParameter("password")                 .permitAll()                 .and()                     .logout()                     .logoutUrl("/logout")                     .logoutSuccessUrl(logoutSuccessUrl)                     .permitAll();     // @formatter:on     }          /**      * Configures the authentication manager bean which processes authentication requests.      */     @Override     protected void configure(AuthenticationManagerBuilder auth) throws Exception {     auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());     }          @Override     @Bean     public AuthenticationManager authenticationManagerBean() throws Exception {     return super.authenticationManagerBean();     }          }  Right now I'm successfully able to login in my application with a right user that has `R_0` authorities but when I trying to access for example      http://localhost:8080/api/actuator/beans  I receive a following error:      There was an unexpected error (type=Forbidden, status=403).     Access is denied. User must have one of the these roles: R_0  How to correctly configure Spring Boot Actuator in order to be aware about the correct `Authentication` ?  Right now in order to get it workin I have to do the following trick:      management.security.enabled=false      .antMatchers("/actuator/health").permitAll()     .antMatchers("/actuator/**").hasAuthority("R_0")  Is any chance to configure Actuator in a right way ?  This is my StackOverflow question: http://stackoverflow.com/questions/42142556/spring-boot-actuator-endpoints-security-doesnt-work-with-custom-spring-security</body>
		<created>2017-02-10 07:41:49</created>
		<closed>2017-03-02 04:17:28</closed>
	</bug>
	<bug>
		<id>8245</id>
		<title>Undertow embedded servlet container ignores SSL server.ssl.key-alias</title>
		<body>Spring Boot 1.2.5.RELEASE built with Jdk: 1.8.0_112  When setting up Spring Boot with HTTPS and the Undertow embedded container, it seems to ignore the value specified in application.properties for `server.ssl.key-alias`. Despite the below configuration, Chrome Developer Tools reports the cert in use is one of three certs in the keystore other than localhost.  ``` # Embedded container configuration server.port = 8443 server.ssl.key-store=classpath:keystore.jks server.ssl.key-store-password=mypassword server.ssl.key-alias=localhost server.ssl.key-password=keypassword ```  The Tomcat and Jetty seem to have code to select the correct key based on alias (see the `configureSsl()` method in the below files). I couldn't from a quick look see any equivalent code in the Undertow factory. The key-alias parameter is documented in Spring Boot so I would expect it to work for all embedded containers.  [UndertowEmbeddedServletContainerFactory](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java)  [TomcatEmbeddedServletContainerFactory](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java)  ```java /**  * Configure Tomcat's {@link AbstractHttp11JsseProtocol} for SSL.  * @param protocol the protocol  * @param ssl the ssl details  */ protected void configureSsl(AbstractHttp11JsseProtocol&lt;?&gt; protocol, Ssl ssl) { protocol.setSSLEnabled(true); protocol.setSslProtocol(ssl.getProtocol()); configureSslClientAuth(protocol, ssl); protocol.setKeystorePass(ssl.getKeyStorePassword()); protocol.setKeyPass(ssl.getKeyPassword()); protocol.setKeyAlias(ssl.getKeyAlias()); ```  [JettyEmbeddedServletContainerFactory](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java)  ```java /**  * Configure the SSL connection.  * @param factory the Jetty {@link SslContextFactory}.  * @param ssl the ssl details.  */ protected void configureSsl(SslContextFactory factory, Ssl ssl) { factory.setProtocol(ssl.getProtocol()); configureSslClientAuth(factory, ssl); configureSslPasswords(factory, ssl); factory.setCertAlias(ssl.getKeyAlias()); ```  </body>
		<created>2017-02-09 12:16:20</created>
		<closed>2017-03-13 20:45:10</closed>
	</bug>
	<bug>
		<id>8244</id>
		<title>spring.profiles.include outside of a configuration file only takes effect when spring.profiles.active is also set</title>
		<body>This relates to [this question on Stack Overflow](http://stackoverflow.com/questions/42118177/spring-profiles-include-does-not-work-from-command-line-parameter?noredirect=1#comment71430249_42118177) and https://github.com/spring-projects/spring-boot/issues/7668.  #7668 changed `ConfigFileApplicationListener` so that `spring.profiles.include` could be specified in any property source, and not just in configuration files. However, it only does anything if `spring.profiles.active` has also been set. I don't think that makes sense. We should active all included profiles even when `spring.profiles.active` has not been set.</body>
		<created>2017-02-09 11:36:40</created>
		<closed>2017-02-09 11:45:12</closed>
	</bug>
	<bug>
		<id>8234</id>
		<title>Placeholders in values of spring.profiles.active/include properties are no longer resolved using the Environment in Spring Boot 1.5</title>
		<body>Hi!  We're using Spring profiles to configure environment-specific properties for our Spring Boot-based application. To decouple application CLI from Spring a little bit we've used to configure `spring.profiles.active` based on property named `env`, e.g., we have line below in `application.properties` ```application.properties spring.profiles.active=${env:default} ``` and populate `env` either via command line or via system environment variable.  That used to work in Spring Boot prior to 1.5 as placeholders in `spring.profile.*` properties were resolved against existing `Environment`, but doesn't seem to work after [change to spring.profiles properties logic](https://github.com/spring-projects/spring-boot/commit/919d0c617227bff1bfd58ed57d9d5080c82f6ac1) as placeholders are now resolved only against `PropertySources` that just holds a single properties/YAML file.  Is it possible to change that and use `PropertySources` from `Environment` for placeholders in `spring.profiles.active`/`spring.profiles.include`?</body>
		<created>2017-02-08 13:30:29</created>
		<closed>2017-02-08 15:01:58</closed>
	</bug>
	<bug>
		<id>8225</id>
		<title>Depending on both spring boot mongo and spring boot solr generates java.lang.IllegalStateException</title>
		<body>When running a project that depends on both 'org.springframework.boot:spring-boot-starter-data-mongodb' and 'org.springframework.boot:spring-boot-starter-data-solr', the following exception is thrown:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'solrConverter': Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'org.springframework.data.mongodb.core.convert.CustomConversions' to required type 'org.springframework.data.solr.core.convert.CustomConversions' for property 'customConversions'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'org.springframework.data.mongodb.core.convert.CustomConversions' to required type 'org.springframework.data.solr.core.convert.CustomConversions' for property 'customConversions': no matching editors or conversion strategy found at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at io.github.aruberto.CustomConversionsBugApplication.main(CustomConversionsBugApplication.java:10) [main/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121] at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) [idea_rt.jar:na] Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'org.springframework.data.mongodb.core.convert.CustomConversions' to required type 'org.springframework.data.solr.core.convert.CustomConversions' for property 'customConversions'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'org.springframework.data.mongodb.core.convert.CustomConversions' to required type 'org.springframework.data.solr.core.convert.CustomConversions' for property 'customConversions': no matching editors or conversion strategy found at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:605) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:617) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:216) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1577) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1536) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1276) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] ... 20 common frames omitted Caused by: java.lang.IllegalStateException: Cannot convert value of type 'org.springframework.data.mongodb.core.convert.CustomConversions' to required type 'org.springframework.data.solr.core.convert.CustomConversions' for property 'customConversions': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:306) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:590) ~[spring-beans-4.3.6.RELEASE.jar:4.3.6.RELEASE] ... 26 common frames omitted ```  Java Version - Java 8 b121 Spring Version - 1.5.1 (1.4.4 doesn't seem to have this issue) Example project reproducing issue: https://github.com/aruberto/spring-boot-custom-conversions-error</body>
		<created>2017-02-07 21:06:22</created>
		<closed>2017-02-08 13:30:01</closed>
	</bug>
	<bug>
		<id>8223</id>
		<title>Duplicate javax.validation.ValidatorFactory Beans on 1.5.1</title>
		<body>Hi, I'm trying to migrate a application from Spring Boot 1.4.4 to 1.5.1 and found a problem using a third party library. The problem is that the lib use a `@Inject javax.validation.ValidatorFactory`, and Spring Boot 1.5.1 now have 2 beans of this type, and none is `@Primary`. (from the /beans actuator):  ```json {   "bean":"validator",   "aliases":[],   "scope":"singleton",   "type":"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean",   "resource":"class path resource [org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]",   "dependencies":[] }, {   "bean":"mvcValidator",   "aliases":[],   "scope":"singleton",   "type":"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean",   "resource":"class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]",   "dependencies":[] } ```  This generate the follow exception: ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cz.jirutka.validator.collection.CommonEachValidator': Unsatisfied dependency expressed through field 'factory'; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'javax.validation.ValidatorFactory' available: expected single matching bean but found 2: mvcValidator,validator ```  One solution could be mark one of this beans as `@Primary`.</body>
		<created>2017-02-07 18:28:13</created>
		<closed>2017-02-27 18:10:19</closed>
	</bug>
	<bug>
		<id>8222</id>
		<title>DatabaseDriver does not detect Microsoft SQL Server properly</title>
		<body>See https://jira.spring.io/browse/BATCH-2577</body>
		<created>2017-02-07 17:34:29</created>
		<closed>2017-02-08 13:06:02</closed>
	</bug>
	<bug>
		<id>8200</id>
		<title>Fix couchbase auto-configuration</title>
		<body>This commit https://github.com/spring-projects/spring-data-couchbase/commit/d62f4bbe8c7d4aed544934ebf795aa1e90fcd8ed#diff-4564410042dc9bc9eb4fdd6680204b82 has broken things.  Looks like `SpringBootCouchbaseDataConfiguration` needs to extend `AbstractCouchbaseConfiguration` now. We also need a `getBootstrapHosts()` method (but I don't know what it should return).</body>
		<created>2017-02-06 06:28:38</created>
		<closed>2017-02-07 11:03:57</closed>
	</bug>
	<bug>
		<id>8197</id>
		<title>endpoints.configprops.keys-to-sanitize not working with array objects</title>
		<body>I am using spring-boot-actuator-1.4.2.  I have a configuration having an array of objects, containing a configuration of a pool of connections. When I try to hide a property named "pass", but nothing happens when I set this property:  ```yaml endpoints:   configprops:     keys-to-sanitize: pass ```  My example configuration:  ```yaml app:   data:     pool:       maxTotal: 10       maxWaitMillis: 30000          poolData:     - poolName: poolSPAIN       user: user_spain       pass: the_spain_pass       domain: mydomain.es       url: https://exampleurl.es        - poolName: poolUK       user: user_uk       pass: the_uk_pass       domain: mydomain.uk       ewsUrl: https://otherurl.uk ```  I think that is needed an improvement in the method `private Map&lt;String, Object&gt; sanitize(String prefix, Map&lt;String, Object&gt; map)` of class: `ConfigurationPropertiesReportEndpoint`, or an improvement in the method `public Object sanitize(String key, Object value)` of class: `Sanitizer` (package: `org.springframework.boot.actuate.endpoint`), because it seems that they don't consider that an object could be an array. </body>
		<created>2017-02-05 09:58:02</created>
		<closed>2017-02-08 17:31:48</closed>
	</bug>
	<bug>
		<id>8187</id>
		<title>`@EnableConfigurationProperties` doesn't look in the parent context</title>
		<body>When `@EnableConfigurationProperties(Foo.properties)` is processed in a child/context setup (typically when the management port is set), two bean instances of `Foo` are created. One in the parent context and one in the child.  The reason why another bean instance is created in the child is because the post-processor only looks in the current registry.</body>
		<created>2017-02-03 11:11:15</created>
		<closed>2017-02-06 10:40:45</closed>
	</bug>
	<bug>
		<id>8181</id>
		<title>BasicBatchConfigurer throws NoClassDefFoundError if JpaTransactionManager class not exists</title>
		<body>Hello,  We are using spring-batch in our project, but however we have no dependency to "org.springframework.orm.jpa.JpaTransactionManager".  In BasicBatchConfigurer class, JpaTransactionManager used directly. I think it should be delegated to inner class, for avoiding hard dependency on orm.  "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.HibernateValidatorDelegate" an example usage for this.  Thank you.</body>
		<created>2017-02-02 12:00:31</created>
		<closed>2017-02-13 12:38:02</closed>
	</bug>
	<bug>
		<id>8165</id>
		<title>Dependency management for spring-boot-test-support is public and appears in the documentation</title>
		<body>Our internal, unpublished testing module (`spring-boot-test-support`) is listed in `spring-boot-dependencies` which means that it's public. For example, it's [listed in the documented](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix-dependency-versions).  We should move it to `spring-boot-parent`</body>
		<created>2017-02-01 09:57:21</created>
		<closed>2017-02-08 14:01:49</closed>
	</bug>
	<bug>
		<id>8164</id>
		<title>BeanCurrentlyInCreationFailureAnalyzer doesn't always correctly detect the cycle's starting point</title>
		<body>[This example](https://github.com/cppwfs/registrarissue) from @cppwfs produces this output:  ``` |  dataSourceInitializerPostProcessor (field private org.springframework.beans.factory.BeanFactory org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.beanFactory) ↑     ↓ |  testBeanB0 ↑     ↓ |  myConfiguration (field private javax.sql.DataSource io.spring.MyConfiguration.dataSource) ↑     ↓ |  testBeanB1 ↑     ↓ |  testBeanA └─────┘ ```  The `┌─────┐` at the top of the cycle diagram is missing.</body>
		<created>2017-02-01 09:02:25</created>
		<closed>2017-06-02 10:26:30</closed>
	</bug>
	<bug>
		<id>8163</id>
		<title>TestRestTemplate does the url (percent) encoding twice</title>
		<body>When sending request to url that contains characters that need to be encoded TestRestTemplate does the encoding twice. For example when sending GET to `http://localhost?param={something}` the correct url string should be `http://localhost?param=%7Bsomething%7D` but is `http://localhost?param=%257Bsomething%257D`  This is my typical usage in tests (groovy): ```groovy def entity = RequestEntity   .get(UriComponentsBuilder     .fromHttpUrl("http://localhost")     .queryParam("param", "{something}")     .build()     .toUri()   )   .build() ResponseEntity&lt;Object&gt; resp = rest.exchange(entity, Object) ```  This bug is introduced by #7891. (Also it works OK in 1.4.3 and is broken in 1.4.4 and 1.5.1) Method `createRequestEntityWithExpandedUri` first transforms the url to string and then parses it again.  This code mimics what TestRestTemplate does and you can check the difference between expected and actual result: ```groovy def uri = UriComponentsBuilder   .fromHttpUrl("http://localhost")   .queryParam("param", "{something}")   .build()   .toUri()  def e1 = RequestEntity   .get(uri)   .build()  def handler = new LocalHostUriTemplateHandler(new MockEnvironment())  def expandedUri = handler.expand(e1.url.toString())  def e2 = new RequestEntity(   e1.body, e1.headers, e1.method, expandedUri, e1.type )  println uri       // expected println e2.url  // actual ```</body>
		<created>2017-02-01 08:48:43</created>
		<closed>2017-02-02 13:48:55</closed>
	</bug>
	<bug>
		<id>8152</id>
		<title>UnableToRegisterMBeanException with Actuator 1.5.1</title>
		<body>Hi,  my main method looks like this:  ```java new SpringApplicationBuilder()             .sources(ParentContextConfig.class)             .child(ChildContextConfig.class)             .run(args); ```  where both config classes are annotated with `@SpringBootApplication` only. It's a Spring starter project with `spring-boot-starter-actuator` and `spring-boot-starter-web` as dependencies.  After upgrading to `1.5.1.RELEASE` (from `1.4.3.RELEASE`) I'm getting the following exception when starting the app:  ``` 2017-01-31 16:12:29.100 ERROR 7056 --- [           main] o.s.b.a.e.jmx.EndpointMBeanExporter      : Could not register JmxEndpoint [auditEventsEndpoint]  org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.boot.actuate.endpoint.jmx.AuditEventsJmxEndpoint@5c0f79f0] with key 'auditEventsEndpoint'; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Endpoint,name=auditEventsEndpoint at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:628) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.registerJmxEndpoints(EndpointMBeanExporter.java:174) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.locateAndRegisterEndpoints(EndpointMBeanExporter.java:162) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.doStart(EndpointMBeanExporter.java:158) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.start(EndpointMBeanExporter.java:335) [spring-boot-actuator-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE] at com.alex.demo.act.ActTestApplication.main(ActTestApplication.java:16) [classes/:na] Caused by: javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Endpoint,name=auditEventsEndpoint at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437) ~[na:1.8.0_102] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898) ~[na:1.8.0_102] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966) ~[na:1.8.0_102] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900) ~[na:1.8.0_102] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324) ~[na:1.8.0_102] at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522) ~[na:1.8.0_102] at org.springframework.jmx.support.MBeanRegistrationSupport.doRegister(MBeanRegistrationSupport.java:195) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:682) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:618) ~[spring-context-4.3.6.RELEASE.jar:4.3.6.RELEASE] ... 18 common frames omitted ```  The issue is reproducible with this sample: https://github.com/stojsavljevic/multi-ctx/tree/master/multi-ctx-app-builder If necessary, I can provide even more simple app.</body>
		<created>2017-01-31 15:24:17</created>
		<closed>2017-01-31 21:27:28</closed>
	</bug>
	<bug>
		<id>8150</id>
		<title>Warning still shown after annotating @ConfigurationProperties class with @Validated</title>
		<body>I have a class annotated with `@ConfigurationProperties` and `@Configuration`. After upgrading Spring Boot to 1.5.1.RELEASE I added `@Validated`, as suggested in the release notes, however I still get the warning:  `o.s.b.c.p.ConfigurationPropertiesBindingPostProcessor: The @ConfigurationProperties bean class xx.xx.xx.xx.xx.JettyThreadPoolSettings$$EnhancerBySpringCGLIB$$3ccc6d2 contains validation constraints but had not been annotated with @Validated.`  The class:  ```java import lombok.Getter; import lombok.Setter; import org.hibernate.validator.constraints.Range; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Configuration; import org.springframework.validation.annotation.Validated;  import javax.validation.constraints.Min;  @Validated @Getter @Setter @Configuration @ConfigurationProperties(prefix = "jetty.threadPool") class JettyThreadPoolSettings {      @Range(min = 1, max = 1024)     private int minThreads = 8;     @Range(min = 1, max = 1024)     private int maxThreads = 64;     @Min(0)     private int idleTimeout = 30000; // milliseconds     private boolean detailedDump = false; } ```  For a class annotated with `@ConfigurationProperties` and `@Component`, the warning disappeared:  ```java @Validated @Component @ConfigurationProperties(prefix = "swagger") @Setter @Getter @Profile({ "local", "qa", "dev" }) class SwaggerSettings {      @NotBlank     private String host;     @NotBlank     private String scheme; } ```</body>
		<created>2017-01-31 13:35:49</created>
		<closed>2017-02-01 01:15:01</closed>
	</bug>
	<bug>
		<id>8149</id>
		<title>Invalid target for Validator with @ConfigurationProperties on Map</title>
		<body>Spring Boot 1.5.1.RELEASE  Application fails to start when configuration contains `Map` bean annotated with `@ConfigurationProperties` (with prefix).  Same code works with Spring Boot 1.4.4.RELEASE.  Exception:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'map': Could not bind properties to HashMap (prefix=map, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is java.lang.IllegalStateException: Invalid target for Validator [org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor$ValidatedLocalValidatorFactoryBean@376b4233]: org.springframework.boot.bind.RelaxedDataBinder$MapHolder@2fd66ad3         at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:334) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:296) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at app.Application.main(Application.java:24) [classes!/:1.0-SNAPSHOT]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]         at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [app-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [app-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [app-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [app-1.0-SNAPSHOT.jar:1.0-SNAPSHOT] Caused by: java.lang.IllegalStateException: Invalid target for Validator [org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor$ValidatedLocalValidatorFactoryBean@376b4233]: org.springframework.boot.bind.RelaxedDataBinder$MapHolder@2fd66ad3         at org.springframework.validation.DataBinder.assertValidators(DataBinder.java:567) ~[spring-context-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.validation.DataBinder.setValidator(DataBinder.java:558) ~[spring-context-4.3.6.RELEASE.jar!/:4.3.6.RELEASE]         at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:257) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:329) ~[spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]         ... 27 common frames omitted ```  *Example*  `pom.xml`:  ```xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;test&lt;/groupId&gt;     &lt;artifactId&gt;app&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;      &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;     &lt;/parent&gt;      &lt;properties&gt;         &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;      &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;  &lt;/project&gt; ```  `src/main/java/app/Application.java`:  ```java package app;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import java.util.HashMap; import java.util.Map;  @SpringBootApplication @RestController public class Application {      @Bean     @ConfigurationProperties(prefix = "map")     public Map&lt;String, String&gt; map() {         return new HashMap&lt;&gt;();     }      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }      @RequestMapping("/")     public Map&lt;String, String&gt; index() throws Exception {         return map();     }  } ```  `application.yml`:  ```yaml map:   key1: "value1"   key2: "value2"   key3: "value3" ```  </body>
		<created>2017-01-31 12:19:32</created>
		<closed>2017-02-06 02:14:12</closed>
	</bug>
	<bug>
		<id>8146</id>
		<title>Actuator's beans endpoint returns empty array when app is launched in STS</title>
		<body>Hi,  After upgrading to `1.5.1.RELEASE` from `1.4.3.RELEASE` Actuator's _beans_ endpoint returns empty array for all applications I have. I disabled security. Other endpoints seem to work fine.  The easiest way to reproduce the issue is to create Spring starter project with `spring-boot-starter-actuator` and `spring-boot-starter-web` as dependencies and set `management.security.enabled=false`. Request to http://localhost:8080/beans just returns [].</body>
		<created>2017-01-31 11:15:40</created>
		<closed>2017-02-08 20:51:10</closed>
	</bug>
	<bug>
		<id>8140</id>
		<title>Unable to run application due missing asset.notNull method</title>
		<body>Bug report  Application built with spring boot version 2.0.0-BUILD-SNAPSHOT cannot start due missing Assert.notNull(single argument) method  ``` java.lang.NoSuchMethodError: org.springframework.util.Assert.notNull(Ljava/lang/Object;)V at org.springframework.boot.bind.PropertiesConfigurationFactory.&lt;init&gt;(PropertiesConfigurationFactory.java:92) ~[spring-boot-2.0.0.BUILD-20170130.202942-338.jar:2.0.0.BUILD-SNAPSHOT] ```  </body>
		<created>2017-01-30 22:53:13</created>
		<closed>2017-01-31 10:44:02</closed>
	</bug>
	<bug>
		<id>8125</id>
		<title>TypeExcludeFiltersContextCustomizer cache key is incorrect</title>
		<body>The key used in `TypeExcludeFiltersContextCustomizer` is incorrect as it only includes the `TypeExcludeFilter` class. The problem is that `TypeExcludeFilter` implementations are free to read annotations from the source class and make additional decisions.  For example  ```java @JdbcTest(includeFilters = @Filter(Repository.class)) ```  results in the same key as  ``` @JdbcTest ```</body>
		<created>2017-01-28 01:14:16</created>
		<closed>2017-01-28 01:50:18</closed>
	</bug>
	<bug>
		<id>8119</id>
		<title>Ordering management context configuration classes logs unwanted INFO messages</title>
		<body>``` 2017-01-26 17:31:28.490  INFO 48464 --- [           main] o.s.core.annotation.AnnotationUtils      : Failed to introspect annotations on [class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration]: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy 2017-01-26 17:31:28.490  INFO 48464 --- [           main] o.s.core.annotation.AnnotationUtils      : Failed to introspect annotations on [class org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration]: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy ```</body>
		<created>2017-01-26 18:33:21</created>
		<closed>2017-01-26 20:31:52</closed>
	</bug>
	<bug>
		<id>8100</id>
		<title>AbstractEmbeddedServletContainerFactory.getExplodedWarFileDocumentRoot() doesn't work on Windows</title>
		<body>I'm using Spring Boot 1.4.3.RELEASE, but the same code exists unchanged on the master branch.  In [`AbstractEmbeddedServletContainerFactory.getExplodedWarFileDocumentRoot()`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java#L90-L95) is the following check:  ```java if (file != null &amp;&amp; file.exists() &amp;&amp; file.getAbsolutePath().contains("/WEB-INF/")) { String path = file.getAbsolutePath(); path = path.substring(0, path.indexOf("/WEB-INF/")); return new File(path); } ```  If I unzip a Spring Boot "thick war" and run `java org.springframework.boot.loader.WarLauncher` ([as described here](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#executable-jar-exploded-archives)), it works on Linux (where / is the file separator) but fails on Windows because the path contains "\\WEB-INF\\" instead.</body>
		<created>2017-01-24 21:09:14</created>
		<closed>2017-01-25 11:27:47</closed>
	</bug>
	<bug>
		<id>8036</id>
		<title>EmbeddedServletContainer.start() causes errors if called multiple times</title>
		<body>As stated in the docs this should not create errors, specifically port binding errors with undertow but looking at the code it will most likely fail with other containers as well.   &gt; Calling this method on an already started container has no effect.  ``` public interface EmbeddedServletContainer {  /**  * Starts the embedded servlet container. Calling this method on an already started  * container has no effect.  * @throws EmbeddedServletContainerException if the container cannot be started  */ void start() throws EmbeddedServletContainerException;         ... } ```  I am trying to start the embedded container very early by manually calling `start()` but the `EmbeddedWebApplicationContext` will always call `start()` again and the application fails to start. Implementations of `EmbeddedServletContainer` should safe guard from this behavior. </body>
		<created>2017-01-19 20:12:51</created>
		<closed>2017-01-26 06:24:32</closed>
	</bug>
	<bug>
		<id>8019</id>
		<title>Request Header filtering in WebRequestTraceFilter not case insensitive</title>
		<body>Http header field names are case insensitive and this line does not take that into account: https://github.com/spring-projects/spring-boot/blob/782ded9c8c362f9b7ed3c31c1c687dc3655df6b0/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java#L167-L167</body>
		<created>2017-01-18 20:22:05</created>
		<closed>2017-01-20 16:58:36</closed>
	</bug>
	<bug>
		<id>8011</id>
		<title>SpringProfileDocumentMatcher does not work as expected</title>
		<body>The following issue appears with Spring Boot 1.4.3:  Given a YAML configuration like  ``` someValue: 4711  example:     greeting: Hello, World! --- spring:     profiles: demo1 example:     greeting: Hello, Demo1!  --- spring:     profiles: demo2 example:     greeting: Hello, Demo2!  --- spring:     profiles: "!demo2" someValue: 2109 ```  (Full configuration and properties class in [example project extconfig](https://github.com/springbootbuch/extconfig) see: [application.yml](https://github.com/springbootbuch/extconfig/blob/19350c9bad0f4c6aeecb51724f44e5613d3238f4/src/main/resources/application.yml) and [ExampleConfiguration](https://github.com/springbootbuch/extconfig/blob/19350c9bad0f4c6aeecb51724f44e5613d3238f4/src/main/java/de/springbootbuch/extconfig/ExampleConfiguration.java))  and run with `java -jar target/extconfig.jar` I expect `someValue` to be 2109: The negated profile !demo2 overwriting the value of 4711.  run with `java -jar target/extconfig.jar --spring.profiles.active=demo2` I expect `someValue` to be 4711 as it is set in the default, not overwritten in demo2 (not set) and not overwritten bei !demo2. The same is expected for the other parts of the configuration.  In contrast to my expectations, I get in both cases 2109.  The project linked above contains a test class [NegatedProfilesTest](https://github.com/springbootbuch/extconfig/blob/b9d47497af37de63d1b213fbd3894b307cde3a52/src/test/java/de/springbootbuch/extconfig/NegatedProfilesTest.java) that fails.</body>
		<created>2017-01-17 19:26:42</created>
		<closed>2018-02-21 09:58:01</closed>
	</bug>
	<bug>
		<id>8010</id>
		<title>ClassLoaderFilesResourcePatternResolver should delegate to a user's custom resource loader</title>
		<body>If a user has configured a custom resource loader, DevTools replaces it with `ClassLoaderFilesResourcePatternResolver` and the custom behavior is lost. We should really delegate to the user's custom resource loader if they've set one. Unfortunately, there's no getter for the resource loader so we'd have to resort to a reflective hack at the moment.</body>
		<created>2017-01-17 17:39:31</created>
		<closed>2017-01-19 09:28:45</closed>
	</bug>
	<bug>
		<id>7981</id>
		<title>SpringBootRepositoryRestConfigurer may override a user's programmatic configuration</title>
		<body>I switched my version of spring boot from 1.4.3 to 1.5.0.RC and looks like spring data rest ignoring RepositoryDetectionStrategy:  i have defined repository: ```java public interface UserRepository extends JpaRepository&lt;User, Long&gt; {     Optional&lt;User&gt; findOneByUsername(String username); } ``` and configuration: ```java @Configuration public class SpringRestConfiguration extends RepositoryRestConfigurerAdapter {     @Override     public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {         config.setRepositoryDetectionStrategy(RepositoryDetectionStrategy.RepositoryDetectionStrategies.ANNOTATED);     } } ```  I verified that configuration was called and switched but looks like was ignored:  1.4.3 ```json { "_links": { "profile": { "href": "http://localhost:8080/api/profile" } } } ``` 1.5.0.RC ```json { "_links": { "users": { "href": "http://localhost:8080/api/users{?page,size,sort}", "templated": true }, "profile": { "href": "http://localhost:8080/api/profile" } } } ```</body>
		<created>2017-01-13 15:14:53</created>
		<closed>2017-01-16 09:42:13</closed>
	</bug>
	<bug>
		<id>7956</id>
		<title>If a FailureAnalyzer throws an exception, we give up</title>
		<body>We defensively load `FailureAnalyzer` instances to discard those that require a dependency that's not on the classpath. But we can have a valid `FailureAnalyzer` that actually throws an exception while checking if it can handle the request.   If that happens, we just stop and we don't attempt to invoke other instances down the road that might be able to process it. That exception isn't logged anywhere either.</body>
		<created>2017-01-11 21:05:03</created>
		<closed>2017-01-13 20:32:21</closed>
	</bug>
	<bug>
		<id>7949</id>
		<title>Resource resolution may fail in executable war that embeds Tomcat</title>
		<body>When packaging a spring boot web application as a WAR, then starting it as a standalone app using `java -jar example.war`, the application seems to start fine, but when trying to open any page I get a status 500 Internal Server Error. The log shows the stacktrace below.  This is broken in 1.4.2.RELEASE, 1.4.3.RELEASE and 1.5.0.RC1. It works fine in 1.4.1.RELEASE and older.  I've prepared a minimal case, found at https://github.com/jvdmr/spring-boot-war-example  Stacktrace:  ``` 2017-01-11 13:44:41.505  WARN 57907 --- [nio-8080-exec-1] .i.s.PathMatchingResourcePatternResolver : Cannot search for matching files underneath URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] because it does not correspond to a directory in the file system  java.io.FileNotFoundException: URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] cannot be resolved to absolute file path because it does not reside in the file system: war:file:/Users/jvdmr/spring-boot-war-example/target/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:52) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.UrlResource.getFile(UrlResource.java:213) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:685) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.context.support.ServletContextResourcePatternResolver.doFindPathMatchingFileResources(ServletContextResourcePatternResolver.java:92) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:477) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:292) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResources(SpringWildcardServletTilesApplicationContext.java:77) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResource(SpringWildcardServletTilesApplicationContext.java:66) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:232) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:225) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:225) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:203) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitions(CachingLocaleUrlDefinitionDAO.java:192) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.ResolvingLocaleUrlDefinitionDAO.loadDefinitions(ResolvingLocaleUrlDefinitionDAO.java:68) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.checkAndloadDefinitions(CachingLocaleUrlDefinitionDAO.java:174) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinitions(CachingLocaleUrlDefinitionDAO.java:131) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:105) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:49) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory.getDefinition(UnresolvingLocaleDefinitionsFactory.java:89) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.getDefinition(BasicTilesContainer.java:286) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.isValidDefinition(BasicTilesContainer.java:273) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.renderer.DefinitionRenderer.isRenderable(DefinitionRenderer.java:64) [tiles-core-3.0.5.jar!/:3.0.5] at org.springframework.web.servlet.view.tiles3.TilesView.checkResource(TilesView.java:116) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:509) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:244) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:472) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:156) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:299) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:220) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1296) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1234) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]  2017-01-11 13:44:41.587  INFO 57907 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : No resources found for path pattern: war:file:/Users/jvdmr/spring-boot-war-example/target/spring-boot-war-example-0.1.war*/WEB-INF/tiles/tiles.xml 2017-01-11 13:44:41.590  WARN 57907 --- [nio-8080-exec-1] .i.s.PathMatchingResourcePatternResolver : Cannot search for matching files underneath URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] because it does not correspond to a directory in the file system  java.io.FileNotFoundException: URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] cannot be resolved to absolute file path because it does not reside in the file system: war:file:/Users/jvdmr/spring-boot-war-example/target/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:52) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.UrlResource.getFile(UrlResource.java:213) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:685) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.context.support.ServletContextResourcePatternResolver.doFindPathMatchingFileResources(ServletContextResourcePatternResolver.java:92) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:477) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:292) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResources(SpringWildcardServletTilesApplicationContext.java:77) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResource(SpringWildcardServletTilesApplicationContext.java:66) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:232) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:225) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:203) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitions(CachingLocaleUrlDefinitionDAO.java:192) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.ResolvingLocaleUrlDefinitionDAO.loadDefinitions(ResolvingLocaleUrlDefinitionDAO.java:68) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.checkAndloadDefinitions(CachingLocaleUrlDefinitionDAO.java:174) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinitions(CachingLocaleUrlDefinitionDAO.java:131) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:105) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:49) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory.getDefinition(UnresolvingLocaleDefinitionsFactory.java:89) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.getDefinition(BasicTilesContainer.java:286) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.isValidDefinition(BasicTilesContainer.java:273) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.renderer.DefinitionRenderer.isRenderable(DefinitionRenderer.java:64) [tiles-core-3.0.5.jar!/:3.0.5] at org.springframework.web.servlet.view.tiles3.TilesView.checkResource(TilesView.java:116) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:509) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:244) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:472) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:156) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:299) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:220) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1296) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1234) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]  2017-01-11 13:44:41.836  INFO 57907 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : No resources found for path pattern: war:file:/Users/jvdmr/spring-boot-war-example/target/spring-boot-war-example-0.1.war*/WEB-INF/tiles/tiles_en.xml 2017-01-11 13:44:41.838  WARN 57907 --- [nio-8080-exec-1] .i.s.PathMatchingResourcePatternResolver : Cannot search for matching files underneath URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] because it does not correspond to a directory in the file system  java.io.FileNotFoundException: URL [war:file:/Users/jvdmr/spring-boot-war-example/target/] cannot be resolved to absolute file path because it does not reside in the file system: war:file:/Users/jvdmr/spring-boot-war-example/target/ at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:52) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.UrlResource.getFile(UrlResource.java:213) ~[spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingFileResources(PathMatchingResourcePatternResolver.java:685) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.context.support.ServletContextResourcePatternResolver.doFindPathMatchingFileResources(ServletContextResourcePatternResolver.java:92) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:477) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:292) [spring-core-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResources(SpringWildcardServletTilesApplicationContext.java:77) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext.getResource(SpringWildcardServletTilesApplicationContext.java:66) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadRawDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:232) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitionsFromResources(CachingLocaleUrlDefinitionDAO.java:203) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.loadDefinitions(CachingLocaleUrlDefinitionDAO.java:192) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.ResolvingLocaleUrlDefinitionDAO.loadDefinitions(ResolvingLocaleUrlDefinitionDAO.java:68) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.checkAndloadDefinitions(CachingLocaleUrlDefinitionDAO.java:174) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinitions(CachingLocaleUrlDefinitionDAO.java:131) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:105) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.dao.CachingLocaleUrlDefinitionDAO.getDefinition(CachingLocaleUrlDefinitionDAO.java:49) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory.getDefinition(UnresolvingLocaleDefinitionsFactory.java:89) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.getDefinition(BasicTilesContainer.java:286) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.impl.BasicTilesContainer.isValidDefinition(BasicTilesContainer.java:273) [tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.renderer.DefinitionRenderer.isRenderable(DefinitionRenderer.java:64) [tiles-core-3.0.5.jar!/:3.0.5] at org.springframework.web.servlet.view.tiles3.TilesView.checkResource(TilesView.java:116) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.loadView(UrlBasedViewResolver.java:509) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:244) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.UrlBasedViewResolver.createView(UrlBasedViewResolver.java:472) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:156) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:299) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:220) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1296) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1234) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]  2017-01-11 13:44:41.994  INFO 57907 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : No resources found for path pattern: war:file:/Users/jvdmr/spring-boot-war-example/target/spring-boot-war-example-0.1.war*/WEB-INF/tiles/tiles_en_US.xml 2017-01-11 13:44:42.983 ERROR 57907 --- [nio-8080-exec-1] o.a.c.c.C.[.[localhost].[/].[jsp]        : Servlet.service() for servlet jsp threw exception  org.apache.tiles.definition.NoSuchDefinitionException: Unable to find the definition 'public' at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:218) ~[tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.template.InsertDefinitionModel.renderDefinition(InsertDefinitionModel.java:132) ~[tiles-template-3.0.5.jar!/:3.0.5] at org.apache.tiles.template.InsertDefinitionModel.execute(InsertDefinitionModel.java:99) ~[tiles-template-3.0.5.jar!/:3.0.5] at org.apache.tiles.jsp.taglib.InsertDefinitionTag.doTag(InsertDefinitionTag.java:254) ~[tiles-jsp-3.0.5.jar!/:3.0.5] at org.apache.jsp.WEB_002dINF.jsp.index_jsp._jspx_meth_tiles_005finsertDefinition_005f0(index_jsp.java:152) ~[na:na] at org.apache.jsp.WEB_002dINF.jsp.index_jsp._jspService(index_jsp.java:119) ~[na:na] at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:726) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:469) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:394) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:311) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:168) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1257) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]  2017-01-11 13:44:42.989 ERROR 57907 --- [nio-8080-exec-1] o.s.boot.web.support.ErrorPageFilter     : Forwarding to error page from request [/] due to exception [org.apache.tiles.definition.NoSuchDefinitionException: Unable to find the definition 'public']  org.apache.jasper.JasperException: org.apache.tiles.definition.NoSuchDefinitionException: Unable to find the definition 'public' at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:483) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:726) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:469) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:394) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:311) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:168) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1257) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1037) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:980) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:115) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:90) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.5.RELEASE.jar!/:4.3.5.RELEASE] at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:108) [spring-boot-1.5.0.RC1.jar!/:1.5.0.RC1] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar!/:8.5.6] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101] Caused by: org.apache.tiles.definition.NoSuchDefinitionException: Unable to find the definition 'public' at org.apache.tiles.impl.BasicTilesContainer.render(BasicTilesContainer.java:218) ~[tiles-core-3.0.5.jar!/:3.0.5] at org.apache.tiles.template.InsertDefinitionModel.renderDefinition(InsertDefinitionModel.java:132) ~[tiles-template-3.0.5.jar!/:3.0.5] at org.apache.tiles.template.InsertDefinitionModel.execute(InsertDefinitionModel.java:99) ~[tiles-template-3.0.5.jar!/:3.0.5] at org.apache.tiles.jsp.taglib.InsertDefinitionTag.doTag(InsertDefinitionTag.java:254) ~[tiles-jsp-3.0.5.jar!/:3.0.5] at org.apache.jsp.WEB_002dINF.jsp.index_jsp._jspx_meth_tiles_005finsertDefinition_005f0(index_jsp.java:152) ~[na:na] at org.apache.jsp.WEB_002dINF.jsp.index_jsp._jspService(index_jsp.java:119) ~[na:na] at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar!/:8.5.6] at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443) ~[tomcat-embed-jasper-8.5.6.jar!/:8.5.6] ... 83 common frames omitted ```</body>
		<created>2017-01-11 12:58:33</created>
		<closed>2017-03-24 12:31:41</closed>
	</bug>
	<bug>
		<id>7926</id>
		<title>Fix git-commit-id-plugin version</title>
		<body>It's declared in `spring-boot-starter-parent` and `spring-boot-dependencies` with different versions.  ```xml &lt;plugin&gt; &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt; &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt; &lt;version&gt;2.1.11&lt;/version&gt; &lt;/plugin&gt; ```</body>
		<created>2017-01-09 20:17:40</created>
		<closed>2017-01-13 23:59:11</closed>
	</bug>
	<bug>
		<id>7925</id>
		<title>Wrong type for the value of javax.servlet.error.exception_type</title>
		<body>According to http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-eval-oth-JSpec/servlet-3_0-final-spec.pdf, p.10.9.1, table 10-1 the type of the value of `javax.servlet.error.exception_type` should be:  Request Attributes | Type --------------------------|---------------------- javax.servlet.error.status_code | java.lang.Integer javax.servlet.error.exception_type | **java.lang.Class** javax.servlet.error.message | java.lang.String javax.servlet.error.exception | java.lang.Throwable javax.servlet.error.request_uri | java.lang.String javax.servlet.error.servlet_name | java.lang.String   https://github.com/spring-projects/spring-boot/blob/598eca7e0fe73e7ed763386452a41884d95f44f1/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java#L180 currently sets it as a java.lang.String, i.e. the name of the class.</body>
		<created>2017-01-09 19:40:32</created>
		<closed>2017-01-13 20:18:52</closed>
	</bug>
	<bug>
		<id>7920</id>
		<title>ErrorPageFilter is not working with redirects in a standalone tomcat</title>
		<body>I have a custom *ErrorController* to overwrite the *errorHtml* method.  In this method I would like to redirect to a different URL. Therefore, I am using a RedirectView.  If I run this application with the embedded Tomcat I get redirected to the correct URL. However if the application is deployed to a standalone Tomcat I get the tomcat error page.  I think the *ErrorPageFilter* isn't handling this case correctly.  I created a GIST over [here](https://gist.github.com/LeovR/008b699d21013b529f2a5b12128b8632).  I am using Spring Boot 1.4.3</body>
		<created>2017-01-09 16:09:23</created>
		<closed>2017-02-08 12:01:31</closed>
	</bug>
	<bug>
		<id>7891</id>
		<title>TestRestTemplate does not resolve relative links with java.net.URI parameter</title>
		<body>According to the [documentation](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing-spring-boot-applications-working-with-random-ports), when using `@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)` `TestRestTemplate` will resolve relative links to the running server.  This works when calling `TestRestTemplate` with a String parameter for the uri. When using the methods that take a `java.net.URI` I get `org.apache.http.ProtocolException: Target host is not specified`</body>
		<created>2017-01-05 17:03:25</created>
		<closed>2017-01-19 10:59:09</closed>
	</bug>
	<bug>
		<id>7882</id>
		<title>Configuration processor has a compiletime dependency on spring-core</title>
		<body>It should just be a test scope dependency.</body>
		<created>2017-01-05 06:30:17</created>
		<closed>2017-01-05 19:31:26</closed>
	</bug>
	<bug>
		<id>7880</id>
		<title>DevTools exposes every file in classpath</title>
		<body>When I create a Spring Boot web application with DevTools in pom.xml every file on the classpath is exposed as static file to download. The documentation states:  &gt; Developer tools are automatically disabled when running a fully packaged application. If your application is launched using java -jar or if it’s started using a special classloader, then it is considered a “production application”.  But even when I run the application with java -jar every file is accessible to download. I have attached a simple demo project to illustrate this.  If you run the demo project for example with mvn spring-boot:run or by compiling it to a jar file and then java -jar, you can access the application.properties file in the browser under http://localhost:8080/application.properties.   Using SpringBoot Version 1.4.3 ``` $ java -version java version "1.8.0_111" Java(TM) SE Runtime Environment (build 1.8.0_111-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode) ```  [devtools-exposes-files.zip](https://github.com/spring-projects/spring-boot/files/686363/devtools-exposes-files.zip) </body>
		<created>2017-01-05 03:48:38</created>
		<closed>2017-01-06 07:41:35</closed>
	</bug>
	<bug>
		<id>7868</id>
		<title>Nested actuator paths always require authentication</title>
		<body>With Spring Security on the classpath, even if the actuator endpoint is not sensitive, the nested paths are considered sensitive. To reproduce, set `endpoints.env.sensitive=false`. `/env` can be accessed without authentication but `/env/user` requires authentication.  </body>
		<created>2017-01-04 16:12:05</created>
		<closed>2017-01-06 07:41:35</closed>
	</bug>
	<bug>
		<id>7814</id>
		<title>Incorrect factories order in ManagementContextConfigurationsImportSelector</title>
		<body>Spring Boot 1.4.2.RELEASE  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextConfigurationsImportSelector.java#L50-L53  In this lines `List&lt;String&gt;` are sorted as `List&lt;Class`&gt;, so, all ordering-related annotations on `ManagementContextConfiguration`s just ignored.</body>
		<created>2017-01-03 12:11:13</created>
		<closed>2017-01-03 23:15:00</closed>
	</bug>
	<bug>
		<id>7813</id>
		<title>Duplicate MBean for audit events</title>
		<body>Getting this from the actuator sample:  ``` 2017-01-03 09:41:53.807 ERROR 7840 --- [           main] o.s.b.a.e.jmx.EndpointMBeanExporter      : Could not register JmxEndpoint [abstractEndpointMBean]  org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.boot.actuate.endpoint.jmx.AuditEventsJmxEndpoint@6b88ca8c] with key 'abstractEndpointMBean'; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.boot.actuate.endpoint.jmx:name=abstractEndpointMBean,type=AuditEventsJmxEndpoint     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625)     at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.registerJmxEndpoints(EndpointMBeanExporter.java:171)     at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.locateAndRegisterEndpoints(EndpointMBeanExporter.java:159)     at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.doStart(EndpointMBeanExporter.java:155)     at org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter.start(EndpointMBeanExporter.java:332)     at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173)     ... ```  Seems to be related to #6579 (Seems like that change registers an MBean manually, and then another one is registered automatically by `EndpointMBeanExporter`).</body>
		<created>2017-01-03 10:00:49</created>
		<closed>2017-01-03 23:15:00</closed>
	</bug>
	<bug>
		<id>7812</id>
		<title>TestRestTemplate.withBasicAuth(...) does not remove BasicAuthInterceptor if present</title>
		<body>Following code in `TestRestTemplate` (starting at line 999) does not remove `BasicAuthorizationInterceptor`'s from result, return value of the method should be **_updatedInterceptors_** instead of **_interceptors_**.  ```java private List&lt;ClientHttpRequestInterceptor&gt; removeBasicAuthInterceptorIfPresent(  List&lt;ClientHttpRequestInterceptor&gt; interceptors) {  List&lt;ClientHttpRequestInterceptor&gt; updatedInterceptors = new ArrayList&lt;ClientHttpRequestInterceptor&gt;(   interceptors);   Iterator&lt;ClientHttpRequestInterceptor&gt; iterator = updatedInterceptors.iterator();   while (iterator.hasNext()) {   if (iterator.next() instanceof BasicAuthorizationInterceptor) {   iterator.remove();   }   }   return interceptors;   }  ``` Link to Github: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java#L1009  </body>
		<created>2017-01-03 09:15:53</created>
		<closed>2017-01-03 23:15:00</closed>
	</bug>
	<bug>
		<id>7758</id>
		<title>exceptions during the preparation of the environment are not logged to log4j2</title>
		<body>its actually the same issue as https://github.com/spring-projects/spring-boot/issues/5271, I think the fix didn't work. `Log4J2LoggingSystem` installs a filter that denies all and removes it in `Log4J2LoggingSystem#initialize` that is invoked in `ApplicationEnvironmentPreparedEvent`. but if an exception is raised during the preparation of the environment then the filter is not removed yet and the exception is lost. i got it when i had an exception in an `EnvironmentPostProcessor`. you can run `sample.actuator.log4j2.SampleActuatorLog4J2Application` with this `application.yml` under resources.  ```yml --- spring:     profiles:          active: local  --- spring:     profiles: local a=test ```  but change the code of `sample.actuator.log4j2.SampleActuatorLog4J2Application` to look like that: ```java try { SpringApplication.run(SampleActuatorLog4J2Application.class, args); }catch (Throwable e){ LoggerFactory.getLogger(SampleActuatorLog4J2Application.class).error("error ",e); } ```  this is actually how our code looks like, we don't always have a main class, we initialize contexts in various ways. the exception is not logged. only if i remove the filter the exception is logged:  ```java try { SpringApplication.run(SampleActuatorLog4J2Application.class, args); }catch (Throwable e){ try { Filter filter = ((LoggerContext) LogManager.getContext(false)).getConfiguration().getFilter(); if (filter != null) { ((LoggerContext) LogManager.getContext(false)).getConfiguration().removeFilter(filter); } }catch (Throwable t){ }  LoggerFactory.getLogger(SampleActuatorLog4J2Application.class).error("error ",e); }  ```   Thanks </body>
		<created>2016-12-26 15:35:01</created>
		<closed>2017-01-26 06:24:31</closed>
	</bug>
	<bug>
		<id>7735</id>
		<title>Auto-configured MultipartConfigElement prevents CommonsMultipartResolver from resolving request parts</title>
		<body>I used Spring Boot 1.2.6 before, So I want to upgrade Spring Boot to 1.4.2 and upgrade Spring Framework to 4.3.5, when I changed my maven pom, The Apache Commons FileUpload parseRequest() returning no items.  Then I changed Spring Boot to 1.3.8  and Spring Framework to 4.2.8, the Apache Commons FileUpload can work. I don't know why. The following is my maven pom and my code.  ## Maven pom  ```       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;scope&gt;provided&lt;/scope&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-ws&lt;/artifactId&gt;         &lt;version&gt;1.3.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;         &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;         &lt;artifactId&gt;spring-security-ldap&lt;/artifactId&gt;         &lt;version&gt;4.2.0.RELEASE&lt;/version&gt;       &lt;/dependency&gt; ```  ## Code   ```    DiskFileItemFactory factory = new DiskFileItemFactory();     factory.setSizeThreshold(1 * 1024 * 1024);     File tmpDir = new File("tempfile");     if (!tmpDir.exists()) {       tmpDir.mkdir();     }     File uploadtmp = new File("uploadtmp");     if (!uploadtmp.exists()) {       uploadtmp.mkdir();     }     factory.setRepository(tmpDir);     ServletFileUpload sfu = new ServletFileUpload(factory);     sfu.setFileSizeMax(-1);     sfu.setSizeMax(-1);     sfu.setHeaderEncoding("UTF-8");     List&lt;FileItem&gt; fileItems = (List&lt;FileItem&gt;) sfu.parseRequest(request); ```  When I use Spring Boot 1.4.2 and Spring Framework 4.3.5, the fileItems is empty. </body>
		<created>2016-12-23 01:58:25</created>
		<closed>2018-06-20 12:57:53</closed>
	</bug>
	<bug>
		<id>7720</id>
		<title>ClassCastException when doing OPTIONS request on secured /heapdump endpoint </title>
		<body>Using Spring Boot 1.5.0.BUILD-SNAPSHOT-20161221.123155-242  When doing a `OPTIONS` request to a secured `/heapdump` endpoint results in an `ClassCastException` returning a HTTP 500. Sample project:[demo.zip](https://github.com/spring-projects/spring-boot/files/667025/demo.zip). Curl command: `curl -XOPTIONS http://user:pass@localhost:8080/heapdump`  When not using security everything is just doing fine!   ``` 2016-12-21 18:47:52.048 ERROR 10421 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request proc essing failed; nested exception is java.lang.ClassCastException: org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler cannot be cast to org.springframework.boot.a ctuate.endpoint.mvc.MvcEndpoint] with root cause  java.lang.ClassCastException: org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler cannot be cast to org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint         at org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor.preHandle(MvcEndpointSecurityInterceptor.java:63) ~[spring-boot-actuator-1.5.0.BUILD-SNAPSHOT.jar:1.5.0.BUILD-SNAPSH OT]         at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:958) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doOptions(FrameworkServlet.java:908) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:657) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.5.0.BUILD-SNAPSHOT.jar:1.5.0.BUILD-SNAPSHOT]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) ~[spring-boot-actuator-1.5.0.BUILD-SNAPSHOT.jar:1.5.0.BUILD-SNAPSHOT]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELE ASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:215) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0. RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]         at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) ~[spring-boot-actuator-1.5.0.BUILD-SNAPSHOT.jar:1.5.0.BUILD-SNAPSHOT]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.5.RELEASE.jar:4.3.5.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410) [tomcat-embed-core-8.5.6.jar:8.5.6]         at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.6.jar:8.5.6]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_111]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_111]         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar:8.5.6]         at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111] ```</body>
		<created>2016-12-21 17:57:10</created>
		<closed>2016-12-30 22:07:38</closed>
	</bug>
	<bug>
		<id>7719</id>
		<title>Environment variable doesn't work as part of string</title>
		<body> Cannot add PID environment variable in log message.  Exception: ``` Exception in thread "main" java.lang.IllegalArgumentException: Could not resolve placeholder 'PID' in string value "%d{yyyy-MM-dd HH:mm:ss.SSS} ${PID} %clr(%-8level) --- [%-21thread] %clr(%-80.80logger{80}){cyan} : %m%n" at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:174) at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126) at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:230) at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:204) at org.springframework.core.env.AbstractPropertyResolver.resolveNestedPlaceholders(AbstractPropertyResolver.java:221) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:80) at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:63) at org.springframework.core.env.AbstractEnvironment.getProperty(AbstractEnvironment.java:540) at org.springframework.boot.bind.RelaxedPropertyResolver.getProperty(RelaxedPropertyResolver.java:82) at org.springframework.boot.bind.RelaxedPropertyResolver.getProperty(RelaxedPropertyResolver.java:62) at org.springframework.boot.logging.LoggingSystemProperties.setSystemProperty(LoggingSystemProperties.java:67) at org.springframework.boot.logging.LoggingSystemProperties.apply(LoggingSystemProperties.java:56) at org.springframework.boot.logging.LoggingSystemProperties.apply(LoggingSystemProperties.java:48) at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:268) at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:237) at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:210) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:121) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:69) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:335) at org.springframework.boot.SpringApplication.run(SpringApplication.java:306) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1161) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1150) at org.truetraining.Launcher.main(Launcher.java:22) ```  application.yaml  ``` server:     port: 8080     context-path: /api  spring:     application:         name: ${PID}     output:       ansi:         enabled: always  logging:   file: "logs/dev_app.log"   pattern:     console: "%d{yyyy-MM-dd HH:mm:ss.SSS} ${PID} %clr(%-8level) --- [%-21thread] %clr(%-80.80logger{80}){cyan} : %m%n"     file: "%d %-5level [%thread] %logger : %msg%n"   level:     root: DEBUG     org.springframework: INFO     org.hibernate: INFO     org.apache.tomcat: INFO     org.apache.catalina: INFO ```  It works with any property if you set the whole env. var (see spring.application.name)  Spring Boot Version: tried with 2.0.0-Build-Snapshot and 1.4.2.RELEASE  All default configurations, nothing special.  Launcher: ``` @Slf4j @SpringBootApplication @EnableAutoConfiguration public class Launcher {  public static void main(String[] args) throws UnknownHostException {  ConfigurableApplicationContext run = SpringApplication.run(Launcher.class, args); Environment env = run.getEnvironment(); log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}{}\n\t" + "External: \thttp://{}:{}{}\n----------------------------------------------------------", env.getProperty("spring.application.name"), env.getProperty("server.port"), env.getProperty("server.context-path"), InetAddress.getLocalHost().getHostAddress(), env.getProperty("server.port"), env.getProperty("server.context-path")); log.debug("Running with Spring profile(s) : {}", Arrays.toString(env.getActiveProfiles()));  } } ```  Does anyone know about this issue? Any workarounds?  Thanks! </body>
		<created>2016-12-21 17:22:17</created>
		<closed>2016-12-22 06:33:12</closed>
	</bug>
	<bug>
		<id>7717</id>
		<title>UndertowEmbeddedServletContainerFactory$JarResourceManager.getResource failure</title>
		<body>I have build WAR application using JHipster. It is using **1.4.2.RELEASE** spring boot. I have setup contextPath for server as `/foo`  I starting application using WAR file as   `java -jar myApp.war`  When calling application as `http://localhost:8080/foo/ `  - everything works fine.  When I call application as `http://localhost:8080/foo` - i am getting following error  ``` java.lang.RuntimeException: java.net.MalformedURLException: No !/ in spec 'file:/Users/robert/Documents/myApp.war!' at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:121) at io.undertow.servlet.handlers.ServletInitialHandler.handleRequest(ServletInitialHandler.java:127) at io.undertow.server.handlers.HttpContinueReadHandler.handleRequest(HttpContinueReadHandler.java:65) at io.undertow.server.handlers.encoding.EncodingHandler.handleRequest(EncodingHandler.java:72) at io.undertow.server.handlers.PathHandler.handleRequest(PathHandler.java:94) at io.undertow.server.Connectors.executeRootHandler(Connectors.java:207) at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:233) at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:131) at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:57) at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66) at io.undertow.protocols.ssl.SslConduit$SslReadReadyHandler.readReady(SslConduit.java:1122) at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88) at org.xnio.nio.WorkerThread.run(WorkerThread.java:559) Caused by: java.net.MalformedURLException: No !/ in spec 'file:/Users/robert/Documents/myApp.war!' at java.net.URL.&lt;init&gt;(URL.java:627) at java.net.URL.&lt;init&gt;(URL.java:490) at java.net.URL.&lt;init&gt;(URL.java:439) at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager.getResource(UndertowEmbeddedServletContainerFactory.java:621) at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:91) ... 13 common frames omitted   ```   When checking JarResourceManager static class in UndertowEmbeddedServletContainerFactory I see source of problem which maybe can be fixed in that method itself. If **path** is empty string , URL constructor throwing exception as it cannot find it. I feel if there is empty string we should default value to `"/"` to ensure system works as URL itself is corrected later on in processing.  **Existing code** ``` @Override public Resource getResource(String path) throws IOException { URL url = new URL("jar:file:" + this.jarPath + "!" + path); URLResource resource = new URLResource(url, url.openConnection(), path); if (resource.getContentLength() &lt; 0) { return null; } return resource; } ```  **Suggestion to fix** ``` @Override public Resource getResource(String path) throws IOException { String correctedPath = path==null || path.isEmpty() ? "/" : path;                         URL url = new URL("jar:file:" + this.jarPath + "!" + correctedPath);                         URLResource resource = new URLResource(url, url.openConnection(), correctedPath); if (resource.getContentLength() &lt; 0) { return null; } return resource; } ```</body>
		<created>2016-12-21 13:46:20</created>
		<closed>2017-01-17 15:44:57</closed>
	</bug>
	<bug>
		<id>7711</id>
		<title>SpringBootTestContextCustomizer testRestTemplate bean name causes unexpected errors</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  Spring Boot 1.4.2  `SpringBootTestContextCustomizer` defines a bean with the name `testRestTemplate` that is of type `TestRestTemplate`. If any user-defined bean in a unit test is defined with the same bean name, unexpected errors occur:  Such as: ``` java.lang.ClassCastException: org.springframework.boot.test.context.SpringBootTestContextCustomizer$TestRestTemplateFactory$$EnhancerBySpringCGLIB$$9fac7b5a cannot be cast to org.springframework.web.client.RestTemplate ```  Or this one (even though a `RestTemplate` bean is defined) because the `testRestTemplate` that was defined is of type `org.springframework.boot.test.web.client.TestRestTemplate` ``` No qualifying bean of type 'org.springframework.web.client.RestTemplate' available ```  Given the likelihood that someone defining a bean named `testRestTemplate` in their unit test is *very high*, the `TestRestTemplate` bean name should be namespaced (e.g. `SpringBootTestContextCustomizer_testRestTemplate`) so as to not conflict with user defined beans.</body>
		<created>2016-12-20 20:58:22</created>
		<closed>2016-12-22 06:33:12</closed>
	</bug>
	<bug>
		<id>7695</id>
		<title>Verify spring-boot-actuator /health serialization error with jackson-2.9.0</title>
		<body>Attempting to browse to /health returns a HTTP 406 'Not Acceptable', with the following error in the console: ``` .c.j.MappingJackson2HttpMessageConverter : Failed to evaluate Jackson serialization for type [class org.springframework.boot.actuate.health.Health]: java.lang.IllegalStateException: Can not override serializer   .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: (was java.lang.NullPointerException) (through reference chain: org.springframework.boot.actuate.health.Health["[anySetter]"]-&gt;java.util.Collections$UnmodifiableMap["diskSpace"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: org.springframework.boot.actuate.health.Health["[anySetter]"]-&gt;java.util.Collections$UnmodifiableMap["diskSpace"]) ```    # How to recreate:  start with 'Building a RESTful Web Service' from https://spring.io/guides/gs/rest-service/ add spring-actuator by adding to build.gradle: `compile("org.springframework.boot:spring-boot-starter-actuator")` run and test by visiting `http://localhost:8080/health` - should see some JSON with health info.  force upgrade to the latest snapshot version of jackson, 2.9.0, by amending build.gradle: ``` repositories {     mavenCentral()     maven {         url "https://oss.sonatype.org/content/repositories/snapshots"     } }  dependencies {     compile("org.springframework.boot:spring-boot-starter-web") {         exclude group: 'com.fasterxml.jackson.core'     }     testCompile('org.springframework.boot:spring-boot-starter-test')      compile("org.springframework.boot:spring-boot-starter-actuator") {         exclude group: 'com.fasterxml.jackson.core'     }      compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0-20161214.215532-368'     compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.0-20161209.054204-56'     compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.0-20161128.053707-86' } ```  re-run and see the error by visiting /health The /greeting endpoint works as before and serializes the 'Greeting' object to JSON. </body>
		<created>2016-12-19 16:26:23</created>
		<closed>2017-03-23 16:06:25</closed>
	</bug>
	<bug>
		<id>7687</id>
		<title>InMemoryMetricRepository does not implement PrefixMetricWriter properly</title>
		<body>Spring Boot Version: 1.3.8.RELEASE Operating System: CentOS 6.6 Java Version: 1.7 Project: Spring Boot Actuator  Description:  **TL;DR**:  `InMemoryMetricRepository` actually only satisfies the `MetricRepository` interface - any attempt to reset by passing a group prefix will only reset the metric at the string that is passed.  [InMemoryMetricRepository](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java) implements both `MetricRepository` and `MultiMetricRepository`.   However, these two interfaces share a method signature through extended interfaces, namely `void reset(String metricName)` through `CounterWriter` and `void reset(String group)` through `PrefixMetricWriter`.   Both of these interfaces are ultimately satisfied by the implementation of `reset` [here](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java#L116).   While it satisfies the compiler, I'm not sure there's a way to implement both interfaces with one class as a result of the `reset` method signature collision. Indeed, the Redis repository implementation has two separate classes, one that implements `MetricRepository` and one that implements `MultiMetricRepository`. The Redis implementation does not exhibit this bug.   In its current form, `InMemoryMetricRepository` simply delegates to the `remove` method on the `ConcurrentNavigableMap` inside of `SimpleInMemoryRepository`. This takes the key that is passed and attempts to remove it from the map. No attempt is made to look for all keys with that prefix.   **Workaround**: `InMemoryMetricRepository` is able to implement the `PrefixMetricReader` interface because it has a unique method signature. This can be used to get an Iterator of all the metrics with a given prefix and then the current implementation of `reset` in `InMemoryMetricRepository` can be used for each metric.  I'm happy to create a patch to fix this, but I'm not sure how you all would want to proceed so I'll stick with opening an issue for now.</body>
		<created>2016-12-16 23:52:21</created>
		<closed>2016-12-28 17:25:39</closed>
	</bug>
	<bug>
		<id>7665</id>
		<title>Deployment to TomEE 1.7.4 fails due to MethodValidationPostProcessor auto-configuration</title>
		<body>The failure is:  ``` [INFO] [talledLocalContainer] Caused by: java.lang.NoClassDefFoundError: org/hibernate/validator/method/MethodConstraintViolationException [INFO] [talledLocalContainer] at org.springframework.validation.beanvalidation.MethodValidationInterceptor.&lt;init&gt;(MethodValidationInterceptor.java:92) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] [INFO] [talledLocalContainer] at org.springframework.validation.beanvalidation.MethodValidationPostProcessor.createMethodValidationAdvice(MethodValidationPostProcessor.java:121) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] [INFO] [talledLocalContainer] at org.springframework.validation.beanvalidation.MethodValidationPostProcessor.afterPropertiesSet(MethodValidationPostProcessor.java:109) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] [INFO] [talledLocalContainer] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] [INFO] [talledLocalContainer] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] [INFO] [talledLocalContainer] ... 29 common frames omitted [INFO] [talledLocalContainer] Caused by: java.lang.ClassNotFoundException: org.hibernate.validator.method.MethodConstraintViolationException [INFO] [talledLocalContainer] at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1858) ~[catalina.jar:7.0.68] [INFO] [talledLocalContainer] at org.apache.tomee.catalina.LazyStopWebappClassLoader.loadClass(LazyStopWebappClassLoader.java:171) ~[tomee-catalina-1.7.4.jar:1.7.4] [INFO] [talledLocalContainer] at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1701) ~[catalina.jar:7.0.68] [INFO] [talledLocalContainer] ... 34 common frames omitted ```  The test app for TomEE excludes our Hibernate Validator dependency because, IIIRC, it's bundled in TomEE. Presumably it's an old version. I think we have a couple of options:  1. Figure out how to convince TomEE to use our version of Hibernate Validator 2. Change the test to use TomEE 7</body>
		<created>2016-12-16 11:55:59</created>
		<closed>2016-12-16 12:19:00</closed>
	</bug>
	<bug>
		<id>7651</id>
		<title>DatabaseDriver.UNKNOWN when using fromJdbcUrl for AS400</title>
		<body>I was trying to use the `DatabaseDriver.fromJdbcUrl("jdbc:as400:.....")` to obtain the `DatabaseDriver.DB2_AS400`  However it returns `DatabaseDriver.UNKNOWN`.  I have compared with the old version (from 1.3.x) that it has the different name to current version   [1.3.x](https://github.com/spring-projects/spring-boot/blob/bad8c1bee8e757ee3b144c1c7a046618f31d1287/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java) vs [1.4.2](https://github.com/spring-projects/spring-boot/blob/7bb63238ab0f4c5975f0f5c26e0b468d4b31cd1c/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java)  I wonder what is it the way I use it incorrectly or not.  Thanks in advance.  Chun</body>
		<created>2016-12-15 06:06:01</created>
		<closed>2016-12-15 09:44:51</closed>
	</bug>
	<bug>
		<id>7625</id>
		<title>@SpyBean does not work with generics</title>
		<body>I'm trying to unit-testing a Spring batch job inside Spring boot using JUnit. I wrote this test class where I want to spy the bean `ItemReader`:  ```java @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment=WebEnvironment.NONE) @ActiveProfiles({"dev", "batch", "test-jobs"}) public class BatchJobTest {  @Autowired private JobLauncherTestUtils jobLauncherTestUtils;      @Autowired  @Qualifier("contactDownloadAckJob") private  Job contactDownloadAckTaskJob;  @SpyBean private ItemReader&lt;CrsOscContact&gt; reader;  @Test public void testJob() throws Exception { given(this.reader.read()).willReturn(new CrsOscContact()); //... blah blah blah } } ```  When I run this test, it seems that the `@SpyBean` annotation does not do its job, that should be proxying the `ItemReader` bean that's already present in the context, and so I obtain the (correct) exception because, as per definition, if the bean is not found it tries to instantiate a new bean of that type (and I have specified an interface) :  ``` org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.item.ItemReader]: Specified class is an interface ```  I'm pretty sure that the bean (of `ItemReader` type) is already in the context because :   - debugging, I see that the target bean instantiation is correctly processed  - if I change the `@SpyBean` annotation to an `@Autowired` annotation, the instance of previous point is correctly injected</body>
		<created>2016-12-12 16:10:50</created>
		<closed>2016-12-20 02:46:25</closed>
	</bug>
	<bug>
		<id>7623</id>
		<title>CloudFoundryActuatorAutoConfigurationTests fails</title>
		<body>`EnvironmentEndpointTests` sets a System property `VCAP_APPLICATION` and doesn't unset it, so the failure is order dependent (it doesn't fail unless that one runs first).</body>
		<created>2016-12-12 14:10:50</created>
		<closed>2016-12-12 15:07:47</closed>
	</bug>
	<bug>
		<id>7622</id>
		<title>Basic Actuator app fails to run on Cloud Foundry</title>
		<body>A vanilla Spring Boot app with the Actuator (Boot 1.5) appears to require Spring Security on the classpath if you run it in CF:  ``` 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cloudFoundryIgnoredRequestCustomizer' defined in class path resource [org/springframework/boot/actuate/cloudfoundry/CloudFoundryActuatorAutoConfiguration.class]: Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/annotation/web/builders/WebSecurity$IgnoredRequestConfigurer 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:754) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) [spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.SpringApplication.run(SpringApplication.java:1161) [spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.SpringApplication.run(SpringApplication.java:1150) [spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [app/:na] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [app/:na] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [app/:na] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [app/:na] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT Caused by: java.lang.NoClassDefFoundError: org/springframework/security/config/annotation/web/builders/WebSecurity$IgnoredRequestConfigurer 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:613) ~[spring-core-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:489) ~[spring-core-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:206) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:187) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(InitDestroyAnnotationBeanPostProcessor.java:125) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(CommonAnnotationBeanPostProcessor.java:295) ~[spring-context-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:947) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT ... 23 common frames omitted 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_111] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT ... 34 common frames omitted 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.0.BUILD-20161208.222750-215.jar!/:1.5.0.BUILD-SNAPSHOT] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at demo.TraceApplication.main(TraceApplication.java:23) [classes/:na] 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT Caused by: java.lang.ClassNotFoundException: org.springframework.security.config.annotation.web.builders.WebSecurity$IgnoredRequestConfigurer 2016-12-12T13:21:17.19+0000 [APP/PROC/WEB/0]OUT at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:94) ~[app/:na] 2016-12-12T13:21:17.28+0000 [APP/PROC/WEB/0]OUT Exit status 1 ```</body>
		<created>2016-12-12 13:23:05</created>
		<closed>2016-12-12 15:07:27</closed>
	</bug>
	<bug>
		<id>7621</id>
		<title>SpyBean does not necessary spy on the primary bean when there are 2 instance</title>
		<body>When there are 2 beans and one marked as `@Primary`, in normal auto-wiring, the Primary bean is used. However, in case of test code autowired via `@SpyBean`, this is not necessary the case. This cause unexpected behavior when using the spybean to mock responses on methods.  I have created a [sample project](https://github.com/lsiu/testspybean) which illustrate this. See the [test class](https://github.com/lsiu/testspybean/blob/master/src/test/java/com/github/lsiu/TestSpybeanApplicationTests.java) and the [same code](https://github.com/lsiu/testspybean/blob/master/src/main/java/com/github/lsiu/TestSpybeanApplication.java)  Looking more into the details. It appear which bean is spied on depends on the order the beans are returned from the method [`getExistingBeans` in MockitoPostProcessor](https://github.com/spring-projects/spring-boot/blob/e0dfff2b23faad006789bae4050e618914f8e40c/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java#L248) (the last bean return ends up being the one is spied on, since [the loop in `registerSpies`](https://github.com/spring-projects/spring-boot/blob/e0dfff2b23faad006789bae4050e618914f8e40c/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java#L316) essential overwrite previous spy registered). I would expect we always spy on the bean marked with `@Primary` similar to the normal auto-wiring behavior.</body>
		<created>2016-12-12 13:17:45</created>
		<closed>2016-12-20 02:46:25</closed>
	</bug>
	<bug>
		<id>7606</id>
		<title>JolokiaMvcEndpoint does not call ServletWrappingController.destroy</title>
		<body>[JolokiaMvcEndpoint.java#L49](https://github.com/spring-projects/spring-boot/blob/44cd625867acbed9fd31e1da70e15446f37e16db/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpoint.java#L49) instantiates a `ServletWrappingController`. `ServletWrappingController` implements `DisposableBean`. But `.destroy()` is never called. This causes a ClassLoader leak.  `JolokiaMvcEndpoint` should implement `DisposableBean` and call `this.controller.destroy()`.</body>
		<created>2016-12-09 08:26:52</created>
		<closed>2016-12-13 09:46:53</closed>
	</bug>
	<bug>
		<id>7595</id>
		<title>JarLauncher configures the class path such that resources are found twice</title>
		<body>`JarLauncher` adds the URL for the root archive to the class path of `LaunchedURLClassLoader`. This means that the root archive is on the class path of both `LaunchedURLClassLoader` and its parent (the system class loader). This results in resources being found twice when they're found via `LaunchedURLClassLoader`.</body>
		<created>2016-12-08 10:02:56</created>
		<closed>2016-12-08 11:38:40</closed>
	</bug>
	<bug>
		<id>7587</id>
		<title>AspectJ weaving logs nasty warnings on Spring Boot fat jar</title>
		<body>``` $ java  -javaagent:/home/dsyer/.m2/repository/org/aspectj/aspectjweaver/1.8.9/aspectjweaver-1.8.9.jar -jar target/demo-0.0.1-SNAPSHOT.jar  Dec 07, 2016 11:32:04 AM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.RuntimeException: Cannot register non aspect: com$example$Interceptor , com.example.Interceptor at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:219) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:485) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:304) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:171) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.initialize(Aj.java:340) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.getWeavingAdaptor(Aj.java:345) at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Aj.java:319) at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:113) at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:54) at sun.instrument.TransformerManager.transform(TransformerManager.java:188) at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:763) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) at java.net.URLClassLoader.access$100(URLClassLoader.java:73) at java.net.URLClassLoader$1.run(URLClassLoader.java:368) at java.net.URLClassLoader$1.run(URLClassLoader.java:362) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:361) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495)  [AppClassLoader@18b4aac2] warning register definition failed -- (RuntimeException) Cannot register non aspect: com$example$Interceptor , com.example.Interceptor Cannot register non aspect: com$example$Interceptor , com.example.Interceptor java.lang.RuntimeException: Cannot register non aspect: com$example$Interceptor , com.example.Interceptor at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:219) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:485) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:304) at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:171) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.initialize(Aj.java:340) at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.getWeavingAdaptor(Aj.java:345) at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Aj.java:319) at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:113) at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:54) at sun.instrument.TransformerManager.transform(TransformerManager.java:188) at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:763) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) at java.net.URLClassLoader.access$100(URLClassLoader.java:73) at java.net.URLClassLoader$1.run(URLClassLoader.java:368) at java.net.URLClassLoader$1.run(URLClassLoader.java:362) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:361) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495) ```  The aspect is actually woven and seems to work at runtime, but the stack trace is sort of distracting, and maybe signals a problem (or something I don't understand).  Sample project: https://github.com/scratches/spring-boot-ltw (you have to set `-DskipTests` when you build it).</body>
		<created>2016-12-07 11:35:05</created>
		<closed>2017-01-20 16:53:05</closed>
	</bug>
	<bug>
		<id>7543</id>
		<title>Broken Autoconfiguration for Couchbase Health Check</title>
		<body>The following SOF ticket describes a problem with the auto-configuration of the Couchbase health indicator: http://stackoverflow.com/questions/40905089/spring-couchbase-health-indicator  **Short version:** The health check does not provide Couchbase information, even when `spring-data-couchbase` is on the classpath and `application.properties` is configured correctly.  The problem seems to be in `HealthIndicatorAutoConfiguration.java`. When I remove `@ConditionalOnBean(CouchbaseOperations.class)` from the following code snippet it works: ```         @Configuration @ConditionalOnClass({ CouchbaseOperations.class, Bucket.class }) @ConditionalOnBean(CouchbaseOperations.class) @ConditionalOnEnabledHealthIndicator("couchbase") public static class CouchbaseHealthIndicatorConfiguration extends CompositeHealthIndicatorConfiguration&lt;CouchbaseHealthIndicator, CouchbaseOperations&gt; {  private final Map&lt;String, CouchbaseOperations&gt; couchbaseOperations;  public CouchbaseHealthIndicatorConfiguration( Map&lt;String, CouchbaseOperations&gt; couchbaseOperations) { this.couchbaseOperations = couchbaseOperations; }  @Bean @ConditionalOnMissingBean(name = "couchbaseHealthIndicator") public HealthIndicator couchbaseHealthIndicator() { return createHealthIndicator(this.couchbaseOperations); } } ``` **NOTE:** I duplicated `CouchbaseHealthIndicatorConfiguration` because I didn't want to change existing spring code.   My guess is that the `@AutoConfigureAfter` does not check for all Couchbase related classes that are necessary. That's where my investigation stopped because I didn't know how to continue. </body>
		<created>2016-12-01 11:26:48</created>
		<closed>2016-12-01 14:26:36</closed>
	</bug>
	<bug>
		<id>7524</id>
		<title>Sliced tests doesn't reuse cached contexts when testing with Spock</title>
		<body>Spock adds an annotation to a specification that makes each spec appear to be different:  ``` @org.spockframework.runtime.model.SpecMetadata(filename=FilmController2Spec.groovy, line=18) @org.spockframework.runtime.model.SpecMetadata(filename=FilmControllerSpec.groovy, line=18) ```   Similar to what we did with Kotlin (#7101), we need to ignore Spock's annotations in `ContextCustomizerKey`.</body>
		<created>2016-11-29 17:03:54</created>
		<closed>2016-11-30 21:01:39</closed>
	</bug>
	<bug>
		<id>7519</id>
		<title>Nested conditions only work with instances of SpringBootCondition</title>
		<body>`MemberOutcomes.getConditionOutcome(..)` tries to create a `ConditionMessage` with a `null` `ConditionMessage`:  from [AbstractNestedCondition](https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/AbstractNestedCondition.java#L197):  private ConditionOutcome getConditionOutcome(AnnotationMetadata metadata, Condition condition) { if (condition instanceof SpringBootCondition) { return ((SpringBootCondition) condition).getMatchOutcome(this.context, metadata); } return new ConditionOutcome(condition.matches(this.context, metadata), (ConditionMessage) null); }  However, [ConditionOutcome](https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionOutcome.java) wouldn't allow this:  public ConditionOutcome(boolean match, ConditionMessage message) { Assert.notNull(message, "ConditionMessage must not be null"); this.match = match; this.message = message; }  For instance, this fails with `@ConditionalOnAwsCloudEnvironment`:  public static class OnAwsCloudEnvironment extends AnyNestedCondition {  public OnAwsCloudEnvironment() { super(ConfigurationPhase.PARSE_CONFIGURATION); }  @ConditionalOnAwsCloudEnvironment static class Cloud { }  @ConditionalOnProperty(prefix = "development", name = "enabled", matchIfMissing = false, havingValue = "true") static class Development { }  }  here is the stacktrace:   ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [ ..]; nested exception is java.lang.IllegalStateException: Error processing condition on foo.CloudConfiguration at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:303) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:248) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:137) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:275) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:237) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:204) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:173) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:324) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:246) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111) [spring-boot-test-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:44) [spring-boot-test-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) [spring-test-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) [.cp/:na] at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na] at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na] at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678) [.cp/:na] at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na] at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: java.lang.IllegalStateException: Error processing condition on foo.CloudConfiguration at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:81) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:64) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isConditionMatch(ClassPathScanningCandidateComponentProvider.java:363) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.isCandidateComponent(ClassPathScanningCandidateComponentProvider.java:347) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:280) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE] ... 45 common frames omitted Caused by: java.lang.IllegalArgumentException: ConditionMessage must not be null at org.springframework.util.Assert.notNull(Assert.java:115) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE] at org.springframework.boot.autoconfigure.condition.ConditionOutcome.&lt;init&gt;(ConditionOutcome.java:50) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberOutcomes.getConditionOutcome(AbstractNestedCondition.java:197) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberOutcomes.&lt;init&gt;(AbstractNestedCondition.java:187) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions.getMatchOutcomes(AbstractNestedCondition.java:165) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberMatchOutcomes.&lt;init&gt;(AbstractNestedCondition.java:80) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AbstractNestedCondition.getMatchOutcome(AbstractNestedCondition.java:64) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.AnyNestedCondition.getMatchOutcome(AnyNestedCondition.java:47) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-1.4.1.RELEASE.jar:1.4.1.RELEASE] ... 51 common frames omitted ```</body>
		<created>2016-11-29 10:54:46</created>
		<closed>2016-12-05 19:20:50</closed>
	</bug>
	<bug>
		<id>7508</id>
		<title>Couchbase property condition does not work with YAML</title>
		<body>This is a specialization of #7483 that must be fixed in `1.4.x` still. Once we have a general fix for it, we should probably get rid of this and replace with whatever has been made available in #7483.  We should stop using `@ConditionalOnProperty` on lists as it does not work with yaml or properties using the `[]` notation.   We should also clarify the Javadoc of `@ConditionalOnProperty` that only works with single values</body>
		<created>2016-11-28 16:54:03</created>
		<closed>2016-11-30 12:50:41</closed>
	</bug>
	<bug>
		<id>7503</id>
		<title>Metrics filter may submit metrics with regular expressions in their name</title>
		<body>If a request mapping variable is constrained with a regular expression, metrics filter includes the regular expression in the name of the metric. For example, a request that's handled by `@RequestMapping("/foo/{bar:[a-z]+}")` and has a 200 OK response will result in a metric named `status.200.foo.bar:[a-z]+` being submitted.  This behaviour isn't documented anywhere and doesn't appear to be covered by the tests. I suspect that it is not intentional, particularly as we replace `**` with `-star-star-` and `*` with `-star-`. This replacement means that `someVariable:[a-z]*` becomes `some-variable:[A-Z]-star-`</body>
		<created>2016-11-28 14:10:52</created>
		<closed>2016-12-01 13:27:07</closed>
	</bug>
	<bug>
		<id>7476</id>
		<title>Setting endpoints.sensitive=true does not set all endpoints to sensitive in v1.4.1</title>
		<body>more details: http://stackoverflow.com/questions/40617489/spring-boot-actuator-endpoint-configuration-doesnt-seem-to-be-working-as-expect  Using v1.4.1 of Spring Boot  When attempting to set the sensitivity of all actuator endpoints to sensitive, mainly to make the health check endpoint sensitive, i set the property "endpoints.sensitive" to "true" to set all endpoints as sensitive. After making this change, calling the health endpoint did not just show UP/DOWN status but still status of all known services. I had to explicitly set the property "endpoints.health.sensitive" to "true" to get just UP/DOWN status on health check endpoint.</body>
		<created>2016-11-24 18:29:52</created>
		<closed>2016-11-24 21:00:01</closed>
	</bug>
	<bug>
		<id>7473</id>
		<title>`@AutoconfigureTestDatabase` replaces the `DataSource` to use with the same in-memory instance</title>
		<body>`@AutoconfigureTestDatabase` does not set the `generateUniqueName` flag so basically it replaces the databases of all the test suite with the same one.</body>
		<created>2016-11-24 13:31:50</created>
		<closed>2016-11-24 14:32:09</closed>
	</bug>
	<bug>
		<id>7453</id>
		<title>Couchbase cannot be auto-configured without Spring Data couchbase</title>
		<body>Hi, I get the following exception when running my project just by adding a new dependency  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:754) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [spring-boot-1.4.2.RELEASE.jar:1.4.2.RELEASE] at org.couchbase.devex.Application.main(Application.java:14) [classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111] at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:506) [spring-boot-maven-plugin-1.4.2.RELEASE.jar:1.4.2.RELEASE] at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111] Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_111] at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_111] at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_111] at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_111] at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_111] at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_111] at java.lang.Class.createAnnotationData(Class.java:3521) ~[na:1.8.0_111] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_111] at java.lang.Class.createAnnotationData(Class.java:3526) ~[na:1.8.0_111] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_111] at java.lang.Class.getAnnotation(Class.java:3415) ~[na:1.8.0_111] at java.lang.reflect.AnnotatedElement.isAnnotationPresent(AnnotatedElement.java:258) ~[na:1.8.0_111] at java.lang.Class.isAnnotationPresent(Class.java:3425) ~[na:1.8.0_111] at org.springframework.core.annotation.AnnotatedElementUtils.hasAnnotation(AnnotatedElementUtils.java:617) ~[spring-core-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.isHandler(RequestMappingHandlerMapping.java:173) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.initHandlerMethods(AbstractHandlerMethodMapping.java:213) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.afterPropertiesSet(AbstractHandlerMethodMapping.java:184) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.afterPropertiesSet(RequestMappingHandlerMapping.java:127) ~[spring-webmvc-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] ... 22 common frames omitted ```  You can reproduce this with the following project: https://github.com/ldoguin/test-boot-couchbase  The dependency I added is spring-boot-starter-web: https://github.com/ldoguin/test-boot-couchbase/commit/cc52297ccefe2aca83f66015d75c920c44095ac3  This was reproduced with 1.4.0, 1.4.1 and 1.4.2.  Help me @snicoll you're my only hope. Thanks!</body>
		<created>2016-11-22 21:16:16</created>
		<closed>2016-11-24 09:02:09</closed>
	</bug>
	<bug>
		<id>7449</id>
		<title>Fat jar has two candidate URLs for `classpath*:**/` patterns, leading to resources duplication</title>
		<body>This is a follow-up of [SPR-14934](https://jira.spring.io/browse/SPR-14934).   Assume we need to collect the resources matching the `classpath*:/**/*.xml` pattern in a Spring Boot application. As of 1.4, two root urls will be used for the search:  ``` jar:file:/Users/foo/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/ jar:file:/Users/foo/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/ ```  The former is the one used by the `LaunchedUrlClassLoader` and the latter is used by the system classloader. Because we asked to search "everything", the system classloader finds the resource again, leading to a duplication. Arguably, the  system classloader must ignore anything in `BOOT-INF` since it is managed by the `LaunchedUrlClassLoader` already.  </body>
		<created>2016-11-22 15:58:30</created>
		<closed>2016-11-23 14:05:27</closed>
	</bug>
	<bug>
		<id>7441</id>
		<title>TestRestTemplate.withBasicAuth resets error handler</title>
		<body>Originally raised [here](https://github.com/spring-projects/spring-boot/issues/7265#issuecomment-261684318)   Just a note about this: I discovered this issue when I called the method `TestRestTemplate.withBasicAuth(String username, String password)`.   Inside that method is the call:  ``` restTemplate.setErrorHandler(getRestTemplate().getErrorHandler()); ```  ...which sets the new `RestTemplate`'s ErrorHandler with the current one. But then later in the method the `TestRestTemplate` constructor is called which then (re-)sets the just-set `ResponseErrorHandler` back to `NoOpResponseErrorHandler`.  This logic, along with the description in the javadoc for this method (`Creates a new {@code TestRestTemplate} with the same configuration as this one`), implies that the RestTemplate config should be the same as it was coming in, but it sets it to `NoOpResponseErrorHandler` regardless of the previous state.</body>
		<created>2016-11-22 01:02:27</created>
		<closed>2016-11-22 22:54:38</closed>
	</bug>
	<bug>
		<id>7439</id>
		<title>@MockBean doesn't work with FactoryBeans</title>
		<body>We're using Spring Boot 1.4.2 and we're unable to use the `@MockBean` annotation with components that implement `FactoryBean`. Attached is a JUnit test that reproduces the issue.  [factorybeanissue.zip](https://github.com/spring-projects/spring-boot/files/604905/factorybeanissue.zip)  </body>
		<created>2016-11-21 22:12:07</created>
		<closed>2016-11-22 22:54:38</closed>
	</bug>
	<bug>
		<id>7434</id>
		<title>Hypermedia-related auto-configuration doesn't back off in the absence of Jackson</title>
		<body>``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'halObjectMapperConfigurer' defined in class path resource [org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration$HypermediaConfiguration.class]: Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/ObjectMapper at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:235) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:702) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:527) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[classes/:na] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) [classes/:na] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1161) [classes/:na] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1150) [classes/:na] at sample.hypermedia.SampleHypermediaApplication.main(SampleHypermediaApplication.java:26) [classes/:na] Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/ObjectMapper at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_102] at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_102] at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_102] at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:613) ~[spring-core-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:489) ~[spring-core-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:206) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:187) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(InitDestroyAnnotationBeanPostProcessor.java:125) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(CommonAnnotationBeanPostProcessor.java:295) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:947) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE] ... 15 common frames omitted Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.ObjectMapper at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_102] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_102] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_102] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_102] ... 26 common frames omitted ```</body>
		<created>2016-11-21 10:03:11</created>
		<closed>2016-11-21 13:35:48</closed>
	</bug>
	<bug>
		<id>7431</id>
		<title>@RestClientTest requires Jackson in classpath (I have only GSON)</title>
		<body>Spring boot version: 1.4.2.RELEASE  From documentation:  &gt; The @RestClientTest annotation can be used if you want to test REST clients. By default it will auto-configure Jackson and GSON support,  But I have only GSON in classpath and I expect it should work, but:  `java.lang.NoClassDefFoundError: Could not initialize class org.springframework.boot.test.autoconfigure.web.client.RestClientExcludeFilter`   `java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/Module` </body>
		<created>2016-11-21 05:32:52</created>
		<closed>2016-11-21 13:40:33</closed>
	</bug>
	<bug>
		<id>7389</id>
		<title>Dependency on jar project with redefined finalName in multi module maven project causes duplicate jar in repackaged war</title>
		<body>Using the spring-boot-maven-plugin version 1.4.2.RELEASE, I build a multimodule maven project with the following module structure:  ``` parent    -&gt; jar   -&gt; war ```  "jar" has a redefined `finalName` of "jar".  "war" has a dependency on "jar"  (see the example project available as PR https://github.com/spring-projects/spring-boot-issues/pull/61)  I run the following in the root dir of the multi module project:  ``` $ mvn clean install $ jar tvf war/target/war-0.0.1-SNAPSHOT.war|grep lib/jar ```  **Observed behaviour** I get this output:  ```   1688 Mon Nov 14 21:14:04 CET 2016 WEB-INF/lib/jar-0.0.1-SNAPSHOT.jar   1688 Mon Nov 14 21:14:04 CET 2016 WEB-INF/lib/jar.jar ```  Indicating that the jar project is included twice.  **Expected behaviour** I expected output like  ```   1688 Mon Nov 14 21:14:04 CET 2016 WEB-INF/lib/jar-0.0.1-SNAPSHOT.jar ```  I would expect the versioned jar file to be included, even though the final name is overridden, as this would be symmetrical with a dependency fetched from the Maven repository, but including jar.jar would be acceptable as well.</body>
		<created>2016-11-14 20:18:44</created>
		<closed>2016-11-30 14:18:12</closed>
	</bug>
	<bug>
		<id>7386</id>
		<title>Remove empty logger config in DefaultLogbackConfiguration</title>
		<body>The “empty” (not ROOT) logger https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java#L98 doesn’t have an equivalent in the XML file (which it should based on the comments).  It messes up the new CF endpoint so should probably go.</body>
		<created>2016-11-14 17:36:36</created>
		<closed>2016-11-16 02:54:55</closed>
	</bug>
	<bug>
		<id>7379</id>
		<title>RemoteSpringApplication add/remove class issue</title>
		<body>I am using `RemoteSpringApplication` and it is working correctly for modifying class content. I am not able to add or remove class. New classes are not visible by Spring context after successful reload. I have   ``` 2016-11-14 08:00:12.746  INFO 9762 --- [   File Watcher] o.s.b.d.r.c.ClassPathChangeUploader      : Uploaded 1 class resource 2016-11-14 08:00:14.484  INFO 9762 --- [pool-1-thread-1] o.s.b.d.r.c.DelayedLiveReloadTrigger     : Remote server has changed, triggering LiveReload ```  but no new controllers are visible. Same for local development works out of the box.    Similar with class removal but in this case we have got exception on server side.     ``` Caused by: java.io.FileNotFoundException: class path resource [com/example/TestRest1.class] cannot be opened because it does not exist ```  Full stack attached [here](https://gist.github.com/paweln1986/2cee4656c14c82089a7bb30f7cddc985) Is it my miss-configuration or a bug?  [Sample project](https://github.com/paweln1986/RemoteSpringApplicationBug) My IntellIJ configuration. ![test2](https://cloud.githubusercontent.com/assets/995565/20336776/1061a7d0-abcd-11e6-9a26-ec1985f9890b.png) Simplest way to reproduce this issue:  1. java -jar test-0.0.1-SNAPSHOT.jar 2. Run RemoteSpringApplication from IntellIJ 3. Add new controller and compile whole project. RemoteSpringApplication indicate resources are updated but nothing was changed and new controller is not visible. 4. Remove HelloWorld controller. SpringBootApp crashes with exception. &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;</body>
		<created>2016-11-14 07:31:05</created>
		<closed>2016-11-17 19:28:49</closed>
	</bug>
	<bug>
		<id>7372</id>
		<title>nameless logger in /loggers when using log4j2</title>
		<body>When doing a `GET` on the new `/loggers` endpoint from boot 1.5.x and using log4j2 as logger backend an unnamed logger (root) is listed. Setting the loglevel for this logger is impossible via `POST` to `/loggers/` - it results in a `405 - Method not allowed`  ```json { "": { "configuredLevel": "INFO", "effectiveLevel": "INFO" }, "org.apache.catalina.startup.DigesterFactory": { "configuredLevel": "ERROR", "effectiveLevel": "ERROR" }, "org.apache.catalina.util.LifecycleBase": { "configuredLevel": "ERROR", "effectiveLevel": "ERROR" }, "org.apache.coyote.http11.Http11NioProtocol": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.apache.sshd.common.util.SecurityUtils": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.apache.tomcat.util.net.NioSelectorPool": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.crsh.plugin": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.crsh.ssh": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.eclipse.jetty.util.component.AbstractLifeCycle": { "configuredLevel": "ERROR", "effectiveLevel": "ERROR" }, "org.hibernate.validator.internal.util.Version": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.springframework.boot.actuate.endpoint.jmx": { "configuredLevel": "WARN", "effectiveLevel": "WARN" }, "org.thymeleaf": { "configuredLevel": "WARN", "effectiveLevel": "WARN" } } ```</body>
		<created>2016-11-12 17:27:26</created>
		<closed>2016-11-16 02:54:55</closed>
	</bug>
	<bug>
		<id>7360</id>
		<title>Error after upgrade to SB 1.4.2 - java.io.FileNotFoundException: JAR entry !/META-INF/services/javax.validation.spi.ValidationProvider </title>
		<body>Hi,  After upgrading from Spring Boot 1.4.1 to 1.4.2 i get an error which seems to be a strange combination of injecting a LocalValidatorFactoryBean with a @FilterRegistrationBean definition.   ``` @SpringBootApplication public class SpringDevtoolsIssueApplication {  public static void main(String[] args) { SpringApplication.run(SpringDevtoolsIssueApplication.class, args); }  @Autowired private org.springframework.validation.beanvalidation.LocalValidatorFactoryBean validator;  @Bean public LocalValidatorFactoryBean validator() { return new LocalValidatorFactoryBean(); }  @Bean public FilterRegistrationBean create() { FilterRegistrationBean bean = new FilterRegistrationBean();        . . . . .  ``` This error only occurs running standalone. Very odd.  The error occurs on Linux / Windows and Mac.  I've managed to simplify and recreate the issue on bitbucket: https://bitbucket.org/davidmelia/spring-boot-validation-error  (mvn clean install and run start.sh)  If you downgrade tomcat to 8.5.5 in the war pom.xml the problem goes away and I think it's related to the Tomcat 8.5.6 bugfix https://bz.apache.org/bugzilla/show_bug.cgi?id=60087   The error is  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'validator' defined in com.example.SpringDevtoolsIssueApplication: Invocation of init method failed; nested exception is java.util.ServiceConfigurationError: javax.validation.spi.ValidationProvider: Error reading configuration file         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1583) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1131) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1059) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:589) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         ... 35 common frames omitted Caused by: java.util.ServiceConfigurationError: javax.validation.spi.ValidationProvider: Error reading configuration file         at java.util.ServiceLoader.fail(ServiceLoader.java:232) ~[na:1.8.0_51]         at java.util.ServiceLoader.parse(ServiceLoader.java:309) ~[na:1.8.0_51]         at java.util.ServiceLoader.access$200(ServiceLoader.java:185) ~[na:1.8.0_51]         at java.util.ServiceLoader$LazyIterator.hasNextService(ServiceLoader.java:357) ~[na:1.8.0_51]         at java.util.ServiceLoader$LazyIterator.hasNext(ServiceLoader.java:393) ~[na:1.8.0_51]         at java.util.ServiceLoader$1.hasNext(ServiceLoader.java:474) ~[na:1.8.0_51]         at javax.validation.Validation$GetValidationProviderListAction.loadProviders(Validation.java:354) ~[validation-api-1.1.0.Final.jar!/:na]         at javax.validation.Validation$GetValidationProviderListAction.run(Validation.java:329) ~[validation-api-1.1.0.Final.jar!/:na]         at javax.validation.Validation$GetValidationProviderListAction.getValidationProviderList(Validation.java:316) ~[validation-api-1.1.0.Final.jar!/:na]         at javax.validation.Validation$DefaultValidationProviderResolver.getValidationProviders(Validation.java:299) ~[validation-api-1.1.0.Final.jar!/:na]         at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:257) ~[validation-api-1.1.0.Final.jar!/:na]         at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.afterPropertiesSet(LocalValidatorFactoryBean.java:248) ~[spring-context-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1642) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1579) ~[spring-beans-4.3.4.RELEASE.jar!/:4.3.4.RELEASE]         ... 45 common frames omitted Caused by: java.io.FileNotFoundException: JAR entry !/META-INF/services/javax.validation.spi.ValidationProvider not found in /var/folders/2b/kfywdyt92x5dhdb11335m4bc0000gn/T/jar_cache3414609321058860736.tmp         at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:142) ~[na:1.8.0_51]         at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:150) ~[na:1.8.0_51]         at java.net.URL.openStream(URL.java:1038) ~[na:1.8.0_51]         at java.util.ServiceLoader.parse(ServiceLoader.java:304) ~[na:1.8.0_51]         ... 57 common frames omitted ```  Thanks </body>
		<created>2016-11-10 09:38:15</created>
		<closed>2017-01-20 16:40:26</closed>
	</bug>
	<bug>
		<id>7359</id>
		<title>Server header not disabled on Jetty when SSL is used</title>
		<body>With #4730 the `Server` header is meant to be disabled by default, but this only works when SSL is not used. Given that disabling the server header is primarily for security reasons, having it work with SSL is pretty essential.  This is because the HTTPS and HTTP connector factories in `JettyEmbeddedServletContainerFactory` don't configure the `HttpConfiguration` in the same way.  Tested with Spring Boot `1.4.2.RELEASE` with the default Jetty version (9.3.14)</body>
		<created>2016-11-10 04:15:44</created>
		<closed>2016-11-11 11:48:27</closed>
	</bug>
	<bug>
		<id>7277</id>
		<title>Metrics report 500s for client disconnects</title>
		<body>When a client prematurely disconnects, the actuator metric endpoint reports the request as a 500 error, even if the response was 200. Our APIs that are consumed by mobile devices with spotty connections often have client disconnects, resulting in 500 metrics, causing us to be alarmed, only to find that they were not errors. Ideally, if client disconnects prior to downloading the entire payload, the actual response code provided should be recorded appropriately in the metrics, if possible (the status code should be first part of HTTP response?).  (Side note: logback-access logs show nothing for this case with jetty, but show an entry for tomcat)  *Steps to reproduce* 1. `git clone https://github.com/ericdahl/spring-boot-500s-disconnects.git` 2. `cd spring-boot-500s-disconnects` 2. `mvn spring-boot:run` 3. `curl -v --limit-rate 100 http://localhost:8080`     - Note: this shows a 200 success response 4. `^C` 5. `curl 'http://localhost:8080/metrics/counter.status.*.root' ; echo`  Expected: no 500 errors -- preferably the actual response code if it was sent Actual: 500 errors  &lt;img width="1326" alt="screen shot 2016-11-02 at 7 40 16 pm" src="https://cloud.githubusercontent.com/assets/17730942/19954283/36954b26-a134-11e6-9d32-7c903ee77f61.png"&gt; </body>
		<created>2016-11-03 02:35:36</created>
		<closed>2016-11-03 20:15:51</closed>
	</bug>
	<bug>
		<id>7270</id>
		<title>@WebMvcTest fails with @EnableFeignClients</title>
		<body>Hi   ## Problem In my app I've got a service which makes a rest call to an external API using Feign. I want to mock this external call in my @WebMvcTest by using the @MockBean annotation, but I get the following exception.  ``` 20:40:32.236 [main] WARN  o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@314c8b4a] to process 'before' execution of test method [public void example.ExampleApplicationTest.shouldReturnDescription() throws java.lang.Exception] for test instance [example.ExampleApplicationTest@26d820eb] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'example.GitHub': FactoryBean threw exception on object creation; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.cloud.netflix.feign.FeignContext] is defined at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:175) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1600) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener.resetMocks(ResetMocksTestExecutionListener.java:68) at org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener.resetMocks(ResetMocksTestExecutionListener.java:55) at org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener.beforeTestMethod(ResetMocksTestExecutionListener.java:45) at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:269) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283) at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173) at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153) at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128) at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.cloud.netflix.feign.FeignContext] is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:348) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:346) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:335) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1088) at org.springframework.cloud.netflix.feign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:159) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:168) ... 30 common frames omitted ```  ## Repro steps I've created an example project to reproduce this error. The pull request: https://github.com/spring-projects/spring-boot-issues/pull/60  ## Temporary workaround I was able to bypass this problem by adding to the test the feign client interface annotated with @MockBean.</body>
		<created>2016-11-01 20:33:03</created>
		<closed>2016-11-25 10:42:02</closed>
	</bug>
	<bug>
		<id>7268</id>
		<title>Build fails due to port conflict in `LocalDevToolsAutoConfigurationTests`</title>
		<body>Project build has started to fail for me due to 4 tests from `LocalDevToolsAutoConfigurationTests` attempting to start Tomcat on port 8080. I guess this is due to some recent change since I've always had httpd running on 8080 but did not encounter this issue.  Here's the test report:  ``` ------------------------------------------------------------------------------- Test set: org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests ------------------------------------------------------------------------------- Tests run: 16, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 5.972 sec &lt;&lt;&lt; FAILURE! - in org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests liveReloadTriggeredOnContextRefresh(org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests)  Time elapsed: 0.286 sec  &lt;&lt;&lt; ERROR! org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured to listen on port 8080 failed to start at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.checkThatConnectorsHaveStarted(TomcatEmbeddedServletContainer.java:205) at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:183) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:267) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:259) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.liveReloadTriggeredOnContextRefresh(LocalDevToolsAutoConfigurationTests.java:141)  resourceCachePeriodIsZero(org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests)  Time elapsed: 0.177 sec  &lt;&lt;&lt; ERROR! org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured to listen on port 8080 failed to start at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.checkThatConnectorsHaveStarted(TomcatEmbeddedServletContainer.java:205) at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:183) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:267) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:259) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.resourceCachePeriodIsZero(LocalDevToolsAutoConfigurationTests.java:127)  liveReloadNotTriggeredOnClassPathChangeWithRestart(org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests)  Time elapsed: 0.324 sec  &lt;&lt;&lt; ERROR! org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured to listen on port 8080 failed to start at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.checkThatConnectorsHaveStarted(TomcatEmbeddedServletContainer.java:205) at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:183) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:267) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:259) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.liveReloadNotTriggeredOnClassPathChangeWithRestart(LocalDevToolsAutoConfigurationTests.java:161)  liveReloadTriggeredOnClassPathChangeWithoutRestart(org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests)  Time elapsed: 0.224 sec  &lt;&lt;&lt; ERROR! org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured to listen on port 8080 failed to start at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.checkThatConnectorsHaveStarted(TomcatEmbeddedServletContainer.java:205) at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:183) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:736) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:267) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.initializeAndRun(LocalDevToolsAutoConfigurationTests.java:259) at org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.liveReloadTriggeredOnClassPathChangeWithoutRestart(LocalDevToolsAutoConfigurationTests.java:150) ```</body>
		<created>2016-11-01 19:10:03</created>
		<closed>2016-11-04 19:27:23</closed>
	</bug>
	<bug>
		<id>7247</id>
		<title>RunCommandIntegrationTests flickering</title>
		<body>I see this on and off in spring-boot-cli:  ``` Failed tests:    RunCommandIntegrationTests.quietModeSuppressesAllCliOutput:63 expected:&lt;"[]Ssshh"&gt; but was:&lt;"[Resolving dependencies..... ]Ssshh"&gt; ```  Usually if I run again it goes away. </body>
		<created>2016-10-28 16:54:42</created>
		<closed>2016-11-01 10:01:08</closed>
	</bug>
	<bug>
		<id>7236</id>
		<title>Configuration meta-data should use raw class for type and sourceType</title>
		<body>If a type has generic information we currently write that in the meta-data. For instance, this is what the meta-data looks like for `InfoPropertiesInfoContributor#Mode`  ``` {       "name": "management.info.git.mode",       "type": "org.springframework.boot.actuate.info.InfoPropertiesInfoContributor&lt;T&gt;$Mode",       "description": "Mode to use to expose git information.",       "sourceType": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties$Git"     } ``` </body>
		<created>2016-10-27 09:25:15</created>
		<closed>2016-10-28 11:32:14</closed>
	</bug>
	<bug>
		<id>7202</id>
		<title>Spring boot (1.4.1.RELEASE) loader cannot find classnames with cyrillic characters</title>
		<body>``` java @SpringBootApplication public class App implements ApplicationRunner {  //    public class Pojo_english_spring {} //ok     public class Pojo_russian_весна {} //fail      public static void main(String[] args) {         SpringApplication.run(App.class, args);     }      @Override     public void run(ApplicationArguments args) throws Exception {     } } ```  ``` ... java.io.FileNotFoundException: JAR entry com/acme/App$Pojo_russian_весна.class not found in /tmp/test/target/spring-boot-app-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes     at org.springframework.boot.loader.jar.JarURLConnection.throwFileNotFound(JarURLConnection.java:180) ~[spring-boot-app-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]     at org.springframework.boot.loader.jar.JarURLConnection.connect(JarURLConnection.java:102) ~[spring-boot-app-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]     at org.springframework.boot.loader.jar.JarURLConnection.getInputStream(JarURLConnection.java:166) ~[spring-boot-app-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]     at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:169) ~[spring-core-4.3.3.RELEASE.jar!/:4.3.3.RELEASE]     at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:50) ~[spring-core-4.3.3.RELEASE.jar!/:4.3.3.RELEASE]     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.3.RELEASE.jar!/:4.3.3.RELEASE]     at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) ~[spring-core-4.3.3.RELEASE.jar!/:4.3.3.RELEASE]     at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:279) ~[spring-context-4.3.3.RELEASE.jar!/:4.3.3.RELEASE]     ... 26 common frames omitted ```  With spring-boot:1.3.8.RELEASE - it works fine. </body>
		<created>2016-10-21 14:50:22</created>
		<closed>2016-10-24 11:21:02</closed>
	</bug>
	<bug>
		<id>7180</id>
		<title>definePackage in LaunchedURLClassLoader relies on GC to close InputStreams</title>
		<body></body>
		<created>2016-10-18 12:22:32</created>
		<closed>2016-10-18 12:47:59</closed>
	</bug>
	<bug>
		<id>7174</id>
		<title>Context not being reused in tests when MockBeans are used</title>
		<body>Hi!  I would like to start a discussion about the mechanism of caching application contexts that are using `@MockBeans` across spring boot tests.  I was following this guide about testing the web layer: https://spring.io/guides/gs/testing-web/ and I was surprised that application context was build independently for every test class. I was hoping it will be cached to decrease test time, but I was wrong.  I've created small sample app to show this. Here is pull request: https://github.com/spring-projects/spring-boot-issues/pull/56  There's one `@Service` (`FooBarService`) used by controller (`FooBarApplication`) in two methods. And two tests that have some expectations about the web layer (as indicated by the `@WebMvcTest` annotation). Those two tests work on the same context - the only difference is distinct mocks. But if you do `mvn clean test` you'll see the spring banner twice, which means that context for the web layer is created two times.  I've done some research and debugging and found that this is caused by including the `@MockBean` and `@SpyBean` definitions in the key for context cache (through the `MockitoContextCustomizer` that is a part of `MergedContextConfiguration`).  Well... After rethinking all of this I can understand that from technical point of view those contexts are not the same, because mock@1 and mock@2 are not equal. But still I feel that my assumption that context should be reused is what users could expect. Especially if we realize that `@WebMvcTest` is used to reduce the test time by not starting tomcat. Having this goal in mind it's hard to accept the extra time of repeated context building.  I'm not sure if such a change is a bug fixing or enhancement. I feel that this behaviour is bug but you can discuss it.  For now my workaround (or maybe it's official way to do this?) is to create an abstract test class with all `@MockBeans` definitions, something like:  ``` java @RunWith(SpringRunner.class) @WebMvcTest public abstract class AbstractTest {     protected @MockBean FooBarService service; }  public class FooTest extends AbstractTest {...} ```  But maybe it's better to consider an approach in which context is build once and mocks are replaced in beforeTestClass and afterTestClass methods of `TestExecutionListener`? And to avoid refreshing dependencies in every class referencing those mocked beans maybe it's ok to generate some beanToMockProxy object, that will be autowired in controllers and will hold a reference to mockito mock (created per test class), proxing all the methods to that mock? I don't know... I'm just thinking loud.  Cheers, Alek  </body>
		<created>2016-10-17 22:37:14</created>
		<closed>2016-10-24 13:12:22</closed>
	</bug>
	<bug>
		<id>7150</id>
		<title>ServletContextInitializerBeans can't handle "scopedTarget." beans correctly.</title>
		<body>``` java package com.example;  import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean; import org.springframework.cloud.context.config.annotation.RefreshScope; import org.springframework.context.annotation.Bean; import org.springframework.web.filter.GenericFilterBean;  import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.ServletContextEvent; import javax.servlet.ServletContextListener; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.HttpServlet; import java.io.IOException;  @SpringBootApplication public class DemoApplication {      public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args);     }      @Bean     public DelegatingFilterProxyRegistrationBean myFilterRegistration() {         return new DelegatingFilterProxyRegistrationBean("myFilter");     }      @Bean     @RefreshScope     public Filter myFilter() {         return new GenericFilterBean() {             @Override             public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {                 chain.doFilter(request, response);             }         };     } }  ```  `ServletContextInitializerBeans` will register the "myFilter" bean twice. one is "myFilter"(by `DelegatingFilterProxyRegistrationBean`), the other is "scopedTarget.myFilter" due to the automatically find and add Filter type beans to `ServletContext`.   Spring boot version:  ``` &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;         &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; ```  Update: I remove the code not related to this issue. </body>
		<created>2016-10-12 03:45:13</created>
		<closed>2016-11-01 10:37:19</closed>
	</bug>
	<bug>
		<id>7145</id>
		<title>OnResourceCondition is unordered</title>
		<body>I think it probably should be as, presumably, it's quicker to evaluate than OnBeanCondition which has lowest precedence </body>
		<created>2016-10-11 19:07:02</created>
		<closed>2016-10-13 11:30:36</closed>
	</bug>
	<bug>
		<id>7144</id>
		<title>OnPropertyCondition is unordered</title>
		<body>I think it probably should be as, presumably, it's quicker to evaluate than OnBeanCondition which has lowest precedence </body>
		<created>2016-10-11 19:06:11</created>
		<closed>2016-10-13 11:30:36</closed>
	</bug>
	<bug>
		<id>7138</id>
		<title>`/` to `/index.html` mapping throws a 404 when Accept header is not provided</title>
		<body>Using Spring Boot 1.4.1. My application serves a static `index.html` page. The application is deployed on Heroku and served through Amazon Cloudfront (that is hence acting as a proxy). When Cloudfront comes to get the `/` resource, it gets a 404. I've found the reason of this behavior: Cloudfront does not set an `Accept` header, hence this piece of code in [WebMvcAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/1942cd1e81e63eaa0ea1001a1cd5e0fcd76be9dd/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java) returns `null`:  ``` java     @Override     public Object getHandlerInternal(HttpServletRequest request) throws Exception {         for (MediaType mediaType : MediaType                 .parseMediaTypes(request.getHeader(HttpHeaders.ACCEPT))) {             if (mediaType.includes(MediaType.TEXT_HTML)) {                 return super.getHandlerInternal(request);             }         }         return null;     } ```  I would suggest to consider no `Accept` headers is the equivalent of `Accept: */*`. Otherwise, returning a 406 rather than a 404 would make sense, see http://stackoverflow.com/questions/12130910/how-to-interpret-empty-http-accept-header </body>
		<created>2016-10-11 05:47:27</created>
		<closed>2016-10-11 12:05:34</closed>
	</bug>
	<bug>
		<id>7101</id>
		<title>@DataJpaTest Issues w/ Tests Written in Kotlin</title>
		<body>## Issue  When running tests written in Kotlin with the '@DataJpaTest' annotation, the application context is started for every class ran, rather then re-using the existing one on the cache.  ## Versions  Spring Boot - 1.4.1.RELEASE Kotlin - 1.0.4 Java - 1.8 ## Details  I am running into an issue when using Kotlin to write my integration tests with `@DataJpaTest`. When I run all of the tests together, I expect the `@DataJpaTest` classes to re-use the first application context, however they all end up starting their own. When I tried writing the same basic test in Java, only one application context was started.  Using IntelliJ's Kotlin tools, I decompiled the Kotlin code into Java. Now, when I run the new Java tests, it behaves in the same way as Kotlin, which was expected. The difference I noticed is the Kotlin `@Metadata` annotation. When I comment out the values `d1` and `d2` in the annotation (or the whole annotation), the new Java tests work properly, only starting one application context.   Also, switching the Kotlin tests to use the `@SpringBootTest` worked with only one application context starting.  I tried making a post on Kotlin's discussion board, but failed to get a response. I'm hoping your team may be able to provide insight on how I can work around this issue in Kotlin. Or if it is something that can be resolved on your end.   I've included sample Kotlin code, sample Java code, as well as attached a sample project used to replicate my issue.  ### Kotlin  ``` kotlin import org.junit.Test import org.junit.runner.RunWith import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest import org.springframework.test.context.junit4.SpringRunner  @RunWith(SpringRunner::class) @DataJpaTest open class KotlinDataJpaTest2 {      @Test     open fun contextLoads() {         println("dataJpaTest2")     }  } ``` ### Java (generated from Kotlin decompiler)  ``` java import kotlin.Metadata; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest; import org.springframework.test.context.junit4.SpringRunner;  @RunWith(SpringRunner.class) @DataJpaTest @Metadata(         mv = {1, 1, 1},         bv = {1, 0, 0},         k = 1 ,         d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\b\u0017\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\u0003\u001a\u00020\u0004H\u0017¨\u0006\u0005"},         d2 = {"Lcom/example/JavaDataJpaTest3;","","()V","contextLoads","","test sources for module AppContextDataJpaTest"} ) public class JavaDataJpaTest3 {     @Test     public void contextLoads() {         String var1 = "dataJpaTest2";         System.out.println(var1);     } } ``` ### Sample Project  [kotlin-and-datajpatest.zip](https://github.com/spring-projects/spring-boot/files/511647/kotlin-and-datajpatest.zip) </body>
		<created>2016-10-05 15:54:53</created>
		<closed>2016-10-19 11:10:11</closed>
	</bug>
	<bug>
		<id>7098</id>
		<title>Debug output unclear as to why auto-configuration did not match</title>
		<body>In Spring Boot 1.4.0.RELEASE, I see this in my logs with spring-session:  ```    SessionAutoConfiguration did not match       - @ConditionalOnClass classes found: org.springframework.session.Session (OnClassCondition)       - found web application StandardServletEnvironment (OnWebApplicationCondition)       - @ConditionalOnMissingBean (types: org.springframework.session.SessionRepository; SearchStrategy: all) found the following [sessionRepository] (OnBeanCondition) ```  Well, this is royally unhelpful: it says it did not match, yet all the conditions it lists _did_ match. </body>
		<created>2016-10-05 06:35:57</created>
		<closed>2016-10-06 14:54:49</closed>
	</bug>
	<bug>
		<id>7093</id>
		<title>init.d - Property 'logFolder' Does Not Work With Relative Paths</title>
		<body>When I use the following gradle setting in the spring boot plugIn the log file is written to the **/tmp** directory instead of the app home directory.  ``` springBoot {     executable = true     embeddedLaunchScriptProperties = [ logFolder: './'] } ```  I use logback for logging and all logs except those for the console are written to the /log folder in the app directory where the jar resides. I would like to have the console log also in that folder which is currently not possible.  **SYSTEM** Linux Mint 17.3 64-bit Kernel Linux 4.4.0-15-generic x86_64 MATE 1.12.0  Sprint Boot 1.4.1.RELEASE Gradle 2.12  **NOTE:** I experience the same problem with the **conf** file and property **LOG_FOLDER**. I also see this problem on my other machine with Ubuntu 14.04.1 LTS. </body>
		<created>2016-10-04 15:10:42</created>
		<closed>2016-10-14 08:20:36</closed>
	</bug>
	<bug>
		<id>7092</id>
		<title>init.d - Property 'pidFolder' Does Not Work With Relative Paths</title>
		<body>When I use the following gradle setting in the spring boot plugIn the pid file is not found when trying to stop the service:  ``` springBoot {     executable = true     embeddedLaunchScriptProperties = [ pidFolder: './'] } ```  When running `sudo service myapp start` the pid file is generated correctly in a directory named after the app next to the jar and the system says **Started [1234]**.  When running `sudo service myapp stop` the system says **Not running (pidfile not found)**.  I expected it to shut down the service correctly.  **SYSTEM** Linux Mint 17.3 64-bit Kernel Linux 4.4.0-15-generic x86_64 MATE 1.12.0  Sprint Boot 1.4.1.RELEASE Gradle 2.12  **NOTE:** I experience the same problem with the **conf** file and property **PID_FOLDER**. I also see this problem on my other machine with Ubuntu 14.04.1 LTS. </body>
		<created>2016-10-04 15:04:11</created>
		<closed>2016-10-14 08:20:36</closed>
	</bug>
	<bug>
		<id>7091</id>
		<title>not autowired jwtConverter to endpoints Config OAuth2</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  In `OAuth2AuthorizationServerConfiguration` it is setting `tokenStore` but not `jwtConverter` so it is not working if I added `tokenStore` and `jwtConverter`. </body>
		<created>2016-10-04 13:09:04</created>
		<closed>2017-01-19 20:45:48</closed>
	</bug>
	<bug>
		<id>7068</id>
		<title>configuration properties with immutable list</title>
		<body>#7045 reveals that we might have other areas where this is broken. If we have an immutable list with one element, everything went fine (including setting the list) _unless_ we try to replace the element at index 0.  We need to review the code and add test with the index. </body>
		<created>2016-09-30 08:19:41</created>
		<closed>2016-10-03 08:42:34</closed>
	</bug>
	<bug>
		<id>7065</id>
		<title>Mockito not optional for spring-boot-test</title>
		<body>I'm upgrading Spring Statemachine deps from Boot 1.3.1 to 1.4.1 and got a failure in some tests.  I looked https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-test/pom.xml#L76 where mockito is set optional  ```         &lt;dependency&gt;             &lt;groupId&gt;org.mockito&lt;/groupId&gt;             &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;             &lt;optional&gt;true&lt;/optional&gt;         &lt;/dependency&gt; ```  Test errors went away when I added mockito(1.9.5 if it matters) to gradle testRuntime. These particular tests don't even use mockito as previously it has not been in a classpath. Maybe that dependency is not optional at all?  ``` java.lang.NoClassDefFoundError: Could not initialize class org.springframework.boot.test.mock.mockito.MockReset     at org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener.beforeTestMethod(ResetMocksTestExecutionListener.java:45)     at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:269)     at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)     at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)     at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105)     at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)     at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)     at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)     at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)     at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)     at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)     at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)     at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)     at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)     at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)     at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)     at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-09-29 17:54:54</created>
		<closed>2016-10-04 05:47:36</closed>
	</bug>
	<bug>
		<id>7063</id>
		<title>JTA samples fail intermittently</title>
		<body>The move to Artemis appears to have exposed a race condition in the sample code that's causing the tests to fail intermittently. </body>
		<created>2016-09-29 14:58:56</created>
		<closed>2016-09-29 15:30:01</closed>
	</bug>
	<bug>
		<id>7062</id>
		<title>JtaAutoConfiguration may run before ArtemisAutoConfiguration</title>
		<body>`JtaAutoConfiguration` is `@AutoConfigureBefore` both `ActiveMQAutoConfiguration` and `HornetQAutoConfiguration`. `ArtemisAutoConfiguration` needs to be added to the list. </body>
		<created>2016-09-29 14:07:30</created>
		<closed>2016-09-29 14:09:29</closed>
	</bug>
	<bug>
		<id>7061</id>
		<title>Narayana auto-configuration does not back off properly</title>
		<body>If jboss-transaction-spi is not on the class path it still tries to run. It then fails:  ``` java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration.narayanaProperties     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:63) ~[classes/:na]     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:178) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:336) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:246) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523) ~[spring-context-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [classes/:na]     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [classes/:na]     at sample.narayana.SampleNarayanaApplication.main(SampleNarayanaApplication.java:30) [classes/:na]     at sample.narayana.SampleNarayanaApplicationTests.testTransactionRollback(SampleNarayanaApplicationTests.java:39) [test-classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_102]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_102]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_102]     at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_102]     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [junit-4.12.jar:4.12]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [junit-4.12.jar:4.12]     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.12.jar:4.12]     at org.springframework.boot.test.rule.OutputCapture$1.evaluate(OutputCapture.java:61) [classes/:na]     at org.junit.rules.RunRules.evaluate(RunRules.java:20) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [junit-4.12.jar:4.12]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [junit-4.12.jar:4.12]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: java.lang.IllegalStateException: @ConditionalOnMissingBean did not specify a bean using type, name or annotation and the attempt to deduce the bean's type failed     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.validate(OnBeanCondition.java:310) ~[classes/:na]     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.&lt;init&gt;(OnBeanCondition.java:300) ~[classes/:na]     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:112) ~[classes/:na]     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[classes/:na]     ... 42 common frames omitted Caused by: org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanTypeDeductionException: Failed to deduce bean type for org.springframework.boot.autoconfigure.transaction.jta.NarayanaJtaConfiguration.narayanaProperties     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanTypeForBeanMethod(OnBeanCondition.java:371) ~[classes/:na]     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanType(OnBeanCondition.java:347) ~[classes/:na]     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.&lt;init&gt;(OnBeanCondition.java:294) ~[classes/:na]     ... 44 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/jboss/tm/XAResourceRecoveryRegistry     at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_102]     at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_102]     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.8.0_102]     at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) ~[na:1.8.0_102]     at java.net.URLClassLoader.access$100(URLClassLoader.java:73) ~[na:1.8.0_102]     at java.net.URLClassLoader$1.run(URLClassLoader.java:368) ~[na:1.8.0_102]     at java.net.URLClassLoader$1.run(URLClassLoader.java:362) ~[na:1.8.0_102]     at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_102]     at java.net.URLClassLoader.findClass(URLClassLoader.java:361) ~[na:1.8.0_102]     at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_102]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_102]     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_102]     at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_102]     at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_102]     at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_102]     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:612) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:524) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:510) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]     at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.addDeducedBeanTypeForBeanMethod(OnBeanCondition.java:360) ~[classes/:na]     ... 46 common frames omitted Caused by: java.lang.ClassNotFoundException: org.jboss.tm.XAResourceRecoveryRegistry     at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_102]     at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_102]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_102]     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_102]     ... 65 common frames omitted ``` </body>
		<created>2016-09-29 13:54:25</created>
		<closed>2016-09-29 14:02:26</closed>
	</bug>
	<bug>
		<id>7051</id>
		<title>JestClient is not shutdown when the application context is closed</title>
		<body>Originally raised in https://github.com/spring-projects/spring-boot/issues/7045#issuecomment-250213453  &gt; `JestAutoConfiguration` isn't a `DisposableBean` and doesn't close the `JestClient` on shutdown. </body>
		<created>2016-09-28 20:54:56</created>
		<closed>2016-09-30 08:53:20</closed>
	</bug>
	<bug>
		<id>7045</id>
		<title>Indexed elasticsearch URI cannot be set in JestProperties</title>
		<body>Spring Boot 1.4.0 and 1.4.1  Sample application: https://github.com/AlexanderPruss/JestPropertiesBug  `JestAutoConfiguration` was added in this issue this summer: https://github.com/spring-projects/spring-boot/issues/6032  Trying to configure custom elasticsearch URIs in `JestProperties` results in a crash, because the URI property already has a default (unmodifiable!) value. Spring tries to put() configured URIs into this list, rather than creating a new list.  This isn't urgent, as Jest Configuration is relatively easy to add manually, but it'd be great to get this fixed.  Stacktrace:  ``` Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.elasticsearch.jest-org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties': Could not bind properties to JestProperties (prefix=spring.elasticsearch.jest, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is java.lang.UnsupportedOperationException     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)     at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1148)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1051)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1128)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1023)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)     at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)     ... 19 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.elasticsearch.jest-org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties': Could not bind properties to JestProperties (prefix=spring.elasticsearch.jest, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is java.lang.UnsupportedOperationException     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:351)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:302)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)     at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)     ... 42 common frames omitted Caused by: java.lang.UnsupportedOperationException: null     at java.util.AbstractList.set(AbstractList.java:132)     at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:378)     at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:280)     at org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanWrapper.setPropertyValue(RelaxedDataBinder.java:699)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:834)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:730)     at org.springframework.boot.bind.RelaxedDataBinder.doBind(RelaxedDataBinder.java:128)     at org.springframework.validation.DataBinder.bind(DataBinder.java:715)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:285)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:256)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:346)     ... 56 common frames omitted ``` </body>
		<created>2016-09-28 16:02:06</created>
		<closed>2016-09-30 08:53:20</closed>
	</bug>
	<bug>
		<id>7021</id>
		<title>jar URLs created using a context URL with our Handler point to the root of the jar rather than an entry</title>
		<body>When added to `JarURLConnectionTests`, this test will fail:  ``` java @Test public void connectionToEntryInNestedJarFromUrlThatUsesExistingUrlAsContext()         throws Exception {     URL url = new URL(new URL("jar", null, -1,             "file:" + getAbsolutePath() + "!/nested.jar!/", new Handler()), "/3.dat");     JarFile nested = this.jarFile             .getNestedJarFile(this.jarFile.getEntry("nested.jar"));     assertThat(JarURLConnection.get(url, nested).getInputStream())             .hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })); } ```  Note that the `Handler` is a `org.springframework.boot.loader.jar.Handler`. If it is a `sun.net.www.protocol.jar.Handler` then the test passes. The key difference is what's returned from `getFile()` of the URL.  | Handler | getFile() | | --- | --- | | Ours | `/import.sql` | | JDK's | `file:/Users/awilkinson/dev/spring/spring-boot/1.4.x/spring-boot-tools/spring-boot-loader/target/junit8413793381285871673/junit3981300331907567187.tmp!/nested.jar!/import.sql` |  This difference throws out the spec-related logic in `JarURLConnection`. The lack of a `!/` leaves the `JarURLConnection` with an empty `jarEntryName`, i.e. pointing to the root of the nested jar. As a result, the attempt to get the input stream fails:  ``` java.io.IOException: no entry name specified     at org.springframework.boot.loader.jar.JarURLConnection.getInputStream(JarURLConnection.java:164)     at org.springframework.boot.loader.jar.JarURLConnectionTests.connectionToEntryInNestedFromUrlThatUsesExistingUrlAsContext(JarURLConnectionTests.java:136)     … ``` </body>
		<created>2016-09-26 11:21:14</created>
		<closed>2016-10-26 11:14:01</closed>
	</bug>
	<bug>
		<id>7015</id>
		<title>Property in yaml file does not override default values</title>
		<body>Spring Boot 1.4.1  If an application tries to set the static-locations property like this, it will not override the default values. Boot will prepend the two values from the yaml file to the default list.   ``` yml spring:   resources:     static-locations:        - file:client/       - classpath:/static/ ```  The `staticLocations` field in the `ResourceProperties` class (can be seen in the `WebMvcAutoConfiguration` class) contains these values:  `[file:client/, classpath:/static/, classpath:/resources/, classpath:/static/, classpath:/public/]`  But if the yaml looks like this  ``` yml spring:   resources:     static-locations: file:client/,classpath:/static/ ```  `staticLocations` contains these values `[file:client/, classpath:/static/]`  Not sure if this a bug or the indented behavior. </body>
		<created>2016-09-25 17:38:43</created>
		<closed>2017-04-28 16:24:03</closed>
	</bug>
	<bug>
		<id>7014</id>
		<title>DevTools impact on http cache headers in production</title>
		<body>If devtools is included in the packaged jar and you run it with `java -jar ...` cache headers behave differently than without devtools.  How to reproduce: - `mvn install` the attached project. - run app with `java -jar` - open in browser (authenticate with default password) - refresh page   The javascript file loaded by `index.html` is cached by the browser. CORRECT.  Now remove `&lt;excludeDevtools&gt;true&lt;/excludeDevtools&gt;` from `pom.xml`, rebuild and try again.  The javascript file is no longer cached because the server response headers disallows caching.  The docs of spring boot dev tools states that devtools is disabled when run as `java -jar` ....   "Developer tools are automatically disabled when running a fully packaged application."  So there should be no impact by having spring boot dev tools on classpath in production?!?  [devtoolscache.zip](https://github.com/spring-projects/spring-boot/files/491744/devtoolscache.zip) </body>
		<created>2016-09-25 16:01:35</created>
		<closed>2016-11-01 06:14:03</closed>
	</bug>
	<bug>
		<id>6985</id>
		<title>Some metrics-related beans are only created when using Java 7</title>
		<body>Beyond the Java 8-specific implementations, there are some differences in the metrics-related beans that are created when using Java 7 versus Java 8: - `InMemoryMetricRepository` is only created when using Java 7 but the javadoc states that "An `InMemoryMetricRepository` is always created unless another `MetricRepository` provided by the user" - An `@ActuatorMetricWriter`-qualifed bean is only created when using Java 7  This relates to #6982 as it's not clear what should and should not be removed for Boot 2.0 where we require Java 8.  @dsyer Can you remember what the intention was here?  At the least, I think we need to update the javadoc for the auto-configuration. </body>
		<created>2016-09-21 19:20:33</created>
		<closed>2016-11-01 13:56:02</closed>
	</bug>
	<bug>
		<id>6983</id>
		<title>After update spring-boot from 1.4.0 to 1.4.1 the file `META-INF/orm.xml` no longer loaded</title>
		<body>After update spring-boot from 1.4.0 to 1.4.1 the file `META-INF/orm.xml` no longer loaded.  I have enabled `org.hibernate` logger to level `debug` and found this:  `Spring Boot 1.4.0` (`gradle bootRun`):  ``` 2016-09-21 20:17:15.555  INFO 14490 --- [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default' 2016-09-21 20:17:15.571 DEBUG 14490 --- [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : PersistenceUnitInfo [     name: default     persistence provider classname: null     classloader: org.springframework.boot.devtools.restart.classloader.RestartClassLoader@3326fdda     excludeUnlistedClasses: true     JTA datasource: null     Non JTA datasource: org.apache.tomcat.jdbc.pool.DataSource@7061a6eb{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.h2.Driver; maxActive=100; maxIdle=100; minIdle=10; initialSize=10; maxWait=30000; testOnBorrow=true; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=********; url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE; username=sa; validationQuery=SELECT 1; validationQueryTimeout=-1; validatorClassName=null; validationInterval=30000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; ignoreExceptionOnPreLoad=false; }     Transaction type: RESOURCE_LOCAL     PU root URL: file:/home/xakep/ws/line-meter/build/resources/main     Shared Cache Mode: UNSPECIFIED     Validation Mode: AUTO     Jar files URLs []     Managed classes names [         point.linemeter.model.Commutator         point.linemeter.model.Customer         point.linemeter.model.Employee         point.linemeter.model.Flat         point.linemeter.model.House         point.linemeter.model.LineMeasurement         point.linemeter.model.LineMeasurementResult         point.linemeter.model.NetworkNode         point.linemeter.model.Porch         point.linemeter.model.Port         point.linemeter.model.Street         point.linemeter.model.SubscriberLine]     Mapping files names [         META-INF/orm.xml]     Properties [] ```  `Spring Boot 1.4.1` (`gradle bootRun`):  ``` 2016-09-21 20:21:25.991  INFO 15832 --- [  restartedMain] j.LocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default' 2016-09-21 20:21:26.008 DEBUG 15832 --- [  restartedMain] o.hibernate.jpa.internal.util.LogHelper  : PersistenceUnitInfo [     name: default     persistence provider classname: null     classloader: org.springframework.boot.devtools.restart.classloader.RestartClassLoader@3ac47ba3     excludeUnlistedClasses: true     JTA datasource: null     Non JTA datasource: org.apache.tomcat.jdbc.pool.DataSource@36f8afab{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.h2.Driver; maxActive=100; maxIdle=100; minIdle=10; initialSize=10; maxWait=30000; testOnBorrow=true; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=********; url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE; username=sa; validationQuery=SELECT 1; validationQueryTimeout=-1; validatorClassName=null; validationInterval=3000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; ignoreExceptionOnPreLoad=false; }     Transaction type: RESOURCE_LOCAL     PU root URL: file:/home/xakep/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.4.1.RELEASE/db60078355dbe57b3ff5efcbf7b411fb5ae75306/spring-boot-autoconfigure-1.4.1.RELEASE.jar     Shared Cache Mode: UNSPECIFIED     Validation Mode: AUTO     Jar files URLs []     Managed classes names [         point.linemeter.model.Commutator         point.linemeter.model.Customer         point.linemeter.model.Employee         point.linemeter.model.Flat         point.linemeter.model.House         point.linemeter.model.LineMeasurement         point.linemeter.model.LineMeasurementResult         point.linemeter.model.NetworkNode         point.linemeter.model.Porch         point.linemeter.model.Port         point.linemeter.model.Street         point.linemeter.model.SubscriberLine]     Mapping files names []     Properties [] ```  The main difference here is `PU root URL`. In first case it is `file:/home/xakep/ws/line-meter/build/resources/main` and in second case it is `file:/home/xakep/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.4.1.RELEASE/db60078355dbe57b3ff5efcbf7b411fb5ae75306/spring-boot-autoconfigure-1.4.1.RELEASE.jar`.  Also I debug `org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.getOrmXmlForDefaultPersistenceUnit()` and found that this line:  ```         Resource ormXml = this.resourcePatternResolver.getResource(                 this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE); ```  returns the `META-INF/orm.xml` resource when used with `spring-boot 1.4.0`, but the same line returns `file:/home/xakep/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.4.1.RELEASE/db60078355dbe57b3ff5efcbf7b411fb5ae75306/spring-boot-autoconfigure-1.4.1.RELEASE.jarMETA-INF/orm.xml` when used with `spring-boot 1.4.1`.  It can be not even bug with `spring-boot` but with `spring-orm`, but unfortunately I can't debug any futher.  The persistence unit used in my app is default persistence unit. Almost no configuration. </body>
		<created>2016-09-21 17:40:15</created>
		<closed>2016-11-01 06:14:03</closed>
	</bug>
	<bug>
		<id>6918</id>
		<title>Spring Boot CLI "quiet" option doesn't silence the banner</title>
		<body>As shown here =&gt; https://github.com/spring-projects/spring-boot/blob/v1.4.0.RELEASE/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/RunCommand.java#L141-L150  The CLI DOES properly suppress all logging. However, it still prints out a banner to the screen, making it unsuitable for UNIX-y style scripts.  ``` $ spring version Spring CLI v1.4.0.RELEASE $ spring run -q /usr/local/bin/bootconsole.groovy &lt; ~/Dropbox/Greg/learning-spring-boot-2nd-edition/1/fragment_01.txt     .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.4.0.RELEASE) ```  (the rest of that example script is output that is expected) </body>
		<created>2016-09-17 18:40:58</created>
		<closed>2016-09-18 02:24:27</closed>
	</bug>
	<bug>
		<id>6897</id>
		<title>@AutoConfigureTestDatabase NPE when no datasource to replace exists</title>
		<body>Hi there,  I realized something today while refactoring my code. When using `@AutoConfigureTestDatabase` for tests without providing an datasource to replace, you run into an NPE while initializing. Ironically in the place, where it is supposed to log the datasource bean it is replacing.  Stack trace and sample project attached. Confirmed with 1.4.0.RELEASE and 1.4.1-BUILD-SNAPSHOT as of the time of opening the issue.  Sample project: [datasourcenpe.zip](https://github.com/spring-projects/spring-boot/files/475490/datasourcenpe.zip)  ``` -------------------------------------------------------  T E S T S ------------------------------------------------------- 22:04:25.733 [main] DEBUG org.springframework.test.context.junit4.SpringJUnit4ClassRunner - SpringJUnit4ClassRunner constructor called with [class de.test.datasourcenpe.AppTest] 22:04:25.741 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate] 22:04:25.751 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)] 22:04:25.768 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [de.test.datasourcenpe.AppTest] from class [org.springframework.test.context.support.DefaultTestContextBootstrapper] 22:04:25.792 [main] DEBUG org.springframework.test.context.support.AbstractDelegatingSmartContextLoader - Delegating to AnnotationConfigContextLoader to process context configuration [ContextConfigurationAttributes@13805618 declaringClass = 'de.test.datasourcenpe.AppTest', classes = '{class de.test.datasourcenpe.TestConfig}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. 22:04:25.830 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [de.test.datasourcenpe.AppTest] 22:04:25.831 [main] DEBUG org.springframework.test.context.support.DefaultTestContextBootstrapper - @TestExecutionListeners is not present for class [de.test.datasourcenpe.AppTest]: using defaults. 22:04:25.834 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] 22:04:25.850 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] 22:04:25.851 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@587d1d39, org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener@58c1670b, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@6b57696f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@5bb21b69, org.springframework.test.context.transaction.TransactionalTestExecutionListener@6b9651f3, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@38bc8ab5, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@687080dc, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@23d2a7e8, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@7a9273a8, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@26a7b76d] 22:04:25.853 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [de.test.datasourcenpe.AppTest] 22:04:25.854 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [de.test.datasourcenpe.AppTest] Running de.test.datasourcenpe.AppTest 22:04:25.855 [main] DEBUG org.springframework.test.context.junit4.SpringJUnit4ClassRunner - SpringJUnit4ClassRunner constructor called with [class de.test.datasourcenpe.AppTest] 22:04:25.856 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate] 22:04:25.856 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)] 22:04:25.856 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [de.test.datasourcenpe.AppTest] from class [org.springframework.test.context.support.DefaultTestContextBootstrapper] 22:04:25.857 [main] DEBUG org.springframework.test.context.support.AbstractDelegatingSmartContextLoader - Delegating to AnnotationConfigContextLoader to process context configuration [ContextConfigurationAttributes@4923ab24 declaringClass = 'de.test.datasourcenpe.AppTest', classes = '{class de.test.datasourcenpe.TestConfig}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.springframework.test.context.ContextLoader']. 22:04:25.864 [main] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [de.test.datasourcenpe.AppTest] 22:04:25.865 [main] DEBUG org.springframework.test.context.support.DefaultTestContextBootstrapper - @TestExecutionListeners is not present for class [de.test.datasourcenpe.AppTest]: using defaults. 22:04:25.868 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] 22:04:25.869 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext] 22:04:25.869 [main] INFO org.springframework.test.context.support.DefaultTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@4a87761d, org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener@66d1af89, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@8646db9, org.springframework.test.context.support.DirtiesContextTestExecutionListener@37374a5e, org.springframework.test.context.transaction.TransactionalTestExecutionListener@4671e53b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@2db7a79b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@6950e31, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@b7dd107, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@42eca56e, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@52f759d7] 22:04:25.870 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [de.test.datasourcenpe.AppTest] 22:04:25.870 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [de.test.datasourcenpe.AppTest] 22:04:25.871 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [de.test.datasourcenpe.AppTest] 22:04:25.871 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [de.test.datasourcenpe.AppTest] 22:04:25.872 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@7a30d1e6 testClass = AppTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class annotated with @DirtiesContext [false] with mode [null]. 22:04:25.873 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [de.test.datasourcenpe.AppTest] 22:04:25.873 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [de.test.datasourcenpe.AppTest] 22:04:25.874 [main] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@7a30d1e6 testClass = AppTest, testInstance = de.test.datasourcenpe.AppTest@1d371b2d, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]]. 22:04:25.874 [main] DEBUG org.springframework.test.context.support.AbstractDelegatingSmartContextLoader - Delegating to AnnotationConfigContextLoader to load context from [MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]. 22:04:25.875 [main] DEBUG org.springframework.test.context.support.AbstractGenericContextLoader - Loading ApplicationContext for merged context configuration [[MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]. 22:04:25.942 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemProperties] PropertySource with lowest search precedence 22:04:25.943 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemEnvironment] PropertySource with lowest search precedence 22:04:25.943 [main] DEBUG org.springframework.core.env.StandardEnvironment - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment] 22:04:25.943 [main] DEBUG org.springframework.test.context.support.AnnotationConfigContextLoader - Registering annotated classes: {class de.test.datasourcenpe.TestConfig} 22:04:25.989 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [Annotations] PropertySource with highest search precedence 22:04:25.993 [main] INFO org.springframework.context.support.GenericApplicationContext - Refreshing org.springframework.context.support.GenericApplicationContext@2641e737: startup date [Thu Sep 15 22:04:25 CEST 2016]; root of context hierarchy 22:04:25.993 [main] DEBUG org.springframework.context.support.GenericApplicationContext - Bean factory for org.springframework.context.support.GenericApplicationContext@2641e737: org.springframework.beans.factory.support.DefaultListableBeanFactory@29176cc1: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,testConfig,org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor,org.springframework.boot.test.context.ImportsContextCustomizer$ImportsConfiguration,org.springframework.boot.test.mock.mockito.MockitoPostProcessor$SpyPostProcessor,org.springframework.boot.test.mock.mockito.MockitoPostProcessor]; root of factory hierarchy 22:04:26.006 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.006 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.020 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references 22:04:26.022 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.088 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registered bean definition for imported class 'de.test.datasourcenpe.AppTest' 22:04:26.089 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registered bean definition for imported class 'org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration' 22:04:26.097 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.test.database.replace' in [Annotations] with type [Replace] and value 'ANY' 22:04:26.100 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'autoConfigurationReport' 22:04:26.103 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.test.database.replace' in [Annotations] with type [Replace] and value 'ANY' 22:04:26.103 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'autoConfigurationReport' 22:04:26.104 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration.embeddedDataSourceBeanFactoryPostProcessor() 22:04:26.114 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.114 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.124 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' to allow for resolving potential circular references 22:04:26.124 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.124 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.124 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.129 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'embeddedDataSourceBeanFactoryPostProcessor' to allow for resolving potential circular references 22:04:26.129 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.135 [main] DEBUG org.springframework.test.context.support.AbstractDelegatingSmartContextLoader - Delegating to AnnotationConfigContextLoader to load context from [MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]. 22:04:26.135 [main] DEBUG org.springframework.test.context.support.AbstractGenericContextLoader - Loading ApplicationContext for merged context configuration [[MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]. 22:04:26.137 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemProperties] PropertySource with lowest search precedence 22:04:26.137 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [systemEnvironment] PropertySource with lowest search precedence 22:04:26.137 [main] DEBUG org.springframework.core.env.StandardEnvironment - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment] 22:04:26.137 [main] DEBUG org.springframework.test.context.support.AnnotationConfigContextLoader - Registering annotated classes: {class de.test.datasourcenpe.TestConfig} 22:04:26.139 [main] DEBUG org.springframework.core.env.StandardEnvironment - Adding [Annotations] PropertySource with highest search precedence 22:04:26.139 [main] INFO org.springframework.context.support.GenericApplicationContext - Refreshing org.springframework.context.support.GenericApplicationContext@7770f470: startup date [Thu Sep 15 22:04:26 CEST 2016]; root of context hierarchy 22:04:26.139 [main] DEBUG org.springframework.context.support.GenericApplicationContext - Bean factory for org.springframework.context.support.GenericApplicationContext@7770f470: org.springframework.beans.factory.support.DefaultListableBeanFactory@5e5d171f: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,testConfig,org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor,org.springframework.boot.test.context.ImportsContextCustomizer$ImportsConfiguration,org.springframework.boot.test.mock.mockito.MockitoPostProcessor$SpyPostProcessor,org.springframework.boot.test.mock.mockito.MockitoPostProcessor]; root of factory hierarchy 22:04:26.140 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.140 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.140 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references 22:04:26.140 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' 22:04:26.160 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registered bean definition for imported class 'de.test.datasourcenpe.AppTest' 22:04:26.160 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registered bean definition for imported class 'org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration' 22:04:26.161 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.test.database.replace' in [Annotations] with type [Replace] and value 'ANY' 22:04:26.162 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'autoConfigurationReport' 22:04:26.163 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Found key 'spring.test.database.replace' in [Annotations] with type [Replace] and value 'ANY' 22:04:26.164 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'autoConfigurationReport' 22:04:26.164 [main] DEBUG org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader - Registering bean definition for @Bean method org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration.embeddedDataSourceBeanFactoryPostProcessor() 22:04:26.165 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.165 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.166 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' to allow for resolving potential circular references 22:04:26.166 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'org.springframework.boot.test.context.ImportsContextCustomizer$ImportsCleanupPostProcessor' 22:04:26.166 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.167 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.167 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Eagerly caching bean 'embeddedDataSourceBeanFactoryPostProcessor' to allow for resolving potential circular references 22:04:26.167 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Finished creating instance of bean 'embeddedDataSourceBeanFactoryPostProcessor' 22:04:26.170 [main] ERROR org.springframework.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener@66d1af89] to prepare test instance [de.test.datasourcenpe.AppTest@1d371b2d] java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener.prepareTestInstance(AutoConfigureReportTestExecutionListener.java:49)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: java.lang.NullPointerException: null     at org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor.process(TestDatabaseAutoConfiguration.java:103)     at org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor.postProcessBeanDefinitionRegistry(TestDatabaseAutoConfiguration.java:92)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:123)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523)     at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128)     at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)     at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108)     at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)     ... 25 common frames omitted 22:04:26.180 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - After test class: context [DefaultTestContext@7a30d1e6 testClass = AppTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@5891e32e testClass = AppTest, locations = '{}', classes = '{class de.test.datasourcenpe.TestConfig}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextCustomizers = set[org.springframework.boot.test.context.ImportsContextCustomizer@7697f78, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6e0e048a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@4230ec6c], contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class annotated with @DirtiesContext [false] with mode [null]. Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.326 sec &lt;&lt;&lt; FAILURE! - in de.test.datasourcenpe.AppTest testApp(de.test.datasourcenpe.AppTest)  Time elapsed: 0.008 sec  &lt;&lt;&lt; ERROR! java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener.prepareTestInstance(AutoConfigureReportTestExecutionListener.java:49)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: java.lang.NullPointerException: null     at org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor.process(TestDatabaseAutoConfiguration.java:103)     at org.springframework.boot.test.autoconfigure.orm.jpa.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor.postProcessBeanDefinitionRegistry(TestDatabaseAutoConfiguration.java:92)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:123)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523)     at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:128)     at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)     at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:108)     at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:251)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener.prepareTestInstance(AutoConfigureReportTestExecutionListener.java:49)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)   Results :  Tests in error:    AppTest.testApp » IllegalState Failed to load ApplicationContext  Tests run: 1, Failures: 0, Errors: 1, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3.264 s [INFO] Finished at: 2016-09-15T22:04:26+02:00 [INFO] Final Memory: 26M/273M [INFO] ------------------------------------------------------------------------ ``` </body>
		<created>2016-09-15 20:18:22</created>
		<closed>2016-09-16 23:52:07</closed>
	</bug>
	<bug>
		<id>6896</id>
		<title>FailureAnalyzer inaccurate when SSL keystore password is incorrect</title>
		<body>The following log snippet shows that when an SSL exception is thrown, the FailureAnalyzer reports:  ``` *************************** APPLICATION FAILED TO START ***************************  Description:  Embedded servlet container failed to start. Port 443 was already in use.  Action:  Identify and stop the process that's listening on port 443 or configure this application to listen on another port. ```  However, the port is free but the root cause is a bad keystore password:  ``` 2016-09-15 10:41:00,701 [WrapperSimpleAppMain] ERROR o.a.c.h.Http11NioProtocol - Failed to start end point associated with ProtocolHandler [https-jsse-nio-443] java.lang.IllegalArgumentException: java.io.IOException: Keystore was tampered with, or password was incorrect         at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:103)         at org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:81)         at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:245)         at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:874)         at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:573)         at org.apache.catalina.connector.Connector.startInternal(Connector.java:1035)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)         at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:234)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:179)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174)         at org.icgc.dcc.dev.server.ServerMain.main(ServerMain.java:31)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:290)         at java.lang.Thread.run(Thread.java:745) Caused by: java.io.IOException: Keystore was tampered with, or password was incorrect         at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:780)         at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56)         at sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)         at sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70)         at java.security.KeyStore.load(KeyStore.java:1445)         at org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:136)         at org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:187)         at org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:189)         at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:101)         ... 33 common frames omitted Caused by: java.security.UnrecoverableKeyException: Password verification failed         at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:778)         ... 41 common frames omitted 2016-09-15 10:41:00,703 [WrapperSimpleAppMain] ERROR o.a.c.c.StandardService - Failed to start connector [Connector[HTTP/1.1-443]] org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-443]]         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:158)         at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:234)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:179)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174)         at org.icgc.dcc.dev.server.ServerMain.main(ServerMain.java:31)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:290)         at java.lang.Thread.run(Thread.java:745) Caused by: org.apache.catalina.LifecycleException: service.getName(): "Tomcat";  Protocol handler start failed         at org.apache.catalina.connector.Connector.startInternal(Connector.java:1042)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152)         ... 27 common frames omitted Caused by: java.lang.IllegalArgumentException: java.io.IOException: Keystore was tampered with, or password was incorrect         at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:103)         at org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:81)         at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:245)         at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:874)         at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:573)         at org.apache.catalina.connector.Connector.startInternal(Connector.java:1035)         ... 28 common frames omitted Caused by: java.io.IOException: Keystore was tampered with, or password was incorrect         at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:780)         at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56)         at sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)         at sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70)         at java.security.KeyStore.load(KeyStore.java:1445)         at org.apache.tomcat.util.net.SSLUtilBase.getStore(SSLUtilBase.java:136)         at org.apache.tomcat.util.net.SSLHostConfigCertificate.getCertificateKeystore(SSLHostConfigCertificate.java:187)         at org.apache.tomcat.util.net.jsse.JSSEUtil.getKeyManagers(JSSEUtil.java:189)         at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:101)         ... 33 common frames omitted Caused by: java.security.UnrecoverableKeyException: Password verification failed         at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:778)         ... 41 common frames omitted 2016-09-15 10:41:00,712 [WrapperSimpleAppMain] INFO  o.a.c.h.Http11NioProtocol - Pausing ProtocolHandler ["https-jsse-nio-443"] 2016-09-15 10:41:00,712 [WrapperSimpleAppMain] INFO  o.a.c.c.StandardService - Stopping service Tomcat 2016-09-15 10:41:00,720 [WrapperSimpleAppMain] INFO  o.a.c.u.LifecycleBase - The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored. 2016-09-15 10:41:00,720 [WrapperSimpleAppMain] INFO  o.a.c.h.Http11NioProtocol - Stopping ProtocolHandler ["https-jsse-nio-443"] 2016-09-15 10:41:00,721 [WrapperSimpleAppMain] INFO  o.a.c.h.Http11NioProtocol - Destroying ProtocolHandler ["https-jsse-nio-443"] 2016-09-15 10:41:00,732 [WrapperSimpleAppMain] INFO  o.s.b.a.l.AutoConfigurationReportLoggingInitializer -  Error starting ApplicationContext. To display the auto-configuration report enable debug logging (start with --debug)   2016-09-15 10:41:00,744 [WrapperSimpleAppMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter -  *************************** APPLICATION FAILED TO START ***************************  Description:  Embedded servlet container failed to start. Port 443 was already in use.  Action:  Identify and stop the process that's listening on port 443 or configure this application to listen on another port. ``` </body>
		<created>2016-09-15 14:46:59</created>
		<closed>2016-09-20 12:58:01</closed>
	</bug>
	<bug>
		<id>6893</id>
		<title>Provide property metadata for spring.test.mockmvc.print</title>
		<body>There is no property metadata definition for `spring.test.mockmvc.print`, which makes IDE support for this property harder than necessary. I also assume that there are other properties which are undefined, which should also be defined/documented in code.  Related: https://youtrack.jetbrains.com/issue/IDEA-161269 </body>
		<created>2016-09-15 09:15:37</created>
		<closed>2016-09-15 17:15:12</closed>
	</bug>
	<bug>
		<id>6874</id>
		<title>@PostConstruct methods on test classes are called twice</title>
		<body>First call:  ```     at sample.freemarker.SampleWebFreeMarkerApplicationTests.foo(SampleWebFreeMarkerApplicationTests.java:55)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:365)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:310)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:399)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)     at org.springframework.boot.test.autoconfigure.AutoConfigureReportTestExecutionListener.prepareTestInstance(AutoConfigureReportTestExecutionListener.java:46)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  Second call:  ``` java.lang.Exception     at sample.freemarker.SampleWebFreeMarkerApplicationTests.foo(SampleWebFreeMarkerApplicationTests.java:55)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:365)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:310)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1575)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:399)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:119)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  `AutoConfigureReportTestExecutionListener` appears to be the cause. It delegates to an instance of `DependencyInjectionTestExecutionListener` and another instance of the same listener is directly registered with the `TestContextManager` so it's called twice. </body>
		<created>2016-09-13 10:03:45</created>
		<closed>2016-09-15 05:07:28</closed>
	</bug>
	<bug>
		<id>6871</id>
		<title>Mockito fails to verify the second time on the proxied bean</title>
		<body>Version: Spring Boot 1.4.0-RELEASE  It looks like there is an issue with verifing _multiple times_ with Mockito on a _proxied_ bean.  Test-case:  ``` java public class SpringBootMockitoTest {      private AnnotationConfigApplicationContext context;      private SomeServiceWithTransact someServiceWithTransact;     private SomeServiceNoTransact someServiceNoTransact;      @Configuration     @EnableTransactionManagement     public static class Config {          @Bean         public SomeServiceWithTransact someServiceWithTransact() {             return new SomeServiceWithTransact();         }          @Bean         public SomeServiceNoTransact someServiceNoTransact() {             return new SomeServiceNoTransact();         }          @Bean         public PlatformTransactionManager tm() {             return new DataSourceTransactionManager(dataSource());         }          @Bean         public DataSource dataSource() {             return DataSourceBuilder.create()                              .driverClassName("org.h2.Driver")                              .url("jdbc:h2:mem:tst;DB_CLOSE_DELAY=-1")                              .username("sa")                              .password("")                              .build();         }      }      private static class SomeServiceNoTransact {          public void normalMethod(int param1) {             // do nothing         }      }      private static class SomeServiceWithTransact {          @Transactional         public void transactionalMethod(int param1) {             // do nothing         }      }      @Before     public void setUp() throws Exception {         context = new AnnotationConfigApplicationContext(Config.class);         context.start();          someServiceWithTransact = context.getBean(SomeServiceWithTransact.class);         someServiceNoTransact = context.getBean(SomeServiceNoTransact.class);     }      @After     public void tearDown() throws Exception {         context.stop();     }      @Test     public void testNormalMethod() throws Exception {         SomeServiceNoTransact serviceSpy = spy(someServiceNoTransact);          // when         serviceSpy.normalMethod(1);          // then         Mockito.verify(serviceSpy, Mockito.times(1)).normalMethod(1);         Mockito.verify(serviceSpy, Mockito.times(1)).normalMethod(anyInt());     }      @Test     public void testTransactionalMethod() throws Exception {         SomeServiceWithTransact serviceSpy = spy(someServiceWithTransact);          // when         serviceSpy.transactionalMethod(1);          // then         Mockito.verify(serviceSpy, Mockito.times(1)).transactionalMethod(1);         Mockito.verify(serviceSpy, Mockito.times(1)).transactionalMethod(anyInt());     } } ```  Now: - `testNormalMethod()` will be green and all right - `testTransactionalMethod()` will be red and it is not all right. The only difference to the first test in the code is that the method unter test is annotated with `@Transactional`  `testTransactionalMethod()` fails with:  ``` org.mockito.exceptions.misusing.UnfinishedVerificationException:  Missing method call for verify(mock) here: -&gt; at de.audi.pbt.problem.service.MockitoIT.testTransactionalMethod(MockitoIT.java:123) ```  But! - If you remove @Transactional form the bean unter test, the test will become green. - If you remove the first call to `verify`, the test will become green. </body>
		<created>2016-09-12 15:24:23</created>
		<closed>2016-09-12 21:56:29</closed>
	</bug>
	<bug>
		<id>6846</id>
		<title>Gradle plugin task bootRepackage does not declare output when classifier is missing</title>
		<body>Bug report  SpringBoot version:  1.4.0  `bootRepackage.outputs.files` is empty if `bootRepackage.classifier` is not set although an output exists.  The [setupInputOutputs](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java#L141) method is only called [if a classifier is set](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java#L135). </body>
		<created>2016-09-08 10:46:43</created>
		<closed>2017-04-04 15:37:44</closed>
	</bug>
	<bug>
		<id>6845</id>
		<title>Prevent CastCastException when RootUriRequestExpectationManager is used with @RestClientTests</title>
		<body>HI having problems using `ContentRequestMatchers` from spring-test with spring-boot-test `MockServerRestTemplateCustomizer`.   ``` java         this.server                 .expect(requestTo("/someUrl"))                 .andExpect(method(HttpMethod.POST))                 .andExpect(content().string("some_body"))` ```  following exception thrown:  ``` java.lang.ClassCastException: org.springframework.boot.test.web.client.RootUriRequestExpectationManager$ReplaceUriClientHttpRequest cannot be cast to org.springframework.mock.http.client.MockClientHttpRequest ``` </body>
		<created>2016-09-08 09:38:23</created>
		<closed>2016-09-12 20:35:27</closed>
	</bug>
	<bug>
		<id>6833</id>
		<title>Profile set in spring.profiles.active is ignored if the same profile is set as spring.profiles.default as well</title>
		<body>This is related to issue https://github.com/spring-projects/spring-boot/issues/5998 Im opening a new issue as per suggestion by @philwebb  I was trying out the fix from #5998 in version 1.4 and it is working for the most part. There is one small glitch though consider the below 1. I have two profiles `dev` and `prod` 2. I have set `spring.profiles.default` to `dev` using   ``` public static void addDefaultProfile(SpringApplication app) {         Map&lt;String, Object&gt; defProperties =  new HashMap&lt;&gt;();         defProperties.put("spring.profiles.default", "dev");         app.setDefaultProperties(defProperties);     } ```  Note: I'm not using `Collections.singletonMap` as its makes the array fixed size, which causes issues as you would try to add stuff to that array in spring 3. Now if I do `env.acceptsProfiles("dev")` it will return false, which is OK since I didn't set it as active profile 4. now if I do `--spring.profiles.active=dev` I would expect `env.acceptsProfiles("dev")` to return true but it doesn't. seems like if the same profile is used as active and default the default one is used. Ideally it should be promoted to active  The use-case for this is if I want to do some stuff based on profiles I might be using `env.acceptsProfiles("dev")` to check if the profile is active and in this case its failing.  Here is a test case for the scenario, Ideally the case should pass, but with the latest spring boot release(1.4) version its failing  ``` @Test public void sameDefaultProfileAndActive() throws Exception {         SpringApplication application = new SpringApplication(Config.class);         application.setWebEnvironment(false);         this.context = application.run("--spring.profiles.default=customdefault",                 "--spring.profiles.active=customdefault");         assertThat(this.context.getEnvironment().acceptsProfiles("customdefault"))                 .isTrue(); } ``` </body>
		<created>2016-09-07 10:36:02</created>
		<closed>2016-09-15 00:53:19</closed>
	</bug>
	<bug>
		<id>6829</id>
		<title>CLI extensions cannot load AST transformations</title>
		<body>This change made a special case for loading `Command` instances: 270530c4. But I think it neglected to take into account that `ServiceLoader` is used for other things (AST transformations for instance, and compiler autoconfigurations).  Consequently, extensions can install commands, but none of the other things. Probably the classloader that we built for the commands needs to be made available in the GroovyCompiler more generally? </body>
		<created>2016-09-07 08:49:22</created>
		<closed>2016-09-13 10:10:47</closed>
	</bug>
	<bug>
		<id>6803</id>
		<title>Relaxed binding does not bind dashed names to properties with capitalised words</title>
		<body>The following entry in application.properties:  ``` spring.datasource.tomcat.init-s-q-l ```  does not bind to the object property when using spring boot 1.4.0  ``` org.apache.tomcat.jdbc.pool.DataSource.initSQL ```  According to [StackOverflow](https://stackoverflow.com/questions/39267099/spring-boot-property-with-dashes) the key init-s-q-l should be supported by spring-boot. It is the name defined in spring-configuration-metadata.json  ``` {   "name": "spring.datasource.tomcat.init-s-q-l",   "type": "java.lang.String",   "sourceType": "org.apache.tomcat.jdbc.pool.DataSource" } ```  This name is also the one suggested by IntelliJ IDEA, causing confusion for the developer.  The following does work:  ``` spring.datasource.tomcat.initSQL ```  See example project [spring-boot-ex.zip](https://github.com/spring-projects/spring-boot/files/449349/spring-boot-ex.zip) </body>
		<created>2016-09-01 09:59:54</created>
		<closed>2016-09-09 22:39:03</closed>
	</bug>
	<bug>
		<id>6801</id>
		<title>Servlet context initialization parameter for spring.config.location is ignored</title>
		<body>I'm using Spring Boot 1.4.0 deployed as a war file to Tomcat 8.5. According to the documentantion, I should be able to configure the spring.boot.location configuration parameter by passing it via Servlet context initialization parameter.  &gt; If you are running in a container then JNDI properties (in java:comp/env) or servlet context initialization parameters can be used instead of, or as well as, environment variables or system properties. &gt; http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html  When I add this line to my context.xml file in Tomcat `&lt;Parameter name="spring.config.location" value="file:/some/path/" /&gt;` the application.properties file at this path is ignored and not read.  If I however use a JNDI entry like `&lt;Environment name="spring.config.location" value="file:/some/path/" type="java.lang.String" /&gt;` the application.properties file is read and will be used. </body>
		<created>2016-08-31 21:26:27</created>
		<closed>2016-09-15 12:36:12</closed>
	</bug>
	<bug>
		<id>6795</id>
		<title>NPE when @SpringBootTest(webEnvironment = RANDOM_PORT) and @WebAppConfiguration are used together</title>
		<body>The context fails to load due to a NullPointerException:  ``` java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:189) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:131) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:230) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:228) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:287) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:289) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:247) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191) [spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: java.lang.NullPointerException: null     at org.springframework.test.context.web.socket.MockServerContainerContextCustomizer.customizeContext(MockServerContainerContextCustomizer.java:38) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.boot.test.context.SpringBootContextLoader$ContextCustomizerAdapter.initialize(SpringBootContextLoader.java:270) ~[classes/:na]     at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:639) ~[classes/:na]     at org.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:349) ~[classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) ~[classes/:na]     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111) ~[classes/:na]     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ~[spring-test-4.3.3.BUILD-SNAPSHOT.jar:4.3.3.BUILD-SNAPSHOT]     ... 25 common frames omitted ```  There's no need to use `@WebAppConfiguration` when you're using `@SpringBootTest` and, in this case at least, it's harmful. Perhaps we should fail fast, telling the user to remove `@WebAppConfiguration`? </body>
		<created>2016-08-31 10:31:35</created>
		<closed>2016-09-15 10:20:57</closed>
	</bug>
	<bug>
		<id>6791</id>
		<title>Each request to the log file endpoint generates a warning</title>
		<body>Following [this change](https://github.com/spring-projects/spring-boot/commit/4352707eb36114391458d30c78b9cfc9fefe8d6b#diff-62678a8065fecf78e011449de210652f) we call `afterPropertiesSet()` on our `ResourceHttpRequestHandler` subclass per log file endpoint request. This produces a warning about the locations list being empty. Lots of requests equals lots of warnings:  ``` 2016-08-30 16:21:40.332  WARN 28531 --- [nio-8080-exec-1] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:22:59.453  WARN 28531 --- [nio-8080-exec-3] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:00.683  WARN 28531 --- [nio-8080-exec-5] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:01.440  WARN 28531 --- [nio-8080-exec-7] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:02.113  WARN 28531 --- [nio-8080-exec-9] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:02.754  WARN 28531 --- [nio-8080-exec-1] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:03.402  WARN 28531 --- [nio-8080-exec-3] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:04.090  WARN 28531 --- [nio-8080-exec-5] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:04.753  WARN 28531 --- [nio-8080-exec-7] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:05.393  WARN 28531 --- [nio-8080-exec-9] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver. 2016-08-30 16:23:05.945  WARN 28531 --- [nio-8080-exec-1] o.s.w.s.r.ResourceHttpRequestHandler     : Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver ``` </body>
		<created>2016-08-30 15:28:10</created>
		<closed>2016-09-09 20:23:37</closed>
	</bug>
	<bug>
		<id>6762</id>
		<title>OnBeanCondition doesn't implement SearchStrategy.PARENTS as documented</title>
		<body>The javadocs says that `PARENTS` will "Search all parents and ancestors, but not the current context", however `OnBeanCondition` only looks in the parent and ignores any older ancestors. </body>
		<created>2016-08-26 19:00:12</created>
		<closed>2016-08-31 12:31:04</closed>
	</bug>
	<bug>
		<id>6755</id>
		<title>Bean condition evaluation doesn't find beans produced by a factory bean returned from a bean method with arguments on a component-scanned configuration class</title>
		<body>Since Hibernate 5.2, `SessionFactory` extends `EntityManagerFactory`. Having that in mind, one would expect that if Hibernate's native API is used for configuration, Boot's auto-config for `EntityManagerFactory` would back off.  This however does not happen, as demonstrated by [sample project](https://github.com/vpavic-samples/spring-boot-samples/tree/master/hibernate-native). The project contains test which tries to assert existence of a single `EntityManagerFactory`, which fails.  Also, auto-config report contains the following output:  ```    JpaBaseConfiguration#entityManagerFactory matched       - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,javax.persistence.EntityManagerFactory; SearchStrategy: all) found no beans (OnBeanCondition) ```  Interesting thing is that if I move Hibernate config to `@SpringBootApplication` class, then it works as expected:  ```    JpaBaseConfiguration#entityManagerFactory did not match       - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,javax.persistence.EntityManagerFactory; SearchStrategy: all) found the following [sessionFactory] (OnBeanCondition) ```  And the included test of course passes in this case.  Here's the diff to reproduce this scenario:  ``` diff diff --git a/hibernate-native/src/main/java/sample/HibernateConfig.java b/hibernate-native/src/main/java/sample/HibernateConfig.java deleted file mode 100644 index 66344d0..0000000 --- a/hibernate-native/src/main/java/sample/HibernateConfig.java +++ /dev/null @@ -1,27 +0,0 @@ -package sample; - -import javax.sql.DataSource; - -import org.hibernate.SessionFactory; -import org.springframework.context.annotation.Bean; -import org.springframework.context.annotation.Configuration; -import org.springframework.orm.hibernate5.HibernateTransactionManager; -import org.springframework.orm.hibernate5.LocalSessionFactoryBean; - -@Configuration -public class HibernateConfig { - -   @Bean -   public LocalSessionFactoryBean sessionFactory(DataSource dataSource) { -       LocalSessionFactoryBean sessionFactoryBean = new LocalSessionFactoryBean(); -       sessionFactoryBean.setDataSource(dataSource); -       sessionFactoryBean.setPackagesToScan(SampleApp.class.getPackage().getName()); -       return sessionFactoryBean; -   } - -   @Bean -   public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) { -       return new HibernateTransactionManager(sessionFactory); -   } - -} diff --git a/hibernate-native/src/main/java/sample/SampleApp.java b/hibernate-native/src/main/java/sample/SampleApp.java index 3690fa2..93ce159 100644 --- a/hibernate-native/src/main/java/sample/SampleApp.java +++ b/hibernate-native/src/main/java/sample/SampleApp.java @@ -1,7 +1,13 @@  package sample;  +import javax.sql.DataSource; + +import org.hibernate.SessionFactory;  import org.springframework.boot.SpringApplication;  import org.springframework.boot.autoconfigure.SpringBootApplication; +import org.springframework.context.annotation.Bean; +import org.springframework.orm.hibernate5.HibernateTransactionManager; +import org.springframework.orm.hibernate5.LocalSessionFactoryBean;   @SpringBootApplication  public class SampleApp { @@ -10,4 +16,17 @@ public class SampleApp {         SpringApplication.run(SampleApp.class, args);     }  +   @Bean +   public LocalSessionFactoryBean sessionFactory(DataSource dataSource) { +       LocalSessionFactoryBean sessionFactoryBean = new LocalSessionFactoryBean(); +       sessionFactoryBean.setDataSource(dataSource); +       sessionFactoryBean.setPackagesToScan(SampleApp.class.getPackage().getName()); +       return sessionFactoryBean; +   } + +   @Bean +   public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) { +       return new HibernateTransactionManager(sessionFactory); +   } +  } ``` </body>
		<created>2016-08-26 05:51:14</created>
		<closed>2016-08-26 13:37:29</closed>
	</bug>
	<bug>
		<id>6727</id>
		<title>"spring.test.webmvc" should be renamed to ""spring.test.mockmvc"</title>
		<body>The auto-configuration uses ""spring.test.webmvc" but the `@PropertyMapping` uses "spring.test.mockmvc" </body>
		<created>2016-08-23 13:06:40</created>
		<closed>2016-08-23 15:12:32</closed>
	</bug>
	<bug>
		<id>6724</id>
		<title>build-info goal fails with a NullPointerException if you reference a non-existent property</title>
		<body>The standard error tells us almost nothing:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.BUILD-SNAPSHOT:build-info (generate build info) on project gh-6679: null: MojoExecutionException: NullPointerException -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```  Running with `-X` isn't much better:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.BUILD-SNAPSHOT:build-info (generate build info) on project gh-6679: null: MojoExecutionException: NullPointerException -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.BUILD-SNAPSHOT:build-info (generate build info) on project gh-6679: null     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException     at org.springframework.boot.maven.BuildInfoMojo.execute(BuildInfoMojo.java:71)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)     ... 20 more Caused by: java.lang.NullPointerException     at java.util.Hashtable.put(Hashtable.java:459)     at org.springframework.boot.loader.tools.BuildPropertiesWriter.createBuildInfo(BuildPropertiesWriter.java:90)     at org.springframework.boot.loader.tools.BuildPropertiesWriter.writeBuildProperties(BuildPropertiesWriter.java:49)     at org.springframework.boot.maven.BuildInfoMojo.execute(BuildInfoMojo.java:66)     ... 22 more [ERROR] [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ``` </body>
		<created>2016-08-23 10:04:16</created>
		<closed>2016-08-23 10:31:25</closed>
	</bug>
	<bug>
		<id>6713</id>
		<title>Liquibase doesn't respect logging configuration</title>
		<body>This issue is the same as #3470: liquibase doesn't use logging configuration -- it prints INFO messages when I want to see only warnings and its messages have a different format. ### Steps to reproduce  ``` console $ git clone https://github.com/php-coder/mystamps.git $ cd mystamps $ git checkout b2f1c612d9eba7a957edc602c3431de848fd55e1 $ mvn clean spring-boot:run ``` ### Observable behavior  ``` ... [2016-08-21 12:36:50.686] boot - 3174  INFO [main] --- RequestMappingHandlerAdapter: Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@63dde5e5: startup date [Mon Aug 21 12:36:46 CEST 2016]; root of context hierarchy INFO 8/21/16 12:36 PM: liquibase: Successfully acquired change log lock INFO 8/21/16 12:36 PM: liquibase: Creating database history table with name: PUBLIC.DATABASECHANGELOG INFO 8/21/16 12:36 PM: liquibase: Reading from PUBLIC.DATABASECHANGELOG ... INFO 8/21/16 12:36 PM: liquibase: Successfully released change log lock [2016-08-21 12:36:53.115] boot - 3174  INFO [main] --- application: Initializing Spring FrameworkServlet 'dispatcherServlet' ... ``` ### Expected behavior  I shouldn't see all of these messages from Liquibase because I'm interesting only in warnings:  ``` console $ grep liquibase src/main/resources/application-test.properties liquibase.contexts: scheme, init-data, test-data liquibase.change-log: classpath:/liquibase/changelog.xml logging.level.liquibase: WARN ``` ### Workaround  Also I found out that it was working in Spring Boot 1.3.0.RELEASE but broken since 1.3.1.RELEASE. To test it you can downgrade the version and test that it works:  ``` console sed -i 's|1.3.7.RELEASE|1.3.0.RELEASE|;s|9.2.18.v20160721|9.2.11.v20150529|' pom.xml ```  Let me know if you need more information. </body>
		<created>2016-08-22 10:46:06</created>
		<closed>2016-08-22 14:07:18</closed>
	</bug>
	<bug>
		<id>6709</id>
		<title>Neo4J fails to find entities in executable archives (BOOT-INF/classes and WEB-INF/classes)</title>
		<body>nothing to do with jackson but using that repo https://github.com/xenoterracide/jacksonconfig/tree/serializable again, this time branch `serializable`. In order for this problem to occur you have to connect to a standalone neo4j server.  ``` docker run -it --rm -p 7474:7474 -p7687:7687  --name neo4j neo4j:3.0 ```  should work, but ip address may vary, you'll have to go to http://dockerip:7474 and set the password, to the one I committed or whatever.  to start run the app in an IDE... and run the following http, just to prove that the app does work  ``` curl -X POST -H "Content-Type: application/json" -d '{"name":"Hello Kitty"}' http://localhost:8080/myEntities -v                             slave-vi Note: Unnecessary use of -X or --request, POST is already inferred. *   Trying ::1... * Connected to localhost (::1) port 8080 (#0) &gt; POST /myEntities HTTP/1.1 &gt; Host: localhost:8080 &gt; User-Agent: curl/7.50.1 &gt; Accept: */* &gt; Content-Type: application/json &gt; Content-Length: 22 &gt;  * upload completely sent off: 22 out of 22 bytes &lt; HTTP/1.1 201  &lt; Location: http://localhost:8080/myEntities/10 &lt; Content-Type: application/hal+json;charset=UTF-8 &lt; Transfer-Encoding: chunked &lt; Date: Sun, 21 Aug 2016 07:37:03 GMT &lt;  {   "name" : "Hello Kitty",   "new" : true,   "_links" : {     "self" : {       "href" : "http://localhost:8080/myEntities/10"     },     "myEntity" : {       "href" : "http://localhost:8080/myEntities/10"     }   } * Connection #0 to host localhost left intact } ```  you'll note it says 10 here, it looks like it is persisting the neo4j entites it's just blowing up before response.  Then package  `mvn clean &amp;&amp; mvn package` and start the jar `java -jar target/jacksonconfig-1.0-SNAPSHOT.jar`  ``` curl -X POST -H "Content-Type: application/json" -d '{"name":"Hello Kitty"}' http://localhost:8080/myEntities -v                             slave-vi Note: Unnecessary use of -X or --request, POST is already inferred. *   Trying ::1... * Connected to localhost (::1) port 8080 (#0) &gt; POST /myEntities HTTP/1.1 &gt; Host: localhost:8080 &gt; User-Agent: curl/7.50.1 &gt; Accept: */* &gt; Content-Type: application/json &gt; Content-Length: 22 &gt;  * upload completely sent off: 22 out of 22 bytes &lt; HTTP/1.1 500  &lt; Content-Type: application/hal+json;charset=UTF-8 &lt; Transfer-Encoding: chunked &lt; Date: Sun, 21 Aug 2016 07:51:12 GMT &lt; Connection: close &lt;  * Closing connection 0 {"cause":null,"message":"Id must be assignable to Serializable! Object of class [null] must be an instance of interface java.io.Serializable"} ```  Here's the stacktrace.  ``` 2016-08-21 02:51:12.478  WARN 24243 --- [nio-8080-exec-1] org.neo4j.ogm.session.Neo4jSession       : Thread 22: com.xenoterracide.MyEntity is not an instance of a persistable class 2016-08-21 02:51:12.491 ERROR 24243 --- [nio-8080-exec-1] o.s.d.r.w.RepositoryRestExceptionHandler : Id must be assignable to Serializable! Object of class [null] must be an instance of interface java.io.Serializable  java.lang.IllegalArgumentException: Id must be assignable to Serializable! Object of class [null] must be an instance of interface java.io.Serializable         at org.springframework.util.Assert.isInstanceOf(Assert.java:346) ~[spring-core-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.data.rest.webmvc.support.RepositoryEntityLinks.linkToSingleResource(RepositoryEntityLinks.java:135) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.core.support.DefaultSelfLinkProvider.createSelfLinkFor(DefaultSelfLinkProvider.java:70) ~[spring-data-rest-core-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.getSelfLinkFor(PersistentEntityResourceAssembler.java:99) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.wrap(PersistentEntityResourceAssembler.java:76) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler.toFullResource(PersistentEntityResourceAssembler.java:67) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.webmvc.RepositoryEntityController.createAndReturn(RepositoryEntityController.java:504) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at org.springframework.data.rest.webmvc.RepositoryEntityController.postCollectionResource(RepositoryEntityController.java:275) ~[spring-data-rest-webmvc-2.5.2.RELEASE.jar!/:na]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_102]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_102]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_102]         at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_102]         at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) [spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.2.RELEASE.jar!/:4.3.2.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_102]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_102]         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.4.jar!/:8.5.4]         at java.lang.Thread.run(Thread.java:745) [na:1.8.0_102] ```  The issue is perplexing because it only happens when you've packaged the thing, and only with the http protocol (I Say only but I haven't enabled bolt yet). </body>
		<created>2016-08-21 07:59:40</created>
		<closed>2016-11-18 12:11:28</closed>
	</bug>
	<bug>
		<id>6692</id>
		<title>s-b-starter-jetty fails with an exception when used w/ Spring Data JPA</title>
		<body>I switched to `s-b-starter-jetty`, excluded tomcat by making it `provided`, and in the code for my `CommandLineRunner`, i use a Spring Data JPA repository to write data to a datasource. it fails with the following exception.  Works fine for Undertow and Tomcat. App has: - H2 - `spring-boot-starter-web` - `spring-boot-starter-data-rest` - `spring-boot-starter-data-jpa` - `spring-boot-starter-actuator` - `spring-boot-starter-jetty`  Here's the exception:  ``` 2016-08-19 11:47:04.436  INFO 70722 --- [           main] .s.b.c.e.j.JettyEmbeddedServletContainer : Jetty started on port(s) 8080 (http/1.1) 2016-08-19 11:47:04.522  INFO 70722 --- [           main] utoConfigurationReportLoggingInitializer :   Error starting ApplicationContext. To display the auto-configuration report enable debug logging (start with --debug)   2016-08-19 11:47:04.531 ERROR 70722 --- [           main] o.s.boot.SpringApplication               : Application startup failed  java.lang.IllegalStateException: Failed to execute CommandLineRunner     at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:801) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:782) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:769) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     at com.example.ReservationServiceApplication.main(ReservationServiceApplication.java:27) [classes/:na] Caused by: javax.validation.ValidationException: HV000183: Unable to load 'javax.el.ExpressionFactory'. Check that you have the EL dependencies on the classpath, or use ParameterMessageInterpolator instead     at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.createValidator(ValidatorFactoryImpl.java:339) ~[hibernate-validator-5.2.4.Final.jar:5.2.4.Final]     at org.hibernate.validator.internal.engine.ValidatorContextImpl.getValidator(ValidatorContextImpl.java:122) ~[hibernate-validator-5.2.4.Final.jar:5.2.4.Final]     at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:111) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:78) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:197) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:597) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:232) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:213) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:256) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:317) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:109) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.jpa.event.internal.core.JpaPersistEventListener.saveWithGeneratedId(JpaPersistEventListener.java:67) ~[hibernate-entitymanager-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:189) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:132) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:775) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:748) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:753) ~[hibernate-core-5.0.9.Final.jar:5.0.9.Final]     at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146) ~[hibernate-entitymanager-5.0.9.Final.jar:5.0.9.Final]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_66]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_66]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_66]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_66]     at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:298) ~[spring-orm-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at com.sun.proxy.$Proxy85.persist(Unknown Source) ~[na:na]     at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:506) ~[spring-data-jpa-1.10.2.RELEASE.jar:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_66]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_66]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_66]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_66]     at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503) ~[spring-data-commons-1.12.2.RELEASE.jar:na]     at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488) ~[spring-data-commons-1.12.2.RELEASE.jar:na]     at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460) ~[spring-data-commons-1.12.2.RELEASE.jar:na]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61) ~[spring-data-commons-1.12.2.RELEASE.jar:na]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:280) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136) ~[spring-tx-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133) ~[spring-data-jpa-1.10.2.RELEASE.jar:na]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]     at com.example.$Proxy89.save(Unknown Source) ~[na:na]     at com.example.SampleDataCLR.lambda$run$0(ReservationServiceApplication.java:46) ~[classes/:na]     at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[na:1.8.0_66]     at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580) ~[na:1.8.0_66]     at com.example.SampleDataCLR.run(ReservationServiceApplication.java:46) ~[classes/:na]     at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]     ... 6 common frames omitted  2016-08-19 11:47:04.532  INFO 70722 --- [           main] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@74a6f9c1: startup date [Fri Aug 19 11:46:58 CST 2016]; root of context hierarchy 2016-08-19 11:47:04.534  INFO 70722 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0 2016-08-19 11:47:04.535  INFO 70722 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on ..  ``` </body>
		<created>2016-08-19 03:50:09</created>
		<closed>2016-09-08 23:54:02</closed>
	</bug>
	<bug>
		<id>6688</id>
		<title>Logback configuration is reinitialized for each context created in the application</title>
		<body>Originally observed in https://github.com/spring-cloud/spring-cloud-stream/issues/605. See https://github.com/spring-cloud/spring-cloud-stream/issues/605#issuecomment-240601729 for some details related to that.  To summarize: `LoggingApplicationListener` executes for each additional context created within the application via `SpringApplication.run()`. In the case of Logback, `initializeSystem` eventually leads to a `stopAndReset` on the `LoggerContext` every time it runs. The effects are not noticeable if using standard Boot configuration mechanisms, as the configuration will be re-applied identically every time. This prevents, however, applying customized configuration on the loggers (e.g. via an additional `ApplicationListener`).  An example application that shows this happening is as simple as: https://github.com/mbogoevici/gh-issues/tree/master/test-listeners </body>
		<created>2016-08-18 13:42:49</created>
		<closed>2016-08-25 18:56:37</closed>
	</bug>
	<bug>
		<id>6685</id>
		<title>RestTemplateBuilder removes request factory wrappers</title>
		<body>The factory needs to be unwrapped so that it can be customised, but the original wrapper factory is the one that should be set on the template that's being built. </body>
		<created>2016-08-18 10:06:18</created>
		<closed>2016-08-18 10:40:38</closed>
	</bug>
	<bug>
		<id>6680</id>
		<title>@WebServlet registered with ServletComponentScan does not honor @MultipartConfig annotation</title>
		<body>I have recently migrated an war-application to Spring Boot 1.4. The servlets are registered using ServletComponentScan.  The servlets that are annotated with @MultipartConfig do not decode multipart data. It seems the @MultipartConfig annotation is not honored for servlets registered through ServletComponentScan. </body>
		<created>2016-08-17 21:22:58</created>
		<closed>2016-08-18 10:32:25</closed>
	</bug>
	<bug>
		<id>6679</id>
		<title>1.4 breaks Tomcat Loadbalancing</title>
		<body>To support Tomcat  AJP with modjk (sticky sessions with LB), current practice is shown below.  To quickly verify - it is as simple as looking at JSESSIONID cookie in the browser - the cookie value is appended with the JVM_ROUTE.  Apache httpd/modjk fails to route to jvm (it basically sees no cookie and round robins).  Works in all preceding SpringBoot versions, but broken in Boot 1.4.   ``` java @Bean public EmbeddedServletContainerFactory servletContainer() {     TomcatEmbeddedServletContainerFactory tomcatFactory = new TomcatEmbeddedServletContainerFactory();      logger.debug( "Customizing tomcat factory" );       // https://tomcat.apache.org/tomcat-8.0-doc/config/http.html     tomcatFactory.addAdditionalTomcatConnectors( createAjpConnector() ); ... }  private Connector createAjpConnector() {      String jvmRouteForModJk = getContextPath() + "_" + getHttpPort() + HOST_NAME  ;      System.setProperty("jvmRoute", jvmRouteForModJk);     logger.debug( webServerInfo.toString() );      Connector connector = new Connector( "org.apache.coyote.ajp.AjpNio2Protocol" );     connector.setScheme( "http" ); // this is used in redirects - and spring security only supports http(s) ``` </body>
		<created>2016-08-17 19:21:06</created>
		<closed>2016-08-18 09:02:15</closed>
	</bug>
	<bug>
		<id>6674</id>
		<title>devtools doesn't reload neo4j properly</title>
		<body>https://github.com/xenoterracide/jacksonconfig  in this case check out branch `devtools`  start the app, and curl  ``` curl -X POST -H "Content-Type: application/json" -d '{}' http://localhost:8080/myEntities                                                            slave-vi {   "new" : true,   "_links" : {     "self" : {       "href" : "http://localhost:8080/myEntities/0"     },     "myEntity" : {       "href" : "http://localhost:8080/myEntities/0"     }   } } ```  now, uncomment the setter https://github.com/xenoterracide/jacksonconfig/blob/devtools/src/main/java/com/xenoterracide/MyEntity.java  compile the classes and hot reload  ``` jacksonconfig  % curl -X POST -H "Content-Type: application/json" -d '{}' http://localhost:8080/myEntities                                                            slave-vi {"cause":{"cause":null,"message":"Can not set java.lang.Long field com.xenoterracide.MyEntity.id to com.xenoterracide.MyEntity"},"message":"java.lang.IllegalArgumentException: Can not set java.lang.Long field com.xenoterracide.MyEntity.id to com.xenoterracide.MyEntity"}%      ```  now stop and start the server  ``` jacksonconfig  % curl -X POST -H "Content-Type: application/json" -d '{}' http://localhost:8080/myEntities                                                            slave-vi {   "new" : true,   "_links" : {     "self" : {       "href" : "http://localhost:8080/myEntities/0"     },     "myEntity" : {       "href" : "http://localhost:8080/myEntities/0"     }   } } ```  this appears to occur with any modifcication of  the entity (maybe any modification at all) </body>
		<created>2016-08-17 14:06:29</created>
		<closed>2017-04-12 10:00:18</closed>
	</bug>
	<bug>
		<id>6668</id>
		<title>spring data rest / doesn't work if static index.html present</title>
		<body>sample project  https://github.com/xenoterracide/jpademo  SO question http://stackoverflow.com/q/38966467/206466  `curl -H "Accept: application/json" http://localhost:8080` should return   ``` {   "_links" : {     "persons" : {       "href" : "http://localhost:8080/persons{?page,size,sort}",       "templated" : true     },     "profile" : {       "href" : "http://localhost:8080/profile"     }   } } ```  but instead returns  ``` &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Hello&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;p&gt;Hello&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; ```  this very old bug makes me think this should be possible https://jira.spring.io/browse/DATAREST-56, and also that it should work out of the box, since `text/html` and `application/json` aren't the same type. the default should be the static content, but the spring data rest should be in the list of available for content type and registered for the `application/json`.   I read this https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc and related, but for the life of me I have no idea what I'd register to get it to include Spring Data's HAL view.  As a side note I've actually been trying to do this with Neo4j, if that matters with a workaround implementation. </body>
		<created>2016-08-16 23:41:23</created>
		<closed>2016-08-31 18:26:46</closed>
	</bug>
	<bug>
		<id>6665</id>
		<title>@MockBean doesn't work with @Timed annotated components</title>
		<body>Similar to #6405  When applying `@MockBean` annotation to a component that has methods annotated with `com.codahale.metrics.annotation.Timed`, following exception is thrown on application startup:  ``` The bean 'BeanName' could not be injected as a 'com...BeanName' because it is a JDK dynamic proxy that implements:   Action:  Consider injecting the bean as one of its interfaces or forcing the use of CGLib-based proxies by setting proxyTargetClass=true on @EnableAsync and/or @EnableCaching.   Caused by: org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'BeanName' is expected to be of type [com...BeanName] but was actually of type [com.sun.proxy.$Proxy159]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.checkBeanNotOfRequiredType(DefaultListableBeanFactory.java:1423)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1402)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1057)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1019)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:566)     ... 67 more ```  This application does not use `@EnableAsync` or `@EnableCaching`. This is with Spring Boot 1.4.0.RELEASE </body>
		<created>2016-08-16 20:58:41</created>
		<closed>2016-09-12 11:59:29</closed>
	</bug>
	<bug>
		<id>6663</id>
		<title>Bean created by @MockBean still has its fields autowired</title>
		<body>The following code taken from the doc doesn't work as expected:  ``` java @RunWith(SpringRunner.class) @WebMvcTest(TestController.class) public class TestControllerTest {      @MockBean     private TestValidator testValidator;      @Autowired     private TestRestTemplate restTemplate;      @Test     public void test() throws Exception {         // no-opts     }); } ```  ... where's the mocked bean is:  ``` java @Component public class TestValidator implements Validator {      @Autowired     private TestRepository testRepository;     ... } ```  during test startup it fails:  ``` org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'testController': Unsatisfied dependency expressed through field 'testValidator': Error creating bean with name 'com.example.TestValidator#0': Unsatisfied dependency expressed through field 'categoryRepository': No qualifying bean of type [com.example.TestRepository] found for dependency [com.example.TestRepository]: expected at least 1 bean which qualifies as autowire candidate for this dependency.  ```  Java: 1.8.0_65 Spring Boot: 1.4.0.RELEASE &amp; 1.4.1-BUILD-SNAPSHOT Maven: 3.3.3  [Test project on GitHub](https://github.com/WildDeveloper/mockbean) </body>
		<created>2016-08-16 18:59:07</created>
		<closed>2016-09-02 08:51:56</closed>
	</bug>
	<bug>
		<id>6657</id>
		<title>spring-boot with jsps in tomcat does not run on cloudfoundry</title>
		<body>While upgrading from spring boot 1.3 to 1.4, we noticed that all our apps except one work. The one failing is the only one still using JSPs.  Therefore I tried the `spring-boot-sample-tomcat-jsp` and was able to reproduce the issue: It fails  with the following stacktrace when deployed to cloudfoundry.  ``` 2016-08-15T21:22:12.90+0200 [APP/0]      OUT   .   ____          _            __ _ _ 2016-08-15T21:22:12.90+0200 [APP/0]      OUT  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ 2016-08-15T21:22:12.90+0200 [APP/0]      OUT ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ 2016-08-15T21:22:12.90+0200 [APP/0]      OUT  \\/  ___)| |_)| | | | | || (_| |  ) ) ) ) 2016-08-15T21:22:12.90+0200 [APP/0]      OUT   '  |____| .__|_| |_|_| |_\__, | / / / / 2016-08-15T21:22:12.90+0200 [APP/0]      OUT  =========|_|==============|___/=/_/_/_/ 2016-08-15T21:22:12.91+0200 [APP/0]      OUT  :: Spring Boot ::  (v1.4.1.BUILD-SNAPSHOT) 2016-08-15T21:22:13.15+0200 [APP/0]      OUT 2016-08-15 19:22:13.129  INFO 18 --- [           main] pertySourceApplicationContextInitializer : Adding 'cloud' PropertySource to ApplicationContext 2016-08-15T21:22:13.38+0200 [APP/0]      OUT 2016-08-15 19:22:13.387  INFO 18 --- [           main] nfigurationApplicationContextInitializer : Adding cloud service auto-reconfiguration to ApplicationContext 2016-08-15T21:22:13.43+0200 [APP/0]      OUT 2016-08-15 19:22:13.433  INFO 18 --- [           main] s.tomcat.jsp.SampleTomcatJspApplication  : Starting SampleTomcatJspApplication on ora15jmsr6k with PID 18 (/home/vcap/app/WEB-INF/classes started by vcap in /home/vcap/app) 2016-08-15T21:22:13.43+0200 [APP/0]      OUT 2016-08-15 19:22:13.437  INFO 18 --- [           main] s.tomcat.jsp.SampleTomcatJspApplication  : The following profiles are active: cloud 2016-08-15T21:22:13.65+0200 [APP/0]      OUT 2016-08-15 19:22:13.658  INFO 18 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@5010be6: startup date [Mon Aug 15 19:22:13 UTC 2016]; root of context hierarchy 2016-08-15T21:22:15.47+0200 [APP/0]      OUT 2016-08-15 19:22:15.472  INFO 18 --- [           main] urceCloudServiceBeanFactoryPostProcessor : Auto-reconfiguring beans of type javax.sql.DataSource 2016-08-15T21:22:15.47+0200 [APP/0]      OUT 2016-08-15 19:22:15.475  INFO 18 --- [           main] urceCloudServiceBeanFactoryPostProcessor : No beans of type javax.sql.DataSource found. Skipping auto-reconfiguration. 2016-08-15T21:22:16.48+0200 [APP/0]      OUT 2016-08-15 19:22:16.480  INFO 18 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http) 2016-08-15T21:22:16.49+0200 [APP/0]      OUT 2016-08-15 19:22:16.499  INFO 18 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2016-08-15T21:22:16.50+0200 [APP/0]      OUT 2016-08-15 19:22:16.500  INFO 18 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.4 2016-08-15T21:22:16.87+0200 [APP/0]      OUT java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at java.util.concurrent.FutureTask.report(FutureTask.java:122) [na:1.8.0_91] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at java.util.concurrent.FutureTask.get(FutureTask.java:192) [na:1.8.0_91] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:911) ~[tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:890) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1403) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1393) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:158) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    ... 6 common frames omitted 2016-08-15T21:22:16.87+0200 [APP/0]      OUT Caused by: java.lang.NullPointerException: null 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.tomcat.util.scan.StandardJarScanner.process(StandardJarScanner.java:325) ~[tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.tomcat.util.scan.StandardJarScanner.scan(StandardJarScanner.java:182) ~[tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.jasper.servlet.TldScanner.scanJars(TldScanner.java:262) ~[tomcat-embed-jasper-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.jasper.servlet.TldScanner.scan(TldScanner.java:104) ~[tomcat-embed-jasper-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.jasper.servlet.JasperInitializer.onStartup(JasperInitializer.java:103) ~[tomcat-embed-jasper-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:152) [tomcat-embed-core-8.5.4.jar!/:8.5.4] 2016-08-15T21:22:16.87+0200 [APP/0]      OUT    ... 6 common frames omitted ```  a downgrade to `tomcat 8.0.36` does fix the issue </body>
		<created>2016-08-15 19:26:25</created>
		<closed>2016-09-14 14:01:41</closed>
	</bug>
	<bug>
		<id>6646</id>
		<title>Access Log not flushed regularly</title>
		<body>Hi,  since we are using Sring Boot 1.4.0.RELEASE (with embedded tomcat) the access log is not flushed regularly. Only on log rotation or after several hours the entries are written to the file. With version 1.3.7 the access log gets flushed in seconds to minutes. Is this the desired behavior or am i missing a setting? </body>
		<created>2016-08-14 11:36:52</created>
		<closed>2016-08-22 22:02:05</closed>
	</bug>
	<bug>
		<id>6618</id>
		<title>Access log issue after rotate</title>
		<body>My application uses two undertow containers. One for regular business logic and the second one for actuators. There are two listeners at ports: 8080 and 8090 (actuators set via `management.port` property).  Observed behavior: in the access log we can see entries coming from both containers. Regular traffic and requests for `/health` resources that come from load-balancer.  Issue: at midnight when access log rotation takes place (at least we observe that at midnight) we ended up with three files: `access.log`, `access-log.{date}.log` and `access-log.{date}-1.log`.  Health entries are still visible in access.log and the file is growing. Regular traffic entries go to the last file.   It seems like there's a race condition when two containers attempt to rotate one common access.log file.  Spring version 1.3.0.RC1 and Undertow-core-1.3.0.Final </body>
		<created>2016-08-11 09:57:50</created>
		<closed>2016-08-22 10:58:11</closed>
	</bug>
	<bug>
		<id>6617</id>
		<title>Spring boot application (1.4.0) fails to start due error with printing banner </title>
		<body>There is issue with printing banner at headless jvm: but from my point of view such issue shouldn't prevent starting whole application: Environment:  ``` FROM debian:stretch RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends openjdk-8-jdk-headless &amp;&amp; apt-get clean ADD ./spring-boot.jar /spring-boot.jar ENTRYPOINT java -server -jar spring-boot.jar ```  Spring boot: 1.4.0.RELEASE  Exception:  ``` ERROR o.s.b.SpringApplication - Application startup failed java.awt.AWTError: Assistive Technology not found: org.GNOME.Accessibility.AtkWrapper         at java.awt.Toolkit.loadAssistiveTechnologies(Toolkit.java:807)         at java.awt.Toolkit.getDefaultToolkit(Toolkit.java:886)         at java.awt.Image.getScaledInstance(Image.java:178)         at org.springframework.boot.ImageBanner.resizeImage(ImageBanner.java:125)         at org.springframework.boot.ImageBanner.readImage(ImageBanner.java:108)         at org.springframework.boot.ImageBanner.printBanner(ImageBanner.java:100)         at org.springframework.boot.ImageBanner.printBanner(ImageBanner.java:76)         at org.springframework.boot.SpringApplicationBannerPrinter$Banners.printBanner(SpringApplicationBannerPrinter.java:142)         at org.springframework.boot.SpringApplicationBannerPrinter.print(SpringApplicationBannerPrinter.java:71)         at org.springframework.boot.SpringApplication.printBanner(SpringApplication.java:551)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:309)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174)         at com.codeabovelab.dm.cluman.Application.main(Application.java:33)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) ```  &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; </body>
		<created>2016-08-11 09:09:35</created>
		<closed>2016-08-16 14:05:34</closed>
	</bug>
	<bug>
		<id>6615</id>
		<title>Installing additional CLI commands breaks the CLI</title>
		<body>https://github.com/spring-cloud/spring-cloud-cli/issues/20  The problem's a result of the change in the layout of an executable jar. The CLI's own classes are now packaged in `BOOT-INF/classes` which means that they're visible to the `LaunchedURLClassLoader` but not by app class loader. When additional commands are installed, they're added to the lib directory and, therefore, to the app class loader. This causes a class loading failure when any of the classes in the additional commands depend on one of the CLI's classes.  In the specific case of the Spring Cloud CLI, `org.springframework.cloud.cli.command.CloudCommandFactory` is loaded by the app class loader. This triggers an attempt to load `org.springframework.boot.cli.command.CommandFactory` using the app class loader and it can't be found. </body>
		<created>2016-08-11 07:51:42</created>
		<closed>2016-08-11 15:09:51</closed>
	</bug>
	<bug>
		<id>6609</id>
		<title>NoUniqueBeanDefinitionException when trying to use the Actuator with multiple Flyway or Liquibase beans</title>
		<body>http://stackoverflow.com/questions/38876430/spring-boot-actuator-flywayendpoint-doesnt-work-with-multiple-flyway-beans.  The endpoint requires a single `Flyway` bean and even when the endpoint is disabled (`endpoints.flyway.enabled=false`) the bean itself is still created and it fails with a `NoUniqueBeanDefinitionException`.  We should consider making it `@ConditionalOnSingleCandidate` in 1.4.x and then perhaps supporting multiple Flyway beans in 1.5. </body>
		<created>2016-08-10 16:44:11</created>
		<closed>2016-08-15 12:47:49</closed>
	</bug>
	<bug>
		<id>6606</id>
		<title>Failure analysis only happens when the Validation API is on the class path</title>
		<body>`ValidationExceptionFailureAnalyzer` requires `javax.validation.ValidationException` to be on the class path. When it isn't, the call to `SpringFactoriesLoader.loadFactories` fails and no failure analysis is performed. </body>
		<created>2016-08-10 13:11:19</created>
		<closed>2016-08-10 16:36:22</closed>
	</bug>
	<bug>
		<id>6602</id>
		<title>@MockBean does not handle parameterized types</title>
		<body>Spring Boot 1.4.0.RELEASE  I am trying to use the new `@MockBean` annotation to inject two mocks of the same parameterized interface, each with a different type i.e.:  ```   @MockBean   private IdentityProvider&lt;PasswordIdentity&gt; passwordIdentityProvider;    @MockBean   private IdentityProvider&lt;Oauth2Identity&gt; oauth2IdentityProvider; ```  When running this test with `@SpringBootTest` I get the following error:  ``` java.lang.IllegalStateException: Duplicate mock definition [MockDefinition@1b68b9a4 name = '', classToMock = IdentityProvider, extraInterfaces = set[[empty]], answer = RETURNS_DEFAULTS, serializable = false, reset = AFTER]      at org.springframework.util.Assert.state(Assert.java:392)     at org.springframework.boot.test.mock.mockito.DefinitionsParser.addDefinition(DefinitionsParser.java:119)     at org.springframework.boot.test.mock.mockito.DefinitionsParser.parseMockBeanAnnotation(DefinitionsParser.java:97)     at org.springframework.boot.test.mock.mockito.DefinitionsParser.parseElement(DefinitionsParser.java:76)     at org.springframework.boot.test.mock.mockito.DefinitionsParser.access$000(DefinitionsParser.java:42)     at org.springframework.boot.test.mock.mockito.DefinitionsParser$1.doWith(DefinitionsParser.java:67)     at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:692)     at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:672)     at org.springframework.boot.test.mock.mockito.DefinitionsParser.parse(DefinitionsParser.java:62)     at org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactory.createContextCustomizer(MockitoContextCustomizerFactory.java:38)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.getContextCustomizers(AbstractTestContextBootstrapper.java:418)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:387)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:323)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:277)     at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:112)     at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:74)     at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:120)     at org.springframework.test.context.TestContextManager.&lt;init&gt;(TestContextManager.java:105)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:152)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.&lt;init&gt;(SpringJUnit4ClassRunner.java:143)     at org.springframework.test.context.junit4.SpringRunner.&lt;init&gt;(SpringRunner.java:49)     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:423)     at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)     at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)     at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)     at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)     at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:96)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:253)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)  ```  Note that exposing two beans of these parameterized types works fine in the regular non-test Spring context i.e. the types are injected correctly by Spring.  In addition, I can create the mocks manually via Mockito, also correctly. </body>
		<created>2016-08-10 00:07:59</created>
		<closed>2016-08-29 20:43:52</closed>
	</bug>
	<bug>
		<id>6597</id>
		<title>Charset support in JsonLoader</title>
		<body>The class `JsonLoader` (`org.springframework.boot.test.json.JsonLoader`) creates an `InputStreamReader` without charset to read the json file. This causes problems where the system encoding is different. This causes test cases with special characters in the json file to fail on systems where the default encoding is e.g. `ISO-8859-1`. Can you either provide methods to define the charset or use a predefined charset? </body>
		<created>2016-08-09 14:33:58</created>
		<closed>2016-08-16 14:18:32</closed>
	</bug>
	<bug>
		<id>6586</id>
		<title>Actuator's HAL Browser redirect doesn't work with a custom servlet path</title>
		<body>``` server.servlet-path=/testing ```  ``` $ curl -v localhost:8080/testing/ -H "Accept: text/html" *   Trying ::1... * Connected to localhost (::1) port 8080 (#0) &gt; GET /testing/ HTTP/1.1 &gt; Host: localhost:8080 &gt; User-Agent: curl/7.46.0 &gt; Accept: text/html &gt; &lt; HTTP/1.1 302 Found &lt; Server: Apache-Coyote/1.1 &lt; X-Application-Context: application &lt; Location: http://localhost:8080/browser/index.html# &lt; Content-Language: en-US &lt; Content-Length: 0 &lt; Date: Mon, 08 Aug 2016 15:24:15 GMT &lt; * Connection #0 to host localhost left intact ```  Note the `Location` header does not include `/testing`. The correct location is `http://localhost:8080/testing/browser/index.html#/` </body>
		<created>2016-08-08 15:25:59</created>
		<closed>2016-08-31 11:19:34</closed>
	</bug>
	<bug>
		<id>6585</id>
		<title>Actuator curies href duplicates custom server.servlet-path</title>
		<body>When `server.servlet-path` is customised, the href in the actuator's curies is wrong. The servlet path is duplicated:  ``` json "curies": [     {         "href": "http://localhost:8080/servlet/servlet/docs/#spring_boot_actuator__{rel}",         "name": "boot",         "templated": true     } ] ``` </body>
		<created>2016-08-08 15:21:35</created>
		<closed>2016-09-19 11:45:46</closed>
	</bug>
	<bug>
		<id>6584</id>
		<title>SampleHypermediaJpaApplication fails to start with a NullPointerException</title>
		<body>``` Caused by: java.lang.NullPointerException: null     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration.curieProvider(EndpointWebMvcHypermediaManagementContextConfiguration.java:136) ~[classes/:na]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$$EnhancerBySpringCGLIB$$d3044c2f.CGLIB$curieProvider$3(&lt;generated&gt;) ~[classes/:na]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$$EnhancerBySpringCGLIB$$d3044c2f$$FastClassBySpringCGLIB$$c7d26387.invoke(&lt;generated&gt;) ~[classes/:na]     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcHypermediaManagementContextConfiguration$$EnhancerBySpringCGLIB$$d3044c2f.curieProvider(&lt;generated&gt;) ~[classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_74]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_74]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_74]     at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_74]     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     ... 107 common frames omitted ```  The tests pass though (which is why CI hasn't caught the problem). </body>
		<created>2016-08-08 13:28:58</created>
		<closed>2016-08-08 16:25:56</closed>
	</bug>
	<bug>
		<id>6573</id>
		<title>@MockBean leads to Mockito Validation Exceptions presumably masking problems with @Async annotated services</title>
		<body>Hello everyone,  I have been experimenting with the Mockito integration in the new 1.4.0.RELEASE version of spring boot and encountered some difficulties while writing some tests.  I wrote a controller, which injects a service bean and calls an async method (async configuration is written to return a ThreadPoolTaskExecutor). When using the `@MockBean` annotation on the service in my test class all usages of parameter matchers fail (either while configuring in before method using given/willReturn or while verifying method calls).  I wrote a basic project illustrating this behavior - it can be found at https://github.com/WalternativE/mocking-bug . The tag "problem" contains the failing test while the tag "workaround" contains the profile configuration deactivating the async configuration for the test (the test passes without exception).  While researching the errors I stumbled upon issue #6405 - could be linked to that to some extend. I tried playing around with the proxyTargetClass parameter but I had no luck there.  While debugging the test cases I got the expected behavior while inspecting the mocked service with the IntelliJ Idea debugging tools - might have resolved some proxies manually which maybe cannot be resolved reflectively by Mockito (but that's just guesswork - haven't had the opportunity to reproduce that yet).  Thanks, Gregor </body>
		<created>2016-08-05 23:48:30</created>
		<closed>2016-09-02 08:51:31</closed>
	</bug>
	<bug>
		<id>6567</id>
		<title>Hal Browser issue since Spring-boot 1.4.0.RELEASE</title>
		<body>Since upgrading services to spring-boot 1.4, when heading to the root of the service (localhost:8080/), the HAL-browser does not show links to our apis. The Inspector shows that the Response Headers is text/html (in 1.3.7, it was application/hal+json) and the body seems to content the html page itself instead of hal json document.  It can be reproduce with a project generated from spring initializr with the following specificities : - gradle project - spring boot 1.4.0 - dependencies on `Rest Repositories` &amp; `Rest Repositories HAL Browser`  Here is the dependencies section from the build.gradle file:  ``` dependencies {     compile('org.springframework.boot:spring-boot-starter-data-rest')     compile('org.springframework.data:spring-data-rest-hal-browser')     testCompile('org.springframework.boot:spring-boot-starter-test') } ```  Looking at other issues in the issues db, I think this might be related to #6562   regards,  -Sébastien </body>
		<created>2016-08-05 09:51:15</created>
		<closed>2016-08-08 13:04:42</closed>
	</bug>
	<bug>
		<id>6559</id>
		<title>Spring Boot 1.4 - RabbitMQ Cannot override primary ConnectionFactory and create secondary ConnectionFactory</title>
		<body>Since upgrading to Spring Boot 1.4 I've noticed that all of my microservices that override the primary ConnectionFactory AND create a secondary ConnectionFactory stopped working due to a `NoSuchBeanDefinitionException`. ### This works - not overriding the primary ConnectionFactory, just creating a secondary one  ``` @Bean(name = "pcConnectionFactory") ConnectionFactory pcConnectionFactory(RabbitProperties config) throws Exception {   .. } ``` ### This works - overriding the primary ConnectionFactory without a secondary one  ``` @Bean @Primary ConnectionFactory connectionFactory(RabbitProperties config) throws Exception {   .. } ``` ### This fails - overriding the primary ConnectionFactory AND creating a secondary one  ``` @Bean @Primary ConnectionFactory connectionFactory(RabbitProperties config) throws Exception {   .. }  @Bean(name = "pcConnectionFactory") ConnectionFactory pcConnectionFactory(RabbitProperties config) throws Exception {   .. } ```  Stack Trace:  ``` Caused by: org.springframework.context.ApplicationContextException: Failed to start bean 'outputBindingLifecycle'; nested exception is java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration.rabbitTemplate     at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:176)     at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51)     at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346)     at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149)     at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112)     at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:874)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)     ... 24 more Caused by: java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration$RabbitTemplateConfiguration.rabbitTemplate     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64)     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:178)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:523)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134)     at org.springframework.cloud.stream.binder.DefaultBinderFactory.getBinder(DefaultBinderFactory.java:185)     at org.springframework.cloud.stream.binding.ChannelBindingService.getBinderForChannel(ChannelBindingService.java:142)     at org.springframework.cloud.stream.binding.ChannelBindingService.bindProducer(ChannelBindingService.java:104)     at org.springframework.cloud.stream.binding.BindableProxyFactory.bindOutputs(BindableProxyFactory.java:206)     at org.springframework.cloud.stream.binding.OutputBindingLifecycle.start(OutputBindingLifecycle.java:57)     at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173)     ... 38 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'pcConnectionFactory' is defined     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:702)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getPrimaryBeans(OnBeanCondition.java:234)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.hasSingleAutowireCandidate(OnBeanCondition.java:227)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:97)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47)     ... 58 more ``` </body>
		<created>2016-08-04 14:27:42</created>
		<closed>2016-08-26 16:33:35</closed>
	</bug>
	<bug>
		<id>6544</id>
		<title>Failure auto-configuring metrics for StatsD with MetricExportAutoConfiguration</title>
		<body>Hi,  There is an issue introduced in Spring Boot 1.4.0.RELEASE which means you get a failure when auto-configuring metrics for StatsD when turned on with a property (e.g. `spring.metrics.export.statsd.host=localhost`). Downgrading to Spring Boot 1.3.7.RELEASE makes this problem go away.  I have made a simple example project which demonstrates the issue [here](https://github.com/foygl/spring-metrics-problem)  The exception I see is below. Providing my own MetricWriter bean as mentioned [in the docs](http://docs.spring.io/spring-boot/docs/1.4.0.RELEASE/reference/htmlsingle/#production-ready-metric-writers-export-to-statsd) makes this exception disappear.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration': Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$$EnhancerBySpringCGLIB$$59d137ad]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration': Requested bean is currently in creation: Is there an unresolvable circular reference?         at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:279) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1143) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1046) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframeans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:776) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:861) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541) ~[spring-context-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174) [spring-boot-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at com.example.metricsfail.Application.main(Application.java:13) [main/:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$$EnhancerBySpringCGLIB$$59d137ad]: Constructor threw exception; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with n                                ame 'org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration': Requested bean is currently in creation: Is there an unresolvable circular reference?         at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:154) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:271) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         ... 17 common frames omitted Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration': Requested bean is currently in creation: Is there an unresolvable circular reference?         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:347) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowbleBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:207) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1229) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1145) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1049) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.getIfAvailable(DefaultListableBeanFactory.java:1576) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         apringframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration.&lt;init&gt;(MetricExportAutoConfiguration.java:76) ~[spring-boot-actuator-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$$EnhancerBySpringCGLIB$$59d137ad.&lt;init&gt;(&lt;generated&gt;) ~[spring-boot-actuator-1.4.0.RELEASE.jar:1.4.0.RELEASE]         at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_66]         at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_66]         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_66]         at java.lang.reflect.Constructor.newInstance(Constructor.java:422) ~[na:1.8.0_66]         at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:142) ~[spring-beans-4.3.2.RELEASE.jar:4.3.2.RELEASE]         ... 19 common frames omitted ```  Hope that's enough info to investigate </body>
		<created>2016-08-03 10:47:16</created>
		<closed>2016-08-10 13:55:05</closed>
	</bug>
	<bug>
		<id>6541</id>
		<title>CrudRepository MockBean not injected into Component being tested</title>
		<body>Testing this class  ``` @Component public class DemoComponent {    @Autowired   private DemoRepository demoRepository;    public DemoEntity getByAttribute(String attribute) {     return demoRepository.findFirstByAttribute(attribute);   } }  ```  where DemoRepository is a Spring Data JPA style repository  ``` @Repository public interface DemoRepository extends CrudRepository&lt;DemoEntity, Long&gt; {    DemoEntity findFirstByAttribute(String attribute);  } ```  This is the test  ``` @RunWith(SpringRunner.class) @SpringBootTest public class DemoComponentTest {    @MockBean   private DemoRepository demoRepository;   @Autowired   private DemoComponent demoComponent;    @Test   public void testGetDemo_byAttribute() {     String attribute = "test";     when(demoRepository.findFirstByAttribute(attribute)).thenReturn(new DemoEntity(attribute));      demoComponent.getByAttribute(attribute);     assertNotNull(demoComponent.getByAttribute(attribute));   } } ```  The test fails, because the demoRepository mock isn't being injected into demoComponent during the test.  FWIW I figured out that if I remove the CrudRepository superclass from DemoRepository the test passes so it could be related to that </body>
		<created>2016-08-03 01:43:02</created>
		<closed>2016-08-10 09:27:21</closed>
	</bug>
	<bug>
		<id>6532</id>
		<title>Init script changing ownership of /var/run on my system causing other services to fail writting pid file</title>
		<body>I had a look to other issues and the problem seems new.  _Here is what I have in my setup:_ - an application deployed in `/opt/myapp` with the jar in `/opt/myapp/myapp-X.Y.Z-R.jar` - an init.d script defined like this (created to read the /etc/default/myapp file):  ``` #!/bin/bash  NAME=myapp [ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME MYAPP_JAR=`find /opt/myapp/lib/ -name \\*\\.jar` ${MYAPP_JAR} $@ ``` - the jar belongs to `myappuser` - the `/etc/default/myapp` files contains a few APP specific env variables and also sets `JAVA_HOME`, `MODE=service`, server host, port and context path (not relevant for this ticket).  _Now this is what happens_ In that case and when reading the init script inside the jar (identified as being this one: https://github.com/spring-projects/spring-boot/blob/9e8beb7323215f5de0aaa778699fe70717604f39/spring-boot-tools/spring-boot-loader-tools/src/main/resources/org/springframework/boot/loader/tools/launch.script) - L28: `JARFILE` is not set so not setting `jarFile` - L29: `APP_NAME` is not defined so not setting `identity` - L33: since `jarFile` is still emtpy, we set it to `/opt/myapp/myapp-X.Y.Z-R.jar` - L34: JAR file exists but is not a symbolic link, so we do not enter the loop and do not set `init_script` - L53: `PID_FOLDER` nor `pidFolder` are previously defined, so `PID_FOLER` is set to `/var/run` - L55: `/var/run` exists and _is executable_ so nothing changed - L63: `identity` is still empty so we enter the block - L64: `init_script` is an empty string, so we jump to the else block - L67: we set `identity` to `myapp-X.Y.Z-R_optmyapplib`  - L111: `init_script` and `APP_NAME` are still empty strings not equal to `identity`, so we do no enter the block - L114: we set `pid_file` to `/var/run/myapp-X.Y.Z-R_optmyapplib.pid` - L150: when trying to start the app, we do a `chown myappuser /var/run`  And this is where it gets broken: other services then cannot write their PID inside /var/run because owner has changed (from `root` to `myappuser`) and dir mode is `755` so user from `root` group cannot write there  _There is an easy workaround:_ set the `APP_NAME` variable and then it will all be fixed for us. But since others may have the same issue, I think something has to be done (maybe ensure that we do not change permissions if `PID_FOLDER` ends up being `/var/run` or maybe simply remove the `if` on L111) </body>
		<created>2016-08-02 09:57:16</created>
		<closed>2016-09-19 08:28:47</closed>
	</bug>
	<bug>
		<id>6508</id>
		<title>Jackson 2.8.x dependency problem w/ Elasticsearch 2.3.x by managed dependencies of Spring Boot 1.4.0</title>
		<body>After upgrade from Spring Boot v1.3.5 to v1.4.0 with a embedded Elasticsearch node the application is broken by `NoSuchMethodError`:  ``` java.lang.NoSuchMethodError: com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()Lcom/fasterxml/jackson/core/json/JsonWriteContext;         at org.elasticsearch.common.xcontent.json.JsonXContentGenerator.writeEndRaw(JsonXContentGenerator.java:327) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.common.xcontent.json.JsonXContentGenerator.writeRawField(JsonXContentGenerator.java:368) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.common.xcontent.XContentBuilder.rawField(XContentBuilder.java:914) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.common.xcontent.XContentHelper.writeRawField(XContentHelper.java:378) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.search.internal.InternalSearchHit.toXContent(InternalSearchHit.java:476) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.search.internal.InternalSearchHits.toXContent(InternalSearchHits.java:184) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.search.internal.InternalSearchResponse.toXContent(InternalSearchResponse.java:111) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.action.search.SearchResponse.toXContent(SearchResponse.java:195) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.rest.action.support.RestStatusToXContentListener.buildResponse(RestStatusToXContentListener.java:43) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.rest.action.support.RestStatusToXContentListener.buildResponse(RestStatusToXContentListener.java:38) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.rest.action.support.RestStatusToXContentListener.buildResponse(RestStatusToXContentListener.java:30) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.rest.action.support.RestResponseListener.processResponse(RestResponseListener.java:43) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.rest.action.support.RestActionListener.onResponse(RestActionListener.java:49) ~[elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:89) [elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:85) [elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.action.search.SearchQueryThenFetchAsyncAction$2.doRun(SearchQueryThenFetchAsyncAction.java:138) [elasticsearch-2.3.4.jar:2.3.4]         at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37) [elasticsearch-2.3.4.jar:2.3.4]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_101]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_101]         at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101] ```  The problematic code from Elasticsearch (`JsonXContentGenerator:327`)  ``` public void writeEndRaw() {     assert base != null : "JsonGenerator should be of instance GeneratorBase but was: " + generator.getClass();     if (base != null) {         base.getOutputContext().writeValue();     } } ```  Elasticsearch (v2.3.4) depends on Jackson v2.6.6 and is managed by Spring Boots provided version v2.8.1. In Jackson's [`GeneratorBase` v2.6](https://fasterxml.github.io/jackson-core/javadoc/2.6/com/fasterxml/jackson/core/base/GeneratorBase.html) the return type is `JsonWriteContext`  ``` JsonWriteContext | getOutputContext() Note: co-variant return type. ```  which has a method `writeValue()` but in [`GeneratorBase` v2.8](https://fasterxml.github.io/jackson-core/javadoc/2.8/com/fasterxml/jackson/core/base/GeneratorBase.html) the return type is changed to it's super type `JsonStreamContext`  ``` JsonStreamContext | getOutputContext() Note: type was co-variant until Jackson 2.7; reverted back to base type in 2.8 to allow for overriding by subtypes that use custom context type. ```  The current provided version of Jackson breaks usage of Elasticsearch with out-of-the-box Spring Boots 1.4 managed dependencies.  </body>
		<created>2016-07-29 14:52:55</created>
		<closed>2016-08-16 18:34:21</closed>
	</bug>
	<bug>
		<id>6502</id>
		<title>@JsonTest depends on Gson</title>
		<body>I am trying to upgrade to my sample project to Spring Boot 1.4.0.RELEASE from 1.4.0.RC.  Almost no change in codes but in the new version(1.4.0.RELEASE ) @JsonTest will raise NoClassDef exception when run my test codes.  https://github.com/hantsy/angularjs-springmvc-sample-boot/blob/master/src/test/java/com/hantsylabs/restexample/springmvc/test/slice/LocalDateTimeJsonComponentTest.java  I have to add a new dependency in test scope to avoid this exception.  ```     &lt;!--test --&gt;     &lt;dependency&gt;         &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;         &lt;artifactId&gt;gson&lt;/artifactId&gt;         &lt;version&gt;2.7&lt;/version&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt; ```  I am always using Jackson to process JSON in this sample. </body>
		<created>2016-07-29 07:52:37</created>
		<closed>2016-08-02 22:14:46</closed>
	</bug>
	<bug>
		<id>6500</id>
		<title>Thymeleaf 3 integration with spring boot 1.4.0.RELEASE is not working when there are custom thymeleaf beans </title>
		<body>We are using Thymeleaf in our application and we are letting spring auto configuration do everything for loading web content and we also need to send email to users therefore created custom bean as below to read content from mails folder to process email  ```     @Bean     public ClassLoaderTemplateResolver emailTemplateResolver() {         ClassLoaderTemplateResolver emailTemplateResolver = new ClassLoaderTemplateResolver();         emailTemplateResolver.setPrefix("mails/");         emailTemplateResolver.setSuffix(".html");         emailTemplateResolver.setTemplateMode("HTML5");         emailTemplateResolver.setCharacterEncoding("UTF-8");         emailTemplateResolver.setOrder(1);          return emailTemplateResolver;     } ```  We were able to process both web content and email when we use default version provided by spring boot 1.4.0 i.e. Thymeleaf 2.1.5 , however as stated in another issue that Thymeleaf 3 is supported in 1.4.0 we tried to upgrade to 3.0.1 RELEASE by specifying as properties in POM.xml as suggested  ```          &lt;thymeleaf.version&gt;3.0.1.RELEASE&lt;/thymeleaf.version&gt;         &lt;thymeleaf-layout-dialect.version&gt;2.0.1&lt;/thymeleaf-layout-dialect.version&gt; ```  When we run the application spring boot is unable to process webcontent instead looking into mails folder for processing.   This is the error we get  An error happened during template parsing (template: "mails/greeting.html")  Here is the simple minimum code to replicate the issue in [github](https://github.com/rajadileepkolli/springbootthymeleaf3/)  Could you please let me know how to make both webcontent and mails content process using thymeleaf 3 . </body>
		<created>2016-07-29 05:41:31</created>
		<closed>2016-09-09 14:36:33</closed>
	</bug>
	<bug>
		<id>6450</id>
		<title>json-simple should not be marked as optional in spring-boot-dependencies</title>
		<body>http://stackoverflow.com/questions/38555184/json-simple-marked-as-optional-under-spring-boot-dependencies-intentional </body>
		<created>2016-07-24 19:07:13</created>
		<closed>2016-07-25 17:21:14</closed>
	</bug>
	<bug>
		<id>6436</id>
		<title>ConfigurationProperties cannot handle lists over 256 elements</title>
		<body>Hi,  I was trying to migrate our custom config solution to use `ConfigurationProperties` instead, and found that it fails on lists that have more than 256 elements.  Having spent some time in the debugger, I found that it comes down to the default value of `DataBinder.autoGrowCollectionLimit`. Due to how `ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization` works, creating new `PropertiesConfigurationFactory` every time, it looks like there's no way to override that default.  Simple way to fix this would be adding `autoGrowCollectionLimit` to `ConfigurationProperties` annotation, or setting some higher value in `postprocessor`. </body>
		<created>2016-07-21 06:14:39</created>
		<closed>2016-07-25 17:21:14</closed>
	</bug>
	<bug>
		<id>6424</id>
		<title>Inconsistent behaviour when RabbitProperties parses addresses</title>
		<body>In looking at #6401 I have discovered some inconsistent behaviour in `RabbitProperties` when it parses addresses. I doubt that the inconsistency is by design (although the tests do verify the inconsistent behaviour) but I don't know the best way to make it consistent.  The inconsistencies are all to do with how parsed addresses affect the getters for individual properties:  | Property | Behaviour | | --- | --- | | host | If there are no addresses, returns `this.host`. If there's one address, returns its host. Otherwise it returns `null`. | | port | If there are no addresses, returns `this.port`. Otherwise it returns the first address's port | | username | If there are no addresses, returns `this.username`. Otherwise it returns the username from the last address that had one | | password | If there are no addresses, returns `this.password`. Otherwise it returns the password from the last address that had one | | virtualHost | If there are no addresses, returns `this.virtualHost`. Otherwise is returns the virtual host from the last address that had one |  In test form, the current behaviour is:  ``` java     @Test     public void noAddresses() {         this.properties.setHost("rabbit.example.com");         this.properties.setPort(1234);         this.properties.setUsername("user");         this.properties.setPassword("password");         this.properties.setVirtualHost("virtual");          assertThat(this.properties.getHost()).isEqualTo("rabbit.example.com");         assertThat(this.properties.getPort()).isEqualTo(1234);         assertThat(this.properties.getUsername()).isEqualTo("user");         assertThat(this.properties.getPassword()).isEqualTo("password");         assertThat(this.properties.getVirtualHost()).isEqualTo("virtual");     }      @Test     public void singleAddress() {         this.properties.setHost("rabbit.example.com");         this.properties.setPort(1234);         this.properties.setUsername("user");         this.properties.setPassword("password");         this.properties.setVirtualHost("virtual");         this.properties.setAddresses("amqp://test:test@amqp.example.com:2345/foo");          assertThat(this.properties.getHost()).isEqualTo("amqp.example.com");         assertThat(this.properties.getPort()).isEqualTo(2345);         assertThat(this.properties.getUsername()).isEqualTo("test");         assertThat(this.properties.getPassword()).isEqualTo("test");         assertThat(this.properties.getVirtualHost()).isEqualTo("foo");     }      @Test     public void multipleAddresses() {         this.properties.setHost("rabbit.example.com");         this.properties.setPort(1234);         this.properties.setUsername("user");         this.properties.setPassword("password");         this.properties.setVirtualHost("virtual");         this.properties.setAddresses("amqp://alpha:alpha@alpha.example.com/alpha,"                 + "amqp://bravo:bravo@bravo.example.com:3456/bravo,"                 + "amqp://charlie.example.com:2345/charlie");          assertThat(this.properties.getHost()).isNull();         assertThat(this.properties.getPort()).isEqualTo(1234);         assertThat(this.properties.getUsername()).isEqualTo("bravo");         assertThat(this.properties.getPassword()).isEqualTo("bravo");         assertThat(this.properties.getVirtualHost()).isEqualTo("charlie");     } ``` </body>
		<created>2016-07-19 13:40:42</created>
		<closed>2016-07-21 12:49:17</closed>
	</bug>
	<bug>
		<id>6417</id>
		<title>Hard to identify cause of IllegalStateException thrown by DevTools when it can't read jar's manifest</title>
		<body>Hi, application does not launch when activating devtools (eclipse-neon windows). Spring boot version is 1.3.6.RELEASE The error is   ``` Exception in thread "main" java.lang.IllegalStateException: Failed to read Class-Path attribute from manifest of jar file:/C:/Users/Ramon/.m2/repository/ognl/ognl/3.0.8/ognl-3.0.8.jar     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathOfJarManifestIfPossible(ChangeableUrls.java:100)     at org.springframework.boot.devtools.restart.ChangeableUrls.fromUrlClassLoader(ChangeableUrls.java:88)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getUrls(DefaultRestartInitializer.java:91)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getInitialUrls(DefaultRestartInitializer.java:54)     at org.springframework.boot.devtools.restart.Restarter.&lt;init&gt;(Restarter.java:134)     at org.springframework.boot.devtools.restart.Restarter.initialize(Restarter.java:531)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationStartedEvent(RestartApplicationListener.java:64)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationEvent(RestartApplicationListener.java:46)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:121)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:60)     at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:48)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:302)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174)     at com.github.rsallar.underevalprj.UnderevalprjApplication.main(UnderevalprjApplication.java:10) ```  You can check the code here:  https://github.com/rsallar/underevalprj/tree/bug-devtools </body>
		<created>2016-07-18 20:20:57</created>
		<closed>2016-07-19 07:56:02</closed>
	</bug>
	<bug>
		<id>6396</id>
		<title>FixedAuthoritiesExtractor uses incorrect key</title>
		<body>See https://github.com/spring-projects/spring-boot/commit/adb42ed966ab10780a544c04afc4b01534f4b077#commitcomment-18248002 </body>
		<created>2016-07-14 16:21:52</created>
		<closed>2016-07-15 20:03:13</closed>
	</bug>
	<bug>
		<id>6387</id>
		<title>Undertow SSL support doesn't support null passwords</title>
		<body>According to the KeyStore javadocs a null password is allowed. It works on Tomcat. </body>
		<created>2016-07-13 14:23:26</created>
		<closed>2016-07-13 15:07:34</closed>
	</bug>
	<bug>
		<id>6378</id>
		<title>Application Admin MBean tries to register twice when there's a child SpringApplication that enables auto-configuration</title>
		<body>This app will fail to start:  ``` java package com.example;  import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder;  public class DemoApplication {      public static void main(String[] args) {         System.setProperty("spring.application.admin.enabled", "true");         SpringApplicationBuilder parent = new SpringApplicationBuilder(Parent.class);         SpringApplicationBuilder child = parent.child(Child.class);         parent.run(args);         child.run(args);     }      @SpringBootApplication     static class Parent {      }      @SpringBootApplication     static class Child {      } } ```  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springApplicationAdminRegistrar' defined in class path resource [org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.class]: Invocation of init method failed; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Admin,name=SpringApplication     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) ~[spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) ~[spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:760) ~[spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]     at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:360) ~[spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:306) ~[spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]     at com.example.Gh6362Application.main(Gh6362Application.java:12) [classes/:na] Caused by: javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Admin,name=SpringApplication     at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437) ~[na:1.8.0_74]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898) ~[na:1.8.0_74]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966) ~[na:1.8.0_74]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900) ~[na:1.8.0_74]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324) ~[na:1.8.0_74]     at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522) ~[na:1.8.0_74]     at org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar.afterPropertiesSet(SpringApplicationAdminMXBeanRegistrar.java:89) ~[spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]     ... 14 common frames omitted ``` </body>
		<created>2016-07-12 09:01:44</created>
		<closed>2016-07-13 08:56:21</closed>
	</bug>
	<bug>
		<id>6371</id>
		<title>SpringBootTestContextBootstrapper ignores WebAppConfiguration and its configured resource path</title>
		<body>`WebTestContextBootstrapper` (used by Spring Boot 1.3) looks at `WebAppConfiguration` to determine the `resourceBasePath` of the `WebMergedContextConfiguration`. By default, this means that resources in `src/main/webapp` can be loaded by the tests.  Spring Boot 1.4 uses `SpringBootTestContextBootstrapper`. It ignores `WebAppConfiguration` and hardcodes an empty string as the `resourceBasePath` of the `WebMergedContextConfiguration` that it creates. This means that resources in `src/main/webapps` cannot be loaded. One symptom of this is described in #6349. </body>
		<created>2016-07-11 11:04:37</created>
		<closed>2016-07-11 23:40:45</closed>
	</bug>
	<bug>
		<id>6362</id>
		<title>A child SpringApplication can cause SpringApplicationAdmin MBean to indicate that the application is ready when it's not</title>
		<body>STS boot dash uses the lifecycle JMX admin bean (i.e by passing VM arg -Dspring.application.admin.enabled=true") to determine   a) when a app is 'READY'. b) determine server port and managment port.  The problem is this. Sometimes the app passes the 'READY' check, yet aparantly the port(s) are not yet set.  This creates a race condition for STS (See https://www.pivotaltracker.com/story/show/125728671) because STS waits until the app is 'READY' and then tries to determine the port its running on. But because of the slight delay... this means STS sometimes gets 'unknown' (actually 'null').  I've addressed it on our end by adding a wait loop that polls the port after app enters ready state.  I'm not sure its really a bug, but it seems like one to me because...  I'd assume that 'READY' state for the app means it is fully started and is in fact ready to respond to requests on its port. If so then I would also expect that asking the app what the port is, should already work.  I mean why else is there a 'READY' state if it doesn't actually mean the app is truly 'READY'?  Anyhoo... if you do not think its a real bug or not worth fixing, that is fine. But I thought I'd at least report it and let you decide what to do about it (if anything).   Further useful info: I'm not sure this affects all versions of boot. I have seen strange test failures in our CI builds that _might_ be attributed to this (so also Boot 1.3.x). But I only recently found a reliable way to reproduce and debug (and fix) it with a set of apps that I can only run properly when using Boot 1.4 BUILD-SNAPSHOT. In other words I have only really been able to observe the problem with Boot 1.4. </body>
		<created>2016-07-08 18:18:06</created>
		<closed>2016-07-12 08:17:18</closed>
	</bug>
	<bug>
		<id>6361</id>
		<title>Tomcat sometimes warns about threads that have not been stopped when app is shut down using the shutdown endpoint</title>
		<body>``` 2016-07-08 13:51:15.363  WARN 22433 --- [ost-startStop-2] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT] appears to have started a thread named [Thread-8] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:  sun.misc.Unsafe.park(Native Method)  java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)  java.util.concurrent.FutureTask.awaitDone(FutureTask.java:429)  java.util.concurrent.FutureTask.get(FutureTask.java:191)  org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:972)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:808)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.startup.Tomcat.stop(Tomcat.java:356)  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.stop(TomcatEmbeddedServletContainer.java:236)  org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.stopAndReleaseEmbeddedServletContainer(EmbeddedWebApplicationContext.java:302)  org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onClose(EmbeddedWebApplicationContext.java:151)  org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:988)  org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:934)  org.springframework.boot.actuate.endpoint.ShutdownEndpoint$1.run(ShutdownEndpoint.java:70)  java.lang.Thread.run(Thread.java:745) 2016-07-08 13:51:15.363  WARN 22433 --- [ost-startStop-2] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT] appears to have started a thread named [Tomcat-startStop-2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:  sun.misc.Unsafe.park(Native Method)  java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)  java.util.concurrent.FutureTask.awaitDone(FutureTask.java:429)  java.util.concurrent.FutureTask.get(FutureTask.java:191)  org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:972)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1424)  org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1413)  java.util.concurrent.FutureTask.run(FutureTask.java:266)  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)  java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)  java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-07-08 12:53:39</created>
		<closed>2016-07-11 10:27:26</closed>
	</bug>
	<bug>
		<id>6360</id>
		<title>ShutdownEndpoint does not reset the interrupted flag when it catches InterruptedException</title>
		<body></body>
		<created>2016-07-08 12:38:21</created>
		<closed>2016-07-11 16:03:40</closed>
	</bug>
	<bug>
		<id>6339</id>
		<title>DevTools support for remote applications breaks when a second change is made before first restart has completed</title>
		<body>When `FileSystemWatcher` detects a change, `ClassPathChangeUploader` uploads the changes to the remote application and causes it to restart. While this restart is running the remote application's HTTP server is unavailable. If the user makes a second change while this restart is still in progress, `ClassPathChangeUploader` will try to upload the changes and this will fail as it can't connect:  ``` Exception in thread "File Watcher" java.lang.IllegalStateException: java.net.ConnectException: Connection refused     at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:107)     at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:1)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)     at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.publishEvent(ClassPathFileChangeListener.java:68)     at org.springframework.boot.devtools.classpath.ClassPathFileChangeListener.onChange(ClassPathFileChangeListener.java:64)     at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.fireListeners(FileSystemWatcher.java:306)     at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.updateSnapshots(FileSystemWatcher.java:299)     at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.scan(FileSystemWatcher.java:259)     at org.springframework.boot.devtools.filewatch.FileSystemWatcher$Watcher.run(FileSystemWatcher.java:239)     at java.lang.Thread.run(Thread.java:745) Caused by: java.net.ConnectException: Connection refused     at java.net.PlainSocketImpl.socketConnect(Native Method)     at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)     at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)     at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)     at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)     at java.net.Socket.connect(Socket.java:589)     at java.net.Socket.connect(Socket.java:538)     at sun.net.NetworkClient.doConnect(NetworkClient.java:180)     at sun.net.www.http.HttpClient.openServer(HttpClient.java:432)     at sun.net.www.http.HttpClient.openServer(HttpClient.java:527)     at sun.net.www.http.HttpClient.&lt;init&gt;(HttpClient.java:211)     at sun.net.www.http.HttpClient.New(HttpClient.java:308)     at sun.net.www.http.HttpClient.New(HttpClient.java:326)     at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1168)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1104)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:998)     at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:932)     at org.springframework.http.client.SimpleBufferingClientHttpRequest.executeInternal(SimpleBufferingClientHttpRequest.java:78)     at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)     at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53)     at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:93)     at org.springframework.boot.devtools.remote.client.HttpHeaderInterceptor.intercept(HttpHeaderInterceptor.java:57)     at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:85)     at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:69)     at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)     at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:53)     at org.springframework.boot.devtools.remote.client.ClassPathChangeUploader.onApplicationEvent(ClassPathChangeUploader.java:102)     ... 12 more ```  This is made worse by the fact that the exception kills the watcher thread so any further changes are missed. I think we should probably block the file system watcher thread and retry while the remote application is unavailable. This would also have the added benefit of making things a bit more robust if you start `RemoteSpringApplication` and start making changes before starting the remote application. </body>
		<created>2016-07-06 13:12:22</created>
		<closed>2016-07-13 09:38:18</closed>
	</bug>
	<bug>
		<id>6325</id>
		<title>configprops endpoint fails with NoSuchMethodError on Java 7</title>
		<body>The failure is:  ``` java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.JavaType.getTypeName()Ljava/lang/String;     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint$GenericSerializerModifier.isReadable(ConfigurationPropertiesReportEndpoint.java:312) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint$GenericSerializerModifier.changeProperties(ConfigurationPropertiesReportEndpoint.java:302) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:401) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:271) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:223) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:157) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1215) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1167) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:490) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:688) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:107) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3508) ~[jackson-databind-2.7.5.jar:2.7.5]     at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3449) ~[jackson-databind-2.7.5.jar:2.7.5]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.safeSerialize(ConfigurationPropertiesReportEndpoint.java:158) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extract(ConfigurationPropertiesReportEndpoint.java:114) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extract(ConfigurationPropertiesReportEndpoint.java:99) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:86) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:61) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointMvcAdapter.invoke(AbstractEndpointMvcAdapter.java:56) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:44) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_65]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_65]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_65]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_65]     at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:114) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) ~[spring-boot-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:107) ~[spring-boot-actuator-1.4.0.RC1.jar:1.4.0.RC1]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.1.RELEASE.jar:4.3.1.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:522) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1110) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:785) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1425) [tomcat-embed-core-8.5.3.jar:8.5.3]     at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-8.5.3.jar:8.5.3]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_65]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_65]     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.3.jar:8.5.3]     at java.lang.Thread.run(Thread.java:745) [na:1.7.0_65] ```  This is caused by the changes made for https://github.com/spring-projects/spring-boot/issues/5081 (https://github.com/spring-projects/spring-boot/commit/ef5087c5ee9f65e44ba800f3e34a05f312b0a3e9). They inadvertently introduced a call to `java.lang.reflect.Type.getTypeName()` which is new in Java 8 and should have been caught by animal sniffer. </body>
		<created>2016-07-05 14:03:20</created>
		<closed>2016-07-05 14:22:08</closed>
	</bug>
	<bug>
		<id>6310</id>
		<title>Jersey, JAXB and Jackson ignore XmlTransient in 1.4 but honour it in 1.3.5</title>
		<body>In upgrading from spring-boot 1.3.5 including the spring-boot-starter-jersey it went from working to getting this exception:  ``` org.glassfish.jersey.server.internal.process.MappableException: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion ```  due to my User &gt; accounts &gt; owner &gt; accounts etc. recursion  In 1.3.5 it honors @XmlTransient but with 1.4.0.SNAPSHOT it doesn't   According to this: http://wiki.fasterxml.com/JacksonJAXBAnnotations  the jackson-xc library should be added and the JAXB annotation introspector should be registered  &lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt; </body>
		<created>2016-07-02 20:53:19</created>
		<closed>2016-07-04 13:44:46</closed>
	</bug>
	<bug>
		<id>6246</id>
		<title>Can't load log4j2 config file</title>
		<body>Spring boot 1.3.5:  I have a web app based on Spring Boot. It worked fine using log4j (version 1) When I try to use log4j2 (version 2) and deploy it on a local jboss, I get the error when the app starts.  The file log4j2.xml is at the top of the classpath.  The Log4J2LoggingSystem.getConfigurationSource class identifies the url to the file as vfs:/C/devtools....  The ResourceUtils.getFile function throws an exception because it only allows urs starting with the "file:" scheme and rejects this one because the scheme is "vfs:".  ``` Caused by: java.io.FileNotFoundException: URL cannot be resolved to absolute file path because it does not reside in the file system: vfs:/C:/devtools/jboss/jboss-as-7.1.3.Final/bin/content/template.ear/sis-app-template-war.war/WEB-INF/classes/log4j2.xml at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:218) [spring-core-4.2.6.RELEASE.jar:4.2.6.RELEASE] at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:202) [spring-core-4.2.6.RELEASE.jar:4.2.6.RELEASE] at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.getConfigurationSource(Log4J2LoggingSystem.java:176) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE] at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.loadConfiguration(Log4J2LoggingSystem.java:164) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE] ``` </body>
		<created>2016-06-29 12:37:29</created>
		<closed>2016-06-30 15:05:31</closed>
	</bug>
	<bug>
		<id>6190</id>
		<title>NoSuchMethod error when using server.max-http-header-size with Jetty 8</title>
		<body>#5641 added support for configuring the maximum HTTP header size on Jetty and Undertow (it was already supported with Tomcat).  It fails with a `NoSuchMethodError` when using Jetty 8:  ``` org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoSuchMethodError: org.eclipse.jetty.server.Connector.getConnectionFactories()Ljava/util/Collection;     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:137) ~[classes/:na]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:535) ~[spring-context-4.3.0.RELEASE.jar:4.3.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[classes/:na]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [classes/:na]     at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1176) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1165) [classes/:na]     at sample.jetty8.SampleJetty8Application.main(SampleJetty8Application.java:26) [classes/:na] Caused by: java.lang.NoSuchMethodError: org.eclipse.jetty.server.Connector.getConnectionFactories()Ljava/util/Collection;     at org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$1.customize(ServerProperties.java:1010) ~[classes/:na]     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory.getEmbeddedServletContainer(JettyEmbeddedServletContainerFactory.java:177) ~[classes/:na]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:164) ~[classes/:na]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:134) ~[classes/:na]     ... 8 common frames omitted ``` </body>
		<created>2016-06-20 13:01:06</created>
		<closed>2016-06-20 13:13:07</closed>
	</bug>
	<bug>
		<id>6178</id>
		<title>Servlet Container Beans (i.e. Filter, Servlet, etc) are instantiated too soon</title>
		<body>Spring Boot 1.4.0.M3 (and prior versions) initialize Servlet Filters too eagerly. This can lead to inconsistencies between running tests and integration tests (i.e. https://github.com/spring-projects/spring-data-examples/issues/189). It can also lead to ordering issues when working with AOP (i.e. #2578 behaves differently between test and integration test).   The problem is cause by: - [AbstractApplicationContext](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RELEASE/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L535) invokes onRefresh - [EmbeddedWebApplicationContext](https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java#L134) implements `onRefresh` by invoking [createEmbeddedServletContainer](https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java#L134) - When using Tomcat, [TomcatEmbeddedServletContainer](https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java#L91) will start Tomcat - This causes all the Servlet Container Beans (i.e. Filter, Servlet, etc) to be instantiated eagerly in [getServletContextInitializerBeans](https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java#L241).  This is not ideal because these Beans might depend on a lot of other Beans (i.e. Servlet initializes all of Spring MVC, Filter initializes Spring Security, etc) and cause all sorts of ordering issues due to the eager initialization of the Beans. It should be noted that while `DelegatingFilterProxy` is used, the servlet container initializes the `DelegatingFilterProxy` which in turn initializes the `Filter` that is marked as a Bean.  As it stands [onRefresh](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RELEASE/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L535) initializes every Bean rather than "special Beans" (as is intended).  What is expected is that the Servlet Container Beans would be initialized in [finishBeanFactoryInitialization](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RELEASE/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L541). </body>
		<created>2016-06-16 16:27:03</created>
		<closed>2016-06-30 03:24:30</closed>
	</bug>
	<bug>
		<id>6172</id>
		<title>spring-boot:run ignores a forked JVM's exit code</title>
		<body>If `spring-boot:run` forks the JVM and the JVM exits with a non-zero exit code, Maven still considers the build to have succeeded.  </body>
		<created>2016-06-16 10:31:36</created>
		<closed>2016-06-16 10:36:39</closed>
	</bug>
	<bug>
		<id>6162</id>
		<title>Jersey starter has two copies of tiger-types classes on its classpath</title>
		<body></body>
		<created>2016-06-14 10:45:48</created>
		<closed>2016-06-14 11:40:29</closed>
	</bug>
	<bug>
		<id>6161</id>
		<title>Data MongoDB starter depends on two versions of several Mongo Driver classes</title>
		<body></body>
		<created>2016-06-14 10:20:09</created>
		<closed>2016-06-14 11:40:29</closed>
	</bug>
	<bug>
		<id>6160</id>
		<title>SpringApplication.setBeanNameGenerator doesn't work for scanned components</title>
		<body>The bean name generator is first set by Spring Boot here: https://github.com/spring-projects/spring-boot/blob/v1.4.0.M3/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java#L96  But, it's overwritten later by Spring here: https://github.com/spring-projects/spring-framework/blob/v4.3.0.RC2/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java#L94  The issue exists with all the following tested versions: 1.2.8, 1.3.5 and 1.4.0 M3.  You can find a reproduction case here: https://github.com/romainmoreau/bean-name-repro </body>
		<created>2016-06-14 09:36:16</created>
		<closed>2016-06-15 15:56:59</closed>
	</bug>
	<bug>
		<id>6158</id>
		<title>Narayana JTA starter depends on three different JTA API artifacts</title>
		<body>- `javax.transaction:javax.transaction-api:1.2` - `org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:1.0.0.Final` - `org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Alpha3` </body>
		<created>2016-06-14 09:08:59</created>
		<closed>2016-06-14 11:40:29</closed>
	</bug>
	<bug>
		<id>6157</id>
		<title>Data JPA starter depends on two different JTA API artifacts</title>
		<body></body>
		<created>2016-06-14 08:59:48</created>
		<closed>2016-06-14 11:40:29</closed>
	</bug>
	<bug>
		<id>6136</id>
		<title>Cherry pick fixes from 6133</title>
		<body>The String fixes from #6133 are especially relevant and should be applied regardless of the PR. </body>
		<created>2016-06-10 00:26:21</created>
		<closed>2016-06-11 00:24:31</closed>
	</bug>
	<bug>
		<id>6126</id>
		<title>using `spring.main.sources=foo` fails, but `spring.main.sources=org.foo` doesn't</title>
		<body>Here's an example project using springboot + camel. If I create the project to use a package name 'foo' and use the `spring.main.sources=foo` then the app barfs on startup; it seems to think there's some XML file somewhere:  ``` 2016-06-08 11:47:32.746  INFO 63549 --- [           main] o.apache.camel.spring.boot.FatJarRouter  : Starting FatJarRouter v2.17.1 on newstracmac.local with PID 63549 (/Users/jstrachan/.m2/repository/org/apache/camel/camel-spring-boot/2.17.1/camel-spring-boot-2.17.1.jar started by jstrachan in /private/tmp/foo/small-foo/cheese) 2016-06-08 11:47:32.749  INFO 63549 --- [           main] o.apache.camel.spring.boot.FatJarRouter  : No active profile set, falling back to default profiles: default 2016-06-08 11:47:32.773  INFO 63549 --- [           main] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from class path resource [foo] 2016-06-08 11:47:32.845 ERROR 63549 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 1 in XML document from class path resource [foo] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:179) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:206) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:143) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:126) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.SpringApplication.load(SpringApplication.java:708) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:357) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) ~[spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26) [camel-spring-boot-2.17.1.jar:2.17.1]     at foo.MyCamelRoute.main(MyCamelRoute.java:29) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_45]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_45]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_45]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_45]     at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:478) [spring-boot-maven-plugin-1.3.5.RELEASE.jar:1.3.5.RELEASE]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45] Caused by: org.xml.sax.SAXParseException: Content is not allowed in prolog.     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1436) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:999) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:117) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243) ~[na:1.8.0_45]     at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:348) ~[na:1.8.0_45]     at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391) ~[spring-beans-4.2.6.RELEASE.jar:4.2.6.RELEASE]     ... 17 common frames omitted  2016-06-08 11:47:32.849  INFO 63549 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/private/tmp/foo/small-foo/cheese/target/classes/, file:/Users/jstrachan/.m2/repository/com/sun/xml/bind/jaxb-core/2.2.11/jaxb-core-2.2.11.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-expression/4.2.6.RELEASE/spring-expression-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-aop/4.2.6.RELEASE/spring-aop-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/wagon/wagon-http-shared/2.6/wagon-http-shared-2.6.jar, file:/Users/jstrachan/.m2/repository/com/squareup/okio/okio/1.6.0/okio-1.6.0.jar, file:/Users/jstrachan/.m2/repository/javax/interceptor/javax.interceptor-api/1.2/javax.interceptor-api-1.2.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/test/arquillian-test-api/1.1.11.Final/arquillian-test-api-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/apache/camel/camel-spring-boot/2.17.1/camel-spring-boot-2.17.1.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/container/arquillian-container-impl-base/1.1.11.Final/arquillian-container-impl-base-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/container/arquillian-container-test-impl-base/1.1.11.Final/arquillian-container-test-impl-base-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-web/4.2.6.RELEASE/spring-web-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/container/arquillian-container-test-api/1.1.11.Final/arquillian-container-test-api-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/shrinkwrap-spi/1.2.3/shrinkwrap-spi-1.2.3.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-beans/4.2.6.RELEASE/spring-beans-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-connector-basic/1.0.0.v20140518/aether-connector-basic-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/1.3.5.RELEASE/spring-boot-starter-tomcat-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar, file:/Users/jstrachan/.m2/repository/org/jsoup/jsoup/1.7.2/jsoup-1.7.2.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-api-base/2.0.0-alpha-8/shrinkwrap-descriptors-api-base-2.0.0-alpha-8.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.6.6/jackson-dataformat-yaml-2.6.6.jar, file:/Users/jstrachan/.m2/repository/org/codehaus/plexus/plexus-compiler-javac/2.3/plexus-compiler-javac-2.3.jar, file:/Users/jstrachan/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.0.33/tomcat-embed-el-8.0.33.jar, file:/Users/jstrachan/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api/2.2.2/shrinkwrap-resolver-api-2.2.2.jar, file:/Users/jstrachan/.m2/repository/javax/el/javax.el-api/2.2.5/javax.el-api-2.2.5.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/kubernetes-model/1.0.48/kubernetes-model-1.0.48.jar, file:/Users/jstrachan/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/fabric8-devops/2.2.125/fabric8-devops-2.2.125.jar, file:/Users/jstrachan/.m2/repository/org/apache/camel/camel-spring/2.17.1/camel-spring-2.17.1.jar, file:/Users/jstrachan/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar, file:/Users/jstrachan/.m2/repository/org/codehaus/plexus/plexus-compiler-api/2.3/plexus-compiler-api-2.3.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/config/arquillian-config-impl-base/1.1.11.Final/arquillian-config-impl-base-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar, file:/Users/jstrachan/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.21/jcl-over-slf4j-1.7.21.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/test/arquillian-test-spi/1.1.11.Final/arquillian-test-spi-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-tx/4.2.6.RELEASE/spring-tx-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/apache/httpcomponents/httpclient-osgi/4.3.3/httpclient-osgi-4.3.3.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.3.5.RELEASE/spring-boot-starter-web-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi-maven/2.2.2/shrinkwrap-resolver-spi-maven-2.2.2.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/container/arquillian-container-spi/1.1.11.Final/arquillian-container-spi-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.0.M1/org.eclipse.sisu.plexus-0.3.0.M1.jar, file:/Users/jstrachan/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter-validation/1.3.5.RELEASE/spring-boot-starter-validation-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/fabric8-utils/2.2.125/fabric8-utils-2.2.125.jar, file:/Users/jstrachan/.m2/repository/javax/enterprise/cdi-api/1.2/cdi-api-1.2.jar, file:/Users/jstrachan/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/wagon/wagon-provider-api/2.6/wagon-provider-api-2.6.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter/1.3.5.RELEASE/spring-boot-starter-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar, file:/Users/jstrachan/.m2/repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/junit/arquillian-junit-core/1.1.11.Final/arquillian-junit-core-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/shrinkwrap-api/1.2.3/shrinkwrap-api-1.2.3.jar, file:/Users/jstrachan/.m2/repository/com/squareup/okhttp/okhttp/2.7.2/okhttp-2.7.2.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.jar, file:/Users/jstrachan/.m2/repository/com/sun/xml/bind/jaxb-impl/2.2.11/jaxb-impl-2.2.11.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/org/apache/camel/camel-spring-boot-starter/2.17.1/camel-spring-boot-starter-2.17.1.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/core/arquillian-core-spi/1.1.11.Final/arquillian-core-spi-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.jar, file:/Users/jstrachan/.m2/repository/ch/qos/logback/logback-classic/1.1.7/logback-classic-1.1.7.jar, file:/Users/jstrachan/.m2/repository/com/squareup/okhttp/logging-interceptor/2.7.2/logging-interceptor-2.7.2.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/kubernetes-jolokia/2.2.125/kubernetes-jolokia-2.2.125.jar, file:/Users/jstrachan/.m2/repository/org/ops4j/pax/url/pax-url-aether/2.4.7/pax-url-aether-2.4.7.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/kubernetes-client/1.3.95/kubernetes-client-1.3.95.jar, file:/Users/jstrachan/.m2/repository/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar, file:/Users/jstrachan/.m2/repository/dnsjava/dnsjava/2.1.7/dnsjava-2.1.7.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/com/github/mifmif/generex/0.0.4/generex-0.0.4.jar, file:/Users/jstrachan/.m2/repository/org/slf4j/jul-to-slf4j/1.7.21/jul-to-slf4j-1.7.21.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/fabric8-annotations/2.2.125/fabric8-annotations-2.2.125.jar, file:/Users/jstrachan/.m2/repository/com/squareup/okhttp/okhttp-ws/2.7.2/okhttp-ws-2.7.2.jar, file:/Users/jstrachan/.m2/repository/org/hibernate/hibernate-validator/5.2.4.Final/hibernate-validator-5.2.4.Final.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/wagon/wagon-file/2.6/wagon-file-2.6.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-impl-maven-archive/2.2.2/shrinkwrap-resolver-impl-maven-archive-2.2.2.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/1.3.5.RELEASE/spring-boot-starter-actuator-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/2.6/wagon-http-lightweight-2.6.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.3.5.RELEASE/spring-boot-autoconfigure-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-actuator/1.3.5.RELEASE/spring-boot-actuator-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-spi/2.0.0-alpha-8/shrinkwrap-descriptors-spi-2.0.0-alpha-8.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/classmate/1.1.0/classmate-1.1.0.jar, file:/Users/jstrachan/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.0.33/tomcat-embed-core-8.0.33.jar, file:/Users/jstrachan/.m2/repository/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.jar, file:/Users/jstrachan/.m2/repository/org/json/json/20140107/json-20140107.jar, file:/Users/jstrachan/.m2/repository/org/apache/tomcat/embed/tomcat-embed-logging-juli/8.0.33/tomcat-embed-logging-juli-8.0.33.jar, file:/Users/jstrachan/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.0.33/tomcat-embed-websocket-8.0.33.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot/1.3.5.RELEASE/spring-boot-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.2/jackson-module-jaxb-annotations-2.7.2.jar, file:/Users/jstrachan/.m2/repository/org/apache/camel/camel-core/2.17.1/camel-core-2.17.1.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.6.6/jackson-core-2.6.6.jar, file:/Users/jstrachan/.m2/repository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.0.M1/org.eclipse.sisu.inject-0.3.0.M1.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-webmvc/4.2.6.RELEASE/spring-webmvc-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/core/arquillian-core-impl-base/1.1.11.Final/arquillian-core-impl-base-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.21/log4j-over-slf4j-1.7.21.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi-maven-archive/2.2.2/shrinkwrap-resolver-spi-maven-archive-2.2.2.jar, file:/Users/jstrachan/.m2/repository/org/assertj/assertj-core/2.4.1/assertj-core-2.4.1.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/config/arquillian-config-api/1.1.11.Final/arquillian-config-api-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/core/arquillian-core-api/1.1.11.Final/arquillian-core-api-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/yaml/snakeyaml/1.16/snakeyaml-1.16.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/shrinkwrap-impl-base/1.2.3/shrinkwrap-impl-base-1.2.3.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/container/arquillian-container-test-spi/1.1.11.Final/arquillian-container-test-spi-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/dk/brics/automaton/automaton/1.11-8/automaton-1.11-8.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-depchain/2.2.2/shrinkwrap-resolver-depchain-2.2.2.pom, file:/Users/jstrachan/.m2/repository/org/eclipse/aether/aether-transport-wagon/1.0.0.v20140518/aether-transport-wagon-1.0.0.v20140518.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-core/4.2.6.RELEASE/spring-core-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api-maven/2.2.2/shrinkwrap-resolver-api-maven-2.2.2.jar, file:/Users/jstrachan/.m2/repository/org/jolokia/jolokia-client-java/1.3.3/jolokia-client-java-1.3.3.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/kubernetes-api/2.2.125/kubernetes-api-2.2.125.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-impl-maven/2.2.2/shrinkwrap-resolver-impl-maven-2.2.2.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/openshift-client/1.3.95/openshift-client-1.3.95.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi/2.2.2/shrinkwrap-resolver-spi-2.2.2.jar, file:/Users/jstrachan/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.6.6/jackson-databind-2.6.6.jar, file:/Users/jstrachan/.m2/repository/org/springframework/boot/spring-boot-starter-logging/1.3.5.RELEASE/spring-boot-starter-logging-1.3.5.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/springframework/spring-context/4.2.6.RELEASE/spring-context-4.2.6.RELEASE.jar, file:/Users/jstrachan/.m2/repository/org/jboss/arquillian/test/arquillian-test-impl-base/1.1.11.Final/arquillian-test-impl-base-1.1.11.Final.jar, file:/Users/jstrachan/.m2/repository/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api-maven-archive/2.2.2/shrinkwrap-resolver-api-maven-archive-2.2.2.jar, file:/Users/jstrachan/.m2/repository/ch/qos/logback/logback-core/1.1.7/logback-core-1.1.7.jar, file:/Users/jstrachan/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.6.6/jackson-annotations-2.6.6.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/kubernetes-assertions/2.2.125/kubernetes-assertions-2.2.125.jar, file:/Users/jstrachan/.m2/repository/org/codehaus/plexus/plexus-utils/3.0.22/plexus-utils-3.0.22.jar, file:/Users/jstrachan/.m2/repository/io/fabric8/jolokia-assertions/2.2.125/jolokia-assertions-2.2.125.jar] [WARNING] java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:478)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 1 in XML document from class path resource [foo] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:179)     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:206)     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:143)     at org.springframework.boot.BeanDefinitionLoader.load(BeanDefinitionLoader.java:126)     at org.springframework.boot.SpringApplication.load(SpringApplication.java:708)     at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:357)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)     at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26)     at foo.MyCamelRoute.main(MyCamelRoute.java:29)     ... 6 more Caused by: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441)     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)     at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1436)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:999)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606)     at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:117)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777)     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)     at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:243)     at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:348)     at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391) ```  However using a different groupId/package name like `org.foo` things works perfectly. Is there some issue with `spring.main.sources` for single path package names?  I've attached an example project that demonstrates the issue if that helps: [cheese.zip](https://github.com/spring-projects/spring-boot/files/304578/cheese.zip) </body>
		<created>2016-06-08 11:01:31</created>
		<closed>2016-06-11 00:24:31</closed>
	</bug>
	<bug>
		<id>6122</id>
		<title>Configuration meta-data processor fails if XMLBeans is included in the build</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  I am working on more spring-boot auto configured components for Apache Camel, and for that I have enabled the Spring Boot APT plugin during compilation.  At the Apache Camel project we do have some Camel components that integrate with old technologies such as XMLBeans.   The Spring Boot APT plugin causes this compile error  ``` [INFO] ------------------------------------------------------------------------ [INFO] Building Camel :: XMLBeans 2.18-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-xmlbeans --- [INFO] Deleting /Users/davsclaus/workspace/camel/components/camel-xmlbeans/target [INFO] [INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-xmlbeans --- [INFO] [INFO] --- maven-bundle-plugin:3.0.1:cleanVersions (versions) @ camel-xmlbeans --- [INFO] [INFO] --- xmlbeans-maven-plugin:2.3.3:xmlbeans-test (generate-sources) @ camel-xmlbeans --- warning: [options] bootstrap class path not set in conjunction with -source 1.4 warning: [options] source value 1.4 is obsolete and will be removed in a future release warning: [options] target value 1.4 is obsolete and will be removed in a future release warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.   An annotation processor threw an uncaught exception. Consult the following stack trace for details. java.lang.IllegalArgumentException: Incorrect number of type arguments     at com.sun.tools.javac.model.JavacTypes.getDeclaredType0(JavacTypes.java:246)     at com.sun.tools.javac.model.JavacTypes.getDeclaredType(JavacTypes.java:222)     at org.springframework.boot.configurationprocessor.TypeUtils.&lt;init&gt;(TypeUtils.java:77)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.init(ConfigurationMetadataAnnotationProcessor.java:111)     at com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState.&lt;init&gt;(JavacProcessingEnvironment.java:500)     at com.sun.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator.next(JavacProcessingEnvironment.java:597)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:690)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)     at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)     at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)     at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)     at com.sun.tools.javac.main.Main.compile(Main.java:523)     at com.sun.tools.javac.main.Main.compile(Main.java:381)     at com.sun.tools.javac.main.Main.compile(Main.java:370)     at com.sun.tools.javac.main.Main.compile(Main.java:361)     at com.sun.tools.javac.Main.compile(Main.java:56)     at com.sun.tools.javac.Main.main(Main.java:42) ```  The camel-xmlbeans component does not have any Spring Boot annotations, and it seems to be causes some compilation due `xmlbeans-maven-plugin` that is generating some test source code.  I just wanted to bring this to the SB team in case you want to try to track down that APT plugin, and see maybe if it should have some kind of fail safe code when grabbing javadoc. AFAIR we had some issues like that with the Apache Camel APT compiler plugin, as javadoc on various 3rd party library may be invalid and cause the APT JavaC to fail as shown before.  This is using  ```  &lt;spring-boot-version&gt;1.3.5.RELEASE&lt;/spring-boot-version&gt; ```  The camel-xmlbeans component that fails during compilation is located here: https://github.com/apache/camel/tree/master/components/camel-xmlbeans </body>
		<created>2016-06-07 05:02:27</created>
		<closed>2016-06-11 00:24:32</closed>
	</bug>
	<bug>
		<id>6121</id>
		<title>SpringApplicationBuilder#properties(String...) fails with colon values</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  **Spring Boot 1.3.5.RELEASE**   The following API in the `SpringApplicationBuilder` fails when you use the property file format and have a property value with a colon in it.   ``` java public SpringApplicationBuilder properties(String... defaultProperties) {     return properties(getMapFromKeyValuePairs(defaultProperties)); } ```  The other overloaded APIs (such as the `Map` implementation) seem to work fine.  The issues is in the implementation of the `getMapFromKeyValuePairs` method. The logic assumes _yaml_ if there is a colon present.  ``` java private Map&lt;String, Object&gt; getMapFromKeyValuePairs(String[] args) {     Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     for (String pair : args) {         int index = pair.indexOf(":");         if (index &lt;= 0) {             index = pair.indexOf("=");         }         String key = pair.substring(0, index &gt; 0 ? index : pair.length());         String value = index &gt; 0 ? pair.substring(index + 1) : "";         map.put(key, value);     }     return map; } ```  These two test cases show the issue:  ``` java @Test public void failureProperty() {     Map&lt;String, Object&gt; pairs = getMapFromKeyValuePairs2("logging.path=c:\\logging.file");      assertThat(pairs, hasKey("logging.path"));     assertThat((String) pairs.get("logging.path"), equalTo("c:\\logging.file")); // {logging.path=c=\logging.file} }  @Test public void failureProperty2() {     Map&lt;String, Object&gt; pairs = getMapFromKeyValuePairs("custom.property=groupId:artifactId:version");      assertThat(pairs, hasKey("custom.property"));     assertThat((String) pairs.get("custom.property"), equalTo("groupId:artifactId:version")); // {custom.property=groupId=artifactId:version} }  @Test public void worksYaml() {     Map&lt;String, Object&gt; pairs = getMapFromKeyValuePairs("logging.path: c:\\logging.file");      assertThat(pairs, hasKey("logging.path"));     assertThat((String) pairs.get("logging.path"), equalToIgnoringWhiteSpace("c:\\logging.file")); }  @Test public void worksYaml2() {     Map&lt;String, Object&gt; pairs = getMapFromKeyValuePairs("custom.property: groupId:artifactId:version");      assertThat(pairs, hasKey("custom.property"));     assertThat((String) pairs.get("custom.property"), equalToIgnoringWhiteSpace("groupId:artifactId:version")); } ``` </body>
		<created>2016-06-06 21:56:00</created>
		<closed>2016-06-11 03:59:24</closed>
	</bug>
	<bug>
		<id>6115</id>
		<title>Nullpointer in SimpleInMemoryRepository</title>
		<body>We're using spring boot 1.3.2 with Angel.SR6 for spring cloud. The service is a reverse proxy with zuul and occasionally we get this exception in the log:  ``` 2016-05-26T13:33:09.221+0200;1.3;0.0.0;http-nio-10.5.31.21-8080-exec-74:140;-;-;WARN ;org.springframework.boot.actuate.autoconfigure.MetricsFilter;[Unable to submit counter metric 'status.500.userservice-rest.star-star']     java.lang.NullPointerException: null     at org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository.update(SimpleInMemoryRepository.java:44)     at org.springframework.boot.actuate.metrics.repository.InMemoryMetricRepository.increment(InMemoryMetricRepository.java:51)     at org.springframework.boot.actuate.metrics.writer.DefaultCounterService.increment(DefaultCounterService.java:44)     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.incrementCounter(MetricsFilter.java:205)     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.recordMetrics(MetricsFilter.java:138)     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:110)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)     at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:521)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1096)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:674)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) ```  It usually occurs at night on a test system with not much traffic. </body>
		<created>2016-06-03 11:23:44</created>
		<closed>2016-06-17 12:16:58</closed>
	</bug>
	<bug>
		<id>6109</id>
		<title>Setting spring.resources.static-locations to relative jar url does not work</title>
		<body>Example of value: `spring.resources.static-locations=jar:file:lib/abc.jar!/static/` So lib/abc.jar is relative path to jar file. Request for static content will result in 404 with errors in stack trace:   ``` java.io.IOException: no entry name specified         at org.springframework.boot.loader.jar.JarURLConnection.getInputStream(JarURLConnection.java:187)  ```  Debugging JarURLConnection.getInputStream reveals that line:  ```         String spec = getNormalizedFile(url)                 .substring(jarFile.getUrl().getFile().length()); ```  Does not work correctly for relative paths because `getNormalizedFile(url)` will return relative path, but `jarFile.getUrl().getFile()` will return absolute path, so String spec will end up being just part of the file name or it will throw `StringIndexOutOfBoundsException`.  </body>
		<created>2016-06-02 12:25:45</created>
		<closed>2016-06-24 15:36:30</closed>
	</bug>
	<bug>
		<id>6106</id>
		<title>Spring Boot unit-test fails when building master due to translation of a message with not expected locale</title>
		<body>**Problem / First analysis**  When building spring boot via mvn test, I got test failures. It seems to be a locale-related issue because the translated reason is printed in german, but was expected to be english...  **Occured Exception**  Results :  ``` Failed tests:   BindFailureAnalyzerTests.bindExceptionDueToValidationFailure:44 Expecting:  &lt;"Binding to target org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests$ValidationFailureProperties@4ea505e2 failed:      Property: test.foo.value     Value: 0     Reason: at least five      Property: test.foo.foo     Value: null     Reason: darf nicht null sein      Property: test.foo.nested.bar     Value: null     Reason: darf nicht null sein "&gt; to contain:  &lt;"Property: test.foo.foo     Value: null     Reason: may not be null"&gt;  Tests run: 1298, Failures: 1, Errors: 0, Skipped: 2 ```  **Environment**  mvn -version Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T17:41:47+01:00) Maven home: /usr/local/Cellar/maven/3.3.9/libexec Java version: 1.8.0_60, vendor: Oracle Corporation Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre Default locale: de_DE, platform encoding: UTF-8 OS name: "mac os x", version: "10.11.4", arch: "x86_64", family: "mac"  **Possible solutions** - I could switch my system to english (not everybody wants to do that) - Fix the test (e.g. to set the default locale in the test) - Modify the maven surfire task to start the forked tests with en locale  What are your suggestions here, Spring Boot team? Should I open a bug in github? As suggested in the stackoverflow ticket i have created a ticket.  Thanks, Jens </body>
		<created>2016-06-01 20:27:32</created>
		<closed>2016-06-07 01:07:54</closed>
	</bug>
	<bug>
		<id>6053</id>
		<title>Test fails with IllegalAccessError from Data JPA's proxy creation when a new context is refreshed after a test that starts Tomcat has run</title>
		<body>https://stackoverflow.com/questions/37342590/java-lang-illegalaccesserror-when-making-spring-data-repo-package-local  The root cause is #2308. When the test that starts Tomcat (`WebEnvironment.RANDOM_PORT` or `DEFINED_PORT`) runs, the thread context class loader is set to Tomcat's web app class loader. As the context is cached, no clean up is performed after the tests are finished so the TCCL is left being Tomcat's web app class loader. This then breaks the proxy creation in a subsequent test that refreshes a new context.  We already hit another variant of the problem in #5141. We avoided it then using `@DirtiesContext` so that the context is closed when the tests are finished. That's not a general solution as, unlike, our integration tests where the configuration is rarely the same from test class to test class, tests for a user's application are likely to have common configuration making context caching worthwhile.  I can see two possible solutions: 1. Revert the changes made for #2308 2. Hook into the test framework so that the TCCL is configured correctly  If it's possible, 2 is the preferred option. We'd need a hook to restore the TCCL after a test class has finished and then to reinstate it before a test class runs. </body>
		<created>2016-05-27 08:18:32</created>
		<closed>2016-05-27 10:46:56</closed>
	</bug>
	<bug>
		<id>6048</id>
		<title>ApplicationReadyEvent not listened to when declaring your own EventMulticaster</title>
		<body>Spring boot: v1.3.5.RELEASE  I've found an issue that I think is a bug:  **In a nutshell:** If you declare your own 'applicationEventMulticaster' bean then the **ApplicationReadyEvent** will be published but no listeners will be triggered.  **In detail:** The class **EventPublishingRunListener** instantiates an instance of **SimpleApplicationEventMulticaster** for itself in its constructor and holds it as a private property.  Once the context is prepared,  it then registers its instance of **SimpleApplicationEventMulticaster** as the bean 'applicationEventMulticaster'.  The problem occurs when you declare that bean yourself in order to provide an alternative **TaskExecutor** (for example if you want to use an asynchronous implementation). Something like this:  ``` /**  * Set up multicast for the events so that they execute asynchronously.  * @return  */ @Bean(name = "applicationEventMulticaster") public ApplicationEventMulticaster simpleApplicationEventMulticaster() {     SimpleApplicationEventMulticaster eventMulticaster = new SimpleApplicationEventMulticaster();     eventMulticaster.setTaskExecutor(new SimpleAsyncTaskExecutor());     return eventMulticaster; } ```  If you do this it will work fine for almost all events, which is probably how this has gone unnoticed. However any events published by **EventPublishingRunListener** are published to the original ApplicationEventMulticaster that it still holds a reference to as a private property. The problem is that all the listeners are registered with your freshly declared multicaster and so they never receive these events.  This problem can be demonstrated by installing the Spring Boot Admin Client on a vanilla Spring Boot application where the only customisation is to implement your own 'applicationEventMulticaster' bean. The client listens for **ApplicationReadyEvent** to trigger its self registration process. This never happens.  **A workaround:** I implemented the following workaround which fetches the existing event multicaster and simply changes its task executor:  ``` @Configuration public class Loader implements ApplicationListener&lt;ContextRefreshedEvent&gt; {      public void onApplicationEvent(ContextRefreshedEvent event) {         SimpleApplicationEventMulticaster originalEventMulticaster = event.getApplicationContext().getBean(AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME, SimpleApplicationEventMulticaster.class);          originalEventMulticaster.setTaskExecutor(threadPoolTaskExecutor());     }      @Bean     public ThreadPoolTaskExecutor threadPoolTaskExecutor() {         return new ThreadPoolTaskExecutor();     } } ```  **A suggested fix:** I'm new to Spring Boot, but I would suggest that the fix is to make the **publishEvent** method of **EventPublishingRunListener** fetch the multicaster from the context (if it exists). That way it will publish to our new one. </body>
		<created>2016-05-26 14:25:09</created>
		<closed>2016-05-27 15:39:05</closed>
	</bug>
	<bug>
		<id>6043</id>
		<title>When using Spring HATEOAS, responses change when switching from @SpringBootTest and @AutoConfigureMockMvc to @WebMvcTest</title>
		<body>`@SpringBootTest` and `@AutoConfigureMockMvc`:  ```            Status = 200     Error message = null           Headers = {Content-Type=[application/hal+json;charset=UTF-8]}      Content type = application/hal+json;charset=UTF-8              Body = {"content":{},"_links":{"http://api.example.com":{"href":"self"}}}     Forwarded URL = null    Redirected URL = null           Cookies = [] ```  `@WebMvcTest`:  ```            Status = 200     Error message = null           Headers = {Content-Type=[application/json;charset=UTF-8]}      Content type = application/json;charset=UTF-8              Body = {"content":{},"links":[{"rel":"http://api.example.com","href":"self"}]}     Forwarded URL = null    Redirected URL = null           Cookies = [] ```  Note the change in content type and `_links` vs `links` in the body.  The problem is that `@WebMvcTest` does not auto-configure Spring HATEOAS. </body>
		<created>2016-05-26 09:43:46</created>
		<closed>2016-05-26 10:09:55</closed>
	</bug>
	<bug>
		<id>6006</id>
		<title>IllegalArgumentException from AnnotationsPropertySource if property mapped annotation is on a super class</title>
		<body>The failure is:  ``` java.lang.IllegalArgumentException: Annotation must not be null     at org.springframework.util.Assert.notNull(Assert.java:115)     at org.springframework.core.annotation.AnnotationUtils.isInJavaLangAnnotationPackage(AnnotationUtils.java:908)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.collectProperties(AnnotationsPropertySource.java:71)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.collectProperties(AnnotationsPropertySource.java:82)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.getProperties(AnnotationsPropertySource.java:63)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.&lt;init&gt;(AnnotationsPropertySource.java:58)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySource.&lt;init&gt;(AnnotationsPropertySource.java:53)     at org.springframework.boot.test.autoconfigure.properties.AnnotationsPropertySourceTests.foo(AnnotationsPropertySourceTests.java:174)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ```  Reported by @marceloverdijk on Gitter </body>
		<created>2016-05-20 17:36:11</created>
		<closed>2016-05-23 11:38:20</closed>
	</bug>
	<bug>
		<id>5986</id>
		<title>launch.script: pid folder subdirectory might be missing</title>
		<body>We're using packaged jars to deploy our applications and run them in "service"-mode.  I was going to set the environment variable `$APP_NAME` to (amongst other things) specify the pid and log file name. Starting the service then fails because in `$PID_FOLDER` there's no subdirectory `$APP_NAME`. If I create it manually the service starts fine.  ``` ~/git/boot/some.app/target$ export MODE="service" ~/git/boot/some.app/target$ export PID_FOLDER="/tmp" ~/git/boot/some.app/target$ export LOG_FOLDER="/tmp" ~/git/boot/some.app/target$ export APP_NAME="foo" ```  ``` ~/git/boot/some.app/target$ ./some.app.jar start Operation not permitted (cannot access pid file) ```  ``` ~/git/boot/some.app/target$ mkdir ${PID_FOLDER}/${APP_NAME} ~/git/boot/some.app/target$ ./some.app.jar start Started [29132] ```  I learned from the last issue to discuss first whether this is defective or intended behavior before providing any PRs. </body>
		<created>2016-05-18 08:53:23</created>
		<closed>2016-06-14 08:57:13</closed>
	</bug>
	<bug>
		<id>5971</id>
		<title>WarLauncherTests failure when build path contains a space</title>
		<body>The spring-boot-loader module contains the test class WarLauncherTests which has a test method entitled: explodedWarHasOnlyWebInfClassesAndContentsOfWebInfLibOnClasspath  This test has the following assertion:  ``` java assertThat(getUrls(archives)).containsOnly(webInfClasses.toURI().toURL(),                 new URL("jar:" + webInfLibFoo.toURI().toURL() + "!/")); ```  This test will fail if the build path contains a space due to inconsistent encoding.  Two archives are created during this test and they exhibit different behavior thus resulting in a test failure.  **Archive 1** _Output_:  ``` jar:file:/C:/git%20repos/spring-boot/spring-boot-tools/spring-boot-loader/target/exploded-war/WEB-INF/lib/foo.jar!/ ```  _Expected_:  ``` jar:file:/C:/git%20repos/spring-boot/spring-boot-tools/spring-boot-loader/target/exploded-war/WEB-INF/lib/foo.jar!/ ```  So far so good.  Notice the %20 encoding in both the output and expected values.  **Archive 2** _Output:_  ``` file:/C:/git repos/spring-boot/spring-boot-tools/spring-boot-loader/target/exploded-war/WEB-INF/classes/ ```  _Expected_:  ``` file:/C:/git%20repos/spring-boot/spring-boot-tools/spring-boot-loader/target/exploded-war/WEB-INF/classes/ ```  This is where we encounter the failure due to the output not containing an encoded space whilst the expected value does.  I wasn't able to fully discern what was causing this discrepancy.  Perhaps @wilkinsona can shed some light on this? </body>
		<created>2016-05-13 22:49:22</created>
		<closed>2016-06-15 19:54:53</closed>
	</bug>
	<bug>
		<id>5968</id>
		<title>Non-web Spring Boot app exits with return code 1</title>
		<body>I have built a super simple application that exits with status code 1 when I run `./gradlew bootRun`.  Code can be found here: https://github.com/mikegehard/kotlinArchiveChannel/commit/8c9dcdad1e557ae41e84442afc16ff2295f43e13  Upon further investigation, it looks like the inclusion of the Boot dev tools is what is causing the issues because when I remove them, the app exits with a status of 0:  https://github.com/mikegehard/kotlinArchiveChannel/commit/3db70cb8c199bfee1c0ff361ab75a68d2de43ad5 </body>
		<created>2016-05-13 15:35:28</created>
		<closed>2016-06-21 01:43:54</closed>
	</bug>
	<bug>
		<id>5956</id>
		<title>BootRepackage requires mainClassName propery even if mainClass option is explicitly specified</title>
		<body>I was trying to create a fat jar with integration tests, but ran into this problem. The important part of Gradle configuration is:  ``` groovy task integTestBoot(type: BootRepackage, dependsOn: integTestJar) {     withJarTask = integTestJar     mainClass = 'org.springframework.boot.issues.gh1370.IntegrationTestSuite'     customConfiguration = "integTestRuntime" } ```  Here I specified the main class using `mainClass` option. The main class of the application itself is determined by Spring, meaning that do not explicitly specify any main class elsewhere and everything works. Running `gradle integTestBoot` task gives me the following error:  ``` Execution failed for task ':integTestBoot'. &gt; Cannot get property 'mainClassName' on extra properties extension as it does not exist ```  After digging into the source, I found the cause in `RepackageTask` class:  ``` java         ...         private void setMainClass(Repackager repackager) {             String mainClassName = getMainClassNameProperty();             if (RepackageTask.this.mainClass != null) {                 mainClassName = RepackageTask.this.mainClass;             }             ...         }         ...         private String getMainClassNameProperty() {             if (getProject().hasProperty("mainClassName")) {                 return (String) getProject().property("mainClassName");             }             ExtraPropertiesExtension extraProperties = (ExtraPropertiesExtension) getProject()                     .getExtensions().getByName("ext");             // My comment: This will throw exception if property not found             return (String) extraProperties.get("mainClassName");         } ```  When determining the main class, `RepackageTask` unconditionally looks for `mainClassName` property, including in the `extraProperties` object. Unfortunately, calling `get` for non-existent property [throws an exception](https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html#org.gradle.api.plugins.ExtraPropertiesExtension:get%28java.lang.String%29). If would suggest using `has` method to check if property exists beforehand.  The workaround at the moment is to explicitly specify `ext.mainClassName` for integration tests package and also re-override `mainClass` for the application. This works, but means a lot of  boilerplate code. </body>
		<created>2016-05-13 11:54:03</created>
		<closed>2016-06-15 19:24:09</closed>
	</bug>
	<bug>
		<id>5942</id>
		<title>Launch script does not handle quoted arguments correctly when used in run mode</title>
		<body>Currently, quoted arguments are only handled correctly when the application is being started and service mode (and start-stop-daemon) is being used. </body>
		<created>2016-05-13 08:27:41</created>
		<closed>2016-05-13 10:42:42</closed>
	</bug>
	<bug>
		<id>5939</id>
		<title>Defining @ConfigurationProperties bean with same prefix generates invalid metadata </title>
		<body>``` @ConfigurationProperties("prefix") public class Props { ... } ```  ``` @Configuration public class Config {     @Bean    @ConfigurationProperties("prefix")    public Props myProps() {...} } ```  will generate the same keys twice  expected: AP should stop processing  </body>
		<created>2016-05-13 07:32:56</created>
		<closed>2016-06-20 07:18:42</closed>
	</bug>
	<bug>
		<id>5922</id>
		<title>Exit Code in 1.3.x is always 0 when Boot app launched with java -jar</title>
		<body>With the exit code enhancements in 1.3.2 the Boot Launcher no longer returns a non-zero exit code by default when an exception causes the application to exit.  See example project here:  https://github.com/KramKroc/nonzeroexit </body>
		<created>2016-05-11 19:19:51</created>
		<closed>2016-05-12 15:59:17</closed>
	</bug>
	<bug>
		<id>5921</id>
		<title>Issue when trace logging is enabled</title>
		<body>Hi, Currently using Spring Boot 1.4.0.M1 and noticed the following issue when the logging level is set to **trace**, we had it set at the root level in our case.   ``` Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'infoEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.class]: Bean instantiation  via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.InfoEndpoint]: Factory method 'infoEndpoint' threw exception; nested exceptio n is java.util.MissingFormatArgumentException: Format specifier '%s'         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:768)         at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:362)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1183)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1172)         at com.intel.cec.keyservice.Application.main(Application.java:37)         ... 8 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.InfoEndpoint]: Factory method 'infoEndpoint' threw exception; nested exception is java.util.MissingFormatArgumentE xception: Format specifier '%s'         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)         ... 26 more Caused by: java.util.MissingFormatArgumentException: Format specifier '%s'         at java.util.Formatter.format(Formatter.java:2519)         at java.util.Formatter.format(Formatter.java:2455)         at java.lang.String.format(String.java:2940)         at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:234)         at org.springframework.boot.bind.PropertiesConfigurationFactory.getObject(PropertiesConfigurationFactory.java:223)         at org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$InfoPropertiesConfiguration.gitInfo(EndpointAutoConfiguration.java:234)         at org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration.infoEndpoint(EndpointAutoConfiguration.java:128)         at org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$$EnhancerBySpringCGLIB$$46d2c5e1.CGLIB$infoEndpoint$3(&lt;generated&gt;)         at org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$$EnhancerBySpringCGLIB$$46d2c5e1$$FastClassBySpringCGLIB$$5c1536a0.invoke(&lt;generated&gt;)         at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)         at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355)         at org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$$EnhancerBySpringCGLIB$$46d2c5e1.infoEndpoint(&lt;generated&gt;)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ```  So from the stack trace it is throwing an exception on line **234** of org.springframework.boot.bind.PropertiesConfigurationFactory.java which has the following line:     **this.logger.trace(String.format("Properties:%n%s" + this.properties));**  So looks like this should be replaced with:     **this.logger.trace("Properties:" + this.properties);** </body>
		<created>2016-05-11 17:43:36</created>
		<closed>2016-05-12 15:58:09</closed>
	</bug>
	<bug>
		<id>5918</id>
		<title>Static error pages have no content-type</title>
		<body>When one places an error page in `src/main/resources/templates/error/`, everything works as expected. However, a static page in `src/main/resources/static/error` displays the source of the page rather than the content.   The `spring-boot-starter-web-mustache` actually kind of shows that issue. The `content-type` header isn't set at all with `http://localhost:8080/serviceUnavailable`. Unfortunately, the browser is "smart" enough to figure out it's some html and renders it anyway so the error wasn't obvious when the sample was built. </body>
		<created>2016-05-11 10:30:39</created>
		<closed>2016-05-11 10:48:20</closed>
	</bug>
	<bug>
		<id>5902</id>
		<title>StackOverflowException when using `AutoConfigureMockMvc` in Kotlin</title>
		<body>I'm giving Kotlin a whirl and was converting the test below that was running fine in Java to Kotlin. After converting the test using the IntelliJ conversion tool I tried to run it but I got this error:  ``` 22:32:19.476 [main] DEBUG org.springframework.test.context.junit4.SpringJUnit4ClassRunner - SpringJUnit4ClassRunner constructor called with [class com.test.app.web.DeveloperControllerTest] 22:32:19.486 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate] 22:32:19.494 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)] 22:32:19.517 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.test.app.web.DeveloperControllerTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper] 22:32:19.539 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.test.app.web.DeveloperControllerTest], using SpringBootContextLoader 22:32:19.543 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.test.app.web.DeveloperControllerTest]: class path resource [com/test/app/web/DeveloperControllerTest-context.xml] does not exist 22:32:19.544 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.test.app.web.DeveloperControllerTest]: class path resource [com/test/app/web/DeveloperControllerTestContext.groovy] does not exist 22:32:19.544 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.test.app.web.DeveloperControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}. 22:32:19.545 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.test.app.web.DeveloperControllerTest]: DeveloperControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration. java.lang.StackOverflowError at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) at java.util.concurrent.ConcurrentHashMap.containsKey(ConcurrentHashMap.java:964) at java.lang.reflect.WeakCache.containsValue(WeakCache.java:175) at java.lang.reflect.Proxy.isProxyClass(Proxy.java:791) at java.lang.reflect.Proxy.getInvocationHandler(Proxy.java:815) at sun.reflect.annotation.AnnotationInvocationHandler.asOneOfUs(AnnotationInvocationHandler.java:226) at sun.reflect.annotation.AnnotationInvocationHandler.equalsImpl(AnnotationInvocationHandler.java:201) at sun.reflect.annotation.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:64) at com.sun.proxy.$Proxy13.equals(Unknown Source) at java.util.HashMap.putVal(HashMap.java:634) at java.util.HashMap.put(HashMap.java:611) at java.util.HashSet.add(HashSet.java:219) at org.springframework.boot.test.context.ImportsContextCustomizer$ContextCustomizerKey.collectElementAnnotations(ImportsContextCustomizer.java:239) at org.springframework.boot.test.context.ImportsContextCustomizer$ContextCustomizerKey.collectClassAnnotations(ImportsContextCustomizer.java:226) ```  Java test:  ``` @RunWith(SpringRunner.class) @SpringBootTest @AutoConfigureMockMvc public class DeveloperControllerTest {     @Autowired     private MockMvc mvc;      @Test     public void createNewDeveloper() throws Exception {         mvc.perform(                 post("/api/v1/developers")                         .param("username", "boaty")                         .param("email", "boaty@mcboatface.org")                         .param("password", "123loveboats")                         .param("passwordConfirmation", "123loveboats")         ).andExpect(status().isCreated());     } } ```  Converted to Kotlin:  ``` @RunWith(SpringRunner::class) @SpringBootTest @AutoConfigureMockMvc class DeveloperControllerTest {     @Autowired     lateinit var mvc: MockMvc      @Test     @Throws(Exception::class)     fun createNewDeveloper() {         mvc.perform(                 post("/api/v1/developers")                         .param("username", "boaty")                         .param("email", "boaty@mcboatface.org")                         .param("password", "123loveboats")                         .param("passwordConfirmation", "123loveboats"))                 .andExpect(status().isCreated)     } } ```  What I've noticed with this is that if I remove the annotation `AutoConfigureMockMvc` Spring will boot and try to run, but it'll fail because it can't autowire `MockMvc`.  I'm using Kotlin 1.0.1-2 together with Spring Boot 1.4.0-M2.  I've also asked [a question about this on Stack Overflow](http://stackoverflow.com/questions/37118917/could-not-detect-default-configuration-classes-for-test-class-with-kotlin-and-at) but was asked on Slack to create an issue here. :) </body>
		<created>2016-05-09 15:16:57</created>
		<closed>2016-05-10 09:04:42</closed>
	</bug>
	<bug>
		<id>5882</id>
		<title>MockMvc tests not working the same in 1.4</title>
		<body>This test is kind of unusual (in that it is its own configuration). It fails in 1.4 and passes in 1.3 though  ``` @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(SimpleIntegrationTests.class) @WebAppConfiguration @EnableAutoConfiguration(exclude = { JmxAutoConfiguration.class }) @RestController public class SimpleIntegrationTests {      private static Log logger = LogFactory.getLog(SimpleIntegrationTests.class);      @Autowired     private WebApplicationContext webApplicationContext;      private MockMvc mockMvc;      private static Object span;      @Before     public void setup() {         DefaultMockMvcBuilder mockMvcBuilder = MockMvcBuilders                 .webAppContextSetup(this.webApplicationContext);         this.mockMvc = mockMvcBuilder.build();         SimpleIntegrationTests.span = null;     }      @RequestMapping("/ping")     public String ping() {         logger.info("ping");         SimpleIntegrationTests.span = new Object();         return "ping";     }      @RequestMapping("/future")     public CompletableFuture&lt;String&gt; future() {         logger.info("future");         return CompletableFuture.completedFuture("ping");     }      @Test     public void getCallsEndpoint() throws Exception {         this.mockMvc.perform(get("/ping")).andReturn();         assertThat(SimpleIntegrationTests.span).isNotNull();     }      @Test     public void futureCreatesAsync() throws Exception {         this.mockMvc.perform(get("/future")).andExpect(request().asyncStarted());     }  } ``` </body>
		<created>2016-05-06 13:38:33</created>
		<closed>2016-05-09 11:28:04</closed>
	</bug>
	<bug>
		<id>5880</id>
		<title>Hibernate 5 custom naming strategy generates inconsistent table name for @ManyToMany</title>
		<body>&lt;!-- Thanks for raising a Spring Boot issue. What sort of issue are you raising?  Question  Please ask questions about how to use something, or to understand why something isn't working as you expect it to, on Stack Overflow using the spring-boot tag.  Bug report  Please provide details of the problem, including the version of Spring Boot that you are using. If possible, please provide a test case or sample application that reproduces the problem. This makes it much easier for us to diagnose the problem and to verify that we have fixed it.  Enhancement  Please start by describing the problem that you are trying to solve. There may already be a solution, or there may be a way to solve it that you hadn't considered. --&gt;  When running spring-boot-sample-jpa insert errors occures. The import.sql file try to insert into note_tags table but the table that´s get created is note_tag (without s) </body>
		<created>2016-05-06 10:55:54</created>
		<closed>2016-05-11 09:53:20</closed>
	</bug>
	<bug>
		<id>5875</id>
		<title>MetricsFilter may create an unbounded number of metrics for requests with a templated URI that are not handled by Spring MVC</title>
		<body>The MetricsFilter is unsuitable for REST microservices that are backing a large number of entities.  In our case, it was trying to generate gauges and counters for /widget/1 to /widget/60000000.  It eventually soaks the heap and causes the server to slow to a crawl as it spends most of its CPU cycles in GC.  There should be a big red "caveat" bubble in the documentation that details this scenario.    Ideally, a Spring MVC controller metrics controller should be implemented that works similar to the DropWizard Jersey 2 implementation (plus some RequestMapping introspection), then the MetricsFilter could be disabled by default. </body>
		<created>2016-05-05 18:14:38</created>
		<closed>2018-06-21 15:22:35</closed>
	</bug>
	<bug>
		<id>5870</id>
		<title>ResetMocksTestExecutionListener does not tolerate bean factory methods that throw an exception</title>
		<body>This test fails if you run it with Spring Boot 1.4: https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/test/java/org/springframework/cloud/netflix/feign/FeignClientOverrideDefaultsTests.java. the proxies are created by Feign (not Mockito) and yet Mockito seems to think they belong to it, and null everything out in them. Splat! </body>
		<created>2016-05-05 13:55:53</created>
		<closed>2016-05-16 20:04:57</closed>
	</bug>
	<bug>
		<id>5853</id>
		<title>Auto-configured OAuth2ClientAuthenticationProcessingFilter has no event published</title>
		<body>The `OAuth2ClientAuthenticationProcessingFilter` instance created by auto-configuration does not have a `ApplicationEventPublisher` so that no events from that instance are published. </body>
		<created>2016-05-03 13:36:43</created>
		<closed>2016-05-03 13:42:44</closed>
	</bug>
	<bug>
		<id>5848</id>
		<title>Example responses in Actuator docs for the /logfile endpoint have no content</title>
		<body>Things look fine in 1.4.0.M1, but sometime between M1 and M2, the underlying log file appears to have stopped having any content written to it so the example responses are empty. Thanks for some improvements in the latest Spring Framework snapshots, we now see a build failure as the attempt to retrieve partial content fails as the range cannot be satisfied. </body>
		<created>2016-05-03 11:50:20</created>
		<closed>2016-05-03 14:13:52</closed>
	</bug>
	<bug>
		<id>5847</id>
		<title>`@WebMvcTest` does not initialize the logging system</title>
		<body>If I use `@WebMvcTest` I can see a lot of debug logs in a vanilla project. That's not happening with `@DataJpaTest`. It looks like the former doesn't initialize the `LoggingSystem` while the later does. </body>
		<created>2016-05-03 10:29:59</created>
		<closed>2016-05-04 16:15:48</closed>
	</bug>
	<bug>
		<id>5842</id>
		<title>Package JPA with orm.xml fails with odd error: "cannot be resolved to URL because it does not exist"  in Spring-Boot 1.4.0.M2</title>
		<body>Since we updated from spring-boot 1.3.3 to 1.4.M2 we receive a odd exception if we start our application by packing it into a execuatable jar (or war). This problem only occurs if you don't scan for any entities in your classpath but rather define the mapping in a orm.xml. The Bug seems to be similar to an already fixed one: https://github.com/spring-projects/spring-boot/issues/420  Everything works if we start the Application with the Application.java main method or if we deploy the (execuatable) war file to tomcat. The problem does not occur if there has been at least one Entity defined/scanned by using the javax.persistence annotations  **Tested Versions** Spring Boot Version 1.4.0.M2 Spring Boot Version 1.3.3 (works)  **Exception**:  ``` Caused by: java.io.FileNotFoundException: class path resource [] cannot be resolved to URL because it does not exist         at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:187)         at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl(DefaultPersistenceUnitManager.java:588)         ... 31 common frames omitted ```  **Example Project:** https://github.com/pavax/sample-spring-boot-app  **Howto** 1. mvn clean install 2. start the application java -jar sample-spring-boot-app.jar  alternatively: change the packaging of the sample-spring-boot-web to war and active the profile executable-war. </body>
		<created>2016-05-02 21:34:52</created>
		<closed>2016-05-27 12:39:17</closed>
	</bug>
	<bug>
		<id>5837</id>
		<title>@SpyBean and @MockBean fails on verify, after spring-tx is added to classpath</title>
		<body>I'm using `spring-boot 1.4.0.M2` and I having some trouble using `@SpyBean` and `@MockBean` in my tests. Both annotations were working fine, but after I added `spring-boot-starter-jdbc` to my project, my tests started to fail on spy/mock verifications with:  &gt; org.mockito.exceptions.misusing.UnfinishedVerificationException: &gt; Missing method call for verify(mock) here:  I removed `spring-boot-starter-jdbc` dependency and added `spring-tx` and the error still there.  I've created a project reproducing the issue: https://github.com/robersonccgomes/spring-boot-spybean-bug </body>
		<created>2016-05-02 14:47:43</created>
		<closed>2016-05-12 03:20:42</closed>
	</bug>
	<bug>
		<id>5826</id>
		<title>Spring Boot Configuration Processor fails if method name is "set"</title>
		<body>Hi,  I'm currently writing a custom MetricWriter and I'm trying to bind properties to configure it (I'd like to avoid having a separate Properties object). So my Bean declaration looks like this:  ``` @Bean @ExportMetricWriter @ConfigurationProperties("metrics.writer") public MetricWriterExtension metricWriter() throws Exception {     return new MetricWriterExtension(); } ```  Now the GaugeWriter interface (which MetricWriter extends) specifies a method that is just called `void set(Metric&lt;?&gt; value);`. This causes problems for the annotation processor:  ``` Fatal error compiling: java.lang.IllegalStateException: Error processing configuration meta-data on metricWriter(): String index out of range: 0 -&gt; [Help 1]  ```  A possible fix could be to ignore methods that are just called `set`. </body>
		<created>2016-04-29 12:29:43</created>
		<closed>2016-05-02 08:39:20</closed>
	</bug>
	<bug>
		<id>5819</id>
		<title>@ConditionalOnProperty cannot be used as a meta-annotation</title>
		<body>spring boot version: 1.3.3  When I define a new condition based on `@ConditionalOnProperty` like:  ``` java @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE, ElementType.METHOD }) @ConditionalOnProperty(name = "features.extra.enabled", havingValue = "true") public @interface ConditionalOnExtraFeature { } ```  which is reused in multiple configs and then try to define a bean like:  ``` java @Configuration public class SomeConfig {      @Bean         @ConditionalOnExtraFeature     @ConditionalOnProperty("features.extra2.enabled")     ExtraFeature extraFeature() {         return new ExtraFeature();     }     } ```  then despite having 2 conditions one is resolved twice. as far as I have checked it happens due to `AnnotationReadingVisitorUtils:130` where only first annotations is always taken under consideration  i can achieve what i want using `AllNestedConditions` but first try with 2 @ConditionalOnProperty was quite confusing </body>
		<created>2016-04-28 09:31:19</created>
		<closed>2016-05-05 16:36:50</closed>
	</bug>
	<bug>
		<id>5814</id>
		<title>HalBrowserMvcEndpoint.InitialUrlTransformer should respect the web-app context-path</title>
		<body>given a setup like - `http://localhost:8080` - web-app context-path: `/myApp` - `management.context-path`: `/management`  so the actuator discovery url is `http://localhost:8080/myApp/management`.  `HalBrowserMvcEndpoint.InitialUrlTransformer` sets `entryPoint` to `/management` resulting in a `404` for hal-browser's initial request trying to fetch the hal/json (request goes to `http://localhost:8080/management` without the context-path `/myApp`).  when setting the correct entry point including the web-app context-path (`/myApp/management`) into the "explorer" input field manually, it seems to work just fine (request goes to `http://localhost:8080/myApp/management`, http 200 and ui works).   ref. https://github.com/spring-projects/spring-boot/blob/v1.3.3.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java#L153 </body>
		<created>2016-04-27 20:54:11</created>
		<closed>2016-06-17 15:50:31</closed>
	</bug>
	<bug>
		<id>5794</id>
		<title>DataJpaTest's support for showing SQL doesn't work</title>
		<body>The default for `showSql` on `@DataJpaTest` is `true`, however I'm not seeing any SQL being logged. Looking at the `AnnotationsPropertySource` that is created, the property appears to have an erroneous `spring.test.database` prefix:  ``` {spring.test.database.spring.jpa.show-sql=true, spring.test.database.use-default-filters=true} ```  This prefix is coming from `@AutoConfigurationTestDatabase`, with which `DataJpaTest` is meta-annotated. </body>
		<created>2016-04-25 15:45:33</created>
		<closed>2016-04-28 13:15:11</closed>
	</bug>
	<bug>
		<id>5792</id>
		<title>OAuth2ClientContextFilter is registered with the same @Order as the Security filter</title>
		<body>OAuth2ClientContextFilter is registered with the same @Order as the Spring Security filter: -100 and computed -100 respectively. This hasn't caused any problems that I know of yet, but that's probably a fluke because they need to be ordered one before the other (client context before spring security). the workaround is easy (you can specify the order for the security filter as a config property). </body>
		<created>2016-04-25 15:29:54</created>
		<closed>2016-04-26 06:30:22</closed>
	</bug>
	<bug>
		<id>5786</id>
		<title>@ConditionalOnProperty annotation is not @Documented</title>
		<body>Hello folks,  Just noticed while generating my javadocs that the [@ConditionalOnProperty](https://github.com/spring-projects/spring-boot/blob/1.3.x/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java) annotation is not currently annotated with [@Documented](https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Documented.html).   That a very very trivial problem but also kinda problematic as it's important to document this annotation when using meta-annotation based configuration imports with Spring Boot.  Saw the same problem using **Spring Boot 1.3.2.RELEASE and upper versions** with [@ConditionalOnExpression](https://github.com/spring-projects/spring-boot/blob/1.3.x/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnExpression.java) too.  All other annotations based on @ConditionalOn... Are properly annotated.  Have a nice day, Vincent </body>
		<created>2016-04-25 12:04:28</created>
		<closed>2016-04-26 06:30:22</closed>
	</bug>
	<bug>
		<id>5751</id>
		<title>Favicon Cannot Be Loaded from custom static locations</title>
		<body>We have set Boot up to find static content on the file system, e.g.  ``` spring:   resources:     static-locations: file:/some/directory ```  Boot respects this, except for favicons. Looking at the code in `ResourceProperties#getFaviconLocations` it looks like it should be checking the `staticLocations` instead of `CLASSPATH_RESOURCE_LOCATIONS`. The latter is the list of default values if no custom locations are specified.  Version: 1.3.3.RELEASE </body>
		<created>2016-04-20 22:41:16</created>
		<closed>2016-04-26 07:26:59</closed>
	</bug>
	<bug>
		<id>5735</id>
		<title>OAuth2 client_credentials grant type not possible in non-web spring boot service</title>
		<body>I have a spring boot application (SB 1.3.3), configured like this:  ``` spring:   main:     web-environment: false   security:   oauth2:     client:       client-id: trusted_test_client       client-secret: Gehe1m       access-token-uri: http://localhost:49510/v1/oauth/token ```  According to the spring boot 1.3.3 documentation, I should be able to @Autowire and use a OAuth2RestOperations instance to access secured resources with client_credentials mechanism. The main class is only annotated with @SpringBootApplication.  During startup, I can see the following lines:  ``` 2016-04-19 14:56:53.183  INFO 26621 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'oauth2RemoteResource' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=demoApplication; factoryMethodName=oauth2RemoteResource; initMethodName=null; destroyMethodName=(inferred); defined in com.booxware.demo.oauth.client.DemoApplication] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration$SingletonScopedConfiguration; factoryMethodName=oauth2RemoteResource; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration$SingletonScopedConfiguration.class]] 2016-04-19 14:56:53.184  INFO 26621 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'oauth2RemoteResource' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration$SingletonScopedConfiguration; factoryMethodName=oauth2RemoteResource; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration$SingletonScopedConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration$BaseConfiguration; factoryMethodName=oauth2RemoteResource; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration$BaseConfiguration.class]]'' ```  When I try to use the OAuth2RestOperations object, I get the following Exception:  ``` org.springframework.security.oauth2.client.resource.UserRedirectRequiredException: A redirect is required to get the users approval     at org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.getRedirectForAuthorization(AuthorizationCodeAccessTokenProvider.java:359) ~[spring-security-oauth2-2.0.9.RELEASE.jar:na]     at org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.obtainAccessToken(AuthorizationCodeAccessTokenProvider.java:205) ~[spring-security-oauth2-2.0.9.RELEASE.jar:na]     at org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainNewAccessTokenInternal(AccessTokenProviderChain.java:142) ~[spring-security-oauth2-2.0.9.RELEASE.jar:na]     at org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainAccessToken(AccessTokenProviderChain.java:118) ~[spring-security-oauth2-2.0.9.RELEASE.jar:na] ```  I debugged a bit. In OAuth2RestOperationsConfiguration class, there is the following code:  ```     @Configuration     protected abstract static class BaseConfiguration {          @Bean         @ConfigurationProperties("security.oauth2.client")         @Primary         public AuthorizationCodeResourceDetails oauth2RemoteResource() {             AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();             return details;         }      }      @Configuration     @ConditionalOnNotWebApplication     protected static class SingletonScopedConfiguration {          @Bean         @ConfigurationProperties("security.oauth2.client")         @Primary         public ClientCredentialsResourceDetails oauth2RemoteResource() {             ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();             return details;         }          @Bean         public DefaultOAuth2ClientContext oauth2ClientContext() {             return new DefaultOAuth2ClientContext(new DefaultAccessTokenRequest());         }      } ```  During startup, an AuthorizationCodeResourceDetails is created, no a ClientCredentialsResourceDetails. oauth2ClientContext() is called from the SingletonScopedConfiguration class, but oauth2RemoteResource() is called from BaseConfiguration class, not SingletonScopedConfiguration.  For me it looks like spring boot grabs the wrong configuration. </body>
		<created>2016-04-19 12:58:01</created>
		<closed>2016-05-04 13:14:49</closed>
	</bug>
	<bug>
		<id>5728</id>
		<title>Cannot override spring.config.name in Integration test with 1.4.0.M2</title>
		<body>Hello,   I'm trying to migrate from 1.3.3.RELEASE to 1.4.0.M2 and I encountered an issue in my Integration tests. I used to do something like this :   ``` @SpringApplicationConfiguration(classes = Application.class) @WebAppConfiguration @IntegrationTest({"server.port=0", "management.port=0", "spring.config.name=myapplication"}) ```  Unfortunately Spring Boot 1.4.0.M2 is not picking up the new name for the properties file. I tried using this :   ``` @SpringBootTest(classes = Application.class, properties ={"server.port=0", "management.port=0", "spring.config.name=myapplication" } ) ```  But I have the same behavior.  If I rename my property file to `application.yaml` , it's working correctly.  Am I doing something wrong ?   Thanks.  Maxime   </body>
		<created>2016-04-18 23:29:35</created>
		<closed>2016-04-19 12:30:30</closed>
	</bug>
	<bug>
		<id>5718</id>
		<title>Redis auto-configuration requires commons-pool2</title>
		<body>&lt;!--  Thanks for raising a Spring Boot issue. Please provide a brief description of your problem along with the version of Spring Boot that you are using. If possible, please also consider putting together a sample application that reproduces the issue. --&gt;   `JedisConnectionFactory` creates a `JedisPoolConfig` which in turn results in a `JedisPool` which in turn uses Apache Commons Pool 2 and the `GenericObjectPool` is used there. Plus, `usePool` is true in `JedisConnectionFactory`, by default, and I don't see a property to change it.    So, i'd have to create a `@Bean` to set usePool to be false, in which case the `@Bean` that's provided by the auto-config that tests for the availability of the `GenericObjectPool` is moot, anyway. And unless I do something like that, it's going to call code that requires the `GenericObjectPool`.   I think.  </body>
		<created>2016-04-18 03:03:01</created>
		<closed>2016-05-02 12:11:01</closed>
	</bug>
	<bug>
		<id>5704</id>
		<title>NullPointerException with devtools in 1.4.0.M2</title>
		<body>``` Exception in thread "main" java.lang.NullPointerException     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathAttribute(ChangeableUrls.java:121)     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathOfJarManifestIfPossible(ChangeableUrls.java:99)     at org.springframework.boot.devtools.restart.ChangeableUrls.fromUrlClassLoader(ChangeableUrls.java:88)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getUrls(DefaultRestartInitializer.java:91)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getInitialUrls(DefaultRestartInitializer.java:54)     at org.springframework.boot.devtools.restart.Restarter.&lt;init&gt;(Restarter.java:133)     at org.springframework.boot.devtools.restart.Restarter.initialize(Restarter.java:519)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationStartedEvent(RestartApplicationListener.java:68)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationEvent(RestartApplicationListener.java:45)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:121)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:60)     at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:48)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:304) ```  worked correctly with 1.3.3.RELEASE </body>
		<created>2016-04-15 15:39:01</created>
		<closed>2016-04-15 16:34:20</closed>
	</bug>
	<bug>
		<id>5683</id>
		<title>Analysis of NoUniqueBeanDefinitionException is not performed</title>
		<body>The analyzer is missing from `spring.factories` </body>
		<created>2016-04-13 18:49:14</created>
		<closed>2016-04-15 10:46:28</closed>
	</bug>
	<bug>
		<id>5669</id>
		<title>Potential race condition when initializing Logback</title>
		<body>Using SpringBoot version 1.3.2.RELEASE  Occasionally my tests fail with the error below. It is sporadic, but it appears that one `LoggingSystem` might be cleaning up when another is initialized.:  ``` Caused by: java.lang.IllegalStateException: Logback configuration error detected:  ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for composite conversion word [clr] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - Failed to create converter for [%clr] keyword ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - There is no conversion class registered for conversion word [wEx] ERROR in ch.qos.logback.core.pattern.parser.Compiler@729ed61b - [wEx] is not a valid conversion word ERROR in ch.qos.logback.core.pattern.parser.Compiler@71516065 - There is no conversion class registered for conversion word [wEx] ERROR in ch.qos.logback.core.pattern.parser.Compiler@71516065 - [wEx] is not a valid conversion word at org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:153) at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithConventions(AbstractLoggingSystem.java:71) at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:49) at org.springframework.boot.logging.logback.LogbackLoggingSystem.initialize(LogbackLoggingSystem.java:106) at org.springframework.boot.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:262) at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:233) at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:200) at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:176) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119) at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:65) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:330) at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:129) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:78) at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:58) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119) at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111) at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:65) at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54) at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:330) at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116) ... 51 more ```  I've tried to create a sample application that consistently triggers the behavior, but the best I've been able to do is initialize the logging system a bunch in separate threads and observer that similar occur (though not identical)   ```         for(int i =0; i &lt; 100; i++){             new Thread(() -&gt; {                 LoggingSystem system = LoggingSystem.get(LoggingSystem.class.getClassLoader());                 system.initialize(new LoggingInitializationContext(environment), (String)null, (LogFile)null);             }).start();         } ``` </body>
		<created>2016-04-12 23:33:49</created>
		<closed>2017-07-27 09:30:49</closed>
	</bug>
	<bug>
		<id>5665</id>
		<title>Devtools startup exception on invalid manifest</title>
		<body>To reproduce just use devtools and drop the following dependency:  ``` &lt;dependency&gt;     &lt;groupId&gt;org.ehcache&lt;/groupId&gt;     &lt;artifactId&gt;ehcache&lt;/artifactId&gt;     &lt;version&gt;3.0.0.rc2&lt;/version&gt; &lt;/dependency&gt; ```  This dependency contains the following manifest:  ``` Manifest-Version: 1.0 provider: gradle Implementation-Title: ehcache Implementation-Version: 3.0.0.rc2 bb924219d30952dfaa97b6702ca1a4547a17  7ba2 Built-By: jenkins-slave Built-JDK: 1.6.0_45 Build-Time: 2016-03-25T06:29:33-0700 Class-Path: slf4j-api-1.7.7.jar ... ```  This fails   ``` Exception in thread "main" java.lang.IllegalStateException: Class-Path attribute contains malformed URL     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathAttribute(ChangeableUrls.java:133)     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathOfJarManifestIfPossible(ChangeableUrls.java:99)     at org.springframework.boot.devtools.restart.ChangeableUrls.fromUrlClassLoader(ChangeableUrls.java:88)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getUrls(DefaultRestartInitializer.java:91)     at org.springframework.boot.devtools.restart.DefaultRestartInitializer.getInitialUrls(DefaultRestartInitializer.java:54)     at org.springframework.boot.devtools.restart.Restarter.&lt;init&gt;(Restarter.java:133)     at org.springframework.boot.devtools.restart.Restarter.initialize(Restarter.java:519)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationStartedEvent(RestartApplicationListener.java:68)     at org.springframework.boot.devtools.restart.RestartApplicationListener.onApplicationEvent(RestartApplicationListener.java:45)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:121)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:60)     at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:48)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:304)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1182)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1171)     at com.example.cfp.CfpApplication.main(CfpApplication.java:21) Caused by: java.net.MalformedURLException: no protocol: slf4j-api-1.7.7.jar     at java.net.URL.&lt;init&gt;(URL.java:586)     at java.net.URL.&lt;init&gt;(URL.java:483)     at java.net.URL.&lt;init&gt;(URL.java:432)     at org.springframework.boot.devtools.restart.ChangeableUrls.getUrlsFromClassPathAttribute(ChangeableUrls.java:130)     ... 18 more ``` </body>
		<created>2016-04-12 12:22:14</created>
		<closed>2016-04-12 13:06:19</closed>
	</bug>
	<bug>
		<id>5664</id>
		<title>Documented spring.factories key for adding custom endpoints is wrong</title>
		<body>The [documentation](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-customizing-endpoints-programmatically) says to use `org.springframework.boot.actuate.autoconfigure.EndpointWebMvcConfiguration`. The correct key, introduced in https://github.com/spring-projects/spring-boot/commit/71dbec381a70402ba24ebaabd73d41ce19244873, is `org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration`. We should also document the use of `@ManagementContextConfiguration` on the configuration class that defines the custom endpoints. </body>
		<created>2016-04-12 09:36:39</created>
		<closed>2016-04-18 16:43:00</closed>
	</bug>
	<bug>
		<id>5650</id>
		<title>CLI Build fails on Windows</title>
		<body>&lt;!--  Thanks for raising a Spring Boot issue. Please provide a brief description of your problem along with the version of Spring Boot that you are using. If possible, please also consider putting together a sample application that reproduces the issue. --&gt;   ``` java.lang.IllegalArgumentException: name     at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:494)     at sun.misc.URLClassPath.findResource(URLClassPath.java:176)     at java.net.URLClassLoader$2.run(URLClassLoader.java:557)     at java.net.URLClassLoader$2.run(URLClassLoader.java:555)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findResource(URLClassLoader.java:554)     at org.springframework.boot.loader.LaunchedURLClassLoader.findResource(LaunchedURLClassLoader.java:53)     at java.lang.ClassLoader.getResource(ClassLoader.java:1093)     at org.springframework.core.io.ClassPathResource.resolveURL(ClassPathResource.java:147)     at org.springframework.core.io.ClassPathResource.exists(ClassPathResource.java:135)     at org.springframework.boot.cli.util.ResourceUtils.getUrlsFromPrefixedWildcardPath(ResourceUtils.java:113)     at org.springframework.boot.cli.util.ResourceUtils.getUrlsFromWildcardPath(ResourceUtils.java:90)     at org.springframework.boot.cli.util.ResourceUtils.getUrls(ResourceUtils.java:77)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:81)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:69)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:47)     at org.springframework.boot.cli.command.run.RunCommand$RunOptionHandler.run(RunCommand.java:95)     at org.springframework.boot.cli.command.options.OptionHandler.run(OptionHandler.java:84)     at org.springframework.boot.cli.command.OptionParsingCommand.run(OptionParsingCommand.java:54)     at org.springframework.boot.cli.command.CommandRunner.run(CommandRunner.java:219)     at org.springframework.boot.cli.command.CommandRunner.runAndHandleErrors(CommandRunner.java:171)     at org.springframework.boot.cli.SpringCli.main(SpringCli.java:54)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)     at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) Cannot create URL from path [C:/Users/pwebb/projects/spring-boot/code/spring-boot-cli/target/test-app.jar]  class path resource [C:/Users/pwebb/projects/spring-boot/code/spring-boot-cli/target/test-app.jar] java.lang.IllegalArgumentException: name     at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:494)     at sun.misc.URLClassPath.findResource(URLClassPath.java:176)     at java.net.URLClassLoader$2.run(URLClassLoader.java:557)     at java.net.URLClassLoader$2.run(URLClassLoader.java:555)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findResource(URLClassLoader.java:554)     at org.springframework.boot.loader.LaunchedURLClassLoader.findResource(LaunchedURLClassLoader.java:53)     at java.lang.ClassLoader.getResource(ClassLoader.java:1093)     at org.springframework.core.io.ClassPathResource.resolveURL(ClassPathResource.java:147)     at org.springframework.core.io.ClassPathResource.exists(ClassPathResource.java:135)     at org.springframework.boot.cli.util.ResourceUtils.getUrlsFromPrefixedWildcardPath(ResourceUtils.java:113)     at org.springframework.boot.cli.util.ResourceUtils.getUrlsFromWildcardPath(ResourceUtils.java:90)     at org.springframework.boot.cli.util.ResourceUtils.getUrls(ResourceUtils.java:77)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:81)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:69)     at org.springframework.boot.cli.command.options.SourceOptions.&lt;init&gt;(SourceOptions.java:47)     at org.springframework.boot.cli.command.run.RunCommand$RunOptionHandler.run(RunCommand.java:95)     at org.springframework.boot.cli.command.options.OptionHandler.run(OptionHandler.java:84)     at org.springframework.boot.cli.command.OptionParsingCommand.run(OptionParsingCommand.java:54)     at org.springframework.boot.cli.command.CommandRunner.run(CommandRunner.java:219)     at org.springframework.boot.cli.command.CommandRunner.runAndHandleErrors(CommandRunner.java:171)     at org.springframework.boot.cli.SpringCli.main(SpringCli.java:54)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)     at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) Cannot create URL from path [C:/Users/pwebb/projects/spring-boot/code/spring-boot-cli/target/test-app.jar] ```  Looks like #486 </body>
		<created>2016-04-11 04:23:10</created>
		<closed>2016-04-11 15:28:05</closed>
	</bug>
	<bug>
		<id>5638</id>
		<title>spring-boot spring-security thymeleaf, authentication is null on error views</title>
		<body>current version **spring-boot 1.3.3**  We are facing an issue where we are loosing the authentication object in error view. We fixed that for **spring-boot 1.2.8** by registering `DispatcherType.ERROR` like:  ``` @Bean public FilterRegistrationBean getSpringSecurityFilterChainBindedToError(                 @Qualifier("springSecurityFilterChain") Filter springSecurityFilterChain) {          FilterRegistrationBean registration = new FilterRegistrationBean();         registration.setFilter(springSecurityFilterChain);         registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));         return registration; } ```  and it worked as suggested here [1048](https://github.com/spring-projects/spring-boot/issues/1048)  However when we updated to **1.3.3** and **spring security 4** different story it stopped working and dispatcherType sum stayed to 23 for the filterReg bean.  So we've put in app properties: `security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST, ERROR` but no success  Then we tried what was suggested in that issue [4505](https://github.com/spring-projects/spring-boot/issues/4505) but it didn't work either actually it is never invoked.  So the last thing we have tried was implementing `BeanPostProcessor` where we set dispatcher types on `postProcessAfterInitialization`:  ```  public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {         System.out.println("Bean ''" + beanName + "'' created : " + bean.toString());         if (bean instanceof FilterRegistrationBean) {                 FilterRegistrationBean filterReg = (FilterRegistrationBean) bean;                 filterReg.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ERROR, DispatcherType.ASYNC);         } else if (bean instanceof DelegatingFilterProxyRegistrationBean) {                 DelegatingFilterProxyRegistrationBean filterReg = (DelegatingFilterProxyRegistrationBean) bean;                 filterReg.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ERROR, DispatcherType.ASYNC);         }         return bean; } ```  So all dispatcher types are set for the matching beans but yet it isn't working like in **1.2.8** fix. </body>
		<created>2016-04-08 16:46:16</created>
		<closed>2017-01-17 09:37:31</closed>
	</bug>
	<bug>
		<id>5610</id>
		<title>LaunchedURLClassLoader has all of the sub directories of `BOOT-INF/classes` on its class path</title>
		<body></body>
		<created>2016-04-05 15:20:59</created>
		<closed>2016-04-05 15:31:35</closed>
	</bug>
	<bug>
		<id>5550</id>
		<title>When run as a war, spring boot loader .class files can be accessed through http. </title>
		<body>Start a spring boot war, then   ``` bash wget http://localhost:8080/org/springframework/boot/loader/archive/Archive.class ```  When run as a war, the Tomcat context's docBase is set to `.war` path, so the `ServletContext` can getResource from tomcat's `WebResourceRoot`.  ``` java //AbstractEmbeddedServletContainerFactory.java     /**      * Returns the absolute document root when it points to a valid directory, logging a      * warning and returning {@code null} otherwise.      * @return the valid document root      */     protected final File getValidDocumentRoot() {         File file = getDocumentRoot();         // If document root not explicitly set see if we are running from a war archive         file = file != null ? file : getWarFileDocumentRoot();         // If not a war archive maybe it is an exploded war         file = file != null ? file : getExplodedWarFileDocumentRoot();         // Or maybe there is a document root in a well-known location         file = file != null ? file : getCommonDocumentRoot();         if (file == null &amp;&amp; this.logger.isDebugEnabled()) {             this.logger                     .debug("None of the document roots " + Arrays.asList(COMMON_DOC_ROOTS)                             + " point to a directory and will be ignored.");         }         else if (this.logger.isDebugEnabled()) {             this.logger.debug("Document root: " + file);         }         return file;     }      private File getWarFileDocumentRoot() {         return getArchiveFileDocumentRoot(".war");     } ```  In a traditional war file, all classes/jars are under `/WEB-INF`, can not bd accessed through http. But spring boot maven plugin put spring boot loader classes files into  war `/` path. </body>
		<created>2016-04-01 08:32:50</created>
		<closed>2017-07-24 15:30:35</closed>
	</bug>
	<bug>
		<id>5540</id>
		<title>DevToolsDataSourceAutoConfiguration fails if more than one embedded databases are used</title>
		<body>&lt;!--  Thanks for raising a Spring Boot issue. Please provide a brief description of your problem along with the version of Spring Boot that you are using. If possible, please also consider putting together a sample application that reproduces the issue. --&gt;   `DevToolsDataSourceAutoConfiguration` assumes a single `DataSource` bean being present in the `ApplicationContext`, which might not necessarily be the case.  </body>
		<created>2016-03-31 09:49:14</created>
		<closed>2016-04-19 11:39:40</closed>
	</bug>
	<bug>
		<id>5517</id>
		<title>MessageChannelMetricWriter and @ExportMetricWriter</title>
		<body>The `MessageChannelMetricWriter` `@Bean` in the `MetricsChannelAutoConfiguration` must be marked with the `@ExportMetricWriter`, otherwise it is skipped by the `MetricExportAutoConfiguration`:  ``` java @Autowired(required = false) @ExportMetricWriter private Map&lt;String, GaugeWriter&gt; writers = Collections.emptyMap(); ```  After declaring the former in my own config:  ``` java @Bean public MessageChannel metricsChannel() {     return new DirectChannel(); }  @Bean @ExportMetricWriter public MessageChannelMetricWriter messageChannelMetricWriter() {     return new MessageChannelMetricWriter(metricsChannel()); }  @Bean @ServiceActivator(inputChannel = "metricsChannel") public MessageHandler metricsHandler() {     return System.out::println; } ```  The metrics are started to appear in the STDOUT periodically as it is declared by the `MetricExportProperties`.  Also see http://stackoverflow.com/questions/36272482/write-out-spring-boot-metrics-to-stdout-or-aggregator. </body>
		<created>2016-03-29 01:03:42</created>
		<closed>2016-04-10 06:54:07</closed>
	</bug>
	<bug>
		<id>5515</id>
		<title>UndertowEmbeddedServletContainerFactory with Java config -- Not picking up my values</title>
		<body>I have my spring boot application running  within undertow container and configuration  are done via `UndertowEmbeddedServletContainerFactory` . For example I have access log enabled but its not picking it up , same works if its configured via application.properties.  ``` java   @Bean   public EmbeddedServletContainerFactory embeddedServletContainerFactory() {     UndertowEmbeddedServletContainerFactory factory=new UndertowEmbeddedServletContainerFactory();     factory.setAccessLogDirectory(new File(System.getProperty("user.dir")));     factory.setAccessLogEnabled(true);     factory.setAccessLogPattern("%I %q %m %h %a %l %u %t \"%r\" %s %b (%D ms) %U \"%{i,Referer}\" \"%{i,Host}\" \"%{i,User-Agent}\" \"%{o,Content-Type}\" \"%{o,Content-Length}\"");     factory.setBufferSize(16000);     factory.setBuffersPerRegion(20);     factory.setDirectBuffers(true);     factory.setIoThreads(10);     factory.setWorkerThreads(100);     factory.addBuilderCustomizers(         builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true),         builder -&gt; builder.setServerOption(UndertowOptions.ENABLE_STATISTICS, true),         builder -&gt; builder.setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, true));      return factory;   } ``` </body>
		<created>2016-03-28 19:54:12</created>
		<closed>2016-04-10 06:54:07</closed>
	</bug>
	<bug>
		<id>5504</id>
		<title>The index.html in spring-boot-sample-web-static is in the wrong directory</title>
		<body>The sample provided in spring-boot/spring-boot-samples/spring-boot-sample-web-static has added index.html in src/main/webapps. This happens to pass the SampleWebStaticApplicationTests, but when running the sample, we can't see the home page being served!  A workaround fix is simply move the src/main/webapps/index.html into src/main/resources/public  Hope this helps in improving the samples. </body>
		<created>2016-03-27 22:52:22</created>
		<closed>2016-03-29 07:34:35</closed>
	</bug>
	<bug>
		<id>5501</id>
		<title>Building project fails with error: "Could not find property 'main' on task ':run'"</title>
		<body>Building project fails with error seen below although I have the following configuration:  ``` groovy bootRepackage {     mainClass = 'com.mypackage.Main' } ```  It seems to be a conflict with org.akhikhl.gretty Gradle plugin.  Using Gradle 1.12, spring-boot-gradle-plugin:1.3.3.RELEASE, org.akhikhl.gretty:gretty:+  ``` Caused by: groovy.lang.MissingPropertyException: Could not find property 'main' on task ':run'.     at org.gradle.api.internal.AbstractDynamicObject.propertyMissingException(AbstractDynamicObject.java:43)     at org.gradle.api.internal.AbstractDynamicObject.getProperty(AbstractDynamicObject.java:35)     at org.gradle.api.internal.CompositeDynamicObject.getProperty(CompositeDynamicObject.java:97)     at org.gradle.api.internal.AbstractTask.property(AbstractTask.java:383)     at org.springframework.boot.gradle.run.FindMainClassTask.findMainClass(FindMainClassTask.java:90)     at org.springframework.boot.gradle.run.FindMainClassTask.setMainClassNameProperty(FindMainClassTask.java:56)     at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75) ``` </body>
		<created>2016-03-27 09:42:32</created>
		<closed>2016-03-29 10:16:49</closed>
	</bug>
	<bug>
		<id>5491</id>
		<title>Regression in logging System properties with Spring Cloud Config</title>
		<body>Related: #5073   The logging System properties are not being set **when using Spring Cloud Config** and setting properties `logging.file` and `logging.config` in a configuration file in the Spring Cloud Config repository. This was working with Spring Boot 1.3.2 and Spring Cloud Brixton M4 but has stopped working since Spring Boot 1.3.3. PID is still set, however. ### Tested with  | Spring Boot | Spring Cloud | Working? | | --- | --- | --- | | 1.3.2 | Brixton.M4 | Yes | | 1.3.3 | Brixton.M4 | No | | 1.3.4.BUILD-SNAPSHOT | Brixton.M5 | No | | 1.3.4.BUILD-SNAPSHOT | Brixton.RC1 | No | ### Expected  Setting `logging.file` and `logging.config` in Spring Cloud Config for an app should result in System property `LOG_FILE` (and others) being set for that app and therefore usable in Logback configuration.  The custom Logback configuration being used (via `logging.config` from cloud config):  ``` xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;     &lt;include resource="org/springframework/boot/logging/logback/defaults.xml" /&gt;      &lt;appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;encoder&gt;             &lt;charset&gt;UTF-8&lt;/charset&gt;             &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;         &lt;/encoder&gt;         &lt;file&gt;${LOG_FILE}&lt;/file&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyyMMdd}&lt;/fileNamePattern&gt;         &lt;/rollingPolicy&gt;     &lt;/appender&gt;      &lt;root level="INFO"&gt;         &lt;appender-ref ref="FILE" /&gt;     &lt;/root&gt; &lt;/configuration&gt; ``` ### Actual  Only the `PID` System property is set. `LOG_FILE` is not set and therefore its value becomes `LOG_FILE_IS_UNDEFINED` causing a log file by the same name to become the logging output. ### Additional info  Note that taking Spring Cloud Config out of the picture and setting `logging.file` and `logging.config` in `application.yml` results in the expected behavior (as there are unit tests to prove). I wanted to try writing a unit test that would fail but I was not sure how to simulate properties being loaded from Spring Cloud Config in a unit test. I tried debugging some, but was not able to determine the exact cause of the different behavior when using Spring Cloud Config upon upgrading Spring Boot to 1.3.3+. ### Workarounds #### Spring Cloud Config plain text file support  If the custom logging configuration is added to the configuration repo and served by the config server as a plain text file, the Spring environment properties can be used directly in the file. That is, instead of `${LOG_FILE}` one could directly use `${logging.file}` which will be resolved by the config server for the requested application. #### Environment properties via springProperty (Logback only)  Since I am using Logback, the `springPropety` tag can be used to remove the need to use System properties and instead use the environment properties directly.  ---  While either of the above workarounds will work with the latest version of Spring Boot, the previously existing functionality has stopped working, and therefore I think it would be best to either document or restore that functionality.  Let me know if the description above is not sufficient. I can try putting together simple projects to reproduce the problem, but there is inherent complexity as it would involve 3 projects (config repo, config server, config client app). </body>
		<created>2016-03-25 05:50:56</created>
		<closed>2016-03-28 19:53:12</closed>
	</bug>
	<bug>
		<id>5485</id>
		<title>When a package is split across multiple locations, LaunchedURLClassLoader may use the "wrong" manifest</title>
		<body>When LaunchedURLClassLoader loads a class, it preemptively defines the class's package. This ensures that a manifest in a nested jar is found and associated with the package. If the package is split across multiple locations, LaunchedURLClassLoader will currently use the manifest from the first location that it finds for the package. This can lead to a manifest from a location other than that of the class that triggered the package definition being used which is undesirable.  A notable example of the problem is the loader code which contains an empty `org.springframework.boot` package (as it's the parent of the `org.springframework.loader` package). It's repackaged into the root of the application jar and we don't want the application's manifest to be used for the `org.springframework.boot` package.  We need to ensure that the manifest from a jar that actually contains an `org.springframework.boot` class is used instead. </body>
		<created>2016-03-24 15:41:27</created>
		<closed>2016-03-24 15:59:15</closed>
	</bug>
	<bug>
		<id>5474</id>
		<title>Actuate ChildManagementContext starts on a different EmbeddedServletContainer than the parent</title>
		<body>I have both Tomcat and Jetty in the class-path. The Jetty libraries are pulled transitively by one of my project dependencies.   I make sure Tomcat as my embedded servlet container, by explicitly declaring my own TomcatEmbeddedServletContainerFactory bean and configuring the same before the 'EmbeddedServletContainerAutoConfiguration'.  All good so far. The issue starts here  I have spring-boot-actuator in my starters and have the management context listening to a different port.  When I start the application, the web application context starts with the Tomcat container but the management context starts with Jetty.  When I see in the logs and debug more I could see the ChildManagementContext is created explicitly by the EndpointWebMvcAutoConfiguration and it statically registers the following auto configurations  ``` org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.createChildManagementContext(){ final AnnotationConfigEmbeddedWebApplicationContext childContext = new AnnotationConfigEmbeddedWebApplicationContext();         childContext.setParent(this.applicationContext);         childContext.setNamespace("management");         childContext.setId(this.applicationContext.getId() + ":management");         childContext.register(EndpointWebMvcChildContextConfiguration.class,                 PropertyPlaceholderAutoConfiguration.class,                 EmbeddedServletContainerAutoConfiguration.class,                 DispatcherServletAutoConfiguration.class);         CloseEventPropagationListener.addIfPossible(this.applicationContext,                 childContext);         childContext.refresh();         managementContextResolver().setApplicationContext(childContext); } ```  The above practice disallows us from adding any of our custom auto configurations up front of them.  I tried adding my custom configuration which explicitly declares the TomcatEmbeddedServletContainerFactory to the following key in the spring.factories,   `org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration=\ custom.EmbeddedContainerAutoConfiguration`  but that won't help either since classes under the above key will deduced as imported configs by the 'ManagementContextConfigurationsImportSelector' for the EndpointWebMvcChildContextConfiguration.   But these imported configurations are ordered to the last among all the explicitly registered  auto-configurations. ` org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(BeanDefinitionRegistry){ ... parser.parse(candidates); Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;ConfigurationClass&gt;(parser.getConfigurationClasses()); ... } ` Either provide hooks to add auto configurations while creating ChildManagementContext or please fix the ordering. </body>
		<created>2016-03-24 04:38:16</created>
		<closed>2016-04-10 06:54:07</closed>
	</bug>
	<bug>
		<id>5464</id>
		<title>NoClassDefFoundError on MBeanFactory with repackaged jar in 1.4.0.M1</title>
		<body>I'm seeing the following exception after upgrading 1.4.0.M1:  ``` java.lang.RuntimeException: java.lang.reflect.InvocationTargetException         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:62)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:101)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:58) Caused by: java.lang.reflect.InvocationTargetException         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:483)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54)         ... 3 more Caused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:768)         at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:362)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1183)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1172)         at com.izeye.throwaway.Application.main(Application.java:16)         ... 8 more Caused by: org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:104)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.&lt;init&gt;(TomcatEmbeddedServletContainer.java:78)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getTomcatEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:460)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:168)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:160)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130)         ... 16 more Caused by: org.apache.catalina.LifecycleException: Failed to initialize component [StandardServer[-1]]         at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:106)         at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:136)         at org.apache.catalina.startup.Tomcat.start(Tomcat.java:345)         at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.initialize(TomcatEmbeddedServletContainer.java:91)         ... 21 more Caused by: java.lang.NoClassDefFoundError: Could not initialize class org.apache.catalina.mbeans.MBeanFactory         at org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:814)         at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)         ... 24 more ```  I made a sample reproducing the exception:  https://github.com/izeye/spring-boot-throwaway-branches/commits/logback  To reproduce, do as follows before seeing the exception:  ``` gradle clean bootRepackage java -jar build/libs/spring-boot-throwaway-branches-1.0.jar java -jar build/libs/spring-boot-throwaway-branches-1.0.jar java -jar build/libs/spring-boot-throwaway-branches-1.0.jar ... ```  In my case I saw the exception within 10 trials.  In my application, it always happens but I failed to make the sample like it.  As a side note, adding `new MBeanFactory();` before `SpringApplication.run(Application.class, args);` prevents the exception in my case. </body>
		<created>2016-03-23 08:20:10</created>
		<closed>2016-03-24 15:59:15</closed>
	</bug>
	<bug>
		<id>5459</id>
		<title>Should CharacterEncodingFilter apply to all assets?</title>
		<body>`CharacterEncodingFilter` is auto-configured such that it appends a charset to all resources. The trouble is that this adds charset to resources such as png files. This causes confusion for people debugging their apps.  I've overridden it like below, but wondering if there's a smarter way to address this.  ``` java    /**    * This opts out of adding charset to png resources.    *    * &lt;p&gt;By default, {@linkplain CharacterEncodingFilter} adds a charset qualifier to all resources,    * which helps, as javascript assets include extended character sets. However, the filter also    * adds charset to well-known binary ones like png. This creates confusing content types, such as    * "image/png;charset=UTF-8".    */   @Bean   @Order(Ordered.HIGHEST_PRECEDENCE)   public CharacterEncodingFilter characterEncodingFilter() {     CharacterEncodingFilter filter = new CharacterEncodingFilter() {       @Override       protected boolean shouldNotFilter(HttpServletRequest request) {         return request.getServletPath().endsWith(".png");       }     };     filter.setEncoding("UTF-8");     filter.setForceEncoding(true);     return filter;   } ``` </body>
		<created>2016-03-22 03:41:20</created>
		<closed>2016-05-17 01:46:00</closed>
	</bug>
	<bug>
		<id>5452</id>
		<title>IAE when reading ConditionalOnMissingBean on ArtemisEmbeddedServerConfiguration</title>
		<body>Misusage of `@ConditionalOnMissingBean` on `ArtemisEmbeddedServerConfiguration` throws `IllegalArgumentException` when trying to run Artemis embedded withing Spring Boot.  You can trigger this bug by creating a bare application class annotated with `@EnableAutoConfiguration`, `@EnableJms` and with `spring-boot-starter-artemis` and `org.apache.activemq:artemis-server` in the classpath.  Stacktrace:  ``` 00:08:45.002 [main] ERROR org.springframework.boot.SpringApplication - Application startup failed java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.jms.artemis.ArtemisEmbeddedServerConfiguration.artemisConfiguration     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-1.3.3.RELEASE.jar:1.3.3.RELEASE]     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE] ```  This is true for 1.3.3.RELEASE and also for current master branch. </body>
		<created>2016-03-20 03:59:23</created>
		<closed>2016-03-21 10:56:37</closed>
	</bug>
	<bug>
		<id>5411</id>
		<title>org.springframework.boot.loader.jar.JarURLConnection does not allow usage of SecurityManager without java.security.AllPermission</title>
		<body>When activating the JVM default security manager with some reasonable policy file (`-Djava.security.manager -Djava.security.policy=XXX`), a self-contained JAR file created by `org.springframework.boot:spring-boot-maven-plugin:1.3.3.RELEASE:repackage` cannot load classes:  ``` Exception in thread "main" java.lang.RuntimeException: java.lang.reflect.InvocationTargetException     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:62)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54)     ... 1 more Caused by: java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication     at com.example.DemoApplication.main(DemoApplication.java:10)     ... 6 more Caused by: java.lang.ClassNotFoundException: org.springframework.boot.SpringApplication     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 7 more ```  Activating Java security debugging features `-Djava.security.debug=access,failure` reveals that Spring Boot requires the `java.security.AllPermission` permission, which defeats the purpose of setting up a security manager:  ``` access: access denied ("java.security.AllPermission" "&lt;all permissions&gt;" "&lt;all actions&gt;") java.lang.Exception: Stack trace     at java.lang.Thread.dumpStack(Thread.java:1329)     at java.security.AccessControlContext.checkPermission(AccessControlContext.java:462)     at java.security.AccessController.checkPermission(AccessController.java:884)     at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)     at java.net.URLClassLoader$4.run(URLClassLoader.java:709)     at java.net.URLClassLoader$4.run(URLClassLoader.java:707)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.getPermissions(URLClassLoader.java:707)     at java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:206)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)     at java.net.URLClassLoader.access$100(URLClassLoader.java:73)     at java.net.URLClassLoader$1.run(URLClassLoader.java:368)     at java.net.URLClassLoader$1.run(URLClassLoader.java:362)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:361)     at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:170)     at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)     at java.lang.Thread.run(Thread.java:745) ```  Policy file used `-Djava.security.policy=XXX` (obviously, declaring AllPermission should not be an acceptable option):  ``` grant {   permission java.lang.RuntimePermission "*";   permission java.io.FilePermission "*", "read,write,delete";   permission java.net.NetPermission "*";   permission java.util.PropertyPermission "*", "read,write"; }; ```  The root cause seems to be `org.springframework.boot.loader.jar.JarURLConnection` that does not override `java.net.URLConnection.getPermission`(https://docs.oracle.com/javase/7/docs/api/java/net/URLConnection.html#getPermission%28%29):  &gt; By default, this method returns java.security.AllPermission. Subclasses should override this method and return the permission that best represents the permission required to make a a connection to the URL </body>
		<created>2016-03-14 16:17:03</created>
		<closed>2016-06-24 10:53:51</closed>
	</bug>
	<bug>
		<id>5395</id>
		<title>ThymeleafViewResolver does not pick up cache/cacheLimit from properties</title>
		<body>The auto configuration for the ThymeleafViewResolver does:  ``` ThymeleafViewResolver resolver = new ThymeleafViewResolver(); resolver.setTemplateEngine(this.templateEngine); resolver.setCharacterEncoding(this.properties.getEncoding().name()); resolver.setContentType(appendCharset(this.properties.getContentType(),                     resolver.getCharacterEncoding())); resolver.setExcludedViewNames(this.properties.getExcludedViewNames()) ```  The resolver also has setters for cache and cachelimit which are not taken into account from the properties. The resolver as such always ends up caching views, it seems.  </body>
		<created>2016-03-13 12:49:04</created>
		<closed>2016-04-18 16:36:36</closed>
	</bug>
	<bug>
		<id>5393</id>
		<title>grails 3.1.3, war plugin, pathingJar enabled, bootRepackage picks up incorrect output file name</title>
		<body>Using grails 3.1.3, with war plugin applied and pathingJar enabled, bootRepackage picks up the name of the last Jar task registered and sets that as the output file for the repackage task and not the war file.  Possible solution could be:  When repackage action occurs, the output file name is generated based upon archive file found for the Jar task matched with the "withJarTask". </body>
		<created>2016-03-11 16:03:15</created>
		<closed>2017-04-04 15:37:44</closed>
	</bug>
	<bug>
		<id>5389</id>
		<title>Actuator /actuator endpoint contains links to disabled Spring Cloud endpoints</title>
		<body>HATEOAS `/actuator` endpoint renders `spring-cloud-context` endpoints even if they are disabled (`actuator.*.enabled=false` in `application.properties`). [Build-in endpoints](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints) are not rendered if disabled.  Example:  ``` endpoints.pause.enabled=false endpoints.refresh.enabled=false ```  but the `/actuator` endpoint contains them. Excerpt from output:  ``` json {     "_links": {         "pause": {             "href": "http://localhost:8080/pause"         },         "refresh": {             "href": "http://localhost:8080/refresh"         }     } } ```  I've added this issue to the Spring Boot project instead of Spring Cloud per @dsyer recommendation in https://github.com/spring-cloud/spring-cloud-commons/issues/109#issuecomment-216482742 </body>
		<created>2016-03-10 13:02:32</created>
		<closed>2017-08-11 15:39:22</closed>
	</bug>
	<bug>
		<id>5388</id>
		<title>ApplicationFailedEvent should cause management context to close</title>
		<body>Hi,  assuming the following config:  ``` server:   port: 8080   address: 10.22.33.44  management:   address: localhost   port: 8089 ```  with this config, the tomcat can successfully bind the management-port, but fails to start (in this case on purpose, but could happen through misconfiguration) the regular Tomcat connector, because it can't bind to the given address. But if you call the /health endpoint, it prints the following output:  ``` {    status: "UP",       diskSpace: {          status: "UP",          total: 218638835712,          free: 161173192704,          threshold: 10485760       } } ```  in my opinion it should say "status: DOWN", because the actual application is not reachable. Possibly it would be a good idea to implement something like a "WebServerHealthIndicator", which checks the state of all configured tomcat connectors. </body>
		<created>2016-03-10 11:16:30</created>
		<closed>2016-05-17 00:29:13</closed>
	</bug>
	<bug>
		<id>5374</id>
		<title>LoggingApplicationListener will enter debug mode even if environment contains debug=false</title>
		<body>Configuring debug=false in application.properties will make LoggingApplicationListener initialize the logging system with its default debug logging categories, because it just checks for presence of the property, not its value.  Same for trace. </body>
		<created>2016-03-09 17:33:43</created>
		<closed>2016-03-11 10:27:49</closed>
	</bug>
	<bug>
		<id>5367</id>
		<title>Using Jetty BasicErrorController doesn't work for PUT/DELETE requests</title>
		<body>I've noticed that when Spring Boot uses Jetty instead of Tomcat when I do a request on a resource and an exception is thrown on the server side for GET/POST requests the usual JSON formatted error comes back (with the timestamp, error, message, etc. fields), however for PUT/DELETE it's empty. I've tried using a custom `ErrorAttributes` implementation, but it had no effect on this behaviour.  [Minimal working example](https://gist.github.com/kohanyirobert/0b5fbbe151a9956443e2/raw/b282820c6a584a0b78c55b31ef8b33ee331d2bf9/demo.zip).  Unzip it. Do `./gradlew bootRun`. Goto [http://localhost:8080/index.html](http://localhost:8080/index.html). Click the `POST` button to POST to the `/demo` resources (always throws an `IllegalStateException`), the result is `{foo: "bar"}` (supplied by the custom `ErrorAttribute` bean).  Clicking on `PUT` essentially does the same (does a `PUT` to `/demo`) and should result in the same `{foo: "bar"}` value, however nothing is returned, the error response is empty.  Using Tomcat everything works as expected. I've tried it with version `1.3.2.RELEASE` and `1.3.3.RELEASE`. </body>
		<created>2016-03-08 20:29:39</created>
		<closed>2016-04-10 06:54:07</closed>
	</bug>
	<bug>
		<id>5361</id>
		<title>.properties should be encoded in ISO-8859-1</title>
		<body>By default Java .properties files are encoded in ISO-8859-1 (see https://en.wikipedia.org/wiki/.properties ) but since #4622 Spring-Boot reads them as UTF-8.  This causes incompatibility with Java and Spring itself.  The differences to Spring are very uncomfortable when it comes to unit tests, e.g. when the test case has its own Spring Context, .properties files are loaded by Spring and not by Spring Boot. They are parsed correctly as ISO-8859-1. But when the application is started, the same .properties are loaded by Spring-Boot and valid ISO-8859-1 characters are broken.  A JUnit test configured like this:  ``` @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = MyTestConfig.class) public class MyTest {     // ... } ```  with a test config importing a PropertySource:  ``` @Configuration @PropertySource(value = "/application.properties") public class MyTestConfig { } ```  will pass with ISO-8859-1 characters like "äöü" in the application.properties but the Spring-Boot application itself will show corrupted UTF-8 characters.  Furthermore the typical Java IDEs treat .properties files by default as ISO-8859-1 (or similar CP1252). </body>
		<created>2016-03-08 13:50:38</created>
		<closed>2016-05-06 09:10:42</closed>
	</bug>
	<bug>
		<id>5358</id>
		<title>Suppression of analysed failure stack traces isn't working for executable archives</title>
		<body>In the latest 1.4.0 snapshots, the stack trace of a failure that's been analysed is being output to the console:  ``` 2016-03-08 10:12:19.057 ERROR 42886 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   :  *************************** APPLICATION FAILED TO START ***************************  Description:  Embedded servlet container failed to start. Port 8080 was already in use.  Action:  Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.  java.lang.RuntimeException: java.lang.reflect.InvocationTargetException     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:62)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:101)     at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)     at org.springframework.boot.loader.WarLauncher.main(WarLauncher.java:59) Caused by: java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54)     ... 3 more Caused by: org.springframework.boot.context.embedded.PortInUseException: Port 8080 is already in use     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.checkThatConnectorsHaveStarted(TomcatEmbeddedServletContainer.java:187)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:170)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:293)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:141)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:768)     at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:362)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1185)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1174)     at sample.web.staticcontent.SampleWebStaticApplication.main(SampleWebStaticApplication.java:33)     ... 8 more ```  This problem does not occur when the main method is run directly (in an IDE, for example). </body>
		<created>2016-03-08 10:16:44</created>
		<closed>2016-03-31 08:45:42</closed>
	</bug>
	<bug>
		<id>5357</id>
		<title>Tomcat reporting threads named main and container-0 as likely to cause a memory leak</title>
		<body>This problem appears to have been introduced at some point in 1.4.0. It happens with 1.4.0.M1 which uses Tomcat 8.0.32. It does not happen with 1.3.3.RELEASE which also uses Tomcat 8.0.32.  When an application fails to start, the following two warnings are logged:  ``` 2016-03-08 10:02:07.076  WARN 42263 --- [ost-startStop-1] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT] appears to have started a thread named [main] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:  sun.misc.Unsafe.park(Native Method)  java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)  java.util.concurrent.FutureTask.awaitDone(FutureTask.java:429)  java.util.concurrent.FutureTask.get(FutureTask.java:191)  org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:972)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:790)  org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:224)  org.apache.catalina.startup.Tomcat.stop(Tomcat.java:355)  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.stopSilently(TomcatEmbeddedServletContainer.java:194)  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:175)  org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:293)  org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:141)  org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)  org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)  org.springframework.boot.SpringApplication.refresh(SpringApplication.java:768)  org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:362)  org.springframework.boot.SpringApplication.run(SpringApplication.java:308)  org.springframework.boot.SpringApplication.run(SpringApplication.java:1183)  org.springframework.boot.SpringApplication.run(SpringApplication.java:1172)  sample.web.staticcontent.SampleWebStaticApplication.main(SampleWebStaticApplication.java:33)  sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  java.lang.reflect.Method.invoke(Method.java:498)  org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54)  org.springframework.boot.loader.Launcher.launch(Launcher.java:101)  org.springframework.boot.loader.Launcher.launch(Launcher.java:58)  org.springframework.boot.loader.WarLauncher.main(WarLauncher.java:59) 2016-03-08 10:02:07.076  WARN 42263 --- [ost-startStop-1] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT] appears to have started a thread named [container-0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:  java.lang.Thread.sleep(Native Method)  org.apache.catalina.core.StandardServer.await(StandardServer.java:407)  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$1.run(TomcatEmbeddedServletContainer.java:154) ``` </body>
		<created>2016-03-08 10:05:14</created>
		<closed>2016-03-08 13:51:37</closed>
	</bug>
	<bug>
		<id>5354</id>
		<title>A bean named beanNameViewResolver may be defined twice</title>
		<body>Running `spring-boot-sample-actuator` logs:  ``` 2016-03-07 20:04:37.340  INFO 40663 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] ```  There's no need for both `ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration` and `WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter` to create the same bean. </body>
		<created>2016-03-07 20:12:57</created>
		<closed>2016-05-05 15:14:38</closed>
	</bug>
	<bug>
		<id>5353</id>
		<title>Couchbase auto-configuration breaks if `Validator` is not on the classpath</title>
		<body>Slightly related to #5178  If the validator API is not on the classpath, the context blows up with a `ClassNotFoundException` as that piece is not properly guarded:  ```    @Bean    @ConditionalOnBean(Validator.class)     public ValidatingCouchbaseEventListener validationEventListener(Validator validator) {         return new ValidatingCouchbaseEventListener(validator);     } ``` </body>
		<created>2016-03-07 17:34:02</created>
		<closed>2016-03-08 08:04:53</closed>
	</bug>
	<bug>
		<id>5349</id>
		<title>Couchbase repositories auto-config kicks in even if couchbase is not configured</title>
		<body></body>
		<created>2016-03-07 12:18:52</created>
		<closed>2016-03-07 12:19:43</closed>
	</bug>
	<bug>
		<id>5331</id>
		<title>Traces contains wrong HTTP status when unhandled exception is thrown</title>
		<body>When an exception is thrown from a controller-method the Trace contains the HTTP status `200` instead of `500`.  Spring Boot 1.3.3  I assume a similar fix for exceptions as in the `MetricsFilter` is necessary. Additional to `status`, it would be nice to include `exception` and `message` in the traces too.  Output from `/trace`  ``` json [{   "timestamp": 1457044471670,   "info": {     "method": "GET",     "path": "\/500",     "headers": {       "request": {         "host": "localhost:8080",         "user-agent": "curl\/7.43.0",         "accept": "*\/*"       },       "response": {         "X-Application-Context": "spring-boot-admin-sample",         "status": "200"       }     }   } }] ```   Controller:  ``` java @Configuration @EnableAutoConfiguration @Controller public class Application {     public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }     @RequestMapping("/500")     public void ex() {         throw new IllegalStateException("foo");     } } ```  curl output:  ``` shell $ curl -v http://localhost:8080/500 *   Trying 127.0.0.1... * Connected to localhost (127.0.0.1) port 8080 (#0) &gt; GET /500 HTTP/1.1 &gt; Host: localhost:8080 &gt; User-Agent: curl/7.43.0 &gt; Accept: */* &gt;  &lt; HTTP/1.1 500 Internal Server Error &lt; Server: Apache-Coyote/1.1 &lt; X-Application-Context: spring-boot-admin-sample &lt; Content-Type: application/json;charset=UTF-8 &lt; Transfer-Encoding: chunked &lt; Date: Thu, 03 Mar 2016 22:34:31 GMT &lt; Connection: close &lt;  * Closing connection 0 {"timestamp":1457044471690,"status":500,"error":"Internal Server Error","exception":"java.lang.IllegalStateException","message":"foo","path":"/500"} ``` </body>
		<created>2016-03-03 22:41:26</created>
		<closed>2016-04-18 16:11:57</closed>
	</bug>
	<bug>
		<id>5330</id>
		<title>Wrong generated metadata for properties with successive capital letters</title>
		<body>Related to https://github.com/spring-cloud/spring-cloud-stream/issues/396  This could be either an issue for relaxed binding or metadata generation.  Given a property such as: `spring.cloud.stream.binder.rabbit.default.autoBindDLQ` the generated metadata will be:  ``` {   "name": "spring.cloud.stream.binder.rabbit.default.auto-bind-dlq",   "type": "java.lang.Boolean",   "sourceType": "org.springframework.cloud.stream.binder.rabbit.config.RabbitBinderConfigurationProperties",   "defaultValue": false } ```  However, `spring.cloud.stream.binder.rabbit.default.auto-bind-dlq` does not map back to `spring.cloud.stream.binder.rabbit.default.autoBindDLQ` (it maps to `spring.cloud.stream.binder.rabbit.default.autoBindDlq` instead).  </body>
		<created>2016-03-03 22:24:27</created>
		<closed>2016-06-27 10:07:09</closed>
	</bug>
	<bug>
		<id>5309</id>
		<title>IntegrationAutoConfiguration.mbeanServer() called although JMX disabled</title>
		<body>I want to deploy my a Spring Boot application with Spring Integration on WebSphere and we cannot use JMX. Following the manuals I disabled JMX by setting this in my properties:  `spring.jmx.enabled=false`  The JmxAutoConfiguration.class is correctly skipped during the auto configuration process. However the mbeanServer method of the IntegrationAutoConfiguration.class is called and creates an exception. From my understanding this should also be annotated with the condition:  `@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true)` </body>
		<created>2016-03-02 12:54:15</created>
		<closed>2016-03-29 13:26:47</closed>
	</bug>
	<bug>
		<id>5305</id>
		<title>DevTools may shut down a non-embedded in-memory database before Hibernate resulting in a benign exception being logged</title>
		<body>It currently uses `DataSourceProperties.getDriverClassName()` when determining if an in-memory database is in use. This means that shutdown only happens if the user has explicitly configured the driver class name. If they are relying on it being auto-detected the shutdown doesn't happen. We should use `determineDriverClassName` instead. </body>
		<created>2016-03-02 10:04:01</created>
		<closed>2016-03-02 11:00:48</closed>
	</bug>
	<bug>
		<id>5283</id>
		<title>CLI with "--watch" accumulates state</title>
		<body>Some of the `ASTTransformation` (`AnnotatedNodeASTTransformation` in particular) accumulate state every time they are executed. This causes issues with "--watch" because the compiler is not re-instantiated for each execution of the script (probably it should be). </body>
		<created>2016-02-29 14:29:27</created>
		<closed>2016-02-29 16:49:53</closed>
	</bug>
	<bug>
		<id>5274</id>
		<title>Regression in spring-boot 1.3.3 on log properties</title>
		<body>Trying to upgrade from boot 1.3.2 to 1.3.3 the app would not start any more with the following exception:  ``` Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'PID' in string value "/tmp/cm.log-${PID}"          at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:174)         at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)         at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:204)         at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:178)         at org.springframework.core.env.AbstractPropertyResolver.resolveNestedPlaceholders(AbstractPropertyResolver.java:195)         at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:87)         at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:60)         at org.springframework.core.env.AbstractEnvironment.getProperty(AbstractEnvironment.java:531)         at org.springframework.boot.logging.LogFile.get(LogFile.java:116)         at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:250) ```  in the config/application.yml file I have set  &gt; logging: &gt;   file: /tmp/cm.log-${PID} </body>
		<created>2016-02-29 10:10:30</created>
		<closed>2016-02-29 13:02:00</closed>
	</bug>
	<bug>
		<id>5271</id>
		<title>Log4J2LoggingSystem.FILTER causes some exceptions to be lost from the log</title>
		<body>`Log4J2LoggingSystem.beforeInitialize` installs a log4j2 filter that denies all, and removes the filter in initialize method. if there is a multi profile yaml that contains a typo the application fails and the exception is not logged. In this case its  `ConfigFileApplicationListener` that fails while the filter is installed, if another listener will fail then its exception will be lost too.  to recreate run `sample.actuator.log4j2.SampleActuatorLog4J2Application` with this `application.yml`:  ```  --- spring:     profiles:          active: local  --- spring:     profiles: local a=test ``` </body>
		<created>2016-02-28 12:02:57</created>
		<closed>2016-07-18 21:36:16</closed>
	</bug>
	<bug>
		<id>5269</id>
		<title>Including devtools in Spring boot throws exception if DataSourceProperties is not initialized</title>
		<body>I have noticed this error in Spring Boot 1.3.3 Release only. This wasn't the problem in 1.3.2 and prior. Following is the exception trace that started occurring now. FYI I am not using Spring Boot's method of creating JDBC datasource due to custom encryption around credentials. Instead there is a Spring configuration class that manually composes the instance of HikariCP DataSource.  ```  2016-02-27 13:52:17,257 [ERROR] [Logger::o.s.b.SpringApplication] [Thread::restartedMain] - Application startup failed org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'inMemoryDatabaseShutdownExecutor' defined in class path resource [org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties]: No qualifying bean of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)     at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)     at com.myapp.MywebApplication.main(MywebApplication.java:23)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1373)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1119)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)     ... 24 common frames omitted  ``` </body>
		<created>2016-02-27 22:42:26</created>
		<closed>2016-02-29 11:42:44</closed>
	</bug>
	<bug>
		<id>5188</id>
		<title>Actuator BeansEndpoint does not list beans from parent</title>
		<body>We have a spring boot application with context hierarchy and where we add only the auto configuration classes we need. the beans endpoint does not list beans from parent, i had to override the beans endpoint with a custor one that looks like that:  ```java @ConfigurationProperties(prefix = "endpoints.beans", ignoreUnknownFields = false) public class TaboolaBeansEndpoint extends BeansEndpoint {      private final BELiveBeansView liveBeansView = new BELiveBeansView();      private final JsonParser parser = JsonParserFactory.getJsonParser();       @Override     public void setApplicationContext(ApplicationContext context) throws BeansException {         if (context.getEnvironment()                 .getProperty(LiveBeansView.MBEAN_DOMAIN_PROPERTY_NAME) == null) {             this.liveBeansView.setApplicationContext(context);         }     }      @Override     public List&lt;Object&gt; invoke() {         return this.parser.parseList(this.liveBeansView.getSnapshotAsJson());     }         public static final class BELiveBeansView extends LiveBeansView{          Set&lt;ConfigurableApplicationContext&gt; contexts = new HashSet&lt;ConfigurableApplicationContext&gt;();          @Override         public void setApplicationContext(ApplicationContext applicationContext) {             Assert.isTrue(applicationContext instanceof ConfigurableApplicationContext,                     "ApplicationContext does not implement ConfigurableApplicationContext");              if (applicationContext != null) {                 ApplicationContext current = applicationContext;                 while(current != null){                     Assert.isTrue(applicationContext instanceof ConfigurableApplicationContext,                             "ApplicationContext does not implement ConfigurableApplicationContext");                     contexts.add((ConfigurableApplicationContext) current);                     current = current.getParent();                 }             }         }           @Override         public String getSnapshotAsJson() {             return generateJson(contexts);         }     }  } ``` </body>
		<created>2016-02-22 11:43:06</created>
		<closed>2017-01-16 11:48:21</closed>
	</bug>
	<bug>
		<id>5181</id>
		<title>DefaultHazelcastInstanceConfiguration creates two instances when config location is specified</title>
		<body></body>
		<created>2016-02-19 10:55:57</created>
		<closed>2016-02-22 13:38:29</closed>
	</bug>
	<bug>
		<id>5153</id>
		<title>JolokiaAutoConfiguration breaks when spring-mvc is not present</title>
		<body>``` Caused by: java.lang.NoClassDefFoundError: org/springframework/web/servlet/mvc/ServletWrappingController ```  Presumably it should be added to `@ConditionalOnClass`? </body>
		<created>2016-02-15 23:05:22</created>
		<closed>2016-02-22 17:30:05</closed>
	</bug>
	<bug>
		<id>5151</id>
		<title>ThymeleafAutoConfiguration Forces Append Strategy for LayoutDialect</title>
		<body>The LayoutDialect bean is defined on line [154 of ThymeleafAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java#L149)  ``` java     @Configuration     @ConditionalOnClass(name = "nz.net.ultraq.thymeleaf.LayoutDialect")     protected static class ThymeleafWebLayoutConfiguration {          @Bean         public LayoutDialect layoutDialect() {             return new LayoutDialect();         }      } ```  The bean definition is not annotated with `@ConditionalOnMissingBean`, and as such cannot be overridden by defining a LayoutDialect bean elsewhere (which is the pattern used for the `DataAttributeDialect` and `SpringSecurityDialect` beans in the same auto configuration class). </body>
		<created>2016-02-15 17:56:23</created>
		<closed>2016-02-15 21:54:42</closed>
	</bug>
	<bug>
		<id>5123</id>
		<title>WebSocketMessagingAutoConfiguration changes the MessageConverter order and breaks JSON returned as a String</title>
		<body>`WebSocketMessageAutoConfiguration` adds a `MappingJackson2MessageConverter` that uses the auto-configured `ObjectMapper`. This custom converter goes before the default converters. This causes a problem when JSON is returned as a String as it's processed and changed by the `ObjectMapper`. Normally, the response would have been handled by `StringMessageConverter` and returned as-is.  See http://stackoverflow.com/questions/35318454/spring-boot-1-3-websocket-json-converter-produces-invalid-json </body>
		<created>2016-02-10 18:57:42</created>
		<closed>2016-02-11 14:27:18</closed>
	</bug>
	<bug>
		<id>5105</id>
		<title>Setting Actuator Endpoint Paths doesn't seem to work</title>
		<body>It looks like setting `endpoints.health.path` for MVC Endpoints does not work in Spring Boot 1.3.2.   As such it seems like Section 46.2 in the documentation - https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-monitoring.html - is misleading because it states that  `For example, to change the location of the /health endpoint to /ping/me you can set endpoints.health.path=/ping/me.`  In `MvcEndpoints` there seems to be some code to set paths for endpoints based on the `endpoints.[id].path` configuration but for `health`, `env`, and `metrics` these all seem to be skipped because they are in the `customTypes` array and are therefore not generic endpoints (as determined by `isGenericEndpoint`).  Equally setting the path on things not in the `customTypes` array causes the binder to throw an error on startup trying to bind `endpoints.[id].path` to the bean.   Am I misunderstanding how this should work or where configuration should be occurring? </body>
		<created>2016-02-08 16:09:40</created>
		<closed>2016-02-23 17:46:11</closed>
	</bug>
	<bug>
		<id>5103</id>
		<title>command line args are not sent to parent SpringApplicationBuilder.configureAsChildIfNecessary in 1.3.2</title>
		<body>Hi trying to upgrade from spring boot 1.2.6 to 1.3.2 our configuration files are not loaded. we change the name of properties files with spring.config.name as command line arg.  we are building a parent/child context hierarchy in our boot application and we rely heavily on that. our overall design is a bit different because we are actually migrating a legacy app to spring boot and there where many issues to consider, parent/child hierarchy solved a few issues for us.  the code that builds the boot application looks like that, many details removed for clarity:  `  ```      public ConfigurableApplicationContext setupSpring(String[] args){             SpringApplicationBuilder application = new SpringApplicationBuilder();             ConfigurableApplicationContext applicationContext = application             .sources(DataSourceConfig.class)             .web(false)              .child(FrameworkConfig.class)             .bannerMode(Banner.Mode.OFF)             .web(false)              .child(TrcConfiguration.class)             .bannerMode(Banner.Mode.OFF)             .run(args);     return applicationContext; } ```  `  our command line args contain --spring.config.name=someName  before 1.3.2 SpringApplicationBuilder.run used to call the parent SpringApplicationBuilder like: `initializers(new ParentContextApplicationContextInitializer(                     this.parent.run(args)));`  in 1.3.2 there is the new method configureAsChildIfNecessary that calls the parent but without passing the command line args. as a result, while initializing the parent contexts, the args are not added to the environment and ConfigFileApplicationListener.Loader#getSearchNames returns the default 'application' and our properties files are not loaded.  I opened an issue because couldn't find any clue about that. and it feels like sending args to configureAsChildIfNecessary and then to the parent  SpringApplicationBuilder.run will bring back the old behavior. I actually compiled spring-boot with this fix and it seems to solve my issue.  Thank you </body>
		<created>2016-02-07 20:40:06</created>
		<closed>2016-02-08 16:09:48</closed>
	</bug>
	<bug>
		<id>5099</id>
		<title>Can't have both SSL enabled and a custom SocketFactory</title>
		<body>Using `spring-boot 1.3.2.RELEASE` and `mongo-java-driver 3.2.1` and this code:  ``` @Bean public MongoClientOptions mongoClientOptions() {     return MongoClientOptions.builder().sslEnabled(true).socketFactory(mySF).build(); } ``` - If `spring.data.mongodb.uri` has `ssl=true`, then SSL is activated in `MongoClient` but `mySF` is not used, - if `spring.data.mongodb.uri` doesn't have `ssl=true`, then SSL is not activated in `MongoClient` but `mySF` is used.  This is because the logics in `MongoProperties.createMongoClient` and `MongoClientOptions.Builder.sslEnabled` fight each other:  - the `sslEnabled(true)` bit in my code above is basically a `no-op` because `createMongoClient` assumes that `ssl=true` option will be set in the URI, and thus doesn't try to carry the value set on the builder, - the `socketFactory(mySF)` is a `no-op` if `ssl=true` in the URI because `sslEnabled` wipes out the value in the builder with a default `SSLSocketFactory`.  So I'm kind of stuck between a rock and a hard place :sweat_smile: Any suggestion would be appreciated. </body>
		<created>2016-02-06 01:33:16</created>
		<closed>2016-06-17 12:35:03</closed>
	</bug>
	<bug>
		<id>5089</id>
		<title>Modify WebRequestTraceFilter to only read request parameters when they're included in the trace</title>
		<body>I have a servlet that reads the HTTP POST request entity using _HttpServletRequest.getInputStream()_.  In Spring Boot 1.2.x, this works fine.  When I try to upgrade to Spring Boot 1.3.x, the _InputStream_ is already empty. I narrowed the cause down to changes made to _WebRequestTraceFilter_ in Spring Boot 1.3.  _WebRequestTraceFilter_ calls _HttpServletRequest.getParameterMap()_ which causes the request entity to be unavailable using the _HttpServletRequest.getInputStream()_ method.  Spring Boot allows configuration of what properties are recorded using the _management.trace.include_ property. By default, request parameters are excluded.  However, the _WebRequestTraceFilter_ always calls _HttpServletRequest.getParameterMap()_ even if request parameters are not included in the trace.   I think a workaround is to only call _HttpServletRequest.getParameterMap()_ **if** the filter is configured to include request parameters.  For example, in _WebRequestTraceFilter_, replace:  ` add(trace, Include.PARAMETERS, "parameters", request.getParameterMap()); `   with:  ``` if(isIncluded(TraceProperties.Include.PARAMETERS)) {     trace.put("parameters", request.getParameterMap()); }    ```  A workaround is to add a filter that executes before _WebRequestTraceFilter_ and caches the HTTP POST request entity.  My servlet than reads this cached value. </body>
		<created>2016-02-04 20:01:44</created>
		<closed>2016-02-12 10:35:01</closed>
	</bug>
	<bug>
		<id>5073</id>
		<title>Logging-related System properties are not set</title>
		<body>The [documentation claims](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-custom-log-levels) that a number of system properties are set based on properties in the environment. In reality, that's not the case. This method:  ``` java @PostConstruct public void test() {     System.out.println(System.getProperty("CONSOLE_LOG_PATTERN"));     System.out.println(System.getProperty("FILE_LOG_PATTERN"));     System.out.println(System.getProperty("LOG_EXCEPTION_CONVERSION_WORD"));     System.out.println(System.getProperty("LOG_FILE"));     System.out.println(System.getProperty("LOG_LEVEL_PATTERN"));     System.out.println(System.getProperty("LOG_PATH"));     System.out.println(System.getProperty("PID")); } ```  Produces this output:  ``` null null %wEx null null null 72125 ```  This causes problem when trying to reuse Boot's XML-based Logback configuration (by including `base.xml`, for example) as properties like `logging.pattern.console` have no effect. </body>
		<created>2016-02-02 18:05:30</created>
		<closed>2016-02-11 18:01:26</closed>
	</bug>
	<bug>
		<id>5021</id>
		<title>spring-boot-devtools: tunneled debugging exhausts the application</title>
		<body>Spring boot app with spring-boot-devtools starts to throw uncontrollable exceptions when attaching with org.springframework.boot.devtools.RemoteSpringApplication and using the tunneled debugging. I understand that the debugging is not possible possible if I do not start the application without any debugging flags, but it is very inconvenient for the application to crash and exhaust the JVM if I connect to the "tunneled debug port". Especially if the application is running e.g. inside Docker.  **Steps to reproduce with the spring-boot-sample-devtools project**: - Start the application from command line:  ``` git clone https://github.com/spring-projects/spring-boot.git &amp;&amp; cd spring-boot/spring-boot-samples/spring-boot-sample-devtools mvn package java -jar target/spring-boot-sample-devtools-*.BUILD-SNAPSHOT.jar ``` - connect with org.springframework.boot.devtools.RemoteSpringApplication - connect with remote debug to the tunneled port 8000  After this the application starts spanning this error message in an uncontrollable manner exhausting all resources:  ``` 2016-01-24 20:59:31.442 ERROR 14178 --- [nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception   [86/1382]  java.lang.IllegalStateException: Remote debug is not running         at org.springframework.util.Assert.state(Assert.java:392) ~[spring-core-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]         at org.springframework.boot.devtools.tunnel.server.RemoteDebugPortProvider.getPort(RemoteDebugPortProvider.java:38) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.tunnel.server.SocketTargetServerConnection.open(SocketTargetServerConnection.java:57) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.tunnel.server.HttpTunnelServer.getServerThread(HttpTunnelServer.java:166) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.tunnel.server.HttpTunnelServer.handle(HttpTunnelServer.java:150) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.tunnel.server.HttpTunnelServer.handle(HttpTunnelServer.java:140) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.tunnel.server.HttpTunnelServerHandler.handle(HttpTunnelServerHandler.java:48) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.remote.server.Dispatcher.handle(Dispatcher.java:78) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.remote.server.Dispatcher.handle(Dispatcher.java:65) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.remote.server.DispatcherFilter.doFilter(DispatcherFilter.java:72) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.springframework.boot.devtools.remote.server.DispatcherFilter.doFilter(DispatcherFilter.java:61) ~[spring-boot-devtools-1.3.3.BUILD-SNAPSHOT.jar!/:1.3.3.BUILD-SNAPSHOT]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:521) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1096) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:674) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_66]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_66]         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.30.jar!/:8.0.30]         at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66] ```  Ubuntu 14.04.3 LTS java version "1.8.0_66" </body>
		<created>2016-01-24 20:04:05</created>
		<closed>2016-02-12 13:18:14</closed>
	</bug>
	<bug>
		<id>5007</id>
		<title>/docs actuator not found when endpoints.enabled:false and endpoints.docs.enabled: true</title>
		<body>Hi   I'm facing an issue about /docs endpoint  If i disabled all endpoints by default and enable only docs endpoints:  ``` yaml endpoints:  enabled: false # par defaut desactive  docs:    enabled: true ```  The application returns 404 where if I enable all by default it works. </body>
		<created>2016-01-22 12:19:23</created>
		<closed>2016-02-24 12:38:28</closed>
	</bug>
	<bug>
		<id>4985</id>
		<title>Opting out of using start-stop-daemon doesn't work</title>
		<body>We tried to add it in 1.3.1, but I broke it in https://github.com/spring-projects/spring-boot/commit/5a1ee6ebe8569884fa78383ae5cf298cb978067d which was also in 1.3.1. </body>
		<created>2016-01-21 08:13:34</created>
		<closed>2016-01-21 15:03:10</closed>
	</bug>
	<bug>
		<id>4980</id>
		<title>Error deploying spring boot app in tomcat8 that does jndi lookup for a datasource.  Error creating bean with name 'objectMapper': Requested bean is currently in creation</title>
		<body>``` Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.jmx.export.MBeanExporter org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration.mbeanExporter; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.fasterxml.jackson.databind.ObjectMapper org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.objectMapper; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'objectMapper': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:573) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) ~[spring-beans-4.2.3.RELEASE.jar:na]     ... 271 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.fasterxml.jackson.databind.ObjectMapper org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.objectMapper; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'objectMapper': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545) ~[spring-beans-4.2.3.RELEASE.jar:na]     ... 273 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.fasterxml.jackson.databind.ObjectMapper org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration.objectMapper; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'objectMapper': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:573) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) ~[spring-beans-4.2.3.RELEASE.jar:na]     ... 293 common frames omitted Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'objectMapper': Requested bean is currently in creation: Is there an unresolvable circular reference?     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:347) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.3.RELEASE.jar:na]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545) ~[spring-beans-4.2.3.RELEASE.jar:na]     ... 295 common frames omitted ``` </body>
		<created>2016-01-20 22:50:16</created>
		<closed>2016-02-22 16:07:57</closed>
	</bug>
	<bug>
		<id>4978</id>
		<title>executable property missing from bootRepackage gradle task</title>
		<body>According to the documentation at http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-gradle-repackage-configuration, the bootRepackage task has a property named `executable`. This is not the case. The `executable` property currently only exists on the parent `springBoot` configuration. </body>
		<created>2016-01-20 16:05:54</created>
		<closed>2016-01-21 17:04:45</closed>
	</bug>
	<bug>
		<id>4967</id>
		<title>org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.apache.catalina.core.ApplicationContextFacade]</title>
		<body>## usage  i deploy spring boot as a war to tomcat. ## application.properties  ``` server.port=8080 server.tomcat.uri-encoding=UTF-8 server.context-path=/gy-ht  multipart.enabled=true multipart.max-file-size=100Mb  mysql.healthcheck.url=${sqlserver.healthcheck.url} mysql.healthcheck.username=${sqlserver.healthcheck.username} mysql.healthcheck.password=${sqlserver.healthcheck.password}  #velocity spring.velocity.properties.velocimacro.library=common/VM_global_library.vm spring.velocity.toolbox-config-location=toolbox.xml logging.level.org.apache.velocity=error spring.velocity.charset=UTF-8 spring.velocity.content-type=text/html spring.velocity.cache=true ``` ## log  ``` due to exception [Could not generate CGLIB subclass of class [class org.apache.catalina.core.ApplicationContextFacade]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null] org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class [class org.apache.catalina.core.ApplicationContextFacade]: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null     at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:206)     at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:152)     at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:96)     at org.springframework.boot.web.servlet.view.velocity.EmbeddedVelocityToolboxView.getToolboxConfigFileAwareServletContext(EmbeddedVelocityToolboxView.java:71)     at org.springframework.boot.web.servlet.view.velocity.EmbeddedVelocityToolboxView.setContextToolbox(EmbeddedVelocityToolboxView.java:60)     at org.springframework.boot.web.servlet.view.velocity.EmbeddedVelocityToolboxView.createVelocityContext(EmbeddedVelocityToolboxView.java:52)     at org.springframework.web.servlet.view.velocity.VelocityView.renderMergedTemplateModel(VelocityView.java:288)     at org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:167)     at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244)     at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:116)     at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:60)     at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:91)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:109)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)     at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:956)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:625)     at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2517)     at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2506)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null     at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237)     at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)     at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:317)     at org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:56)     at org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:202)     ... 53 more Caused by: java.lang.reflect.InvocationTargetException     at sun.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384)     at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219)     ... 57 more Caused by: java.lang.NoClassDefFoundError: org/springframework/aop/SpringProxy     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:800)     ... 62 more Caused by: java.lang.ClassNotFoundException: org.springframework.aop.SpringProxy     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     ... 64 more ``` </body>
		<created>2016-01-19 03:36:19</created>
		<closed>2016-01-19 10:37:48</closed>
	</bug>
	<bug>
		<id>4942</id>
		<title>java.lang.IllegalStateException: Unable to create XADataSource instance from 'org.mysql.jdbc.MySQLDataSource'</title>
		<body>``` yml spring:   data:     mongodb:       uri: ${MONGODB_URL:mongodb://mongo.cloud.acfun.tv:30000/test1}   rabbitmq:     host: rabbitmq     addresses: ${RABBITMQ_URL:amqp://acfun:3v9V0NmShY5U@mq.web.acfun.tv:5672}     virtual-host: /   datasource:     driver-class-name: com.mysql.jdbc.Driver     url: jdbc:mysql:replication://192.168.60.45:13306,192.168.60.45:23306/test     username: data     password: acfundata   jpa:     hibernate:       ddl-auto: validate       showSql: true ```  dependency  ``` java compile("org.springframework.boot:spring-boot-starter-data-jpa") compile("org.springframework.boot:spring-boot-starter-jta-atomikos") ``` </body>
		<created>2016-01-14 11:19:20</created>
		<closed>2016-01-14 15:58:12</closed>
	</bug>
	<bug>
		<id>4941</id>
		<title>Launch script may fail to stop app if it's started and stopped in very quick succession</title>
		<body>This fails intermittently:  ``` $ service testapp start &amp;&amp; service testapp stop Started [27252] Unable to kill process 27252 ```  A thread dump of the process after it has failed to stop reveals that there's no deadlock. The process simply hasn't shut down. A subsequent attempt to stop the service will succeed:  ``` $ service testapp stop Stopped [27252] ```  My suspicion is that the kill signal is sent before the JVM is in a state where it can correctly handle the signal so it's ignored.  This is an edge case (running start and stop in such quick succession is an unusual thing to do), but we could retry sending SIGTERM if the process hasn't exited after some period of time. </body>
		<created>2016-01-14 09:57:30</created>
		<closed>2016-01-14 10:39:25</closed>
	</bug>
	<bug>
		<id>4937</id>
		<title>Setting server.context-path breaks login without trailing slash</title>
		<body>This may be related to #4853 .  With server.context-path=/user set in application.properties, one could have a secured "/" and be able to login.  v1.3.1 breaks this behavior by preventing log in and automatically redirecting back to /.  If paths are secure with (secured / but open css resources):  ``` http.authorizeRequests()                 .antMatchers("/css/**").permitAll()                  .anyRequest().authenticated()                  .and().formLogin() ... ```  v1.3.0 this would work: enter:  http://localhost:8080/user redirect:  http://localhost:8080/user/login redirect:  http://localhost:8080/user/  In v1.3.1, you are redirected back to the login page: enter: http://localhost:8080/user redirect:  http://localhost:8080/user/login redirect:  http://localhost:8080/user/login  It appears that the http session is cleared.  A new session cookie is created, security context cleared, etc.  Now, in v1.3.1, if you access the URL with the trailing /, then it works as expected. enter: http://localhost:8080/user/ redirect:  http://localhost:8080/user/login redirect:  http://localhost:8080/user/  See my repo for working examples.  Use the "complete" module.  https://github.com/robertdale/gs-securing-web/tree/1.3.1-broken  https://github.com/robertdale/gs-securing-web/tree/1.3.0-working </body>
		<created>2016-01-13 22:59:39</created>
		<closed>2016-01-18 15:20:23</closed>
	</bug>
	<bug>
		<id>4926</id>
		<title>Default context ID for an app in Cloud Foundry doesn't work well with Spring Cloud</title>
		<body>Spring Cloud likes to give special meaning to `${spring.application.name}` and applications tend to address each other with that value, rather than their platform application name (per `cf push`). It makes perfect sense that the default is controlled by the developer, not the deployer, so we should probably re-think what we do in Boot.  Somewhat maddeningly, the opposite is true for the `${spring.application.index}` which is much better controlled by the platform than the developer in configuration. So, while it might be confusing at first sight, the correct defaults should be:  ``` private static final String NAME_PATTERN = "${spring.application.name:${vcap.application.name:${spring.config.name:application}}}"; private static final String INDEX_PATTERN = "${vcap.application.instance_index:${spring.application.index:${server.port:${PORT:null}}}}"; ``` </body>
		<created>2016-01-11 15:43:06</created>
		<closed>2016-01-22 00:04:40</closed>
	</bug>
	<bug>
		<id>4925</id>
		<title>Default launch script relies on which and it is not always installed</title>
		<body>`which` isn't installed by default in CentOS 5.11, for example. We should use `type` instead. </body>
		<created>2016-01-11 14:08:41</created>
		<closed>2016-01-13 13:28:45</closed>
	</bug>
	<bug>
		<id>4923</id>
		<title>Launch script may report service failed to start as PID file written by start-stop-daemon is empty for a brief period</title>
		<body>There's a race condition in start-stop-daemon where it will sometimes return before it's written the requested pid file. We worked around this in 1.3.1 by waiting for the file to appear before checking that the service had started. Unfortunately, this doesn't work 100% of the time on Ubuntu 14.04.3.  It would appear that start-stop-daemon creates the file and then writes the PID into it, i.e. for a brief period the file exists on disk but has no content. This causes the script to incorrectly believe that the service was launched and failed to start. We need to wait for the file to appear and for it to not be empty. </body>
		<created>2016-01-11 11:21:49</created>
		<closed>2016-01-13 13:28:45</closed>
	</bug>
	<bug>
		<id>4921</id>
		<title>Can't change html when using "spring-boot-starter-mustache" with Eclipse.</title>
		<body>I want to use SpringBoot, SpringDevtool, Mustache, Gradle, and Eclipse on Windows10. But not work. 1. I run as "Spring Boot app" at Eclipse, and Tomcat start. 2. I can change html in "src/main/templates" 3. I access "localhost:8080" by chrome browser. 4. I change html, then Eclipse error `The project was not built due to "Could not delete '/${projectname}/bin/templates'.". Fix the problem, then try refreshing this project and building it since it may be inconsistent` occurred, so "localhost:8080" return error.  Are SpringBoot and Mustache and Eclipse bad combination?  My build.gradle is ...  ``` apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'spring-boot'   sourceCompatibility = '1.8' targetCompatibility = '1.8'  repositories {     mavenCentral() }  buildscript {     repositories {         mavenCentral()     }     dependencies {         classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")     } }  dependencies {     compile 'org.springframework.boot:spring-boot-starter-web:1.3.1.RELEASE'     compile 'org.springframework.boot:spring-boot-starter-mustache:1.3.1.RELEASE' } ``` </body>
		<created>2016-01-10 14:29:34</created>
		<closed>2016-01-15 11:20:25</closed>
	</bug>
	<bug>
		<id>4919</id>
		<title>NCDFE from SecurityFilterAutoConfiguration</title>
		<body>Thanks for releasing Spring Boot 1.3! The cache autoconfiguration feature comes in handy.  While in the process to upgrade from Spring Boot 1.2.7 to 1.3.1, I ran into a `NoClassDefFoundException` from `SecurityFilterAutoConfiguration`.  This is the log output:  ``` 2016-01-08 22:14:54.814  WARN 10996 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityProperties' defined in class path resource [org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.security.SecurityProperties]: Factory method 'securityProperties' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/http/SessionCreationPolicy 2016-01-08 22:14:54.817  INFO 10996 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown 2016-01-08 22:14:54.832  INFO 10996 --- [           main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default' 2016-01-08 22:14:54.848  INFO 10996 --- [           main] o.apache.catalina.core.StandardService   : Stopping service Tomcat 2016-01-08 22:14:54.878 ERROR 10996 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityProperties' defined in class path resource [org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.security.SecurityProperties]: Factory method 'securityProperties' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/http/SessionCreationPolicy         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframeans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) ~[spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:764) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:357) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:305) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1124) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.SpringApplication.run(SpringApplication.java:1113) [spring-boot-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at nu.yona.server.AdminServiceApplication.main(AdminServiceApplication.java:50) [main/:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.security.SecurityProperties]: Factory method 'securityProperties' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/http/SessionCreationPolicy   t org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         ... 18 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/springframework/security/config/http/SessionCreationPolicy         at org.springframework.boot.autoconfigure.security.SecurityProperties.&lt;init&gt;(SecurityProperties.java:88) ~[spring-boot-autoconfigure-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration.securityProperties(SecurityFilterAutoConfiguration.java:72) ~[spring-boot-autoconfigure-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration$$EnhancerBySpringCGLIB$$37804ea.CGLIB$securityProperties$1(&lt;generated&gt;) ~[spring-boot-autoconfigure-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration$$EnhancerBySpringCGLIB$$37804ea$$FastClassBySpringCGLIB$$bf34b5e8.invoke(&lt;generated&gt;) ~[spring-boot-autoconfigure-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]         at org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration$$EnhancerBySpringCGLIB$$37804ea.securityProperties(&lt;generated&gt;) ~[spring-boot-autoconfigure-1.3.1.RELEASE.jar:1.3.1.RELEASE]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_65]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_65]         at sun.reflect.DelegatinAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_65]         at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_65]         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]         ... 19 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.security.config.http.SessionCreationPolicy         at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_65]         at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_65]         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_65]         at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_65]         ... 31 common frames omitted  2016-01-08 22:14:54.888  INFO 10996 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/C:/Users/Bert/workspace/yona-server/adminservice/build/classes/main/, file:/C:/Users/Bert/workspace/yona-server/adminservice/build/resources/main/, file:/C:/Users/Bert/workspace/yona-server/core/build/libs/Core-0.0.8-SNAPSHOT.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-data-jpa/1.3.1.RELEASE/2ab6101dff6b2a35dd7ee5ed1b904af96504d3f1/spring-boot-starter-data-jpa-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-hateoas/1.3.1.RELEASE/9810eb3cb1abdc3cf7f2e0edfb1d2ca505601363/spring-boot-starter-hateoas-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-web/1.3.1.RELEASE/dd3c0e6cdee57e591eabc95a33b16233547eec91/spring-boot-starter-web-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-swagger2/2.3.0/f4ddcfb77ad8fb40d647d65ba6e08784d6aba615/springfox-swagger2-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-s                                     wagger-ui/2.3.0/8dfc729962bc639e6001183b474a65e9d71b681f/springfox-swagger-ui-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.6.3/5c4fcae53dd82e2c549b8322d78c6ff47c94c8a8/jackson-databind-2.6.3.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/18.0/cce0823396aa693798f8882e64213b1772032b09/guava-18.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-tomcat/1.3.1.RELEASE/3c21bd7269af0df9b2d1b67581eec191e70faeb5/spring-boot-starter-tomcat-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hsqldb/hsqldb/2.3.3/d12d506194447dffb8a2b05dd2c50b0cdd73d9d1/hsqldb-2.3.3.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-web/4.0.3.RELEASE/5f0233d94ca53ac8710780b43791f633f970480a/spring-security-web-4.0.3.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context-support/4.2.4.RELEASE/428f5d6ab3eba5ddd0b89474379ccfe867a42cc1/spring-context-support-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.atteo/evo-inflector/1.2.1/b9cdd1e7dc20a222db0853dfb152ef349c7d0eed/evo-inflector-1.2.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-validator/commons-validator/1.4.1/2231238e391057a53f92bde5bbc588622c1956c3/commons-validator-1.4.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-lang/commons-lang/2.4/16313e02a793435009f1e458fa4af5d879f6fb11/commons-lang-2.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/javax.mail/mail/1.4.7/9add058589d5d85adeb625859bf2c5eeaaedf12d/mail-1.4.7.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.velocity/velocity/1.7/2ceb567b8f3f21118ecdec129fe1271dbc09aa7a/velocity-1.7.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.ldap/spring-ldap-core/2.0.4.RELEASE/f84822af651415f8ba263fa6c5c8cdd8989b53bb/spring-                                                                                                                                                                ldap-core-2.0.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.codehaus.groovy/groovy-all/2.4.4/b22748b6cf9a38c9777792175507a679043cdd64/groovy-all-2.4.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.codehaus.groovy.modules.http-builder/http-builder/0.7.1/a21771ae3da5ce9f5c4d7a60c1e716666aa2acf9/http-builder-0.7.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/1.3.1.RELEASE/622e02ce77b3bea202b596a6fa0c40525ec81e1c/spring-boot-starter-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-aop/1.3.1.RELEASE/898d3fe97caf7dd88b42357e1643318753b0cf4e/spring-boot-starter-aop-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-jdbc/1.3.1.RELEASE/6fdd3124a3aa9eaa4d4ac0adde03c734676e40bd/spring-boot-starter-jdbc-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-entitymanager/4.3.11.Final/27a119fcc2b91c50e5285dd11158fac2c38c9d1b/hibernate-entitymanager-4.3.11.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/javax.transaction/javax.transaction-api/1.2/d81aff979d603edd90dcd8db2abc1f4ce6479e3e/javax.transaction-api-1.2.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-jpa/1.9.2.RELEASE/6026f5ca41b1c7c368d99cdf5cf9bf8d737ecdb2/spring-data-jpa-1.9.2.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aspects/4.2.4.RELEASE/f8b7fe22a4a1be320c9148499437c6347c1701f1/spring-aspects-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.hateoas/spring-hateoas/0.19.0.RELEASE/77b3b15c301d2517356b76304a2670df33ef2e2c/spring-hateoas-0.19.0.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.plugin/spring-plugin-core/1.2.0.RELEASE/f380e7760032e7d929184f8ad8a33716b75c0657/spring-plugin-                                                                                                                                                                core-1.2.0.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-validation/1.3.1.RELEASE/47f424e3c7ed629b988b1976e52b662834a76856/spring-boot-starter-validation-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/4.2.4.RELEASE/d4bcc6f4d8b64d7af9b67bc17f0d5106dce97926/spring-web-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.2.4.RELEASE/cf4317be9c83b4c1c65ce2d3bb96673ac546030a/spring-webmvc-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.mapstruct/mapstruct/1.0.0.Final/794bb2c7d3dd69211deb22857d92fb4c5361be3f/mapstruct-1.0.0.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.swagger/swagger-annotations/1.5.4/2de9c10fdf1e3f97cfd1e54fb86b7b145c5c01a4/swagger-annotations-1.5.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.swagger/swagger-models/1.5.4/5bde7a5e91850f21eec61afd445187c9234338e9/swagger-models-1.5.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-spi/2.3.0/fd5f41eb0e0382d8b3dedb95685b54aa5b754e2d/springfox-spi-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-schema/2.3.0/2098d7068f73f33b4ad5d2f1417753eb6b1b45ca/springfox-schema-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-swagger-common/2.3.0/a1e73d197243902d28b488642b39526a7d9853a0/springfox-swagger-common-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-spring-web/2.3.0/9aa273e84ba25af81699562426fc5150b6615bc/springfox-spring-web-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.2.0/3df977abee5df39041e60c763840cd948581971/classmate-1.2.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.13/7fcf30c25b8f4a9379b9dad0d3f487b25272c026/slf4j-api-1.7.13.jar, file:/C:/Users/Bert/.gradle/caches/                                                                                                                                                                modules-2/files-2.1/org.springframework.plugin/spring-plugin-metadata/1.2.0.RELEASE/97223fc496b6cab31602eedbd4202aa4fff0d44f/spring-plugin-metadata-1.2.0.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.6.4/ecbd5ad4efa46c8e88522751a80841a49e81a34d/jackson-annotations-2.6.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.6.4/27d3a9f7bbdcf72d93c9b2da7017e39551bfa9fb/jackson-core-2.6.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-core/8.0.30/87b12667b258d0135f7cf4234030a5ccbb55193f/tomcat-embed-core-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-el/8.0.30/b97d5ff750126d7fdaf412aeec219306bd157e50/tomcat-embed-el-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-logging-juli/8.0.30/c19b5c37e1f67bf58f9726b438d5323411cd43c6/tomcat-embed-logging-juli-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-websocket/8.0.30/84cf6feff7ed4f73689b4fa076cc6ec33851e075/tomcat-embed-websocket-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.security/spring-security-core/4.0.3.RELEASE/9f420c5742ad063970c5d33f60680a1cee777aa5/spring-security-core-4.0.3.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/4.2.4.RELEASE/dc8e0874b53435f3e277d9da5aebd8b93cc7cf64/spring-beans-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/4.2.4.RELEASE/23cd0109e4eafc5629547e3680b0c4031e82efdd/spring-context-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/4.2.4.RELEASE/160ccd89230753                                                                                                                                                                d4f49477a967f5876b034d9745/spring-core-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/4.2.4.RELEASE/15b6f6d61bc68fe2cc6cbd63e2329601afb8b39/spring-expression-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils/1.9.2/7a87d845ad3a155297e8f67d9008f4c1e5656b71/commons-beanutils-1.9.2.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-digester/commons-digester/2.1/73a8001e7a54a255eef0f03521ec1805dc738ca0/commons-digester-2.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.2/4bfc12adfe4842bf07b657f0369c4cb522955686/commons-logging-1.2.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-collections/commons-collections/3.2.2/8ad72fe39fa8c91eaaf12aadb21e0c3661fe26d5/commons-collections-3.2.2.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/javax.activation/activation/1.1/e6cb541461c2834bdea3eb920f1884d1eb508b50/activation-1.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-tx/4.2.4.RELEASE/66e1a131263f5f9ba95943061b22ff2666930ca6/spring-tx-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.5.1/7e3cecc566df91338c6c67883b89ddd05a17db43/httpclient-4.5.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/net.sf.json-lib/json-lib/2.3/f35340c0a0380141f62c72b76c8fb4bfa638d8c1/json-lib-2.3-jdk15.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/net.sourceforge.nekohtml/nekohtml/1.9.22/4f54af68ecb345f2453fb6884672ad08414154e3/nekohtml-1.9.22.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/xml-resolver/xml-resolver/1.2/3d0f97750b3a03e0971831566067754ba4bfd68c/xml-resolver-1.2.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot/1.3.1.RELEASE/7ea554d1d14e180ee080abc3e7c19e316a700188/spring-boot-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/mod                                                                                                                                                                ules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.3.1.RELEASE/16ecb1f0b3ccbc8ecd52fa9de57a273d5a3eea00/spring-boot-autoconfigure-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-logging/1.3.1.RELEASE/ba9d2d5094d83cf40dab474d6526befb5ce85a74/spring-boot-starter-logging-1.3.1.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.yaml/snakeyaml/1.16/d64fb662c9e42789149f5078a62a22edda786c6a/snakeyaml-1.16.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/4.2.4.RELEASE/3329cf71b4bc49c9767ca4f0704ed7b773f29fba/spring-aop-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.aspectj/aspectjweaver/1.8.7/f753e78bbe484e58b3b4e5ce3cc1751e50d11f6c/aspectjweaver-1.8.7.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat/tomcat-jdbc/8.0.30/44765cbbe3ea864923c16f19e081522f8058a6a5/tomcat-jdbc-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-jdbc/4.2.4.RELEASE/7aa1c3c817b0a04796e6570a2c07ac23248c1ee0/spring-jdbc-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.3.0.Final/3616bb87707910296e2c195dc016287080bba5af/jboss-logging-3.3.0.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging-annotations/1.2.0.Beta1/2f437f37bb265d9f8f1392823dbca12d2bec06d6/jboss-logging-annotations-1.2.0.Beta1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-core/4.3.11.Final/536ac0021240d97db99c7d2983067cef1a6f3af5/hibernate-core-4.3.11.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/dom4j/dom4j/1.6.1/5d3ccc056b6f056dbf0dddfdf43894b9065a8f94/dom4j-1.6.1.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hibernate.common/hibernate-commons-annotations/4.0.5.Final/2a581b9edb8168e45060d8bad8b7f46712d2c52c/hibernate-commons-annotations-4.0.5.Final.jar, fi                                                                                                                                                                le:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hibernate.javax.persistence/hibernate-jpa-2.1-api/1.0.0.Final/5e731d961297e5a07290bfaf3db1fbc8bbbf405a/hibernate-jpa-2.1-api-1.0.0.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.18.1-GA/d9a09f7732226af26bf99f19e2cffe0ae219db5b/javassist-3.18.1-GA.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework.data/spring-data-commons/1.11.2.RELEASE/6422e6f06584244d846d6bc74e5f2c163701b89a/spring-data-commons-1.11.2.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.springframework/spring-orm/4.2.4.RELEASE/f8cc11443ea62a189c4574e54116465960c490eb/spring-orm-4.2.4.RELEASE.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.slf4j/jcl-over-slf4j/1.7.13/d78d2242e14e4182625152d225f76ae52b43491d/jcl-over-slf4j-1.7.13.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-validator/5.2.2.Final/990905cd9184450c5f3e929ab2566305e3a67fa1/hibernate-validator-5.2.2.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/io.springfox/springfox-core/2.3.0/32fe407471bd68a19614d495d3907e3a9a42189c/springfox-core-2.3.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.4.4/b31526a230871fbe285fbcbe2813f9c0839ae9b0/httpcore-4.4.4.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.9/9ce04e34240f674bc72680f8b843b1457383161a/commons-codec-1.9.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/net.sf.ezmorph/ezmorph/1.0.6/1e55d2a0253ea37745d33062852fd2c90027432/ezmorph-1.0.6.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/xerces/xercesImpl/2.11.0/9bb329db1cfc4e22462c9d6b43a8432f5850e92c/xercesImpl-2.11.0.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.1.3/d90276fff414f06cb375f2057f6778cd63c6082f/logback-classic-1.1.3.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.7.                                                                                                                                                                13/43759e986de5fec7045e35e9533e5ad2f6cd1b05/jul-to-slf4j-1.7.13.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.slf4j/log4j-over-slf4j/1.7.13/b5f4685073a6ffba6bf7e1d51e2b5fb83bdfa953/log4j-over-slf4j-1.7.13.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.apache.tomcat/tomcat-juli/8.0.30/48258c438c681d1322ccb15f01d58238d14c1274/tomcat-juli-8.0.30.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/antlr/antlr/2.7.7/83cd2cd674a217ade95a4bb83a8a14f351f48bd0/antlr-2.7.7.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/org.jboss/jandex/1.1.0.Final/e84a2122e76f0b6503be78094ddf2108057ac15f/jandex-1.1.0.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.1.0.Final/8613ae82954779d518631e05daa73a6a954817d5/validation-api-1.1.0.Final.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.1.3/e3c02049f2dbbc764681b40094ecf0dcbc99b157/logback-core-1.1.3.jar, file:/C:/Users/Bert/.gradle/caches/modules-2/files-2.1/xml-apis/xml-apis/1.4.01/3789d9fada2d3d458c4ba2de349d48780f381ee3/xml-apis-1.4.01.jar] :adminservice:bootRun FAILED ```  There are two ways to get rid of this issue: - Add `org.springframework.security:spring-security-config` to the runtime dependencies. This addresses the startup issue, but enables basic authentication, which is undesirable in our situation - Exclude `SecurityFilterAutoConfiguration` from autoconfiguration.  Can't you automatically exclude this autoconfiguration when the Spring Security Config is unavailable?  I noticed a similar issue in grails-plugins/grails-spring-security-core#401. I do not know whether [their fix](https://github.com/grails-plugins/grails-spring-security-core/commit/e2b2b11003fbc7365557885d14a63dcd70ee617e) could be applied to Spring Boot too. </body>
		<created>2016-01-09 13:13:07</created>
		<closed>2016-01-13 15:01:54</closed>
	</bug>
	<bug>
		<id>4912</id>
		<title>Fat jar jvm process will exit, when throw a RuntimeException</title>
		<body>``` java @SpringBootApplication public class AaaApplication {      public static void main(String[] args) throws InterruptedException {         Thread t = new Thread(new Runnable(){              @Override             public void run() {                 while(true){                     System.err.println("sleep");                     try {                         TimeUnit.SECONDS.sleep(1);                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                 }             }          });          t.setDaemon(false);         t.start();          TimeUnit.SECONDS.sleep(3);          throw new RuntimeException("RuntimeException");  //      SpringApplication.run(AaaApplication.class, args);     } } ```  A simple spring boot demo.   When run it in ide, the process will not exit.  When run it as a fat jar, the process will exit.  ``` java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.RuntimeException: RuntimeException     at com.example.AaaApplication.main(AaaApplication.java:35)     ... 6 more ```  The sleep thread is not daemon, why the process will exit? </body>
		<created>2016-01-08 12:54:02</created>
		<closed>2016-01-21 09:59:09</closed>
	</bug>
	<bug>
		<id>4911</id>
		<title>Spring's load-time weaving doesn't work with `PropertiesLauncher`</title>
		<body>Hello,   I've recently encountered a problem with loading a javaagentfile while using spring-boot zip-layout. The startup fails, because the LoadTimeWeaver is not specified. I started the same Application without zip-layout and it worked.  I created a minimal example, which encounters the same Problem. [https://github.com/FaboSc/Spring_boot](https://github.com/FaboSc/Spring_boot)  Am I doing something wrong here, or is there a problem? </body>
		<created>2016-01-08 12:42:07</created>
		<closed>2016-01-14 17:11:07</closed>
	</bug>
	<bug>
		<id>4871</id>
		<title>BackgroundPreinitializer can trigger java.util.ConcurrentModificationException in Logback</title>
		<body>The introduction of BackgroundPreinitializer in spring-boot 1.3 causes random errors in junit tests with logback because of this bug : http://jira.qos.ch/browse/LOGBACK-397  Example stacktrace :  ``` java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:249)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) Caused by: java.util.ConcurrentModificationException: null     at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)     at java.util.ArrayList$Itr.next(ArrayList.java:851)     at ch.qos.logback.classic.Logger.recursiveReset(Logger.java:344)     at ch.qos.logback.classic.Logger.recursiveReset(Logger.java:345)     at ch.qos.logback.classic.LoggerContext.reset(LoggerContext.java:213)     at ch.qos.logback.classic.LoggerContext.stop(LoggerContext.java:336)     at org.springframework.boot.logging.logback.LogbackLoggingSystem.stopAndReset(LogbackLoggingSystem.java:173)     at org.springframework.boot.logging.logback.LogbackLoggingSystem.loadDefaults(LogbackLoggingSystem.java:118)     at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithConventions(AbstractLoggingSystem.java:74)     at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:49)     at org.springframework.boot.logging.logback.LogbackLoggingSystem.initialize(LogbackLoggingSystem.java:106)     at org.springframework.boot.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:261)     at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:232)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:199)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:176)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:65)     at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:315)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:295)     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:249)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ```  The problem is that in the main thread LogbackLoggingSystem.stopAndReset() is being called while at the same time a background thread spawned by org.springframework.boot.autoconfigure.BackgroundPreinitializer creates a new Logger...  The LogBack issue has been opened for many years but is still unresolved. It was not actually problematic for me until spring boot 1.3 and its BackgroundPreinitializer ... Please provide a way of disabling this feature. </body>
		<created>2016-01-04 10:36:02</created>
		<closed>2016-01-20 21:57:04</closed>
	</bug>
	<bug>
		<id>4866</id>
		<title>RUN_ARGS in executable config not working anymore</title>
		<body>With SB 1.3.1.RELEASE, the RUN_ARGS of executable war is not taken into account. Here is the command which is launched  ``` shell + start-stop-daemon --start --quiet --chuid myapp --name myapp --make-pidfile --pidfile /var/run/myapp/myapp.pid --background --no-close --startas /usr/bin/java --chdir /usr/share/myapp/lib -- -Dsun.misc.URLClassPath.disableJarChecking=true -jar /usr/share/myapp/lib/myapp-0.0.1-SNAPSHOT.war '--spring.profiles.active=prod --logging.file=/var/log/myapp/myapp.log' ```  I think it fails because of the quotes that are surrounding the RUN_ARGS. It is a regression since it was working with 1.3.0.RELEASE (the quotes are not there with 1.3.0.RELEASE) Probably comes from 81a4763. </body>
		<created>2016-01-01 14:24:01</created>
		<closed>2016-01-18 11:29:13</closed>
	</bug>
	<bug>
		<id>4858</id>
		<title>SocialWebAutoConfiguration fails with Thymeleaf 3 as SpringSocialDialect is incompatible</title>
		<body>e.g.  ``` @Configuration @ConditionalOnClass(SpringTemplateEngine.class) protected static class SpringSocialThymeleafConfig {     // snip } ```  means you cannot go:  ``` @EnableAutoConfiguration(exclude={SpringSocialThymeleafConfig.class}) ```  You want to do this if you're using Thymleaf3 instead of Thymeleaf2 because SpringTemplateEngine.class does exist but one of the Beans created by SpringSocialThymleafConfig requires Thymeleaf2 so will throw an exception on instantiation. </body>
		<created>2015-12-29 15:30:22</created>
		<closed>2017-02-07 16:23:54</closed>
	</bug>
	<bug>
		<id>4853</id>
		<title>Error {too many redirects} when get to root actuator endpoint with management.context-path property</title>
		<body>I've got an infinite loop when I am trying to get to the root actuator endpoint with that configuration :  ``` management:  port: 8084  address: 127.0.0.1  context-path: /supervision ```  1/ http://localhost:8084/supervision is redirected to http://localhost:8084/supervision/ 2/ http://localhost:8084/supervision/  is redirected to http://localhost:8084/supervision  Partially due to my previous issue : #4575  I am using spring-boot 1.3.1. </body>
		<created>2015-12-28 21:05:43</created>
		<closed>2016-01-18 14:32:22</closed>
	</bug>
	<bug>
		<id>4846</id>
		<title>Java 6 and Tomcat 7.0.63+ throw NoClassDefFoundError</title>
		<body>Running a `spring-boot-starter-web` project with Java 6 and Tomcat 7.0.63+ (it works fine with Tomcat 7.0.62 and earlier) produces exception `java.lang.ClassNotFoundException: java.nio.charset.StandardCharsets`.  To reproduce, build a Spring Boot application with `spring-boot-starter-web` dependency and the following properties in pom.xml:  ``` &lt;java.version&gt;1.6&lt;/java.version&gt; &lt;tomcat.version&gt;7.0.63&lt;/tomcat.version&gt; ```  Then **run with Java 6**  Output:  ```    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v1.3.2.BUILD-SNAPSHOT)  2015-12-27 08:56:21.584  INFO 34281 --- [           main] com.example.DemoApplication              : Starting DemoApplication on wsdvirgm with PID 34281 (/Users/csdvirg/workspaces/sts-3.7/demo/target/classes started by csdvirg in /Users/csdvirg/workspaces/sts-3.7/demo) 2015-12-27 08:56:21.589  INFO 34281 --- [           main] com.example.DemoApplication              : No active profile set, falling back to default profiles: default 2015-12-27 08:56:21.664  INFO 34281 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f42731: startup date [Sun Dec 27 08:56:21 AST 2015]; root of context hierarchy 2015-12-27 08:56:22.363  INFO 34281 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2015-12-27 08:56:22.878  INFO 34281 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 7080 (http) 2015-12-27 08:56:22.888  INFO 34281 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2015-12-27 08:56:22.889  INFO 34281 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.63 2015-12-27 08:56:23.072  INFO 34281 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2015-12-27 08:56:23.072  INFO 34281 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1414 ms 2015-12-27 08:56:23.414  INFO 34281 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2015-12-27 08:56:23.416  INFO 34281 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-12-27 08:56:23.416  INFO 34281 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-12-27 08:56:23.416  INFO 34281 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'httpPutFormContentFilter' to: [/*] 2015-12-27 08:56:23.416  INFO 34281 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'requestContextFilter' to: [/*] 2015-12-27 08:56:23.435 ERROR 34281 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Exception sending context initialized event to listener instance of class org.apache.tomcat.websocket.server.WsContextListener  java.lang.NoClassDefFoundError: java/nio/charset/StandardCharsets     at org.apache.tomcat.websocket.WsWebSocketContainer.&lt;clinit&gt;(WsWebSocketContainer.java:109) ~[tomcat-embed-websocket-7.0.63.jar:7.0.63]     at org.apache.tomcat.websocket.server.WsSci.init(WsSci.java:154) ~[tomcat-embed-websocket-7.0.63.jar:7.0.63]     at org.apache.tomcat.websocket.server.WsContextListener.contextInitialized(WsContextListener.java:39) ~[tomcat-embed-websocket-7.0.63.jar:7.0.63]     at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5017) [tomcat-embed-core-7.0.63.jar:7.0.63]     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5531) [tomcat-embed-core-7.0.63.jar:7.0.63]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-7.0.63.jar:7.0.63]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1574) [tomcat-embed-core-7.0.63.jar:7.0.63]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1564) [tomcat-embed-core-7.0.63.jar:7.0.63]     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_65]     at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_65]     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) [na:1.6.0_65]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) [na:1.6.0_65]     at java.lang.Thread.run(Thread.java:695) [na:1.6.0_65] Caused by: java.lang.ClassNotFoundException: java.nio.charset.StandardCharsets     at java.net.URLClassLoader$1.run(URLClassLoader.java:202) ~[na:1.6.0_65]     at java.security.AccessController.doPrivileged(Native Method) ~[na:1.6.0_65]     at java.net.URLClassLoader.findClass(URLClassLoader.java:190) ~[na:1.6.0_65]     at java.lang.ClassLoader.loadClass(ClassLoader.java:306) ~[na:1.6.0_65]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301) ~[na:1.6.0_65]     at java.lang.ClassLoader.loadClass(ClassLoader.java:247) ~[na:1.6.0_65]     ... 13 common frames omitted  2015-12-27 08:56:23.435 ERROR 34281 --- [ost-startStop-1] o.apache.catalina.core.StandardContext   : One or more listeners failed to start. Full details will be found in the appropriate container log file 2015-12-27 08:56:23.436 ERROR 34281 --- [ost-startStop-1] o.apache.catalina.core.StandardContext   : Context [] startup failed due to previous errors 2015-12-27 08:56:23.605  INFO 34281 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f42731: startup date [Sun Dec 27 08:56:21 AST 2015]; root of context hierarchy 2015-12-27 08:56:23.673  INFO 34281 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2015-12-27 08:56:23.674  INFO 34281 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) 2015-12-27 08:56:23.699  INFO 34281 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-12-27 08:56:23.699  INFO 34281 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-12-27 08:56:23.761  INFO 34281 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-12-27 08:56:23.925  INFO 34281 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2015-12-27 08:56:24.002  INFO 34281 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 7080 (http) 2015-12-27 08:56:24.009  INFO 34281 --- [           main] com.example.DemoApplication              : Started DemoApplication in 2.873 seconds (JVM running for 3.463) ``` </body>
		<created>2015-12-27 06:03:24</created>
		<closed>2015-12-28 12:51:26</closed>
	</bug>
	<bug>
		<id>4839</id>
		<title>-XX:-UseSplitVerifier and Tomcat 7 cause NoClassDefFoundError</title>
		<body>I had `JAVA_TOOL_OPTIONS='-XX:-UseSplitVerifier'` set for some unrelated reason (third party JAR broken by their so-called "obfuscation", which causes it to break without this option). We also have to use Java 7 and Tomcat 7. The problem is that when both are used together, I get exception `java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage: org.apache.tomcat.util.descriptor.web.ErrorPage` when I try to run the Spring Boot application.  To reproduce, create a new Spring Boot application and set these properties in pom.xml:  ``` &lt;java.version&gt;1.7&lt;/java.version&gt; &lt;tomcat.version&gt;7.0.67&lt;/tomcat.version&gt; ```  Then run the application with **Java 7**  ``` java -XX:-UseSplitVerifier -jar target/demo-0.0.1-SNAPSHOT.jar ``` # Important: The bug only happens with Java 7 because -UseSplitVerifier was removed in 8.  Output:  ```   .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.3.1.RELEASE)  2015-12-24 11:51:37.654  INFO 48707 --- [           main] com.example.DemoApplication              : Starting DemoApplication v0.0.1-SNAPSHOT on wsdvirgm with PID 48707 (/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar started by csdvirg in /Users/csdvirg/workspaces/sts-3.7/demo) 2015-12-24 11:51:37.657  INFO 48707 --- [           main] com.example.DemoApplication              : No active profile set, falling back to default profiles: default 2015-12-24 11:51:37.786  INFO 48707 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@5a2a7673: startup date [Thu Dec 24 11:51:37 AST 2015]; root of context hierarchy 2015-12-24 11:51:38.892  INFO 48707 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2015-12-24 11:51:39.615  WARN 48707 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage 2015-12-24 11:51:39.621 ERROR 48707 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532) ~[spring-context-4.2.4.RELEASE.jar!/:4.2.4.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:764) [spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:357) [spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:305) [spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1124) [spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1113) [spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at com.example.DemoApplication.main(DemoApplication.java:10) [demo-0.0.1-SNAPSHOT.jar!/:0.0.1-SNAPSHOT]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_80]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_80]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_80]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_80]     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53) [demo-0.0.1-SNAPSHOT.jar!/:0.0.1-SNAPSHOT]     at java.lang.Thread.run(Thread.java:745) [na:1.7.0_80] Caused by: java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.configureContext(TomcatEmbeddedServletContainerFactory.java:393) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.prepareContext(TomcatEmbeddedServletContainerFactory.java:203) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:167) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:160) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130) ~[spring-boot-1.3.1.RELEASE.jar!/:1.3.1.RELEASE]     ... 14 common frames omitted Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.descriptor.web.ErrorPage     at java.net.URLClassLoader$1.run(URLClassLoader.java:366) ~[na:1.7.0_80]     at java.net.URLClassLoader$1.run(URLClassLoader.java:355) ~[na:1.7.0_80]     at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_80]     at java.net.URLClassLoader.findClass(URLClassLoader.java:354) ~[na:1.7.0_80]     at java.lang.ClassLoader.loadClass(ClassLoader.java:425) ~[na:1.7.0_80]     at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:178) ~[demo-0.0.1-SNAPSHOT.jar!/:0.0.1-SNAPSHOT]     at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142) ~[demo-0.0.1-SNAPSHOT.jar!/:0.0.1-SNAPSHOT]     at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ~[na:1.7.0_80]     ... 19 common frames omitted  2015-12-24 11:51:39.623  INFO 48707 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-starter-web-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-starter-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-autoconfigure-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-starter-logging-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/logback-classic-1.1.3.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/logback-core-1.1.3.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/slf4j-api-1.7.13.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jcl-over-slf4j-1.7.13.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jul-to-slf4j-1.7.13.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/log4j-over-slf4j-1.7.13.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/snakeyaml-1.16.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-starter-tomcat-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/tomcat-embed-core-7.0.67.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/tomcat-embed-el-7.0.67.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/tomcat-embed-logging-juli-7.0.67.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/tomcat-embed-websocket-7.0.67.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-boot-starter-validation-1.3.1.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/hibernate-validator-5.2.2.Final.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/validation-api-1.1.0.Final.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jboss-logging-3.3.0.Final.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/classmate-1.1.0.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jackson-databind-2.6.4.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jackson-annotations-2.6.4.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/jackson-core-2.6.4.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-web-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-aop-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/aopalliance-1.0.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-beans-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-context-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-webmvc-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-expression-4.2.4.RELEASE.jar!/, jar:file:/Users/csdvirg/workspaces/sts-3.7/demo/target/demo-0.0.1-SNAPSHOT.jar!/lib/spring-core-4.2.4.RELEASE.jar!/] java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:764)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:357)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:305)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1124)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1113)     at com.example.DemoApplication.main(DemoApplication.java:10)     ... 6 more Caused by: java.lang.NoClassDefFoundError: org/apache/tomcat/util/descriptor/web/ErrorPage     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.configureContext(TomcatEmbeddedServletContainerFactory.java:393)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.prepareContext(TomcatEmbeddedServletContainerFactory.java:203)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory.getEmbeddedServletContainer(TomcatEmbeddedServletContainerFactory.java:167)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:160)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130)     ... 14 more Caused by: java.lang.ClassNotFoundException: org.apache.tomcat.util.descriptor.web.ErrorPage     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:178)     at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     ... 19 more ``` </body>
		<created>2015-12-24 08:53:41</created>
		<closed>2015-12-28 13:37:08</closed>
	</bug>
	<bug>
		<id>4828</id>
		<title>Fully define precedence of properties when using SpringApplicationContextLoader</title>
		<body>Hi,  Related to #2198 - while `@TestPropertySource` annotations are now providing environment variables from config files, they are not being applied in the correct order of precedence.  My understanding is that the external environment and config files are the lowest priority, followed by property source, test property source annotations, and lastly followed by test annotations (`@IntegrationTest`).  Here is a test showing the current behaviors:  ``` java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = { SpringBootBugTest.Config.class, SpringBootBugTest.MoreConfig.class })  // Config is the same as tests in #2198 @WebAppConfiguration @TestPropertySource(locations  = "classpath:/test.properties", // // From config file:  "value1=123", "value2=123"      properties = {                  "value2=456",               "value4=456", "value5=456" }) @IntegrationTest({    "value1=789",               "value3=789",               "value5=789" }) //                    ------------  ------------  ------------  ------------  ------------ // Expected results:   value1=789    value2=456    value3=789    value4=456    value5=789 public class SpringBootBugTest {      @Autowired      private SpringBootBugTest.MoreConfig moreConfig;      @Test     public void value1fromConfigIsOverridenByIntegrationTest() {         assertThat(moreConfig.getValue1(), equalTo("789"));     }      @Test     public void value2fromConfigIsOverridenByTestPropertySource() {         assertThat(moreConfig.getValue2(), equalTo("456"));     }      @Test     public void value3isFromIntegrationTest() {         assertThat(moreConfig.getValue3(), equalTo("789"));     }      @Test     public void value4isFromTestPropertySource() {         assertThat(moreConfig.getValue4(), equalTo("456"));     }      @Test     public void value5fromIntegrationTestIsOverridingTestPropertySource() {         assertThat(moreConfig.getValue5(), equalTo("789"));     }      public static class MoreConfig {          @Value("${value1}")         private String value1;          @Value("${value2}")         private String value2;          @Value("${value3}")         private String value3;          @Value("${value4}")         private String value4;          @Value("${value5}")         private String value5;          public String getValue1() {             return value1;         }          public String getValue2() {             return value2;         }          public String getValue3() {             return value3;         }          public String getValue4() {             return value4;         }          public String getValue5() {             return value5;         }     } } ```  Results: 1. 123 from config file is returned - expected 789 from @IntegrationTest 2. 123 from config file is returned - expected 456 from @TestPropertySource 3. Passes - 789 from @IntegrationTest is returned 4. Passes - 456 from @TestPropertySource is returned 5. Passes - 789 from @IntegrationTest is returned  It seems that [PropertySourceLocationsInitializer.initialize](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java#L263) that was added in the earlier commit is being called after `loadContext`. Is there a reason we are not loading the config file environment variables there, in `loadContext`, before checking the inlined properties? </body>
		<created>2015-12-22 16:23:01</created>
		<closed>2016-04-07 10:34:46</closed>
	</bug>
	<bug>
		<id>4826</id>
		<title>Spring boot in Grails is trying is read my maven settings.xml and failing to create app</title>
		<body>Issue ref: https://github.com/grails/grails-core/issues/9487  Grails 3.1.0.M3 was reading my `settings.xml` present in `\&lt;user.home\&gt;/.m2/settings.xml`  Stacktrace:  ``` | Error Error occurred running Grails CLI: Failed to determine active profiles:     Failed to determine activation for profile snc-release at null  (NOTE: Stack trace has been filtered. Use --verbose to see entire trace.) java.lang.IllegalStateException: Failed to determine active profiles:     Failed to determine activation for profile snc-release at null      at org.springframework.boot.cli.compiler.maven.MavenSettings.determineActiveProfiles(MavenSettings.java:134)     at org.springframework.boot.cli.compiler.maven.MavenSettings.&lt;init&gt;(MavenSettings.java:87)     at org.springframework.boot.cli.compiler.maven.MavenSettingsReader.readSettings(MavenSettingsReader.java:64)     at org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfiguration.getSettings(SettingsXmlRepositorySystemSessionAutoConfiguration.java:47)     at org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfiguration.apply(SettingsXmlRepositorySystemSessionAutoConfiguration.java:38)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngineFactory.create(AetherGrapeEngineFactory.java:59)     at org.grails.cli.profile.repository.MavenProfileRepository.&lt;init&gt;(MavenProfileRepository.groovy:51)     at org.grails.cli.GrailsCli.createMavenProfileRepository(GrailsCli.groovy:327)     at org.grails.cli.GrailsCli.execute(GrailsCli.groovy:236)     at org.grails.cli.GrailsCli.main(GrailsCli.groovy:162) | Error Error occurred running Grails CLI: Failed to determine active profiles:     Failed to determine activation for profile snc-release at null ```  `~/.m2/settings.xml`: I'm having:  ``` &lt;profile&gt;     &lt;id&gt;snc-release&lt;/id&gt;     &lt;activation&gt;         &lt;file&gt;             &lt;exists&gt;${user.home}/.m2/some_dumy_file&lt;/exists&gt;         &lt;/file&gt;     &lt;/activation&gt;      &lt;repositories&gt;         &lt;repository&gt;             &lt;!-- A repo to be activated --&gt;         &lt;/repository&gt;     &lt;/repositories&gt; &lt;/profile&gt; ```  Workaround: Delete my old maven `~/.m2/settings.xml` Bad workaround but only solution to me right now. </body>
		<created>2015-12-22 04:54:51</created>
		<closed>2016-01-18 13:23:02</closed>
	</bug>
	<bug>
		<id>4820</id>
		<title>Service script no longer working with Spring Boot 1.3.1</title>
		<body>See my SO question: http://stackoverflow.com/questions/34392205/syntax-error-near-unexpected-token-when-running-spring-boot-jar-as-service  When tested with Spring Boot 1.3.0, it does work. </body>
		<created>2015-12-21 10:53:17</created>
		<closed>2015-12-24 10:45:49</closed>
	</bug>
	<bug>
		<id>4811</id>
		<title>MessageSourceAutoConfiguration fails to read messages.properties when running an executable jar with name starting with "spring-boot-"</title>
		<body>When MessageSourceAutoConfiguration looks for messages.properties it tries to load all classpath resources using [`MessageSourceAutoConfiguration$SkipPatternPathMatchingResourcePatternResolver.doFindAllClassPathResources(String)`](https://github.com/spring-projects/spring-boot/blob/877e6e034ce58cfa84a237579891a94e197c3b12/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java#L223). In my case I'm working on an application called [spring-boot-heroku-demo](https://github.com/britter/spring-boot-heroku-demo), so it will also filter the root classpath resource `URL [jar:file:/Users/bene/workspace/projects/spring-boot-heroku-demo/target/spring-boot-heroku-demo-0.0.1-SNAPSHOT.jar!/]` because file name returned by that resource is "spring-boot-heroku-demo-0.0.1-SNAPSHOT.jar!/" which starts with "spring-boot". It works when running the application from an IDE for example, because in this case resources will be loaded from the file system and not from the jar, so a completely different code path is taken to find the messages.properties file.  Possible solutions: - Document that "spring-boot-" is a reserved project prefix which must not be used. - List all spring-boot projects with full name in the [`SKIPPED`](https://github.com/spring-projects/spring-boot/blob/877e6e034ce58cfa84a237579891a94e197c3b12/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java#L200-L208) array in `MessageSourceAutoConfiguration$SkipPatternPathMatchingResourcePatternResolver` - Match against the full path of each resource being checked - spring boot project jars will always be included in the lib/ directory. - None of the above - the described use case is unlikely to affect any other users.  I'm happy to contribute a patch. Please let me know which solution you'd like to use. </body>
		<created>2015-12-18 22:02:03</created>
		<closed>2016-01-21 23:16:19</closed>
	</bug>
	<bug>
		<id>4808</id>
		<title>Log4jLoggingSystem does not treat an empty logger name the same as the other systems</title>
		<body>Logback at least has a contract where null (or empty) gets you the root logger without having to know its name, which is quite useful. It would be sensible if all logging systems had that behaviour. </body>
		<created>2015-12-18 14:43:14</created>
		<closed>2015-12-18 14:47:04</closed>
	</bug>
	<bug>
		<id>4793</id>
		<title>Undertow doesn't shut down properly when context is closed</title>
		<body>Creating the `AccessLogHandler` creates a new XNIO worker that's never stopped so its thread are left running. They're non-daemon threads so they prevent the JVM from exiting. </body>
		<created>2015-12-16 22:04:27</created>
		<closed>2015-12-17 11:31:26</closed>
	</bug>
	<bug>
		<id>4775</id>
		<title>ignoreUnknownFields=false causes ConfigurationProperties from SystemEnvironment not to be bound</title>
		<body>I have a `@ConfigurationProperties(prefix="test.env", ignoreUnkownFields=false)` with property `foo-bar` and the environment variable `TEST_ENV_FOO_BAR` will not be bound by the relaxed binding when running the application with `env TEST_ENV_FOO_BAR="Hallo" mvn clean spring-boot:run`.  All of configuring by application.yml, changing the `ignoreUnkownFields` to `true` or changing the `prefix` to `test` works.  sample code  ``` java @SpringBootApplication @EnableConfigurationProperties({ TestProps.class }) @Configuration public class DemoApplication {     public static void main(String[] args) {         SpringApplication.run(DemoApplication.class, args).getBean("runner", Runnable.class).run();     }      @Autowired     private TestProps test;      @Bean     public Runnable runner() {         return new Runnable() {             @Override             public void run() {                 System.out.println(test.getFooBar());             }         };     }      @ConfigurationProperties(prefix = "test.env", ignoreUnknownFields = false)     public static class TestProps {         private String fooBar;          public String getFooBar() {             return fooBar;         }         public void setFooBar(String fooBar) {             this.fooBar = fooBar;         }     } } ``` </body>
		<created>2015-12-14 19:04:02</created>
		<closed>2015-12-15 13:19:37</closed>
	</bug>
	<bug>
		<id>4769</id>
		<title>Spring Boot Undertow Compression not work</title>
		<body>When use Undertow with following configuration, the response is not compressed  ``` server:   port: 8888   compression:     enabled: true     min-response-size: 1024     mime-types:       - application/json       - application/xml       - application/xhtml+xml       - text/html       - text/xml       - text/plain ``` </body>
		<created>2015-12-12 16:33:08</created>
		<closed>2015-12-14 11:45:36</closed>
	</bug>
	<bug>
		<id>4765</id>
		<title>Undertow test failures on Windows</title>
		<body>Using Oracle JDK 1.8.0_65, `java.io.tmpdir` may be set as a tilde-compressed Windows pathname (remarkably, `user.home` is not compressed in this manner). Meanwhile, Undertow uses `File#getCanonicalFile()` to determine whether a resource has been requested using the proper case. The upshot is that when the server is in case-sensitive mode, it rejects requests for resources under `java.io.tmpdir`. This causes numerous failures in `org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactoryTests`. Since `org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory` includes code that defaults to creating a resource root via `java.io.File#createTempFile()` it would seem that there is a real threat that spring-boot users could be affected by this. Arguably Undertow's case-sensitivity checks should be relaxed to only checking the portion of the path that was actually requested by the user, but it's probably fairly rare that someone sets up an Undertow server with other than the canonical path set as the resource root. </body>
		<created>2015-12-11 22:01:52</created>
		<closed>2015-12-15 14:56:49</closed>
	</bug>
	<bug>
		<id>4763</id>
		<title>whitelabel error page vulnerability</title>
		<body>Hello. There is an SPEL injection problem (would consider it vulnerability) with whitelabel error page. If encountering an error message that shows the used value and the used value contains SPEL expression, it will be evaluated server side. The recommendation is to disable the whitelabel, but I suppose this should still get fixed. Example: Suppose you have a restful service that expects a parameter `exactMatch=true/false` implemented on Spring Boot framework. By default, if inputs are not validated and the whitelabel page is enabled, entering an expression e.g. `exactMatch=test${SPEL}test` SPEL would get executed if requested over `text/html`, since the error message includes the original value, e.g. `java.lang.IllegalArgumentException: Invalid boolean value test${SPEL}test` </body>
		<created>2015-12-11 18:11:29</created>
		<closed>2015-12-14 18:58:48</closed>
	</bug>
	<bug>
		<id>4758</id>
		<title>NPE fails spring-boot-maven-plugin jar-custom-launcher IT</title>
		<body>https://github.com/spring-projects/spring-boot/commit/8e0b8750c05e788c76bcf1298e2856adc53b4ce6 </body>
		<created>2015-12-11 17:43:49</created>
		<closed>2015-12-11 20:00:50</closed>
	</bug>
	<bug>
		<id>4748</id>
		<title>Shutdown hangs when using ActiveMQ with a pooled connection factory</title>
		<body>If you use the shutdown endpoint (HTTP or JMX) to shut down a context that contains a pooled connection factory, the shutdown will hang as the pool isn't stopped and its non-daemon threads keep the JVM running  See: http://stackoverflow.com/questions/34187972/springboot-gets-stuck-shutting-down-metricsexecutor-bean-type-executorservice?noredirect=1#comment56157626_34187972 </body>
		<created>2015-12-10 17:48:38</created>
		<closed>2015-12-14 16:55:38</closed>
	</bug>
	<bug>
		<id>4699</id>
		<title>Developer tools: data script replayed on restart problem</title>
		<body>I have a spring boot application using liquibase and referencing a startup script using spring.datasource.data property. After migrating to spring boot 1.3.0 and testing developer tools automatic restart, I have a problem as my startup script is replayed at startup but previously loaded data is still there. Is there a way to avoid replaying startup script or to flush data on dev tools restart ? </body>
		<created>2015-12-07 16:37:51</created>
		<closed>2016-02-11 16:02:11</closed>
	</bug>
	<bug>
		<id>4698</id>
		<title>OpenTsdbGaugeWriter hangs forever</title>
		<body>Hi,  OpenTSDB is sometimes in a state where post requests hang forever. OpenTsdbGaugeWriter creates a RestTemplate with this call:  ``` java private RestOperations restTemplate = new RestTemplate(); ```  This uses the default timeout from the system, which seems to be 0 (= no timeout). That task being a scheduled task leads all the other scheduled tasks to wait since by default only one thread runs all the scheduled tasks.  Thanks! </body>
		<created>2015-12-07 15:31:20</created>
		<closed>2015-12-15 14:50:37</closed>
	</bug>
	<bug>
		<id>4668</id>
		<title>HttpTunnelServerTests.initialRequestIsUsedForFirstServerResponse fails intermittently</title>
		<body>``` java.lang.AssertionError:  Expected: "hello"      but: was ""     at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)     at org.junit.Assert.assertThat(Assert.java:956)     at org.junit.Assert.assertThat(Assert.java:923)     at org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.initialRequestIsUsedForFirstServerResponse(HttpTunnelServerTests.java:158)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) ``` </body>
		<created>2015-12-03 10:29:11</created>
		<closed>2015-12-04 16:01:03</closed>
	</bug>
	<bug>
		<id>4662</id>
		<title>Release 1.3.0 doesn't work with GAE</title>
		<body>When using  ``` &lt;parent&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;   &lt;version&gt;1.1.0.BUILD-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; ```  and uploading to Google App Engine, you get the following error:  ``` Failed startup of context com.google.apphosting.utils.jetty.RuntimeAppEngineWebAppContext@1b9f3bd{/,/base/data/home/apps/e~football-preds/1.388980235875970012}     java.security.AccessControlException: access denied ("java.lang.RuntimePermission" "modifyThreadGroup")         at java.security.AccessControlContext.checkPermission(AccessControlContext.java:382)         at java.security.AccessController.checkPermission(AccessController.java:572)         at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)         at com.google.apphosting.runtime.security.CustomSecurityManager.checkPermission(CustomSecurityManager.java:55)         at com.google.apphosting.runtime.security.CustomSecurityManager.checkAccess(CustomSecurityManager.java:136)         at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:315)         at java.lang.Thread.init(Thread.java:391)         at java.lang.Thread.init(Thread.java:349)         at java.lang.Thread.&lt;init&gt;(Thread.java:675)         at java.util.concurrent.Executors$DefaultThreadFactory.newThread(Executors.java:572)         at java.util.concurrent.ThreadPoolExecutor$Worker.&lt;init&gt;(ThreadPoolExecutor.java:600)         at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:943)         at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1383)         at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:110)         at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:638)         at org.springframework.boot.autoconfigure.BackgroundPreinitializer.submit(BackgroundPreinitializer.java:50)         at org.springframework.boot.autoconfigure.BackgroundPreinitializer.onApplicationEvent(BackgroundPreinitializer.java:43)         at org.springframework.boot.autoconfigure.BackgroundPreinitializer.onApplicationEvent(BackgroundPreinitializer.java:37)         at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119)         at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)         at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:60)         at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:48)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:293)         at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:134)         at org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener.initWebApplicationContext(SpringBootContextLoaderListener.java:61)         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)         at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)         at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)         at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)         at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)         at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)         at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)         at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.createHandler(AppVersionHandlerMap.java:206)         at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.getHandler(AppVersionHandlerMap.java:179)         at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:136)         at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:469)         at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:437)         at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:444)         at com.google.tracing.CurrentContext.runInContext(CurrentContext.java:256)         at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:308)         at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:300)         at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:441)         at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:235) ``` </body>
		<created>2015-12-02 15:59:24</created>
		<closed>2015-12-15 14:59:51</closed>
	</bug>
	<bug>
		<id>4651</id>
		<title>LoggingApplicationListener calls loggingSystem.cleanUp() after nested context was destroyed</title>
		<body>Is it right way to cleanUp loggingSystem after nested context was destroyed?  I have next code:  ``` java migrationContext = new AnnotationConfigApplicationContext();  migrationContext.setParent(applicationContext);  .../*(some actions in migrationContext */  migrationContext.destroy(); // sends ContextClosedEvent to LoggingApplicationListener ` ```  After that I can't get log messages from JUL.  What I'm doing wrong? Is it bug in LoggingApplicationListener or I use wrong way to create nested context?  As workaround  - do not send ContextClosedEvent  by nested context:  ``` java migrationContext = new AnnotationConfigApplicationContext() {     @Override     public void publishEvent(ApplicationEvent event)     {         if (!(event instanceof ContextClosedEvent))         {             super.publishEvent(event);         }     } };  ``` </body>
		<created>2015-12-01 15:06:44</created>
		<closed>2015-12-03 14:36:01</closed>
	</bug>
	<bug>
		<id>4639</id>
		<title>spring-boot-gradle-plugin: Do not add findMainClass dependency to each JavaExec task</title>
		<body>Could you please avoid adding `findMainClass` dependency to each `JavaExec` task. Instead add it to spring-boot specific tasks only, like `BootRunTask`.  The reason is when I have my custom Gradle plugin which also uses spring-boot plugin, and where I have my own `JavaExec` task, e.g. for generating additional sources, I don't want my task to depend on spring-boot `findMainClass`, which would create circular dependency, because I want to hook my task as a dependency of `compileJava` task.  Instead of the code in `RunPluginFeatures` (around line 60) which looks like this:  ``` java if (task instanceof JavaExec || task instanceof CreateStartScripts) {     task.dependsOn(FIND_MAIN_CLASS_TASK_NAME); } ```  I'd rather propose to change it to something like this:  ``` java if (task instanceof BootRunTask || task instanceof CreateStartScripts) {     task.dependsOn(FIND_MAIN_CLASS_TASK_NAME); } ```  Thanks! </body>
		<created>2015-11-29 21:28:30</created>
		<closed>2015-12-04 14:37:29</closed>
	</bug>
	<bug>
		<id>4631</id>
		<title>Custom ServerProperties not bound to application.properties</title>
		<body>If the user provides a `@Bean` of type `ServerProperties` they might expect it to be bound to the application.properties (so the port can be changed for instance). This isn't working in 1.3 because we grab the `ServerProperties` in a `Condition` (before even the `Environment` is injectable). </body>
		<created>2015-11-27 12:52:08</created>
		<closed>2015-12-16 17:48:36</closed>
	</bug>
	<bug>
		<id>4627</id>
		<title>spring-boot-sample-simple does not build with gradle</title>
		<body>Output:   ``` text * What went wrong: A problem occurred evaluating root project 'spring-boot-sample-simple'. &gt; Could not find method run() for arguments [build_54mbijt3lmz0e8z5tqchytm9o$_run_closure2@14feec07] on root project 'spring-boot-sample-simple'. ```  I don't know enough about Gradle or Spring Boot to provide further info.  </body>
		<created>2015-11-27 02:43:33</created>
		<closed>2015-11-27 09:23:31</closed>
	</bug>
	<bug>
		<id>4621</id>
		<title>actuator /metrics fails with ehcache-core</title>
		<body>Since 1.3 (I think), when calling the /metrics endpoint with EhCache enabled using the ehcache-core artifact (which is pulled in by hibernate-ehcache, for example) it fails with the following excaption:  ``` java.lang.NoSuchMethodError: net.sf.ehcache.Ehcache.getStatistics()Lnet/sf/ehcache/statistics/StatisticsGateway ```  This is because the ehcache-core artifact does not include the StatisticsGateway class (as opposed to the ehcache artifact).  I am not sure if the metrics endpoint should provide any EhCache statistics if the StatisticsGateway is not present. At the very least, though, it should not fail. </body>
		<created>2015-11-26 14:42:35</created>
		<closed>2015-11-26 15:15:36</closed>
	</bug>
	<bug>
		<id>4595</id>
		<title>The environment post processor that handles application.properties is always added to the end of the list</title>
		<body>I've written a custom `EnvironmentPostProcessor` to use company wide default in various apps. The code looks like:  ``` java @Order(Ordered.LOWEST_PRECEDENCE) public class MyFrameworkPropertyDefaultsPostProcessor implements EnvironmentPostProcessor {      private static final String DEFAULT_MY_FRAMEWORK_PROPERTIES = "defaultMyFrameworkProperties";     private static final String DEFAULT_MY_FRAMEWORK_PROPERTIES_LOCATION = "/config/myFramework-application.yml";      private YamlPropertySourceLoader propertySourceLoader = new YamlPropertySourceLoader();      @Override     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {         Resource myFrameworkDefaults = new ClassPathResource(DEFAULT_MY_FRAMEWORK_PROPERTIES_LOCATION);         String[] profiles = environment.getActiveProfiles();         load(environment, myFrameworkDefaults, null);         if (profiles.length &gt; 0) {             for (String profile : profiles) {                 load(environment, myFrameworkDefaults, profile);             }         }     }      private void load(ConfigurableEnvironment environment, Resource resource, String profile) {         try {             PropertySource&lt;?&gt; propertySource = propertySourceLoader.load(DEFAULT_MY_FRAMEWORK_PROPERTIES, resource, profile);             if (propertySource != null) {                 environment.getPropertySources().addLast(propertySource);             }         } catch (IOException e) {             // ignore         }     } } ```  This `MyFrameworkPropertyDefaultsPostProcessor` kicks in nicely but the application defined properties (`application.properties`) are added after the defaultMyFrameworkProperties resulting that I cannot override the company wide defaults if needed. Note: I've added `@Order(Ordered.LOWEST_PRECEDENCE)` to my `EnvironmentPostProcessor` but this does not seem to have affect to get it added as last.  As @wilkinsona mentioned on gitter this looks like a bug. The environment post processor that handles application.properties is always added to the end of the list. </body>
		<created>2015-11-24 14:25:30</created>
		<closed>2015-12-01 15:40:37</closed>
	</bug>
	<bug>
		<id>4593</id>
		<title>Inconsistent thread synchronization in EmbeddedWebApplicationContext.java</title>
		<body>FindBugs identified an inconsistent thread synchronization issue for spring-boot in the EmbeddedWebApplicationContext class. When finishRefresh() is unsynchronized, it is possible for embeddedServletContainer to be set to null before publishEvent() was called. Synchronizing the method makes all accesses of this field consistent. </body>
		<created>2015-11-24 13:20:04</created>
		<closed>2015-12-01 15:11:57</closed>
	</bug>
	<bug>
		<id>4586</id>
		<title>spring.datasource.name ignored with non embedded configuration</title>
		<body>If a Spring Boot app is using an embedded data source with a connection pool (i.e. Tomcat), `spring.datasource.name` is ignored.  See #3755 </body>
		<created>2015-11-23 16:32:57</created>
		<closed>2015-11-27 16:01:17</closed>
	</bug>
	<bug>
		<id>4575</id>
		<title>root actuator endpoint with management.context-path property does not resolve if it ends with a slash</title>
		<body>Hello,  I use spring-boot 1.3.0. I add these properties to my project :  ``` management:  port: 8084  address: 127.0.0.1  context-path: /admin ```  With this url : `http://localhost:8084/admin/{{endpoint}}` everything works fine with all endpoints except `/actuator`. (404 error)  With this url: `http://localhost:8084/admin/`, I've got   ``` { "links": [] } ```  When I remove these properties (management.*), the endpoint /actuator is fine.  When I apply this property (management.context-path) against my project, /actuator endpoint is never displayed in my logs (I use logback with your pattern logback-spring.xml)  Thanks for your answer, </body>
		<created>2015-11-21 10:44:31</created>
		<closed>2015-11-30 09:32:54</closed>
	</bug>
	<bug>
		<id>4569</id>
		<title>ClassNotFoundException - ChannelSecurityInterceptor</title>
		<body>Trying to use web sockets and spring security in boot 1.3.0 leads to the following ClassNotFoundException.  Sample project showing the issue is available at: https://github.com/krm1312/springwssecurity  ``` mvn clean package ```  or try to start it.  Java 1.8.0_65 on OS X.  ``` Caused by: java.lang.ClassNotFoundException: org.springframework.security.messaging.access.intercept.ChannelSecurityInterceptor     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at java.lang.Class.getDeclaredMethods0(Native Method)     at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)     at java.lang.Class.getDeclaredMethods(Class.java:1975)     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:609)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:521)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:534)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:507)     at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:567)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:683)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:627)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:597)     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1445)     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:975)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:289)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.addBeanType(BeanTypeRegistry.java:278)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:259)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:182)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:171)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:139)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:113)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47)     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:178)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:677)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:519)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:347)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:295)     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)     at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)     at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)     at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:183)     at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:123)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:228)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:230)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:249)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:89)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:193)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) ``` </body>
		<created>2015-11-20 21:22:30</created>
		<closed>2015-12-01 09:22:26</closed>
	</bug>
	<bug>
		<id>4567</id>
		<title>ConfigurationProperties error "Could not bind properties to [unknown]"</title>
		<body>In Spring Boot 1.2.6, it appears that if there is a problem binding properties in the ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization, a BeanCreationException is thrown with the error: "Could not bind properties to [unknown](...)".  Looking at the code, the targetClass variable is never updated from it's default value.  It looks like an assignment is missing in the "if" condition:  ```     catch (Exception ex) {         String targetClass = "[unknown]";         if (target != null) {             ClassUtils.getShortName(target.getClass());  // &lt;---- Assign to targetClass here???         }         throw new BeanCreationException(beanName, "Could not bind properties to "                 + targetClass + " (" + getAnnotationDetails(annotation) + ")", ex);     } ``` </body>
		<created>2015-11-20 17:21:19</created>
		<closed>2015-11-23 09:45:21</closed>
	</bug>
	<bug>
		<id>4553</id>
		<title>OAuth2 resource server configuration breaks contract of RestTemplate interceptors</title>
		<body>It uses `setInterceptors()` and then sets a value which is an unmodifiable list, whereas the `RestTemplate` is supposed to allow its interceptors to be mutated. </body>
		<created>2015-11-19 10:03:32</created>
		<closed>2015-11-19 10:04:24</closed>
	</bug>
	<bug>
		<id>4552</id>
		<title>Regex support on /metrics returns "not found" if metrics value is null</title>
		<body>Regex support added in boot v1.3 does not handle correctly null metrics value due to :  https://github.com/spring-projects/spring-boot/blob/8ca5635b69109fba898a094abd5970c906d29060/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MetricsMvcEndpoint.java#L75  Consequently, it results in a 404 HTTP error code. </body>
		<created>2015-11-19 09:22:14</created>
		<closed>2015-12-01 17:12:28</closed>
	</bug>
	<bug>
		<id>4536</id>
		<title>== is used to test for Integer equality, rather than the ".equals()" method</title>
		<body>In the `EndpointWebMvcHypermediaManagementContextConfiguration.curieProvider(...)` method the equality of `server.getPort()` and `management.getPort()` which are both Integers is made using '==' instead of '.equals()'. </body>
		<created>2015-11-18 11:59:57</created>
		<closed>2015-12-04 14:43:36</closed>
	</bug>
	<bug>
		<id>4527</id>
		<title>Regression: spring-boot 1.3.0 lets jersey-spring3 WebApplicationInitializer initialize a spring context</title>
		<body>In spring-boot 1.3.0 JerseyAutoConfiguration is configured with `@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)`, while in earlier versions it used `@Order(Ordered.HIGHEST_PRECEDENCE)`. I don't know what the reason for this change was, but it causes `SpringWebApplicationInitializer` defined in jersey-spring3 to be called first at times. I've already written about it on  [SOF](http://stackoverflow.com/a/32742997/3525027). Dave Syer's workaround on the same page would work only if done in a `WebApplicationInitializer` that's annotated with `@Order(Ordered.HIGHEST_PRECEDENCE)`.  Actually I've just found the [culprit commit](https://github.com/spring-projects/spring-boot/commit/7a73c5883f857f7dfb56d73410af96eae04a0e63).  `@Order` on AutoConfiguration classes should not have been replaced blindly with `@AutoConfigureOrder`. It should have been done on a per-case basis. Hope it didn't break more AutoConfiguration classes. </body>
		<created>2015-11-17 18:39:50</created>
		<closed>2015-11-30 17:59:29</closed>
	</bug>
	<bug>
		<id>4525</id>
		<title>No qualifying bean of type SecurityProperties found for dependency after upgrade to 1.3.0</title>
		<body>Thanks for releasing spring-boot 1.3.0.RELEASE and all your work. However, I just updated a project and went trough some class and method not found errors until now my tests are sane. Also I had to add some ".and()" calls to my subclasses of `WebSecurityConfigurerAdapter`. However, I now end up with this error and I can not find a problem on my side any more. Any ideas what might cause this error? Is there something broken in the release?  ``` Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityFilterChainRegistration' defined in class path resource [org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.springframework.boot.autoconfigure.security.SecurityProperties]: : No qualifying bean of type [org.springframework.boot.autoconfigure.security.SecurityProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.boot.autoconfigure.security.SecurityProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:464) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.boot.context.embedded.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:232) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:213) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:89) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.ServletContextInitializerBeans.&lt;init&gt;(ServletContextInitializerBeans.java:77) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:235) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.selfInitialize(EmbeddedWebApplicationContext.java:222) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.access$000(EmbeddedWebApplicationContext.java:85) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:207) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.springframework.boot.context.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:55) ~[spring-boot-1.3.0.RELEASE.jar:1.3.0.RELEASE]     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5170) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1408) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_45]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_45]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_45]     at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_45] Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.boot.autoconfigure.security.SecurityProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1373) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1119) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.2.3.RELEASE.jar:4.2.3.RELEASE]     ... 26 common frames omitted ``` </body>
		<created>2015-11-17 13:22:43</created>
		<closed>2015-12-04 13:40:23</closed>
	</bug>
	<bug>
		<id>4524</id>
		<title>Spring boot application may fail to start with init.d due to race condition in start-stop-daemon</title>
		<body>Hello,  I am starting a spring boot application as a service with /etc/init.d/&lt;name&gt;  However, the init.d script stops with return code 1 and the message "failed to start".  To my understanding, the start-stop-daemon does not produce the pid file immediately.   Thus,  "pid=$(cat "$pid_file")" is returning an empty string. I added a sleep 1 before this line, that helps for the moment. </body>
		<created>2015-11-17 11:47:31</created>
		<closed>2015-12-01 12:45:19</closed>
	</bug>
	<bug>
		<id>4401</id>
		<title>management.context-path does not override server.contextPath</title>
		<body>The `management.context-path` adds to any existing `server.context-path` instead of overriding it. ### Prerequisites - Spring Boot 1.3.0.RC1 - actuator enabled - `application.properties` configuration:  ``` server.context-path=/v1 management.context-path=/manage ``` ### Expected result - The actuator resources should be present at `localhost:8080/manage[actuator endpoint]` ### Actual result - The actuator resources are located as subpath to `/v1`, i.e. `localhost:8080/v1/manage/[actuator endpoint]` ### Comments - Setting the `management.port=8081` does not affect the root context of the actuator resources. In other words, they will be mapped to `localhost:8081/v1/manage/[actuator resource]` - Setting the `management.context-path=/` (in attempt to re-enable the default management context path) still results the actuator resources to be mapped to `localhost:8081/v1/[actuator resource]` </body>
		<created>2015-11-07 13:43:41</created>
		<closed>2015-11-27 12:49:59</closed>
	</bug>
	<bug>
		<id>4397</id>
		<title>@ConfigurationProperties metadata generation issue with Lombok in nested classes</title>
		<body>If you create @ConfigurationProperties class which contains a nested class, using Lombok instead of regular getters / setters, the generated metadata.json, won't contain any traces of the nested object (nor its properties).  e.g.  ``` java @Data @org.springframework.boot.context.properties.ConfigurationProperties(prefix = "bug") public class ConfigPropsLombok {     private String iAmAProperty;      private NestedProperty nestedProperty;      @Data     public static class NestedProperty {         private String iAmANestedPropertyInANestedClass;     } } ```  produces  ``` json {   "groups": [{     "name": "bug",     "type": "io.pivotal.ConfigPropsLombok",     "sourceType": "io.pivotal.ConfigPropsLombok"   }],   "properties": [{     "name": "bug.i-am-aproperty",     "type": "java.lang.String",     "sourceType": "io.pivotal.ConfigPropsLombok"   }] } ```  This is using Java 8u65 &amp; IntelliJ 15 (IU 143.381) </body>
		<created>2015-11-06 16:36:48</created>
		<closed>2015-11-26 19:25:17</closed>
	</bug>
	<bug>
		<id>4395</id>
		<title>Support several @ConfigurationProperties auto-created beans with the same prefix</title>
		<body>I got a project with multiple Autoconfiguration-style pieces.   I have something similar to this:  ``` java @Configuration @EnableConfigurationProperties(Config1.class) public class AC1  { @Autowired private Config1 cfg; }  @Configuration @EnableConfigurationProperties(Config2.class) public class AC2  { @Autowired private Config2 cfg; }  @ConfigurationProperties(prefix="myconfig") public class Config1 { }  @ConfigurationProperties(prefix="myconfig") public class Config2 { } ```  For some reason it totally refused to instantiate Config2.. After tearing my hair for a few hours I finally found out that changing the prefix on Config2's annotation resolved the issue, both Config classes are now resolved properly.  org.springframework.boot:spring-boot-starter:jar:1.2.7.RELEASE org.springframework.boot:spring-boot-autoconfigure:jar:1.2.7.RELEASE  (also tested in 1.2.3) </body>
		<created>2015-11-06 15:23:14</created>
		<closed>2016-02-09 16:19:25</closed>
	</bug>
	<bug>
		<id>4389</id>
		<title>CacheAutoConfiguration tries to configure CacheManager before Hazelcast is started</title>
		<body>If I configure `spring.cache.type=hazelcast` in my application.properties, my Boot application using Spring Boot 1.3.0.RC1 cannot load and Spring exits with the following exception pretty much immediately after starting, although Hazelcast is on the classpath and started successfully if I omit the configuration setting (I get a `GuavaCacheManager` in this case instead):   ``` Caused by: java.lang.IllegalArgumentException: No cache manager could be auto-configured, check your configuration (caching type is 'HAZELCAST')     at org.springframework.util.Assert.notNull(Assert.java:115)     at org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration$CacheManagerValidator.checkHasCacheManager(CacheAutoConfiguration.java:137)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:354)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:305)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     ... 59 more ```  The problem seems to be that Hazelcast is started after JPA/Hibernate and the `CacheManager` is verified even before JPA/Hibernate is started. The problem goes away as soon as I add `@AutoConfigureAfter({RedisAutoConfiguration.class, HazelcastAutoConfiguration.class})` to Boot's `CacheAutoConfiguration` or I explictly start Hazelcast myself:  ``` @Bean public HazelcastInstance hazelcastInstance(Config config) {     return Hazelcast.newHazelcastInstance(config); } ```  I tried to reproduce it in a test case and to create a sample application – both unsuccessfully.  </body>
		<created>2015-11-04 19:40:34</created>
		<closed>2015-11-06 16:02:16</closed>
	</bug>
	<bug>
		<id>4370</id>
		<title>WebApplicationContextUtils.getWebApplicationContext(ServletContext) always returns null in @WebAppConfiguration-annotated test</title>
		<body>`WebApplicationContextUtils.getWebApplicationContext(ServletContext)` always returns null when called from tests in my Spring Boot 1.2.7 based app, even when they are annotated with `@WebAppConfiguration`.  `WebApplicationContextUtils.getWebApplicationContext(ServletContext)` successfully returns the context in similar tests in a different _non-Spring-Boot_ application that I have (Spring 4.1.2).  Using a debugger I have compared what happens when running the tests in the Spring Boot and non-Spring Boot application and the difference seems to be that the `WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE` attribute gets set when `org.springframework.test.context.web.WebDelegatingSmartContextLoader` loads the context in the non-Spring Boot application but it does _not_ get set when `org.springframework.boot.test.SpringApplicationContextLoader` loads the context in the Spring Boot application.  I have been able to work around this by adding the following code to my test, but it would be nice if this extra code was not needed:  ```     @Inject     private WebApplicationContext webApplicationContext;      @Inject     private ServletContext servletContext;      @Before     public void springBootWebApplicationContextWorkaround() throws Exception     {         servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, webApplicationContext);     } ``` </body>
		<created>2015-11-02 18:00:58</created>
		<closed>2016-04-20 09:59:26</closed>
	</bug>
	<bug>
		<id>4365</id>
		<title>MetricsFilter can't be disabled</title>
		<body>when  set `endpoints.metrics.filter.enabled=false`, exception was throwed:  ``` Exception in thread "Main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'metricsEndpoint': Could not bind properties to MetricsEndpoint (prefix=endpoints.metrics, ignoreInvalidFields=false, ignoreUnknownFields=false, ignoreNestedProperties=false); nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'filter[enabled]' of bean class [org.springframework.boot.actuate.endpoint.MetricsEndpoint]: Cannot access indexed value in property referenced in indexed property path 'filter[enabled]'; nested exception is org.springframework.beans.NotReadablePropertyException: Invalid property 'filter[enabled]' of bean class [org.springframework.boot.actuate.endpoint.MetricsEndpoint]: Bean property 'filter[enabled]' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:324) at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:273) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:835) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537) at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:356) at org.springframework.boot.SpringApplication.run(SpringApplication.java:295) at com.yiji.boot.test.DemoApplication.main(DemoApplication.java:14) Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'filter[enabled]' of bean class [org.springframework.boot.actuate.endpoint.MetricsEndpoint]: Cannot access indexed value in property referenced in indexed property path 'filter[enabled]'; nested exception is org.springframework.beans.NotReadablePropertyException: Invalid property 'filter[enabled]' of bean class [org.springframework.boot.actuate.endpoint.MetricsEndpoint]: Bean property 'filter[enabled]' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?     at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:304)     at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:280)     at org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanWrapper.setPropertyValue(RelaxedDataBinder.java:698)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:834)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:730)     at org.springframework.boot.bind.RelaxedDataBinder.doBind(RelaxedDataBinder.java:128)     at org.springframework.validation.DataBinder.bind(DataBinder.java:715)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:267)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:319)     ... 17 more Caused by: org.springframework.beans.NotReadablePropertyException: Invalid property 'filter[enabled]' of bean class [org.springframework.boot.actuate.endpoint.MetricsEndpoint]: Bean property 'filter[enabled]' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?     at org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyValue(AbstractNestablePropertyAccessor.java:619)     at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:301)     ... 27 more ```  It seems like `org.springframework.boot.actuate.endpoint.MetricsEndpoint`'s `ConfigurationProperties` annotation load it. </body>
		<created>2015-11-02 06:56:21</created>
		<closed>2015-12-10 14:40:56</closed>
	</bug>
	<bug>
		<id>4352</id>
		<title>Usage list type for spring.autoconfigure.exclude property in Yaml</title>
		<body>Can you please add ability to use list in yml for spring.autoconfigure.exclude.   Currently in Spring Boot 1.3.0.RC1 is possible only such usage:  ``` yaml spring:   autoconfigure:     exclude: &gt;       org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,       org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration,       org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration ```  But it will be nice to use regular list syntax, like this:  ``` yaml spring:   autoconfigure:     exclude:       - org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration       - org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration       - org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration ``` </body>
		<created>2015-10-30 13:19:57</created>
		<closed>2015-10-30 16:25:12</closed>
	</bug>
	<bug>
		<id>4345</id>
		<title>Spring Security 4.0.3 snapshots break Boot's default security configuration</title>
		<body>`SecurityAutoConfigurationTests` is a bit fragile as it's checking for the number of filters in the security filter chain rather than checking than the one we expect are there.   In particular, when Boot's default is disabled, it's expecting a certain fixed state that might change in Spring Security at any time (like this morning). Instead we should probably check that Boot's default was not applied rather than assuming what the state is with a default Spring Security setup. </body>
		<created>2015-10-30 09:10:01</created>
		<closed>2015-10-30 11:26:45</closed>
	</bug>
	<bug>
		<id>4343</id>
		<title>HATEOAS sample doesn't work when accessed using a browser</title>
		<body>Due to the browser's accept header, the sample tries to produce XML and blows up:  ``` &lt;html&gt;   &lt;body&gt;   &lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;     &lt;p&gt;       This application has no explicit mapping for /error, so you are seeing this as a fallback.     &lt;/p&gt;     &lt;div id="created"&gt;Fri Oct 30 08:30:46 GMT 2015&lt;/div&gt;     &lt;div&gt;       There was an unexpected error (type=Internal Server Error, status=500).     &lt;/div&gt;     &lt;div&gt;       Could not marshal [Resources { content: [sample.hateoas.domain.Customer@21013e53, sample.hateoas.domain.Customer@2645d948, sample.hateoas.domain.Customer@54f78e1f], links: [&lt;http://localhost:8080/customers&gt;;rel="self"] }]: null; nested exception is javax.xml.bind.MarshalException - with linked exception: [com.sun.istack.internal.SAXException2: class sample.hateoas.domain.Customer nor any of its super class is known to this context. javax.xml.bind.JAXBException: class sample.hateoas.domain.Customer nor any of its super class is known to this context.]     &lt;/div&gt;   &lt;/body&gt; &lt;/html&gt; ``` </body>
		<created>2015-10-30 08:33:35</created>
		<closed>2015-10-30 09:24:24</closed>
	</bug>
	<bug>
		<id>4338</id>
		<title>Wrong detection of deprecated flag</title>
		<body>Consider the following  ``` java public class Foo {      private Integer counter;      public Integer getCounter() { ... }     public void setCounter(Integer c) { ... }     @Deprecated     public void setCounter(String c) { ... } } ```  The `counter` property is properly detected as of type `Integer` but it's  wrongly detected as being deprecated because of that unrelated setter. </body>
		<created>2015-10-29 16:30:54</created>
		<closed>2015-10-31 09:16:44</closed>
	</bug>
	<bug>
		<id>4337</id>
		<title>ExtendedWhitespaceThrowablePatternConverter and WhitespaceThrowablePatternConverter have the same plugin name</title>
		<body>Both `ExtendedWhitespaceThrowablePatternConverter` and `WhitespaceThrowablePatternConverter` are declared as plugins with the same name. This means that only the former is available and the converter keys supported by the latter do not work. </body>
		<created>2015-10-29 14:27:37</created>
		<closed>2015-10-29 14:31:59</closed>
	</bug>
	<bug>
		<id>4329</id>
		<title>Undertow: when management.port is set, requests to server.port return 404 Not Found</title>
		<body>``` properties server:     port: 2112 management:     port: 2113     context-path: /actuator ```  ``` logtalk 5792 [main] INFO  o.s.b.c.e.u.UndertowEmbeddedServletContainer - Undertow started on port(s) 2113 (http)  5973 [main] INFO  o.s.b.c.e.u.UndertowEmbeddedServletContainer - Undertow started on port(s) 2112 (http)  ```  This URL returns data: http://localhost:2113/actuator/metrics This one gets 404: http://localhost:2112/subscriber/376037  If I comment out `management.port` and change the port of the first URL, everything is fine. I am not sure if this happens with Tomcat or Jetty, I have only tried Undertow so far.  Thanks. </body>
		<created>2015-10-28 13:44:48</created>
		<closed>2015-11-18 11:55:57</closed>
	</bug>
	<bug>
		<id>4322</id>
		<title>Cannot bind String to a Collection of Enum if the input has not a matching case</title>
		<body>I just added `server.session.tracking-modes=cookie` to the 1.3.0.RC1 project by Spring Initilaizr.  ``` 2015-10-28 16:53:06.170  WARN 12736 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.bind.PropertiesConfigurationFactory.validate(PropertiesConfigurationFactory.java:350) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:269) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:319) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     ... 60 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:324) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:273) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 47 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:571) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 45 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:534) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1164) ~[spring-context-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:77) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:67) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 21 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:193) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:156) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     ... 13 common frames omitted Wrapped by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) ~[spring-context-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:356) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:295) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1085) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1074) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at com.example.DemoApplication.main(DemoApplication.java:10) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) [idea_rt.jar:na] 2015-10-28 16:53:06.175  INFO 12736 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/charsets.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/deploy.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/javaws.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/jce.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/jfr.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/jfxswt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/jsse.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/management-agent.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/plugin.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/resources.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/rt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/access-bridge-64.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/cldrdata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/dnsns.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/jaccess.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/jfxrt.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/localedata.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/nashorn.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/sunec.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/sunjce_provider.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/sunmscapi.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/sunpkcs11.jar, file:/C:/Program%20Files/Java/jdk1.8.0_60/jre/lib/ext/zipfs.jar, file:/C:/Users/makits.RDH/git/untitled7/target/classes/, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.3.0.RC1/spring-boot-starter-web-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-starter/1.3.0.RC1/spring-boot-starter-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot/1.3.0.RC1/spring-boot-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.3.0.RC1/spring-boot-autoconfigure-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-starter-logging/1.3.0.RC1/spring-boot-starter-logging-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar, file:/C:/Users/makits.RDH/.m2/repository/ch/qos/logback/logback-core/1.1.3/logback-core-1.1.3.jar, file:/C:/Users/makits.RDH/.m2/repository/org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar, file:/C:/Users/makits.RDH/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.12/jcl-over-slf4j-1.7.12.jar, file:/C:/Users/makits.RDH/.m2/repository/org/slf4j/jul-to-slf4j/1.7.12/jul-to-slf4j-1.7.12.jar, file:/C:/Users/makits.RDH/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.12/log4j-over-slf4j-1.7.12.jar, file:/C:/Users/makits.RDH/.m2/repository/org/yaml/snakeyaml/1.16/snakeyaml-1.16.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/1.3.0.RC1/spring-boot-starter-tomcat-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.0.28/tomcat-embed-core-8.0.28.jar, file:/C:/Users/makits.RDH/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.0.28/tomcat-embed-el-8.0.28.jar, file:/C:/Users/makits.RDH/.m2/repository/org/apache/tomcat/embed/tomcat-embed-logging-juli/8.0.28/tomcat-embed-logging-juli-8.0.28.jar, file:/C:/Users/makits.RDH/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.0.28/tomcat-embed-websocket-8.0.28.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/boot/spring-boot-starter-validation/1.3.0.RC1/spring-boot-starter-validation-1.3.0.RC1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/hibernate/hibernate-validator/5.2.2.Final/hibernate-validator-5.2.2.Final.jar, file:/C:/Users/makits.RDH/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar, file:/C:/Users/makits.RDH/.m2/repository/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar, file:/C:/Users/makits.RDH/.m2/repository/com/fasterxml/classmate/1.1.0/classmate-1.1.0.jar, file:/C:/Users/makits.RDH/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.6.1/jackson-databind-2.6.1.jar, file:/C:/Users/makits.RDH/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.6.1/jackson-annotations-2.6.1.jar, file:/C:/Users/makits.RDH/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.6.1/jackson-core-2.6.1.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-web/4.2.2.RELEASE/spring-web-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-aop/4.2.2.RELEASE/spring-aop-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-beans/4.2.2.RELEASE/spring-beans-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-context/4.2.2.RELEASE/spring-context-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-webmvc/4.2.2.RELEASE/spring-webmvc-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-expression/4.2.2.RELEASE/spring-expression-4.2.2.RELEASE.jar, file:/C:/Users/makits.RDH/.m2/repository/org/springframework/spring-core/4.2.2.RELEASE/spring-core-4.2.2.RELEASE.jar, file:/C:/Program%20Files%20(x86)/JetBrains/IntelliJ%20IDEA%2014.1.3/lib/idea_rt.jar] 2015-10-28 16:53:06.176 ERROR 12736 --- [           main] o.s.boot.SpringApplication               : Application startup failed org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.bind.PropertiesConfigurationFactory.validate(PropertiesConfigurationFactory.java:350) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:269) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:319) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     ... 60 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:324) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:273) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 47 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:571) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 45 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:534) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1164) ~[spring-context-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:77) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:67) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 21 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:193) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:156) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     ... 13 common frames omitted Wrapped by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) ~[spring-context-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) ~[spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:356) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:295) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1085) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1074) [spring-boot-1.3.0.RC1.jar:1.3.0.RC1]     at com.example.DemoApplication.main(DemoApplication.java:10) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) [idea_rt.jar:na] Exception in thread "main" org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:356)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:295)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1085)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1074)     at com.example.DemoApplication.main(DemoApplication.java:10)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:193)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:156)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130)     ... 13 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:534)     at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1164)     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.getCustomizers(EmbeddedServletContainerCustomizerBeanPostProcessor.java:77)     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:67)     at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:54)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)     ... 21 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.ServerProperties org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:571)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)     ... 45 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'serverProperties': Could not bind properties to ServerProperties (prefix=server, ignoreInvalidFields=false, ignoreUnknownFields=true, ignoreNestedProperties=false); nested exception is org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:324)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:273)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:543)     ... 47 more Caused by: org.springframework.validation.BindException: org.springframework.boot.bind.RelaxedDataBinder$RelaxedBeanPropertyBindingResult: 1 errors Field error in object 'server' on field 'session.trackingModes': rejected value [cookie]; codes [typeMismatch.server.session.trackingModes,typeMismatch.session.trackingModes,typeMismatch.trackingModes,typeMismatch.java.util.Set,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [server.session.trackingModes,session.trackingModes]; arguments []; default message [session.trackingModes]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Set' for property 'session.trackingModes'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type java.util.Set&lt;javax.servlet.SessionTrackingMode&gt;]     at org.springframework.boot.bind.PropertiesConfigurationFactory.validate(PropertiesConfigurationFactory.java:350)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:269)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:240)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:319)     ... 60 more ``` </body>
		<created>2015-10-28 08:04:19</created>
		<closed>2015-10-29 09:30:04</closed>
	</bug>
	<bug>
		<id>4313</id>
		<title>Complex types are not combined correctly from merging propery sources</title>
		<body>I'm using the [externalized configuration](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html) feature provided Spring Boot 1.2.5-RELEASES and when trying to upgrade to version 1.2.7-RELEASES I was surprised to see that the strategy to merge properties coming from different sources changed.  I found that the culprit is [this](https://github.com/spring-projects/spring-boot/commit/86d5c1925916043ca69da3e3443baf5b1ae4f8ad) commit, which fixes issue https://github.com/spring-projects/spring-boot/issues/2611 .  I think that the new approach is not really straightforward and consistent. Let's consider the following scenarios: ## Scenario 1 ### Property source A  ``` list[0]=f0 ``` ### Property source B  ``` list[0]=s0 list[1]=s1 ``` ### Merged properties after fix  ``` list[0]=f0 ``` ### Merged properties before fix  ``` list[0]=f0 list[1]=s1 ```  The claim is that it is more logical not to mix lists, according to me it is debatable but it can make sense. Now let's consider a slightly more complex example: ## Scenario 2 ### Property source A  ``` list[0].a=f0 ``` ### Property source B  ``` list[0].a=s0 list[0].b=s1 list[1].a=s2 list[1].b=s3 ``` ### Merged properties after fix  ``` list[0].a=f0 list[0].b=s1 list[1].b=s3 ``` ### Merged properties before fix  ``` list[0].a=f0 list[0].b=s1 list[1].a=s2 list[1].b=s3 ```  In this scenario the data is more structured. The result in this case is not really intuitive after the fix. ## Scenario 3 ### Property source A  ``` list[0].a=f0 list[1].b=f1 ``` ### Property source B  ``` list[0].a=s0 list[0].b=s1 list[1].a=s2 list[1].b=s3 ``` ### Merged properties after fix  ``` list[0].a=f0 list[1].b=f1 ``` ### Merged properties before fix  ``` list[0].a=f0 list[0].b=s1 list[1].a=s2 list[1].b=f1 ```  Again result is counter intuitive.  To conclude I think that current merge policy could be acceptable in case of flat data, but definitely not good in case of more structured one. </body>
		<created>2015-10-27 09:18:02</created>
		<closed>2016-07-13 22:36:35</closed>
	</bug>
	<bug>
		<id>4297</id>
		<title>Remote devtools fail if the application url end with a slash</title>
		<body>&gt; I just tried to do the exat same things in STS Boot Dash and it..... worked. &gt; Comparing the launch conf that works with the one that doesn't... &gt; The only difference is an extra '/' at the end of remote url. &gt; So use remote url 'http://localhost:6789/' gets the funky errors. &gt; But using remote url 'http://localhost:6789' works. </body>
		<created>2015-10-25 08:21:31</created>
		<closed>2015-10-26 09:28:37</closed>
	</bug>
	<bug>
		<id>4287</id>
		<title>launch.script appends `_` to the identity when not run with init.d</title>
		<body>You end up with an identity like `spring-boot-sample-web-freemarker-1.3.0.BUILD-SNAPSHOT_` which doesn't look right to me. </body>
		<created>2015-10-23 14:19:05</created>
		<closed>2015-10-28 14:32:48</closed>
	</bug>
	<bug>
		<id>4281</id>
		<title>external application.properties when installed as an init.d service</title>
		<body>I'm running 1.3.0.RC1 [as a linux service using init.d](http://docs.spring.io/spring-boot/docs/1.3.0.RC1/reference/htmlsingle/#deployment-service). Placing an application.properties file next to the jar does not work. It looks like when run as a service its working directory is root so its looking for /application.properties. It would be ideal if a properties file could be picked up by convention from the same directory that jar is in or /etc.  Currently I am [using a conf file](http://docs.spring.io/spring-boot/docs/1.3.0.RC1/reference/htmlsingle/#deployment-script-customization-conf-file) with the following as a work around: RUN_ARGS=--spring.config.location=/var/application/application.properties </body>
		<created>2015-10-23 02:48:36</created>
		<closed>2015-11-01 12:33:30</closed>
	</bug>
	<bug>
		<id>4279</id>
		<title>Log4j 2.4 breaks rc1 devtools</title>
		<body>devtools does not seem to like the log4j2 2.4 (see exception below); I am able to workaround by adding `&lt;log4j2.version&gt;2.3&lt;/log4j2.version&gt;`  to reproduce - sts-starter project with rc1 devtools, and log4j2 (see below). start the project - change the @SpringBootApplication, and get the failure.   On @JmsListener - it appears log4j2 seems to stop emitting the logs after the restart by dev tools. This is both the 2.3 and 2.4 versions. Not sure if it is log4j2 or because i have add a `@Bean DefaultJmsListenerContainerFactory` . It does receive and process the message, just no logs.  ``` 2015-10-22 16:43:14,630 restartedMain ERROR No log4j2 configuration file found. Using default configuration: logging only errors to the console. 2015-10-22 16:43:14,635 restartedMain FATAL Unable to register shutdown hook because JVM is shutting down. java.lang.IllegalStateException: Cannot add new shutdown hook as this is not started. Current state: STOPPED     at org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.addShutdownCallback(DefaultShutdownCallbackRegistry.java:113)     at org.apache.logging.log4j.core.impl.Log4jContextFactory.addShutdownCallback(Log4jContextFactory.java:271)     at org.apache.logging.log4j.core.LoggerContext.setUpShutdownHook(LoggerContext.java:256)     at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:216)     at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:233)     at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:41)     at org.apache.logging.log4j.LogManager.getContext(LogManager.java:170)     at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.getLoggerContext(Log4J2LoggingSystem.java:215)     at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.getRootLoggerConfig(Log4J2LoggingSystem.java:207)     at org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.beforeInitialize(Log4J2LoggingSystem.java:130)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationStartedEvent(LoggingApplicationListener.java:179)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:165)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:60)     at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:48)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:293)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1085)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1074)     at com.example.Z1Application.main(Z1Application.java:10)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)  ```  ``` &lt;dependencies&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; ``` </body>
		<created>2015-10-22 20:49:45</created>
		<closed>2015-10-29 14:40:45</closed>
	</bug>
	<bug>
		<id>4270</id>
		<title>@EnableOAuth2Sso doesn't work with 1.3.0.RC1</title>
		<body>https://github.com/spring-projects/spring-boot/tree/v1.3.0.RC1/spring-boot-samples/spring-boot-sample-web-secure-github  doesn't work.  ``` console 2015-10-22 21:44:58.429  INFO 43204 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet' 2015-10-22 21:44:58.429  INFO 43204 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started 2015-10-22 21:44:58.450  INFO 43204 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms 2015-10-22 21:44:58.569 ERROR 43204 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.web.context.request.SessionScope.get(SessionScope.java:91) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     ... 57 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.oauth2ClientContext': Scope 'session' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:354) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) ~[spring-aop-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:187) ~[spring-aop-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at com.sun.proxy.$Proxy77.getAccessToken(Unknown Source) ~[na:na]     at org.springframework.security.oauth2.client.OAuth2RestTemplate.getAccessToken(OAuth2RestTemplate.java:169) ~[spring-security-oauth2-2.0.7.RELEASE.jar:na]     at org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter.attemptAuthentication(OAuth2ClientAuthenticationProcessingFilter.java:94) ~[spring-security-oauth2-2.0.7.RELEASE.jar:na]     at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:217) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:96) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter.doFilter(OAuth2ClientContextFilter.java:60) ~[spring-security-oauth2-2.0.7.RELEASE.jar:na]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.2.RELEASE.jar:4.2.2.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) ~[tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-embed-core-8.0.28.jar:8.0.28]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-embed-core-8.0.28.jar:8.0.28]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_60]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_60]     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.28.jar:8.0.28]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60] ```  1.3.0.M5 works https://github.com/spring-projects/spring-boot/tree/v1.3.0.M5/spring-boot-samples/spring-boot-sample-web-secure-github  Should `requestContextFilter` be placed before `OAuth2ClientContextFilter'`?  1.3.0.M5  ``` 2015-10-22 21:40:32.589  INFO 43176 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-10-22 21:40:32.589  INFO 43176 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'httpPutFormContentFilter' to: [/*] 2015-10-22 21:40:32.593  INFO 43176 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-10-22 21:40:32.597  INFO 43176 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'OAuth2ClientContextFilter' to: [/*] 2015-10-22 21:40:32.597  INFO 43176 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'springSecurityFilterChain' to: [/*] 2015-10-22 21:40:32.598  INFO 43176 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] ```  1.3.0.RC1  ``` 2015-10-22 21:44:12.262  INFO 43204 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-10-22 21:44:12.263  INFO 43204 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-10-22 21:44:12.263  INFO 43204 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'httpPutFormContentFilter' to: [/*] 2015-10-22 21:44:12.264  INFO 43204 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'OAuth2ClientContextFilter' to: [/*] 2015-10-22 21:44:12.265  INFO 43204 --- [ost-startStop-1] .e.DelegatingFilterProxyRegistrationBean : Mapping filter: 'springSecurityFilterChain' to: [/*] 2015-10-22 21:44:12.266  INFO 43204 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'requestContextFilter' to: [/*] 2015-10-22 21:44:12.266  INFO 43204 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] ``` </body>
		<created>2015-10-22 12:53:59</created>
		<closed>2015-10-27 10:57:40</closed>
	</bug>
	<bug>
		<id>4258</id>
		<title>ConfigFileEnvironmentPostProcessor does not log anything anymore</title>
		<body>`ConfigFileEnvironmentPostProcessor` is using a `DeferredLog` to cache log messages until the logging system is actually initialized. The processing of the configuration is made on one instance created by `EnvironmentPostProcessingApplicationListener` while further events (including the one that is triggering the logs) on another one.  Could it be that the second is created by `ConfigFileApplicationContextInitializer`?  I can see that `ConfigFileEnvironmentPostProcessor` is registered twice in `spring.factories` as well. </body>
		<created>2015-10-21 15:24:12</created>
		<closed>2015-10-28 18:58:58</closed>
	</bug>
	<bug>
		<id>4254</id>
		<title>EmbeddedServerPortFileWriter does not allow to override filename when used from META-INF/spring.factories</title>
		<body>It seems that this line should run next constructor: this(new File(...)) https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/EmbeddedServerPortFileWriter.java#L60 </body>
		<created>2015-10-21 10:16:49</created>
		<closed>2015-10-21 11:59:16</closed>
	</bug>
	<bug>
		<id>4236</id>
		<title>Spring AOP breaks whitelabel mvc binding </title>
		<body>Setup - latest 1.3 snapshot, with actuator and web starters.  Adding a AOP expression causes the mvc bindings for `/error` to not get mapped. eg. if you uncomment  the `@Aspect`, you will see the correct mapping registration in logs:  ```     2015-10-19 12:44:38.619  INFO 10472 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)     2015-10-19 12:44:38.619  INFO 10472 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) ```  Code snippet - try with and without @aspect commented.  ``` java     @SpringBootApplication     public class Z4Application {      public static void main(String[] args) {         SpringApplication.run(Z4Application.class, args);     }      @Configuration     // @Aspect     public static class Default_Collection {          @Pointcut("within(@org.springframework.stereotype.Controller *)")         private void mvcPC() {         };          @Around("mvcPC()")         public Object mvcAdvice(ProceedingJoinPoint pjp)                 throws Throwable {              System.out.println( "got here" );              return "Breaks Err";         }     }  ``` </body>
		<created>2015-10-19 16:54:13</created>
		<closed>2015-10-20 20:57:31</closed>
	</bug>
	<bug>
		<id>4233</id>
		<title>NamePatternFilter does not support regular expression character classes</title>
		<body>`curl -v 'localhost:8080/metrics/mem.fre\[a-z\]'` results in a 404 due to `No such metric: mem.fre[a-z]`. The `isRegex(String)` test fails to identify that `mem.fre[a-z]` is a regular expression. </body>
		<created>2015-10-19 10:20:47</created>
		<closed>2015-10-26 10:56:39</closed>
	</bug>
	<bug>
		<id>4231</id>
		<title>launch.script restart function does not follow Linux Standard Base Core Specification</title>
		<body>According to the [specification](http://refspecs.linuxbase.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html) restart function shall   &gt; stop and restart the service if the service is already running, otherwise start the service.  Right now restart aborts if service is not already running.  Actually, commit 9dec0971d62483422f2bdcb970bf68a0a49213fd should be reverted. </body>
		<created>2015-10-19 07:38:20</created>
		<closed>2015-10-20 10:28:05</closed>
	</bug>
	<bug>
		<id>4226</id>
		<title>Embedded Artemis isn't autoconfigured</title>
		<body>It looks like `ArtemisEmbeddedServerConfiguration`, which is supposed to configure embedded Artemis, isn't actually imported anywhere. </body>
		<created>2015-10-18 10:56:50</created>
		<closed>2015-10-19 09:46:39</closed>
	</bug>
	<bug>
		<id>4208</id>
		<title>Bean destroyMethod is not being called.</title>
		<body>Hi,  I'm trying to update to spring boot **1.2.6** and I'm having an issue with the _destroyMethod_ that I was not having on previous versions **(1.2.3 to 1.2.5)**.  I'm creating a simple embedded RedisServer bean available only for testing and I'm using the _destroyMethod_ to stop the server after all tests run. This was working fine with previous versions but with **1.2.6** version the _destroyMethod_ is not being called.  Small project reproducing this issue:  ``` xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;groupId&gt;tests&lt;/groupId&gt;     &lt;artifactId&gt;test-destroy&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;     &lt;properties&gt;         &lt;spring.version&gt;1.2.5.RELEASE&lt;/spring.version&gt;     &lt;/properties&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;${spring.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;version&gt;${spring.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;version&gt;4.11&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;             &lt;version&gt;${spring.version}&lt;/version&gt;             &lt;scope&gt;test&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/project&gt; ```  **Main class**  ``` java package app; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration;  @SpringBootApplication  @Configuration @ComponentScan("app") public class Main {     public static void main(String[] args) {         new SpringApplicationBuilder()                 .sources(Main.class)                 .web(false)                 .run(args);     } } ```  **On the test folder**  ``` java package app; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;  @Configuration public class ServiceTestConfiguration {      public class Service {          public void start() {             System.out.println("Started!!!");         }          public void stop() {             System.out.println("Stopped!!!");         }          public void test() {             System.out.println("Test!!!");         }     }      @Bean(destroyMethod = "stop")     public Service createBean() {         Service destroyTest = new Service();         destroyTest.start();         return destroyTest;     } } ```  ``` java package app; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.SpringApplicationConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = Main.class) public class ServiceTest {      @Autowired     private ServiceTestConfiguration.Service test;      @Test     public void test() {         test.test();     } } ```  With **&lt; 1.2.6**  it prints:  ``` bash Started!!! Test!!! Stopped!!! ```  With **1.2.6**  it prints:  ``` bash Started!!! Test!!! ```  Could this be an issue with the **spring-boot-starter-test** lib?  Thank you,  Cheers </body>
		<created>2015-10-16 05:44:03</created>
		<closed>2015-10-16 10:19:51</closed>
	</bug>
	<bug>
		<id>4164</id>
		<title>Error creating bean errorEndpoint</title>
		<body>With the following setup: - Web and actuator starters - Excluded `ErrorMvcAutoConfiguration` - Configured `management.port` property  Starting application fails with the following error: _Error creating bean with name 'errorEndpoint' defined in ... EndpointWebMvcChildContextConfiguration: Unsatisfied dependency ... ErrorAttributes_. </body>
		<created>2015-10-13 19:27:50</created>
		<closed>2015-10-14 11:20:27</closed>
	</bug>
	<bug>
		<id>4158</id>
		<title>Hibernate doesn't use autoconfigured HazelcastInstance for 2nd Level Cache</title>
		<body>I'm trying to use `HazelcastInstance` autoconfigured by Spring Boot as Hibernate 2nd Level Cache by defining the following in `hibernate.properties`:  ``` properties hibernate.cache.region.factory_class=com.hazelcast.hibernate.HazelcastCacheRegionFactory hibernate.cache.hazelcast.instance_name=defaultInstance ```  However, Spring Boot will initialize `EntityManagerFactory` before `HazelcastInstance`, resulting with configuration being loaded from `hazelcast-default.xml` instead of provided `Config` `@Bean`.  Minimal project that demonstrates the issue is available here: https://github.com/vpavic/hibernate-hazelcast-config  I have tried to add`HibernateJpaAutoConfiguration` as `@AutoConfigureBefore` on `HazelcastAutoConfiguration`, and `HazelcastAutoConfiguration` as `@AutoConfigureAfter` on `HibernateJpaAutoConfiguration`, but to no avail.  It would be nice to be able use such configuration without manually configuring `EntityManagerFactory`. </body>
		<created>2015-10-12 21:28:52</created>
		<closed>2015-11-06 11:02:08</closed>
	</bug>
	<bug>
		<id>4130</id>
		<title>Deadlock when receiving first http request while shutting down context.</title>
		<body>If we begin to shutdown the spring context while we receive the first HTTP request, spring-boot can deadlock. It seems that the first HTTP request kicks off some initialization that grabs a lock on the AnnotationConfigEmbeddedWebApplicationContext.  We saw this in a production application, but I managed to replicate it with some success in a demo application:  https://github.com/magJ/spring-boot-deadlock-issue-4130/  It might take a few attempts, but the above application should deadlock eventually.  Spring boot version: 1.2.4-RELEASE Java Version: 1.8.0_20  I also have a log sample and thread dump of what we saw in out prod application: https://gist.github.com/magJ/21b075fe38fdace94be8 </body>
		<created>2015-10-09 01:04:22</created>
		<closed>2015-10-09 11:42:40</closed>
	</bug>
	<bug>
		<id>4124</id>
		<title>JarFileArchive writes every app's unpacked libraries to the same location</title>
		<body>There are two exacutable jars that are run with different owners. Both of them contain libraries that should be unpacked. &lt;requiresUnpack&gt;  parameter of spring-boot-maven-plugin is used.  Process that starts first creates temp folder and puts extracted jars into it. Process that starts second can't write its jars in the same folder since it doesn't have write permission.  Name of temp folder - spring-boot-libs - is hardcoded in file "JarFileArchive.java" and cannot be specified for different projects.  I can solve this problem running all jars with similar owner. Nevertheless, I'd like to ask - is it planned to make name of temp folder configurable? </body>
		<created>2015-10-08 13:21:38</created>
		<closed>2015-10-14 15:34:08</closed>
	</bug>
	<bug>
		<id>4098</id>
		<title>Actuator metrics reports 200 instead of 201 when DeferredResult is used</title>
		<body>Hi,  In one of our projects we discoverd an issue with the metrics counts. I extracted a relevant example here: https://github.com/n1ko-w1ll/SpringBootActuatorIssue  Problem: If the return type is `DeferredResult&lt;ResponseEntity&lt;?&gt;&gt;`, the counted status code is 200 even if you set the result to `new ResponseEntity&lt;&gt;(HttpStatus.CREATED)`. Without the DeferredResult everything works as expected.  UPDATE:  the output of the metrics endpoint after 1 POST to /create looks like this:  ``` {   ...   "counter.status.200.create": 1,   ... } ``` </body>
		<created>2015-10-06 05:58:45</created>
		<closed>2015-10-06 10:01:23</closed>
	</bug>
	<bug>
		<id>4089</id>
		<title>A web app with `com.amazonaws:DynamoDBLocal` on the classpath fails to start</title>
		<body>``` java.lang.ClassNotFoundException: org.eclipse.jetty.webapp.WebAppContext     at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_60]     at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_60]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_60]     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_60]     ... 31 common frames omitted Wrapped by: java.lang.NoClassDefFoundError: org/eclipse/jetty/webapp/WebAppContext     at org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedJetty.jettyEmbeddedServletContainerFactory(EmbeddedServletContainerAutoConfiguration.java:91) ~[classes/:na]     at org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedJetty$$EnhancerBySpringCGLIB$$aa08d6ae.CGLIB$jettyEmbeddedServletContainerFactory$0(&lt;generated&gt;) ~[spring-core-4.2.2.BUILD-SNAPSHOT.jar:na]     at org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedJetty$$EnhancerBySpringCGLIB$$aa08d6ae$$FastClassBySpringCGLIB$$3a66e1cc.invoke(&lt;generated&gt;) ~[spring-core-4.2.2.BUILD-SNAPSHOT.jar:na]     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:318) ~[spring-context-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedJetty$$EnhancerBySpringCGLIB$$aa08d6ae.jettyEmbeddedServletContainerFactory(&lt;generated&gt;) ~[spring-core-4.2.2.BUILD-SNAPSHOT.jar:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     ... 20 common frames omitted Wrapped by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory]: Factory method 'jettyEmbeddedServletContainerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: org/eclipse/jetty/webapp/WebAppContext     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     ... 19 common frames omitted Wrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jettyEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedJetty.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory]: Factory method 'jettyEmbeddedServletContainerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: org/eclipse/jetty/webapp/WebAppContext     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:201) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:193) [classes/:na]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:156) [classes/:na]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:130) [classes/:na]     ... 8 common frames omitted Wrapped by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jettyEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedJetty.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory]: Factory method 'jettyEmbeddedServletContainerFactory' threw exception; nested exception is java.lang.NoClassDefFoundError: org/eclipse/jetty/webapp/WebAppContext     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:133) [classes/:na]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531) ~[spring-context-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) [classes/:na]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:720) [classes/:na]     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:352) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:292) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1033) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1022) [classes/:na]     at sample.freemarker.SampleWebFreeMarkerApplication.main(SampleWebFreeMarkerApplication.java:26) [classes/:na] ```  LocalDynamoDB depends on some of Jetty, but not all of the bits that Boot needs. We need to tighten up the classpath conditions.  A workaround is to add a `@Bean` that forces the use of Tomcat:  ``` java @Bean public EmbeddedServletContainerFactory tomcatContainerFactory() {     return new TomcatEmbeddedServletContainerFactory(); } ```  Stack Overflow question: http://stackoverflow.com/questions/32862876/springboot-and-dynamodb-local-embedded/32921693#32921693 </body>
		<created>2015-10-03 10:47:11</created>
		<closed>2015-10-05 10:42:01</closed>
	</bug>
	<bug>
		<id>4085</id>
		<title>Incorrect usage of application property in FreeMarkerTemplateAvailabilityProvider leads to issues with user supplied error views</title>
		<body>`org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider#isTemplateAvailable` in 1.3.0.M5 uses  `String loaderPath = environment.getProperty("spring.freemarker.path", FreeMarkerProperties.DEFAULT_TEMPLATE_LOADER_PATH);`  Instead it should use `spring.freemarker.template-loader-path` as per the Spring Boot documentation.  When using a non-default location for Freemarker templates, it is not possible to simply add a custom error view to replace the whitelabel error page.  Adding error.ftl to the template directory should suffice. However, due to the bug, it cannot be loaded because the system always looks in the default classpath:/templates/ location and does not find it. </body>
		<created>2015-10-02 20:04:39</created>
		<closed>2015-10-02 22:44:40</closed>
	</bug>
	<bug>
		<id>4079</id>
		<title>App that uses JPA and Flyway with a custom Flyway bean fails to start with "No bean named 'flywayInitializer' is defined"</title>
		<body>The problem can be recreated by updating `spring-boot-sample-data-jpa` to add a dependency on Flyway and declare a `Flyway` `@Bean`. It will fail to start with:  ``` org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'flywayInitializer' is defined     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:698) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1174) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:283) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:295) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196) ~[spring-beans-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1046) ~[spring-context-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:825) ~[spring-context-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537) ~[spring-context-4.2.2.BUILD-SNAPSHOT.jar:4.2.2.BUILD-SNAPSHOT]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) ~[classes/:na]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:720) [classes/:na]     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:352) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:292) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1033) [classes/:na]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:1022) [classes/:na]     at sample.data.jpa.SampleDataJpaApplication.main(SampleDataJpaApplication.java:28) [classes/:na] ``` </body>
		<created>2015-10-02 15:04:36</created>
		<closed>2015-10-05 12:36:59</closed>
	</bug>
	<bug>
		<id>4076</id>
		<title>[MongoProperties] createMongoClient fail when using hasCustomAddress = true and hasCustomCredentials = false</title>
		<body>When trying to connect to mongodb (java driver 3.0.3) using only :   ``` spring.data.mongodb.host=localhost spring.data.mongodb.port=27017 spring.data.mongodb.database=helloMongo ```  I get this error :   ``` Caused by: java.lang.IllegalArgumentException: credentialList can not be null     at com.mongodb.assertions.Assertions.notNull(Assertions.java:37)     at com.mongodb.connection.InternalStreamConnectionFactory.&lt;init&gt;(InternalStreamConnectionFactory.java:36)     at com.mongodb.connection.DefaultClusterableServerFactory.create(DefaultClusterableServerFactory.java:57)     at com.mongodb.connection.BaseCluster.createServer(BaseCluster.java:352)     at com.mongodb.connection.MultiServerCluster.addServer(MultiServerCluster.java:251)     at com.mongodb.connection.MultiServerCluster.&lt;init&gt;(MultiServerCluster.java:79)     at com.mongodb.connection.DefaultClusterFactory.create(DefaultClusterFactory.java:58)     at com.mongodb.Mongo.createCluster(Mongo.java:660)     at com.mongodb.Mongo.createCluster(Mongo.java:634)     at com.mongodb.Mongo.&lt;init&gt;(Mongo.java:279)     at com.mongodb.MongoClient.&lt;init&gt;(MongoClient.java:254)     at org.springframework.boot.autoconfigure.mongo.MongoProperties.createMongoClient(MongoProperties.java:181)     at com.agileasoft.cheers.config.MongoDBConfiguration.mongoClient(MongoDBConfiguration.java:27)     at com.agileasoft.cheers.config.MongoDBConfiguration$$EnhancerBySpringCGLIB$$3a663ab7.CGLIB$mongoClient$1(&lt;generated&gt;)     at com.agileasoft.cheers.config.MongoDBConfiguration$$EnhancerBySpringCGLIB$$3a663ab7$$FastClassBySpringCGLIB$$26de08d0.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:318)     at com.agileasoft.cheers.config.MongoDBConfiguration$$EnhancerBySpringCGLIB$$3a663ab7.mongoClient(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 110 more ```  In MongoPorperties.createMongoClient :   You should use the constructor new `MongoClient(Arrays.asList(new ServerAddress(host, port)),  options);` when credentials is null. </body>
		<created>2015-10-01 22:22:40</created>
		<closed>2016-01-18 16:07:05</closed>
	</bug>
	<bug>
		<id>4068</id>
		<title>Application property spring.main.web-environment=false  does not disable StandardServletEnvironment</title>
		<body>Using the property `spring.main.web-environment=false` in application properties still initializes the `StandardServletEnvironment`. I believe this is because the properties are set onto `SpringApplication` **after** `getOrCreateEnvironment()` is called. This makes it impossible to disable the ServletEnvironment through properties.  env: spring-boot:1.2.6.RELEASE </body>
		<created>2015-10-01 01:36:38</created>
		<closed>2015-10-02 07:41:49</closed>
	</bug>
	<bug>
		<id>4060</id>
		<title>Does actuator assert management.security.role when serving the /health endpoint?</title>
		<body>When testing actuator's `/health` endpoint with below configuration then the endpoint doesn't seem to respect the role set in `management.security.role` to deliver sensitive properties on that endpoint.  **Configuration**  ``` java @Order(SecurityProperties.ACCESS_OVERRIDE_ORDER) @Configuration public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter {      @Autowired     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception{         auth             .inMemoryAuthentication()                 .withUser("user").password("password").roles("USER").and()                 .withUser("admin").password("password").roles("USER", "ADMIN");     } } ```  **Response for unauthenticated request** (as expected)  ``` json {   "status": "UP",   "links": [     {       "rel": "self",       "href": "http://localhost:29001/health"     }   ] } ```  **Response for authenticated request with role `USER`** (shouldn't `diskSpace` be only visible to `ADMIN`?)  ``` json {   "status": "UP",   "diskSpace": {     "status": "UP",     "total": 511250432000,     "free": 33474105344,     "threshold": 10485760   },   "links": [     {       "rel": "self",       "href": "http://localhost:29001/health"     }   ] } ``` </body>
		<created>2015-09-30 14:11:14</created>
		<closed>2015-10-02 09:42:53</closed>
	</bug>
	<bug>
		<id>4049</id>
		<title>MongoDB without Spring Data MongoDB</title>
		<body>When I add the mongodb driver (org.mongodb:mongo-java-driver) without spring-data-mongodb as a dependency and start the application it throws a ClassNotFoundException (Spring Boot 1.3.0.M5)  The problem is that MongoAutoConfiguration has a @ConditionalOnClass on MongoClient But the class MongoProperties requires FieldNamingStrategy from the Spring Data library.  As a workaround I can exclude MongoAutoConfiguration from auto configuration  ``` @EnableAutoConfiguration(exclude = MongoAutoConfiguration.class) ```  ---  ``` @ConditionalOnClass(MongoClient.class) public class MongoAutoConfiguration { ```  ``` public class MongoProperties {         ....     private Class&lt;? extends FieldNamingStrategy&gt; fieldNamingStrategy; ```  ``` java.lang.ClassNotFoundException: org.springframework.data.mapping.model.FieldNamingStrategy     at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_60]     at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_60]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_60]     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_60]     at java.lang.Class.forName0(Native Method) ~[na:1.8.0_60]     at java.lang.Class.forName(Class.java:348) ~[na:1.8.0_60]     at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114) ~[na:1.8.0_60]     ... 51 common frames omitted Wrapped by: java.lang.TypeNotPresentException: Type org.springframework.data.mapping.model.FieldNamingStrategy not present     at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117) ~[na:1.8.0_60]     at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125) ~[na:1.8.0_60]     at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) ~[na:1.8.0_60]     at sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.getUpperBounds(WildcardTypeImpl.java:130) ~[na:1.8.0_60]     at com.sun.beans.TypeResolver.resolve(TypeResolver.java:175) ~[na:1.8.0_60]     at com.sun.beans.TypeResolver.resolve(TypeResolver.java:218) ~[na:1.8.0_60]     at com.sun.beans.TypeResolver.resolve(TypeResolver.java:169) ~[na:1.8.0_60]     at com.sun.beans.TypeResolver.resolve(TypeResolver.java:218) ~[na:1.8.0_60]     at com.sun.beans.TypeResolver.resolveInClass(TypeResolver.java:96) ~[na:1.8.0_60]     at java.beans.FeatureDescriptor.getParameterTypes(FeatureDescriptor.java:387) ~[na:1.8.0_60]     at java.beans.MethodDescriptor.setMethod(MethodDescriptor.java:116) ~[na:1.8.0_60]     at java.beans.MethodDescriptor.&lt;init&gt;(MethodDescriptor.java:72) ~[na:1.8.0_60]     at java.beans.MethodDescriptor.&lt;init&gt;(MethodDescriptor.java:56) ~[na:1.8.0_60]     at java.beans.Introspector.getTargetMethodInfo(Introspector.java:1205) ~[na:1.8.0_60]     at java.beans.Introspector.getBeanInfo(Introspector.java:426) ~[na:1.8.0_60]     at java.beans.Introspector.getBeanInfo(Introspector.java:173) ~[na:1.8.0_60]     at org.springframework.beans.CachedIntrospectionResults.&lt;init&gt;(CachedIntrospectionResults.java:279) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:189) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:177) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:236) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1368) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1347) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1209) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-4.2.1.RELEASE.jar:4.2.1.RELEASE]     ... 28 common frames omitted ``` </body>
		<created>2015-09-29 16:42:07</created>
		<closed>2015-09-30 12:57:07</closed>
	</bug>
	<bug>
		<id>4045</id>
		<title>Environment variable not bound</title>
		<body>Since Spring Boot `v1.2.6.RELEASE` the binding of environment variables behaves differently. The properties of a class with an `@ConfigurationProperties` annotation are not set when combining a YAML file and OS environment variables. The following github repo contains a unit test to reproduce the problem:  https://github.com/jgoelen/spring-boot-env-bug  The test works fine with version 1.2.5.RELEASE (repo tag v1.2.5.RELEASE) </body>
		<created>2015-09-29 09:41:43</created>
		<closed>2015-09-29 22:22:48</closed>
	</bug>
	<bug>
		<id>4040</id>
		<title>Remote restart doesn't appear to work with jar archives</title>
		<body>Issue #3086 should have made remote restart work with jars, but this doesn't appear to be the case. </body>
		<created>2015-09-28 22:25:14</created>
		<closed>2015-10-14 08:38:48</closed>
	</bug>
	<bug>
		<id>4026</id>
		<title>LoggingSystem shutdown on application context stop (logback)</title>
		<body>As per Logback documentation (http://logback.qos.ch/manual/configuration.html#stopContext), one should properly stop the logger upon application shutdown.   A typical usage scenario is when using appenders that require proper flush before the virtual machine exists (like a file appender with buffering enabled, or a TCP network connector with a buffer).  It appears that `LoggingApplicationListener` calls `loggingSystem.cleanUp()` when the context is closed. But most LoggingSystem implementations provided by SpringBoot only performs some light cleanup tasks but don't actually shutdown the appenders.  My feeling is `LogbackLoggingSystem.cleanUP()` should properly shutdown the appenders as described in their documentation. </body>
		<created>2015-09-25 16:43:53</created>
		<closed>2015-10-08 14:54:41</closed>
	</bug>
	<bug>
		<id>4017</id>
		<title>Improvements to MongoProperties for auto-configuration</title>
		<body>Hi,  I am facing one issue while auto-configuring Mongo. My application contains development properties inside the JAR like this:  ``` properties spring.data.mongodb.host=localhost spring.data.mongodb.port=27017 spring.data.mongodb.database=myDatabase ```  On production, I have a file besides the JAR in the same folder where I wish to override the configuration to connect to a Mongo replica set. Ideally I want it to look like this:  ``` properties spring.data.mongodb.uri=mongodb://myMasterMongoServer:27017,mySlaveMongoServer:27017/myDatabase ```  The problem here is that it will still try to connect to "localhost". That's because since the "host" and "port" properties are in the JAR, and are not overridden, they are still considered. I would like to propose that the "uri" property takes priority over the "host" and "port", meaning if both are defined together, the "uri" would be the one considered. Like on Rabbit where the "addresses" property prevails over "host".  At first I tried this:  ``` properties spring.data.mongodb.uri=mongodb://myMasterMongoServer:27017,mySlaveMongoServer:27017/myDatabase spring.data.mongodb.host= spring.data.mongodb.port= ```  This would set the properties to empty and then I was expecting it to work. However, it still did not work. The reason why is that the "host" property is used if is different then "null", and here it becomes an empty String. I am not aware how we can set a property to "null", I guess it's not possible. So another change could be to check for StringUtils.hasText(host) and not host != null on the class MongoProperties.  In the end, the way I was able to make it work, was to change my property file inside the JAR to also only use the "uri" property like this:  ``` properties spring.data.mongodb.uri=mongodb://localhost:27017/myDatabase ```  Now then production can override the property and host and port are not defined anywhere. That works, but I still think this could be improved with the suggestions made above.  Thanks. </body>
		<created>2015-09-23 22:47:02</created>
		<closed>2017-10-10 17:05:41</closed>
	</bug>
	<bug>
		<id>4014</id>
		<title>Parent ApplicationContexts are not respected</title>
		<body>If you set a parent context with `org.springframework.boot.builder.SpringApplicationBuilder#parent(org.springframework.context.ConfigurableApplicationContext)` and startup as a WAR, beans from the parent context are not visible.  Directly adding `ParentContextApplicationContextInitializer` to the `SpringApplicationBuilder` fixes the problem.  Starting with Gradle's bootRun will not cause this problem to appear.   My analysis:  `org.springframework.boot.builder.SpringApplicationBuilder#run` has explicit code for adding the `ParentContextApplicationContextInitializer`. When `SpringBootServletInitializer` is used, `org.springframework.boot.builder.SpringApplicationBuilder#build` is invoked immediately before any initializers are added. </body>
		<created>2015-09-23 19:40:26</created>
		<closed>2015-10-12 12:07:53</closed>
	</bug>
	<bug>
		<id>3994</id>
		<title>velocity template can't use "spring.velocity.charset"</title>
		<body>`VelocityAutoConfiguration.java`  right now the code is:  ``` java         protected void applyProperties(VelocityEngineFactory factory) {             factory.setResourceLoaderPath(this.properties.getResourceLoaderPath());             factory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());             Properties velocityProperties = new Properties();             velocityProperties.putAll(this.properties.getProperties());             factory.setVelocityProperties(velocityProperties);         } ```  After fix the code is:   ``` java         protected void applyProperties(VelocityEngineFactory factory) {             factory.setResourceLoaderPath(this.properties.getResourceLoaderPath());             factory.setPreferFileSystemAccess(this.properties.isPreferFileSystemAccess());              Properties velocityProperties = new Properties();             velocityProperties.putAll(this.properties.getProperties());                         velocityProperties.setProperty("input.encoding", this.properties.getCharset());             factory.setVelocityProperties(velocityProperties);         } ```  added code:  ``` java   velocityProperties.setProperty("input.encoding", this.properties.getCharset()); ```  so that we can use the "spring.velocity.charset" this is ugly, but right now i can use UTF-8 </body>
		<created>2015-09-21 12:39:50</created>
		<closed>2015-10-02 14:22:36</closed>
	</bug>
	<bug>
		<id>3968</id>
		<title>RemoteSpringApplication/Debug Tunnel not working with Proxy</title>
		<body>I recently tried the debug tunnel feature of Spring Boot Remote 1.3.0.M5. Unfortunately, `org.springframework.boot.devtools.RemoteSpringApplication` is not picking up my proxy settings. This means, I am unable to use the remote debug feature when working from behind a corporate proxy.  Setting `JAVA_OPTS=-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=PORT` for `RemoteSpringApplication` to use a local proxy to bypass the regular proxy does not work.  I checked the Spring Boot code with the debugger and noticed that the `SimpleClientHttpRequestFactory` passed in `RemoteClientConfiguration.remoteDebugTunnelClient` has a NULL proxy member.  I noticed the other tickets on similar issues (https://github.com/spring-projects/spring-boot/issues/3816, https://github.com/spring-projects/spring-boot/issues/136, https://github.com/spring-projects/spring-boot/issues/914) but I have not found a solution there. </body>
		<created>2015-09-16 06:35:05</created>
		<closed>2015-10-02 09:37:54</closed>
	</bug>
	<bug>
		<id>3960</id>
		<title>GuavaCacheStatisticsProvider may throw NCD on GuavaCache</title>
		<body>Starting a boot app with the actuator without `spring-context-support` on the classpath but with guava present leads to:  ``` Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'guavaCacheStatisticsProvider' defined in class path resource [org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration$GuavaCacheStatisticsConfiguration.class]: Post-processing failed of bean type [class org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider] failed; nested exception is java.lang.IllegalStateException: Failed to introspect bean class [org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider] for persistence metadata: could not find class that it depends on     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:940)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:518)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:305)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:301)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:834)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:667)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:342)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:273)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:980)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:969)     at demo.App.main(App.java:20)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) Caused by: java.lang.IllegalStateException: Failed to introspect bean class [org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider] for persistence metadata: could not find class that it depends on     at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:396)     at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:333)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:935)     ... 21 more Caused by: java.lang.NoClassDefFoundError: org/springframework/cache/guava/GuavaCache     at java.lang.Class.getDeclaredMethods0(Native Method)     at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)     at java.lang.Class.getDeclaredMethods(Class.java:1962)     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:606)     at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:483)     at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.buildPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:426)     at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:392)     ... 23 more ``` </body>
		<created>2015-09-15 02:08:29</created>
		<closed>2015-09-30 12:36:47</closed>
	</bug>
	<bug>
		<id>3955</id>
		<title>EmbedMongo with port=0 couses java.lang.StackOverflowError </title>
		<body>Hi,  when using Embedded MongoDB support with spring.data.mongodb.port=0 I ended up with java.lang.StackOverflowError.  The problem is with recursive invocation of method private void setPortProperty(ApplicationContext context, int port) from EmbeddedMongoAutoConfiguration.  Instead of:  ``` if (this.context.getParent() != null) {             setPortProperty(this.context.getParent(), port);         } ```  should be:  ``` if (context.getParent() != null) {             setPortProperty(context.getParent(), port);         } ```  Without "this" keyword. </body>
		<created>2015-09-14 07:05:41</created>
		<closed>2015-09-15 10:59:56</closed>
	</bug>
	<bug>
		<id>3931</id>
		<title>bootRepackage depends on EAR plugin task causing circular dependencies between tasks</title>
		<body> Build configured to run tasks in the following order war-&gt;bootRepackage-&gt;ear.  Relevant gradle build configuration:  ``` groovy war { ............ }  bootRepackage {     withJarTask war }  dependencies {     deploy files(bootRepackage) }  ear {     deploymentDescriptor {         displayName = project.name         webModule(war.archiveName, '/service')     }  } ```  The issue happens in such configuration due to circular dependencies between bootRepackage and EAR tasks.  The next code snippet registers archive task deps as default dependencies:  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java  ``` java TaskDependency runtimeProjectDependencyJarTasks = runtimeConfiguration                 .getTaskDependencyFromProjectDependency(true, JavaPlugin.JAR_TASK_NAME);         task.dependsOn(                 project.getConfigurations().getByName(Dependency.ARCHIVES_CONFIGURATION)                         .getAllArtifacts().getBuildDependencies(),                 runtimeProjectDependencyJarTasks); ```  The above code causes bootRepackage to depend on the next tasks:  ``` groovy bootRepackage task deps [task 'distZip', task ':distTar', task ':ear', task ':war'] ``` </body>
		<created>2015-09-09 11:20:41</created>
		<closed>2017-04-04 15:37:45</closed>
	</bug>
	<bug>
		<id>3930</id>
		<title>Does launch script support java agent? </title>
		<body>Hi,  We have been trying to start spring boot application (as executable jar) from `/etc/init.d` with new relic. Couldn't find a way to use javaagents with the builtin script. We ended up adding customized script using `mvn repackage`.  Wondering if current script supports this option! If not - is there any plan to add this feature in future?   </body>
		<created>2015-09-09 05:19:26</created>
		<closed>2015-09-21 13:51:28</closed>
	</bug>
	<bug>
		<id>3925</id>
		<title>spring-boot-devtools RemoteSpringApplication fails starting because of bootstrap.yml config-server enabled</title>
		<body>The spring-boot app I want to remotely debug uses spring-cloud-config-server for configuration, so my project has this configured in ' bootstrap.yml'  `spring.cloud.config.uri=${vcap.services.configService.credentials.uri:http://localhost:8888}`  if I start `RemoteSpringApplication` within this project it tries to connect to the config server at localhost (which is not there, as I just want to start the http tunnel) and so it fails: `Could not locate PropertySource and the fail fast property is set, failing` `I/O error on GET request for "http://localhost:8888/logchange-debug/default/master":Connection refused; nested exception is java.net.ConnectException: Connection refused`  For better developer experience I guess the `RemoteSpringApplication` should ignore some of or all of the `application.yml` and `bootstrap.yml` settings of the project it lives in. </body>
		<created>2015-09-08 15:13:38</created>
		<closed>2015-09-28 22:34:33</closed>
	</bug>
	<bug>
		<id>3912</id>
		<title>Posted forms are decoded with ISO-8859-1 instead of UTF-8</title>
		<body>Hi,  after upgrading from 1.3.0.M4 to 1.3.0.M5 form parameter if sent with a POST seem to be decoded with ISO-8859-1 instead of UTF-8. Have there been any changes? </body>
		<created>2015-09-07 09:16:53</created>
		<closed>2015-09-21 14:37:50</closed>
	</bug>
	<bug>
		<id>3902</id>
		<title>spring-boot-actuator-docs jar contains application.properties</title>
		<body>The `spring-boot-actuator-docs` jar for 1.3.0.M5 contains an `application.properties` file with following contents  ``` # management.context-path=/admin logging.path: target/logs ```  Seems that it should be excluded from the package. </body>
		<created>2015-09-04 23:43:33</created>
		<closed>2015-09-21 14:20:35</closed>
	</bug>
	<bug>
		<id>3889</id>
		<title>Remote devtools  does not work with Spring Security</title>
		<body>I have a simple app that uses Spring Security. I just customized the authentication manager but I believe just adding `spring-boot-starter-security` is enough to reproduce the issue.  I am trying to push some changes remotely and I get a 401 error in the devtools client. The extra endpoints that are exposed by devtools should be managed security-wise. If I remove security from the same app and push again, everything works properly. </body>
		<created>2015-09-03 07:31:21</created>
		<closed>2015-09-03 16:36:38</closed>
	</bug>
	<bug>
		<id>3888</id>
		<title>ClassNotFoundException when management role is set without Spring Security</title>
		<body>To reproduce, create a vanilla app with the actuator (no Spring Security). It works fine but if you specify `management.security.role` you get this  ``` Caused by: java.lang.NoClassDefFoundError: org/springframework/security/config/http/SessionCreationPolicy     at org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$Security.&lt;init&gt;(ManagementServerProperties.java:158)     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:408)     at java.lang.Class.newInstance(Class.java:433)     at org.springframework.beans.BeanUtils.instantiate(BeanUtils.java:78)     at org.springframework.beans.AbstractNestablePropertyAccessor.newValue(AbstractNestablePropertyAccessor.java:914)     at org.springframework.beans.AbstractNestablePropertyAccessor.createDefaultPropertyValue(AbstractNestablePropertyAccessor.java:887) ``` </body>
		<created>2015-09-03 07:26:18</created>
		<closed>2016-11-05 10:16:20</closed>
	</bug>
	<bug>
		<id>3856</id>
		<title>ClassNotFoundException when setting context class in SpringApplicationBuilder without spring-web</title>
		<body>When running a Spring Boot application using the SpringApplicationBuilder and a custom context class, a ClassNotFoundException is thrown if spring-web is not on the classpath.  The behavior I would expect is that the application startup should not depend on spring-web being on the classpath.  ``` java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:418)     at java.lang.Thread.run(Thread.java:724) Caused by: java.lang.NoClassDefFoundError: org/springframework/web/context/WebApplicationContext     at org.springframework.boot.SpringApplication.setApplicationContextClass(SpringApplication.java:875)     at org.springframework.boot.builder.SpringApplicationBuilder.contextClass(SpringApplicationBuilder.java:253)     at example.ExampleApplication.main(ExampleApplication.java:10)     ... 6 more Caused by: java.lang.ClassNotFoundException: org.springframework.web.context.WebApplicationContext     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 9 more ```  The following example project demonstrates the problem.  It fails on "mvn spring-boot:run" with the ClassNotFoundException, but runs when when spring-web is added as a dependency.  ExampleApplication.java  ``` java package example;  import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.context.annotation.AnnotationConfigApplicationContext;  @SpringBootApplication public class ExampleApplication {     public static void main(String[] args) {         new SpringApplicationBuilder(ExampleApplication.class).contextClass(ExampleContext.class).run(args);     }      public static class ExampleContext extends AnnotationConfigApplicationContext {     } } ```  pom.xml:  ``` xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.example&lt;/groupId&gt;   &lt;artifactId&gt;example&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;1.2.5.RELEASE&lt;/version&gt;     &lt;relativePath/&gt;   &lt;/parent&gt;    &lt;dependencies&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;    &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt; &lt;/project&gt; ``` </body>
		<created>2015-09-01 01:34:50</created>
		<closed>2015-09-01 16:41:11</closed>
	</bug>
	<bug>
		<id>3841</id>
		<title>CLI causes error with description option having white spaces</title>
		<body>``` $ spring --version Spring CLI v1.3.0.M4  $ spring init --description="a b c" java.lang.IllegalArgumentException: Only the target location may be specified         at org.springframework.util.Assert.isTrue(Assert.java:68)         at org.springframework.boot.cli.command.init.InitCommand$InitOptionHandler.createProjectGenerationRequest(InitCommand.java:216)         at org.springframework.boot.cli.command.init.InitCommand$InitOptionHandler.generateProject(InitCommand.java:207)         at org.springframework.boot.cli.command.init.InitCommand$InitOptionHandler.run(InitCommand.java:188)         at org.springframework.boot.cli.command.options.OptionHandler.run(OptionHandler.java:92)         at org.springframework.boot.cli.command.OptionParsingCommand.run(OptionParsingCommand.java:53)         at org.springframework.boot.cli.command.CommandRunner.run(CommandRunner.java:219)         at org.springframework.boot.cli.command.CommandRunner.runAndHandleErrors(CommandRunner.java:171)         at org.springframework.boot.cli.SpringCli.main(SpringCli.java:51)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:497)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)         at java.lang.Thread.run(Thread.java:745) ```  These are also failed.  ``` $ spring init --description='a b c' java.lang.IllegalArgumentException: Only the target location may be specified         at org.springframework.util.Assert.isTrue(Assert.java:68)         ..(snip).. $ spring init --description='a\ b\ c' java.lang.IllegalArgumentException: Only the target location may be specified         at org.springframework.util.Assert.isTrue(Assert.java:68)         ..(snip).. $ spring init --description="a\ b\ c" java.lang.IllegalArgumentException: Only the target location may be specified         at org.springframework.util.Assert.isTrue(Assert.java:68)         ..(snip).. $ spring init --description=a\ b\ c java.lang.IllegalArgumentException: Only the target location may be specified         at org.springframework.util.Assert.isTrue(Assert.java:68)         ..(snip).. ```  Without white spaces, it works well.  ``` $ spring init --description=abc Using service at https://start.spring.io         ..(snip).. ```  I think the description option should accept white spaces. </body>
		<created>2015-08-28 07:08:50</created>
		<closed>2015-10-07 08:58:16</closed>
	</bug>
	<bug>
		<id>3803</id>
		<title>MessageSourceAutoConfiguration should only check the current context for a message source bean</title>
		<body>The `@Conditional` on `MessageSourceAutoConfiguration` checks for an existing bean of type `MessageSource` so a parent context can switch it off, even if the parent is empty (the default). We should switch to only check the current context. </body>
		<created>2015-08-21 14:43:34</created>
		<closed>2015-10-16 10:19:51</closed>
	</bug>
	<bug>
		<id>3801</id>
		<title>Inconsistent naming strategy for counters (and metrics?)</title>
		<body>Boot considers a metric to be a counter when its name starts with `counter.` upon reading, and wraps it by adding `counter.` but only if it does not start with `counter` (note the lack of dot at the end). This is not symmetric and results in inconsistencies if the name is something like `counter-foo`. From `DefaultCounterService`:  ``` private String wrap(String metricName) {         if (this.names.containsKey(metricName)) {             return this.names.get(metricName);         }         if (metricName.startsWith("counter") || metricName.startsWith("meter")) {             return metricName;         }         String name = "counter." + metricName;         this.names.put(metricName, name);         return name;     } ``` </body>
		<created>2015-08-21 07:29:42</created>
		<closed>2015-08-21 07:38:02</closed>
	</bug>
	<bug>
		<id>3798</id>
		<title>Spring Batch AutoConfig does not set tablePrefix for JobRepository</title>
		<body>In `org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer` when creating the JobExplorer the tablePrefix is set, but it is _not_ set when creating the job repository and thus it always attemps to use the default prefix, which fails at runtime.   This seems to be an oversight as the Spring Batch documentation specifically states:  "If you set the table prefix on the job repository, don't forget to set it on the job explorer as well."   Sorry, I was going to submit a pull request to correct, but I submitted another issue because those are failing so I cannot validate my change.  </body>
		<created>2015-08-20 17:01:06</created>
		<closed>2015-08-27 14:33:04</closed>
	</bug>
	<bug>
		<id>3792</id>
		<title>Possible wrong imports</title>
		<body>``` spring-boot &gt; git grep -h 'import .*StringUtils;' | sort -u import org.codehaus.plexus.util.StringUtils; import org.flywaydb.core.internal.util.StringUtils; import org.springframework.util.StringUtils; spring-boot &gt; git grep org.flywaydb.core.internal.util.StringUtils spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java:import org.flywaydb.core.internal.util.StringUtils; spring-boot &gt; git grep org.codehaus.plexus.util.StringUtils spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java:import org.codehaus.plexus.util.StringUtils; ```  I believe that `EnableAutoConfigurationImportSelectorTests` and `ServiceCapabilitiesReportGenerator` have imported wrong `StringUtils`. Am I right? </body>
		<created>2015-08-20 10:54:16</created>
		<closed>2015-08-20 12:48:37</closed>
	</bug>
	<bug>
		<id>3787</id>
		<title>RelaxedDataBinder should not add a suffix dot if it already exists</title>
		<body>If one creates the binder as `new RelaxedDataBinder(resourceProperties, "spring.foo.");` then the binder looks for keys whose prefix is `spring.foo..` (notice the extra dot). </body>
		<created>2015-08-20 06:34:01</created>
		<closed>2015-08-20 08:43:23</closed>
	</bug>
	<bug>
		<id>3784</id>
		<title>Devtools: ClassCastException from Controller proxy thrown on first web request after hot restart</title>
		<body>First noticed in M3, but just tested on M4 too, still happening. The hot restart itself works ok but I get this exception on first page load in browser after restart. Using, and app running in latest version of STS.  Offending code is in a controller that all my other controllers extend.  ```     @ModelAttribute(value="createEventLink")     public Link addCreateEventLinkToModel() throws IOException {         return linkTo(methodOn(EventController.class)                 .newEvent(null, null))                 .withRel("New Event");     } ```  stacktrace follows  ``` 2015-08-19 21:38:49.322  INFO 1595 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet' 2015-08-19 21:38:49.322  INFO 1595 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started 2015-08-19 21:38:49.325  INFO 1595 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 3 ms 2015-08-19 21:38:49.349 ERROR 1595 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: org.collaborate.event.web.EventController$$EnhancerByCGLIB$$8e92b703 cannot be cast to org.collaborate.event.web.EventController] with root cause java.lang.ClassCastException: org.collaborate.event.web.EventController$$EnhancerByCGLIB$$8e92b703 cannot be cast to org.collaborate.event.web.EventController     at org.collaborate.web.BaseController.addCreateEventLinkToModel(BaseController.java:50) ~[bin/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_20]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_20]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_20]     at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_20]     at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.method.annotation.ModelFactory.invokeModelAttributeMethods(ModelFactory.java:136) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.method.annotation.ModelFactory.initModel(ModelFactory.java:109) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:784) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilterInternal(ResourceUrlEncodingFilter.java:51) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:235) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:96) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:69) ~[spring-boot-actuator-1.3.0.M4.jar:1.3.0.M4]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) ~[tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521) [tomcat-embed-core-8.0.23.jar:8.0.23]     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478) [tomcat-embed-core-8.0.23.jar:8.0.23]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_20]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_20]     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.23.jar:8.0.23]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_20] ``` </body>
		<created>2015-08-19 20:50:23</created>
		<closed>2015-10-08 17:53:59</closed>
	</bug>
	<bug>
		<id>3781</id>
		<title>/configprops endpoint NoClassDefFoundError: org.apache.catalina.valves.AccessLogValve with Undertow</title>
		<body>Hi,   I'm using spring-boot 1.3.0.M3 with actuator and Undertow instead of Tomcat and `/configprops` endpoint is throwing exception with stacktrace provided below. Other endpoints (`/metrics`, `/health`, `/beans`, `/logfile`, `/env`, `/info`, `/dump`, `/trace`, `/mappings`, `/autoconfig`) are working OK, at least at their base paths.  ``` 2015-08-19 13:35:30.224 ERROR 17941 --- [ XNIO-2 task-13] io.undertow.request                      : UT005023: Exception handling request to /configprops java.lang.ClassNotFoundException: org.apache.catalina.valves.AccessLogValve     at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_51]     at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_51]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_51]     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_51]     ... 142 common frames omitted Wrapped by: java.lang.NoClassDefFoundError: org/apache/catalina/valves/AccessLogValve     at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_51]     at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_51]     at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_51]     at com.fasterxml.jackson.databind.introspect.AnnotatedClass._findClassMethods(AnnotatedClass.java:1046) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.AnnotatedClass._addMemberMethods(AnnotatedClass.java:602) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.AnnotatedClass.resolveMemberMethods(AnnotatedClass.java:426) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.AnnotatedClass.memberMethods(AnnotatedClass.java:253) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addMethods(POJOPropertiesCollector.java:477) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collectAll(POJOPropertiesCollector.java:284) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getJsonValueMethod(POJOPropertiesCollector.java:169) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueMethod(BasicBeanDescription.java:222) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(BasicSerializerFactory.java:355) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:210) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:153) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1199) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1153) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(SerializerProvider.java:634) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(PropertySerializerMap.java:64) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanPropertyWriter._findAndAddDynamic(BeanPropertyWriter.java:819) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:634) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.serializeAsField(SimpleBeanPropertyFilter.java:208) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(BeanSerializerBase.java:725) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:656) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter.serializeAsField(SimpleBeanPropertyFilter.java:208) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(BeanSerializerBase.java:725) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:130) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3403) ~[jackson-databind-2.6.1.jar:2.6.1]     at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3351) ~[jackson-databind-2.6.1.jar:2.6.1]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.safeSerialize(ConfigurationPropertiesReportEndpoint.java:152) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extract(ConfigurationPropertiesReportEndpoint.java:113) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extract(ConfigurationPropertiesReportEndpoint.java:99) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:86) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:61) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:52) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_51]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_51]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_51]     at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_51]     at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:111) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:806) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     ... 95 common frames omitted Wrapped by: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/apache/catalina/valves/AccessLogValve     at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletionWithError(DispatcherServlet.java:1303) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:977) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) ~[javax.servlet-api-3.1.0.jar:3.1.0]     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0]     at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:86) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:130) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilterInternal(ResourceUrlEncodingFilter.java:51) ~[spring-webmvc-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:235) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at com.github.dandelion.core.web.DandelionFilter.doFilter(DandelionFilter.java:128) ~[dandelion-core-1.1.1.jar:na]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:205) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:96) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.2.RELEASE.jar:4.0.2.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:69) ~[spring-boot-actuator-1.3.0.M3.jar:1.3.0.M3]     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.0.RELEASE.jar:4.2.0.RELEASE]     at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:132) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:85) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:58) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:72) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.security.handlers.SecurityInitialHandler.handleRequest(SecurityInitialHandler.java:76) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:282) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:261) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:80) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:172) ~[undertow-servlet-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.server.Connectors.executeRootHandler(Connectors.java:199) ~[undertow-core-1.2.10.Final.jar:1.2.10.Final]     at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:774) [undertow-core-1.2.10.Final.jar:1.2.10.Final]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_51]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_51]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_51] ``` </body>
		<created>2015-08-19 11:38:12</created>
		<closed>2015-08-20 15:17:51</closed>
	</bug>
	<bug>
		<id>3765</id>
		<title>DbHealthIndicator is enabled even if spring-jdbc is not available</title>
		<body>The `DbHealthIndicator` uses a `JdbcTemplate` behind the scenes. If a project has a `DataSource` but does not use `spring-jdbc` the app blows up on startup. Check also [this stackoverflow thread](http://stackoverflow.com/questions/32025166/start-up-error-on-spring-boot-when-adding-actuator-dependency) </body>
		<created>2015-08-15 16:55:03</created>
		<closed>2015-08-17 08:16:00</closed>
	</bug>
	<bug>
		<id>3763</id>
		<title>SpringApplicationContextLoader should not register shutdown hooks</title>
		<body>The `SpringApplicationContextLoader` should disable shutdown hooks to prevent errors like this:  ``` java.sql.SQLException: Database lock acquisition failure: attempt to connect while db opening /closing     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCConnection.&lt;init&gt;(Unknown Source)     at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)     at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)     at org.springframework.jdbc.datasource.SimpleDriverDataSource.getConnectionFromDriver(SimpleDriverDataSource.java:140)     at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnectionFromDriver(AbstractDriverBasedDataSource.java:155)     at org.springframework.jdbc.datasource.AbstractDriverBasedDataSource.getConnection(AbstractDriverBasedDataSource.java:120)     at org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:41)     at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:177)     at org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy.shutdown(EmbeddedDatabaseFactory.java:250)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:350)     at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:273)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:900)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:907)     at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:908)     at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:884)     at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:804) Caused by: org.hsqldb.HsqlException: Database lock acquisition failure: attempt to connect while db opening /closing     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)     at org.hsqldb.DatabaseManager.newSession(Unknown Source)     ... 23 common frames omitted ``` </body>
		<created>2015-08-14 22:13:01</created>
		<closed>2015-09-03 18:30:26</closed>
	</bug>
	<bug>
		<id>3745</id>
		<title>Environment variables are not bound properly when unknown fields are not ignored</title>
		<body>When deploying to Cloud Foundry, the embedded web server (Undertow in my case) must use the port defined in the PORT env variable. Simply deploying the repackaged jar to CF used to work for M2. After an upgrade to M3, Undertow always starts on its default port 8080, which results in an error: 'Instance (index 0) failed to start accepting connections'. This issue is caused by CF checking if the application listens on the port it defined for it, and if it doesn't, it's an error and the app is killed. I'm not sure if this is a Boot issue, or maybe Undertow's (I think M3 upgrades Untertow, among others). </body>
		<created>2015-08-13 09:46:47</created>
		<closed>2015-08-13 11:52:33</closed>
	</bug>
	<bug>
		<id>3726</id>
		<title>Dev tools doesn't switch on the H2 console auto-configuration</title>
		<body>I am working on a [sample project](https://github.com/snicoll-scratches/modern-component-design-spring-4.2) using M3 with no particular option and the `h2-console` does not show up as it should.  I can see in `/env` that the property is enabled  ``` refresh: { spring.mustache.cache: "false", spring.h2.console.enabled: "true", spring.groovy.template.cache: "false", spring.thymeleaf.cache: "false", spring.freemarker.cache: "false", spring.velocity.cache: "false", server.session.persistent: "true" }, ```  However the auto-config reports that  ``` [ { condition: "OnClassCondition", message: "@ConditionalOnClass classes found: org.h2.server.web.WebServlet" }, { condition: "OnWebApplicationCondition", message: "found web application StandardServletEnvironment" }, { condition: "OnPropertyCondition", message: "@ConditionalOnProperty missing required properties spring.h2.console.enabled " } ], ```  Could it be that the Devtools BPP runs _too late_? </body>
		<created>2015-08-11 14:55:04</created>
		<closed>2015-08-17 19:09:24</closed>
	</bug>
	<bug>
		<id>3720</id>
		<title>NPE in configuration processor if @ConfigurationProperties is not present</title>
		<body>``` [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.381 s [INFO] Finished at: 2015-08-10T14:30:06+01:00 [INFO] Final Memory: 24M/219M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project spring-cloud-stream-binder-spi: Fatal error compiling: java.lang.NullPointerException -&gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project spring-cloud-stream-binder-spi: Fatal error compiling     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:582)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Fatal error compiling     at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:796)     at org.apache.maven.plugin.compiler.CompilerMojo.execute(CompilerMojo.java:129)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 19 more Caused by: org.codehaus.plexus.compiler.CompilerException: java.lang.NullPointerException     at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:191)     at org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile(JavacCompiler.java:169)     at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:785)     ... 22 more Caused by: java.lang.RuntimeException: java.lang.NullPointerException     at com.sun.tools.javac.main.Main.compile(Main.java:553)     at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:129)     at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:138)     at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:126)     ... 24 more Caused by: java.lang.NullPointerException     at com.sun.tools.javac.processing.JavacRoundEnvironment.getElementsAnnotatedWith(JavacRoundEnvironment.java:118)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.process(ConfigurationMetadataAnnotationProcessor.java:130)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:794)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:705)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)     at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)     at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)     at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1173)     at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:859)     at com.sun.tools.javac.main.Main.compile(Main.java:523)     ... 27 more [ERROR]  [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```  This is in spring-cloud-stream. </body>
		<created>2015-08-10 13:31:10</created>
		<closed>2015-08-10 14:36:24</closed>
	</bug>
	<bug>
		<id>3689</id>
		<title>Actuator docs title links don't work</title>
		<body>Commit 38d80bb8c0fdc8e8a7b68d31f30eb4b362d3372c changes doc titles to `Link:` but this doesn't appear to work in the rendered form.  Output appears as follows:  ``` Link: logfile ``` </body>
		<created>2015-08-05 23:49:35</created>
		<closed>2015-08-06 07:34:55</closed>
	</bug>
	<bug>
		<id>3657</id>
		<title>BeanTypeRegistry getConfigurationClassFactoryBeanGeneric only considers @Bean methods that take no arguments</title>
		<body>For example, this `@Bean` method won't be found:  ``` java @Bean public EmbeddedSolrServerFactoryBean solrServer(         @Value("solr.solr.home") String solrHome) throws Exception {     EmbeddedSolrServerFactoryBean factory = new EmbeddedSolrServerFactoryBean();     return factory; } ```  This means that the type of the `solrServer` bean is unknown and `SolrAutoConfiguration` ends up overriding it as the evaluation of `@ConditionalOnMissingBean` doesn't find the existing bean. </body>
		<created>2015-08-04 10:00:55</created>
		<closed>2015-08-04 10:44:14</closed>
	</bug>
	<bug>
		<id>3623</id>
		<title>Error controller does not process a controller exception anymore</title>
		<body>No idea if this is a regression in Boot or in Spring Framework at this point.  Consider the following  ``` @ResponseStatus(value = HttpStatus.NOT_ACCEPTABLE) @SuppressWarnings("serial") private static class NoReasonExpectedException extends RuntimeException {      public NoReasonExpectedException(String message) {         super(message);     } } ```  and a controller that throws such exception with a dummy message. With 1.2 you get the standard JSON output as expected. With master the controller does not seem to process the request at all (and therefore an empty response is sent).  Seems like `ResponseStatusExceptionResolver` is doing something different in 4.2 now. </body>
		<created>2015-07-30 08:50:40</created>
		<closed>2015-07-30 15:10:39</closed>
	</bug>
	<bug>
		<id>3591</id>
		<title>LoggingSystem backwards compatibility with 1.2.x</title>
		<body>We're using a custom LoggingSystem implementation and as of 1.3.0.M2 (related to #3493) the interface has been enhanced to include some environment context.  While this seems like a welcome addition it's by no means backwards compatible in a minor release.  Thoughts on creating an adaptor of sorts until a major milestone to allow existing implementations to remain intact? </body>
		<created>2015-07-23 17:15:54</created>
		<closed>2015-08-04 23:46:02</closed>
	</bug>
	<bug>
		<id>3581</id>
		<title>Custom validator is assigned blindly to every @ConfigurationProperties</title>
		<body>While working on #3513 I realized that we're blindly setting the custom validator if it's available. But `DataBinder` does an assertion check that fails if the validator does not support the target type.   There is a discussion to change that in Spring Framework itself but since 4.2 GA is about to be released and there are open points, I am going to fix it here to be on the safe side. </body>
		<created>2015-07-23 08:46:47</created>
		<closed>2015-07-23 09:37:42</closed>
	</bug>
	<bug>
		<id>3577</id>
		<title>MongoRepositoriesAutoConfiguration should be after MongoDataAutoConfiguration</title>
		<body>`MongoRepositoriesAutoConfiguration` should be after `MongoDataAutoConfiguration` not `MongoAutoConfiguration` otherwise it goes and creates a bunch of beans that `MongoDataAutoConfiguration` want to create itself (like the `MongoMapperContext`). </body>
		<created>2015-07-22 14:06:39</created>
		<closed>2015-07-22 15:48:52</closed>
	</bug>
	<bug>
		<id>3570</id>
		<title>Actuator HAL links contain 2 identical entries for env</title>
		<body>E.g.  ``` "env": [       {         "href": "http://localhost:9000/env"       },       {         "href": "http://localhost:9000/env"       }     ], ``` </body>
		<created>2015-07-21 13:25:13</created>
		<closed>2015-07-31 13:32:38</closed>
	</bug>
	<bug>
		<id>3557</id>
		<title>Unnecessary/wrong Jersey 2 property config in JerseyAutoConfiguration</title>
		<body>[Here]( https://github.com/spring-projects/spring-boot/blob/6100b3e85025ee39c644fa52cd9d24d3e07b2ebc/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java#L215-L217) the Jersey `CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE` property is set to 'true', but it seems that it has no effect. As far as I can tell, the `registration.addInitParameter` is for servlet/filter init parameters, whereas this property in question is supposed to be passed to Jerseys ResourceConfig.property method. As far as I know, Jersey doesn't read servlet/filter init params to influence its configuration, at least not for this property (it does it for package and classes, and the application class name).  A proof that this doesn't work is a Jersey 2 application with Jackson 2 in the classpath. By default, JSON serialization works fine and the jackson provider is correctly instantiated and used, and the resource returning a POJO works fine and the client gets the JSON representation. However, when this is done:  ```java @Bean public ResourceConfig endpointConfig() {     ResourceConfig config = new ResourceConfig();     config.packages("com.test.rest");     config.property(CommonProperties.METAINF_SERVICES_LOOKUP_DISABLE, "true");      return config; } ```  the reguest fails with:  ``` 2015-07-19 23:27:30.839 ERROR 50914 --- [  XNIO-2 task-1] o.g.j.m.i.WriterInterceptorExecutor      : MessageBodyWriter not found for media type=application/json, type=class com.test.rest.MyBean, genericType=class com.test.rest.MyBean. ```  So, the line which is linked to seems to be wrong and doesn't influence anything. Having it there is confusing as it kind of says Jersey's auto discovery is disabled explicitly, but that's not the case.  Suggested fix - remove the line. </body>
		<created>2015-07-19 21:31:10</created>
		<closed>2018-03-28 11:53:42</closed>
	</bug>
	<bug>
		<id>3553</id>
		<title>Explicitly setting management.context-path=/ causes controllers to be mapped with //</title>
		<body>When explicitly setting management.context-path=/ (the default value) in application.properties, all management controllers are mapped with an extra slash.  Using Spring Boot 1.2.5  Example: `2015-07-19 14:27:58.202  INFO 559 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[//info],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()` </body>
		<created>2015-07-19 14:34:09</created>
		<closed>2015-07-20 08:57:30</closed>
	</bug>
	<bug>
		<id>3550</id>
		<title>Setting the log level application.properties changes the parent log level is logger is not explicitly defined in log4j2 configuration.</title>
		<body>When using log4j2 and I set the log level in `application.properties` for a logger that is not explicitly configured in log4j2 configuration file it actually changes its parent logger level (in worst case the root logger level). </body>
		<created>2015-07-19 09:11:48</created>
		<closed>2015-07-22 16:56:19</closed>
	</bug>
	<bug>
		<id>3542</id>
		<title>OAuth2AutoConfiguration uses OAuth2MethodSecurityExpressionHandler without a BeanResolver set</title>
		<body>**NOTE** This was originally reported on [StackOverflow](http://stackoverflow.com/questions/31473171/getting-no-bean-resolver-registered)  There is a bug in the newly added [OAuth2AutoConfiguration](https://github.com/spring-projects/spring-boot/blob/db41e0d7d5cd120892df8f7196021f0c35ec9136/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfiguration.java). Specifically it brings in [OAuth2MethodSecurityConfiguration](https://github.com/spring-projects/spring-boot/blob/db41e0d7d5cd120892df8f7196021f0c35ec9136/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/method/OAuth2MethodSecurityConfiguration.java) which overrides the `DefaultMethodSecurityExpressionHandler` with a `OAuth2MethodSecurityExpressionHandler` that does not have a `BeanResolver` set. This means that if you run the following:  ``` java @PreAuthorize("@security.denyRob()") public void doStuff() ```  You will get the following stacktrace:  ``` java.lang.Exception: Unexpected exception, expected&lt;org.springframework.security.access.AccessDeniedException&gt; but was&lt;java.lang.IllegalArgumentException&gt;     at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)     at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)     at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:85)     at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:86)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:243)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:182)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.lang.IllegalArgumentException: Failed to evaluate expression '#oauth2.throwOnError(@security.denyRob())'     at org.springframework.security.access.expression.ExpressionUtils.evaluateAsBoolean(ExpressionUtils.java:14)     at org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice.before(ExpressionBasedPreInvocationAdvice.java:44)     at org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter.vote(PreInvocationAuthorizationAdviceVoter.java:57)     at org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter.vote(PreInvocationAuthorizationAdviceVoter.java:25)     at org.springframework.security.access.vote.AffirmativeBased.decide(AffirmativeBased.java:62)     at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:232)     at org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke(MethodSecurityInterceptor.java:64)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)     at demo.ServiceImpl$$EnhancerBySpringCGLIB$$3a0d677c.doStuff(&lt;generated&gt;)     at demo.So31473171NoBeanResolverApplicationTests.denied(So31473171NoBeanResolverApplicationTests.java:26)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)     ... 21 more Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1057E:(pos 8): No bean resolver registered in the context to resolve access to bean 'security'     at org.springframework.expression.spel.ast.BeanReference.getValueInternal(BeanReference.java:48)     at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:51)     at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87)     at org.springframework.expression.spel.ast.MethodReference.getArguments(MethodReference.java:154)     at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:71)     at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:66)     at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:87)     at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:131)     at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:299)     at org.springframework.security.access.expression.ExpressionUtils.evaluateAsBoolean(ExpressionUtils.java:11)     ... 40 more  ``` # Workarounds ## Remove OAuth2  If you are not using OAuth2, then the easiest solution is to remove Spring Security OAuth from your classpath. ## Exclude OAuth2 AutoConfiguration  Alternatively, you can exclude the `OAuth2AutoConfiguration` using the following if you use `@SpringBootApplication`:  ``` java @SpringBootApplication(exclude=OAuth2AutoConfiguration.class) ```  alternatively you can use the following if you leverage `@AutoConfiguration` directly:  ``` java @AutoConfiguration(exclude=OAuth2AutoConfiguration.class) ``` ## Provide Custom MethodSecurityExpressionHandler  You can also use something like this:  ``` java import org.aopalliance.intercept.MethodInvocation; import org.springframework.expression.EvaluationContext; import org.springframework.expression.Expression; import org.springframework.expression.ExpressionParser; import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler; import org.springframework.security.core.Authentication;  public class DelegatingMethodSecurityExpressionHandler implements         MethodSecurityExpressionHandler {      private final MethodSecurityExpressionHandler delegate;      public DelegatingMethodSecurityExpressionHandler(             MethodSecurityExpressionHandler delegate) {         super();         this.delegate = delegate;     }      public Object filter(Object filterTarget, Expression filterExpression,             EvaluationContext ctx) {         return delegate.filter(filterTarget, filterExpression, ctx);     }      public ExpressionParser getExpressionParser() {         return delegate.getExpressionParser();     }      public EvaluationContext createEvaluationContext(             Authentication authentication, MethodInvocation invocation) {         return delegate.createEvaluationContext(authentication, invocation);     }      public void setReturnObject(Object returnObject, EvaluationContext ctx) {         delegate.setReturnObject(returnObject, ctx);     } } ```  Then in your configuration use:  ``` java @Autowired(required = false) List&lt;AuthenticationTrustResolver&gt; trustResolvers = new ArrayList&lt;&gt;();  @Autowired(required = false) List&lt;PermissionEvaluator&gt; permissionEvaluators = new ArrayList&lt;&gt;();  @Bean public MethodSecurityExpressionHandler securityExpressionHandler(ApplicationContext context) {     OAuth2MethodSecurityExpressionHandler delegate = new OAuth2MethodSecurityExpressionHandler();     delegate.setApplicationContext(context);     if(trustResolvers.size() == 1) {         delegate.setTrustResolver(trustResolvers.get(0));     }     if(permissionEvaluators.size() == 1) {         delegate.setPermissionEvaluator(permissionEvaluators.get(0));     }     return new DelegatingMethodSecurityExpressionHandler(delegate); } ```  We have to wrap it in the DelegatingMethodSecurityExpressionHandler because Spring Boot's auto config will replace any subclass of `DefaultMethodSecurityExpressionHandler` with the broken configuration. </body>
		<created>2015-07-17 19:15:36</created>
		<closed>2015-07-20 13:22:08</closed>
	</bug>
	<bug>
		<id>3521</id>
		<title>Make init script LSB compliant</title>
		<body>Right now when we are using JAR as init script it returns status code that isn't compliant with LSB standard.  For instance:  &gt; If the status action is requested, the init script will return the following exit status codes. &gt; 1  program is dead and /var/run pid file exists &gt; 3  program is not running  But init script will return 1 in both cases: when pid file doesn't exist and when program is not running.  Another case:  &gt; In case of an error while processing any init-script action except for status, the init script shall print an error message and exit with a non-zero status code: &gt;  &gt; 4  user had insufficient privilege  But init script returns 1 in such scenarios:  ``` bash checkPermissions() {   touch "$pid_file" &amp;&gt; /dev/null || { echoRed "Operation not permitted (cannot access pid file)"; exit 1; }   touch "$log_file" &amp;&gt; /dev/null || { echoRed "Operation not permitted (cannot access log file)"; exit 1; } } ``` </body>
		<created>2015-07-16 15:01:55</created>
		<closed>2015-08-26 16:56:36</closed>
	</bug>
	<bug>
		<id>3518</id>
		<title>FATAL log level is mapped to ERROR even for log systems that supports it.</title>
		<body>Log4j and Log4j2 have `FATAL` log level, SpringBoots `LogLevel` defines a `FATAL` too but it is map to `ERROR`.  Is this by design or a bug? Also the documentation mentions `FATAL`, but in [this section](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-logging-format) it is skipped  </body>
		<created>2015-07-16 12:36:29</created>
		<closed>2015-07-16 15:59:17</closed>
	</bug>
	<bug>
		<id>3517</id>
		<title>Spring boot security properties set doen't work</title>
		<body>I'm customizing security login page,but got problems with `csrf` and `x-frame-options`. Would it be better if `csrf` and `x-frame-options` disable by default?  If I set  ``` security.enable-csrf=false security.headers.frame=false ```  in applicatoin.properties,spring security doesn't apply my setting. But if I override  `WebSecurityConfigurerAdapter configure()`  ``` java     @Override     protected void configure(HttpSecurity http) throws Exception { http                 .headers()                 .frameOptions()                 .disable()                 .and()                 .csrf()                 .disable() ... } ```  It works.  By the way,I'm using spring-boot-starter-parent version of 1.3.0.M1 </body>
		<created>2015-07-16 12:22:18</created>
		<closed>2015-10-13 14:44:15</closed>
	</bug>
	<bug>
		<id>3486</id>
		<title>Spring Data REST homepage is disabled by Spring Boot Actuator</title>
		<body>I think something changed in Spring Data REST because this used to work, but we need to fix it here I believe. The `LinksMvcEndpoint` is not supposed to be mapped to "/" if Spring Data REST is going to handle the home page, but apparently it is (or at any rate is with sufficient priority to get in the way and render a response before the `RepositoryController` has a chance). It looks like a `RepositoryRestConfiguration` should be available for autowiring and it would know what the home page path is. </body>
		<created>2015-07-14 13:37:21</created>
		<closed>2015-07-15 10:46:03</closed>
	</bug>
	<bug>
		<id>3478</id>
		<title>MailSenderAutoConfiguration.MailSenderValidator is not enabled while MailSenderConfiguration is</title>
		<body>Environment: Spring Boot 1.3.0.M2  When I run my app with `--debug` option I see the following:  ``` Positive matches: -----------------     MailSenderAutoConfiguration.MailSenderConfiguration       - any match resulted in [member condition on org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration$MailSenderConfiguration$MailSenderCondition$HostProperty] matches and [member condition on org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration$MailSenderConfiguration$MailSenderCondition$JndiNameProperty : @ConditionalOnProperty missing required properties spring.mail.jndi-name ] non matches (MailSenderAutoConfiguration.MailSenderConfiguration.MailSenderCondition)       - @ConditionalOnMissingBean (types: org.springframework.mail.MailSender; SearchStrategy: all) found no beans (OnBeanCondition)   Negative matches: -----------------     MailSenderAutoConfiguration.MailSenderValidator       - @ConditionalOnSingleCandidate (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) found no beans (OnBeanCondition) ```  `MailSenderValidator` wasn't activated because there was no `JavaMailSenderImpl` but it should be created by `MailSenderConfiguration` that was activated.  Is it a bug? I didn't create `JavaMailSenderImpl` because I expect that it will be created by Spring Boot. </body>
		<created>2015-07-13 19:42:38</created>
		<closed>2015-07-14 09:24:07</closed>
	</bug>
	<bug>
		<id>3477</id>
		<title>spring-boot-maven-plugin - renaming artifact with finalName fails</title>
		<body>Using the spring-boot-maven plugin (`org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE`), I'm trying to change the name of the repackaged final artifact like so:  ```             &lt;executions&gt;                 &lt;execution&gt;                     &lt;goals&gt;                         &lt;goal&gt;repackage&lt;/goal&gt;                     &lt;/goals&gt;                     &lt;configuration&gt;                         &lt;finalName&gt;bar&lt;/finalName&gt;                     &lt;/configuration&gt;                 &lt;/execution&gt;             &lt;/executions&gt; ```  When running `mvn package`, however, execution fails:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage (default) on project foo: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage failed: For artifact mvn pa{foo:foo:1.0.0-SNAPSHOT:jar}: An attached artifact must have a different ID than its corresponding main artifact. -&gt; [Help 1] ```  It does seem as though the artifacts are being created as `target/` contains both `bar.jar` and `foo-1.0.0-SNAPSHOT.jar`, but the build fails with an error:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage (default) on project foo: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage failed: For artifact {foo:foo:1.0.0-SNAPSHOT:jar}: An attached artifact must have a different ID than its corresponding main artifact. -&gt; [Help 1] ```  `mvn package -X` output: https://gist.github.com/lhanson/d7963a2e8976e3c84de1 </body>
		<created>2015-07-13 19:16:18</created>
		<closed>2015-07-14 06:09:52</closed>
	</bug>
	<bug>
		<id>3476</id>
		<title>Duplicate bean definition for ServerProperties when using Spring Session in a hierarchical context</title>
		<body>`ServerProperties` is created by `ServerPropertiesAutoConfiguration` and by `SessionAutoConfiguration`, but with different bean names and different conditions, so it can be the case that they both contribute a bean and an `@Autowired` elsewehere fails. </body>
		<created>2015-07-13 16:18:37</created>
		<closed>2015-07-13 16:28:14</closed>
	</bug>
	<bug>
		<id>3470</id>
		<title>Liquibase 3.4.0 breaks logging management via application.properties</title>
		<body>After upgrading Liquibase to 3.4.0 (#3389) I can't manage liquibase logging and I always see the logs in console. When I downgrade to 3.3.5 it's working. </body>
		<created>2015-07-13 10:41:24</created>
		<closed>2015-07-29 09:15:45</closed>
	</bug>
	<bug>
		<id>3468</id>
		<title>spring.jooq.sql-dialect doesn't used relaxed binding</title>
		<body>Originally raised in #3464  </body>
		<created>2015-07-13 09:23:43</created>
		<closed>2015-07-13 19:31:34</closed>
	</bug>
	<bug>
		<id>3440</id>
		<title>NullPointerException in DataSourceAutoConfiguration/NonEmbeddedConfiguration with null properties when @EnableCaching </title>
		<body>Hello,  I'm facing a weird problem on the 1.3.0.M1 : I encounter a `NullPointer` in `DataSourceAutoConfiguration` line 118 when `@EnableCaching` is added to my application and no `CacheManager` `@Bean` is manually created.  I can see in the logs that by manually declaring a _CacheManager_ bean the `DataSourceProperties` is processed before the `DataSourceAutoConfiguration$NonEmbeddedConfiguration` constructor is called:  ``` log 2015-07-08 10:53:51.496  INFO 27645 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'spring.datasource.CONFIGURATION_PROPERTIES' of type [class org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) ```  When the `CacheManager` is not declared, this line is absent and the `DataSourceProperties` autowired into the `DataSourceAutoConfiguration$NonEmbeddedConfiguration` is null. A lot of fail then occurs...  From what I understood of 1.3.0.M1 documentation at least a standard `CacheManager` should be created automatically, that's the reason why I did delete mine... and saw this happen.  Context : - Webapp - MyBatis persistence layer and SqlSessionFactory @Bean created via a factory requiring a DataSource parameter  I could try to provide a boiled-down project showcasing that. </body>
		<created>2015-07-08 09:23:43</created>
		<closed>2015-07-09 08:10:38</closed>
	</bug>
	<bug>
		<id>3437</id>
		<title>Flyway and Liquibase might not trigger correct depends-on</title>
		<body>Both Flyway and Liquibase auto-configuration use `EntityManagerFactoryDependsOnPostProcessor` to ensure that migration occurs before JPA is initialized. Unfortunately the `@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)` means that it's possible for the processor to be skipped since there is no explicit `@AutoConfigureAfter` `HibernateJpaAutoConfiguration`. </body>
		<created>2015-07-08 01:18:13</created>
		<closed>2015-07-08 01:21:45</closed>
	</bug>
	<bug>
		<id>3432</id>
		<title>Fix PlatformTransactionManager auto-binding for Rabbit</title>
		<body>#3222 introduced a regression as Rabbit does not support JTA (contrary to JMS) so a different fix should be applied there.  Rabbit also has a `channelTransacted` flag that we could use </body>
		<created>2015-07-07 12:27:50</created>
		<closed>2015-07-13 14:44:02</closed>
	</bug>
	<bug>
		<id>3419</id>
		<title>Align start levels in launch.script header</title>
		<body>The default start levels are listed as 2, 3, 4, and 5 but the chkconfig configuration specifies only 3, 4, and 5:  ``` ### BEGIN INIT INFO # Provides:          spring-boot-application # Required-Start:    $remote_fs $syslog $network # Required-Stop:     $remote_fs $syslog $network # Default-Start:     2 3 4 5 # Default-Stop:      0 1 6 # Short-Description: Spring Boot Application # Description:       Spring Boot Application # chkconfig:         345 99 01 ### END INIT INFO ```  Originally raised by @shakuzen [on Gitter](https://gitter.im/spring-projects/spring-boot?at=559a43d41e35a1a03f144156). </body>
		<created>2015-07-06 09:23:23</created>
		<closed>2015-07-07 16:58:55</closed>
	</bug>
	<bug>
		<id>3412</id>
		<title>json.version makes config processor unusable with Java 7 (or 6)</title>
		<body>The change in db1f4891e3e (#3290) brings in a version of json.jar that was compiled for Java 8, so you can use the config processor now with older versions of Java. </body>
		<created>2015-07-03 12:31:25</created>
		<closed>2015-07-06 09:11:34</closed>
	</bug>
	<bug>
		<id>3406</id>
		<title>Standalone Tomcat fails to find a Boot app's manifest when defining a package, resulting in a null implementation version</title>
		<body>[Follow on from 3061](https://github.com/spring-projects/spring-boot/issues/3061#issuecomment-118048010) </body>
		<created>2015-07-02 14:20:01</created>
		<closed>2015-08-26 14:10:40</closed>
	</bug>
	<bug>
		<id>3393</id>
		<title>Auto-configure the JMS listener container sessionTransacted flag</title>
		<body>See #3390 for the initial discussion.  If no JTA transaction manager is present, we really should flip the `sessionTransacted` flag to true otherwise message consumptions does not even use a local (JMS) transaction. </body>
		<created>2015-07-01 19:45:48</created>
		<closed>2015-07-01 20:00:17</closed>
	</bug>
	<bug>
		<id>3385</id>
		<title>Application.properties take precedence over system properties with relaxed names</title>
		<body>For some reason, if a system property uses a relaxed names it is not taken into account _unless_ no other `PropertySource` defines the value.  See [this sample project](https://github.com/snicoll-scratches/system-property-overriding) for more details.  Note that OS env variables are not affected by this issue. This seems to be a system property specific thing. </body>
		<created>2015-07-01 14:31:38</created>
		<closed>2015-07-02 12:19:47</closed>
	</bug>
	<bug>
		<id>3378</id>
		<title>ClassCastException in MetricWriterMessageHandler</title>
		<body>`MetricWriterMessageHandler` does a hard cast to `Metric` (if the payload is not a `Delta`); maybe it should ignore (or log) messages with bogus payloads? Since it's running on an executor channel there's no way to communicate the error back to the caller.  [Stack Overflow reference](http://stackoverflow.com/questions/31156058/unable-to-reset-metrics-counter-when-spring-integration-is-in-the-classpath). </body>
		<created>2015-07-01 13:20:41</created>
		<closed>2015-07-02 02:30:33</closed>
	</bug>
	<bug>
		<id>3366</id>
		<title>LoggingApplicationListener Improperly reading CommandLine arguments</title>
		<body>We are deploying a Spring Boot app to Azure (don't ask). It has been working fine until Friday when it started failing on startup with:  ``` Caused by: java.lang.IllegalStateException: java.io.FileNotFoundException: D:\Windows\system32\-Djava.util.logging.config.file="D:\Program Files (x86)\apache-tomcat-7.0.50\conf\logging.properties" (The filename, directory name, or volume label syntax is incorrect)     at org.springframework.boot.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:215)     at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:184)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:164)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:145)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:119)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)     at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:65)     at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:53)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:308)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:273)     at org.springframework.boot.context.web.SpringBootServletInitializer.run(SpringBootServletInitializer.java:130)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:110)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:69)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5444)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ```  It appears that spring is incorrectly interpreting the environment variable automatically set in azure:  `JAVA.UTIL.LOGGING.CONFIG.FILE=D:\Program Files (x86)\apache-tomcat-7.0.50\conf\logging.properties`  Though I am still baffled about where the `D:\Windows\system32` is coming from.   For reference here are the tomcat arguments that azure forces upon startup:  ``` AZURE_TOMCAT7_CMDLINE=-Dport.http=%HTTP_PLATFORM_PORT% -Djava.util.logging.config.file="D:\Program Files (x86)\apache-tomcat-7.0.50\conf\logging.properties" -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Dsite.logdir="d:/home/LogFiles/" -Dsite.tempdir="d:\home\site\workdir" -classpath "D:\Program Files (x86)\apache-tomcat-7.0.50\bin\bootstrap.jar;D:\Program Files (x86)\apache-tomcat-7.0.50\bin\tomcat-juli.jar" -Dcatalina.base="D:\Program Files (x86)\apache-tomcat-7.0.50"  -Djava.io.tmpdir="d:\home\site\workdir" org.apache.catalina.startup.Bootstrap ```  Rolling back to 1.3.0.M1 works exactly as expected.  </body>
		<created>2015-06-30 15:46:29</created>
		<closed>2015-07-08 20:59:22</closed>
	</bug>
	<bug>
		<id>3362</id>
		<title>GzipFilterAutoConfiguration can cause a failure if spring-web isn't on the classpath</title>
		<body>It depends on `HttpMethod` but isn't properly protected via `@ConditionalOnClass`. If `GzipFilter` is on the classpath and `spring-web` isn't, a failure occurs at start up:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.GzipFilterAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.GzipFilterProperties org.springframework.boot.autoconfigure.web.GzipFilterAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.http.gzip.CONFIGURATION_PROPERTIES': Initialization of bean failed; nested exception is java.lang.TypeNotPresentException: Type org.springframework.http.HttpMethod not present     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1210)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at sample.flyway.SampleFlywayApplication.main(SampleFlywayApplication.java:37) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.springframework.boot.autoconfigure.web.GzipFilterProperties org.springframework.boot.autoconfigure.web.GzipFilterAutoConfiguration.properties; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.http.gzip.CONFIGURATION_PROPERTIES': Initialization of bean failed; nested exception is java.lang.TypeNotPresentException: Type org.springframework.http.HttpMethod not present     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:561)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)     ... 15 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'spring.http.gzip.CONFIGURATION_PROPERTIES': Initialization of bean failed; nested exception is java.lang.TypeNotPresentException: Type org.springframework.http.HttpMethod not present     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)     ... 17 common frames omitted Caused by: java.lang.TypeNotPresentException: Type org.springframework.http.HttpMethod not present     at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117)     at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125)     at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)     at sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68)     at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138)     at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)     at sun.reflect.generics.repository.ConstructorRepository.getParameterTypes(ConstructorRepository.java:94)     at java.lang.reflect.Executable.getGenericParameterTypes(Executable.java:279)     at java.lang.reflect.Method.getGenericParameterTypes(Method.java:268)     at java.beans.FeatureDescriptor.getParameterTypes(FeatureDescriptor.java:387)     at java.beans.MethodDescriptor.setMethod(MethodDescriptor.java:116)     at java.beans.MethodDescriptor.&lt;init&gt;(MethodDescriptor.java:72)     at java.beans.MethodDescriptor.&lt;init&gt;(MethodDescriptor.java:56)     at java.beans.Introspector.getTargetMethodInfo(Introspector.java:1163)     at java.beans.Introspector.getBeanInfo(Introspector.java:426)     at java.beans.Introspector.getBeanInfo(Introspector.java:173)     at org.springframework.beans.CachedIntrospectionResults.&lt;init&gt;(CachedIntrospectionResults.java:279)     at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:189)     at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:328)     at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:336)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1364)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1343)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1205)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     ... 26 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.http.HttpMethod     at java.net.URLClassLoader$1.run(URLClassLoader.java:372)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:340)     at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114)     ... 49 common frames omitted ```  See http://stackoverflow.com/questions/31120599/how-to-disable-http-server-in-spring-boot </body>
		<created>2015-06-30 11:20:15</created>
		<closed>2015-06-30 11:35:01</closed>
	</bug>
	<bug>
		<id>3343</id>
		<title>Devtools does not work with Jetty</title>
		<body>The thread is in state RUNNABLE.  ``` java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.springframework.boot.devtools.restart.Restarter.triggerShutdownHooks(Restarter.java:331)     at org.springframework.boot.devtools.restart.Restarter.stop(Restarter.java:313)     at org.springframework.boot.devtools.restart.Restarter$2.call(Restarter.java:248)     at org.springframework.boot.devtools.restart.Restarter$2.call(Restarter.java:244)     at org.springframework.boot.devtools.restart.Restarter$LeakSafeThread.run(Restarter.java:590) Caused by: java.lang.IllegalThreadStateException     at java.lang.Thread.start(Thread.java:705)     at java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:102)     ... 9 more ```  works fine with tomcat, not with jetty:  ```     &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.3.0.BUILD-SNAPSHOT&lt;/version&gt;     &lt;/parent&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; ```  JDK 1.8.0.45,  Spring 1.3.0.M1,  1.3.0.BUILD-SNAPSHOT </body>
		<created>2015-06-28 08:47:35</created>
		<closed>2015-06-29 15:52:23</closed>
	</bug>
	<bug>
		<id>3316</id>
		<title>Devtools: Same class with different classloader causing NoSuchBeanDefinitionException</title>
		<body>@philwebb I have started to check our applications and came across an issue. (Sorry if It is already fixed)  Short description: My applications can not find some of beans when application starts.  Detailed description: I have debugged and found that If a class is loaded with two different class loader, the `java.lang.Class#isAssignableFrom` seems can not handle correctly. This is causing a problem in `org.springframework.util.ClassUtils#isAssignable` which is used for bean comparison. As a result a bean not found exception is raised.  I have checked each class and noticed that classes are loaded by `AppClassLoader` and `RestartClassLoader`.   This bean is registered by `@Import` configuration class. Spring Framework is registering beans with `AppClassLoader` but classes of other beans are loaded by `RestartClassLoader`. </body>
		<created>2015-06-24 06:47:42</created>
		<closed>2015-11-14 05:37:02</closed>
	</bug>
	<bug>
		<id>3315</id>
		<title>Devtools reload doesn't work with spring-boot-maven-plugin</title>
		<body>After reading about the new dev tools features I decided to try it out. I generally run my apps with `mvn spring-boot:run`. So after the app started up (with `mvn spring-boot:run`), changing some controller code and compiling the app, the app reload didn't happen as I expected. Running the app standalone, however, does reload as expected.  The [docs](spring-boot-maven-plugin) do not mention any constraints about how your run you app. Should the Maven plugin also support devtools or will this not be supported?  Tried with 1.3.0.M1 and 1.3.0-BUILD-SNAPSHOT. </body>
		<created>2015-06-24 05:43:18</created>
		<closed>2015-08-04 15:43:02</closed>
	</bug>
	<bug>
		<id>3304</id>
		<title>RabbitProperties does not set the virtual host correctly for addresses that end with /</title>
		<body>If an address ends with `/` (`amqp://root:password@otherhost:1111/`, for example), `RabbitProperties` is ends up with an empty string as its virtual host. This conflicts with the behaviour of `setVirtualHost` where an empty string is changed into `/`. </body>
		<created>2015-06-22 14:10:45</created>
		<closed>2015-06-22 14:24:35</closed>
	</bug>
	<bug>
		<id>3274</id>
		<title>The CLI doesn't fully honour a custom local repository configured in settings.xml</title>
		<body>The custom location isn't used in `RepositoryConfigurationFactory` when it attempts to add the default local repository – it'll only ever add `~/.m2/repository` rather than whatever's configured in `settings.xml`. This causes `GrabCommandIntegrationTests` to fail and will cause `spring grab` to download dependencies again rather than copying them from the local repository.  The custom location is used when configuring the `RepositorySystemSession` but no property interpolation is performed. This leads to a path that contains the property placeholders being used in its original form, e.g. `&lt;localRepository&gt;${user.home}/Desktop/maven-repository&lt;/localRepository&gt;` in `settings.xml` will cause the repository to be located at `./${user.home/Desktop/maven-repository`. </body>
		<created>2015-06-18 09:38:06</created>
		<closed>2015-06-18 11:36:05</closed>
	</bug>
	<bug>
		<id>3273</id>
		<title>EnvironmentTestUtils does not allow a value with `:`</title>
		<body>The algorithm that detects the key and the value from a simple String is broken if the value contains `:` as it uses that as delimiter. </body>
		<created>2015-06-18 06:33:16</created>
		<closed>2015-06-19 21:07:23</closed>
	</bug>
	<bug>
		<id>3265</id>
		<title>Mustache support - content type is not set in Mustache View</title>
		<body>The content type set in the Mustache View Resolver is not set in the Mustache View. This prevents producing something else than html using Mustache.  The **MustacheViewResolver#loadView** method should be adapted to this  ```         @Override     protected View loadView(String viewName, Locale locale) throws Exception {         Resource resource = resolveResource(viewName, locale);         if (resource == null) {             return null;         }         MarkdownMustacheView view = new MarkdownMustacheView(createTemplate(resource));         view.setApplicationContext(getApplicationContext());         view.setServletContext(getServletContext());         // FIXED - This was necessary to have the content type as set in the resolver         view.setContentType(getContentType());         return view;     } ``` </body>
		<created>2015-06-17 13:42:25</created>
		<closed>2015-06-30 22:04:20</closed>
	</bug>
	<bug>
		<id>3249</id>
		<title>RequestAttributes.get('path') is null in error page when running spring-boot project in a tomcat.</title>
		<body>Hello, I got a problem when run the spring-boot project in a tomcat (8.0.23).  If the controller throws an exception, `RequestAttributes.get('path')` is null in error page.  I debugged into `DefaultErrorAttributes#addPath` method and found that `javax.servlet.error.request_uri` is missing in the `HttpServletRequest` attributes.  But everything is ok if run the project in a standalone way.  And I create a github repository to demonstrate this:   https://github.com/chanjarster/spring-boot-error-handler-bug  More details are in repository's README.md  </body>
		<created>2015-06-16 09:35:52</created>
		<closed>2015-06-22 15:27:45</closed>
	</bug>
	<bug>
		<id>3222</id>
		<title>Do not blindly associate a transaction manager with Rabbit</title>
		<body>This is the same issue as #3150 but for RabbitMQ. </body>
		<created>2015-06-14 07:43:33</created>
		<closed>2015-06-15 09:21:31</closed>
	</bug>
	<bug>
		<id>3209</id>
		<title>Multipart property gives error when enabled</title>
		<body>Hi,  When the property `multipart.enabled=true` is enabled, throws an exception on console saying it has an invalid value. You can notice in the following link http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html, it should work normally.   ``` Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'enabled' of bean class [org.springframework.boot.autoconfigure.web.MultipartProperties]: Bean property 'enabled' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1076)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:927)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:749)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:645)     at org.springframework.boot.bind.RelaxedDataBinder.doBind(RelaxedDataBinder.java:121)     at org.springframework.validation.DataBinder.bind(DataBinder.java:630)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:253)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:227)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:296)     ... 73 common frames omitted ```  ``` # MULTIPART (MultipartProperties) multipart.enabled=true multipart.file-size-threshold=0 # Threshold after which files will be written to disk. multipart.location= # Intermediate location of uploaded files. multipart.max-file-size=1Mb # Max file size. multipart.max-request-size=10Mb # Max request size. ```  So to dodge this issue, I had to add via Java configuration one filter enabling the Multipart in Spring Boot:  ``` @Configuration     public class TestConfig {          @Bean         public FilterRegistrationBean openEntityManagerFilterRegistrationBean() {             // Set upload filter             final MultipartFilter multipartFilter = new MultipartFilter();             final FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(multipartFilter);             filterRegistrationBean.addInitParameter("multipartResolverBeanName", "commonsMultipartResolver");              return filterRegistrationBean;         }          @Bean         public CommonsMultipartResolver commonsMultipartResolver() {             final CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver();             commonsMultipartResolver.setMaxUploadSize(-1);              return commonsMultipartResolver;         }     } ``` </body>
		<created>2015-06-11 20:56:35</created>
		<closed>2015-06-15 18:45:04</closed>
	</bug>
	<bug>
		<id>3205</id>
		<title>UserInfoTokenServices should not throw UserRedirectRequiredException</title>
		<body>When a token expires a `UserInfoTokenServices` should throw `InvalidTokenException`. </body>
		<created>2015-06-11 11:57:48</created>
		<closed>2015-06-11 11:59:35</closed>
	</bug>
	<bug>
		<id>3199</id>
		<title>init.d boot/loader/tools/launch.script restart doesn't work</title>
		<body>I expect that it is because the restart action doesn't wait for the app to stop before it tries to start it again. </body>
		<created>2015-06-10 17:59:15</created>
		<closed>2015-08-26 16:56:36</closed>
	</bug>
	<bug>
		<id>3177</id>
		<title>outputDirectory and classifier clash for repackage goal</title>
		<body>While working on #3136 I found an inconsistency in the way the maven plugin handles `outputDirectory` and `classifier`.   The current `outputDirectory` semantic is not clear. If one sets it without a classifier, the jar source is different from the target and therefore the plugin tries to install an additional artifact with a `null` classifier.  I think we should make up our mind: either the `outputDirectory` is used to set the location of the repackaged jar (and therefore the presence of a `classifier` should trigger the attach) or the `outputDirectory` is only used when the `classifier` is set.  I think the former is more obvious but I don't know if we can replace the `File` reference of the main artifact. </body>
		<created>2015-06-10 08:46:59</created>
		<closed>2015-07-06 13:24:56</closed>
	</bug>
	<bug>
		<id>3162</id>
		<title>MongoDataAutoConfiguration doesn't work with devtools classloader</title>
		<body>The `MongoDataAutoConfiguration` currently uses:  ```                 for (BeanDefinition candidate : scanner                         .findCandidateComponents(basePackage)) {                     entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),                             MongoDataAutoConfiguration.class.getClassLoader()));                 } ```  This causes found beans to be loaded using the wrong classloader. We should load using the context classloader.  It's also worth checking the other spring data configurations. </body>
		<created>2015-06-09 16:33:04</created>
		<closed>2015-06-09 22:39:15</closed>
	</bug>
	<bug>
		<id>3152</id>
		<title>AuthenticationManagerConfiguration hides the default UserDetailsService</title>
		<body>In the case that user does not supply an authentication manager in one form or another, one is created for him. The only problem with the current implementation since https://github.com/spring-projects/spring-boot/commit/760d6eceee9260e6dc065a4556a064d805da81bf is that the `AuthenticationManagerBuilder` likes to have a "defaultUserDetailsService" (it's a private field with no setter). It will only be used if the user requests it explicitly, but we actually do have a case where Spring Security OAuth2 does that on behalf of a user (for refresh token grants). I think the best thing to do for now is hack the field using reflection and then as Spring Security to make it less of a hack in the future. </body>
		<created>2015-06-08 11:38:35</created>
		<closed>2015-06-08 12:24:22</closed>
	</bug>
	<bug>
		<id>3150</id>
		<title>ActiveMQ is restarted every time the session is closed</title>
		<body>Refer to spring-boot-samples examples, integrate spring-boot-sample-activemq and spring-boot-sample-data-jpa examples: ActiveMQ continues to started and stopped ![image](https://cloud.githubusercontent.com/assets/75619/8027327/9bb42df2-0dc8-11e5-9e03-d62591ab1b56.png)  pom.xml  ``` xml         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;             &lt;artifactId&gt;activemq-broker&lt;/artifactId&gt;         &lt;/dependency&gt;  ``` </body>
		<created>2015-06-08 02:30:12</created>
		<closed>2015-06-08 13:07:52</closed>
	</bug>
	<bug>
		<id>3097</id>
		<title>Developer tools: problems reloading context</title>
		<body>Could be Spring Cloud or maybe Spring Integration contributing to this (or maybe both). The app seems to be running at the end but it did stumble a bit and I'm not sure what's broken. There are 2 exceptions on restart: one to do with `GenericScope` (Cloud) and one MBeans (Integration or just Spring Boot?). Look carefully and you will see that there are 2 contexts starting up at the same time (on the same thread, how is that possible? classloaders). So I think that's the problem.  Once it is in this jag, an app never seems to come out of it, so I suspect some state that is stored on startup, but it's not deterministic: it might never enter this state (see below for clean restart logs).  Here's a log from a session that just starts and app and adds a `@RequestMapping`:  ``` 2015-06-03 09:05:38.967  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Starting VoterApplication on dsyer with PID 14837 (/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes started by dsyer in /home/dsyer/dev/cloud/workspace/bus-demo/voter) 2015-06-03 09:05:39.252  INFO 14837 --- [  restartedMain] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@6da30e2f: startup date [Wed Jun 03 09:05:39 BST 2015]; root of context hierarchy 2015-06-03 09:05:39.506  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:05:39.691  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encrypt.CONFIGURATION_PROPERTIES' of type [class org.springframework.cloud.bootstrap.encrypt.KeyProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:39.692  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encryptionBootstrapConfiguration' of type [class org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration$$EnhancerBySpringCGLIB$$73f2e79f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:39.852  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Started VoterApplication in 1.189 seconds (JVM running for 2.134)    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v1.3.0.BUILD-SNAPSHOT)  2015-06-03 09:05:40.324 ERROR 14837 --- [  restartedMain] c.c.c.ConfigServicePropertySourceLocator : Could not locate PropertySource: I/O error on GET request for "http://localhost:8888/voter/default":Connection refused; nested exception is java.net.ConnectException: Connection refused 2015-06-03 09:05:40.346  INFO 14837 --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@68e7f67e: startup date [Wed Jun 03 09:05:40 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6da30e2f 2015-06-03 09:05:41.606  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-messagebus-redis/1.2.0.BUILD-SNAPSHOT/spring-xd-messagebus-redis-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/redis-bus.xml] 2015-06-03 09:05:41.736  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/analytics/redis-analytics.xml] 2015-06-03 09:05:41.796  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/codec.xml] 2015-06-03 09:05:41.987  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2015-06-03 09:05:42.064  INFO 14837 --- [  restartedMain] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/integration/spring-integration-core/4.2.0.M1/spring-integration-core-4.2.0.M1.jar!/META-INF/spring.integration.default.properties] 2015-06-03 09:05:42.068  INFO 14837 --- [  restartedMain] o.s.i.config.IntegrationRegistrar        : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created. 2015-06-03 09:05:42.232  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'infoEndpoint' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/cloud/autoconfigure/RefreshAutoConfiguration$InfoEndpointRebinderConfiguration.class]] 2015-06-03 09:05:42.287  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'default.null.RibbonClientSpecification' with a different definition: replacing [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] 2015-06-03 09:05:42.725  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created. 2015-06-03 09:05:42.729  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created. 2015-06-03 09:05:42.732 DEBUG 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : Generating bean factory id from names: [org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.event.internalEventListenerProcessor, org.springframework.context.event.internalEventListenerFactory, voterApplication, org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor, org.springframework.bus.runner.config.RedisServiceConfiguration, messageBus, counterRepository, fieldValueCounterRepository, gaugeRepository, richGaugeRepository, aggregateCounterRepository, retryTemplate, backOffPolicy, retryPolicy, retryableExceptions, org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration, messageBusAwareRouterBeanPostProcessor, org.springframework.bus.runner.config.MessageBusAdapterConfiguration, messageBusAdapter, channelsEndpoint, codec, defaultCodec, kryoRegistrar, spring.bus.CONFIGURATION_PROPERTIES, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.store, org.springframework.bus.runner.config.LifecycleConfiguration, output, redisMetricWriter, jmxMetricWriter, springIntegrationMetricReader, org.springframework.boot.autoconfigure.AutoConfigurationPackages, voter, org.springframework.boot.autoconfigure.condition.BeanTypeRegistry, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaHealthIndicatorConfiguration, eurekaHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$DiscoveryManagerInitializerConfiguration, discoveryManagerInitializer, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, scopedTarget.eurekaDiscoveryClient, eurekaDiscoveryClient, discoveryClient, containerPortInitializer, org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration, propertySourcesPlaceholderConfigurer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration, websocketContainerCustomizer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat, tomcatEmbeddedServletContainerFactory, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration, embeddedServletContainerCustomizerBeanPostProcessor, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, dispatcherServlet, dispatcherServletRegistration, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, error, beanNameViewResolver, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration, errorAttributes, basicErrorController, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration, requestMappingHandlerAdapter, requestMappingHandlerMapping, mvcContentNegotiationManager, viewControllerHandlerMapping, beanNameHandlerMapping, resourceHandlerMapping, mvcResourceUrlProvider, defaultServletHandlerMapping, mvcConversionService, mvcValidator, mvcPathMatcher, mvcUrlPathHelper, mvcUriComponentsContributor, httpRequestHandlerAdapter, simpleControllerHandlerAdapter, handlerExceptionResolver, mvcViewResolver, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration, faviconHandlerMapping, faviconRequestHandler, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, defaultViewResolver, requestContextListener, viewResolver, spring.mvc.CONFIGURATION_PROPERTIES, spring.resources.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration, hiddenHttpMethodFilter, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration$AuditEventRepositoryConfiguration, auditEventRepository, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration, auditListener, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisConfiguration, redisTemplate, stringRedisTemplate, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration, redisConnectionFactory, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration, org.springframework.autoconfigure.redis.RedisProperties, org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration, jolokiaEndpoint, jolokia.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$DiskSpaceHealthIndicatorConfiguration, diskSpaceHealthIndicator, diskSpaceHealthIndicatorProperties, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$RedisHealthIndicatorConfiguration, redisHealthIndicator, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration, healthAggregator, management.health.status.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration$FastMetricServicesConfiguration, counterBuffers, gaugeBuffers, actuatorMetricReader, counterService, gaugeService, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration, org.springframework.cloud.netflix.servo.ServoMetricsAutoConfiguration, servoMetricNaming, servoMetricCollector, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, mbeanExporter, objectNamingStrategy, mbeanServer, org.springframework.integration.jmx.config.IntegrationMBeanExportConfiguration, integrationMbeanExporter, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationConfiguration, channelInitializer, $autoCreateChannelCandidates, IntegrationConfigurationBeanFactoryPostProcessor, integrationEvaluationContext, org.springframework.integration.expression.IntegrationEvaluationContextAwareBeanPostProcessor#0, integrationGlobalProperties, integrationHeaderChannelRegistry, globalChannelInterceptorProcessor, jsonPath, xpath, toStringFriendlyJsonNodeToStringConverter, converterRegistrar, integrationConversionService, DefaultConfiguringBeanFactoryPostProcessor, datatypeChannelMessageConverter, org.springframework.integration.internalMessagingAnnotationPostProcessor, messageBuilderFactory, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$IntegrationMetricsConfiguration, springIntegrationPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$TomcatMetricsConfiguration, tomcatPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration, systemPublicMetrics, metricReaderPublicMetrics, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$InfoPropertiesConfiguration, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$RequestMappingEndpointConfiguration, requestMappingEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration, environmentEndpoint, healthEndpoint, beansEndpoint, infoEndpoint, metricsEndpoint, traceEndpoint, dumpEndpoint, autoConfigurationAuditEndpoint, shutdownEndpoint, configurationPropertiesReportEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration, endpointMBeanExporter, endpoints.jmx.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration, serverProperties, org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesAutoConfiguration, managementServerProperties, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration, applicationContextIdFilter, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration, endpointHandlerMapping, mvcEndpoints, environmentMvcEndpoint, healthMvcEndpoint, metricsMvcEndpoint, endpoints.health.CONFIGURATION_PROPERTIES, endpoints.cors.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$MetricExportPropertiesConfiguration, spring.metrics.export.CONFIGURATION_PROPERTIES, org.springframework.scheduling.annotation.SchedulingConfiguration, org.springframework.context.annotation.internalScheduledAnnotationProcessor, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration, metricWritersMetricExporter, org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration, metricFilter, org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration, traceRepository, org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration, webRequestLoggingFilter, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, persistenceExceptionTranslationPostProcessor, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, jacksonObjectMapperBuilder, spring.jackson.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, jacksonObjectMapper, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, stringHttpMessageConverter, spring.http.encoding.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, mappingJackson2HttpMessageConverter, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration, messageConverters, org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration, pageableResolver, sortResolver, pagedResourcesAssembler, pagedResourcesAssemblerArgumentResolver, org.springframework.data.web.config.SpringDataJacksonConfiguration, jacksonGeoModule, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyWebConfiguration, groovyMarkupViewResolver, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration, groovyMarkupConfigurer, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, spring.groovy.template.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$EntityLinksConfiguration, entityLinksPluginRegistry, controllerEntityLinks, jaxRsEntityLinks, delegatingEntityLinks, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration$HalObjectMapperConfiguration, halObjectMapperConfigurer, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration, org.springframework.hateoas.hal.HalLinkDiscoverer#0, _halObjectMapper, org.springframework.hateoas.config.HypermediaSupportBeanDefinitionRegistrar$Jackson2ModuleRegisteringBeanPostProcessor#0, _linkDiscovererRegistry, org.springframework.hateoas.LinkDiscoverers#0, defaultRelProvider, annotationRelProvider, relProviderPluginRegistry, _relProvider, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, spring.hateoas.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration, characterEncodingFilter, org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration, multipartConfigElement, multipartResolver, multipart.CONFIGURATION_PROPERTIES, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$RestartConfiguration, classPathFileSystemWatcher, classPathRestartStrategy, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$LiveReloadConfiguration, liveReloadServer, optionalLiveReloadServer, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration, localDeveloperPropertyDefaultsPostProcessor, spring.developertools.CONFIGURATION_PROPERTIES, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RefreshEndpointConfiguration, refreshEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RestartEndpointWithIntegration, restartEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration, pauseEndpoint, resumeEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration, configurationPropertiesRebinder, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, refreshScope, loggingRebinder, environmentManager, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, environmentManagerEndpoint, refreshMvcEndpoint, restartMvcEndpoint, pauseMvcEndpoint, resumeMvcEndpoint, org.springframework.cloud.client.CommonsClientAutoConfiguration, instancesHealthIndicator, discoveryHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, eurekaClientConfigBean, eurekaInstanceConfigBean, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration$RibbonClientConfig, restTemplateCustomizer, ribbonClientHttpRequestFactory, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration, springClientFactory, loadBalancerClient, default.null.RibbonClientSpecification, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, loadBalancedRestTemplate, ribbonInterceptor, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, configServerHealthIndicator, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, configClientProperties, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration, archaiusEndpoint, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration, configurableEnvironmentConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration, hystrixHealthIndicator, org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration, org.springframework.integration.jmx.config.MBeanExporterHelper, nullChannel, errorChannel, _org.springframework.integration.errorLogger.handler, _org.springframework.integration.errorLogger, taskScheduler, org.springframework.integration.config.IdGeneratorConfigurer#0] 2015-06-03 09:05:42.744  INFO 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : BeanFactory id=ea8ab1ff-110f-3860-9e2f-20957d5326c5 2015-06-03 09:05:42.764  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:05:42.982  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration' of type [class org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration$$EnhancerBySpringCGLIB$$d67261d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.043  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$$EnhancerBySpringCGLIB$$af228ef6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.076  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'toStringFriendlyJsonNodeToStringConverter' of type [class org.springframework.integration.json.ToStringFriendlyJsonNodeToStringConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.085  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.autoconfigure.redis.RedisProperties' of type [class org.springframework.boot.autoconfigure.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.101  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration$$EnhancerBySpringCGLIB$$e1c23986] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.196  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConnectionFactory' of type [class org.springframework.data.redis.connection.jedis.JedisConnectionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.215  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.tuple.serializer.kryo.TupleCodec#31ae5721' of type [class org.springframework.xd.tuple.serializer.kryo.TupleCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.218  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec#5d123a7' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.222  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'kryoRegistrar' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.KryoNullRegistrar] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.228  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'defaultCodec' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.PojoCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.233  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'codec' of type [class org.springframework.xd.dirt.integration.bus.serializer.CompositeCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.266  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'messageBus' of type [class org.springframework.xd.dirt.integration.redis.RedisMessageBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.328  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration' of type [class org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration$$EnhancerBySpringCGLIB$$a429aa7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:05:43.601  INFO 14837 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http) 2015-06-03 09:05:43.743  INFO 14837 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service Tomcat 2015-06-03 09:05:43.744  INFO 14837 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.23 2015-06-03 09:05:43.867  INFO 14837 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2015-06-03 09:05:43.868  INFO 14837 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3522 ms 2015-06-03 09:05:44.597  INFO 14837 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2015-06-03 09:05:44.603  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'metricFilter' to: [/*] 2015-06-03 09:05:44.604  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-06-03 09:05:44.604  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'webRequestLoggingFilter' to: [/*] 2015-06-03 09:05:44.604  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-06-03 09:05:44.604  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'applicationContextIdFilter' to: [/*] 2015-06-03 09:05:44.713  INFO 14837 --- [  restartedMain] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/integration/spring-integration-core/4.2.0.M1/spring-integration-core-4.2.0.M1.jar!/META-INF/spring.integration.default.properties] 2015-06-03 09:05:44.800  INFO 14837 --- [  restartedMain] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService  'taskScheduler' 2015-06-03 09:05:45.204  INFO 14837 --- [  restartedMain] o.s.aop.framework.CglibAopProxy          : Unable to proxy method [void com.netflix.discovery.DiscoveryClient.unregister()] because it is package-visible across different ClassLoaders: All calls to this method via a proxy will NOT be routed to the target instance. 2015-06-03 09:05:45.204  INFO 14837 --- [  restartedMain] o.s.aop.framework.CglibAopProxy          : Unable to proxy method [com.netflix.discovery.DiscoveryClient$InstanceInfoReplicator com.netflix.discovery.DiscoveryClient.getInstanceInfoReplicator()] because it is package-visible across different ClassLoaders: All calls to this method via a proxy will NOT be routed to the target instance. 2015-06-03 09:05:45.204  INFO 14837 --- [  restartedMain] o.s.aop.framework.CglibAopProxy          : Unable to proxy method [com.netflix.appinfo.InstanceInfo com.netflix.discovery.DiscoveryClient.getInstanceInfo()] because it is package-visible across different ClassLoaders: All calls to this method via a proxy will NOT be routed to the target instance. 2015-06-03 09:05:45.204  INFO 14837 --- [  restartedMain] o.s.aop.framework.CglibAopProxy          : Unable to proxy method [void com.netflix.discovery.DiscoveryClient.register()] because it is package-visible across different ClassLoaders: All calls to this method via a proxy will NOT be routed to the target instance. 2015-06-03 09:05:45.251  WARN 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources. 2015-06-03 09:05:45.251  INFO 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 2015-06-03 09:05:45.263  INFO 14837 --- [  restartedMain] c.netflix.config.DynamicPropertyFactory  : DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@3358363 2015-06-03 09:05:45.873  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@68e7f67e: startup date [Wed Jun 03 09:05:40 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6da30e2f 2015-06-03 09:05:45.982  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/votes],methods=[POST]}" onto public void demo.VoterApplication.accept(demo.Vote) 2015-06-03 09:05:45.985  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[DELETE]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.untap(java.lang.String) 2015-06-03 09:05:45.985  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps]}" onto public java.util.List&lt;org.springframework.bus.runner.adapter.OutputChannelSpec&gt; org.springframework.bus.runner.config.ChannelsEndpoint.taps() 2015-06-03 09:05:45.986  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[POST]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.tap(java.lang.String) 2015-06-03 09:05:45.988  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2015-06-03 09:05:45.988  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2015-06-03 09:05:45.999  INFO 14837 --- [  restartedMain] o.s.w.s.c.a.WebMvcConfigurerAdapter      : Adding welcome page: file:/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes/static/index.html 2015-06-03 09:05:46.015  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Root mapping to handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2015-06-03 09:05:46.034  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:05:46.034  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:05:46.096  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:05:46.440  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : jolokia: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed 2015-06-03 09:05:46.778 DEBUG 14837 --- [  restartedMain] o.s.c.c.c.ConfigServerHealthIndicator$1  : Initialized  with PropertySources [] 2015-06-03 09:05:47.202  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/resume],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:05:47.203  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/mappings],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.204  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/jolokia/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 2015-06-03 09:05:47.205  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/refresh],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:05:47.206  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/beans],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.206  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2015-06-03 09:05:47.207  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map&lt;java.lang.String, java.lang.Object&gt; org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset() 2015-06-03 09:05:47.209  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/archaius],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.210  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/restart],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke() 2015-06-03 09:05:47.210  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/channels],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.211  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/health]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(java.security.Principal) 2015-06-03 09:05:47.212  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String) 2015-06-03 09:05:47.212  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.212  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/info],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.212  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/autoconfig],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.213  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/dump],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.214  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String) 2015-06-03 09:05:47.214  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.215  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/pause],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:05:47.215  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/configprops],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.216  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/trace],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:05:47.709  INFO 14837 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729 2015-06-03 09:05:47.813  WARN 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources. 2015-06-03 09:05:47.813  INFO 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 2015-06-03 09:05:47.986  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2015-06-03 09:05:48.001  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'messageBusAdapter' has been autodetected for JMX exposure 2015-06-03 09:05:48.002  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'jmxMetricWriter' has been autodetected for JMX exposure 2015-06-03 09:05:48.003  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'integrationMbeanExporter' has been autodetected for JMX exposure 2015-06-03 09:05:48.005  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshEndpoint' has been autodetected for JMX exposure 2015-06-03 09:05:48.005  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'restartEndpoint' has been autodetected for JMX exposure 2015-06-03 09:05:48.006  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure 2015-06-03 09:05:48.007  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshScope' has been autodetected for JMX exposure 2015-06-03 09:05:48.007  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'environmentManager' has been autodetected for JMX exposure 2015-06-03 09:05:48.011  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager] 2015-06-03 09:05:48.026  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint] 2015-06-03 09:05:48.037  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'jmxMetricWriter': registering with JMX server as MBean [org.springframework.boot.actuate.metrics.jmx:name=jmxMetricWriter,type=JmxMetricWriter] 2015-06-03 09:05:48.048  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope] 2015-06-03 09:05:48.056  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'messageBusAdapter': registering with JMX server as MBean [org.springframework.bus.runner.adapter:name=messageBusAdapter,type=MessageBusAdapter] 2015-06-03 09:05:48.060  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'integrationMbeanExporter': registering with JMX server as MBean [org.springframework.integration.monitor:name=integrationMbeanExporter,type=IntegrationMBeanExporter] 2015-06-03 09:05:48.085  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=68e7f67e,type=ConfigurationPropertiesRebinder] 2015-06-03 09:05:48.089  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.bootstrap.config:name=refreshEndpoint,type=RefreshEndpoint] 2015-06-03 09:05:48.094  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering beans for JMX exposure on startup 2015-06-03 09:05:48.096  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel nullChannel 2015-06-03 09:05:48.097  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=nullChannel': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=nullChannel] 2015-06-03 09:05:48.120  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel output 2015-06-03 09:05:48.121  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=output': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=output] 2015-06-03 09:05:48.145  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel errorChannel 2015-06-03 09:05:48.146  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=errorChannel': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=errorChannel] 2015-06-03 09:05:48.167  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageHandler,name=errorLogger,bean=internal': registering with JMX server as MBean [org.springframework.integration:type=MessageHandler,name=errorLogger,bean=internal] 2015-06-03 09:05:48.188  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint': registering with JMX server as MBean [org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint] 2015-06-03 09:05:48.192  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registered endpoint without MessageSource: org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint 2015-06-03 09:05:48.199  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase -2147483648 2015-06-03 09:05:48.202  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0 2015-06-03 09:05:48.203  INFO 14837 --- [  restartedMain] ProxyFactoryBean$MethodInvocationGateway : started voter 2015-06-03 09:05:48.203  INFO 14837 --- [  restartedMain] o.s.i.gateway.GatewayProxyFactoryBean    : started voter 2015-06-03 09:05:48.207  INFO 14837 --- [  restartedMain] .p.EurekaConfigBasedInstanceInfoProvider : Setting initial instance status as: STARTING 2015-06-03 09:05:48.706  INFO 14837 --- [  restartedMain] c.n.e.EurekaDiscoveryClientConfiguration : Registering application voter with eureka with status UP 2015-06-03 09:05:48.708 DEBUG 14837 --- [  restartedMain] s.c.c.d.h.DiscoveryClientHealthIndicator : Discovery Client has been initialized 2015-06-03 09:05:48.741  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel 2015-06-03 09:05:48.741  INFO 14837 --- [  restartedMain] o.s.i.channel.PublishSubscribeChannel    : Channel 'voter.errorChannel' has 1 subscriber(s). 2015-06-03 09:05:48.741  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : started _org.springframework.integration.errorLogger 2015-06-03 09:05:48.799  INFO 14837 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http) 2015-06-03 09:05:48.803  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : Adding {message-handler:outbound.election.0} as a subscriber to the 'output' channel 2015-06-03 09:05:48.803  INFO 14837 --- [  restartedMain] o.s.integration.channel.DirectChannel    : Channel 'voter.output' has 1 subscriber(s). 2015-06-03 09:05:48.803  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : started outbound.election.0 2015-06-03 09:05:48.804  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase -2147483648 2015-06-03 09:05:48.804  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0 2015-06-03 09:05:48.805  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Started VoterApplication in 10.236 seconds (JVM running for 11.087) 2015-06-03 09:08:42.258  INFO 14837 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet' 2015-06-03 09:08:42.258  INFO 14837 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started 2015-06-03 09:08:42.278  INFO 14837 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms 2015-06-03 09:10:01.160  INFO 14837 --- [       Thread-5] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@68e7f67e: startup date [Wed Jun 03 09:05:40 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6da30e2f 2015-06-03 09:10:01.175  INFO 14837 --- [       Thread-5] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0 2015-06-03 09:10:01.184  INFO 14837 --- [       Thread-5] o.s.i.endpoint.EventDrivenConsumer       : Removing {message-handler:outbound.election.0} as a subscriber to the 'output' channel 2015-06-03 09:10:01.185  INFO 14837 --- [       Thread-5] o.s.integration.channel.DirectChannel    : Channel 'voter.output' has 0 subscriber(s). 2015-06-03 09:10:01.185  INFO 14837 --- [       Thread-5] o.s.i.endpoint.EventDrivenConsumer       : stopped outbound.election.0 2015-06-03 09:10:01.192  INFO 14837 --- [       Thread-5] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0 2015-06-03 09:10:01.193  INFO 14837 --- [       Thread-5] ProxyFactoryBean$MethodInvocationGateway : stopped voter 2015-06-03 09:10:01.194  INFO 14837 --- [       Thread-5] o.s.i.gateway.GatewayProxyFactoryBean    : stopped voter 2015-06-03 09:10:01.196  INFO 14837 --- [       Thread-5] o.s.i.endpoint.EventDrivenConsumer       : Removing {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel 2015-06-03 09:10:01.208  INFO 14837 --- [       Thread-4] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6da30e2f: startup date [Wed Jun 03 09:05:39 BST 2015]; root of context hierarchy 2015-06-03 09:10:01.208  INFO 14837 --- [       Thread-5] o.s.i.channel.PublishSubscribeChannel    : Channel 'voter.errorChannel' has 0 subscriber(s). 2015-06-03 09:10:01.220  INFO 14837 --- [       Thread-5] o.s.i.endpoint.EventDrivenConsumer       : stopped _org.springframework.integration.errorLogger 2015-06-03 09:10:01.220  INFO 14837 --- [       Thread-5] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase -2147483648 2015-06-03 09:10:01.221  INFO 14837 --- [       Thread-5] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase -2147483648 Exception in thread "File Watcher" org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$LiveReloadConfiguration': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:216)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1011)     at org.springframework.context.event.ApplicationListenerMethodAdapter.getTargetBean(ApplicationListenerMethodAdapter.java:240)     at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:210)     at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:109)     at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:99)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:364)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333)     at org.springframework.boot.developertools.classpath.ClassPathFileChangeListener.onChange(ClassPathFileChangeListener.java:59)     at org.springframework.boot.developertools.filewatch.FileSystemWatcher.fireListeners(FileSystemWatcher.java:183)     at org.springframework.boot.developertools.filewatch.FileSystemWatcher.updateSnapshots(FileSystemWatcher.java:176)     at org.springframework.boot.developertools.filewatch.FileSystemWatcher.scan(FileSystemWatcher.java:153)     at org.springframework.boot.developertools.filewatch.FileSystemWatcher.access$100(FileSystemWatcher.java:40)     at org.springframework.boot.developertools.filewatch.FileSystemWatcher$1.run(FileSystemWatcher.java:122) 2015-06-03 09:10:01.745  INFO 14837 --- [       Thread-5] o.s.c.n.servo.ServoMetricCollector       : Stopping Servo PollScheduler 2015-06-03 09:10:01.747  INFO 14837 --- [       Thread-5] c.n.e.EurekaDiscoveryClientConfiguration : Closing DiscoveryClient.jerseyClient 2015-06-03 09:10:01.748  INFO 14837 --- [       Thread-5] c.n.e.EurekaDiscoveryClientConfiguration : Removing application voter from eureka 2015-06-03 09:10:01.756  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Unregistering JMX-exposed beans on shutdown 2015-06-03 09:10:01.757  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Unregistering JMX-exposed beans 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Summary on shutdown: org.springframework.integration.channel.NullChannel@74011da3 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Summary on shutdown: output 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Summary on shutdown: errorChannel 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.i.monitor.IntegrationMBeanExporter   : Summary on shutdown: _org.springframework.integration.errorLogger.handler 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown 2015-06-03 09:10:01.758  INFO 14837 --- [       Thread-5] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans 2015-06-03 09:10:01.761  INFO 14837 --- [       Thread-5] o.s.s.c.ThreadPoolTaskScheduler          : Shutting down ExecutorService 'taskScheduler' 2015-06-03 09:10:02.516  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Starting VoterApplication on dsyer with PID 14837 (/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes started by dsyer in /home/dsyer/dev/cloud/workspace/bus-demo/voter) 2015-06-03 09:10:02.520  INFO 14837 --- [  restartedMain] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4066eb31: startup date [Wed Jun 03 09:10:02 BST 2015]; root of context hierarchy 2015-06-03 09:10:02.550  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Starting VoterApplication on dsyer with PID 14837 (/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes started by dsyer in /home/dsyer/dev/cloud/workspace/bus-demo/voter) 2015-06-03 09:10:02.565  INFO 14837 --- [  restartedMain] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7f3f686b: startup date [Wed Jun 03 09:10:02 BST 2015]; root of context hierarchy 2015-06-03 09:10:02.594  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:10:02.596  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:10:02.609  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encrypt.CONFIGURATION_PROPERTIES' of type [class org.springframework.cloud.bootstrap.encrypt.KeyProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:02.617  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encrypt.CONFIGURATION_PROPERTIES' of type [class org.springframework.cloud.bootstrap.encrypt.KeyProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:02.617  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encryptionBootstrapConfiguration' of type [class org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration$$EnhancerBySpringCGLIB$$73f2e79f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:02.617  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'encryptionBootstrapConfiguration' of type [class org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration$$EnhancerBySpringCGLIB$$73f2e79f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:02.658  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Started VoterApplication in 0.188 seconds (JVM running for 264.94) 2015-06-03 09:10:02.664  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Started VoterApplication in 0.21 seconds (JVM running for 264.946)    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v1.3.0.BUILD-SNAPSHOT)     .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v1.3.0.BUILD-SNAPSHOT)  2015-06-03 09:10:02.715 ERROR 14837 --- [  restartedMain] c.c.c.ConfigServicePropertySourceLocator : Could not locate PropertySource: I/O error on GET request for "http://localhost:8888/voter/default":Connection refused; nested exception is java.net.ConnectException: Connection refused 2015-06-03 09:10:02.722 ERROR 14837 --- [  restartedMain] c.c.c.ConfigServicePropertySourceLocator : Could not locate PropertySource: I/O error on GET request for "http://localhost:8888/voter/default":Connection refused; nested exception is java.net.ConnectException: Connection refused 2015-06-03 09:10:02.731  INFO 14837 --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1301ee79: startup date [Wed Jun 03 09:10:02 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@4066eb31 2015-06-03 09:10:02.740  INFO 14837 --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6c8fbe26: startup date [Wed Jun 03 09:10:02 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@7f3f686b 2015-06-03 09:10:04.056  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-messagebus-redis/1.2.0.BUILD-SNAPSHOT/spring-xd-messagebus-redis-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/redis-bus.xml] 2015-06-03 09:10:04.110  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-messagebus-redis/1.2.0.BUILD-SNAPSHOT/spring-xd-messagebus-redis-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/redis-bus.xml] 2015-06-03 09:10:04.138  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/analytics/redis-analytics.xml] 2015-06-03 09:10:04.144  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/analytics/redis-analytics.xml] 2015-06-03 09:10:04.183  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/codec.xml] 2015-06-03 09:10:04.191  INFO 14837 --- [  restartedMain] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/xd/spring-xd-dirt/1.2.0.BUILD-SNAPSHOT/spring-xd-dirt-1.2.0.BUILD-SNAPSHOT.jar!/META-INF/spring-xd/bus/codec.xml] 2015-06-03 09:10:04.267  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2015-06-03 09:10:04.284  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2015-06-03 09:10:04.310  INFO 14837 --- [  restartedMain] o.s.i.config.IntegrationRegistrar        : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created. 2015-06-03 09:10:04.323  INFO 14837 --- [  restartedMain] o.s.i.config.IntegrationRegistrar        : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created. 2015-06-03 09:10:04.398  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'infoEndpoint' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/cloud/autoconfigure/RefreshAutoConfiguration$InfoEndpointRebinderConfiguration.class]] 2015-06-03 09:10:04.399  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'infoEndpoint' with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration; factoryMethodName=infoEndpoint; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/cloud/autoconfigure/RefreshAutoConfiguration$InfoEndpointRebinderConfiguration.class]] 2015-06-03 09:10:04.426  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'default.null.RibbonClientSpecification' with a different definition: replacing [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] 2015-06-03 09:10:04.431  INFO 14837 --- [  restartedMain] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'default.null.RibbonClientSpecification' with a different definition: replacing [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Generic bean: class [org.springframework.cloud.netflix.ribbon.RibbonClientSpecification]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] 2015-06-03 09:10:04.589  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created. 2015-06-03 09:10:04.589  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created. 2015-06-03 09:10:04.589 DEBUG 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : Generating bean factory id from names: [org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.event.internalEventListenerProcessor, org.springframework.context.event.internalEventListenerFactory, voterApplication, org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor, org.springframework.bus.runner.config.RedisServiceConfiguration, messageBus, counterRepository, fieldValueCounterRepository, gaugeRepository, richGaugeRepository, aggregateCounterRepository, retryTemplate, backOffPolicy, retryPolicy, retryableExceptions, org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration, messageBusAwareRouterBeanPostProcessor, org.springframework.bus.runner.config.MessageBusAdapterConfiguration, messageBusAdapter, channelsEndpoint, codec, defaultCodec, kryoRegistrar, spring.bus.CONFIGURATION_PROPERTIES, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.store, org.springframework.bus.runner.config.LifecycleConfiguration, output, redisMetricWriter, jmxMetricWriter, springIntegrationMetricReader, org.springframework.boot.autoconfigure.AutoConfigurationPackages, voter, org.springframework.boot.autoconfigure.condition.BeanTypeRegistry, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaHealthIndicatorConfiguration, eurekaHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$DiscoveryManagerInitializerConfiguration, discoveryManagerInitializer, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, scopedTarget.eurekaDiscoveryClient, eurekaDiscoveryClient, discoveryClient, containerPortInitializer, org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration, propertySourcesPlaceholderConfigurer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration, websocketContainerCustomizer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat, tomcatEmbeddedServletContainerFactory, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration, embeddedServletContainerCustomizerBeanPostProcessor, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, dispatcherServlet, dispatcherServletRegistration, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, error, beanNameViewResolver, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration, errorAttributes, basicErrorController, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration, requestMappingHandlerAdapter, requestMappingHandlerMapping, mvcContentNegotiationManager, viewControllerHandlerMapping, beanNameHandlerMapping, resourceHandlerMapping, mvcResourceUrlProvider, defaultServletHandlerMapping, mvcConversionService, mvcValidator, mvcPathMatcher, mvcUrlPathHelper, mvcUriComponentsContributor, httpRequestHandlerAdapter, simpleControllerHandlerAdapter, handlerExceptionResolver, mvcViewResolver, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration, faviconHandlerMapping, faviconRequestHandler, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, defaultViewResolver, requestContextListener, viewResolver, spring.mvc.CONFIGURATION_PROPERTIES, spring.resources.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration, hiddenHttpMethodFilter, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration$AuditEventRepositoryConfiguration, auditEventRepository, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration, auditListener, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisConfiguration, redisTemplate, stringRedisTemplate, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration, redisConnectionFactory, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration, org.springframework.autoconfigure.redis.RedisProperties, org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration, jolokiaEndpoint, jolokia.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$DiskSpaceHealthIndicatorConfiguration, diskSpaceHealthIndicator, diskSpaceHealthIndicatorProperties, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$RedisHealthIndicatorConfiguration, redisHealthIndicator, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration, healthAggregator, management.health.status.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration$FastMetricServicesConfiguration, counterBuffers, gaugeBuffers, actuatorMetricReader, counterService, gaugeService, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration, org.springframework.cloud.netflix.servo.ServoMetricsAutoConfiguration, servoMetricNaming, servoMetricCollector, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, mbeanExporter, objectNamingStrategy, mbeanServer, org.springframework.integration.jmx.config.IntegrationMBeanExportConfiguration, integrationMbeanExporter, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationConfiguration, channelInitializer, $autoCreateChannelCandidates, IntegrationConfigurationBeanFactoryPostProcessor, integrationEvaluationContext, org.springframework.integration.expression.IntegrationEvaluationContextAwareBeanPostProcessor#0, integrationGlobalProperties, integrationHeaderChannelRegistry, globalChannelInterceptorProcessor, jsonPath, xpath, toStringFriendlyJsonNodeToStringConverter, converterRegistrar, integrationConversionService, DefaultConfiguringBeanFactoryPostProcessor, datatypeChannelMessageConverter, org.springframework.integration.internalMessagingAnnotationPostProcessor, messageBuilderFactory, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$IntegrationMetricsConfiguration, springIntegrationPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$TomcatMetricsConfiguration, tomcatPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration, systemPublicMetrics, metricReaderPublicMetrics, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$InfoPropertiesConfiguration, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$RequestMappingEndpointConfiguration, requestMappingEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration, environmentEndpoint, healthEndpoint, beansEndpoint, infoEndpoint, metricsEndpoint, traceEndpoint, dumpEndpoint, autoConfigurationAuditEndpoint, shutdownEndpoint, configurationPropertiesReportEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration, endpointMBeanExporter, endpoints.jmx.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration, serverProperties, org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesAutoConfiguration, managementServerProperties, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration, applicationContextIdFilter, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration, endpointHandlerMapping, mvcEndpoints, environmentMvcEndpoint, healthMvcEndpoint, metricsMvcEndpoint, endpoints.health.CONFIGURATION_PROPERTIES, endpoints.cors.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$MetricExportPropertiesConfiguration, spring.metrics.export.CONFIGURATION_PROPERTIES, org.springframework.scheduling.annotation.SchedulingConfiguration, org.springframework.context.annotation.internalScheduledAnnotationProcessor, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration, metricWritersMetricExporter, org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration, metricFilter, org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration, traceRepository, org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration, webRequestLoggingFilter, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, persistenceExceptionTranslationPostProcessor, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, jacksonObjectMapperBuilder, spring.jackson.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, jacksonObjectMapper, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, stringHttpMessageConverter, spring.http.encoding.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, mappingJackson2HttpMessageConverter, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration, messageConverters, org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration, pageableResolver, sortResolver, pagedResourcesAssembler, pagedResourcesAssemblerArgumentResolver, org.springframework.data.web.config.SpringDataJacksonConfiguration, jacksonGeoModule, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyWebConfiguration, groovyMarkupViewResolver, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration, groovyMarkupConfigurer, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, spring.groovy.template.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$EntityLinksConfiguration, entityLinksPluginRegistry, controllerEntityLinks, jaxRsEntityLinks, delegatingEntityLinks, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration$HalObjectMapperConfiguration, halObjectMapperConfigurer, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration, org.springframework.hateoas.hal.HalLinkDiscoverer#0, _halObjectMapper, org.springframework.hateoas.config.HypermediaSupportBeanDefinitionRegistrar$Jackson2ModuleRegisteringBeanPostProcessor#0, _linkDiscovererRegistry, org.springframework.hateoas.LinkDiscoverers#0, defaultRelProvider, annotationRelProvider, relProviderPluginRegistry, _relProvider, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, spring.hateoas.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration, characterEncodingFilter, org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration, multipartConfigElement, multipartResolver, multipart.CONFIGURATION_PROPERTIES, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$RestartConfiguration, classPathFileSystemWatcher, classPathRestartStrategy, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$LiveReloadConfiguration, liveReloadServer, optionalLiveReloadServer, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration, localDeveloperPropertyDefaultsPostProcessor, spring.developertools.CONFIGURATION_PROPERTIES, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RefreshEndpointConfiguration, refreshEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RestartEndpointWithIntegration, restartEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration, pauseEndpoint, resumeEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration, configurationPropertiesRebinder, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, refreshScope, loggingRebinder, environmentManager, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, environmentManagerEndpoint, refreshMvcEndpoint, restartMvcEndpoint, pauseMvcEndpoint, resumeMvcEndpoint, org.springframework.cloud.client.CommonsClientAutoConfiguration, instancesHealthIndicator, discoveryHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, eurekaClientConfigBean, eurekaInstanceConfigBean, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration$RibbonClientConfig, restTemplateCustomizer, ribbonClientHttpRequestFactory, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration, springClientFactory, loadBalancerClient, default.null.RibbonClientSpecification, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, loadBalancedRestTemplate, ribbonInterceptor, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, configServerHealthIndicator, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, configClientProperties, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration, archaiusEndpoint, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration, configurableEnvironmentConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration, hystrixHealthIndicator, org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration, org.springframework.integration.jmx.config.MBeanExporterHelper, nullChannel, errorChannel, _org.springframework.integration.errorLogger.handler, _org.springframework.integration.errorLogger, taskScheduler, org.springframework.integration.config.IdGeneratorConfigurer#0] 2015-06-03 09:10:04.595  INFO 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : BeanFactory id=ea8ab1ff-110f-3860-9e2f-20957d5326c5 2015-06-03 09:10:04.603  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created. 2015-06-03 09:10:04.603  INFO 14837 --- [  restartedMain] faultConfiguringBeanFactoryPostProcessor : No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created. 2015-06-03 09:10:04.604 DEBUG 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : Generating bean factory id from names: [org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalRequiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.event.internalEventListenerProcessor, org.springframework.context.event.internalEventListenerFactory, voterApplication, org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor, org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor, org.springframework.bus.runner.config.RedisServiceConfiguration, messageBus, counterRepository, fieldValueCounterRepository, gaugeRepository, richGaugeRepository, aggregateCounterRepository, retryTemplate, backOffPolicy, retryPolicy, retryableExceptions, org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration, messageBusAwareRouterBeanPostProcessor, org.springframework.bus.runner.config.MessageBusAdapterConfiguration, messageBusAdapter, channelsEndpoint, codec, defaultCodec, kryoRegistrar, spring.bus.CONFIGURATION_PROPERTIES, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.store, org.springframework.bus.runner.config.LifecycleConfiguration, output, redisMetricWriter, jmxMetricWriter, springIntegrationMetricReader, org.springframework.boot.autoconfigure.AutoConfigurationPackages, voter, org.springframework.boot.autoconfigure.condition.BeanTypeRegistry, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaHealthIndicatorConfiguration, eurekaHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$DiscoveryManagerInitializerConfiguration, discoveryManagerInitializer, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, scopedTarget.eurekaDiscoveryClient, eurekaDiscoveryClient, discoveryClient, containerPortInitializer, org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration, propertySourcesPlaceholderConfigurer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration, websocketContainerCustomizer, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat, tomcatEmbeddedServletContainerFactory, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration, embeddedServletContainerCustomizerBeanPostProcessor, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, dispatcherServlet, dispatcherServletRegistration, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, error, beanNameViewResolver, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration, errorAttributes, basicErrorController, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration, requestMappingHandlerAdapter, requestMappingHandlerMapping, mvcContentNegotiationManager, viewControllerHandlerMapping, beanNameHandlerMapping, resourceHandlerMapping, mvcResourceUrlProvider, defaultServletHandlerMapping, mvcConversionService, mvcValidator, mvcPathMatcher, mvcUrlPathHelper, mvcUriComponentsContributor, httpRequestHandlerAdapter, simpleControllerHandlerAdapter, handlerExceptionResolver, mvcViewResolver, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration, faviconHandlerMapping, faviconRequestHandler, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, defaultViewResolver, requestContextListener, viewResolver, spring.mvc.CONFIGURATION_PROPERTIES, spring.resources.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration, hiddenHttpMethodFilter, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration$AuditEventRepositoryConfiguration, auditEventRepository, org.springframework.boot.actuate.autoconfigure.AuditAutoConfiguration, auditListener, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisConfiguration, redisTemplate, stringRedisTemplate, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration, redisConnectionFactory, org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration, org.springframework.autoconfigure.redis.RedisProperties, org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration, jolokiaEndpoint, jolokia.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$DiskSpaceHealthIndicatorConfiguration, diskSpaceHealthIndicator, diskSpaceHealthIndicatorProperties, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration$RedisHealthIndicatorConfiguration, redisHealthIndicator, org.springframework.boot.actuate.autoconfigure.HealthIndicatorAutoConfiguration, healthAggregator, management.health.status.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration$FastMetricServicesConfiguration, counterBuffers, gaugeBuffers, actuatorMetricReader, counterService, gaugeService, org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfiguration, org.springframework.cloud.netflix.servo.ServoMetricsAutoConfiguration, servoMetricNaming, servoMetricCollector, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, mbeanExporter, objectNamingStrategy, mbeanServer, org.springframework.integration.jmx.config.IntegrationMBeanExportConfiguration, integrationMbeanExporter, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationJmxConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationConfiguration, channelInitializer, $autoCreateChannelCandidates, IntegrationConfigurationBeanFactoryPostProcessor, integrationEvaluationContext, org.springframework.integration.expression.IntegrationEvaluationContextAwareBeanPostProcessor#0, integrationGlobalProperties, integrationHeaderChannelRegistry, globalChannelInterceptorProcessor, jsonPath, xpath, toStringFriendlyJsonNodeToStringConverter, converterRegistrar, integrationConversionService, DefaultConfiguringBeanFactoryPostProcessor, datatypeChannelMessageConverter, org.springframework.integration.internalMessagingAnnotationPostProcessor, messageBuilderFactory, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$IntegrationMetricsConfiguration, springIntegrationPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration$TomcatMetricsConfiguration, tomcatPublicMetrics, org.springframework.boot.actuate.autoconfigure.PublicMetricsAutoConfiguration, systemPublicMetrics, metricReaderPublicMetrics, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$InfoPropertiesConfiguration, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$RequestMappingEndpointConfiguration, requestMappingEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration, environmentEndpoint, healthEndpoint, beansEndpoint, infoEndpoint, metricsEndpoint, traceEndpoint, dumpEndpoint, autoConfigurationAuditEndpoint, shutdownEndpoint, configurationPropertiesReportEndpoint, org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportAutoConfiguration, endpointMBeanExporter, endpoints.jmx.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration, serverProperties, org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesAutoConfiguration, managementServerProperties, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextFilterConfiguration, applicationContextIdFilter, org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration, endpointHandlerMapping, mvcEndpoints, environmentMvcEndpoint, healthMvcEndpoint, metricsMvcEndpoint, endpoints.health.CONFIGURATION_PROPERTIES, endpoints.cors.CONFIGURATION_PROPERTIES, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration$MetricExportPropertiesConfiguration, spring.metrics.export.CONFIGURATION_PROPERTIES, org.springframework.scheduling.annotation.SchedulingConfiguration, org.springframework.context.annotation.internalScheduledAnnotationProcessor, org.springframework.boot.actuate.autoconfigure.MetricExportAutoConfiguration, metricWritersMetricExporter, org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration, metricFilter, org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration, traceRepository, org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration, webRequestLoggingFilter, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, persistenceExceptionTranslationPostProcessor, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, jacksonObjectMapperBuilder, spring.jackson.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, jacksonObjectMapper, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, stringHttpMessageConverter, spring.http.encoding.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, mappingJackson2HttpMessageConverter, org.springframework.boot.autoconfigure.web.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration, messageConverters, org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration, pageableResolver, sortResolver, pagedResourcesAssembler, pagedResourcesAssemblerArgumentResolver, org.springframework.data.web.config.SpringDataJacksonConfiguration, jacksonGeoModule, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyWebConfiguration, groovyMarkupViewResolver, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration, groovyMarkupConfigurer, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, spring.groovy.template.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$EntityLinksConfiguration, entityLinksPluginRegistry, controllerEntityLinks, jaxRsEntityLinks, delegatingEntityLinks, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration$HalObjectMapperConfiguration, halObjectMapperConfigurer, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration$HypermediaConfiguration, org.springframework.hateoas.hal.HalLinkDiscoverer#0, _halObjectMapper, org.springframework.hateoas.config.HypermediaSupportBeanDefinitionRegistrar$Jackson2ModuleRegisteringBeanPostProcessor#0, _linkDiscovererRegistry, org.springframework.hateoas.LinkDiscoverers#0, defaultRelProvider, annotationRelProvider, relProviderPluginRegistry, _relProvider, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, spring.hateoas.CONFIGURATION_PROPERTIES, org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration, characterEncodingFilter, org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration, multipartConfigElement, multipartResolver, multipart.CONFIGURATION_PROPERTIES, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$RestartConfiguration, classPathFileSystemWatcher, classPathRestartStrategy, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration$LiveReloadConfiguration, liveReloadServer, optionalLiveReloadServer, org.springframework.boot.developertools.autoconfigure.LocalDeveloperToolsAutoConfiguration, localDeveloperPropertyDefaultsPostProcessor, spring.developertools.CONFIGURATION_PROPERTIES, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RefreshEndpointConfiguration, refreshEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration$RestartEndpointWithIntegration, restartEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshEndpointsConfiguration, pauseEndpoint, resumeEndpoint, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration, configurationPropertiesRebinder, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$InfoEndpointRebinderConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, refreshScope, loggingRebinder, environmentManager, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, environmentManagerEndpoint, refreshMvcEndpoint, restartMvcEndpoint, pauseMvcEndpoint, resumeMvcEndpoint, org.springframework.cloud.client.CommonsClientAutoConfiguration, instancesHealthIndicator, discoveryHealthIndicator, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, eurekaClientConfigBean, eurekaInstanceConfigBean, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration$RibbonClientConfig, restTemplateCustomizer, ribbonClientHttpRequestFactory, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration, springClientFactory, loadBalancerClient, default.null.RibbonClientSpecification, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, loadBalancedRestTemplate, ribbonInterceptor, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, configServerHealthIndicator, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, configClientProperties, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration, archaiusEndpoint, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration, configurableEnvironmentConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration, hystrixHealthIndicator, org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration, org.springframework.integration.jmx.config.MBeanExporterHelper, nullChannel, errorChannel, _org.springframework.integration.errorLogger.handler, _org.springframework.integration.errorLogger, taskScheduler, org.springframework.integration.config.IdGeneratorConfigurer#0] 2015-06-03 09:10:04.604  INFO 14837 --- [  restartedMain] o.s.cloud.context.scope.GenericScope     : BeanFactory id=ea8ab1ff-110f-3860-9e2f-20957d5326c5 2015-06-03 09:10:04.606  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:10:04.616  INFO 14837 --- [  restartedMain] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring 2015-06-03 09:10:04.657  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration' of type [class org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration$$EnhancerBySpringCGLIB$$d67261d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.676  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration' of type [class org.springframework.bus.runner.config.MessageBusAdapterConfiguration$MessageBusAwareRouterConfiguration$$EnhancerBySpringCGLIB$$d67261d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.681  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$$EnhancerBySpringCGLIB$$af228ef6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.699  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'toStringFriendlyJsonNodeToStringConverter' of type [class org.springframework.integration.json.ToStringFriendlyJsonNodeToStringConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.701  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$$EnhancerBySpringCGLIB$$af228ef6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.704  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.autoconfigure.redis.RedisProperties' of type [class org.springframework.boot.autoconfigure.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.716  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration$$EnhancerBySpringCGLIB$$e1c23986] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.720  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConnectionFactory' of type [class org.springframework.data.redis.connection.jedis.JedisConnectionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.721  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.tuple.serializer.kryo.TupleCodec#4e6f0a48' of type [class org.springframework.xd.tuple.serializer.kryo.TupleCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.721  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec#454a1c8b' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.721  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'kryoRegistrar' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.KryoNullRegistrar] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.722  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'defaultCodec' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.PojoCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.723  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'codec' of type [class org.springframework.xd.dirt.integration.bus.serializer.CompositeCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.726  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'toStringFriendlyJsonNodeToStringConverter' of type [class org.springframework.integration.json.ToStringFriendlyJsonNodeToStringConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.729  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'messageBus' of type [class org.springframework.xd.dirt.integration.redis.RedisMessageBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.733  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.autoconfigure.redis.RedisProperties' of type [class org.springframework.boot.autoconfigure.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.736  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration' of type [class org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration$$EnhancerBySpringCGLIB$$a429aa7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.744  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration' of type [class org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration$RedisPooledConnectionConfiguration$$EnhancerBySpringCGLIB$$e1c23986] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.746  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'redisConnectionFactory' of type [class org.springframework.data.redis.connection.jedis.JedisConnectionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.747  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.tuple.serializer.kryo.TupleCodec#74454e47' of type [class org.springframework.xd.tuple.serializer.kryo.TupleCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.747  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec#14066687' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.FileCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.747  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'kryoRegistrar' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.KryoNullRegistrar] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.748  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'defaultCodec' of type [class org.springframework.xd.dirt.integration.bus.serializer.kryo.PojoCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.749  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'codec' of type [class org.springframework.xd.dirt.integration.bus.serializer.CompositeCodec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.752  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'messageBus' of type [class org.springframework.xd.dirt.integration.redis.RedisMessageBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.757  INFO 14837 --- [  restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration' of type [class org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$ConfigurationPropertiesRebinderConfiguration$$EnhancerBySpringCGLIB$$a429aa7c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2015-06-03 09:10:04.830  INFO 14837 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http) 2015-06-03 09:10:04.832  INFO 14837 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service Tomcat 2015-06-03 09:10:04.834  INFO 14837 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.23 2015-06-03 09:10:04.849  INFO 14837 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http) 2015-06-03 09:10:04.850  INFO 14837 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service Tomcat 2015-06-03 09:10:04.850  INFO 14837 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.23 2015-06-03 09:10:04.859  INFO 14837 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2015-06-03 09:10:04.860  INFO 14837 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2120 ms 2015-06-03 09:10:04.862  INFO 14837 --- [ost-startStop-1] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : Initializing Spring embedded WebApplicationContext 2015-06-03 09:10:04.864  INFO 14837 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2133 ms 2015-06-03 09:10:05.309  INFO 14837 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2015-06-03 09:10:05.310  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'metricFilter' to: [/*] 2015-06-03 09:10:05.310  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-06-03 09:10:05.310  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'webRequestLoggingFilter' to: [/*] 2015-06-03 09:10:05.310  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-06-03 09:10:05.310  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'applicationContextIdFilter' to: [/*] 2015-06-03 09:10:05.341  INFO 14837 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2015-06-03 09:10:05.342  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'metricFilter' to: [/*] 2015-06-03 09:10:05.342  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*] 2015-06-03 09:10:05.342  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'webRequestLoggingFilter' to: [/*] 2015-06-03 09:10:05.342  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2015-06-03 09:10:05.342  INFO 14837 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'applicationContextIdFilter' to: [/*] 2015-06-03 09:10:05.358  INFO 14837 --- [  restartedMain] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/integration/spring-integration-core/4.2.0.M1/spring-integration-core-4.2.0.M1.jar!/META-INF/spring.integration.default.properties] 2015-06-03 09:10:05.364  INFO 14837 --- [  restartedMain] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService  'taskScheduler' 2015-06-03 09:10:05.386  INFO 14837 --- [  restartedMain] o.s.b.f.config.PropertiesFactoryBean     : Loading properties file from URL [jar:file:/home/dsyer/.m2/repository/org/springframework/integration/spring-integration-core/4.2.0.M1/spring-integration-core-4.2.0.M1.jar!/META-INF/spring.integration.default.properties] 2015-06-03 09:10:05.392  INFO 14837 --- [  restartedMain] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService  'taskScheduler' 2015-06-03 09:10:05.618  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6c8fbe26: startup date [Wed Jun 03 09:10:02 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@7f3f686b 2015-06-03 09:10:05.634  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/votes],methods=[GET]}" onto public void demo.VoterApplication.votes(demo.Vote) 2015-06-03 09:10:05.635  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/votes],methods=[POST]}" onto public void demo.VoterApplication.accept(demo.Vote) 2015-06-03 09:10:05.636  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[DELETE]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.untap(java.lang.String) 2015-06-03 09:10:05.636  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps]}" onto public java.util.List&lt;org.springframework.bus.runner.adapter.OutputChannelSpec&gt; org.springframework.bus.runner.config.ChannelsEndpoint.taps() 2015-06-03 09:10:05.636  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[POST]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.tap(java.lang.String) 2015-06-03 09:10:05.637  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2015-06-03 09:10:05.637  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2015-06-03 09:10:05.641  INFO 14837 --- [  restartedMain] o.s.w.s.c.a.WebMvcConfigurerAdapter      : Adding welcome page: file:/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes/static/index.html 2015-06-03 09:10:05.642  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1301ee79: startup date [Wed Jun 03 09:10:02 BST 2015]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@4066eb31 2015-06-03 09:10:05.644  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Root mapping to handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2015-06-03 09:10:05.651  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.651  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.670  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.672  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/votes],methods=[GET]}" onto public void demo.VoterApplication.votes(demo.Vote) 2015-06-03 09:10:05.672  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/votes],methods=[POST]}" onto public void demo.VoterApplication.accept(demo.Vote) 2015-06-03 09:10:05.673  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[DELETE]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.untap(java.lang.String) 2015-06-03 09:10:05.674  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps]}" onto public java.util.List&lt;org.springframework.bus.runner.adapter.OutputChannelSpec&gt; org.springframework.bus.runner.config.ChannelsEndpoint.taps() 2015-06-03 09:10:05.674  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/channels/taps],methods=[POST]}" onto public org.springframework.bus.runner.adapter.OutputChannelSpec org.springframework.bus.runner.config.ChannelsEndpoint.tap(java.lang.String) 2015-06-03 09:10:05.675  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2015-06-03 09:10:05.675  INFO 14837 --- [  restartedMain] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2015-06-03 09:10:05.679  INFO 14837 --- [  restartedMain] o.s.w.s.c.a.WebMvcConfigurerAdapter      : Adding welcome page: file:/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes/static/index.html 2015-06-03 09:10:05.693  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Root mapping to handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2015-06-03 09:10:05.698  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.700  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.732  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : jolokia: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed 2015-06-03 09:10:05.745  INFO 14837 --- [  restartedMain] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2015-06-03 09:10:05.750  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : jolokia: jolokia:type=Config is already registered. Adding it with jolokia:type=Config,uuid=971a1123-3241-414f-acaf-46e48535b763, but you should revise your setup in order to either use a qualifier or ensure, that only a single agent gets registered (otherwise history functionality might not work) 2015-06-03 09:10:05.751  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : jolokia: Cannot register (legacy) MBean handler for config store with name jmx4perl:type=Config since it already exists. This is the case if another agent has been already started within the same JVM. The registration is skipped. 2015-06-03 09:10:05.751  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : jolokia: Jolokia Discovery MBean registration is skipped because there is already one registered. 2015-06-03 09:10:05.792  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : jolokia: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed 2015-06-03 09:10:05.805  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : jolokia: jolokia:type=Config is already registered. Adding it with jolokia:type=Config,uuid=e08e2755-637b-4d47-91fd-49bcf8c243c8, but you should revise your setup in order to either use a qualifier or ensure, that only a single agent gets registered (otherwise history functionality might not work) 2015-06-03 09:10:05.806 DEBUG 14837 --- [  restartedMain] o.s.c.c.c.ConfigServerHealthIndicator$1  : Initialized  with PropertySources [] 2015-06-03 09:10:05.806  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : jolokia: Cannot register (legacy) MBean handler for config store with name jmx4perl:type=Config since it already exists. This is the case if another agent has been already started within the same JVM. The registration is skipped. 2015-06-03 09:10:05.807  INFO 14837 --- [  restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/]     : jolokia: Jolokia Discovery MBean registration is skipped because there is already one registered. 2015-06-03 09:10:05.854 DEBUG 14837 --- [  restartedMain] o.s.c.c.c.ConfigServerHealthIndicator$1  : Initialized  with PropertySources [] 2015-06-03 09:10:05.982  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/refresh],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:05.983  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String) 2015-06-03 09:10:05.983  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.984  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/jolokia/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 2015-06-03 09:10:05.984  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/mappings],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.985  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2015-06-03 09:10:05.985  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map&lt;java.lang.String, java.lang.Object&gt; org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset() 2015-06-03 09:10:05.985  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/pause],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:05.985  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/trace],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.986  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/info],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.986  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/health]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(java.security.Principal) 2015-06-03 09:10:05.986  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/archaius],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.987  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/autoconfig],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.987  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/dump],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.988  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/resume],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:05.990  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/beans],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.990  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/configprops],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.990  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/channels],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:05.991  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/restart],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke() 2015-06-03 09:10:05.992  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String) 2015-06-03 09:10:05.992  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.040  INFO 14837 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729 2015-06-03 09:10:06.050  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/trace],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.050  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/health]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(java.security.Principal) 2015-06-03 09:10:06.051  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/mappings],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.052  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/channels],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.052  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/beans],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.052  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/info],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.052  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String) 2015-06-03 09:10:06.053  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.053  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/autoconfig],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.053  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/refresh],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:06.053  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/configprops],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.054  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/jolokia/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 2015-06-03 09:10:06.054  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/archaius],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.054  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/dump],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.055  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/pause],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:06.055  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map&lt;java.lang.String, java.lang.String&gt;) 2015-06-03 09:10:06.055  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map&lt;java.lang.String, java.lang.Object&gt; org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset() 2015-06-03 09:10:06.056  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/restart],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke() 2015-06-03 09:10:06.056  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/resume],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke() 2015-06-03 09:10:06.056  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics/{name:.*}],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String) 2015-06-03 09:10:06.056  INFO 14837 --- [  restartedMain] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped "{[/metrics],methods=[GET]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke() 2015-06-03 09:10:06.068  WARN 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources. 2015-06-03 09:10:06.068  INFO 14837 --- [  restartedMain] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath. 2015-06-03 09:10:06.101  INFO 14837 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729 2015-06-03 09:10:06.128  WARN 14837 --- [  restartedMain] o.s.c.n.a.ArchaiusAutoConfiguration      : Netflix ConfigurationManager has already been installed, unable to re-install 2015-06-03 09:10:06.163  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2015-06-03 09:10:06.167  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'messageBusAdapter' has been autodetected for JMX exposure 2015-06-03 09:10:06.170  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'jmxMetricWriter' has been autodetected for JMX exposure 2015-06-03 09:10:06.176  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'integrationMbeanExporter' has been autodetected for JMX exposure 2015-06-03 09:10:06.177  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshEndpoint' has been autodetected for JMX exposure 2015-06-03 09:10:06.182  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'restartEndpoint' has been autodetected for JMX exposure 2015-06-03 09:10:06.183  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure 2015-06-03 09:10:06.183  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshScope' has been autodetected for JMX exposure 2015-06-03 09:10:06.183  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'environmentManager' has been autodetected for JMX exposure 2015-06-03 09:10:06.190  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager] 2015-06-03 09:10:06.206  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint] 2015-06-03 09:10:06.210  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'jmxMetricWriter': registering with JMX server as MBean [org.springframework.boot.actuate.metrics.jmx:name=jmxMetricWriter,type=JmxMetricWriter] 2015-06-03 09:10:06.213  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2015-06-03 09:10:06.216  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'messageBusAdapter' has been autodetected for JMX exposure 2015-06-03 09:10:06.217  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'jmxMetricWriter' has been autodetected for JMX exposure 2015-06-03 09:10:06.217  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'integrationMbeanExporter' has been autodetected for JMX exposure 2015-06-03 09:10:06.218  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshEndpoint' has been autodetected for JMX exposure 2015-06-03 09:10:06.218  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope] 2015-06-03 09:10:06.218  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'restartEndpoint' has been autodetected for JMX exposure 2015-06-03 09:10:06.218  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure 2015-06-03 09:10:06.218  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'refreshScope' has been autodetected for JMX exposure 2015-06-03 09:10:06.219  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name 'environmentManager' has been autodetected for JMX exposure 2015-06-03 09:10:06.220  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager] 2015-06-03 09:10:06.222  INFO 14837 --- [  restartedMain] o.apache.catalina.core.StandardService   : Stopping service Tomcat 2015-06-03 09:10:06.225  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'messageBusAdapter': registering with JMX server as MBean [org.springframework.bus.runner.adapter:name=messageBusAdapter,type=MessageBusAdapter] 2015-06-03 09:10:06.230  INFO 14837 --- [  restartedMain] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/home/dsyer/dev/cloud/workspace/bus-demo/voter/target/classes/, file:/home/dsyer/dev/cloud/workspace/spring-bus/spring-bus-core/target/classes/] 2015-06-03 09:10:06.231  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'integrationMbeanExporter': registering with JMX server as MBean [org.springframework.integration.monitor:name=integrationMbeanExporter,type=IntegrationMBeanExporter] 2015-06-03 09:10:06.235 ERROR 14837 --- [  restartedMain] o.s.boot.SpringApplication               : Application startup failed  org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.cloud.context.environment.EnvironmentManager@391db660] with key 'environmentManager'; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625)     at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:550)     at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:432)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:786)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:812)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:521)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:678)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:339)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:274)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:932)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:921)     at demo.VoterApplication.main(VoterApplication.java:86)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.developertools.restart.RestartLauncher.run(RestartLauncher.java:47) Caused by: javax.management.InstanceAlreadyExistsException: org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager     at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)     at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)     at org.springframework.jmx.support.MBeanRegistrationSupport.doRegister(MBeanRegistrationSupport.java:195)     at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:678)     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:615)     ... 17 common frames omitted  Exception in thread "restartedMain" java.lang.IllegalStateException: java.lang.reflect.InvocationTargetException     at org.springframework.boot.developertools.restart.RestartLauncher.run(RestartLauncher.java:50) Caused by: java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.developertools.restart.RestartLauncher.run(RestartLauncher.java:47) Caused by: org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [org.springframework.cloud.context.environment.EnvironmentManager@391db660] with key 'environmentManager'; nested exception is javax.management.InstanceAlreadyExistsException: org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625)     at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:550)     at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:432)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:786)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:812)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:521)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:678)     at org.springframework.boot.SpringApplication.doRun(SpringApplication.java:339)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:274)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:932)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:921)     at demo.VoterApplication.main(VoterApplication.java:86)     ... 5 more Caused by: javax.management.InstanceAlreadyExistsException: org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager     at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)     at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)     at org.springframework.jmx.support.MBeanRegistrationSupport.doRegister(MBeanRegistrationSupport.java:195)2015-06-03 09:10:06.242  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=6c8fbe26,type=ConfigurationPropertiesRebinder]      at org.springframework.jmx.export.MBeanExporter.registerBeanInstance(MBeanExporter.java:678)     at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:615)     ... 17 more 2015-06-03 09:10:06.245  INFO 14837 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.bootstrap.config:name=refreshEndpoint,type=RefreshEndpoint] 2015-06-03 09:10:06.248  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering beans for JMX exposure on startup 2015-06-03 09:10:06.249  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel output 2015-06-03 09:10:06.252  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=output': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=output] 2015-06-03 09:10:06.278  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel errorChannel 2015-06-03 09:10:06.279  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=errorChannel': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=errorChannel] 2015-06-03 09:10:06.295  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registering MessageChannel nullChannel 2015-06-03 09:10:06.296  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=nullChannel': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=nullChannel] 2015-06-03 09:10:06.316  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageHandler,name=errorLogger,bean=internal': registering with JMX server as MBean [org.springframework.integration:type=MessageHandler,name=errorLogger,bean=internal] 2015-06-03 09:10:06.330  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint': registering with JMX server as MBean [org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint] 2015-06-03 09:10:06.332  INFO 14837 --- [  restartedMain] o.s.i.monitor.IntegrationMBeanExporter   : Registered endpoint without MessageSource: org.springframework.integration:type=ManagedEndpoint,name=voter,bean=endpoint 2015-06-03 09:10:06.333  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase -2147483648 2015-06-03 09:10:06.334  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0 2015-06-03 09:10:06.334  INFO 14837 --- [  restartedMain] ProxyFactoryBean$MethodInvocationGateway : started voter 2015-06-03 09:10:06.334  INFO 14837 --- [  restartedMain] o.s.i.gateway.GatewayProxyFactoryBean    : started voter 2015-06-03 09:10:06.465  INFO 14837 --- [  restartedMain] c.n.e.EurekaDiscoveryClientConfiguration : Registering application voter with eureka with status UP 2015-06-03 09:10:06.466 DEBUG 14837 --- [  restartedMain] s.c.c.d.h.DiscoveryClientHealthIndicator : Discovery Client has been initialized 2015-06-03 09:10:06.497  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel 2015-06-03 09:10:06.497  INFO 14837 --- [  restartedMain] o.s.i.channel.PublishSubscribeChannel    : Channel 'voter.errorChannel' has 1 subscriber(s). 2015-06-03 09:10:06.497  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : started _org.springframework.integration.errorLogger 2015-06-03 09:10:06.508  INFO 14837 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http) 2015-06-03 09:10:06.510  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : Adding {message-handler:outbound.election.0} as a subscriber to the 'output' channel 2015-06-03 09:10:06.511  INFO 14837 --- [  restartedMain] o.s.integration.channel.DirectChannel    : Channel 'voter.output' has 1 subscriber(s). 2015-06-03 09:10:06.511  INFO 14837 --- [  restartedMain] o.s.i.endpoint.EventDrivenConsumer       : started outbound.election.0 2015-06-03 09:10:06.512  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase -2147483648 2015-06-03 09:10:06.512  INFO 14837 --- [  restartedMain] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0 2015-06-03 09:10:06.513  INFO 14837 --- [  restartedMain] demo.VoterApplication                    : Started VoterApplication in 4.081 seconds (JVM running for 268.795) ``` </body>
		<created>2015-06-03 08:12:53</created>
		<closed>2015-06-05 00:23:56</closed>
	</bug>
	<bug>
		<id>3075</id>
		<title>Redis auto-configuration should expose RedisTemplate with concrete type</title>
		<body>`RedisAutoConfiguration` exposes two templates:  - `redisTemplate` as a `RedisOperations&lt;Object,Object&gt;`  - `stringRedisTemplate` as a `StringRedisTemplate`  The catch is that when you want to inject a `RedisTemplate&lt;Object,Object&gt;`, you actually get the `stringRedisTemplate` as the more general one is exposed via the interface. We could fix that the other way around but the cache infra requires the `RedisTemplate` (in any case, the most precise the exposed type is, the better).  This actually breaks the caching auto-configuration support in Redis.  </body>
		<created>2015-06-01 09:13:56</created>
		<closed>2015-06-01 09:48:47</closed>
	</bug>
	<bug>
		<id>3061</id>
		<title>SpringApplication.deduceMainApplicationClass() does not work correctly when deployed as WAR</title>
		<body>Hi there,  I'm deploying a Spring boot application as WAR file (using SpringBootServletInitializer) in JBoss and noticed that my custom banner is missing the {application.version} variable. It works nicely when started standalone though.  Some debugging pointed me to deduceMainApplicationClass() where the Stacktrace is inspected for a main class, which doesn't work in conjunction with SpringBootServletInitializer. </body>
		<created>2015-05-28 14:04:13</created>
		<closed>2015-06-22 13:11:56</closed>
	</bug>
	<bug>
		<id>3048</id>
		<title>maven/gradle plugins generated jar should use build classpath order at runtime in PropertiesLauncher</title>
		<body>I got bitten today by having two different versions of the same class in two jar files. Unfortunate but it happens. Maven tests run great as maven have rules to order classpath. Spring boot plugin does not.  It would be great to keep the classpath order from maven/gradle - the one people use for their testing - would make it to the launcher. Hence save maven/gradle classpath during build and add it to the resulting jar file after "repackage".  It should be pretty simple to do. I can create a pull request for it. RepackageMojo class has access to it as simple as "this.project.getRuntimeClasspathElements()". We can add a parameter "addClasspath" to enable it, store it in the jar and use it (if present) by the loader.  I believe this is actually so useful and safe that it should, imho, be enabled by default. What do you think?  BTW: It should be possible to do it with 1.3.0M1 using the startup script containing ${maven.runtime.classpath} and using maven's variable interpolation. </body>
		<created>2015-05-26 23:08:21</created>
		<closed>2015-08-26 08:42:29</closed>
	</bug>
	<bug>
		<id>3042</id>
		<title> GzipFilterProperties for configuring the Jetty gzip filter is wrong</title>
		<body>Hey,  you got some typos in the properties for the jetty gzip filter: - `excludedAgentPatterns` should be `excludeAgentPatterns` - `excludedPaths` should be `excludePaths` - `excludedPathPatterns` should be `excludePathPatterns`.  This means that these properties don't work at all :-(  Maybe you could expose `excludedMimeTypes` as well. </body>
		<created>2015-05-26 11:38:49</created>
		<closed>2015-06-02 16:55:05</closed>
	</bug>
	<bug>
		<id>3012</id>
		<title>DataSourceTransactionManagerAutoConfiguration creates unwanted transaction manager</title>
		<body>In order to have several data sources I created manually my own private configuration. In a nutshell:  ```     @Bean     @Primary     public DataSource primaryDataSource() {      @Bean     @Primary     public LocalContainerEntityManagerFactoryBean primaryEntityManagerFactory(EntityManagerFactoryBuilder builder) {       @Bean     @Primary     public PlatformTransactionManager primaryTransactionManager(@Qualifier("primaryEntityManagerFactory") EntityManagerFactory emf) { ```  When saving an entity through a Spring Data JPA repository I end up with the following stack trace:  ``` org.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@55a07f97] for key [org.apache.tomcat.jdbc.pool.DataSource@103033fe{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.postgresql.Driver; maxActive=100; maxIdle=100; minIdle=10; initialSize=10; maxWait=30000; testOnBorrow=false; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=********; url=jdbc:postgresql://localhost:5432/***; username=****; validationQuery=null; validationQueryTimeout=-1; validatorClassName=null; validationInterval=30000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; ignoreExceptionOnPreLoad=false; }] bound to thread [main]     at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:431)     at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)     at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:463)     at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:276)     at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodIntercceptor.invoke(CrudMethodMetadataPostProcessor.java:122)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)     at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)     at com.sun.proxy.$Proxy139.save(Unknown Source)  Caused by: java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@55a07f97] for key [org.apache.tomcat.jdbc.pool.DataSource@103033fe{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.postgresql.Driver; maxActive=100; maxIdle=100; minIdle=10; initialSize=10; maxWait=30000; testOnBorrow=false; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=********; url=jdbc:postgresql://localhost:5432/******; username=*****; validationQuery=null; validationQueryTimeout=-1; validatorClassName=null; validationInterval=30000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; ignoreExceptionOnPreLoad=false; }] bound to thread [main]     at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:190)     at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:406)     ... 60 more ```  I tracked down the issue up to DataSourceTransactionManagerAutoConfiguration which was creating another transaction manager as there is no bean name `transactionManager`:  ``` @Bean @ConditionalOnMissingBean(name = "transactionManager") @ConditionalOnBean(DataSource.class) public PlatformTransactionManager transactionManager() {     return new DataSourceTransactionManager(this.dataSource); } ```  I worked around this by excluding `DataSourceTransactionManagerAutoConfiguration`. </body>
		<created>2015-05-19 15:17:51</created>
		<closed>2015-05-22 14:10:51</closed>
	</bug>
	<bug>
		<id>2976</id>
		<title>Metrics speed tests fail on Windows as they try to write to /dev/null</title>
		<body></body>
		<created>2015-05-18 12:31:48</created>
		<closed>2015-05-19 08:13:59</closed>
	</bug>
	<bug>
		<id>2964</id>
		<title>SpringApplicationTests customBannerWithProperties fails on Windows</title>
		<body></body>
		<created>2015-05-18 08:59:16</created>
		<closed>2015-05-18 09:04:25</closed>
	</bug>
	<bug>
		<id>2929</id>
		<title>enabled-property from Endpoints isn't showing up in configurationPropertiesReportEndpoint</title>
		<body>The endpoints derived from `AbstractEndpoints` are lacking the enabled-property in `/configprops-endpoint`. I think it is due to the fact that `isEnabled()` returns a primitive `boolean` and `setEnabled()` accepts a wrapper-type `Boolean`. </body>
		<created>2015-05-10 18:27:30</created>
		<closed>2015-06-02 19:32:38</closed>
	</bug>
	<bug>
		<id>2916</id>
		<title>Liquibase's logging level is unaffected by general logging configuration</title>
		<body>`CommonsLoggingLiquibaseLogger` doesn't honour the configured logging level for `liquibase`. For example `logging.level.liquibase: DEBUG` has no effect. The culprit appears to be:  ``` if (this.logger != null &amp;&amp; getLogLevel().compareTo(level) &lt;= 0) ```  `getLogLevel()` always returns `INFO` as `setLogLevel` has not been called so it falls back to the level configured on `DefaultLoggerConfiguration` which defaults to `INFO`.  This was originally raised on [Stack Overflow](http://stackoverflow.com/questions/30047389/liquibase-logging-level-in-spring-boot). </body>
		<created>2015-05-05 12:52:58</created>
		<closed>2015-05-11 16:26:55</closed>
	</bug>
	<bug>
		<id>2914</id>
		<title>if overriding SpringBootRepositoryRestMvcConfiguration jackson extra modules are not used</title>
		<body>If I overwrite SpringBootRepositoryRestMvcConfiguration to enable some extra conf (simplified in the example below) the jsr-310 / jdk8 jackson modules are not being used  ``` java @Configuration public class RestConfig extends SpringBootRepositoryRestMvcConfiguration {      @Override     protected void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {         config.setBasePath("/restapi");         config.setReturnBodyOnCreate(true);     }  } ```  As soon as I remove the RestConfig class the modules are in use and the dates come out right.  I've created a demo repo. https://github.com/leon/temp-spring-boot-data-rest-jackson-problem  Another strange thing is that the JSR-310 module gets autoregistered, but the JDK8Module doesn't so I need to add it explicitly?! ### Solution  Can we somehow wait for the jackson auto configuration to complete before creating the rest object mapper, or even better why not use the same object mapper? </body>
		<created>2015-05-05 06:27:45</created>
		<closed>2015-07-01 13:40:00</closed>
	</bug>
	<bug>
		<id>2912</id>
		<title>Spring boot cannot find velocity toolbox.xml inside jar file</title>
		<body>When create a simple spring boot application with spring-boot-starter-velocity for velocity templates I was unable to load toolbox.xml file even if I set the spring.velocity.toolbox-config-location property. When running the application this is the log output when the logging.level.org.apache.velocity was set to DEBUG:  ``` 2015-05-04 16:57:53.954 DEBUG 27289 --- [nio-9393-exec-1] o.a.v.t.v.servlet.ServletToolboxManager  : No toolbox was found at '/toolbox.xml' 2015-05-04 16:57:53.960 ERROR 27289 --- [nio-9393-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause java.lang.NullPointerException: null         at org.springframework.web.servlet.view.velocity.VelocityToolboxView.createVelocityContext(VelocityToolboxView.java:111)         at org.springframework.web.servlet.view.velocity.VelocityView.renderMergedTemplateModel(VelocityView.java:288)         at org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:167)         at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:303)         at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1244)         at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1027)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)         at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:618)         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.springframework.web.filter.ttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)         at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)         at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)         at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at org.apache.tomcat.util.threads.TaskThrepingRunnable.run(TaskThread.java:61)         at java.lang.Thread.run(Thread.java:745) 2015-05-04 16:57:53.967 DEBUG 27289 --- [nio-9393-exec-1] org.apache.velocity                      : ResourceManager : found error.vm with loader org.apache.velocity.runtime.resource.loader.FileResourceLoader ```  Unfortunately I did not find sufficient documentation in this case. </body>
		<created>2015-05-04 20:29:36</created>
		<closed>2015-06-16 01:10:18</closed>
	</bug>
	<bug>
		<id>2893</id>
		<title>Jsp default errorview (e.g. error.jsp) does not take precedence over whitelabel error</title>
		<body>Ergo: the whitelabel page is shown when it shouldn't be.  [Reproduction here](https://github.com/hanswesterbeek/springboot-jsp-errorview-precedence-problem).  I have created a workaround which comes down to creating the InternalResourceViewer myself and setting its precedence. [Code here](https://github.com/hanswesterbeek/springboot-jsp-errorview-precedence-problem/blob/workaround/src/main/java/demo/DemoApplication.java#L24). </body>
		<created>2015-04-28 11:09:28</created>
		<closed>2016-06-20 16:01:19</closed>
	</bug>
	<bug>
		<id>2891</id>
		<title>Relaxed data binder needlessly converts all values to String</title>
		<body>This results in lossy round trip conversions (which are occasionally useful) and potentially incorrect types for data bound to maps in particular. The culprit is actually `PropertySourcesPropertyValues`. </body>
		<created>2015-04-28 09:34:14</created>
		<closed>2015-04-29 06:31:37</closed>
	</bug>
	<bug>
		<id>2889</id>
		<title>banner.charset value cannot be converted</title>
		<body>Try to set both `banner.charset` and `banner.location` and you'll get this  ``` 2015-04-27 10:25:49.866  WARN 90717 --- [           main] org.springframework.boot.ResourceBanner  : Banner not printable: class path resource [static/my-banner.txt] (class java.lang.IllegalArgumentException: 'Cannot convert value [UTF-8] from source type [String] to target type [Charset]')  java.lang.IllegalArgumentException: Cannot convert value [UTF-8] from source type [String] to target type [Charset]     at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:94)     at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:65)     at org.springframework.core.env.AbstractPropertyResolver.getProperty(AbstractPropertyResolver.java:143)     at org.springframework.core.env.AbstractEnvironment.getProperty(AbstractEnvironment.java:526)     at org.springframework.boot.ResourceBanner.printBanner(ResourceBanner.java:58)     at org.springframework.boot.SpringApplication.printBanner(SpringApplication.java:479)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:288)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at demo.DemoApplication.main(DemoApplication.java:23)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ``` </body>
		<created>2015-04-27 20:51:50</created>
		<closed>2015-05-15 13:31:24</closed>
	</bug>
	<bug>
		<id>2878</id>
		<title>Liquibase and jetty compatibility</title>
		<body>When i use liquibase and tomcat everything works smoothly. However when i switch to Jetty by modifying my pom as follows:  ``` &lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  &lt;exclusions&gt;     &lt;exclusion&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;     &lt;/exclusion&gt;  &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; ```  I get an exception while liquibase runs:  ``` java.io.FileNotFoundException: ServletContext resource [/] cannot be resolved to URL because it does not exist     at org.springframework.web.context.support.ServletContextResource.getURL(ServletContextResource.java:156)     at liquibase.integration.spring.SpringLiquibase$SpringResourceOpener.init(SpringLiquibase.java:77)     at liquibase.resource.AbstractResourceAccessor.&lt;init&gt;(AbstractResourceAccessor.java:22)     at liquibase.resource.ClassLoaderResourceAccessor.&lt;init&gt;(ClassLoaderResourceAccessor.java:18)     at liquibase.integration.spring.SpringLiquibase$SpringResourceOpener.&lt;init&gt;(SpringLiquibase.java:67)     at liquibase.integration.spring.SpringLiquibase.createResourceOpener(SpringLiquibase.java:396)     at liquibase.integration.spring.SpringLiquibase.createLiquibase(SpringLiquibase.java:357)     at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:315)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:956)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:747)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at be.tribersoft.triber_fund.Application.main(Application.java:10) ```  The execution of the liquibase scripts is succesful however. </body>
		<created>2015-04-26 14:58:38</created>
		<closed>2015-10-27 13:42:04</closed>
	</bug>
	<bug>
		<id>2873</id>
		<title>EndpointMBeanExporter ignores endpoints' enabled property</title>
		<body></body>
		<created>2015-04-24 09:16:39</created>
		<closed>2015-04-30 15:52:23</closed>
	</bug>
	<bug>
		<id>2840</id>
		<title>spring.groovy.template.configuration namespace clash</title>
		<body>We have a clash between two sources for `spring.groovy.template.configuration`.  One is mapped to `GroovyMarkupConfigurer` (see `GroovyTemplateAutoConfiguration`) and the exact same prefix is used by a map in `GroovyTemplateProperties`  Mixing random (map keys) and specific keys in the same namespace is very weird (how is this supposed to work anyway?). One of the two should move. </body>
		<created>2015-04-17 15:04:10</created>
		<closed>2015-04-21 11:34:05</closed>
	</bug>
	<bug>
		<id>2826</id>
		<title>JarEntryData.toJarEntry() produces an entry with the wrong last modified time</title>
		<body></body>
		<created>2015-04-15 13:53:56</created>
		<closed>2015-04-15 16:04:15</closed>
	</bug>
	<bug>
		<id>2824</id>
		<title>PublicMetricsAutoConfigurationTests.multipleCacheManagers fails intermittently</title>
		<body>The cache managers handled in `CachePublicMetrics` aren't ordered so the logic that uses the cache manger's name as a prefix when there's a clashing cache name isn't deterministic.  /cc @snicoll </body>
		<created>2015-04-14 19:48:18</created>
		<closed>2015-04-15 10:49:39</closed>
	</bug>
	<bug>
		<id>2818</id>
		<title>spring actuator increases the metric counter.status.200.{my endpoint} even if the endpoint returns a 500</title>
		<body>I've developed my first rest service with Spring Boot, Spring MVC Spring Actuator using embedded tomcat 8.  For some reason, when the endpoint fails due to an exception which is not caught, the returned response from the endpoint has the status 500, but the metric of counter.status.200. was increased.  I debug a bit the code and looks like the status of the response in the class ResponseFacade (from tomcat) is set after the metric is increased on the MetricFilterAutoConfiguration.MetricsFilter.  Does someone has an idea how can I get the right status code counter (counter.status.500.{my endpoint}) increased?  Thanks in advance </body>
		<created>2015-04-14 08:28:12</created>
		<closed>2015-04-14 11:25:01</closed>
	</bug>
	<bug>
		<id>2811</id>
		<title>Spring Integration gateways don't trigger @ConditionalOnBean</title>
		<body>I have an MVC controller bean that's conditional on the registration of a bean implementing a handler interface. I'm using a Spring Integration service gateway to implement the interface and importing an XML integration plan in my own autoconfiguration class, and the debug log shows   ``` Loading XML bean definitions from class path resource [META-INF/spring/integration/image-processing/image-processing-gateways.xml] ```  very early in the loading process, but the condition does not see the service gateway as a matching bean. I have explicitly listed my application's configuration as `@AutoConfigureBefore` the class that needs the bean, but it still doesn't match. Using `@DependsOn` and explicitly supplying a bean ID for the gateway also does not work. </body>
		<created>2015-04-13 13:56:58</created>
		<closed>2015-05-15 20:25:45</closed>
	</bug>
	<bug>
		<id>2802</id>
		<title>spring-security 4.0.0 not compatible with spring-social 1.1.0</title>
		<body>after the change from gh-2727 we are no longer able to use spring-boot with spring-social because of an incompatible api change in spring-security 4.   you can have a look here what the problem is https://github.com/spring-projects/spring-social/pull/149 </body>
		<created>2015-04-10 08:14:30</created>
		<closed>2015-05-15 20:26:45</closed>
	</bug>
	<bug>
		<id>2798</id>
		<title>Setting management port causes multiple Tomcat instances to start in tests</title>
		<body>If I set the management port via configuration then a Tomcat will be started listening on that port when running `@WebAppConfiguration` tests. I.e. an `application.yml` with:  ``` json management:   port: 8081 ```  would cause a Tomcat to start on port 8081 when running a test looking like this:  ``` java @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @SpringApplicationConfiguration(classes = {Application.class}) public class ATest { ... } ```  This is not the intended behavior if I am correct or am I missing something?  The implication I am running into (this might be a separate issue) is that if I have two tests with different application contexts then that will cause the second test to fail. Apparently because the loading of the  second application context also tries to start a Tomcat on the same port. Which obviously fails.  That is, if the second test looks like:  ``` java @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration @SpringApplicationConfiguration(classes = {Application.class, BTest.Conf.class}) public class BTest { ... } ```   then running both `ATest` and `BTest` will fail one of them.  So I guess the two questions are 1. Is a Tomcat for the management port supposed to start in the test? 2. If so, why is the second application context triggering a start of a new Tomcat?  I put some example code that illustrates this here https://github.com/sawano/spring-boot-management-port-test-issue </body>
		<created>2015-04-09 21:38:36</created>
		<closed>2015-04-15 12:47:55</closed>
	</bug>
	<bug>
		<id>2788</id>
		<title>Assertion failure message in MustacheAutoConfiguration uses the wrong name for the check template location property</title>
		<body>[Reported by @rishabhtulsian](https://github.com/spring-projects/spring-boot/commit/2729c747ca715b5b4ebdb39afba37fa8044d86dd#commitcomment-10609035) </body>
		<created>2015-04-08 09:11:40</created>
		<closed>2015-04-08 14:50:41</closed>
	</bug>
	<bug>
		<id>2773</id>
		<title>HiddenHttpMethodFilter should be ordered before FilterChainProxy</title>
		<body>In order for HTTP authorization rules to be accurate (which can be based on HTTP methods), Spring Security needs to be after `HiddenHttpMethodFilter`. </body>
		<created>2015-04-03 21:49:00</created>
		<closed>2015-06-02 22:21:35</closed>
	</bug>
	<bug>
		<id>2767</id>
		<title>partial endpoint enabled whereas global is disabled</title>
		<body>Hi,  I noticed in Spring-boot 1.2.2.RELEASE that when you disable an endpoint you can access to a specific information.  Here is my application.yml file :   &lt;pre&gt; # ENDPOINTS endpoints:  enabled: false # disabled by default /pre&gt;  If I try to access /admin/env I got the following message :   &lt;pre&gt;&lt;code&gt; &amp;lt;SingletonMap&amp;gt; &amp;lt;message&amp;gt;This endpoint is disabled&amp;lt;/message&amp;gt; &amp;lt;/SingletonMap&amp;gt; &lt;/code&gt;&lt;/pre&gt;   However I can access /admin/env/management.port infos </body>
		<created>2015-04-03 08:00:47</created>
		<closed>2015-04-08 10:34:02</closed>
	</bug>
	<bug>
		<id>2762</id>
		<title>Add support for takari lifecycle plugin</title>
		<body>Please add support for takari lifecycle plugin, the main artifact has ID: `taraki-jar`  http://takari.io/book/40-lifecycle.html  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage (default) on project devskiller-git:  Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.2.3.RELEASE:repackage failed:  For artifact {sample:sample:0.0.1-SNAPSHOT:takari-jar}:  An attached artifact must have a different ID than its corresponding main artifact. -&gt; [Help 1] ``` </body>
		<created>2015-04-01 18:25:14</created>
		<closed>2015-05-26 14:21:37</closed>
	</bug>
	<bug>
		<id>2717</id>
		<title>Condition evaluation failure when Spring Security except spring-security-web is on the classpath</title>
		<body>These dependencies:  ``` &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     &lt;exclusions&gt;         &lt;exclusion&gt;             &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;             &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;         &lt;/exclusion&gt;     &lt;/exclusions&gt; &lt;/dependency&gt; ```  Will trigger this:  ``` java.lang.IllegalStateException: Could not evaluate condition on org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration#ignoredPathsWebSecurityConfigurerAdapter due to internal class not found. This can happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:51)     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:194)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:148)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:124)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:318)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at demo.DarimontApplication.main(DarimontApplication.java:10) Caused by: java.lang.NoClassDefFoundError: org/springframework/security/web/access/WebInvocationPrivilegeEvaluator     at java.lang.Class.getDeclaredMethods0(Native Method)     at java.lang.Class.privateGetDeclaredMethods(Class.java:2531)     at java.lang.Class.getDeclaredMethods(Class.java:1855)     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:571)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:490)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:474)     at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:534)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:677)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:621)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:591)     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1397)     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:968)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:257)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.addBeanType(BeanTypeRegistry.java:246)     at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$OptimizedBeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:227)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:158)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:147)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:119)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:94)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:45)     ... 16 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.security.web.access.WebInvocationPrivilegeEvaluator     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     ... 36 common frames omitted ``` </body>
		<created>2015-03-25 17:18:02</created>
		<closed>2015-03-25 17:27:45</closed>
	</bug>
	<bug>
		<id>2716</id>
		<title>Can not switch off Tomcat in parent context if management endpoints required in child</title>
		<body>Originally I was concerned that management.port=-1 was causing some weird behaviour. </body>
		<created>2015-03-25 17:11:56</created>
		<closed>2015-10-01 16:47:34</closed>
	</bug>
	<bug>
		<id>2711</id>
		<title>Spring Boot in standalone Tomcat ignores exceptions set in DeferredResults</title>
		<body>When a controller returning a DeferredResult throws an exception, as in the example below, Tomcat will ignore the exception and return an HTTP 200 with no response body.  ``` java     @RequestMapping(value = "html/start", method = RequestMethod.POST, consumes =APPLICATION_FORM_URLENCODED)     public DeferredResult&lt;String&gt; start(final HttpServletResponse response,                                     @Valid @ModelAttribute final InitialisationStartAttributes model,                                     final SessionData sessionExisting) throws MyRequestProcessingException {     final DeferredResult&lt;String&gt; finalResult = new DeferredResult&lt;&gt;(5000);                 // Just return an error, so we can test                 if (true) {                     finalResult.setErrorResult(new MyRequestProcessingException(                             "Something went wrong processing request"));                 }     return finalResult; } ```  The exception is annotated with @ResponseStatus.  ``` java @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public class MyRequestProcessingException extends Exception {  public MyRequestProcessingException(String message) {     super(message); }    } ```  If this is executed in a Spring Boot embedded context it will return 500 as one would expect.  I'm running 1.2.1 RELEASE. </body>
		<created>2015-03-25 05:57:56</created>
		<closed>2015-03-26 11:30:47</closed>
	</bug>
	<bug>
		<id>2658</id>
		<title>Bean definition causes app to fail to start when DataSource is proxied</title>
		<body>I think this is to do with auto-proxying a `DataSource`. Whenever that happens we see issues (e.g. https://github.com/spring-cloud/spring-cloud-config/issues/105 and http://stackoverflow.com/questions/28610353/spring-boot-with-session-based-data-source/28626486#28626486). </body>
		<created>2015-03-16 09:16:30</created>
		<closed>2015-03-16 09:21:57</closed>
	</bug>
	<bug>
		<id>2611</id>
		<title>Invalid property arrays overriding in profile-specific property files</title>
		<body>Spring Boot 1.2.2.RELEASE  I'm using `@ConfigurationProperties` annotation on class to populate properties. Consider having these property files: ## application.yml:  ``` urls:                       - http://www.aargauerzeitung.ch                       - http://www.bzbasel.ch                       - http://www.basellandschaftlichezeitung.ch                       - http://www.limmattalerzeitung.ch ``` ## application-dev.yml:  ``` urls:                       - http://google.com ```  When launching the app with `-Dspring.profiles.active=dev` I got the following value for "urls":  ```                       - http://google.com                       - http://www.bzbasel.ch                       - http://www.basellandschaftlichezeitung.ch                       - http://www.limmattalerzeitung.ch ```  but it should be just:  ```                       - http://google.com ``` </body>
		<created>2015-03-06 15:32:14</created>
		<closed>2015-09-11 03:08:36</closed>
	</bug>
	<bug>
		<id>2610</id>
		<title>MustacheEnvironmentCollector, InvalidPropertyException when JMustache is in the classpath</title>
		<body>This configuration  ``` properties # Necessary when Spring Security is in the classpath shell.auth = simple shell.auth.simple.user.name = name shell.auth.simple.user.password = password ```  yields this exception, when JMustache autoconfiguration (which I think is new in 1.2.2) is also in the classpath:  ``` java org.springframework.beans.InvalidPropertyException: Invalid property 'map[shell][auth][simple][user][password]' of bean class [org.springframework.boot.bind.RelaxedDataBinder$MapHolder]: Illegal attempt to get property 'map' threw exception; nested exception is org.springframework.beans.InvalidPropertyException: Invalid property 'map[shell][auth][simple][user][password]' of bean class [org.springframework.boot.bind.RelaxedDataBinder$MapHolder]: Property referenced in indexed property path 'map[shell][auth][simple][user][password]' is neither an array nor a List nor a Set nor a Map; returned value was [simple]     at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:853)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:948)     at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:927)     at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)     at org.springframework.validation.DataBinder.applyPropertyValues(DataBinder.java:749)     at org.springframework.validation.DataBinder.doBind(DataBinder.java:645)     at org.springframework.boot.bind.RelaxedDataBinder.doBind(RelaxedDataBinder.java:119)     at org.springframework.validation.DataBinder.bind(DataBinder.java:630)     at org.springframework.boot.autoconfigure.mustache.MustacheEnvironmentCollector.setEnvironment(MustacheEnvironmentCollector.java:54)     at org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration.collector(MustacheAutoConfiguration.java:82)     at org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration.mustacheCompiler(MustacheAutoConfiguration.java:76)     at org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration$$EnhancerBySpringCGLIB$$69430051.CGLIB$mustacheCompiler$0(&lt;generated&gt;)     at org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration$$EnhancerBySpringCGLIB$$69430051$$FastClassBySpringCGLIB$$a923c792.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)     at org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration$$EnhancerBySpringCGLIB$$69430051.mustacheCompiler(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 48 more ``` </body>
		<created>2015-03-06 13:49:27</created>
		<closed>2015-03-31 00:01:20</closed>
	</bug>
	<bug>
		<id>2608</id>
		<title>PropertySourcesPropertyValues glitch with CompositePropertySource</title>
		<body>`PropertySourcesPropertyValues.processPropertySource` does the following:  ``` private void processPropertySource(PropertySource&lt;?&gt; source,         PropertySourcesPropertyResolver resolver,         PropertyNamePatternsMatcher includes, Collection&lt;String&gt; exacts) {     if (source instanceof EnumerablePropertySource) {         processEnumerablePropertySource((EnumerablePropertySource&lt;?&gt;) source,                 resolver, includes, exacts);     }     else if (source instanceof CompositePropertySource) {         processCompositePropertySource((CompositePropertySource) source, resolver,                 includes, exacts);     }     else {         // We can only do exact matches for non-enumerable property names, but         // that's better than nothing...         processDefaultPropertySource(source, resolver, includes, exacts);     } } ```  Since Spring 4.1.2, `CompositePropertySource` extends `EnumerablePropertySource`.  There are two issues with it: 1. The second branch of the condition (first "else") is never executed (dead code). 2. `CompositePropertySource` does not actually fulfil the specification of `EnumerablePropertySource`. It may contain a non-enumerable property source in which case `getPropertyNames` does not in fact list all the properties.  The latter is arguably an issue in Spring core. But it has negative effect on Spring Boot as well, so it probably should be fixed in the core or worked around in Boot. </body>
		<created>2015-03-05 15:30:22</created>
		<closed>2015-03-16 17:10:25</closed>
	</bug>
	<bug>
		<id>2596</id>
		<title>ServletRegistrationBean, why is the URL mapping mandatory?</title>
		<body>Servlet registered through ServletRegistrationBean have a default '/*' URL mapping assigned if no URL mapping is configured. Is there a reason for making the URL mapping mandatory?  The use case for "URL-free" servlets is to forward a request using `ServletContext.getNamedDispatcher()`.  In my case, I want to have the Jetty proxy servlet  act as a handler for a DispatcherServlet. (http://www.eclipse.org/jetty/documentation/9.2.3.v20140905/proxy-servlet.html)  ``` java @Controller @RequestMapping("/") public class ProxyDispatcherController {    @Autowired   private ServletContext servletContext;    @RequestMapping   void dispatch(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     RequestDispatcher dispatcher = servletContext.getNamedDispatcher(ProxyServletConfig.PROXY_SERVLET_NAME);     if (dispatcher != null) {       dispatcher.forward(request, response);     } else {       response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);     }   } }  ```  The workaround I'm using right now is to map the proxy servlet to a dummy URL and then secure that URL using `denyAll()`. It's bit of a hack, but it works. </body>
		<created>2015-03-04 08:18:59</created>
		<closed>2015-03-25 03:18:11</closed>
	</bug>
	<bug>
		<id>2593</id>
		<title>MetricRegistryMetricReader.findOne throws ClassCastException for Gauge&lt;Set&lt;String&gt;&gt;</title>
		<body>``` java if (metric instanceof Gauge) {             @SuppressWarnings("unchecked")             Gauge&lt;Number&gt; value = (Gauge&lt;Number&gt;) metric;             return new Metric&lt;Number&gt;(metricName, value.getValue()); } ```  `metricRegistry.register( PROP_METRIC_REG_JVM_THREADS , new ThreadStatesGaugeSet() );`  ``` Caused by: java.lang.ClassCastException: java.util.Collections$EmptySet cannot be cast to java.lang.Number     at org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader.findOne(MetricRegistryMetricReader.java:82)     at org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader$MetricRegistryIterator.next(MetricRegistryMetricReader.java:211)     at org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader$MetricRegistryIterator.next(MetricRegistryMetricReader.java:194)     at org.springframework.boot.actuate.endpoint.MetricReaderPublicMetrics.metrics(MetricReaderPublicMetrics.java:47)     at org.springframework.boot.actuate.endpoint.MetricsEndpoint.invoke(MetricsEndpoint.java:65)     at org.springframework.boot.actuate.endpoint.MetricsEndpoint.invoke(MetricsEndpoint.java:36)     at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:56)  ``` </body>
		<created>2015-03-03 23:17:05</created>
		<closed>2015-03-05 11:08:11</closed>
	</bug>
	<bug>
		<id>2590</id>
		<title>MetricsFilter throws NPE when removing non-existant guage</title>
		<body>In one environment, we ran into a sporatic `NullPointerException`s. They didn't have a stacktrace so when re-running the server with `-XX:-OmitStackTraceInFastThrow` so the stack trace would not get thrown out by the JVM we saw several of the following:  ``` java.lang.NullPointerException     at org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader.remove(MetricRegistryMetricReader.java:188)     at org.springframework.boot.actuate.metrics.reader.MetricRegistryMetricReader.onGaugeRemoved(MetricRegistryMetricReader.java:121)     at com.codahale.metrics.MetricRegistry.notifyListenerOfRemovedMetric(MetricRegistry.java:366)     at com.codahale.metrics.MetricRegistry.onMetricRemoved(MetricRegistry.java:360)     at com.codahale.metrics.MetricRegistry.remove(MetricRegistry.java:156)     at org.springframework.boot.actuate.metrics.writer.CodahaleMetricWriter.set(CodahaleMetricWriter.java:97)     at org.springframework.boot.actuate.metrics.writer.CompositeMetricWriter.set(CompositeMetricWriter.java:54)     at org.springframework.boot.actuate.metrics.writer.DefaultGaugeService.submit(DefaultGaugeService.java:41)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:111)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)     at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)     at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:175)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.Server.handle(Server.java:497)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:248)     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:620)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:540)     at java.lang.Thread.run(Thread.java:745) ```  My service is wiring up its own `MetricsRegistry` (from CodaHaleMetrics), so it could be possible that that there were 2 registries? Unlikely due to `@ConditionalOnMissingBean`, but worth mentioning. </body>
		<created>2015-03-03 15:52:04</created>
		<closed>2015-03-04 15:25:47</closed>
	</bug>
	<bug>
		<id>2588</id>
		<title>requiresUnpack does not work for executable war</title>
		<body>steps to reproduce: 1. checkout code from https://github.com/spring-cloud-samples/eureka 2. Change pom.xml for executable war according to http://docs.spring.io/spring-boot/docs/1.2.2.RELEASE/reference/htmlsingle/#howto-create-a-deployable-war-file 3. run `mvm package` to generate war 4. run `java -jar target/eureka-0.0.1-SNAPSHOT.war`  it raises a exception:  ``` 2015-03-03 13:29:25.126 ERROR 33636 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'viewControllerHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'viewControllerHandlerMapping' threw exception; nested exception is java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at eurekademo.EurekaApplication.main(EurekaApplication.java:19)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'viewControllerHandlerMapping' threw exception; nested exception is java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 23 common frames omitted Caused by: java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.apache.catalina.webresources.StandardRoot.validate(StandardRoot.java:245)     at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:212)     at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:206)     at org.apache.catalina.core.ApplicationContext.getResource(ApplicationContext.java:557)     at org.apache.catalina.core.ApplicationContextFacade.getResource(ApplicationContextFacade.java:199)     at org.springframework.web.context.support.ServletContextResource.exists(ServletContextResource.java:102)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.addStaticIndexHtmlViewControllers(WebMvcAutoConfiguration.java:275)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.addViewControllers(WebMvcAutoConfiguration.java:270)     at org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite.addViewControllers(WebMvcConfigurerComposite.java:119)     at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration.addViewControllers(DelegatingWebMvcConfiguration.java:75)     at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.viewControllerHandlerMapping(WebMvcConfigurationSupport.java:346)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3.CGLIB$viewControllerHandlerMapping$24(&lt;generated&gt;)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3$$FastClassBySpringCGLIB$$5f1984e3.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3.viewControllerHandlerMapping(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 24 common frames omitted  java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'viewControllerHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'viewControllerHandlerMapping' threw exception; nested exception is java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:957)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:946)     at eurekademo.EurekaApplication.main(EurekaApplication.java:19)     ... 6 more Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'viewControllerHandlerMapping' threw exception; nested exception is java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)     ... 23 more Caused by: java.lang.IllegalStateException: The resources may not be accessed if they are not currently started     at org.apache.catalina.webresources.StandardRoot.validate(StandardRoot.java:245)     at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:212)     at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:206)     at org.apache.catalina.core.ApplicationContext.getResource(ApplicationContext.java:557)     at org.apache.catalina.core.ApplicationContextFacade.getResource(ApplicationContextFacade.java:199)     at org.springframework.web.context.support.ServletContextResource.exists(ServletContextResource.java:102)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.addStaticIndexHtmlViewControllers(WebMvcAutoConfiguration.java:275)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.addViewControllers(WebMvcAutoConfiguration.java:270)     at org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite.addViewControllers(WebMvcConfigurerComposite.java:119)     at org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration.addViewControllers(DelegatingWebMvcConfiguration.java:75)     at org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport.viewControllerHandlerMapping(WebMvcConfigurationSupport.java:346)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3.CGLIB$viewControllerHandlerMapping$24(&lt;generated&gt;)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3$$FastClassBySpringCGLIB$$5f1984e3.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)     at org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$9824cad3.viewControllerHandlerMapping(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)     ... 24 more ``` </body>
		<created>2015-03-03 06:06:43</created>
		<closed>2015-03-04 13:43:54</closed>
	</bug>
	<bug>
		<id>2567</id>
		<title>Boot Auto Generates User Despite Custom Authentication</title>
		<body>I just updated to Spring Boot 1.2.2 and Spring Security 3.2.6 and now I see on startup "Using default security password: 2b3fca81-99d8-490f-9bff-6f6f79c1c749".  I far as I remember this didn't appear with Boot 1.2.1 and Security 3.2.5.  My security config (omitted some stuff):  ``` @Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter {     @Autowired AuthenticationEntryPoint authenticationEntryPoint;     @Autowired AccessDeniedHandler accessDeniedHandler;     @Autowired LogoutSuccessHandler logoutSuccessHandler;     @Autowired AuthenticationSuccessHandler successHandler;     @Autowired AuthenticationFailureHandler authenticationFailureHandler;      @Override protected void configure(HttpSecurity http) throws Exception {         http             .authorizeRequests()                 .antMatchers("/public/**").permitAll()                 .anyRequest().authenticated()                 .and()             .sessionManagement()                 .maximumSessions(1).maxSessionsPreventsLogin(false).and()                 .and()             .exceptionHandling()                 .authenticationEntryPoint(authenticationEntryPoint)                 .accessDeniedHandler(accessDeniedHandler)                 .and()             .formLogin()                 .loginProcessingUrl("/api/authentication")                 .successHandler(successHandler)                 .failureHandler(authenticationFailureHandler)                 .and()             .logout()                 .logoutRequestMatcher(new AntPathRequestMatcher("/api/authentication", "DELETE", true))                 .logoutSuccessHandler(logoutSuccessHandler)                 .invalidateHttpSession(true)                 .and()             .headers()                 .frameOptions().disable()                 .csrf().disable();     }      @Autowired     public void configureGlobal(AuthenticationManagerBuilder auth, UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) throws Exception {         auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);     }      @Bean     public PasswordEncoder passwordEncoder() {         return new BCryptPasswordEncoder();     } } ```  ``` @Configuration @EnableGlobalMethodSecurity(prePostEnabled = true) public class GlobalMethodSecurityConfig extends GlobalMethodSecurityConfiguration { } ```  ``` @Service public class UserDetailsProvider implements UserDetailsService {     @Autowired UserRepo repo;      @Override     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {         User user = ...;         Set&lt;GrantedAuthority&gt; roles = ...;         return new SecurityUser(user, roles);     }  } ```  According to Boot's Documentation, I should only need @EnableWebSecurity and autoconfig should be disabled.   Bug, or have I missed something? </body>
		<created>2015-02-27 11:36:05</created>
		<closed>2015-03-02 21:36:09</closed>
	</bug>
	<bug>
		<id>2562</id>
		<title>MongoClient autoconfiguration does not take into account authentication-database property</title>
		<body>I have set username, password and authentication-database properties set in my configuration file as follows:  spring.data.mongodb.database=customdata spring.data.mongodb.username=top spring.data.mongodb.password=secret spring.data.mongodb.authentication-database=admin  Then I'm using the default autoconfiguration to create a MongoClient object and passing it to mongeez. But I did not manage to do a successful authentication. Stepping through the code and looking into the server logs, I saw that mongo client still tries to authenticate using the database "customdata" instead of "admin".  I think the problem is within the method MongoProperties.createMongoClient(MongoClientOptions) that creates a new MongoClient.  The client is configured to use credentials from its properties object, but it does not use the authenticationDatabase proptery. Instead it uses the configured database property when creating the Credentials object.  See:  ``` credentials = Arrays.asList(MongoCredential.createMongoCRCredential(     this.username, getMongoClientDatabase(), this.password)); ```  I would expect here that getAuthenticationDatabase() is used instead of getMongoClientDatabase(), if available.  As a work-around I'm currently implementing the createMongoClient by myself and creating  credentials using the authentication database, see:  ``` @Autowired private MongoProperties properties;  @Bean public Mongo mongo() throws UnknownHostException {     List&lt;MongoCredential&gt; credentials = null;     if (properties.getUsername() != null || properties.getPassword() != null) {         credentials = Arrays.asList(MongoCredential.createMongoCRCredential(                 properties.getUsername(), properties.getAuthenticationDatabase(), properties.getPassword()));     }     String host = properties.getHost() == null ? "localhost" : properties.getHost();     int port = properties.getPort() == null ? 27017 : properties.getPort();     return new MongoClient(Arrays.asList(new ServerAddress(host, port)),             credentials, options); } ```  That solves the problem for me but, it's a rather special solution, I think the client database property should be used as fall-back if authentication database property is not set, but if it _is_ set, I would expect that it is used here. </body>
		<created>2015-02-26 14:52:34</created>
		<closed>2015-02-26 15:30:12</closed>
	</bug>
	<bug>
		<id>2542</id>
		<title>`spring-boot-starter-jersey` and `spring-boot-starter-actuator` cause an exception `java.lang.NoClassDefFoundError: org/springframework/web/servlet/HandlerMapping`</title>
		<body>`spring-boot-starter-actuator` depends on `spring-webmvc`  due to `HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE` in `MetricFilterAutoConfiguration`.  So when using `spring-boot-starter-jersey` and `spring-boot-starter-actuator`,  the following exception will occur:  ``` java.lang.ClassNotFoundException: org.springframework.web.servlet.HandlerMapping     at java.net.URLClassLoader$1.run(URLClassLoader.java:372)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:95)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)     at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) ```  Here is a project reproducing the problem:  https://github.com/izeye/samples-spring-boot-branches/tree/jersey-without-webmvc </body>
		<created>2015-02-24 06:05:07</created>
		<closed>2015-02-24 21:13:09</closed>
	</bug>
	<bug>
		<id>2487</id>
		<title>Binding to @ConfigurationProperties with a Map does not preserve the order of keys</title>
		<body>Binding to `@ConfigurationProperties` with a `Map` does not preserve the order of keys, even though the order is carefully preserved in `YamlPropertySourceLoader`. The culprit is `PropertySourcesPropertyValues` which has an unordered map of name-value pairs. Example:  ```     @Component     @EnableConfigurationProperties     @ConfigurationProperties("foo")     public static class Foo {         private Map&lt;String,Bar&gt; bar = new LinkedHashMap&lt;String, Bar&gt;();         public Map&lt;String, Bar&gt; getBar() {             return bar;         }         public void setBar(Map&lt;String, Bar&gt; bar) {             this.bar = bar;         }         public static class Bar {             private String name;              public String getName() {                 return name;             }              public void setName(String name) {                 this.name = name;             }         }     } ```  ``` foo:   bar:     one:       name: uno     two:       name: due     three:       name: trei     four:       name: quattro     five:       name: cinque ``` </body>
		<created>2015-02-12 09:51:33</created>
		<closed>2015-02-12 10:11:35</closed>
	</bug>
	<bug>
		<id>2483</id>
		<title>Basic Auth realm not set from security.basic.realm</title>
		<body>When using Spring Boot with security.basic.realm set, the realm name is not actually being set. Look at lines 251-252 of `SpringBootWebSecurityConfiguration`:  ``` http.exceptionHandling().authenticationEntryPoint(entryPoint()); http.httpBasic(); ```  I see that the realm name is used in when SpringBootWebSecurityConfiguration calls `http.exceptionHandling().authenticationEntryPoint(entryPoint());` on line 251, but it is not used when with the next line: `http.httpBasic();`   When I tested an http request with the wrong password, the `BasicAuthenticationFilter` captures the `AuthenticationException` and delegates the the `authenticationEntryPoint`, which is not the same `entryPoint()` that was registered by `http.exceptionHandling().authenticationEntryPoint(entryPoint());` but instead the default entry point registered by `http.httpBasic();` which uses a default realm name of `Realm`, which is exactly what I'm seeing.   I think that second line should simply read  ``` http.httpBasic().realmName(this.security.getBasic().getRealm()); ``` </body>
		<created>2015-02-11 19:29:54</created>
		<closed>2015-02-12 12:09:53</closed>
	</bug>
	<bug>
		<id>2480</id>
		<title>ElasticsearchAutoConfiguration doesn't close local Node</title>
		<body>The `ElasticsearchAutoConfiguration` currently closes the `Client` but in the case of a `Node` this has no effect. Really the node should be closed in such cases to that `.close()` on the context works. </body>
		<created>2015-02-11 05:12:55</created>
		<closed>2015-02-25 02:08:00</closed>
	</bug>
	<bug>
		<id>2476</id>
		<title>Requests to JolokiaMvcEndpoint bypass security filter, allowing unauthenticated remote access to JMX</title>
		<body>Configuration:  ``` management.security.enabled=true endpoints.jolokia.sensitive=true security.user.name=admin security.user.password=admin ```  (I had to set endpoints.jolokia.sensitive to get any protection for the /jolokia endpoint, that was also surprising. I'd have thought that enabling management security would be enough.)  Startup log:  ``` 11:09:11.033 | INFO  | main       | etty.server.handler.ContextHandler$Context:2050 | jolokia: No access restrictor found at classpath:/jolokia-access.xml, access to all MBeans is allowed ... 11:09:54.391 | INFO  | main       | rk.security.web.DefaultSecurityFilterChain:  28 | Creating filter chain: OrRequestMatcher [requestMatchers=[Ant [pattern='/health'], Ant [pattern='/health/'], Ant [pattern='/health.*'], Ant [pattern='/info'], Ant [pattern='/info/'], Ant [pattern='/info.*'], Ant [pattern='/metrics'], Ant [pattern='/metrics/'], Ant [pattern='/metrics.*'], Ant [pattern='/autoconfig'], Ant [pattern='/autoconfig/'], Ant [pattern='/autoconfig.*'], Ant [pattern='/shutdown'], Ant [pattern='/shutdown/'], Ant [pattern='/shutdown.*'], Ant [pattern='/jolokia'], Ant [pattern='/jolokia/'], Ant [pattern='/jolokia.*']... ```  The URL /jolokia is indeed secured:  ``` 1:14:37.352 | DEBUG | 8828668-37 | ity.web.util.matcher.AntPathRequestMatcher: 145 | Checking match of request : '/jolokia'; against '/jolokia' 11:14:37.352 | DEBUG | 8828668-37 | security.web.util.matcher.OrRequestMatcher:  68 | matched ... 11:14:37.366 | DEBUG | 8828668-37 | cess.intercept.AbstractSecurityInterceptor: 194 | Secure object: FilterInvocation: URL: /jolokia; Attributes: [hasRole('ROLE_ADMIN')] ... 11:14:37.376 | DEBUG | 8828668-37 | rity.web.access.ExceptionTranslationFilter: 165 | Access is denied (user is anonymous); redirecting to authentication entry point ```  The actually sensitive jolokia paths are however not secured, e.g. /jolokia/list/java.lang/type=Memory:  ``` 11:18:14.132 | DEBUG | 8828668-39 | security.web.util.matcher.OrRequestMatcher:  65 | Trying to match using Ant [pattern='/jolokia'] 11:18:14.132 | DEBUG | 8828668-39 | ity.web.util.matcher.AntPathRequestMatcher: 145 | Checking match of request : '/jolokia/list/java.lang/type=memory'; against '/jolokia' 11:18:14.132 | DEBUG | 8828668-39 | security.web.util.matcher.OrRequestMatcher:  65 | Trying to match using Ant [pattern='/jolokia/'] 11:18:14.132 | DEBUG | 8828668-39 | ity.web.util.matcher.AntPathRequestMatcher: 145 | Checking match of request : '/jolokia/list/java.lang/type=memory'; against '/jolokia/' 11:18:14.132 | DEBUG | 8828668-39 | security.web.util.matcher.OrRequestMatcher:  65 | Trying to match using Ant [pattern='/jolokia.*'] 11:18:14.132 | DEBUG | 8828668-39 | ity.web.util.matcher.AntPathRequestMatcher: 145 | Checking match of request : '/jolokia/list/java.lang/type=memory'; against '/jolokia.*' ... 11:18:14.133 | DEBUG | 8828668-39 | security.web.util.matcher.OrRequestMatcher:  72 | No matches found ```  Is a blacklist a good strategy for securing a management API? </body>
		<created>2015-02-10 10:26:15</created>
		<closed>2015-02-12 17:56:32</closed>
	</bug>
	<bug>
		<id>2474</id>
		<title>Fragility in AuthenticationManagerConfiguration</title>
		<body>`AuthenticationManagerConfiguration#isAuthenticationManagerAlreadyConfigured` is quite fragile because it checks to see how many `GlobalAuthenticationConfigurerAdapter` there are. If more are added by the framework (i.e. #2473), then it won't work.  Additionally, it seems there is a bit of cleanup we can do in `AuthenticationManagerConfiguration` to make things a bit easier. </body>
		<created>2015-02-10 05:01:34</created>
		<closed>2015-02-18 10:41:24</closed>
	</bug>
	<bug>
		<id>2473</id>
		<title>configureGlobal on @SpringBootApplication fails</title>
		<body>The following fails:  ``` java import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;  @SpringBootApplication public class HelloWebSecurityApplication {      @Autowired     public void configureGlobal(AuthenticationManagerBuilder auth)             throws Exception {         // @formatter:off         auth             .inMemoryAuthentication()                 .withUser("user").password("password").roles("USER");         // @formatter:on     }      public static void main(String[] args) {         SpringApplication.run(HelloWebSecurityApplication.class, args);     } } ```  We should allow Spring Security's Global Authentication to be configured from any class annotated with `@EnableGlobalAuthentication`, `@EnableAutoConfiguration`, or `@SpringBootApplication`. This can be done by adding the following:  ``` java @Configuration @ConditionalOnClass(GlobalAuthenticationConfigurerAdapter.class) public class BootGlobalAuthenticationConfiguration {      @Bean     public static BootGlobalAuthenticationConfigurationAdapter bootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {         return new BootGlobalAuthenticationConfigurationAdapter(context);     }      private static class BootGlobalAuthenticationConfigurationAdapter extends GlobalAuthenticationConfigurerAdapter {         private final ApplicationContext context;         private static final Log logger = LogFactory.getLog(BootGlobalAuthenticationConfiguration.class);          public BootGlobalAuthenticationConfigurationAdapter(ApplicationContext context) {             this.context = context;         }          @Override         public void init(AuthenticationManagerBuilder auth) {             Map&lt;String, Object&gt; beansWithAnnotation = context.getBeansWithAnnotation(EnableAutoConfiguration.class);             if(logger.isDebugEnabled()) {                 logger.debug("Eagerly initializing " + beansWithAnnotation);             }         }     } } ``` </body>
		<created>2015-02-10 04:55:41</created>
		<closed>2015-02-18 10:41:25</closed>
	</bug>
	<bug>
		<id>2471</id>
		<title>Spring Boot Jersey Auto Config not work in Servlet 3.1 container</title>
		<body>When annotaion `@ApplicationPath` added on `JerseyConfig` extends `ResourceConfig`, a servlet will be created to serve request by Jersey in `JerseyServletContainerInitializer`.  In this case, the servlet create by Spring Boot in `JerseyAutoConfiguration` will be ingored.  The configs under key: `spring.jersey.init` will not take effect. </body>
		<created>2015-02-09 11:34:18</created>
		<closed>2016-01-21 11:49:08</closed>
	</bug>
	<bug>
		<id>2466</id>
		<title>Spring Boot ManagementSecurityAutoConfiguration instantiating two realms by default</title>
		<body>I'm debugging a spring boot application enabled with an actuator. I'm finding that the management application is instantiated under two different realms namely "Spring" and "Realm". (I'm not passing any realm name in the application.properties file.)  The "Spring" realm is being instantiated when the AuthenticationEntryPoint is configured on the below line of code (method - configure(HttpSecurity http))  ```         http.exceptionHandling().authenticationEntryPoint(entryPoint()); ```  and subsequently in the same configure method the default realm is being initiated by the name "Realm" on the below line of code.  ```         http.httpBasic(); ```  I think the above code is wrong/buggy.  I'm opening this as a bug after confirming that the above code is the culprit for my 401 errors. Also posted the same issue on stackoverflow http://stackoverflow.com/questions/28372903/spring-boot-managementsecurityautoconfiguration-instantiating-two-realms-by-defa </body>
		<created>2015-02-06 21:55:41</created>
		<closed>2015-04-27 22:52:41</closed>
	</bug>
	<bug>
		<id>2463</id>
		<title>ConfigurationProperties flexible name matching fails for nested class</title>
		<body>In my project, I have [an `@ConfigurationProperties` class](https://github.com/artsquare/caniprintit/blob/master/caniprintit-launcher/src/main/java/com/artsquare/cipi/CipiConfig.groovy) that has a nested class to hold some related values. Normally, Spring Boot will match underscores in an environment variable to traversal dots or camelCase bumps, but that flexible matching stops working after traversing into the nested class. For a prefix `artsquare.cipi`: - `artsquare_cipi_suppress_shares` matches `suppressShares`. - `artsquare_cipi_keen_project_id` does not match `keen.projectId`. - `artsquare_cipi_keen_projectid` does not match `keen.projectId`. - `artsquare_cipi_keen_projectId` does match `keen.projectId`. </body>
		<created>2015-02-06 03:52:54</created>
		<closed>2015-02-25 02:08:00</closed>
	</bug>
	<bug>
		<id>2449</id>
		<title>Configuring EndpointHandlerMapping for producing JSON only</title>
		<body>I love JSON outputs in our actuator endpoints. This week I have to add `jackson-dataformat-xml` dependency for our business and this is registering a `MappingJackson2XmlHttpMessageConverter`. I want to remove `MappingJackson2XmlHttpMessageConverter` from our EndpointHandlerMapping. I have currently solved this problem as this:  ``` @Component public class MyEndpointHandlerMappingCustomizer implements EndpointHandlerMappingCustomizer {     static class Fix extends HandlerInterceptorAdapter {        Set&lt;MediaType&gt; mediaTypes = Sets.newHashSet(MediaType.APPLICATION_JSON);        @Override       public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {          request.setAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes);          return true;       }    }     @Override    public void customize(EndpointHandlerMapping mapping) {       mapping.setInterceptors(new Object[]{new Fix()});    } } ```  I could not be sure that this is the right approach. Please provide a way to configure or remove a specific `HttpMessageConverter` from `EndpointHandlerMapping`.   </body>
		<created>2015-02-04 13:04:00</created>
		<closed>2015-10-20 14:29:10</closed>
	</bug>
	<bug>
		<id>2433</id>
		<title>Inconsistent property names for JMX default domain</title>
		<body>In `JmxAutoConfiguration` we have `propertyResolver.getProperty("default-domain")` (direct `Environment` access which is bad on its own), and in `EndpointMBeanExportProperties` we have `@Value("${spring.jmx.default_domain:}")` (despite the javadoc saying "default-domain"). So you end up having to set both variants for it to work. </body>
		<created>2015-01-30 16:16:21</created>
		<closed>2015-01-30 16:27:34</closed>
	</bug>
	<bug>
		<id>2422</id>
		<title>Timestamp-like strings in application.yaml are converted to java.util.Dates but those in application.properties are not</title>
		<body>By default, SnakeYAML converts timestamp-like strings into `java.util.Date` instances. Leads to weird behaviour where a string is turned into a date then back into a string, for example `2015-01-27` becomes `Tue Jan 27 00:00:00 GMT 2015`  Originally reported on [Stack Overflow](http://stackoverflow.com/questions/28157778/spring-boot-date-handling-in-application-yaml-and-properties/28174296#28174296). </body>
		<created>2015-01-27 17:32:23</created>
		<closed>2015-02-04 16:51:05</closed>
	</bug>
	<bug>
		<id>2410</id>
		<title>Wrong solrHealthIndicator name.</title>
		<body>Hi,  after starting the actuator I get `rabbit` for the solr health indicator.  ``` json {   "status" : "UP",   "diskSpace" : {     "status" : "UP",     "free" : 216163561472,     "threshold" : 10485760   },   "rabbit" : {     "status" : "UP",     "solrStatus" : "OK"   },   "db" : {     "status" : "UP",     "database" : "MySQL",     "hello" : 1   } } ``` </body>
		<created>2015-01-25 12:30:08</created>
		<closed>2015-01-26 02:28:45</closed>
	</bug>
	<bug>
		<id>2397</id>
		<title>App fails to start when deployed to Tomcat if it uses a DataSource retrieved from JNDI and JMX auto-configuration is enabled</title>
		<body>http://stackoverflow.com/questions/28063430/spring-boot-1-2-1-release-and-jndi-errors  Tomcat exposes an MBean for the DataSource and Boot's JMX export tries to create an MBean with the same name. Setting `spring.jmx.enabled: false` works around the problem. </body>
		<created>2015-01-22 12:49:03</created>
		<closed>2015-02-09 13:45:08</closed>
	</bug>
	<bug>
		<id>2387</id>
		<title>Extra dot in keys only supported for CharSequence</title>
		<body>@kdvolder and I brainstormed yesterday (#2054) to give proper semantic demarcation to properties binding and we found this issue. Consider the following examples, assuming a `config` prefix and a  `Map` of `String` to _something_ with name `content`:  If the value is `String` the following configuration creates two entries with key `foo` and `bar.key`  ``` config.content.foo=4 config.content.bar.key=2 ```  Now if the **value** of the map is integer, the exact same configuration throws an exception because the binder tries to "auto-grow" an integer for the key `bar` and can't obviously.   Why does the **value** of the map triggers this special handling for keys having dots? Shouldn't that be the type of the key since I assume we can safely disable key navigation since the type is _immutable_.  The current fuziness of the binding is also a severe issue for IDE support  that are trying to assist the user with what they can or cannot do. The basic behaviour is that a dot is a request to navigate. What happens when there is a dot in the intermediate element? Ideally this should only happen for maps and forcing the user to use the bracket notation would be a good way of harmonizing the current support (after fixing #2386 ).   But there is this special case for Map of String... I think IDE support would be much easier if the rule would be: - Each dot is a request to navigate to another element - If the element has a dot in it, you should use the bracket notation  Thoughts?  (that's obviously breaking for `logging.level.*` and others probably but if we have to handle a special case, we should probably define it and stick to it. </body>
		<created>2015-01-21 08:19:36</created>
		<closed>2015-04-10 10:00:16</closed>
	</bug>
	<bug>
		<id>2386</id>
		<title>bracket notation for Maps should only hold the key</title>
		<body>@kdvolder and I brainstormed yesterday (#2054) to give proper semantic demarcation to properties binding. During that brainstorming we realized that the bracket notation does not seem to work as it should for map  If the key of a map entry contains a dot, it is hard to make the difference between the key itself and the navigation to a child element. I thought that the bracket notation was exactly meant for that but it's not working.  Add the following test to `RelaxedDataBinder`  ``` java @SuppressWarnings("unchecked") @Test public void bindDoubleNestedMapWithDotInKeys() throws Exception {     TargetWithNestedMap target = new TargetWithNestedMap();     bind(target, "nested.foo: bar.key\n" + "nested[bar.key].spam: bucket\n"             + "nested[bar.key].value: 123\nnested[bar.key].foo: crap");     assertEquals(2, target.getNested().size());     Map&lt;String, Object&gt; nestedMap = (Map&lt;String, Object&gt;) target.getNested().get("bar.key");     assertNotNull("nested map should be registered with 'bar.key'", nestedMap);     assertEquals(3, nestedMap.size());     assertEquals("123",             nestedMap.get("value"));     assertEquals("bar.key", target.getNested().get("foo"));     assertFalse(target.getNested().containsValue(target.getNested())); } ```  That creates a map with a key `foo` with one `key` entry that is a map as well with the 3 values (`spam`, `value` and `foo`) </body>
		<created>2015-01-21 07:47:23</created>
		<closed>2015-08-03 13:03:33</closed>
	</bug>
	<bug>
		<id>2381</id>
		<title>Actuator sample logs everything twice</title>
		<body>``` build   20-Jan-2015 02:04:03    ------------------------------------------------------- build   20-Jan-2015 02:04:03     T E S T S build   20-Jan-2015 02:04:03    ------------------------------------------------------- build   20-Jan-2015 02:04:04    Running sample.actuator.ServletPathSampleActuatorApplicationTests build   20-Jan-2015 02:04:05    2015-01-20 02:04:05.492  INFO   --- [           main] o.s.t.c.web.WebTestContextBootstrapper   : Using TestExecutionListeners: [org.springframework.boot.test.IntegrationTestPropertiesListener@773b0c5b, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@45a86784, org.springframework.test.context.support.DirtiesContextTestExecutionListener@33242ed6, org.springframework.test.context.transaction.TransactionalTestExecutionListener@c7efdd5, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@654ab15b] build   20-Jan-2015 02:04:05    2015-01-20 02:04:05.492  INFO   --- [           main] o.s.t.c.web.WebTestContextBootstrapper   : Using TestExecutionListeners: [org.springframework.boot.test.IntegrationTestPropertiesListener@773b0c5b, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@45a86784, org.springframework.test.context.support.DirtiesContextTestExecutionListener@33242ed6, org.springframework.test.context.transaction.TransactionalTestExecutionListener@c7efdd5, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@654ab15b] build   20-Jan-2015 02:04:06     build   20-Jan-2015 02:04:06      .   ____          _            __ _ _ build   20-Jan-2015 02:04:06     /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ build   20-Jan-2015 02:04:06    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ build   20-Jan-2015 02:04:06     \\/  ___)| |_)| | | | | || (_| |  ) ) ) ) build   20-Jan-2015 02:04:06      '  |____| .__|_| |_|_| |_\__, | / / / / build   20-Jan-2015 02:04:06     =========|_|==============|___/=/_/_/_/ build   20-Jan-2015 02:04:06     :: Spring Boot ::  (v1.2.2.BUILD-SNAPSHOT) build   20-Jan-2015 02:04:06     build   20-Jan-2015 02:04:06    2015-01-20 02:04:06.500  INFO 23042 --- [           main] o.a.maven.surefire.booter.ForkedBooter   : Starting ForkedBooter v2.17 on w2s2-buildorg with PID 23042 (/home/bamboo/.m2/repository/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.jar started by bamboo in /opt/bamboo-home/xml-data/build-dir/BOOT-PUB-JOB1/spring-boot-samples/spring-boot-sample-actuator) build   20-Jan-2015 02:04:06    2015-01-20 02:04:06.500  INFO 23042 --- [           main] o.a.maven.surefire.booter.ForkedBooter   : Starting ForkedBooter v2.17 on w2s2-buildorg with PID 23042 (/home/bamboo/.m2/repository/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.jar started by bamboo in /opt/bamboo-home/xml-data/build-dir/BOOT-PUB-JOB1/spring-boot-samples/spring-boot-sample-actuator) build   20-Jan-2015 02:04:06    2015-01-20 02:04:06.950  INFO 23042 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3d7bcb17: startup date [Tue Jan 20 02:04:06 PST 2015]; root of context hierarchy build   20-Jan-2015 02:04:06    2015-01-20 02:04:06.950  INFO 23042 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3d7bcb17: startup date [Tue Jan 20 02:04:06 PST 2015]; root of context hierarchy ```  Other samples may also be affected </body>
		<created>2015-01-20 11:27:05</created>
		<closed>2015-01-20 11:45:06</closed>
	</bug>
	<bug>
		<id>2380</id>
		<title>SampleIntegrationParentApplicationTests fails intermittently</title>
		<body></body>
		<created>2015-01-20 09:33:35</created>
		<closed>2015-01-20 09:51:11</closed>
	</bug>
	<bug>
		<id>2367</id>
		<title>ErrorPageFilter masks non-error status codes from HandlerInterceptors</title>
		<body>Since it only masks `sendError()` and not `setStatus()` the `ErrorPageFilter` apparently results in a 200 for all non-error responses. SO ref: http://stackoverflow.com/questions/27964864/spring-boot-standalone-tomcat-httpservletresponse-always-returning-status-200/27969379#27969379. The problem only shows up in the web stack downstream of teh `ErrorPageFilter` (so e.g. you can't see the correct response in a `HandlerInterceptor`), but the caller sees the correct response because the filter doesn't modify the wrapped status. </body>
		<created>2015-01-15 17:55:00</created>
		<closed>2015-01-16 11:30:41</closed>
	</bug>
	<bug>
		<id>2366</id>
		<title>Unsupported option defined for thread pattern in defaults.xml CONSOLE_LOG_PATTERN</title>
		<body>The file in question is https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml  In `CONSOLE_LOG_PATTERN`, the thread pattern is defined as `%15.15t{14}` According to [logback documentation](http://logback.qos.ch/manual/layouts.html#relative) (and code), `t/thread` conversion word does not support any additional options.  For clarity, can you remove it, and leave just the field formatting options in-place, as `%15.15t`? </body>
		<created>2015-01-15 16:55:35</created>
		<closed>2015-01-20 11:59:42</closed>
	</bug>
	<bug>
		<id>2365</id>
		<title>It's not possible making Callable method in Spring Controller under Undertow</title>
		<body>Hi! I just tried the following piece of Groovy code:  ``` @SpringBootApplication class WebApp { static void main(String ... args) { SpringApplication.run WebApp, args }  @RestController class DummyController {     @RequestMapping('/dummy')     Callable&lt;String&gt; dummy { return { 'Dummy' } } } ```  and run it with the default embedded server in starter-web (that is Tomcat). This works ok and the endpoint responds w/o any issues, however if I try to switch to the new starter-undertow, the server throws such exception:   ``` java.lang.IllegalStateException: No value for key [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@166e2c19] bound to thread [XNIO-1 task-2]     at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:210)     at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterConcurrentHandlingStarted(OpenEntityManagerInViewInterceptor.java:136)     at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterConcurrentHandlingStarted(WebRequestHandlerInterceptorAdapter.java:80)     at org.springframework.web.servlet.HandlerExecutionChain.applyAfterConcurrentHandlingStarted(HandlerExecutionChain.java:186)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)     at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85)     at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:82)     at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:61)     at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)     at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249)     at io.undertow.servlet.handlers.ServletInitialHandler.dispatchToPath(ServletInitialHandler.java:192)     at io.undertow.servlet.spec.RequestDispatcherImpl.error(RequestDispatcherImpl.java:403)     at io.undertow.servlet.spec.RequestDispatcherImpl.error(RequestDispatcherImpl.java:314)     at io.undertow.servlet.spec.HttpServletResponseImpl.doErrorDispatch(HttpServletResponseImpl.java:148)     at io.undertow.servlet.spec.HttpServletResponseImpl.sendError(HttpServletResponseImpl.java:136)     at io.undertow.servlet.spec.HttpServletResponseImpl.sendError(HttpServletResponseImpl.java:167)     at org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor.handleTimeout(TimeoutCallableProcessingInterceptor.java:43)     at org.springframework.web.context.request.async.CallableInterceptorChain.triggerAfterTimeout(CallableInterceptorChain.java:81)     at org.springframework.web.context.request.async.WebAsyncManager$2.run(WebAsyncManager.java:293)     at org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onTimeout(StandardServletAsyncWebRequest.java:140)     at io.undertow.servlet.spec.AsyncContextImpl.onAsyncTimeout(AsyncContextImpl.java:615)     at io.undertow.servlet.spec.AsyncContextImpl.access$600(AsyncContextImpl.java:71)     at io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1.run(AsyncContextImpl.java:488)     at io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable.run(AsyncContextImpl.java:575)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  Do I missed something that I need to configure properly for Undertow, or there's really something wrong?  Here my configuration of dependencies in Gradle:  ``` dependencies {     compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.0-rc-1'      compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBoot}"     compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: "${springBoot}"     compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBoot}"     compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: "${springBoot}"     compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "${springBoot}"      compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2' } ``` </body>
		<created>2015-01-15 15:47:18</created>
		<closed>2015-01-16 13:52:33</closed>
	</bug>
	<bug>
		<id>2361</id>
		<title>On gradle projects in Eclipse StringIndexOutOfBoundException from spring-boot annotation processor</title>
		<body>The reason appears to be that an assumption is made that project output folder _must_ end with the word 'classes' but this is not the case. Output folders in Eclipse are configurable to different locations and in Gradle projects they used the 'default' which is a folder in the project called 'bin'.  ``` !ENTRY org.eclipse.jdt.apt.pluggable.core 1 1 2015-01-14 17:09:12.352 !MESSAGE java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.String.substring(String.java:1954)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.getAdditionalMetadata(ConfigurationMetadataAnnotationProcessor.java:484)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.mergeAdditionalMetadata(ConfigurationMetadataAnnotationProcessor.java:442)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.writeMetaData(ConfigurationMetadataAnnotationProcessor.java:379)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.process(ConfigurationMetadataAnnotationProcessor.java:178)     at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)     at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:110)     at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)     at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)     at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:855)     at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)     at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:367)     at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:179)     at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:304)     at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:61)     at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)     at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:186)     at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)     at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)     at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:358)     at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:381)     at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)     at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54) ``` </body>
		<created>2015-01-15 01:16:00</created>
		<closed>2015-01-21 11:19:00</closed>
	</bug>
	<bug>
		<id>2351</id>
		<title>Welcome pages not mapped when using different servlet path</title>
		<body>The forward route added by the MVC auto-configuration for welcome pages doesn't include the servlet path. If you add the following to `application.properties`:  ``` server.servlet-path=/home/* ```  And have a `static/index.html` you can't hit it from `/home` only `/home/index.html`. </body>
		<created>2015-01-13 19:29:19</created>
		<closed>2015-02-25 02:30:55</closed>
	</bug>
	<bug>
		<id>2348</id>
		<title>Additional Hibernate properties are not recognized</title>
		<body>I have the following problem:   I have defined the property spring.jpa.hibernate.transaction.jta.platform in my application.properties. However, when the HibernateJpaAutoConfiguration starts, it gets the properties by a call to JpaProperties#getHibernateProperties(), which itself calls Hibernate#getAdditionalProperties(). But in this method, a new Map is created and two properties added (ejb.naming_strategy and hbm2ddl.auto) and all existing properties are discarded. Thus the auto configuration tries to configure the JTA platform, which fails (because we use Hibernate 4.2).  Is this type of property handling intended or is this a bug, meaning that also all existing properties should be in the map which is returned by Hibernate#getAdditionalProperties()? </body>
		<created>2015-01-13 15:59:33</created>
		<closed>2015-01-20 09:10:45</closed>
	</bug>
	<bug>
		<id>2345</id>
		<title>An app that depends on spring-boot-starter-jersey and spring-boot-starter-data-jpa fails to start with a FileNotFoundException</title>
		<body>``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [demo.Stackoverflow27915560Application]; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.class] cannot be opened because it does not exist     at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:489)     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:424)     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:180)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:961)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:950)     at demo.Stackoverflow27915560Application.main(Stackoverflow27915560Application.java:10) Caused by: java.io.FileNotFoundException: class path resource [org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.class] cannot be opened because it does not exist     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)     at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:50)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98)     at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93)     at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:591)     at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getSuperClass(ConfigurationClassParser.java:762)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:297)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:226)     at org.springframework.context.annotation.ConfigurationClassParser.processMemberClasses(ConfigurationClassParser.java:314)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:243)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:226)     at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:480)     ... 14 common frames omitted ```  Reported on [Stack Overflow](http://stackoverflow.com/questions/27913149/combining-starter-poms-in-spring-boot) </body>
		<created>2015-01-13 09:18:50</created>
		<closed>2015-01-13 17:56:16</closed>
	</bug>
	<bug>
		<id>2344</id>
		<title>Gradle plugin doesn't package runtime project dependency</title>
		<body>Say there is a Gradle multi-project build with, for example, 2 sub-projects, projectA and projectB and projectA has a runtime dependency on projectB. If the build task for projectA is run without building projectB first, then the jar for projectB doesn't get included in the repackaged jar.  The output for running `gradlew clean :projectA:build` is as follows:  ``` :projectB:clean :projectA:clean :projectA:compileJava :projectA:processResources :projectA:classes :projectA:jar :projectA:bootRepackage :projectA:assemble :projectB:compileJava :projectB:processResources :projectB:classes :projectB:jar :projectA:compileTestJava UP-TO-DATE :projectA:processTestResources UP-TO-DATE :projectA:testClasses UP-TO-DATE :projectA:test UP-TO-DATE :projectA:check UP-TO-DATE :projectA:build ```  The projectB jar is only built by Gradle because it might be used in tests. When the bootRepackage task runs, the jar is not present and is not present in the final fat jar. </body>
		<created>2015-01-13 06:50:39</created>
		<closed>2015-01-21 15:09:35</closed>
	</bug>
	<bug>
		<id>2341</id>
		<title>`javax.websocket.server.ServerContainer` is missing from ServletContext for pure SpringBoot application</title>
		<body>`javax.websocket.server.ServerContainer` from ServletContext is `null` when SpringBoot is used (without Spring WebSocket).  Spring WebSocket shoudn't be required to support it as underlying Tomcat(or Jetty) does exposed it like the Servlet Specification is required. More info [here](https://github.com/Atmosphere/atmosphere/issues/1836), sample [here](https://github.com/henri-tremblay/hipster-atmosphere) </body>
		<created>2015-01-12 20:32:39</created>
		<closed>2015-01-13 23:43:02</closed>
	</bug>
	<bug>
		<id>2330</id>
		<title>JarCommand removes @GrabResolver before it can be used</title>
		<body>JarCommand removes `@GrabResolver` before it can be used (in an AST), so any dependencies that need to be resolved externally are missing or wrong (and you might only find out at runtime). </body>
		<created>2015-01-12 09:32:48</created>
		<closed>2015-01-14 16:55:57</closed>
	</bug>
	<bug>
		<id>2327</id>
		<title>Jackson XML doesn't use my Serializer - json works</title>
		<body>I've written a small Serializer for MongoDB's ObjectId:  ``` public class ObjectIdSerializer extends StdSerializer&lt;ObjectId&gt; {     public static final ObjectIdSerializer INSTANCE = new ObjectIdSerializer();     private ObjectIdSerializer() { super(ObjectId.class); }     @Override public void serialize(ObjectId value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {         jgen.writeString(value.toHexString());     } } ```  And a SimpleModule:  ``` @Component public class CommonJacksonModule extends SimpleModule {     public CommonJacksonModule() {         super(new Version(1, 0, 0, null, null, null));         addSerializer(ObjectId.class, ObjectIdSerializer.INSTANCE);     } } ```  When using Accept=application/json it works as expected and I get something like "5498374f44ae6f110dd0abcd". But using Accept=application/xml I get something like:  ``` &lt;new&gt;false&lt;/new&gt; &lt;timeSecond&gt;1419261775&lt;/timeSecond&gt; &lt;inc&gt;231792298&lt;/inc&gt; &lt;machine&gt;1152282385&lt;/machine&gt; &lt;time&gt;1419261775000&lt;/time&gt; &lt;date&gt;2014-12-22T15:22:55.000+0000&lt;/date&gt; &lt;timestamp&gt;1419261775&lt;/timestamp&gt; ```  What's the problem here? </body>
		<created>2015-01-12 01:15:57</created>
		<closed>2015-02-12 14:05:51</closed>
	</bug>
	<bug>
		<id>2326</id>
		<title>NPE with JtaStatusHelper, JPA 2.0, and WAS</title>
		<body>Running my app on WAS, Hibernate 4.2, and Boot 1.2.1. This isn't an issue when running on Tomcat.  ``` java Caused by: java.lang.NullPointerException     at org.hibernate.engine.transaction.internal.jta.JtaStatusHelper.getStatus(JtaStatusHelper.java:73)     at org.hibernate.engine.transaction.internal.jta.JtaStatusHelper.isActive(JtaStatusHelper.java:115)     at org.hibernate.engine.transaction.internal.jta.CMTTransaction.join(CMTTransaction.java:149)     at org.hibernate.ejb.AbstractEntityManagerImpl.joinTransaction(AbstractEntityManagerImpl.java:1230)     at org.hibernate.ejb.AbstractEntityManagerImpl.postInit(AbstractEntityManagerImpl.java:178)     at org.hibernate.ejb.EntityManagerImpl.&lt;init&gt;(EntityManagerImpl.java:89)     at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:193)     at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:188)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.invokeProxyMethod(AbstractEntityManagerFactoryBean.java:388)     at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean$ManagedEntityManagerFactoryInvocationHandler.invoke(AbstractEntityManagerFactoryBean.java:541)     at com.sun.proxy.$Proxy279.createEntityManager(Unknown Source)     at org.springframework.orm.jpa.EntityManagerFactoryAccessor.createEntityManager(EntityManagerFactoryAccessor.java:154)     at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.preHandle(OpenEntityManagerInViewInterceptor.java:89)     at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.preHandle(WebRequestHandlerInterceptorAdapter.java:56)     at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:134)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) ```  There is a work around to set JTA as disabled: `spring.jta.enabled: false`. Not sure if this is expected behavior or not. </body>
		<created>2015-01-12 00:46:07</created>
		<closed>2015-01-21 18:09:47</closed>
	</bug>
	<bug>
		<id>2324</id>
		<title>War deployment in standalone Tomcat causes webclassloader memory leak</title>
		<body>During startup Spring Boot invokes `SLF4JBridgeHandler.install()` to add a logging handler to container's LogManager, but during application shutdown (undeploy) adequate `SLF4JBridgeHandler.uninstall()` or `SLF4JBridgeHandler.removeHandlersForRootLogger()` is not called. I think it should be.  The bug manifests itself in taking metaspace memory space and following message is displayed after invoking Tomcat's find leaks method: Message:      ``` The following web applications were stopped (reloaded, undeployed), but their classes from previous runs are still loaded in memory, thus causing a memory leak (use a profiler to confirm): /spring-boot-logging-issue ```  Below is my workaround that solves the issue. It removes the logging handler during ContextClosedEvent.  ``` @Bean public ApplicationListener&lt;ContextClosedEvent&gt; uninstallSLF4JBridgeHandlerWorkaround() {     return new ApplicationListener&lt;ContextClosedEvent&gt;() {         @Override         public void onApplicationEvent(ContextClosedEvent event) {             try {                 SLF4JBridgeHandler.removeHandlersForRootLogger();             } catch (NoSuchMethodError ex) {                 SLF4JBridgeHandler.uninstall();             }         }     }; } ```  Tested with Tomcat 8.0.15 and OpenJDK 1.8.0_25 on Linux 3.17.6 </body>
		<created>2015-01-10 11:31:25</created>
		<closed>2015-01-14 15:23:21</closed>
	</bug>
	<bug>
		<id>2316</id>
		<title>Annotation processor need gradle configuration to work correctly</title>
		<body>https://github.com/spring-projects/spring-boot/issues/2271#issuecomment-69150124 </body>
		<created>2015-01-08 20:09:53</created>
		<closed>2015-02-25 04:28:55</closed>
	</bug>
	<bug>
		<id>2313</id>
		<title>spring-boot-configuration-processor doesn't work correctly for incremental builds</title>
		<body>This is a problem when the processor is used from Eclipse. It manifests when the project has more than one type annoted with @ConfigurationProperties.  The processor rewrites the metadata file with a summary of information from all the types it processed. This produces the correct result on FULL builds but produces incomplete information on incremental builds (as the processor is only presented with some of the types based on what has changed in the workspace since the last build).  The result is that on incremental builds information from non-changed types is deleted from the metadata file.  </body>
		<created>2015-01-08 17:42:44</created>
		<closed>2015-01-28 15:29:07</closed>
	</bug>
	<bug>
		<id>2304</id>
		<title>Relaxed binding cannot cope with camelcase properties</title>
		<body>Give a class like this:  ``` @ConfigurationProperties(prefix = "test") public static class PropertyWithEnum {      private FooEnum theValue;      // ... } ```  It should be possible to use the environment variable `TEST_THE_VALUE` but this doesn't currently work. </body>
		<created>2015-01-08 01:02:17</created>
		<closed>2015-01-08 06:29:50</closed>
	</bug>
	<bug>
		<id>2302</id>
		<title>Warning: Supported source version 'RELEASE_6' from annotation processor</title>
		<body>Using the annotation processor results in the following warning:  ``` warning: Supported source version 'RELEASE_6' from annotation processor 'org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor' less than -source '1.8' ``` </body>
		<created>2015-01-07 17:42:41</created>
		<closed>2015-01-07 22:26:50</closed>
	</bug>
	<bug>
		<id>2291</id>
		<title>Spring Boot Actuator Audit repository method parameter ignored</title>
		<body>Hi,  `AuditEventRepository` interface has the following method:  `List find(String principal, Date after)`  It is implemented in `InMemoryAuditEventRepository`. The problem is that the second parameter (`Date after`) seems to be ignored.  Spring-Boot-1.2.0.RELEASE </body>
		<created>2015-01-06 10:47:54</created>
		<closed>2015-01-06 20:00:53</closed>
	</bug>
	<bug>
		<id>2287</id>
		<title>spring-boot-configuration-processor not compatible with Eclipse APT</title>
		<body>After configuring Eclipse to run the annotation processor as part of the build, it crashes the project's build with this exception:  ``` java.lang.IllegalArgumentException: Unsupported location: CLASS_PATH     at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl.getFileFromOutputLocation(IdeFilerImpl.java:188)     at org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl.getResource(IdeFilerImpl.java:154)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.mergeManualMetadata(ConfigurationMetadataAnnotationProcessor.java:302)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.writeMetaData(ConfigurationMetadataAnnotationProcessor.java:280)     at org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor.process(ConfigurationMetadataAnnotationProcessor.java:123)     at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)     at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:110)     at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)     at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)     at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:855)     at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)     at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:367)     at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.compile(BatchImageBuilder.java:179)     at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:304)     at org.eclipse.jdt.internal.core.builder.BatchImageBuilder.build(BatchImageBuilder.java:61)     at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildAll(JavaBuilder.java:256)     at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:175)     at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)     at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)     at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:401)     at org.eclipse.core.internal.resources.Project$1.run(Project.java:618)     at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2313)     at org.eclipse.core.internal.resources.Project.internalBuild(Project.java:597)     at org.eclipse.core.internal.resources.Project.build(Project.java:114)     at org.eclipse.jdt.internal.ui.util.CoreUtility$BuildJob.run(CoreUtility.java:161)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54) ``` </body>
		<created>2015-01-05 22:15:30</created>
		<closed>2015-01-06 23:22:26</closed>
	</bug>
	<bug>
		<id>2275</id>
		<title>Dependency management for jetty-util is declared twice</title>
		<body></body>
		<created>2015-01-03 16:51:48</created>
		<closed>2015-01-03 20:30:42</closed>
	</bug>
	<bug>
		<id>2271</id>
		<title>Additional metadata not merged with boot autoconfigure jar in classpath</title>
		<body>With gradle(should also happen with maven) `additional-spring-configuration-metadata.json` is not merged into `spring-configuration-metadata.json` which seems to be caused by a multiple files in a tool classpath.  I added some logging:  ``` private ConfigurationMetadata mergeManualMetadata(ConfigurationMetadata metadata) {   try {            FileObject manualMetadata = this.processingEnv.getFiler().getResource(                           StandardLocation.CLASS_PATH, "",                           "META-INF/additional-spring-configuration-metadata.json");           System.out.println("XXX1: " + manualMetadata);           System.out.println("XXX2: " + manualMetadata.toUri());           System.out.println("XXX3: " + manualMetadata.toUri().getScheme());           if (!"file".equals(manualMetadata.toUri().getScheme())) {                   // We only want local files, not any classpath jars                   return metadata;           } ```  When compiling boot itself, I see expected shown below:  ``` [INFO] Compiling 191 source files to /home/jvalkealahti/repos/jvalkeal/spring-boot/spring-boot/target/classes XXX1: com.sun.tools.javac.processing.JavacFiler$FilerInputFileObject@cce92a5 XXX2: file:/home/jvalkealahti/repos/jvalkeal/spring-boot/spring-boot/target/classes/META-INF/additional-spring-configuration-metadata.json XXX3: file ```  When I added bits to SHDP boot module, I see this:  ``` :spring-data-hadoop-boot:compileJava warning: [options] bootstrap class path not set in conjunction with -source 1.6 XXX1: com.sun.tools.javac.processing.JavacFiler$FilerInputFileObject@4167292 XXX2: jar:file:/home/jvalkealahti/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.2.1.BUILD-SNAPSHOT/spring-boot-autoconfigure-1.2.1.BUILD-SNAPSHOT.jar!/META-INF/additional-spring-configuration-metadata.json XXX3: jar ```  Scheme is `jar` so no metadata gets merged. Tests jar is seeing this json with a `file` scheme and stuff is actually merged correctly in this case. I guess in case of tests.jar location of `additional-spring-configuration-metadata.json` just happens to be correct one returned by a `JavacFileManager`.  ``` :spring-data-hadoop-boot:compileTestJava warning: [options] bootstrap class path not set in conjunction with -source 1.6 XXX1: com.sun.tools.javac.processing.JavacFiler$FilerInputFileObject@4f7f7eba XXX2: file:/home/jvalkealahti/repos/jvalkeal/spring-hadoop/spring-hadoop-boot/build/resources/main/META-INF/additional-spring-configuration-metadata.json XXX3: file ```  Checking JavacFileManager sources at  http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/com/sun/tools/javac/util/JavacFileManager.java#1097  ``` } else {     Iterable&lt;? extends File&gt; path = paths.getPathForLocation(location);     dir = null;     for (File f: path) {         dir = f;         break;     } } ```  First path is returned whatever it is. `spring-hadoop-boot` depends on `spring-boot-autoconfigure` so second `additional-spring-configuration-metadata.json` is always there. I guess this is only reliable if classpath contains only one `additional-spring-configuration-metadata.json` file.  </body>
		<created>2015-01-01 15:15:55</created>
		<closed>2015-01-07 22:26:50</closed>
	</bug>
	<bug>
		<id>2269</id>
		<title>StackOverflowError for user-added ContentNegotiatingViewResolver with a different bean name than "viewResolver"</title>
		<body>Adding a user-defined `ContentNegotiationConfigurer` with a different bean name than "viewResolver" results in a `StackOverflowError` due to a recursion in `ContentNegotiationConfigurer.resolveViewName()`:  ``` Caused by: java.lang.StackOverflowError: null     at ch.qos.logback.core.pattern.PatternLayoutBase.writeLoopOnConverters(PatternLayoutBase.java:119)     at ch.qos.logback.classic.PatternLayout.doLayout(PatternLayout.java:149)     at ch.qos.logback.classic.PatternLayout.doLayout(PatternLayout.java:39)     at ch.qos.logback.core.encoder.LayoutWrappingEncoder.doEncode(LayoutWrappingEncoder.java:134)     at ch.qos.logback.core.OutputStreamAppender.writeOut(OutputStreamAppender.java:194)     at ch.qos.logback.core.OutputStreamAppender.subAppend(OutputStreamAppender.java:219)     at ch.qos.logback.core.OutputStreamAppender.append(OutputStreamAppender.java:103)     at ch.qos.logback.core.UnsynchronizedAppenderBase.doAppend(UnsynchronizedAppenderBase.java:88)     at ch.qos.logback.core.spi.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:48)     at ch.qos.logback.classic.Logger.appendLoopOnAppenders(Logger.java:273)     at ch.qos.logback.classic.Logger.callAppenders(Logger.java:260)     at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:442)     at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:396)     at ch.qos.logback.classic.Logger.log(Logger.java:788)     at org.apache.commons.logging.impl.SLF4JLocationAwareLog.debug(SLF4JLocationAwareLog.java:133)     at org.springframework.web.accept.FixedContentNegotiationStrategy.resolveMediaTypes(FixedContentNegotiationStrategy.java:50)     at org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(ContentNegotiationManager.java:124)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getMediaTypes(ContentNegotiatingViewResolver.java:326)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:297)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.getCandidateViews(ContentNegotiatingViewResolver.java:378)     at org.springframework.web.servlet.view.ContentNegotiatingViewResolver.resolveViewName(ContentNegotiatingViewResolver.java:299) ```  The CNVR was added as follows:  ``` java @Configuration public class WebConfig extends WebMvcConfigurerAdapter {      @Bean     public View xmlView() {         final MappingJackson2XmlView view = new MappingJackson2XmlView();         view.setModelKey("result");         return view;     }      @Bean     public View jsonView() {         return new MappingJackson2JsonView();     }      @Override     public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {         configurer.ignoreAcceptHeader(true).defaultContentType(MediaType.TEXT_HTML)                 .mediaType("html", MediaType.TEXT_HTML).mediaType("xml", MediaType.APPLICATION_XML)                 .mediaType("json", MediaType.APPLICATION_JSON);     }      @Bean     public ContentNegotiatingViewResolver cnViewResolver(ContentNegotiationManager manager) {         ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();         resolver.setContentNegotiationManager(manager);         resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);         resolver.setDefaultViews(Arrays.asList(new View[] { xmlView(), jsonView() }));         return resolver;     } ``` </body>
		<created>2014-12-31 22:53:52</created>
		<closed>2015-01-02 19:35:36</closed>
	</bug>
	<bug>
		<id>2264</id>
		<title>endpoints.enabled property does not work</title>
		<body>The new property 'endpoints.enabled' add to the 1.2.0 release does not work as expected. There is a missing return statement in the method isEnabled() of the AbstractEndpoint class. </body>
		<created>2014-12-31 16:04:50</created>
		<closed>2015-01-01 03:27:09</closed>
	</bug>
	<bug>
		<id>2261</id>
		<title>Spring Boot 1.2.0.RELEASE missing gh-1259 fix</title>
		<body>The Spring Boot 1.2.0.RELEASE is missing the gh-1259 fix for RelaxedPropertyResolver.subProperties() doesn't return same value as getProperty(). </body>
		<created>2014-12-30 19:35:34</created>
		<closed>2014-12-30 22:32:44</closed>
	</bug>
	<bug>
		<id>2243</id>
		<title>The contents of the StringBuilder builder variable are updated, but never queried in ParentAwareNamingStrategy.getObjectName</title>
		<body>In the `org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy.getObjectName(Object, String)` method the contents of the `StringBuilder` builder variable are updated, but never queried. </body>
		<created>2014-12-27 22:31:44</created>
		<closed>2015-01-02 23:32:30</closed>
	</bug>
	<bug>
		<id>2237</id>
		<title>No qualifying bean of type [org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping]</title>
		<body>Following this question here:  http://stackoverflow.com/questions/26890727/spring-boot-issue-while-using-smvcurl-tag  I get the same error:  ``` 2014-12-26 12:27:22,489 [http-nio-8112-exec-5] ERROR: Servlet.service() for servlet jsp threw exception org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping] is defined: expected single matching bean but found 4: fallbackMapping,endpointHandlerMapping,repositoryExporterHandlerMapping,requestMappingHandlerMapping     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:365) ``` </body>
		<created>2014-12-26 10:35:54</created>
		<closed>2015-01-15 13:36:51</closed>
	</bug>
	<bug>
		<id>2232</id>
		<title>spring-boot-starter-data-rest 1.2.0 generates links using http instead of https</title>
		<body>I have written a spring boot application which is using `spring-boot-starter-data-jpa`. The application is configured to use https only. When I use Version 1.1.10 the generated links in the documents send by the server are using https as a protocol. If I switch to version 1.2.0 the links are generated with http protocol, which is not available in my application.  To reproduce this I've provided a simple example. This is a slightly changed version of the gs-accessing-data-rest example (https://github.com/hg-schneider/gs-accessing-data-rest).  In the complete folder I've changed the build to use jetty and enabled https. If you checkout HEAD which is using spring boot version 1.2.0, run the application and curl it with `curl -k https://localhost:8443` you receive a document with links using http.  If you checkout the previous commit (`git checkout  c9b04504`) you get the same sources but using spring boot 1.1.10. Running this and curl it again with `curl -k https://localhost:8443` you will receive a document with links using https links.  Thanks for developing spring. </body>
		<created>2014-12-25 09:26:34</created>
		<closed>2015-01-06 01:54:35</closed>
	</bug>
	<bug>
		<id>2220</id>
		<title>Forking cannot be disabled if Spring Loaded is present</title>
		<body>After change https://github.com/spring-projects/spring-boot/commit/f4fbc3e33955c34aae21e93d8b235d9914213080 the new logic disrespects configuration option `fork=false` if hotswap classloader (springloaded) present. </body>
		<created>2014-12-23 07:50:37</created>
		<closed>2014-12-23 10:23:09</closed>
	</bug>
	<bug>
		<id>2218</id>
		<title>Unable to deploy JPA application to WAS 8 due to Hibernate 4.2</title>
		<body>Raised in Gitter:  &gt; Think I figured out the issue with WAS and the datasource. I get an exception: &gt; NoClassDefFoundError: org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform &gt; This is because I am using Hibernate 4.2 and the packages for AbstractJtaPlatform changed between 4.2 &amp; 4.3. Should be org.hibernate.service.jta.platform.internal.AbstractJtaPlatform. So potential bug in configureJtaPlatform() in HibernateJpaAutoConfiguration class? </body>
		<created>2014-12-22 17:59:38</created>
		<closed>2014-12-30 08:57:47</closed>
	</bug>
	<bug>
		<id>2212</id>
		<title>Groovy Markup Template tries to grab HTML </title>
		<body>I have an application using Thymeleaf exclusively for view rendering but Groovy extensively for model/controller logic,with groovy-all. I just updated to 1.2 and am seeing nondeterministic errors where the Groovy Markup Template engine is trying to render my HTML files and is throwing exceptions on the first character. The application worked fine in staging and was deployed to an identical production runtime (PWS). I am attempting to work around by disabling all the Groovy Web autoconfig.  </body>
		<created>2014-12-20 21:20:36</created>
		<closed>2015-02-18 16:56:30</closed>
	</bug>
	<bug>
		<id>2211</id>
		<title>Not possible to set HealthEndpoint to sensitive anymore with 1.2</title>
		<body>Until 1.1.x is was possible to make the health-endpoint sensitive by setting endpoints.health.sensitive=true. This doesn't work under 1.2 anymore. Although the (mvc-)endpoint has the sensitive property set to true (verified in debug mode), the endpoint is still unprotected. Other endpoints are unaffected by this problem, e.g. "info" works.  No special setup required to reproduce. Just call a simple app with args "--endpoints.health.sensitive=true".   Regards Lars </body>
		<created>2014-12-20 11:34:37</created>
		<closed>2014-12-25 20:55:32</closed>
	</bug>
	<bug>
		<id>2210</id>
		<title>PersistenceExceptionTranslationPostProcessor causing info message</title>
		<body>I have some info messages regarding BeanPostProcessors. One of them is `Bean 'org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration' of type [class org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)`  I have checked that PersistenceExceptionTranslationAutoConfiguration is declared inside org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration as a bean. A possible solution is declaring it inside `org.springframework.context.annotation.ImportBeanDefinitionRegistrar` as `org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.Registrar`. Another solution might be declaring it static.  </body>
		<created>2014-12-19 19:45:03</created>
		<closed>2014-12-19 23:35:45</closed>
	</bug>
	<bug>
		<id>2196</id>
		<title>MongoAutoConfiguration causes TypeNotPresentExceptionProxy error since 1.2.0</title>
		<body>The MongoAutoConfiguration class has a `@ConditionalOnMissingBean(MongoDbFactory.class)` annotation, but the `org.springframework.data.mongodb.MongoDbFactory` from Spring Data is not included in our project because we don't use Spring Data. Found this by having a breakpoint on the `AnnotationJmxAttributeSource.java:73` file until it failed...  Before version 1.2.0 we didn't have any issues.  Java version:   ``` java version "1.8.0_25" Java(TM) SE Runtime Environment (build 1.8.0_25-b17 ```  Trying to start the project gives the following stacktrace:  ``` Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724)     at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531)     at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355)     at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286)     at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120)     at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72)     at java.lang.Class.createAnnotationData(Class.java:3513)     at java.lang.Class.annotationData(Class.java:3502)     at java.lang.Class.getAnnotation(Class.java:3407)     at org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedResource(AnnotationJmxAttributeSource.java:73)     at org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.includeBean(MetadataMBeanInfoAssembler.java:121)     at org.springframework.jmx.export.MBeanExporter$1.include(MBeanExporter.java:856)     at org.springframework.jmx.export.MBeanExporter.autodetect(MBeanExporter.java:891)     at org.springframework.jmx.export.MBeanExporter.autodetectBeans(MBeanExporter.java:853)     at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:532)     at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:420) ```  ![image](https://cloud.githubusercontent.com/assets/235745/5490000/7672df10-86ce-11e4-8550-d58217f589f5.png) </body>
		<created>2014-12-18 14:58:50</created>
		<closed>2014-12-19 23:35:45</closed>
	</bug>
	<bug>
		<id>2192</id>
		<title>Spring Boot 1.2.0 + Undertow: IllegalArgumentException: UT010043: Cannot add servlet context listener from a programatically added listener</title>
		<body>I'm not sure if it's a Spring Boot 1.2.0 or Undertow issue.  However: 1. Spring should report the problematic bean name/path, including the `@Configuration` where it's located 2. How do I resolve this... can I add servlet context listeners? 3. I should report the typo `programatically` to Undertow project  ``` 13:53:47.102 WARN  |            |                                                                                                    | main             | figEmbeddedWebApplicationContext | Exception encountered during context initialization - cancelling refresh attempt org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.RuntimeException: java.lang.IllegalArgumentException: UT010043: Cannot add servlet context listener from a programatically added listener     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:124) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:474) [spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.jrLockAndRefresh(AbstractApplicationContext.java) [spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) [spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:139) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at id.co.bippo.springapp.CommerceServerApplication.main(CommerceServerApplication.java:66) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_25]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_25]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_25]     at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_25]     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) [idea_rt.jar:na] Caused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: UT010043: Cannot add servlet context listener from a programatically added listener     at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:222) ~[undertow-servlet-1.1.1.Final.jar:1.1.1.Final]     at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createDeploymentManager(UndertowEmbeddedServletContainerFactory.java:345) ~[spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.getEmbeddedServletContainer(UndertowEmbeddedServletContainerFactory.java:201) ~[spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:148) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:121) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     ... 13 common frames omitted Caused by: java.lang.IllegalArgumentException: UT010043: Cannot add servlet context listener from a programatically added listener     at io.undertow.servlet.spec.ServletContextImpl.addListener(ServletContextImpl.java:606) ~[undertow-servlet-1.1.1.Final.jar:1.1.1.Final]     at org.springframework.boot.context.embedded.ServletListenerRegistrationBean.onStartup(ServletListenerRegistrationBean.java:108) ~[spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:203) ~[spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$StartupListener.contextInitialized(UndertowEmbeddedServletContainerFactory.java:508) ~[spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at io.undertow.servlet.core.ApplicationListeners.contextInitialized(ApplicationListeners.java:173) ~[undertow-servlet-1.1.1.Final.jar:1.1.1.Final]     at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:193) ~[undertow-servlet-1.1.1.Final.jar:1.1.1.Final]     ... 17 common frames omitted ``` </body>
		<created>2014-12-18 07:19:55</created>
		<closed>2014-12-22 19:27:03</closed>
	</bug>
	<bug>
		<id>2188</id>
		<title>The war layout doesn't package dependencies with a custom scope</title>
		<body>Same problem as #2187 but for wars rather than modules </body>
		<created>2014-12-17 17:53:46</created>
		<closed>2014-12-17 20:22:27</closed>
	</bug>
	<bug>
		<id>2187</id>
		<title>The module layout doesn't package dependencies with a custom scope</title>
		<body>If you configure a custom configuration for the `bootRepackage` task and use the module layout, the resulting jar will be empty. When a custom configuration is used all of the libraries have a scope of `LibraryScope.CUSTOM` and the Module layout only provides a destination for compile and runtime scoped dependencies. </body>
		<created>2014-12-17 17:25:44</created>
		<closed>2014-12-17 20:15:47</closed>
	</bug>
	<bug>
		<id>2184</id>
		<title>Libraries with templates/ folder not detected by existing template availability providers</title>
		<body>Libraries with templates/ folder not detected by existing template availability providers. So if you include one on the classpath the app won't start (until you add a /templates directory), even though there are templates available. </body>
		<created>2014-12-17 14:46:55</created>
		<closed>2014-12-18 07:12:38</closed>
	</bug>
	<bug>
		<id>2168</id>
		<title>SkipPatternJarScanner skips TLD tag scanning for joda-time-jsptags library</title>
		<body>It seems that the `SkipPatternJarScanner.java` includes `add("joda-time-*.jar");` which also explicitly ignores the following lib which contains tag library definition file for joda time jsptags - http://joda-time.sourceforge.net/contrib/jsptags/.  The jar name is `joda-time-jsptags.jar` which is automatically skipped due to the similar name of the `joda-time-*.jar` library naming.  For the moment, I've got around this by uploading a renamed jar to our repo manager which fixed it for us, but it might throw errors for others. </body>
		<created>2014-12-16 12:08:02</created>
		<closed>2014-12-16 17:33:00</closed>
	</bug>
	<bug>
		<id>2149</id>
		<title>Logback problem on - Spring Boot 1.2.0 - Websphere Liberty Profile 8.5.5.x</title>
		<body>Hi I encountered strange problem on spring boot 1.2.0 (This happens also for Spring boot 1.1.0 ).  It is not possible to start spring boot application on Websphere Liberty Profile 8.5.5.x as WAR application.  I created minimal spring boot app, and tried to start it on Liberty Profile, but app won't start. After little bit of investigation I found ffdc log with  this  ```  java.lang.NullPointerException     at org.springframework.boot.logging.logback.LogbackLoggingSystem.getLoggerContext(LogbackLoggingSystem.java:142)     at org.springframework.boot.logging.logback.LogbackLoggingSystem.getLogger(LogbackLoggingSystem.java:134)     at org.springframework.boot.logging.logback.LogbackLoggingSystem.beforeInitialize(LogbackLoggingSystem.java:86)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationStartedEvent(LoggingApplicationListener.java:129)     at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:121)     at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:100)     at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:54)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:278)     at org.springframework.boot.context.web.SpringBootServletInitializer.run(SpringBootServletInitializer.java:117)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:108)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:68)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at com.ibm.ws.webcontainer.webapp.WebApp.initializeServletContainerInitializers(WebApp.java:2471)     at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:1034)     at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:6342)     at com.ibm.ws.webcontainer.osgi.DynamicVirtualHost.startWebApp(DynamicVirtualHost.java:446)     at com.ibm.ws.webcontainer.osgi.DynamicVirtualHost.startWebApplication(DynamicVirtualHost.java:441)     at com.ibm.ws.webcontainer.osgi.WebContainer.startWebApplication(WebContainer.java:761)     at com.ibm.ws.webcontainer.osgi.WebContainer.startModule(WebContainer.java:739)     at com.ibm.ws.app.manager.web.internal.WebModuleHandlerImpl.deployModule(WebModuleHandlerImpl.java:106)     at com.ibm.ws.app.manager.module.internal.DeployedAppInfoBase.deployModule(DeployedAppInfoBase.java:538)     at com.ibm.ws.app.manager.module.internal.DeployedAppInfoBase.deployModules(DeployedAppInfoBase.java:457)     at com.ibm.ws.app.manager.module.internal.DeployedAppInfoBase.deployApp(DeployedAppInfoBase.java:411)     at com.ibm.ws.app.manager.war.internal.WARApplicationHandlerImpl.install(WARApplicationHandlerImpl.java:73)     at com.ibm.ws.app.manager.internal.statemachine.StartAction.execute(StartAction.java:139)     at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.enterState(ApplicationStateMachineImpl.java:1166)     at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.run(ApplicationStateMachineImpl.java:779)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) ```  It looks like this block off code is the problem   ``` Java         Assert.isInstanceOf(LoggerContext.class, factory, String.format(                 "LoggerFactory is not a Logback LoggerContext but Logback is on "                         + "the classpath. Either remove Logback or the competing "                         + "implementation (%s loaded from %s). If you are using "                         + "Weblogic you will need to add 'org.slf4j' to "                         + "prefer-application-packages in WEB-INF/weblogic.xml",                 factory.getClass(), factory.getClass().getProtectionDomain()                         .getCodeSource().getLocation())); ```  in debug session it looks like factory.getClass().getProtectionDomain() .getCodeSource() is null.  If I remove logback from maven model  app starts  ``` xml &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;                     &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt; ```  Any idea why this happens and how to fix it? </body>
		<created>2014-12-14 19:05:26</created>
		<closed>2014-12-14 21:49:09</closed>
	</bug>
	<bug>
		<id>2148</id>
		<title>Default CharacterEncodingFilter not ordered correctly</title>
		<body>As of 1.2.0 Boot ships with a default `CharacterEncodingFilter` registered by `HttpEncodingAutoConfiguration`. The bean definition for that is annotated with `@Order(Ordered.HIGHEST_PRECEDENCE)` but unfortunately this declaration never gets evaluated as the component triggering the sorting only acts on the bean instance (see `ServletContextInitializerBeans.addAsRegistrationBean(…)` for the relevant code section).   This causes issues with the `HiddenHttpMethodFilter`. If this one is registered first, it already accesses the request parameters before the encoding is enforced by the `CharacterEncodingFilter` and the request data is already in the wrong format.  Generally speaking, I don't think `@Order(…)` annotations are supported on bean definitions as the `BeanDefinition` API doesn't allow configuring an order programatically.  I think a workaround would be to create a custom sub-class that additionally implements `Ordered` and returns `Ordered.HIGHEST_PRECEDENCE` for the calls to `getOrder()`. </body>
		<created>2014-12-14 17:23:35</created>
		<closed>2014-12-15 12:53:34</closed>
	</bug>
	<bug>
		<id>2147</id>
		<title>HAL not set as default in 1.2.0</title>
		<body>In Spring Boot 1.1.10 the default hateoas format is HAL as long as spring-hateoas is included in the classpath (According to the doc and real life experience). This is no longer the case and I had to add both `@EnableWebMvc` and `@EnableHypermediaSupport(type= {EnableHypermediaSupport.HypermediaType.HAL})` to my application in order to get HAL.   Is this intended behaviour or a bug? Looking at `spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java` it seems a bug has been fixed for another issue (https://github.com/spring-projects/spring-boot/issues/1729). Would this fix also fix this HAL problem? </body>
		<created>2014-12-14 12:02:09</created>
		<closed>2014-12-23 04:36:07</closed>
	</bug>
	<bug>
		<id>2143</id>
		<title>Custom banner.txt will not print in 1.2.0</title>
		<body>After upgrading I find that my custom banner.txt is not displayed anymore  It seems to be an classloader issue with the default package.  I basically see this warning  ``` java.lang.NullPointerException: null     at org.springframework.boot.ResourceBanner.getApplicationVersion(ResourceBanner.java:102)     at org.springframework.boot.ResourceBanner.getVersionsMap(ResourceBanner.java:91)     at org.springframework.boot.ResourceBanner.getVersionResolver(ResourceBanner.java:85)     at org.springframework.boot.ResourceBanner.getPropertyResolvers(ResourceBanner.java:79)     at org.springframework.boot.ResourceBanner.printBanner(ResourceBanner.java:63)     at org.springframework.boot.SpringApplication.printBanner(SpringApplication.java:482)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:289)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:961)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:950)     at MyApplication.main(MyApplication.java:48) ```  So looking at the code, it seems that it tries to read the Application Version using my own `MyApplication` class as the package information class.  This fails here, as the class is in the default package (no package actually). when I move it to some other package it works again.  Section 14.1 Using the “default” package, of the reference guide discourages this, but it does not disallow this. </body>
		<created>2014-12-12 21:35:25</created>
		<closed>2014-12-14 21:52:43</closed>
	</bug>
	<bug>
		<id>2140</id>
		<title>spring loaded doesn't work with spring-boot-maven-plugin 1.2.0</title>
		<body>Spring Boot 1.2.0 + Spring Boot Maven Plugin 1.2.0 + Spring Loaded 1.2.1 doesn't reload well. Spring Boot 1.2.0 + Spring Boot Maven Plugin **1.1.9** + Spring Loaded 1.2.1 can reload well.  I haven't tried with gradle plugin yet. ## reproductive sample ### Spring Boot 1.2.0 + Spring Boot Maven Plugin 1.2.0 + Spring Loaded 1.2.1  ``` bash $ mvn archetype:generate -B\   -DarchetypeGroupId=am.ik.archetype\   -DarchetypeArtifactId=spring-boot-blank-archetype\   -DarchetypeVersion=1.0.1\   -DgroupId=com.example\   -DartifactId=demo\   -Dversion=1.0.0-SNAPSHOT   (This is just my simple template project)   $ cd demo  $ mvm spring-boot:run ```   in another tab  ``` bash $ touch target/classes/com/example/App.class ```  Nothing happened. ### Spring Boot 1.2.0 + Spring Boot Maven Plugin 1.1.9 + Spring Loaded 1.2.1  Open and edit pom.xml as follows:  ``` xml &lt;plugin&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;1.1.9.RELEASE&lt;/version&gt;&lt;!-- add --&gt;     &lt;!-- ommited --&gt; &lt;/plugin&gt; ```  Restart  ``` bash  $ mvm spring-boot:run ```   in another tab  ``` bash $ touch target/classes/com/example/App.class ```  Reloaded!  ``` bash 2014-12-13 05:04:59.731  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto java.lang.String com.example.HelloController.hello() 2014-12-13 05:04:59.731  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/calc],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto com.example.HelloController$Result com.example.HelloController.calc(int,int) 2014-12-13 05:04:59.734  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-12-13 05:04:59.734  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2014-12-13 05:04:59.753  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto java.lang.String com.example.HelloController.hello() 2014-12-13 05:04:59.753  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/calc],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto com.example.HelloController$Result com.example.HelloController.calc(int,int) 2014-12-13 05:04:59.755  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-12-13 05:04:59.755  INFO   --- [Loader@58644d46] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) ``` </body>
		<created>2014-12-12 20:09:16</created>
		<closed>2014-12-15 21:25:30</closed>
	</bug>
	<bug>
		<id>2125</id>
		<title>Root log4j logger levels are not restored during initialization</title>
		<body>Up to 1.1.9.RELEASE spring-boot was able to find log4j2.xml itself from src/main/resources. It was picked up and loaded correctly by just dropping the required maven dependencies in.  Since 1.2.0.RELEASE this is not the case anymore. I have to explicit set   ``` logging.config=classpath:log4j2.xml ```  to load it.  Of course I configured the maven pom as advised:  ```           &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                     &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;          &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;         &lt;/dependency&gt; ```  Root cause is probably in AbstractLoggingSystem.initialize(), which has been massively refactored between 1.1.9 and 1.2.0. </body>
		<created>2014-12-11 19:06:39</created>
		<closed>2014-12-17 19:59:48</closed>
	</bug>
	<bug>
		<id>2124</id>
		<title>WebSecurityConfigurerAdapter ClassNotFoundException after upgrade to 1.2.0</title>
		<body>My Spring boot application is very simple restful web app. After upgrade to 1.2.0.RELEASE it fails to start (mvn spring-boot:run):  ``` java org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'handlerMapping' defined in org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'handlerMapping' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:602) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762) [spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.createChildManagementContext(EndpointWebMvcAutoConfiguration.java:216) [spring-boot-actuator-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.afterSingletonsInstantiated(EndpointWebMvcAutoConfiguration.java:140) [spring-boot-actuator-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:782) [spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480) [spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:961) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:950) [spring-boot-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at com.ps.sb.restfulrepo.Application.main(Application.java:14) [classes/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_72]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_72]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_72]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_72]     at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:408) [spring-boot-maven-plugin-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at java.lang.Thread.run(Thread.java:745) [na:1.7.0_72] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerMapping]: Factory method 'handlerMapping' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     ... 29 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter     at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.7.0_72]     at java.lang.ClassLoader.defineClass(ClassLoader.java:800) ~[na:1.7.0_72]     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.7.0_72]     at java.net.URLClassLoader.defineClass(URLClassLoader.java:449) ~[na:1.7.0_72]     at java.net.URLClassLoader.access$100(URLClassLoader.java:71) ~[na:1.7.0_72]     at java.net.URLClassLoader$1.run(URLClassLoader.java:361) ~[na:1.7.0_72]     at java.net.URLClassLoader$1.run(URLClassLoader.java:355) ~[na:1.7.0_72]     at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_72]     at java.net.URLClassLoader.findClass(URLClassLoader.java:354) ~[na:1.7.0_72]     at java.lang.ClassLoader.loadClass(ClassLoader.java:425) ~[na:1.7.0_72]     at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ~[na:1.7.0_72]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.injectIntoSecurityFilter(EndpointWebMvcChildContextConfiguration.java:157) ~[spring-boot-actuator-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration.handlerMapping(EndpointWebMvcChildContextConfiguration.java:144) ~[spring-boot-actuator-1.2.0.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration$$EnhancerBySpringCGLIB$$96c02f4a.CGLIB$handlerMapping$1(&lt;generated&gt;) ~[spring-core-4.1.3.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration$$EnhancerBySpringCGLIB$$96c02f4a$$FastClassBySpringCGLIB$$486f9427.invoke(&lt;generated&gt;) ~[spring-core-4.1.3.RELEASE.jar:1.2.0.RELEASE]     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309) ~[spring-context-4.1.3.RELEASE.jar:4.1.3.RELEASE]     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration$$EnhancerBySpringCGLIB$$96c02f4a.handlerMapping(&lt;generated&gt;) ~[spring-core-4.1.3.RELEASE.jar:1.2.0.RELEASE]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_72]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_72]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_72]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_72]     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.1.3.RELEASE.jar:4.1.3.RELEASE]     ... 30 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter     at java.net.URLClassLoader$1.run(URLClassLoader.java:366) ~[na:1.7.0_72]     at java.net.URLClassLoader$1.run(URLClassLoader.java:355) ~[na:1.7.0_72]     at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_72]     at java.net.URLClassLoader.findClass(URLClassLoader.java:354) ~[na:1.7.0_72]     at java.lang.ClassLoader.loadClass(ClassLoader.java:425) ~[na:1.7.0_72]     at java.lang.ClassLoader.loadClass(ClassLoader.java:358) ~[na:1.7.0_72]     ... 53 common frames omitted ```  What would be quick fix to pom.xml to inlcude proper dependency? Thank you! </body>
		<created>2014-12-11 17:35:01</created>
		<closed>2014-12-12 10:54:01</closed>
	</bug>
	<bug>
		<id>2121</id>
		<title>logging.path not mapped to LOG_PATH in 1.2</title>
		<body>In  1.1.9.RELEASE logging.path given in application.properties was mapped to LOG_PATH system property in LoggingApplicationListener. This made LOG_PATH available for usage in custom logging config file ([example](https://github.com/HSLdevcom/parkandrideAPI/blob/master/application/src/main/resources/logback-parkandrideapi-base.xml)).  In 1.2.0.RELEASE the mapping (ENVIRONMENT_SYSTEM_PROPERTY_MAPPING in LoggingApplicationListener of 1.1.9.RELEASE) seem to have been removed, causing LOG_PATH not being available in custom logging config file.  Is the above described change in behavior intentional?  Also reported in https://github.com/spring-projects/spring-boot-issues/issues/25 </body>
		<created>2014-12-11 13:02:54</created>
		<closed>2014-12-13 03:29:10</closed>
	</bug>
	<bug>
		<id>2119</id>
		<title>PID not showing in application logs since 1.2.0 upgrade</title>
		<body>Since upgrading from 1.1.9 to 1.2.0 the application logs are not showing the process id. ### 1.1.9  ``` 2014-12-10 14:24:25.350  INFO 9274 [http-nio-8080-exec-3] ``` ### 1.2.0  ``` 2014-12-11 12:22:54.285  INFO ${PID:- } [http-nio-8081-exec-3] ```  Note the **${PID:- }** </body>
		<created>2014-12-11 12:28:49</created>
		<closed>2014-12-13 03:29:11</closed>
	</bug>
	<bug>
		<id>2118</id>
		<title>Funky meta-data name for upper case property</title>
		<body>If for some reason you have a getter in all upper case, the generated lower-case counter part does not look right: `getFOOBAR()` becomes `f-o-o-b-a-r` </body>
		<created>2014-12-11 12:14:40</created>
		<closed>2014-12-12 13:18:10</closed>
	</bug>
	<bug>
		<id>2117</id>
		<title>Since upgrading to 1.2.0 File Logging Requires "logging.path" property to be set.</title>
		<body>Previously (1.1.9) I was able to just specify the "logging.file" property to achieve file logging to the working directory. Since upgrading to 1.2 file logging no longer works. I know that the default changed in 1.2 to switch it off. But the docs say:  &gt; The default logging configuration has been updated with Spring Boot 1.2 to no longer write log files. If  you want file output, you can use the logging.path **and/or** logging.file properties  This appears to be inaccurate. The only way I can get file logging is by specifying **both** properties, not just logging.file as I could before.  So whereas before I could do:  ``` logging.file=app.log ```  I now need:  ``` logging.path=. logging.file=app.log ``` </body>
		<created>2014-12-11 11:02:44</created>
		<closed>2014-12-13 03:29:11</closed>
	</bug>
	<bug>
		<id>2115</id>
		<title>Actuator - unable to disable DataSourceHealthIndicator with 1.2.0</title>
		<body>hi,  in 1.1.9 DataSourcesHealthIndicatorConfiguration is annotated with @ConditionalOnExpression("${health.db.enabled:true}")  in 1.2.0 its annotated with @ConditionalOnProperty(prefix = "management.health.db", name = "enabled", matchIfMissing = true)  so it seems I have to change the configuration from health.db.enabled=false to management.health.db.enabled=false right?  However on startup this leads to:  ``` nested exception is org.springframework.beans.NotReadablePropertyException: Invalid property 'health[db][enabled]' of bean class [org.springframework.boot.actuate.autoconfigure.ManagementServerProperties]: Bean property 'health[db][enabled]' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter?  as ManagementServerProperties does not ignoreUnknownFields: ConfigurationProperties(prefix = "management", ignoreUnknownFields = false) ```  ty, daniel </body>
		<created>2014-12-11 10:11:14</created>
		<closed>2014-12-11 14:42:32</closed>
	</bug>
	<bug>
		<id>2112</id>
		<title>spring-boot-remote-shell + spring-security-config w/o Spring MVC exception</title>
		<body>I experienced a strange behaviour when spring-bootifying an old CLI Java program. The application is a server component, which runs in the intranet. Apart from all else, it provides an AuthenticationProvider to access an LDAP Server that is only accessable from the intranet, hence, it has a dependency to `spring-security-config`.  When I added the `spring-boot-remote-shell`, I ended up with an exception:  ``` Java java.lang.IllegalStateException: Could not evaluate condition on org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration#simpleAuthenticationProperties due to internal class not found. This can happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)`  [...]  Caused by: java.lang.ClassNotFoundException: org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping ```  Finally, I created a working example, that has none of my legacy code. In fact, almost no code at all: https://github.com/nobecutan/spring-boot-bug </body>
		<created>2014-12-11 00:26:00</created>
		<closed>2014-12-16 00:36:24</closed>
	</bug>
	<bug>
		<id>2101</id>
		<title>NullPointerException in /mappings </title>
		<body>Happens with https://github.com/spring-cloud-samples/customers-stores/tree/master/customers-stores-ui  ``` java.lang.NullPointerException: null     at java.util.Collections$UnmodifiableMap.&lt;init&gt;(Collections.java:1506)     at java.util.Collections.unmodifiableMap(Collections.java:1493)     at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerMap(AbstractUrlHandlerMapping.java:332)     at org.springframework.boot.actuate.endpoint.RequestMappingEndpoint.extractHandlerMappings(RequestMappingEndpoint.java:112)     at org.springframework.boot.actuate.endpoint.RequestMappingEndpoint.invoke(RequestMappingEndpoint.java:78)     at org.springframework.boot.actuate.endpoint.RequestMappingEndpoint.invoke(RequestMappingEndpoint.java:39)     at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:56)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137)     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706)     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:618)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:288)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:100)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:90)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)     at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-09 23:16:26</created>
		<closed>2014-12-10 11:34:15</closed>
	</bug>
	<bug>
		<id>2097</id>
		<title>UndertowEmbeddedServletContainerFactory doesn't bind the address</title>
		<body>Both Jetty and Tomcat respect the address. Undertow doesn't. </body>
		<created>2014-12-09 17:48:30</created>
		<closed>2014-12-09 18:50:34</closed>
	</bug>
	<bug>
		<id>2094</id>
		<title>If you have a dependency on a POM in a Groovy script, then the built JAR fails to run</title>
		<body>If one of the dependencies of your Groovy script is a POM then the POM gets packaged into 'lib/' inside the built JAR file which it then tries to read as a JAR causing:  ```  java.io.IOException: Unable to open nested jar file 'lib/grails-dependencies-3.0.0.BUILD-SNAPSHOT.pom' at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:346) at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:108) at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchives(JarFileArchive.java:92) at org.springframework.boot.loader.ExecutableArchiveLauncher.getClassPathArchives(ExecutableArchiveLauncher.java:73) at org.springframework.boot.loader.Launcher.launch(Launcher.java:60) ``` </body>
		<created>2014-12-09 14:26:08</created>
		<closed>2014-12-09 22:19:14</closed>
	</bug>
	<bug>
		<id>2087</id>
		<title>Resolved placeholders in @ConfigurationProperties prefix wont be correct in meta-data</title>
		<body>See commit 3ad43e0d445d15f03f92f758ced5ee5c64484806 </body>
		<created>2014-12-08 15:39:04</created>
		<closed>2014-12-08 21:59:00</closed>
	</bug>
	<bug>
		<id>2082</id>
		<title>Unable to override "request" scope using CustomScopeConfigurer nor ApplicationContextInitializer</title>
		<body>Affects: 1.1.9.RELEASE.  This `AppInitializer` worked in plain Spring + web.xml :  ``` public class RequestOrCommandAppInitializer implements         ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; {      @Override     public void initialize(ConfigurableApplicationContext applicationContext) {             final CustomScopeConfigurer scopeConfigurer = new CustomScopeConfigurer();             scopeConfigurer.setScopes(ImmutableMap.&lt;String, Object&gt;of(WebApplicationContext.SCOPE_REQUEST, new RequestOrCommandScope()));             applicationContext.addBeanFactoryPostProcessor(scopeConfigurer);     }  } ```  However in Spring Boot, it never worked. All request beans seem to always use the "original" Spring RequestScope.  I tried doing this, but still doesn't work:  ``` @Bean @Order(Ordered.LOWEST_PRECEDENCE) public static CustomScopeConfigurer requestOrCommandScopeConfigurer() {     final CustomScopeConfigurer scopeConfigurer = new CustomScopeConfigurer();     scopeConfigurer.setScopes(ImmutableMap.&lt;String, Object&gt;of(WebApplicationContext.SCOPE_REQUEST, new RequestOrCommandScope()));     return scopeConfigurer; } ```  Stacktrace confirms this, my custom `request` scope override (`RequestOrCommandScope`) is never called by Spring.  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sysConfig' defined in class id.co.bippo.common.BippoSysConfigConfig: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [id.co.bippo.common.BippoSysConfig]: Factory method 'sysConfig' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.tenantRef': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:602) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:216) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:350) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.soluvas.commons.shell.ExtCommandSupport.getBean(ExtCommandSupport.java:157) ~[classes/:na]     at id.co.bippo.promotion.shell.PromoMigrateFromMongoCommand.doExecute(PromoMigrateFromMongoCommand.java:49) ~[classes/:na]     at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.soluvas.commons.shell.ExtCommandSupport.execute(ExtCommandSupport.java:86) ~[classes/:na]     at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.karaf.shell.console.jline.Console.run(Console.java:172) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.doRun(BlastShellFactoryImpl.java:130) [blast-shell-karaf-ssh-0.13.jar:na]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.run(BlastShellFactoryImpl.java:125) [blast-shell-karaf-ssh-0.13.jar:na] Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [id.co.bippo.common.BippoSysConfig]: Factory method 'sysConfig' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.tenantRef': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:216) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:350) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.soluvas.commons.shell.ExtCommandSupport.getBean(ExtCommandSupport.java:157) ~[classes/:na]     at id.co.bippo.promotion.shell.PromoMigrateFromMongoCommand.doExecute(PromoMigrateFromMongoCommand.java:49) ~[classes/:na]     at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.soluvas.commons.shell.ExtCommandSupport.execute(ExtCommandSupport.java:86) ~[classes/:na]     at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.karaf.shell.console.jline.Console.run(Console.java:172) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.doRun(BlastShellFactoryImpl.java:130) [blast-shell-karaf-ssh-0.13.jar:na]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.run(BlastShellFactoryImpl.java:125) [blast-shell-karaf-ssh-0.13.jar:na]     ... 24 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.tenantRef': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:351) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) ~[spring-aop-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:187) ~[spring-aop-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at com.sun.proxy.$Proxy92.getTenantId(Unknown Source) ~[na:na]     at org.soluvas.commons.tenant.TenantBeans.getCurrent(TenantBeans.java:346) ~[classes/:na]     at id.co.bippo.common.BippoSysConfigConfig.sysConfig(BippoSysConfigConfig.java:91) ~[classes/:na]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba.CGLIB$sysConfig$2(&lt;generated&gt;) ~[na:na]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba$$FastClassBySpringCGLIB$$91c046ce.invoke(&lt;generated&gt;) ~[na:na]     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:312) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba.sysConfig(&lt;generated&gt;) ~[na:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_25]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_25]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_25]     at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_25]     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:216) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:350) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.soluvas.commons.shell.ExtCommandSupport.getBean(ExtCommandSupport.java:157) ~[classes/:na]     at id.co.bippo.promotion.shell.PromoMigrateFromMongoCommand.doExecute(PromoMigrateFromMongoCommand.java:49) ~[classes/:na]     at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.soluvas.commons.shell.ExtCommandSupport.execute(ExtCommandSupport.java:86) ~[classes/:na]     at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.karaf.shell.console.jline.Console.run(Console.java:172) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.doRun(BlastShellFactoryImpl.java:130) [blast-shell-karaf-ssh-0.13.jar:na]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.run(BlastShellFactoryImpl.java:125) [blast-shell-karaf-ssh-0.13.jar:na]     ... 25 more Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.     at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131) ~[spring-web-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:41) ~[spring-web-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:336) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) ~[spring-aop-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:187) ~[spring-aop-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at com.sun.proxy.$Proxy92.getTenantId(Unknown Source) ~[na:na]     at org.soluvas.commons.tenant.TenantBeans.getCurrent(TenantBeans.java:346) ~[classes/:na]     at id.co.bippo.common.BippoSysConfigConfig.sysConfig(BippoSysConfigConfig.java:91) ~[classes/:na]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba.CGLIB$sysConfig$2(&lt;generated&gt;) ~[na:na]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba$$FastClassBySpringCGLIB$$91c046ce.invoke(&lt;generated&gt;) ~[na:na]     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:312) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at id.co.bippo.common.BippoSysConfigConfig$$EnhancerBySpringCGLIB$$f2ba35ba.sysConfig(&lt;generated&gt;) ~[na:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_25]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_25]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_25]     at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_25]     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:591) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:216) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:350) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331) ~[spring-beans-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968) ~[spring-context-4.1.2.RELEASE.jar:4.1.2.RELEASE]     at org.soluvas.commons.shell.ExtCommandSupport.getBean(ExtCommandSupport.java:157) ~[classes/:na]     at id.co.bippo.promotion.shell.PromoMigrateFromMongoCommand.doExecute(PromoMigrateFromMongoCommand.java:49) ~[classes/:na]     at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.soluvas.commons.shell.ExtCommandSupport.execute(ExtCommandSupport.java:86) ~[classes/:na]     at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at org.apache.karaf.shell.console.jline.Console.run(Console.java:172) ~[org.apache.karaf.shell.console-2.2.9.jar:na]     at java.lang.Thread.run(Thread.java:745) [na:1.8.0_25]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.doRun(BlastShellFactoryImpl.java:130) [blast-shell-karaf-ssh-0.13.jar:na]     at blast.shell.karaf.ssh.BlastShellFactoryImpl$ShellImpl$2.run(BlastShellFactoryImpl.java:125) [blast-shell-karaf-ssh-0.13.jar:na]     ... 41 more ``` </body>
		<created>2014-12-08 05:52:56</created>
		<closed>2015-01-06 03:34:18</closed>
	</bug>
	<bug>
		<id>2075</id>
		<title>spring-boot-cli/sample/jms.groovy doesn't work with 1.1.9.RELEASE</title>
		<body>When trying to use @EnableJmsMessaging (like in https://github.com/spring-projects/spring-boot/blob/v1.1.9.RELEASE/spring-boot-cli/samples/jms.groovy), this cryptic message appears:  ``` $ spring run jms.groovy  startup failed: General error during conversion: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact ::jar: in local (file:/Users/gturnquist/src/spring-boot/spring-boot-cli/samples/repository)  org.springframework.boot.cli.compiler.grape.DependencyResolutionFailedException: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact ::jar: in local (file:/Users/gturnquist/src/spring-boot/spring-boot-cli/samples/repository)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.resolve(AetherGrapeEngine.java:223)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.grab(AetherGrapeEngine.java:113)     at groovy.grape.Grape.grab(Grape.java:163)     at groovy.grape.GrabAnnotationTransformation.visit(GrabAnnotationTransformation.java:360)     at org.codehaus.groovy.transform.ASTTransformationVisitor$3.call(ASTTransformationVisitor.java:319)     at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:923)     at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:585)     at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:561)     at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:538)     at org.springframework.boot.cli.compiler.GroovyCompiler.compile(GroovyCompiler.java:197)     at org.springframework.boot.cli.command.run.SpringApplicationRunner.compileAndRun(SpringApplicationRunner.java:95)     at org.springframework.boot.cli.command.run.RunCommand$RunOptionHandler.run(RunCommand.java:108)     at org.springframework.boot.cli.command.options.OptionHandler.run(OptionHandler.java:92)     at org.springframework.boot.cli.command.OptionParsingCommand.run(OptionParsingCommand.java:53)     at org.springframework.boot.cli.command.CommandRunner.run(CommandRunner.java:217)     at org.springframework.boot.cli.command.CommandRunner.runAndHandleErrors(CommandRunner.java:170)     at org.springframework.boot.cli.SpringCli.main(SpringCli.java:51)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:744) Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact ::jar: in local (file:/Users/gturnquist/src/spring-boot/spring-boot-cli/samples/repository)     at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:405)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.resolve(AetherGrapeEngine.java:214)     ... 22 more Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact ::jar: in local (file:/Users/gturnquist/src/spring-boot/spring-boot-cli/samples/repository)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:462)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:264)     at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:388)     ... 23 more Caused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact ::jar: in local (file:/Users/gturnquist/src/spring-boot/spring-boot-cli/samples/repository)     at org.eclipse.aether.connector.basic.ArtifactTransportListener.transferFailed(ArtifactTransportListener.java:39)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:355)     at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$DirectExecutor.execute(BasicRepositoryConnector.java:581)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector.get(BasicRepositoryConnector.java:249)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.performDownloads(DefaultArtifactResolver.java:538)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:439)     ... 25 more  1 error ``` </body>
		<created>2014-12-06 18:08:08</created>
		<closed>2014-12-08 07:45:20</closed>
	</bug>
	<bug>
		<id>2072</id>
		<title>NoSuchBeanDefinitionException stops simple application deployment to WildFly</title>
		<body>``` [INFO] [talledLocalContainer] Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.boot.autoconfigure.jms.JmsProperties] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} [INFO] [talledLocalContainer]   at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1308) [INFO] [talledLocalContainer]   at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1054) [INFO] [talledLocalContainer]   at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:949) [INFO] [talledLocalContainer]   at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533) [INFO] [talledLocalContainer]   ... 27 more [INFO] [talledLocalContainer]  ``` </body>
		<created>2014-12-05 23:00:04</created>
		<closed>2014-12-06 07:31:17</closed>
	</bug>
	<bug>
		<id>2065</id>
		<title>Undertow ContextPath Empty</title>
		<body>I have a problem going up my application in the undertow, the cookie gets empty path so users can not stay in the same session.   believe the default contextPath in Undertow should be "/" instead of "." I found some links I found about this same bug what happened in wildfly.  http://lists.jboss.org/pipermail/undertow-dev/2014-June/000847.html  https://github.com/wildfly/wildfly/commit/fe642cd253dc91febed2f763a48853aa200a1bd5 </body>
		<created>2014-12-05 11:05:33</created>
		<closed>2014-12-08 03:28:25</closed>
	</bug>
	<bug>
		<id>2058</id>
		<title>Embedded Jetty 9 throws java.lang.IllegalArgumentException: Inappropriate listener </title>
		<body>Hi, I'm using 1.2.0.RC2  and have problem with Jetty 9.   I got  ``` java.lang.IllegalArgumentException: Inappropriate listener type ... at org.eclipse.jetty.webapp.WebAppContext$Context.checkListener(WebAppContext.java:1445) ```  There was bug #1186, and it looks it should be fixed in RC2.  Anyway, I've tried also to use [Jetty 8](http://docs.spring.io/spring-boot/docs/1.2.0.RC2/reference/htmlsingle/#howto-use-jetty-8) but then I end up with missing jar from Your repo http://repo.spring.io/snapshot or http://repo.spring.io/milestone  ``` [ERROR] Failed to execute goal on project .....:  Could not resolve dependencies for project ___________:  The following artifacts could not be resolved:  org.eclipse.jetty.websocket:websocket-server:jar:8.1.15.v20140411,  org.eclipse.jetty.websocket:javax-websocket-server-impl:jar:8.1.15.v20140411:  Could not find artifact org.eclipse.jetty.websocket:websocket-server:jar:8.1.15.v20140411 ```  BR Michal  </body>
		<created>2014-12-04 11:22:22</created>
		<closed>2014-12-09 17:58:15</closed>
	</bug>
	<bug>
		<id>2046</id>
		<title>App that depends on spring-security-core, but not spring-security-config, fails to start</title>
		<body>If an app depends on `spring-security-core`, and doesn't also depend on `spring-security-config`, it will fail to start:  ``` org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load bean class: ; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/security/config/annotation/authentication/configurers/GlobalAuthenticationConfigurerAdapter.class] cannot be opened because it does not exist     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:391)     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:166)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:305)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:611)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at demo.Application.main(Application.java:14) Caused by: java.io.FileNotFoundException: class path resource [org/springframework/security/config/annotation/authentication/configurers/GlobalAuthenticationConfigurerAdapter.class] cannot be opened because it does not exist     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)     at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:50)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98)     at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93)     at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:566)     at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getSuperClass(ConfigurationClassParser.java:741)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:285)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:219)     at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:440)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:259)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:219)     at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:440)     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:388)     ... 12 common frames omitted ```  `SecurityAutoConfiguration` needs to be conditional on `GlobalAuthenticationConfigurerAdapter.class` </body>
		<created>2014-12-02 11:16:43</created>
		<closed>2014-12-02 11:23:10</closed>
	</bug>
	<bug>
		<id>2043</id>
		<title>WebSocketAutoConfigurationTests use 8080 so they're prone to failing due to a port clash</title>
		<body></body>
		<created>2014-12-02 09:40:13</created>
		<closed>2014-12-02 09:47:04</closed>
	</bug>
	<bug>
		<id>2033</id>
		<title>AuthenticationEventPublisher may not always be automatically added</title>
		<body>There is no test for this, but I think it's quite likely in practice that the `LazyAuthenticationManager` will be used in `AuthenticationManagerConfiguration` and in that case there is no automatic injection of an event publisher. </body>
		<created>2014-12-01 15:36:02</created>
		<closed>2014-12-01 18:07:06</closed>
	</bug>
	<bug>
		<id>2015</id>
		<title>/health is not accessible anonymously</title>
		<body>The changes in 3bb598a421dd65c0ea67c94ff00f7265d71508ec mean that when management security is enabled the health endpoint can no longer be accessed anonymously </body>
		<created>2014-11-27 14:40:28</created>
		<closed>2014-11-27 14:52:20</closed>
	</bug>
	<bug>
		<id>2014</id>
		<title>If a @ConfigurationProperties class is @Deprecated, all the properties should also be deprecated</title>
		<body>The annotation-processor correctly add the `deprecated` flag if the field is `@Deprecated` but it doesn't do it if the class is `@Deprecated`. </body>
		<created>2014-11-27 13:51:40</created>
		<closed>2014-11-27 14:39:33</closed>
	</bug>
	<bug>
		<id>2008</id>
		<title>Setting spring.data.mongodb.port has no effect unless spring.data.mongodb.host is configured too</title>
		<body>The documentation states:  &gt; You can set `spring.data.mongodb.uri` property to change the `url`, or alternatively specify a `host`/`port`  However, if you just set the port it has no effect and the uri is used instead. </body>
		<created>2014-11-26 13:47:05</created>
		<closed>2014-11-26 17:54:33</closed>
	</bug>
	<bug>
		<id>1997</id>
		<title>EndpointMvcIntegrationTests envEndpointNotHidden fails intermittently</title>
		<body>https://build.spring.io/browse/BOOT-PUB-1975 </body>
		<created>2014-11-25 10:43:42</created>
		<closed>2014-11-25 14:22:15</closed>
	</bug>
	<bug>
		<id>1996</id>
		<title>No default value for array/collection in generated meta-data</title>
		<body>If a meta-data item is of type array and has a default value, it is not written in the generated metadata.  For instance `shell.auth.spring.roles`  ``` json     {       "name": "shell.auth.spring.roles",       "type": "java.lang.String[]",       "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SpringAuthenticationProperties"     }, ``` </body>
		<created>2014-11-25 09:25:04</created>
		<closed>2014-12-03 15:19:14</closed>
	</bug>
	<bug>
		<id>1988</id>
		<title>Static web sample fails to load CSS and JavaScript when deployed to a context path other than /</title>
		<body>This is most likely to happen when deploying the sample to a standalone container but also affects embedded container deployment if server.context-path is customised in application.properties </body>
		<created>2014-11-24 10:36:38</created>
		<closed>2014-11-24 10:57:27</closed>
	</bug>
	<bug>
		<id>1986</id>
		<title>with 1.2.0.RC2 deployment in wildfly is broken</title>
		<body>when we try to deploy our spring-boot application war to a wildfly 8.1.0 server the application doesn't start. It seems that the Undertow autoconfiguration is triggered but it shouldn't  ``` 2014-11-24 02:42:11,426 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-12) MSC000001: Failed to start service jboss.undertow.deployment.default-server.default-host./steamstats: org.jboss.msc.service.StartException in service jbo ss.undertow.deployment.default-server.default-host./steamstats: Failed to start service                                                                                                                                                                at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1904) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]                                                                                                          at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [rt.jar:1.8.0_25]                                                                                                                                           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [rt.jar:1.8.0_25]                                                                                                                                           at java.lang.Thread.run(Thread.java:745) [rt.jar:1.8.0_25]                                                                                                                                                                             Caused by: java.lang.NoClassDefFoundError: org/xnio/SslClientAuthMode                                                                                                                                                                                  at java.lang.Class.getDeclaredMethods0(Native Method) [rt.jar:1.8.0_25]                                                                                                                                                                        at java.lang.Class.privateGetDeclaredMethods(Class.java:2693) [rt.jar:1.8.0_25]                                                                                                                                                                at java.lang.Class.getDeclaredMethods(Class.java:1967) [rt.jar:1.8.0_25]                                                                                                                                                                       at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:402)                                                                                         at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:332)                                                                                 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:924)                                                                           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)                                                                                                      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)                                                                                                        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)                                                                                                                                     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)                                                                                                                  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)                                                                                                                                       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)                                                                                                                                         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)                                                                                                          at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)                                                                                                         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)                                                                                                                                 at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)                                                                                                                     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)                                                                                                                                                              at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)                                                                                                                                                                  at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:143)                                                                                                                                            at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)                                                                                                        at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)                                                                                                                           at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)                                                                                                                             at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:179)                                                                                                                                                       at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:87)                                                                                                                         at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.start(UndertowDeploymentService.java:72)                                                                                                                                at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1948) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]                                                                                                 at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1881) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]                                                                                                          ... 3 more                                                                                                                                                                                                                             Caused by: java.lang.ClassNotFoundException: org.xnio.SslClientAuthMode from [Module "deployment.steamstats.war:main" from Service Module Loader]                                                                                                      at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:213) [jboss-modules.jar:1.3.3.Final]                                                                                                                                   at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:459) [jboss-modules.jar:1.3.3.Final]                                                                                                           at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:408) [jboss-modules.jar:1.3.3.Final]                                                                                                             at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:389) [jboss-modules.jar:1.3.3.Final]                                                                                                                    at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:134) [jboss-modules.jar:1.3.3.Final]                                                                                                                           ... 30 more                                                                                                                                                                                                                             2014-11-24 02:42:11,433 ERROR [org.jboss.as.controller.management-operation] (management-handler-thread - 1) JBAS014613: Operation ("deploy") failed - address: ([("deployment" =&gt; "steamstats.war")]) - failure description: {"JBAS014671: Fa iled services" =&gt; {"jboss.undertow.deployment.default-server.default-host./steamstats" =&gt; "org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./steamstats: Failed to start service              Caused by: java.lang.NoClassDefFoundError: org/xnio/SslClientAuthMode                                                                                                                                                                          Caused by: java.lang.ClassNotFoundException: org.xnio.SslClientAuthMode from [Module \"deployment.steamstats.war:main\" from Service Module Loader]"}}                                                                                     2014-11-24 02:42:11,433 ERROR [org.jboss.as.server] (management-handler-thread - 1) JBAS015870: Deploy of deployment "steamstats.war" was rolled back with the following failure message:                                                      {"JBAS014671: Failed services" =&gt; {"jboss.undertow.deployment.default-server.default-host./steamstats" =&gt; "org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./steamstats: Failed to start  service                                                                                                                                                                                             ``` </body>
		<created>2014-11-24 07:25:06</created>
		<closed>2014-11-24 10:46:41</closed>
	</bug>
	<bug>
		<id>1982</id>
		<title>/configprops errors out on missing bean (one that is clearly there in /beans)</title>
		<body>Getting a 500 with   ```  org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'resumeEndpoint' is defined     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:694)     at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1157)     at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:588)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(DefaultListableBeanFactory.java:591)     at org.springframework.context.support.AbstractApplicationContext.findAnnotationOnBean(AbstractApplicationContext.java:1082)     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extractPrefix(ConfigurationPropertiesReportEndpoint.java:214) ```  The /beans endpoint clearly shows that there is indeed a bean named "resumeEndpoint". I don't think it's in a parent context, but maybe we need to be careful of that anyway. </body>
		<created>2014-11-22 14:13:11</created>
		<closed>2014-11-23 11:18:07</closed>
	</bug>
	<bug>
		<id>1981</id>
		<title>Jersey doesn't seem to correctly inject dependencies into JAX-RS `Endpoint`s </title>
		<body>``` java  package demo;  import org.glassfish.jersey.jackson.JacksonFeature; import org.glassfish.jersey.server.ResourceConfig; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.jms.core.JmsTemplate; import org.springframework.stereotype.Component;  import javax.inject.Inject; import javax.persistence.*; import javax.transaction.Transactional; import javax.ws.rs.*; import javax.ws.rs.core.MediaType; import java.util.Collection; import java.util.logging.Logger;   @SpringBootApplication public class Application {      @Component     public static class JerseyConfig extends ResourceConfig {          public JerseyConfig() {             this.register(GreetingEndpoint.class);             this.register(JacksonFeature.class);         }     }      @Component     public static class Foo {        public String message( String i ){ return "Hi, " + i ; }      }      @Component     @Path("/hello")     @Produces({MediaType.APPLICATION_JSON})     public static class GreetingEndpoint {          @Autowired         private Foo foo;          @GET         @Path("/{name}")         public String get(@PathParam("name") String name) {             return this.foo.message( name );             // this.foo == null             // I also tried @Inject and I tried moving @Component Foo to a public top-level class.         }     }      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     } } ``` </body>
		<created>2014-11-22 12:06:28</created>
		<closed>2014-11-22 17:17:55</closed>
	</bug>
	<bug>
		<id>1975</id>
		<title>Inner class is defined as both a nested group and a property</title>
		<body>That's basically the reverse of #1971 - If a class has an inner class, this is detected as a nested group (as it should) but it's also defined as a property (it shouldn't!)  Example: `org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate` </body>
		<created>2014-11-21 18:05:36</created>
		<closed>2014-11-21 22:18:41</closed>
	</bug>
	<bug>
		<id>1972</id>
		<title>ManagementErrorEndpoint defines a useless @ConfigurationProperties</title>
		<body>`ManagementErrorEndpoint` has a `@ConfigurationProperties` with an `error` prefix. That prefix itself looks quite wrong and the class does not even define a property.   It's probably an outdated definition that should be removed. </body>
		<created>2014-11-21 16:08:22</created>
		<closed>2014-11-21 16:39:16</closed>
	</bug>
	<bug>
		<id>1971</id>
		<title>Enum defined as an inner class is considered as a sub-group</title>
		<body>If an `Enum` is defined as an inner class of a `@ConfigurationProperties` class, the metadata harvester consider it is a sub-group.   Example: `JerseyProperties$Type` </body>
		<created>2014-11-21 14:56:57</created>
		<closed>2014-11-21 16:21:17</closed>
	</bug>
	<bug>
		<id>1968</id>
		<title>Don't replace MappingJackson2HttpMessageConverter with TypeConstrainedMappingJackson2HttpMessageConverter</title>
		<body>Spring Data REST uses custom `TypeConstrainedMappingJackson2HttpMessageConverter` classes. Unfortunately the current `HttpConverters` merge logic replaces the default `MappingJackson2HttpMessageConverter` with these.  This is one of the causes of #1962  </body>
		<created>2014-11-21 01:17:11</created>
		<closed>2014-11-21 01:38:26</closed>
	</bug>
	<bug>
		<id>1967</id>
		<title>Only register Gson if Jackson is not present</title>
		<body>See #1962 for an example of the mess you can get into if you have both HttpMessageConverters registered. </body>
		<created>2014-11-21 01:14:47</created>
		<closed>2014-11-21 01:38:26</closed>
	</bug>
	<bug>
		<id>1962</id>
		<title>Infinite loop in /error page</title>
		<body>[This app](https://github.com/spring-cloud-samples/customers-stores/tree/master/rest-microservices-customers) barfs expectedly when you POST to /customers without an "Accept" header (it's a 415 with "No suitable HttpMessageConverter found"). The /error handler goes crackers and gets into an infinite loop pushing out `"cause":{"detailMessage":"No suitable ...` over and over again.  Seems to be related to the presence of GSON on the classpath (the JSON converter in MVC is different) because if you take GSON out of the dependencies it starts working again. When it starts working again though, the output looks wrong (it's a 400 and there's no status code in the JSON), so there seems to be a problem in some  other area as well:  ``` $ curl localhost:9000/customers -d @customers-stores/rest-microservices-customers/src/test/resources/customers.json  {"cause":null,"message":"No suitable HttpMessageConverter found to read request body into object of type class example.customers.Customer from request with content type of application/x-www-form-urlencoded;charset=UTF-8!"} ``` </body>
		<created>2014-11-20 14:45:46</created>
		<closed>2014-11-23 07:29:17</closed>
	</bug>
	<bug>
		<id>1959</id>
		<title>CLI web apps that work with 1.1.x fail to start with 1.2</title>
		<body>CLI web apps automatically have `groovy-templates` added to their classpath so `GroovyTemplateAutoConfiguration` is enabled. 1.2 added a check for the existence of a `/templates`. If the CLI doesn't have such a directory it works fine with 1.1 but fails to start on 1.2 due to the addition of this check. The failure is:  ``` Caused by: java.lang.IllegalStateException: Cannot find template location: class path resource [templates/] (please add some templates, check your Groovy configuration, or set spring.groovy.template.check-template-location=false)     at org.springframework.util.Assert.state(Assert.java:385)     at org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration.checkTemplateLocationExists(GroovyTemplateAutoConfiguration.java:80)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     ... 27 more ``` </body>
		<created>2014-11-20 11:47:51</created>
		<closed>2014-11-20 14:10:38</closed>
	</bug>
	<bug>
		<id>1955</id>
		<title>New OnBeanCondition TypeRegistry fails if placeholders are used as class names</title>
		<body>Originally raised in [XD-2352](https://jira.spring.io/browse/XD-2352) the `OptimizedBeanTypeRegistry` doesn't ignore `CannotLoadBeanClassException` and `BeanDefinitionStoreException` exceptions in the same way as `DefaultListableBeanFactory.doGetBeanNamesForType()` does. </body>
		<created>2014-11-19 17:57:25</created>
		<closed>2014-11-19 19:07:52</closed>
	</bug>
	<bug>
		<id>1949</id>
		<title>Using Spring HATEOAS prevents spring.jackson.* configuration from taking effect</title>
		<body>`HypermediaAutoConfiguration` is annotated with `@EnableHypermediaSupport` which registers an `ObjectMapper` bean named `_halObjectMapper`. The presence of this bean prevents `JacksonAutoConfiguration` from creating its `ObjectMapper`, furthermore the `spring.jackson.*` configuration isn't applied to `_halObjectMapper`. This leaves the user with an `ObjectMapper` bean that doesn't match their configuration.   I discussed this with Ollie and he plans to make some changes to Spring HATEOAS to allow the `ObjectMapper` to be configured (perhaps in a similar manner to how Spring Data REST does it). In the meantime, I think that `HypermediaAutoConfiguration` should be updated to post-process `_halObjectMapper` and configure it using the `Jackson2ObjectMapperBuilder` bean created by `JacksonAutoConfiguration`. </body>
		<created>2014-11-18 15:23:19</created>
		<closed>2014-11-18 15:52:01</closed>
	</bug>
	<bug>
		<id>1948</id>
		<title>ConfigFileApplicationListener does not print profile name in debug message</title>
		<body>In [ConfigFileApplicationListener.java:394](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java#L394) looks like debug message is missing actual profile name. May be it should be something like:  ``` java msg.append(StringUtils.hasLength(profile) ? "for profile '" + profile + "' " : ""); ``` </body>
		<created>2014-11-18 14:04:16</created>
		<closed>2014-11-18 20:05:51</closed>
	</bug>
	<bug>
		<id>1944</id>
		<title>ErrorPageFilter error message includes path info even if it's null</title>
		<body>For example:  ``` Forwarding to error page from request [/brokennull] due to exception ```  The request was actually made to `/broken`. The path info should be omitted if it's `null`. </body>
		<created>2014-11-18 10:18:11</created>
		<closed>2014-11-18 10:43:23</closed>
	</bug>
	<bug>
		<id>1938</id>
		<title>ErrorPageFilter flushes response buffer of successful response</title>
		<body>We are experiencing problems when requests are being cancelled on client-side and the response Buffer is not yet empty. The ErrorPageFilter tries to flush the response Buffer causing an IOException (see below).  The response code the servlet is sending is 200, so I wonder why the ErrorPageFilter tries to flush those responses. Isn't the servlet container responsible for flushing?  We use Spring Boot 1.1.9.RELEASE.  ``` 2014-11-17 00:06:07,692 ERROR [http-apr-8080-exec-1] o.s.boot.context.web.ErrorPageFilter -  - Cannot forward to error page for request to /my-app/internal/hystrix.stream as the response has already been committed. As a result, the response may have the wrong status code. If your application is running on WebSphere Application Server you may be able to resolve this problem by setting  com.ibm.ws.webcontainer.invokeFlushAfterService to false org.apache.catalina.connector.ClientAbortException: null         at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:407) ~[catalina.jar:7.0.56]         at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480) ~[tomcat-coyote.jar:7.0.56]         at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:485) ~[catalina.jar:7.0.56]         at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464) ~[tomcat-coyote.jar:7.0.56]         at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:353) ~[catalina.jar:7.0.56]         at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:331) ~[catalina.jar:7.0.56]         at org.apache.catalina.connector.Response.flushBuffer(Response.java:610) ~[catalina.jar:7.0.56]         at org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:306) ~[catalina.jar:7.0.56]         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:116) [spring-boot-1.1.9.RELEASE.jar:1.1.9.RELEASE]         at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:59) [spring-boot-1.1.9.RELEASE.jar:1.1.9.RELEASE]         at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:88) [spring-boot-1.1.9.RELEASE.jar:1.1.9.RELEASE]         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.0.8.RELEASE.jar:4.0.8.RELEASE]         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:101) [spring-boot-1.1.9.RELEASE.jar:1.1.9.RELEASE]         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.56]         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.56]         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) [catalina.jar:7.0.56]         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) [catalina.jar:7.0.56]         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503) [catalina.jar:7.0.56]         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170) [catalina.jar:7.0.56]         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103) [catalina.jar:7.0.56]         at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950) [catalina.jar:7.0.56]         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) [catalina.jar:7.0.56]         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:421) [catalina.jar:7.0.56]         at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070) [tomcat-coyote.jar:7.0.56]         at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611) [tomcat-coyote.jar:7.0.56]         at org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run(AprEndpoint.java:2399) [tomcat-coyote.jar:7.0.56]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05]         at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-coyote.jar:7.0.56]         at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05] Caused by: java.io.IOException: null         at org.apache.coyote.http11.InternalAprOutputBuffer.flushBuffer(InternalAprOutputBuffer.java:205) ~[tomcat-coyote.jar:7.0.56]         at org.apache.coyote.http11.InternalAprOutputBuffer.access$100(InternalAprOutputBuffer.java:37) ~[tomcat-coyote.jar:7.0.56]         at org.apache.coyote.http11.InternalAprOutputBuffer$SocketOutputBuffer.doWrite(InternalAprOutputBuffer.java:235) ~[tomcat-coyote.jar:7.0.56]         at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:117) ~[tomcat-coyote.jar:7.0.56]         at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:192) ~[tomcat-coyote.jar:7.0.56]         at org.apache.coyote.Response.doWrite(Response.java:499) ~[tomcat-coyote.jar:7.0.56]         at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:402) ~[catalina.jar:7.0.56]         ... 30 common frames omitted ``` </body>
		<created>2014-11-17 13:11:44</created>
		<closed>2014-11-18 10:25:53</closed>
	</bug>
	<bug>
		<id>1927</id>
		<title>NPE in ConfigurationPropertiesReportEndpoint when only proxied subclass has annotation</title>
		<body>Spring Boot 1.1.9, JDK 1.7.0_60 Windows 7  I have a class using `@ConfigurationProperties` that extends another class that implements an interface. Both the interface and superclass have no annotations. When `ConfigurationPropertiesReportEndpoint.extractPrefix()` attempts to find the annotation, it first fails on the proxy instance and then tries interface but not the class itself, resulting in a `NullPointerException`.  ``` public interface Executor {}  public abstract class AbstractExecutor {}  @Component @ConfigurationProperties("executor.sql") public class SqlExecutor extends AbstractExecutor {} ```  ``` java.lang.NullPointerException: null     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extractPrefix(ConfigurationPropertiesReportEndpoint.java:180) ~[spring-boot-actuator-1.1.9.RELEASE.jar:1.1.9.RELEASE]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.extract(ConfigurationPropertiesReportEndpoint.java:123) ~[spring-boot-actuator-1.1.9.RELEASE.jar:1.1.9.RELEASE]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:96) ~[spring-boot-actuator-1.1.9.RELEASE.jar:1.1.9.RELEASE]     at org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint.invoke(ConfigurationPropertiesReportEndpoint.java:63) ~[spring-boot-actuator-1.1.9.RELEASE.jar:1.1.9.RELEASE]     at org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke(EndpointMvcAdapter.java:56) ~[spring-boot-actuator-1.1.9.RELEASE.jar:1.1.9.RELEASE] ``` </body>
		<created>2014-11-14 14:08:22</created>
		<closed>2014-11-18 05:32:36</closed>
	</bug>
	<bug>
		<id>1925</id>
		<title>Jetty 8 not working with 1.2.0.RC1</title>
		<body>I tried using Jetty 8 with Spring Boot 1.2.0.RC1, but ran into the following issue. It appears the Jetty 8 connector factory is referencing a Jetty 9 class:   ``` Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/ServerConnector     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory$Jetty8SslServerConnectorFactory.getConnector(JettyEmbeddedServletContainerFactory.java:507)     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory.getEmbeddedServletContainer(JettyEmbeddedServletContainerFactory.java:123)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:148)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:121) ``` </body>
		<created>2014-11-14 04:35:57</created>
		<closed>2014-11-17 17:22:50</closed>
	</bug>
	<bug>
		<id>1921</id>
		<title>Actuator: ConfigurationPropertiesReportEndpoint doesn't show nested properties</title>
		<body>The ConfigurationPropertiesReportEndpoint doesn't serialize nested properties. This is because of the registration of the GenericSerializerModifier that filters out all nested properties. If I disable the modifier everything works as expected.  Was there a special reason for this modifier to workaround some other issues? </body>
		<created>2014-11-13 21:37:44</created>
		<closed>2014-11-19 14:10:12</closed>
	</bug>
	<bug>
		<id>1918</id>
		<title>spring.main.show_banner=false is not respected in 1.2.0.RC1</title>
		<body>I think this a regression since 1.2.0.M2. The banner is shown even when `spring.main.show_banner=false` is set. </body>
		<created>2014-11-13 18:54:45</created>
		<closed>2014-11-13 21:49:28</closed>
	</bug>
	<bug>
		<id>1909</id>
		<title>Tweak test context cache strategy to allow mock and functional test integration in the same suite</title>
		<body>From Graeme Rocher:  &gt; so what we did with Grails was that if the container was already running ( we do that by checking if the port is available etc.) then no bootstrapping occurs and the tests are simply run &gt; if the application isn't running then we start up the app &gt; this allows you to run the tests in an IDE </body>
		<created>2014-11-12 11:06:15</created>
		<closed>2014-11-13 22:46:25</closed>
	</bug>
	<bug>
		<id>1902</id>
		<title>Change Tomcat metrics getMaxActive() -&gt; getMaxActiveSessions() </title>
		<body>See https://github.com/spring-projects/spring-boot/pull/1860#issuecomment-62669482 </body>
		<created>2014-11-12 04:47:19</created>
		<closed>2014-11-13 22:00:25</closed>
	</bug>
	<bug>
		<id>1865</id>
		<title>JpaBaseConfiguration.configure() is never called</title>
		<body>`JpaBaseConfiguration.configure()` is never called (I think it's an orphan from 1.0). </body>
		<created>2014-11-10 17:04:25</created>
		<closed>2014-11-11 05:54:59</closed>
	</bug>
	<bug>
		<id>1864</id>
		<title>Log4J2LoggingSystemTests noFile() and withFile() fail intermittently on CI</title>
		<body>Log4J2LoggingSystemTests noFile:  ``` java.lang.AssertionError: null     at org.junit.Assert.fail(Assert.java:86)     at org.junit.Assert.assertTrue(Assert.java:41)     at org.junit.Assert.assertFalse(Assert.java:64)     at org.junit.Assert.assertFalse(Assert.java:74)     at org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.noFile(Log4J2LoggingSystemTests.java:67) ```  Log4J2LoggingSystemTests withFile:  ``` java.lang.AssertionError: null     at org.junit.Assert.fail(Assert.java:86)     at org.junit.Assert.assertTrue(Assert.java:41)     at org.junit.Assert.assertTrue(Assert.java:52)     at org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.withFile(Log4J2LoggingSystemTests.java:79) ``` </body>
		<created>2014-11-10 13:45:36</created>
		<closed>2014-11-11 13:30:24</closed>
	</bug>
	<bug>
		<id>1859</id>
		<title>Method-level configuration metadata not discovered</title>
		<body>For some reason, the `config()` method of `RepositoryRestMvcBootConfiguration` is not handled as it should. The group is found and registered but no items are found in that object.  </body>
		<created>2014-11-08 18:22:13</created>
		<closed>2014-11-11 07:06:32</closed>
	</bug>
	<bug>
		<id>1858</id>
		<title>Configuration metadata processor generates an empty file when no metadata is found</title>
		<body>Add the `spring-boot-configuration-processor` for a project that does not define any additional metadata and no `@ConfigurationProperties`. Nothing should be generated. Instead, the following is generated:  ``` {   "groups": [],   "properties": [] } ``` </body>
		<created>2014-11-08 18:20:12</created>
		<closed>2014-11-11 06:06:41</closed>
	</bug>
	<bug>
		<id>1857</id>
		<title>MultipartAutoConfiguration can only find StandardServletMultipartResolver beans</title>
		<body>http://github.com/spring-projects/spring-boot/blob/v1.1.8.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java configures a MultipartResolver automatically in case one is not already provided.  However it activates even when another MultipartResolver bean already exists, because its annotation uses the StandardServletMultipartResolver bean type instead of just MultipartResolver.  Problem: WildFly 8.1.0 (and possibly some other Java application servers) doesn't work well with StandardServletMultipartResolver and the recognized solution is to use CommonsMultipartResolver instead.  Declaring a CommonsMultipartResolver bean in the configuration doesn't work:  ``` @Configuration public class WildFlyConfiguration {     //Ignored!     @Bean     public MultipartResolver multipartResolver() {         return new CommonsMultipartResolver();     } } ```  In order for Spring Boot to use another MultipartResolver (e.g. CommonsMultipartResolver), I currently have to create a wrapper class around the target MultipartResolver :  ``` public class WrapperMultipartResolver extends StandardServletMultipartResolver {     //Pretend to be a StandardServletMultipartResolver, but route all function calls to this CommonsMultipartResolver  instance     private CommonsMultipartResolver targetResolver = new CommonsMultipartResolver();     @Override     public void setResolveLazily(boolean resolveLazily) {         targetResolver.setResolveLazily(resolveLazily);     }     @Override     public boolean isMultipart(HttpServletRequest request) {         return targetResolver.isMultipart(request);     }     @Override     public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException {         return targetResolver.resolveMultipart(request);     }     @Override     public void cleanupMultipart(MultipartHttpServletRequest request) {         targetResolver.cleanupMultipart(request);     } } ```  and use it instead:  ``` @Configuration public class WildFlyConfiguration {     //This works     @Bean     public StandardServletMultipartResolver multipartResolver() {         return new WrapperMultipartResolver();     } } ```  In order to avoid creating such wrapper classes, the return type of multipartResolver() in http://github.com/spring-projects/spring-boot/blob/v1.1.8.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java could be changed to simply MultipartResolver (which is the interface implemented by both CommonsMultipartResolver and StandardServletMultipartResolver).  Alternatively, an additional interface could be created extending MultipartResolver and implementing all features provided by StandardServletMultipartResolver and CommonsMultipartResolver. The return type of multipartResolver() could then be changed to this interface. </body>
		<created>2014-11-08 16:29:38</created>
		<closed>2014-11-11 03:13:41</closed>
	</bug>
	<bug>
		<id>1853</id>
		<title>since liquibase 3.3.0 upgrade deployment in wildfly fail</title>
		<body>since today (only snaphsot change was liquibase upgrade to 3.3.0) we are no longer able to deploy to wildfly:  ```     Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Cannot create inner bean '(inner bean)#6dbd4a99' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#6dbd4a99': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'liquibase' defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [liquibase.integration.spring.SpringLiquibase]: Factory method 'liquibase' threw exception; nested exception is java.lang.LinkageError: Failed to link liquibase/sdk/watch/WatchCommand$DynamicContentHandler (Module \"deployment.steamstats.war:main\" from Service Module Loader)     Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#6dbd4a99': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'liquibase' defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [liquibase.integration.spring.SpringLiquibase]: Factory method 'liquibase' threw exception; nested exception is java.lang.LinkageError: Failed to link liquibase/sdk/watch/WatchCommand$DynamicContentHandler (Module \"deployment.steamstats.war:main\" from Service Module Loader)     Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'liquibase' defined in class path resource [org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration$LiquibaseConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [liquibase.integration.spring.SpringLiquibase]: Factory method 'liquibase' threw exception; nested exception is java.lang.LinkageError: Failed to link liquibase/sdk/watch/WatchCommand$DynamicContentHandler (Module \"deployment.steamstats.war:main\" from Service Module Loader)     Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [liquibase.integration.spring.SpringLiquibase]: Factory method 'liquibase' threw exception; nested exception is java.lang.LinkageError: Failed to link liquibase/sdk/watch/WatchCommand$DynamicContentHandler (Module \"deployment.steamstats.war:main\" from Service Module Loader)     Caused by: java.lang.LinkageError: Failed to link liquibase/sdk/watch/WatchCommand$DynamicContentHandler (Module \"deployment.steamstats.war:main\" from Service Module Loader)     Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/handler/AbstractHandler     Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.server.handler.AbstractHandler from [Module \"deployment.steamstats.war:main\" from Service Module Loader]"}} ``` </body>
		<created>2014-11-07 10:04:50</created>
		<closed>2014-11-07 12:40:12</closed>
	</bug>
	<bug>
		<id>1847</id>
		<title>Additional Tomcat excludes needed when using Jetty</title>
		<body>When using Jetty, excluding only `spring-boot-starter-tomcat` module is not enough since JDBC and WebSocket starters directly depend on certain Tomcat modules: - `spring-boot-starter-jdbc` depends on `org.apache.tomcat:tomcat-jdbc` - `spring-boot-starter-websocket` depends on `org.apache.tomcat.embed:tomcat-embed-websocket`  At the very least, documentation should be updated to mention excluding those Tomcat modules (either those exact modules, or whole `tomcat` and `tomcat.embed` groups). </body>
		<created>2014-11-07 08:55:44</created>
		<closed>2014-11-07 17:50:41</closed>
	</bug>
	<bug>
		<id>1845</id>
		<title>Restore base.xml</title>
		<body>Some of the recent logging changes have changed the way that the `base.xml` configuration works. Project could be importing this file directly so we should restore the old behavior. </body>
		<created>2014-11-07 04:53:20</created>
		<closed>2014-11-07 05:56:58</closed>
	</bug>
	<bug>
		<id>1830</id>
		<title>Additional metadata does not get merged if the project has no metadata</title>
		<body>The annotation processor does not create a `spring-configuration-metadata.json` if there is no metadata. `spring-boot` currently defines an `additional-spring-configuration-metadata.json` but since there is no `@ConfigurationProperties` class, nothing gets generated at all.   This explains why those keys are missing (#1829) </body>
		<created>2014-11-05 14:13:34</created>
		<closed>2014-11-06 05:05:50</closed>
	</bug>
	<bug>
		<id>1821</id>
		<title>hornetq embedded started when configured with Jndi name</title>
		<body>when we deploy our war to wildfly the embedded hornetq broker is started but we set the property `spring.jms.jndi-name=java:/MyConnectionFactory` and the app is communication through that `ConnectionFactory` (visible in wildfly-console), so hornetq shouldn't be available at all when a `jms.jndi-name` is set </body>
		<created>2014-11-04 14:21:46</created>
		<closed>2014-11-11 23:34:03</closed>
	</bug>
	<bug>
		<id>1820</id>
		<title>@ConditionalOnJndi is not applied</title>
		<body>`@ConditionalOnJndi` has no runtime retention so adding it has absolutely no effect. Tests are probably missing in that area. </body>
		<created>2014-11-04 13:44:49</created>
		<closed>2014-11-04 14:45:07</closed>
	</bug>
	<bug>
		<id>1807</id>
		<title>CLI Init command: Type switch broken with --build and --format</title>
		<body>The introduction of `--build` and `--format` broke the regular usage of `--type`. Even if it's set, the default is taken into account. Something is seriously wrong with the tests. </body>
		<created>2014-11-03 10:53:45</created>
		<closed>2014-11-03 12:12:33</closed>
	</bug>
	<bug>
		<id>1801</id>
		<title>AuthenticationManager created using global builder (from Spring Security) cannot be injected into a WebSecurityConfigurerAdapter</title>
		<body>If the user wants to modify the global default `AuthenticationManager` there is an `AuthenticationManagerBuilder` floating around in Spring Security, which works fine. But if you then try and inject it into a `WebSecurityConfigurerAdapter`, because those are initialized early, it forces Spring Boot to create its own default `AuthenticationManager` too soon and you get the default one not the customized one.  Example:  ```     @Configuration     protected static class SecurityCustomizer extends WebSecurityConfigurerAdapter {          @Autowired         private AuthenticationManager authenticationManager;      }      @Configuration     protected static class AuthenticationManagerCustomizer extends             GlobalAuthenticationConfigurerAdapter {          @Override         public void init(AuthenticationManagerBuilder auth) throws Exception {             auth.inMemoryAuthentication().withUser("foo").password("bar").roles("USER");         }      } ```  This app will start, but the `@Autowired` `AuthenticationManager` isn't the one with the "foo" user. </body>
		<created>2014-11-01 08:51:57</created>
		<closed>2014-11-02 02:48:03</closed>
	</bug>
	<bug>
		<id>1793</id>
		<title>Web app that depends on Groovy but does not depend on spring-webmvc fails to start with NoClassDefFoundError: org/springframework/web/servlet/view/UrlBasedViewResolver</title>
		<body>These dependencies will trigger the problem:  ``` compile 'org.springframework.boot:spring-boot-starter' compile 'org.springframework.boot:spring-boot-starter-tomcat' compile 'org.codehaus.groovy:groovy-all:2.3.7' compile 'org.springframework:spring-web' ```  The failure is `NoClassDefFoundError: org/springframework/web/servlet/view/UrlBasedViewResolver`  You can work around the problem by excluding `GroovyTemplateAutoConfiguration`:  ``` @EnableAutoConfiguration(exclude=GroovyTemplateAutoConfiguration.class) ``` </body>
		<created>2014-10-30 14:54:12</created>
		<closed>2014-10-30 15:22:42</closed>
	</bug>
	<bug>
		<id>1792</id>
		<title>Error deploying a Spring Boot / Liquibase app on Cloud Foundry</title>
		<body>I am trying to deploy a Spring Boot 1.1.8 application + Liquibase 3.1.1 application on Cloud Foundry (Version 2/26/2014 (ccbd61)). I've also tried with Liquibase 3.0.8, which is the one provided by default, and I get the same result.  It fails with the stacktrace I have posted at the end of this ticket.  Please note that on the latest (3.2.2) version of Liquibase, they have changed their API and the SpringPackageScanClassResolver does not override the correct method.  I only have this issue on Cloud Foundry, it works everywhere else (my machine, Heroku, Openshift...), so it must be something specific to Cloud Foundry (once again, I am with Version 2/26/2014 (ccbd61)). BTW, this has also been reported on BlueMix, but as it's based on CloudFoundry (and as the reporter uses a JHipster application, like me) this is the same issue here: https://developer.ibm.com/answers/questions/27960/using-liquibase-with-bluemix-fails-when-reading-url-file-home-vcap-app-meta-inf-manifest-mf.html  I'm reporting this here as: - Spring Boot has modified the Liquibase configuration classes, and I expect it to make Liquibase work correctly everywhere - The issue is with Cloud Foundry, and as this is the same company as Spring Boot: I hope you can sort it out internally (I can't debug it)  I'm notifying @nvoxland because he might also help with this.  ``` 2014-10-30T15:26:20.52+0100 [App/0]   ERR java.lang.reflect.InvocationTargetException 2014-10-30T15:26:20.52+0100 [App/0]   ERR   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 2014-10-30T15:26:20.52+0100 [App/0]   ERR   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at java.lang.reflect.Method.invoke(Method.java:606) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at java.lang.Thread.run(Thread.java:745) 2014-10-30T15:26:20.53+0100 [App/0]   ERR Caused by: java.lang.ExceptionInInitializerError 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener$LiquibasePresent.replaceServiceLocator(LiquibaseServiceLocatorApplicationListener.java:38) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener.onApplicationEvent(LiquibaseServiceLocatorApplicationListener.java:28) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener.onApplicationEvent(LiquibaseServiceLocatorApplicationListener.java:19) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:100) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:54) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at org.springframework.boot.SpringApplication.run(SpringApplication.java:276) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at com.mycompany.myapp.Application.main(Application.java:56) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   ... 6 more 2014-10-30T15:26:20.53+0100 [App/0]   ERR Caused by: liquibase.exception.UnexpectedLiquibaseException: java.net.UnknownServiceException: protocol doesn't support input 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at liquibase.servicelocator.ServiceLocator.setResourceAccessor(ServiceLocator.java:109) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at liquibase.servicelocator.ServiceLocator.&lt;init&gt;(ServiceLocator.java:44) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at liquibase.servicelocator.ServiceLocator.&lt;clinit&gt;(ServiceLocator.java:31) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   ... 14 more 2014-10-30T15:26:20.53+0100 [App/0]   ERR Caused by: java.net.UnknownServiceException: protocol doesn't support input 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at java.net.URLConnection.getInputStream(URLConnection.java:839) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at java.net.URL.openStream(URL.java:1037) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   at liquibase.servicelocator.ServiceLocator.setResourceAccessor(ServiceLocator.java:98) 2014-10-30T15:26:20.53+0100 [App/0]   ERR   ... 16 more ``` </body>
		<created>2014-10-30 14:48:21</created>
		<closed>2014-11-11 15:04:35</closed>
	</bug>
	<bug>
		<id>1781</id>
		<title>spring-boot-starter-cloud-connectors pulls in commons-logging when used with Gradle</title>
		<body></body>
		<created>2014-10-28 17:43:24</created>
		<closed>2014-10-28 19:09:16</closed>
	</bug>
	<bug>
		<id>1764</id>
		<title>"spring hint" is very slow in 1.2</title>
		<body>Roughly 3x slower (1.2s cf 0.4s user time on my desktop). </body>
		<created>2014-10-27 14:54:18</created>
		<closed>2014-11-01 16:57:59</closed>
	</bug>
	<bug>
		<id>1746</id>
		<title>/configprops endpoint doesn't render maps or collections</title>
		<body>A `@ConfigurationProperties` bean can have properties that are maps or collections, and they will be bindable as long as the generic type of the elements can be determined at runtime. The /configprops endpoint falsely assumes that since a String cannot be converted to a Map (generically using a the default `ConversionService`), that property is not to be included. </body>
		<created>2014-10-22 16:23:59</created>
		<closed>2014-11-19 14:10:12</closed>
	</bug>
	<bug>
		<id>1737</id>
		<title>Using Log4j 2 results in some output being sent to System.err</title>
		<body>It looks like anything using java.util.logging isn't captured and sent into Log4j 2. </body>
		<created>2014-10-20 14:10:04</created>
		<closed>2014-10-20 15:05:18</closed>
	</bug>
	<bug>
		<id>1735</id>
		<title>SampleIntegrationApplicationTests fails intermittently</title>
		<body></body>
		<created>2014-10-20 09:45:42</created>
		<closed>2014-10-20 10:21:06</closed>
	</bug>
	<bug>
		<id>1733</id>
		<title>Using Spring Boot 1.2.0.M2 throws java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy</title>
		<body>I have created a simple project with http://start.spring.io/ using Java 1.8, packaging war, Spring Boot version 1.2.0.M2, and add the Web dependency.  I have enabled the Servlet 3.0 initialisation:  ``` @ComponentScan @EnableAutoConfiguration public class Application extends SpringBootServletInitializer{      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }      @Override     protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {         return application.sources(Application.class);     } } ```  The packaged war I have deployed it to JBoss Wildfly 8.1.0 and after start it with ./standalone.sh got this error </body>
		<created>2014-10-19 17:23:25</created>
		<closed>2014-10-20 09:19:30</closed>
	</bug>
	<bug>
		<id>1729</id>
		<title>Spring-boot-starter-data-rest prevents JSON pretty print in actuator.</title>
		<body>I create a new Spring Starter project in Eclipse 3.6.2. I add this line to application.properties:  ``` http.mappers.jsonPrettyPrint=true ```  I have these dependencies in gradle:  ``` dependencies {     compile("org.springframework.boot:spring-boot-starter-data-jpa")     compile("org.springframework.boot:spring-boot-starter-redis")     compile("org.springframework.boot:spring-boot-starter-web")     compile("org.springframework.boot:spring-boot-starter-security")     compile("org.springframework.boot:spring-boot-starter-social-twitter")     compile("org.springframework.boot:spring-boot-starter-ws")     compile("org.springframework.boot:spring-boot-starter-data-mongodb")     compile("org.springframework.boot:spring-boot-starter-social-facebook")     compile("org.springframework.boot:spring-boot-starter-websocket")     compile("org.springframework.boot:spring-boot-starter-amqp")     compile("org.springframework.boot:spring-boot-starter-remote-shell")     compile("org.springframework.boot:spring-boot-starter-batch")     compile("org.springframework.boot:spring-boot-starter-integration")     compile("org.springframework.boot:spring-boot-starter-jdbc")     compile("org.springframework.boot:spring-boot-starter-data-rest")     compile("org.springframework.boot:spring-boot-starter-mobile")     compile("org.springframework.boot:spring-boot-starter-freemarker")     compile("org.springframework.boot:spring-boot-starter-actuator")     providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")     testCompile("org.springframework.boot:spring-boot-starter-test") } ```  None of the actuator content pretty prints.  I remove: `compile("org.springframework.boot:spring-boot-starter-data-rest")` and reset my classpath.  Now I have readable JSON from the actuator. </body>
		<created>2014-10-18 16:26:15</created>
		<closed>2014-12-09 05:46:15</closed>
	</bug>
	<bug>
		<id>1727</id>
		<title>application does not start when using Bitronix JTA and ActiveMQ together</title>
		<body>when we have these dependencies:  ``` xml     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-jta-bitronix&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework&lt;/groupId&gt;             &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;             &lt;artifactId&gt;activemq-broker&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;             &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; ```  the application doesn't start anymore. we got these exception:  ``` [INFO] --- spring-boot-maven-plugin:1.2.0.M2:run (default-cli) @ activemq --- [INFO] Attaching agents: [] Listening for transport dt_socket at address: 5005    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::             (v1.2.0.M2)  2014-10-17 09:48:56.584  INFO 11790 --- [           main] de.bigmichi1.test.Application            : Starting Application on r518 with PID 11790 (/home/mcr/git/activemq/target/classes started by mcr in /home/mcr/git/activemq) 2014-10-17 09:48:56.627  INFO 11790 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4f2b503c: startup date [Fri Oct 17 09:48:56 CEST 2014]; root of context hierarchy 2014-10-17 09:48:57.112  INFO 11790 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2014-10-17 09:48:57.222  INFO 11790 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'jmsConnectionFactory': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=true; factoryBeanName=org.springframework.boot.autoconfigure.jms.activemq.ActiveMQXAConnectionFactoryConfiguration; factoryMethodName=jmsConnectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration; factoryMethodName=jmsConnectionFactory; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.class]] 2014-10-17 09:48:57.525  INFO 11790 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.jms.annotation.JmsBootstrapConfiguration' of type [class org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$61103f6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2014-10-17 09:48:57.541  INFO 11790 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration' of type [class org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 2014-10-17 09:48:57.785  INFO 11790 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080/http 2014-10-17 09:48:57.926  INFO 11790 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2014-10-17 09:48:57.927  INFO 11790 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.55 2014-10-17 09:48:58.011  INFO 11790 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2014-10-17 09:48:58.012  INFO 11790 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1388 ms 2014-10-17 09:48:58.478  INFO 11790 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2014-10-17 09:48:58.481  INFO 11790 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2014-10-17 09:48:58.644  INFO 11790 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-10-17 09:48:58.782  INFO 11790 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-10-17 09:48:58.783  INFO 11790 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2014-10-17 09:48:58.821  INFO 11790 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-10-17 09:48:58.822  INFO 11790 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-10-17 09:48:58.857  INFO 11790 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4f2b503c: startup date [Fri Oct 17 09:48:56 CEST 2014]; root of context hierarchy 2014-10-17 09:48:58.983  INFO 11790 --- [           main] bitronix.tm.BitronixTransactionManager   : Bitronix Transaction Manager version 2.1.4 2014-10-17 09:48:58.984  INFO 11790 --- [           main] bitronix.tm.Configuration                : JVM unique ID: &lt;spring-boot-jta-bitronix&gt; 2014-10-17 09:48:59.077  INFO 11790 --- [           main] bitronix.tm.recovery.Recoverer           : recovery committed 0 dangling transaction(s) and rolled back 0 aborted transaction(s) on 0 resource(s) [] (restricted to serverId 'spring-boot-jta-bitronix') 2014-10-17 09:48:59.100  INFO 11790 --- [           main] o.s.t.jta.JtaTransactionManager          : Using JTA UserTransaction: a BitronixTransactionManager with 0 in-flight transaction(s) 2014-10-17 09:48:59.100  INFO 11790 --- [           main] o.s.t.jta.JtaTransactionManager          : Using JTA TransactionManager: a BitronixTransactionManager with 0 in-flight transaction(s) 2014-10-17 09:49:02.980  WARN 11790 --- [           main] ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsMessagingTemplate' defined in class path resource [org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration$MessagingTemplateConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.springframework.jms.core.JmsTemplate]: : Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:751)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:466)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:725)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:692)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:962)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:951)     at de.bigmichi1.test.Application.main(Application.java:17) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1204)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1081)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1006)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:743)     ... 18 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:555)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)     ... 39 common frames omitted Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1016)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:527)     ... 41 common frames omitted  2014-10-17 09:49:02.981  INFO 11790 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown 2014-10-17 09:49:02.982  INFO 11790 --- [           main] bitronix.tm.BitronixTransactionManager   : shutting down Bitronix Transaction Manager 2014-10-17 09:49:03.453  INFO 11790 --- [           main] o.apache.catalina.core.StandardService   : Stopping service Tomcat 2014-10-17 09:49:03.465  INFO 11790 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/home/mcr/git/activemq/src/main/resources/, file:/home/mcr/git/activemq/src/main/resources/, file:/home/mcr/git/activemq/target/classes/, file:/home/mcr/.m3/repository/com/fasterxml/jackson/core/jackson-databind/2.4.2/jackson-databind-2.4.2.jar, file:/home/mcr/.m3/repository/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar, file:/home/mcr/.m3/repository/org/slf4j/log4j-over-slf4j/1.7.7/log4j-over-slf4j-1.7.7.jar, file:/home/mcr/.m3/repository/org/springframework/spring-jms/4.1.1.RELEASE/spring-jms-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/springframework/spring-core/4.1.1.RELEASE/spring-core-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/home/mcr/.m3/repository/org/springframework/spring-context/4.1.1.RELEASE/spring-context-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/fusesource/hawtbuf/hawtbuf/1.10/hawtbuf-1.10.jar, file:/home/mcr/.m3/repository/org/apache/tomcat/embed/tomcat-embed-el/7.0.55/tomcat-embed-el-7.0.55.jar, file:/home/mcr/.m3/repository/org/codehaus/btm/btm/2.1.4/btm-2.1.4.jar, file:/home/mcr/.m3/repository/org/hibernate/hibernate-validator/5.1.2.Final/hibernate-validator-5.1.2.Final.jar, file:/home/mcr/.m3/repository/org/apache/activemq/activemq-openwire-legacy/5.10.0/activemq-openwire-legacy-5.10.0.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-starter-jta-bitronix/1.2.0.M2/spring-boot-starter-jta-bitronix-1.2.0.M2.jar, file:/home/mcr/.m3/repository/org/apache/activemq/activemq-client/5.10.0/activemq-client-5.10.0.jar, file:/home/mcr/.m3/repository/org/apache/activemq/activemq-pool/5.10.0/activemq-pool-5.10.0.jar, file:/home/mcr/.m3/repository/commons-pool/commons-pool/1.6/commons-pool-1.6.jar, file:/home/mcr/.m3/repository/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar, file:/home/mcr/.m3/repository/org/springframework/spring-webmvc/4.1.1.RELEASE/spring-webmvc-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/apache/geronimo/specs/geronimo-jta_1.0.1B_spec/1.0.1/geronimo-jta_1.0.1B_spec-1.0.1.jar, file:/home/mcr/.m3/repository/org/apache/tomcat/embed/tomcat-embed-core/7.0.55/tomcat-embed-core-7.0.55.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-starter-logging/1.2.0.M2/spring-boot-starter-logging-1.2.0.M2.jar, file:/home/mcr/.m3/repository/com/fasterxml/jackson/core/jackson-annotations/2.4.2/jackson-annotations-2.4.2.jar, file:/home/mcr/.m3/repository/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar, file:/home/mcr/.m3/repository/org/springframework/spring-aop/4.1.1.RELEASE/spring-aop-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/springframework/spring-tx/4.1.1.RELEASE/spring-tx-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/springframework/spring-expression/4.1.1.RELEASE/spring-expression-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/com/fasterxml/jackson/core/jackson-core/2.4.2/jackson-core-2.4.2.jar, file:/home/mcr/.m3/repository/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar, file:/home/mcr/.m3/repository/org/slf4j/jcl-over-slf4j/1.7.7/jcl-over-slf4j-1.7.7.jar, file:/home/mcr/.m3/repository/javax/transaction/jta/1.1/jta-1.1.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-starter-web/1.2.0.M2/spring-boot-starter-web-1.2.0.M2.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-starter-tomcat/1.2.0.M2/spring-boot-starter-tomcat-1.2.0.M2.jar, file:/home/mcr/.m3/repository/org/apache/activemq/activemq-broker/5.10.0/activemq-broker-5.10.0.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-autoconfigure/1.2.0.M2/spring-boot-autoconfigure-1.2.0.M2.jar, file:/home/mcr/.m3/repository/org/slf4j/jul-to-slf4j/1.7.7/jul-to-slf4j-1.7.7.jar, file:/home/mcr/.m3/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, file:/home/mcr/.m3/repository/org/apache/tomcat/embed/tomcat-embed-logging-juli/7.0.55/tomcat-embed-logging-juli-7.0.55.jar, file:/home/mcr/.m3/repository/org/springframework/spring-beans/4.1.1.RELEASE/spring-beans-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/apache/geronimo/specs/geronimo-j2ee-management_1.1_spec/1.0.1/geronimo-j2ee-management_1.1_spec-1.0.1.jar, file:/home/mcr/.m3/repository/org/springframework/spring-web/4.1.1.RELEASE/spring-web-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/javax/jms/jms-api/1.1-rev-1/jms-api-1.1-rev-1.jar, file:/home/mcr/.m3/repository/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar, file:/home/mcr/.m3/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar, file:/home/mcr/.m3/repository/org/springframework/spring-messaging/4.1.1.RELEASE/spring-messaging-4.1.1.RELEASE.jar, file:/home/mcr/.m3/repository/org/apache/activemq/activemq-jms-pool/5.10.0/activemq-jms-pool-5.10.0.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot/1.2.0.M2/spring-boot-1.2.0.M2.jar, file:/home/mcr/.m3/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar, file:/home/mcr/.m3/repository/org/springframework/boot/spring-boot-starter/1.2.0.M2/spring-boot-starter-1.2.0.M2.jar] 2014-10-17 09:49:03.465  INFO 11790 --- [           main] utoConfigurationReportLoggingInitializer :   Error starting ApplicationContext. To display the auto-configuration report enabled debug logging (start with --debug)   2014-10-17 09:49:03.466 ERROR 11790 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsMessagingTemplate' defined in class path resource [org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration$MessagingTemplateConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.springframework.jms.core.JmsTemplate]: : Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:751)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:466)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:725)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:692)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:962)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:951)     at de.bigmichi1.test.Application.main(Application.java:17) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1204)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1081)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1006)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:743)     ... 18 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:555)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)     ... 39 common frames omitted Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1016)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:527)     ... 41 common frames omitted  Exception in thread "main" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jmsMessagingTemplate' defined in class path resource [org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration$MessagingTemplateConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.springframework.jms.core.JmsTemplate]: : Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:751)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:466)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:725)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:692)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:962)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:951)     at de.bigmichi1.test.Application.main(Application.java:17) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:334)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1204)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1113)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1008)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:505)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:229)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1081)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1006)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815)     at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:743)     ... 18 more Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.jms.ConnectionFactory org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration.connectionFactory; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:555)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)     ... 39 more Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [javax.jms.ConnectionFactory] is defined: expected single matching bean but found 2: jmsConnectionFactory,nonXaJmsConnectionFactory     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1016)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:904)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:527)     ... 41 more [INFO] ------------------------------------------------------------------------ ``` </body>
		<created>2014-10-17 07:50:08</created>
		<closed>2014-10-21 16:29:02</closed>
	</bug>
	<bug>
		<id>1719</id>
		<title>Spring Boot 1.2.0.M2 doesn't work with Tomcat 7 Maven Plugin</title>
		<body>With Spring 1.1.7 (and below), I'm able to configure the tomcat7-maven-plugin to start/stop before/after running my integration tests. I realize it's possible to use an @IntegrationTest annotation to do this, but I want to verify my app will run in Tomcat since that's what production runs.  Here's the error I see with 1.2.0.M2:  ``` Oct 15, 2014 3:52:14 PM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["http-bio-8080"] Oct 15, 2014 3:52:14 PM org.apache.catalina.core.StandardService startInternal INFO: Starting service Tomcat Oct 15, 2014 3:52:14 PM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: Apache Tomcat/7.0.47 Oct 15, 2014 3:52:18 PM org.apache.catalina.core.ContainerBase startInternal SEVERE: A child container failed during start java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]     at java.util.concurrent.FutureTask.report(FutureTask.java:122)     at java.util.concurrent.FutureTask.get(FutureTask.java:192)     at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1123)     at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:800)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:744) Caused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)     ... 6 more Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724)     at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531)     at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355)     at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286)     at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120)     at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72)     at java.lang.Class.createAnnotationData(Class.java:3410)     at java.lang.Class.annotationData(Class.java:3399)     at java.lang.Class.getDeclaredAnnotations(Class.java:3366)     at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:371)     at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:333)     at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:58)     at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:47)     at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:79)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:105)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:94)     at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:77)     at org.springframework.core.OrderComparator.compare(OrderComparator.java:63)     at java.util.TimSort.countRunAndMakeAscending(TimSort.java:351)     at java.util.TimSort.sort(TimSort.java:216)     at java.util.Arrays.sort(Arrays.java:1435)     at java.util.Collections.sort(Collections.java:230)     at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:111)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5423)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     ... 6 more ```  And the configuration in my pom.xml:  ``` &lt;plugin&gt;     &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;     &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;     &lt;version&gt;2.2&lt;/version&gt;     &lt;configuration&gt;         &lt;path&gt;/&lt;/path&gt;     &lt;/configuration&gt;     &lt;executions&gt;         &lt;execution&gt;             &lt;id&gt;start-tomcat&lt;/id&gt;             &lt;phase&gt;pre-integration-test&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;run&lt;/goal&gt;             &lt;/goals&gt;             &lt;configuration&gt;                 &lt;fork&gt;true&lt;/fork&gt;                 &lt;port&gt;${tomcat.http.port}&lt;/port&gt;             &lt;/configuration&gt;         &lt;/execution&gt;         &lt;execution&gt;             &lt;id&gt;stop-tomcat&lt;/id&gt;             &lt;phase&gt;post-integration-test&lt;/phase&gt;             &lt;goals&gt;                 &lt;goal&gt;shutdown&lt;/goal&gt;             &lt;/goals&gt;         &lt;/execution&gt;     &lt;/executions&gt; &lt;/plugin&gt; ``` </body>
		<created>2014-10-15 22:01:36</created>
		<closed>2014-10-20 09:19:30</closed>
	</bug>
	<bug>
		<id>1715</id>
		<title>BasicErrorControllerIntegrationTest fail in master</title>
		<body>We haven't noticed as Maven only runs tests in classes that end with Tests, i.e. BasicErrorControllerIntegrationTest is missing an s on the end of its name </body>
		<created>2014-10-15 14:33:41</created>
		<closed>2014-10-15 15:17:01</closed>
	</bug>
	<bug>
		<id>1712</id>
		<title>Test failure (ordering problem with database)</title>
		<body>If I run all the tests in spring-boot-autoconfigure in Eclipse it fails in `HibernateJpaAutoConfigurationTests.testNamingStrategyThatWorkedInOneDotOhContinuesToWork()`  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateJpaAutoConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.dataSource; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/home/dsyer/dev/boot/boot/spring-boot-autoconfigure/target/test-classes/schema.sql]: CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), ); nested exception is java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:293)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1186)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1095)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:990)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:975)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:752)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfigurationTests.testNamingStrategyThatWorkedInOneDotOhContinuesToWork(HibernateJpaAutoConfigurationTests.java:95)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:168)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.dataSource; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/home/dsyer/dev/boot/boot/spring-boot-autoconfigure/target/test-classes/schema.sql]: CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), ); nested exception is java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:509)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:290)     ... 46 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/home/dsyer/dev/boot/boot/spring-boot-autoconfigure/target/test-classes/schema.sql]: CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), ); nested exception is java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1021)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:964)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:862)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:481)     ... 48 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/home/dsyer/dev/boot/boot/spring-boot-autoconfigure/target/test-classes/schema.sql]: CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), ); nested exception is java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1546)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:296)     at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.postProcessAfterInitialization(DataSourceInitializerPostProcessor.java:62)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:421)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1559)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)     ... 57 more Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/home/dsyer/dev/boot/boot/spring-boot-autoconfigure/target/test-classes/schema.sql]: CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), ); nested exception is java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:474)     at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:208)     at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:49)     at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.runScripts(DataSourceInitializer.java:151)     at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.runSchemaScripts(DataSourceInitializer.java:77)     at org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.initialize(DataSourceInitializer.java:71)     at sun.reflect.GeneratedMethodAccessor380.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     ... 70 more Caused by: java.sql.SQLSyntaxErrorException: object name already exists: BAR in statement [CREATE TABLE BAR ( id INTEGER IDENTITY PRIMARY KEY, name VARCHAR(30), )]     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)     at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:459)     ... 81 more Caused by: org.hsqldb.HsqlException: object name already exists: BAR     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.SchemaObjectSet.checkAdd(Unknown Source)     at org.hsqldb.SchemaManager.checkSchemaObjectNotExists(Unknown Source)     at org.hsqldb.StatementSchema.setOrCheckObjectName(Unknown Source)     at org.hsqldb.StatementSchema.getResult(Unknown Source)     at org.hsqldb.StatementSchema.execute(Unknown Source)     at org.hsqldb.Session.executeCompiledStatement(Unknown Source)     at org.hsqldb.Session.executeDirectStatement(Unknown Source)     at org.hsqldb.Session.execute(Unknown Source)     ... 84 more ``` </body>
		<created>2014-10-15 09:13:50</created>
		<closed>2014-11-11 03:13:41</closed>
	</bug>
	<bug>
		<id>1711</id>
		<title>DataSource initialization fails for tests if @EnableCaching is on</title>
		<body>I ran into a strange issue when enabling caching on an app: my tests started failing due to the database not having been loaded with data from `data.sql`.   Here's a test case that reproduces it: https://github.com/ericdahl/spring-boot-db-initialization-test  ``` $ git clone https://github.com/ericdahl/spring-boot-db-initialization-test.git $ cd spring-boot-db-initialization-test $ mvn test ... (various output) 2014-10-14 10:31:46.998  INFO 3788 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : Executing SQL script from URL [file:/Users/edahl/repos/github/spring-boot-db-initialization-test/target/classes/schema.sql] 2014-10-14 10:31:46.999  INFO 3788 --- [           main] o.s.jdbc.datasource.init.ScriptUtils     : Executed SQL script from URL [file:/Users/edahl/repos/github/spring-boot-db-initialization-test/target/classes/schema.sql] in 1 ms. 2014-10-14 10:31:47.000  WARN 3788 --- [           main] o.s.b.a.jdbc.DataSourceInitializer       : Could not send event to complete DataSource initialization (ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.web.context.support.GenericWebApplicationContext@4cc5aa00: startup date [Tue Oct 14 10:31:45 PDT 2014]; root of context hierarchy) ... Expected: is a value greater than &lt;0&gt;      but: &lt;0&gt; was equal to &lt;0&gt; ```  If I comment out `@EnableCaching` in Application.java, the test passes and there's no warning message emitted from the DataSourceInitializer. Alternatively, if I comment out `@WebAppConfiguration` in the test, it passes.  This was reproduced with: - 1.1.7.RELEASE - 1.1.8.RELEASE - 1.2.0.BUILD-SNAPSHOT </body>
		<created>2014-10-14 17:36:07</created>
		<closed>2014-11-03 09:59:09</closed>
	</bug>
	<bug>
		<id>1706</id>
		<title>Dependency git-commit-id-plugin in v1.1.8.RELEASE is not in Maven Central</title>
		<body>Hi,  First, many thanks for Spring Boot, great project!  The `plugin git-commit-id-plugin` defined in `spring-boot-starters/spring-boot-starter-parent/pom.xml` is in version 2.1.11 in Spring Boot 1.1.8 (it was version 2.1.10 in Spring Boot 1.1.7).  The problem is that it seems that version 2.1.11 is not published in Maven Central.  My workaround is to force version 2.1.10 in my pom, and to reintroduce the workaround (removed in Spring Boot 1.1.8):  ``` &lt;!-- Workaround until 2.1.11 is released; should be an absolute path --&gt; &lt;generateGitPropertiesFilename&gt;target/classes/git.properties&lt;/generateGitPropertiesFilename&gt; ``` </body>
		<created>2014-10-14 09:24:55</created>
		<closed>2014-10-14 13:58:22</closed>
	</bug>
	<bug>
		<id>1701</id>
		<title>Rabbit MessagingTemplateConfiguration defines a jmsMessagingTemplate bean</title>
		<body>`MessagingTemplateConfiguration` for Rabbit defines a bean named `jmsMessagingTemplate`.  Check also http://stackoverflow.com/questions/26343373/spring-boot-1-2-0-m2-breaks-app  </body>
		<created>2014-10-13 16:26:20</created>
		<closed>2014-10-13 18:39:50</closed>
	</bug>
	<bug>
		<id>1696</id>
		<title>ArrayStoreException when using spring-boot-1.2.0.M2 on Wildfly 8.1.0</title>
		<body>i upgraded today from 1.2.0.M1 to 1.2.0.M2 in my development version and tried to deploy my app on wildfly 8.1.0. during app start i got this exception:  ``` 09:56:25,987 INFO  [org.springframework.core.annotation.AnnotationUtils] (MSC service thread 1-4) Failed to introspect annotations on [class org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration]: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy 09:56:25,988 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-4) MSC000001: Failed to start service jboss.undertow.deployment.default-server.default-host./steamstats: org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./steamstats: Failed to start service     at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1904) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [rt.jar:1.8.0_20]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [rt.jar:1.8.0_20]     at java.lang.Thread.run(Thread.java:745) [rt.jar:1.8.0_20] Caused by: java.lang.RuntimeException: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:219)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:87)     at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.start(UndertowDeploymentService.java:72)     at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1948) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]     at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1881) [jboss-msc-1.2.2.Final.jar:1.2.2.Final]     ... 3 more Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) [rt.jar:1.8.0_20]     at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) [rt.jar:1.8.0_20]     at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) [rt.jar:1.8.0_20]     at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) [rt.jar:1.8.0_20]     at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) [rt.jar:1.8.0_20]     at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) [rt.jar:1.8.0_20]     at java.lang.Class.createAnnotationData(Class.java:3508) [rt.jar:1.8.0_20]     at java.lang.Class.annotationData(Class.java:3497) [rt.jar:1.8.0_20]     at java.lang.Class.getDeclaredAnnotations(Class.java:3464) [rt.jar:1.8.0_20]     at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:371)     at org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:333)     at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:58)     at org.springframework.core.annotation.OrderUtils.getOrder(OrderUtils.java:47)     at org.springframework.core.annotation.AnnotationAwareOrderComparator.findOrder(AnnotationAwareOrderComparator.java:79)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:105)     at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:94)     at org.springframework.core.OrderComparator.doCompare(OrderComparator.java:77)     at org.springframework.core.OrderComparator.compare(OrderComparator.java:63)     at java.util.TimSort.countRunAndMakeAscending(TimSort.java:351) [rt.jar:1.8.0_20]     at java.util.TimSort.sort(TimSort.java:216) [rt.jar:1.8.0_20]     at java.util.Arrays.sort(Arrays.java:1438) [rt.jar:1.8.0_20]     at java.util.List.sort(List.java:478) [rt.jar:1.8.0_20]     at java.util.Collections.sort(Collections.java:175) [rt.jar:1.8.0_20]     at org.springframework.core.annotation.AnnotationAwareOrderComparator.sort(AnnotationAwareOrderComparator.java:111)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)     at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:179)     ... 7 more  09:56:25,997 ERROR [org.jboss.as.controller.management-operation] (XNIO-1 task-3) JBAS014613: Operation ("deploy") failed - address: ([("deployment" =&gt; "steamstats.war")]) - failure description: {"JBAS014671: Failed services" =&gt; {"jboss.undertow.deployment.default-server.default-host./steamstats" =&gt; "org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./steamstats: Failed to start service     Caused by: java.lang.RuntimeException: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy"}} 09:56:25,998 ERROR [org.jboss.as.server] (XNIO-1 task-3) JBAS015870: Deploy of deployment "steamstats.war" was rolled back with the following failure message:  {"JBAS014671: Failed services" =&gt; {"jboss.undertow.deployment.default-server.default-host./steamstats" =&gt; "org.jboss.msc.service.StartException in service jboss.undertow.deployment.default-server.default-host./steamstats: Failed to start service     Caused by: java.lang.RuntimeException: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy     Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy"}} ```  1.2.0.M1 works fine here </body>
		<created>2014-10-13 07:57:53</created>
		<closed>2014-10-13 10:23:06</closed>
	</bug>
	<bug>
		<id>1676</id>
		<title>EmbeddedServerPortFileWriter does not identify upper-case strings correctly</title>
		<body>It considers numbers to be lower-case. For example `FOO123` would be considered a lower-case string. </body>
		<created>2014-10-09 13:03:43</created>
		<closed>2014-10-09 13:27:45</closed>
	</bug>
	<bug>
		<id>1675</id>
		<title>spring.data.rest.baseUri configuration isn't honoured</title>
		<body>Originally reported in #1171. See [this comment](https://github.com/spring-projects/spring-boot/issues/1171#issuecomment-58384761) from @mraible. </body>
		<created>2014-10-09 09:04:35</created>
		<closed>2014-10-09 13:30:10</closed>
	</bug>
	<bug>
		<id>1664</id>
		<title>Actuator assumes that when Servlet.class is available spring-web will be too</title>
		<body>As [reported on StackOverflow](http://stackoverflow.com/questions/26190635/fabric8-spring-boot-and-camel-http-crash), with an actuator dependency, a Servlet API dependency, but no spring-web dependency, things fall in a heap:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'metricFilter' defined in class path resource [org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.servlet.Filter org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration.metricFilter()] threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/filter/OncePerRequestFilter     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:597)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:111)     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)     at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176)     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.servlet.Filter org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration.metricFilter()] threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/filter/OncePerRequestFilter     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:188)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586)     ... 41 common frames omitted Caused by: java.lang.NoClassDefFoundError: org/springframework/web/filter/OncePerRequestFilter     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:800)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)     at java.net.URLClassLoader.access$100(URLClassLoader.java:71)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration.metricFilter(MetricFilterAutoConfiguration.java:71)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$$EnhancerBySpringCGLIB$$b278e0c7.CGLIB$metricFilter$0(&lt;generated&gt;)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$$EnhancerBySpringCGLIB$$b278e0c7$$FastClassBySpringCGLIB$$965033f5.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:312)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$$EnhancerBySpringCGLIB$$b278e0c7.metricFilter(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166)     ... 42 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.web.filter.OncePerRequestFilter     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     ... 65 common frames omitted ``` </body>
		<created>2014-10-06 10:04:11</created>
		<closed>2014-10-06 11:12:22</closed>
	</bug>
	<bug>
		<id>1646</id>
		<title>Spring Boot Gradle Plugin "Duplicate library custom.jar"</title>
		<body>In a multi-project Gradle environment, while using Spring Boot Gradle Plugin for **subprojects**, the plugin throws the following exception:  ``` Caused by: java.lang.IllegalStateException: Duplicate library custom.jar         at org.springframework.boot.loader.tools.Repackager$1.library(Repackager.java:171)         at org.springframework.boot.gradle.repackage.ProjectLibraries.libraries(ProjectLibraries.java:162)         at org.springframework.boot.gradle.repackage.ProjectLibraries.doWithLibraries(ProjectLibraries.java:96)         at org.springframework.boot.loader.tools.Repackager.repackage(Repackager.java:161)         at org.springframework.boot.loader.tools.Repackager.repackage(Repackager.java:129)         at org.springframework.boot.gradle.repackage.RepackageTask$RepackageAction.repackage(RepackageTask.java:173)         at org.springframework.boot.gradle.repackage.RepackageTask$RepackageAction.execute(RepackageTask.java:138)         at org.springframework.boot.gradle.repackage.RepackageTask$RepackageAction.execute(RepackageTask.java:1)         at org.gradle.internal.Actions$FilteredAction.execute(Actions.java:203)         at org.gradle.api.internal.DefaultDomainObjectCollection.all(DefaultDomainObjectCollection.java:110)         at org.gradle.api.internal.DefaultDomainObjectCollection.withType(DefaultDomainObjectCollection.java:120)         at org.springframework.boot.gradle.repackage.RepackageTask.repackage(RepackageTask.java:89)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:63)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:218)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:211)         at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:200)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:579)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:562)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)         ... 44 more ```  The custom library is declared for the modules which need it like this:  ``` compile file('custom.jar') ```  Any ideas why this might be happening? </body>
		<created>2014-10-01 15:36:08</created>
		<closed>2014-10-01 18:21:01</closed>
	</bug>
	<bug>
		<id>1641</id>
		<title>Uber jar can't be executed from an UNC path</title>
		<body>Spring boot generated über jar for a simple `CommandLineRunner` app currently does not support being executed from a Windows UNC path such as `java -jar \\myhost\myshare\my-sb-app.jar`.  Boot first raises an `Unable to determine code source archive` `IllegalStateException` thrown by [Launcher](https://github.com/spring-projects/spring-boot/blob/fa88c481a5ee5c431ca2c11e297a0330ed71da74/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java#L151) because `path` variable don't get the leading "//" sequence.  This can be easily fixed by :  ``` diff     URI location = (codeSource == null ? null : codeSource.getLocation().toURI()); -   String path = (location == null ? null : location.getPath()); +   String path = (location == null ? null : location.getSchemeSpecificPart());     if (path == null) { ```  Second is in [ExecutableArchiveLauncher#createClassLoader](https://github.com/spring-projects/spring-boot/blob/fa88c481a5ee5c431ca2c11e297a0330ed71da74/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java#L80) where some wrong `file://myhost/myshare/my-sb-app.jar` URL is added to the `copy` variable while it should have been `file:////myhost/myshare/my-sb-app.jar` and subsequently ripped off by `#addDefaultClassloaderUrl`.  This time I don't know how to fix it for good (hence I'm not posting a PR), my dirty workaround is :  ``` java         if (loader instanceof URLClassLoader) {  final URL badURL = MyApplication.class.getProtectionDomain().getCodeSource().getLocation(); final URL goodURL = getArchive().getUrl();              for (URL url : ((URLClassLoader) loader).getURLs()) {  if (url.equals(badURL)) {     url = goodURL; }                  if (addDefaultClassloaderUrl(urls, url)) {                     copy.add(url);                 }             }         } ```  `loader` is `sun.misc.Launcher$AppClassLoader` running from JRE 7. </body>
		<created>2014-10-01 08:26:55</created>
		<closed>2014-10-10 02:24:06</closed>
	</bug>
	<bug>
		<id>1611</id>
		<title>Thymeleaf uses parent application context when using a child application context</title>
		<body>If one is using Thymeleaf in a Spring Boot web application where the web configuration is done via a child application context, then `org.thymeleaf.spring4.view.ThymeleafView` will use the parent application context.  More specifically `WebApplicationObjectSupport#getWebApplicationContext()` gets the parent context **NOT** the child-context as expected.  As a result you may experience the following exception when executing a Thymeleaf-bound web controller:  ``` 2014-09-24 13:53:12.656 ERROR 39246 --- [nio-9393-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: WebApplicationObjectSupport instance [org.thymeleaf.spring4.view.ThymeleafView@23e655f6] does not run in a WebApplicationContext but in: org.springframework.context.annotation.AnnotationConfigApplicationContext@5ae81e1: startup date [Wed Sep 24 13:52:51 EDT 2014]; root of context hierarchy] with root cause  java.lang.IllegalStateException: WebApplicationObjectSupport instance [org.thymeleaf.spring4.view.ThymeleafView@23e655f6] does not run in a WebApplicationContext but in: org.springframework.context.annotation.AnnotationConfigApplicationContext@5ae81e1: startup date [Wed Sep 24 13:52:51 EDT 2014]; root of context hierarchy     at org.springframework.web.context.support.WebApplicationObjectSupport.getWebApplicationContext(WebApplicationObjectSupport.java:109)     at org.springframework.web.context.support.WebApplicationObjectSupport.getServletContext(WebApplicationObjectSupport.java:125)     at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:199)     at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)     at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1221)     at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1005)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:952)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:280)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:89)     at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)     at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:683)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1070)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:611)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1736)     at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1695)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745) ```  As a work-around you can annotate your parent Spring Boot configuration class with:  ``` @EnableAutoConfiguration(exclude = { ThymeleafAutoConfiguration.class, ...}) ``` </body>
		<created>2014-09-24 17:58:23</created>
		<closed>2014-09-25 13:11:08</closed>
	</bug>
	<bug>
		<id>1591</id>
		<title>TomcatEmbeddedServletContainer does not fail if there are fatal errors in added secondary connectors (only the primary one)</title>
		<body>I think something is slightly wrong in the error handling of the TomcatEmbeddedServletContainer - check out this stack trace, which I got in an application (Mifos) where I've enabled multiple connectors in the embedded Tomcat, one for HTTP and one for HTTPS, as per http://docs.spring.io/spring-boot/docs/1.1.5.RELEASE/reference/htmlsingle/#howto-enable-multiple-connectors-in-tomcat, using https://github.com/vorburger/mifosx/blob/d987a6fccadaceec5538138e287194b596dc2c44/mifosng-provider/src/main/java/org/mifosplatform/EmbeddedTomcatWithSSLConfiguration.java, and despite this "error BindException: Address already in use" on the secondary HTTPS connector (the primary HTTP connector did not have a port conflict..), it did not abort as I would think it should have:  ``` 00:24:24.591 [main] INFO  o.s.w.s.h.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 00:24:25.273 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"] 00:24:25.290 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"] 00:24:25.298 [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read 00:24:25.314 [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8443"] 00:24:25.323 [main] ERROR o.a.coyote.http11.Http11NioProtocol - Failed to initialize end point associated with ProtocolHandler ["http-nio-8443"] java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.Net.bind(Net.java:414) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.Net.bind(Net.java:406) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0-jdk8-b132]     at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:646) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:434) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.coyote.http11.AbstractHttp11JsseProtocol.init(AbstractHttp11JsseProtocol.java:119) [tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.connector.Connector.initInternal(Connector.java:978) [tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102) [tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139) [tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.core.StandardService.addConnector(StandardService.java:241) [tomcat-embed-core-7.0.55.jar:7.0.55]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:175) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:149) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:272) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:132) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485) [spring-context-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:111) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] 00:24:25.326 [main] ERROR o.a.catalina.core.StandardService - Failed to start connector [Connector[org.apache.coyote.http11.Http11NioProtocol-8443]] org.apache.catalina.LifecycleException: Failed to initialize component [Connector[org.apache.coyote.http11.Http11NioProtocol-8443]]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:106) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.core.StandardService.addConnector(StandardService.java:241) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:175) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:149) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:272) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:132) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485) [spring-context-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:111) [spring-boot-1.1.6.RELEASE.jar:1.1.6.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.7.RELEASE.jar:4.0.7.RELEASE]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: org.apache.catalina.LifecycleException: Protocol handler initialization failed     at org.apache.catalina.connector.Connector.initInternal(Connector.java:980) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     ... 38 common frames omitted Caused by: java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.Net.bind(Net.java:414) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.Net.bind(Net.java:406) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214) ~[na:1.8.0-jdk8-b132]     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0-jdk8-b132]     at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:646) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:434) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.coyote.http11.AbstractHttp11JsseProtocol.init(AbstractHttp11JsseProtocol.java:119) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     at org.apache.catalina.connector.Connector.initInternal(Connector.java:978) ~[tomcat-embed-core-7.0.55.jar:7.0.55]     ... 39 common frames omitted 00:24:25.403 [main] INFO  c.s.j.s.s.c.servlet.SpringServlet - Using default applicationContext 00:24:25.410 [main] INFO  c.s.j.s.s.c.SpringComponentProviderFactory - Registering Spring bean, accountingRuleApiResource, of type org.mifosplatform.accounting.rule.api.AccountingRuleApiResource as a root resource class ```  I had a quick peek at the code, and have noticed that org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start() has this:  ```         // Ensure process isn't left running if it actually failed to start         if (LifecycleState.FAILED.equals(this.tomcat.getConnector().getState())) {             stopSilently();             throw new IllegalStateException("Tomcat connector in failed state");         } ```  but that only covers the single one and only primary connector - shouldn't this be moved into or something similar also added in that `for (Connector connector : connectors)` loop inside addPreviouslyRemovedConnectors() ?  And maybe even `for (Service service : services)` as well?  PS: All this handling is needed because Tomcat doesn't propagate exceptions such as BindException from Connectors - it just logs them, sets the Lifecycle status to failed - but then "swallows" them - the way that's writing makes it less suitable for embedding - as calling code has to do handling, like this issue. </body>
		<created>2014-09-20 22:48:55</created>
		<closed>2014-09-23 11:08:03</closed>
	</bug>
	<bug>
		<id>1581</id>
		<title>spring-boot: tomcat: if management port is different from the app port, the app's access.log goes to /tmp/tomcat.xxxxx.port</title>
		<body>spring-boot 1.1.6 http://stackoverflow.com/questions/23596157/spring-boot-tomcat-access-logs The issue exists since 1.1 Steps to reproduce 1. in application.properties, define management port = 7081 2. in application.properties, define the app port to be anything but 7081 3. in application.properties, set the server.tomcat.base=/home/mydir 4. Start the spring-boot project with tomcat as the web server expected: access log goes to /home/mydir actual: after a few days, the access.log will suddenly appears in /tmp/tomcat.xxxx.port_number I have cloud deployment that needs to do log rotation. Prefer to centralize everything to one single directory. </body>
		<created>2014-09-18 15:04:02</created>
		<closed>2014-09-25 16:43:21</closed>
	</bug>
	<bug>
		<id>1575</id>
		<title>404 errors are not handled correctly when application is deployed as WAR to WebSphere (Cannot forward. Response already committed)</title>
		<body>The bug happens with 1.1.5.RELEASE and 1.2.0.BUILD-SNAPSHOT.  Using this project: https://github.com/spring-guides/gs-convert-jar-to-war-maven/tree/master/complete , deployed as a WAR to IBM WebSphere 8.0.0.9 (However, it works correctly on Tomcat), when I visit a non-existent page (For example: `curl -i http://localhost:9080/gs-convert-jar-to-war-maven/nonexistent`), I get HTTP 200 response and a blank page:  ``` HTTP/1.1 200 OK X-Powered-By: Servlet/3.0 Content-Language: en-US Transfer-Encoding: chunked Date: Thu, 18 Sep 2014 05:04:26 GMT  ```  (This is the whole response, there is no body)  And I get this stack trace in the WebSphere logs:  ``` [9/18/14 8:04:26:866 AST] 0000002d SystemOut     O com.ibm.ws.logging.WsLogger deliverOrBuffer 2014-09-18 08:04:26.866  WARN 1996 --- [ebContainer : 9] c.i.w.w.srt.SRTServletResponse           : WARNING: Cannot set status. Response already committed.  [9/18/14 8:04:26:869 AST] 0000002d SystemOut     O   2014-09-18 08:04:26.869 ERROR 1996 --- [ebContainer : 9] o.s.boot.context.web.ErrorPageFilter     : Forwarding to error page from request [/nonexistent] due to exception [Cannot forward. Response already committed.]  java.lang.IllegalStateException: Cannot forward. Response already committed.         at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1149)         at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)         at org.springframework.boot.context.web.ErrorPageFilter.handleErrorStatus(ErrorPageFilter.java:134)         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:111)         at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:58)         at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:87)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:100)         at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)         at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)         at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)         at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)         at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3815)         at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:304)         at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:981)         at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)         at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)         at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214)         at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113)         at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)         at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)         at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)         at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)         at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)         at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)         at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)         at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702)   [9/18/14 8:04:26:870 AST] 0000002d SystemOut     O   2014-09-18 08:04:26.870 ERROR 1996 --- [ebContainer : 9] o.s.boot.context.web.ErrorPageFilter     : Cannot forward to error page for/gs-convert-jar-to-war-maven/nonexistent (response is committed), so this response may have the wrong status code  java.lang.IllegalStateException: Cannot forward. Response already committed.         at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1149)         at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)         at org.springframework.boot.context.web.ErrorPageFilter.handleErrorStatus(ErrorPageFilter.java:134)         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:111)         at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:58)         at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:87)         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)         at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:100)         at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)         at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)         at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)         at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)         at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3815)         at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:304)         at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:981)         at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)         at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)         at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)         at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214)         at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113)         at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)         at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)         at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)         at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)         at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)         at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)         at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)         at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702)   ``` </body>
		<created>2014-09-18 05:06:55</created>
		<closed>2014-09-25 18:07:09</closed>
	</bug>
	<bug>
		<id>1572</id>
		<title>spring.data.mongodb.password can't convert sring to char[]</title>
		<body>if write password into spring.data.mongodb.password property of application.properties file we will see this exception  ``` Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors Field error in object 'spring.data.mongodb' on field 'password': rejected value [password]; codes [typeMismatch.spring.data.mongodb.password,typeMismatch.password,typeMismatch.[C,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [spring.data.mongodb.password,password]; arguments []; default message [password]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'char[]' for property 'password'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type char[]]     at org.springframework.boot.bind.PropertiesConfigurationFactory.validate(PropertiesConfigurationFactory.java:293)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:278)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:225)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:297)     ... 134 more ``` </body>
		<created>2014-09-17 17:24:21</created>
		<closed>2014-09-24 23:05:45</closed>
	</bug>
	<bug>
		<id>1548</id>
		<title>When deploying as a WAR, "Bad Credentials" error from Spring Security uses container error page instead of Spring error handler</title>
		<body>Steps to reproduce: 1. Get this sample application:  https://github.com/spring-guides/gs-convert-jar-to-war-maven/tree/master/complete . 2. Add `spring-boot-starter-security` to pom.xml . 3. `mvn package` to get the WAR file. 4. Deploy the WAR file to a servlet container (I tried Tomcat and Websphere). 5. `curl --user invalid:credentials http://localhost:10080/gs-convert-jar-to-war-maven/` (I have tomcat running on port 10080)  The output is:  ``` &lt;html&gt;&lt;head&gt;&lt;title&gt;Apache Tomcat/7.0.54 - Error report&lt;/title&gt;&lt;style&gt;&lt;!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--&gt;&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 401 - Bad credentials&lt;/h1&gt;&lt;HR size="1" noshade="noshade"&gt;&lt;p&gt;&lt;b&gt;type&lt;/b&gt; Status report&lt;/p&gt;&lt;p&gt;&lt;b&gt;message&lt;/b&gt; &lt;u&gt;Bad credentials&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;description&lt;/b&gt; &lt;u&gt;This request requires HTTP authentication.&lt;/u&gt;&lt;/p&gt;&lt;HR size="1" noshade="noshade"&gt;&lt;h3&gt;Apache Tomcat/7.0.54&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; ```  **Notes:** - The bug only happens with "Bad Credentials". Other errors are handled correctly, for example:`curl http://localhost:10080/gs-convert-jar-to-war-maven/` (no user credentials supplied)      ```   {"timestamp":1410409793317,"status":401,"error":"Unauthorized","message":"Full authentication is required to access this resource"}   ``` - The bug only happens when deployed as a WAR file, running the application directly using `java -jar` does not trigger the bug. For example: `curl --user invalid:credentials http://localhost:8080/`      ```   {"timestamp":1410410056046,"status":401,"error":"Unauthorized","message":"Bad credentials","path":"/"}   ``` </body>
		<created>2014-09-11 04:36:57</created>
		<closed>2014-09-13 16:01:28</closed>
	</bug>
	<bug>
		<id>1543</id>
		<title>After upgrading from Spring Boot 1.1.5 to 1.1.6, gradle build fails with “Duplicate library commons-io-1.3.2.jar” in the :bootRepackage task</title>
		<body>I ran into an issue with the :bootRepackage task after upgrading from Spring Boot 1.1.5 to 1.1.6 and posted it on StackOverflow:  http://stackoverflow.com/questions/25772342/after-upgrading-from-spring-boot-1-1-5-to-1-1-6-gradle-build-fails-with-duplic  Andy Wilkinson suggested that it was related to this issue:  https://github.com/spring-projects/spring-boot/issues/1475  and encouraged me to file a new issue, so that's what I'm doing :-) </body>
		<created>2014-09-10 19:23:59</created>
		<closed>2014-09-15 14:45:27</closed>
	</bug>
	<bug>
		<id>1538</id>
		<title>JTA auto-configuration makes faulty assumptions about which classes are available</title>
		<body>I'm trying to deploy a Boot application packaged as a WAR to Websphere 8.0.0.9. It works with Boot `1.1.5`, but fails with `1.2.0.M1` and `1.2.0.BUILD-SNAPSHOT`.  This is the Websphere log output from running https://github.com/spring-guides/gs-convert-jar-to-war-maven/tree/master/complete (after changing Boot version in pom.xml to `1.2.0.BUILD-SNAPSHOT`):  ``` [9/10/14 13:47:00:453 AST] 0000007b SystemErr     R   SLF4J: Class path contains multiple SLF4J bindings. [9/10/14 13:47:00:454 AST] 0000007b SystemErr     R   SLF4J: Found binding in [bundleresource://221.fwk2022518212:1/org/slf4j/impl/StaticLoggerBinder.class] [9/10/14 13:47:00:454 AST] 0000007b SystemErr     R   SLF4J: Found binding in [wsjar:file:/D:/Java/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/WSDVIRGNode01Cell/gs-convert-jar-to-war-maven.ear/gs-convert-jar-to-war-maven-0.1.0.war/WEB-INF/lib/logback-classic-1.1.2.jar!/org/slf4j/impl/StaticLoggerBinder.class] [9/10/14 13:47:00:454 AST] 0000007b SystemErr     R   SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. [9/10/14 13:47:00:542 AST] 0000007b SystemErr     R   SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder] [9/10/14 13:47:00:545 AST] 0000007b SystemOut     O com.ibm.ws.logging.WsLogger deliverOrBuffer 2014-09-10 13:47:00.545  INFO 3972 --- [bContainer : 34] com.ibm.ws.webcontainer.webapp           : SRVE0292I: Servlet Message - [gs-convert-jar-to-war-maven#gs-convert-jar-to-war-maven-0.1.0.war]:.Spring WebApplicationInitializers detected on classpath: [hello.WebInitializer@792edca2]  [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O    [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O     .   ____          _            __ _ _ [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O    /\\ / ____ __ _ _(_)_ __  __ _ \ \ \ \ [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O   ( ( )\___ | _ | _| | _ \/ _` | \ \ \ \ [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O    \\/  ___)| |_)| | | | | || (_| |  ) ) ) ) [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O       |____| .__|_| |_|_| |_\__, | / / / / [9/10/14 13:47:01:441 AST] 0000007b SystemOut     O    =========|_|==============|___/=/_/_/_/ [9/10/14 13:47:01:443 AST] 0000007b SystemOut     O    :: Spring Boot ::  (v1.2.0.BUILD-SNAPSHOT) [9/10/14 13:47:01:443 AST] 0000007b SystemOut     O   null [9/10/14 13:47:01:597 AST] 0000007b SystemOut     O   2014-09-10 13:47:01.594  INFO 3972 --- [bContainer : 34] o.s.boot.SpringApplication               : Starting application on WSDVIRG with PID 3972 (D:\Java\IBM\WebSphere\AppServer\profiles\AppSrv01\installedApps\WSDVIRGNode01Cell\gs-convert-jar-to-war-maven.ear\gs-convert-jar-to-war-maven-0.1.0.war\WEB-INF\lib\spring-boot-1.2.0.BUILD-SNAPSHOT.jar started by CSDVIRG in D:\Java\IBM\WebSphere\AppServer\profiles\AppSrv01)  [9/10/14 13:47:01:641 AST] 0000007b SystemOut     O   2014-09-10 13:47:01.641  INFO 3972 --- [bContainer : 34] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@eafcd822: startup date [Wed Sep 10 13:47:01 AST 2014]; root of context hierarchy  [9/10/14 13:47:02:485 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.485  INFO 3972 --- [bContainer : 34] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean beanNameViewResolver: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]]  [9/10/14 13:47:02:590 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.590  INFO 3972 --- [bContainer : 34] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: unknown  [9/10/14 13:47:02:605 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.605 ERROR 3972 --- [bContainer : 34] o.s.boot.SpringApplication               : Application startup failed  java.lang.IllegalStateException: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:51)     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:92)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:424)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:133)     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:122)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:318)     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:707)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:324)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:143)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initializeServletContainerInitializers(WebAppImpl.java:609)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:405)     at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88)     at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:746)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634)     at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:422)     at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:714)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1165)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1369)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:967)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:771)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1362)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2163)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389)     at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$1.run(CompositionUnitMgrImpl.java:607)     at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5468)     at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5594)     at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:621)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:565)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1252)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:69)     at sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:272)     at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1152)     at java.security.AccessController.doPrivileged(AccessController.java:298)     at com.ibm.oti.security.CheckedAccessControlContext.securityCheck(CheckedAccessControlContext.java:30)     at sun.misc.JavaSecurityAccessWrapper.doIntersectionPrivilege(JavaSecurityAccessWrapper.java:41)     at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1146)     at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:999)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:847)     at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:783)     at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1335)     at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118)     at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1228)     at com.ibm.ws.management.commands.AdminServiceCommands$InvokeCmd.execute(AdminServiceCommands.java:251)     at com.ibm.ws.console.core.mbean.MBeanHelper.invoke(MBeanHelper.java:241)     at com.ibm.ws.console.appdeployment.ApplicationDeploymentCollectionAction.execute(ApplicationDeploymentCollectionAction.java:578)     at org.apache.struts.action.RequestProcessor.processActionPerform(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1385)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)     at org.apache.struts.action.RequestProcessor.doForward(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.doForward(Unknown Source)     at org.apache.struts.action.RequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.setUpCommandAssistance(WSCUrlFilter.java:955)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.continueStoringTaskState(WSCUrlFilter.java:504)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.doFilter(WSCUrlFilter.java:325)     at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:87)     at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:914)     at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)     at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1049)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.readyInboundPostHandshake(SSLConnectionLink.java:717)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink$MyHandshakeCompletedCallback.complete(SSLConnectionLink.java:413)     at com.ibm.ws.ssl.channel.impl.SSLUtils.handleHandshake(SSLUtils.java:1072)     at com.ibm.ws.ssl.channel.impl.SSLHandshakeIOCallback.complete(SSLHandshakeIOCallback.java:87)     at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)     at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)     at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)     at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)     at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)     at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)     at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702) Caused by: java.lang.NoClassDefFoundError: org.springframework.transaction.jta.JtaTransactionManager     at java.lang.Class.getDeclaredMethodsImpl(Native Method)     at java.lang.Class.getDeclaredMethods(Class.java:749)     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:570)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:489)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:473)     at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:533)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:678)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:622)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:592)     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1394)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:404)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:373)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:162)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:150)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:119)     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:81)     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:45)     ... 125 common frames omitted Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.jta.JtaTransactionManager     at java.net.URLClassLoader.findClass(URLClassLoader.java:434)     at com.ibm.ws.bootstrap.ExtClassLoader.findClass(ExtClassLoader.java:230)     at java.lang.ClassLoader.loadClassHelper(ClassLoader.java:703)     at java.lang.ClassLoader.loadClass(ClassLoader.java:682)     at com.ibm.ws.bootstrap.ExtClassLoader.loadClass(ExtClassLoader.java:123)     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)     at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:62)     at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:58)     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:566)     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:566)     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)     ... 142 common frames omitted   [9/10/14 13:47:02:607 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.607  INFO 3972 --- [bContainer : 34] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@eafcd822: startup date [Wed Sep 10 13:47:01 AST 2014]; root of context hierarchy  [9/10/14 13:47:02:614 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.614  WARN 3972 --- [bContainer : 34] ationConfigEmbeddedWebApplicationContext : Exception thrown from ApplicationListener handling ContextClosedEvent  java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call refresh before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@eafcd822: startup date [Wed Sep 10 13:47:01 AST 2014]; root of context hierarchy     at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:344)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)     at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:869)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose(EmbeddedWebApplicationContext.java:141)     at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:836)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:346)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:143)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initializeServletContainerInitializers(WebAppImpl.java:609)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:405)     at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88)     at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:746)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634)     at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:422)     at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:714)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1165)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1369)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:967)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:771)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1362)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2163)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389)     at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$1.run(CompositionUnitMgrImpl.java:607)     at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5468)     at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5594)     at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:621)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:565)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1252)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:69)     at sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:272)     at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1152)     at java.security.AccessController.doPrivileged(AccessController.java:298)     at com.ibm.oti.security.CheckedAccessControlContext.securityCheck(CheckedAccessControlContext.java:30)     at sun.misc.JavaSecurityAccessWrapper.doIntersectionPrivilege(JavaSecurityAccessWrapper.java:41)     at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1146)     at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:999)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:847)     at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:783)     at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1335)     at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118)     at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1228)     at com.ibm.ws.management.commands.AdminServiceCommands$InvokeCmd.execute(AdminServiceCommands.java:251)     at com.ibm.ws.console.core.mbean.MBeanHelper.invoke(MBeanHelper.java:241)     at com.ibm.ws.console.appdeployment.ApplicationDeploymentCollectionAction.execute(ApplicationDeploymentCollectionAction.java:578)     at org.apache.struts.action.RequestProcessor.processActionPerform(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1385)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)     at org.apache.struts.action.RequestProcessor.doForward(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.doForward(Unknown Source)     at org.apache.struts.action.RequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.setUpCommandAssistance(WSCUrlFilter.java:955)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.continueStoringTaskState(WSCUrlFilter.java:504)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.doFilter(WSCUrlFilter.java:325)     at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:87)     at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:914)     at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)     at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1049)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.readyInboundPostHandshake(SSLConnectionLink.java:717)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink$MyHandshakeCompletedCallback.complete(SSLConnectionLink.java:413)     at com.ibm.ws.ssl.channel.impl.SSLUtils.handleHandshake(SSLUtils.java:1072)     at com.ibm.ws.ssl.channel.impl.SSLHandshakeIOCallback.complete(SSLHandshakeIOCallback.java:87)     at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)     at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)     at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)     at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)     at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)     at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)     at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702)   [9/10/14 13:47:02:620 AST] 0000007b SystemOut     O   2014-09-10 13:47:02.620  WARN 3972 --- [bContainer : 34] ationConfigEmbeddedWebApplicationContext : Exception thrown from LifecycleProcessor on context close  java.lang.IllegalStateException: LifecycleProcessor not initialized - call refresh before invoking lifecycle methods via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@eafcd822: startup date [Wed Sep 10 13:47:01 AST 2014]; root of context hierarchy     at org.springframework.context.support.AbstractApplicationContext.getLifecycleProcessor(AbstractApplicationContext.java:357)     at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:877)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose(EmbeddedWebApplicationContext.java:141)     at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:836)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:346)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:143)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initializeServletContainerInitializers(WebAppImpl.java:609)     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:405)     at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88)     at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:746)     at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634)     at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:422)     at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:714)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1165)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1369)     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639)     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:967)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:771)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1362)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2163)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389)     at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$1.run(CompositionUnitMgrImpl.java:607)     at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5468)     at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5594)     at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:621)     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:565)     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1252)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:69)     at sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)     at java.lang.reflect.Method.invoke(Method.java:611)     at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:272)     at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1152)     at java.security.AccessController.doPrivileged(AccessController.java:298)     at com.ibm.oti.security.CheckedAccessControlContext.securityCheck(CheckedAccessControlContext.java:30)     at sun.misc.JavaSecurityAccessWrapper.doIntersectionPrivilege(JavaSecurityAccessWrapper.java:41)     at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1146)     at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:999)     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:847)     at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:783)     at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1335)     at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118)     at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1228)     at com.ibm.ws.management.commands.AdminServiceCommands$InvokeCmd.execute(AdminServiceCommands.java:251)     at com.ibm.ws.console.core.mbean.MBeanHelper.invoke(MBeanHelper.java:241)     at com.ibm.ws.console.appdeployment.ApplicationDeploymentCollectionAction.execute(ApplicationDeploymentCollectionAction.java:578)     at org.apache.struts.action.RequestProcessor.processActionPerform(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1385)     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)     at org.apache.struts.action.RequestProcessor.doForward(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.doForward(Unknown Source)     at org.apache.struts.action.RequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(Unknown Source)     at org.apache.struts.action.RequestProcessor.process(Unknown Source)     at org.apache.struts.action.ActionServlet.process(Unknown Source)     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.setUpCommandAssistance(WSCUrlFilter.java:955)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.continueStoringTaskState(WSCUrlFilter.java:504)     at com.ibm.ws.console.core.servlet.WSCUrlFilter.doFilter(WSCUrlFilter.java:325)     at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)     at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:87)     at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:914)     at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)     at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1049)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.readyInboundPostHandshake(SSLConnectionLink.java:717)     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink$MyHandshakeCompletedCallback.complete(SSLConnectionLink.java:413)     at com.ibm.ws.ssl.channel.impl.SSLUtils.handleHandshake(SSLUtils.java:1072)     at com.ibm.ws.ssl.channel.impl.SSLHandshakeIOCallback.complete(SSLHandshakeIOCallback.java:87)     at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)     at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)     at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)     at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)     at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)     at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)     at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702)   [9/10/14 13:47:02:633 AST] 0000007b SystemOut     O com.ibm.ws.logging.WsLogger deliverOrBuffer 2014-09-10 13:47:02.633 ERROR 3972 --- [bContainer : 34] com.ibm.ws.webcontainer.webapp           : SRVE0015E: Failure to initialize Web application gs-convert-jar-to-war-maven-0.1.0.war  [9/10/14 13:47:02:650 AST] 0000007b SystemOut     O com.ibm.ejs.ras.Tr logToJSR47Logger 2014-09-10 13:47:02.650  WARN 3972 --- [bContainer : 34] c.i.w.r.c.DeployedApplicationImpl        : WSVR0206E: Module, gs-convert-jar-to-war-maven-0.1.0.war, of application, gs-convert-jar-to-war-maven.ear/deployments/gs-convert-jar-to-war-maven, failed to start  [9/10/14 13:47:02:652 AST] 0000007b SystemOut     O com.ibm.ejs.ras.Tr logToJSR47Logger 2014-09-10 13:47:02.652  WARN 3972 --- [bContainer : 34] c.i.w.r.component.ApplicationMgrImpl     : WSVR0101W: An error occurred starting, gs-convert-jar-to-war-maven  [9/10/14 13:47:02:653 AST] 0000007b SystemOut     O com.ibm.ejs.ras.Tr logToJSR47Logger 2014-09-10 13:47:02.653  WARN 3972 --- [bContainer : 34] c.i.w.r.component.ApplicationMgrImpl     : WSVR0217I: Stopping application: gs-convert-jar-to-war-maven  [9/10/14 13:47:02:657 AST] 0000007b SystemOut     O com.ibm.ejs.ras.Tr logToJSR47Logger 2014-09-10 13:47:02.657  WARN 3972 --- [bContainer : 34] c.i.w.r.component.ApplicationMgrImpl     : WSVR0220I: Application stopped: gs-convert-jar-to-war-maven  [9/10/14 13:47:02:658 AST] 0000007b SystemOut     O   WARN: The method class org.apache.commons.logging.impl.SLF4JLogFactory#release() was invoked. [9/10/14 13:47:02:658 AST] 0000007b SystemOut     O   WARN: Please see http://www.slf4j.org/codes.html#release for an explanation. [9/10/14 13:47:02:659 AST] 0000007b SystemOut     O com.ibm.ejs.ras.Tr logToJSR47Logger 2014-09-10 13:47:02.659 ERROR 3972 --- [bContainer : 34] c.i.w.r.c.CompositionUnitMgrImpl         : WSVR0194E: Composition unit WebSphere:cuname=gs-convert-jar-to-war-maven in BLA WebSphere:blaname=gs-convert-jar-to-war-maven failed to start.  [9/10/14 13:47:02:660 AST] 0000007b SystemOut     O com.ibm.ws.logging.WsLogger deliverOrBuffer 2014-09-10 13:47:02.660 ERROR 3972 --- [bContainer : 34] c.ibm.ws.console.core.mbean.MBeanHelper  : Could not invoke an operation on object: WebSphere:name=ApplicationManager,process=server1,platform=proxy,node=WSDVIRGNode01,version=8.0.0.9,type=ApplicationManager,mbeanIdentifier=ApplicationManager,cell=WSDVIRGNode01Cell,spec=1.0 because of an mbean exception: com.ibm.ws.exception.RuntimeWarning: com.ibm.ws.webcontainer.exception.WebAppNotLoadedException: Failed to load webapp: Failed to load webapp: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package &amp;amp;#40&amp;#59;e.g. if you put a @ComponentScan in the default package by mistake&amp;amp;#41&amp;#59;  [9/10/14 13:47:02:660 AST] 0000007b SystemErr     R   com.ibm.ws.exception.RuntimeWarning: com.ibm.ws.webcontainer.exception.WebAppNotLoadedException: Failed to load webapp: Failed to load webapp: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package &amp;amp;#40&amp;#59;e.g. if you put a @ComponentScan in the default package by mistake&amp;amp;#41&amp;#59;null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:428)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:714)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1165)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1369)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:639)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:967)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:771)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplicationDynamically(ApplicationMgrImpl.java:1362)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:2163)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:389)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitImpl.start(CompositionUnitImpl.java:123)null [9/10/14 13:47:02:661 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.start(CompositionUnitMgrImpl.java:332)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.access$500(CompositionUnitMgrImpl.java:119)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl$1.run(CompositionUnitMgrImpl.java:607)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.security.auth.ContextManagerImpl.runAs(ContextManagerImpl.java:5468)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.security.auth.ContextManagerImpl.runAsSystem(ContextManagerImpl.java:5594)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.security.core.SecurityContext.runAsSystem(SecurityContext.java:255)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:621)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.CompositionUnitMgrImpl.startCompositionUnit(CompositionUnitMgrImpl.java:565)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:1252)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at java.lang.reflect.Method.invoke(Method.java:611)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:69)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at java.lang.reflect.Method.invoke(Method.java:611)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:272)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1152)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at java.security.AccessController.doPrivileged(AccessController.java:298)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at com.ibm.oti.security.CheckedAccessControlContext.securityCheck(CheckedAccessControlContext.java:30)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at sun.misc.JavaSecurityAccessWrapper.doIntersectionPrivilege(JavaSecurityAccessWrapper.java:41)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1146)null [9/10/14 13:47:02:662 AST] 0000007b SystemErr     R     at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:999)null [9/10/14 13:47:02:663 AST] 0000007b SystemErr     R     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:847)null [9/10/14 13:47:02:663 AST] 0000007b SystemErr     R     at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:783)null [9/10/14 13:47:02:663 AST] 0000007b SystemErr     R     at com.ibm.ws.management.AdminServiceImpl$1.run(AdminServiceImpl.java:1335)null [9/10/14 13:47:02:663 AST] 0000007b SystemErr     R     at com.ibm.ws.security.util.AccessController.doPrivileged(AccessController.java:118)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.management.AdminServiceImpl.invoke(AdminServiceImpl.java:1228)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.management.commands.AdminServiceCommands$InvokeCmd.execute(AdminServiceCommands.java:251)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.console.core.mbean.MBeanHelper.invoke(MBeanHelper.java:241)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.console.appdeployment.ApplicationDeploymentCollectionAction.execute(ApplicationDeploymentCollectionAction.java:578)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at org.apache.struts.action.RequestProcessor.processActionPerform(Unknown Source)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at org.apache.struts.action.RequestProcessor.process(Unknown Source)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at org.apache.struts.action.ActionServlet.process(Unknown Source)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)null [9/10/14 13:47:02:665 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:79)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:1385)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:194)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.action.RequestProcessor.doForward(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.tiles.TilesRequestProcessor.doForward(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.action.RequestProcessor.processForwardConfig(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.action.RequestProcessor.process(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.action.ActionServlet.process(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at org.apache.struts.action.ActionServlet.doPost(Unknown Source)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at javax.servlet.http.HttpServlet.service(HttpServlet.java:595)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1230)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:779)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:178)null [9/10/14 13:47:02:666 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.invokeTarget(WebAppFilterChain.java:136)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:97)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.console.core.servlet.WSCUrlFilter.setUpCommandAssistance(WSCUrlFilter.java:955)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.console.core.servlet.WSCUrlFilter.continueStoringTaskState(WSCUrlFilter.java:504)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.console.core.servlet.WSCUrlFilter.doFilter(WSCUrlFilter.java:325)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:195)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:91)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:960)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.filter.WebAppFilterManager.invokeFilters(WebAppFilterManager.java:1064)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:87)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:914)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.WSWebContainer.handleRequest(WSWebContainer.java:1662)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:200)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:453)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewRequest(HttpInboundLink.java:515)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.processRequest(HttpInboundLink.java:306)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:277)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.determineNextChannel(SSLConnectionLink.java:1049)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink.readyInboundPostHandshake(SSLConnectionLink.java:717)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.ssl.channel.impl.SSLConnectionLink$MyHandshakeCompletedCallback.complete(SSLConnectionLink.java:413)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.ssl.channel.impl.SSLUtils.handleHandshake(SSLUtils.java:1072)null [9/10/14 13:47:02:667 AST] 0000007b SystemErr     R     at com.ibm.ws.ssl.channel.impl.SSLHandshakeIOCallback.complete(SSLHandshakeIOCallback.java:87)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:175)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:138)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:204)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:775)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:905)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1702)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R   Caused by: com.ibm.ws.webcontainer.exception.WebAppNotLoadedException: Failed to load webapp: Failed to load webapp: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package &amp;amp;#40&amp;#59;e.g. if you put a @ComponentScan in the default package by mistake&amp;amp;#41&amp;#59;null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:759)null [9/10/14 13:47:02:668 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.WSWebContainer.addWebApplication(WSWebContainer.java:634)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:422)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     ... 101 morenull [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R   Caused by: com.ibm.ws.webcontainer.exception.WebAppNotLoadedException: Failed to load webapp: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package &amp;#40;e.g. if you put a @ComponentScan in the default package by mistake&amp;#41;null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:176)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:746)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     ... 103 morenull [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R   Caused by: java.lang.IllegalStateException: Could not evaluate condition owing to internal class not found. This can happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:51)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:92)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:424)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:133)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:122)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:318)null [9/10/14 13:47:02:669 AST] 0000007b SystemErr     R     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:109)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:707)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.SpringApplication.run(SpringApplication.java:324)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:143)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initializeServletContainerInitializers(WebAppImpl.java:609)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.webapp.WebAppImpl.initialize(WebAppImpl.java:405)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.webapp.WebGroupImpl.addWebApplication(WebGroupImpl.java:88)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:169)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     ... 104 morenull [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R   Caused by: java.lang.NoClassDefFoundError: org.springframework.transaction.jta.JtaTransactionManagernull [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at java.lang.Class.getDeclaredMethodsImpl(Native Method)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at java.lang.Class.getDeclaredMethods(Class.java:749)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:570)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:489)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:473)null [9/10/14 13:47:02:670 AST] 0000007b SystemErr     R     at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:533)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:678)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:622)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:592)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1394)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:404)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:373)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:162)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:150)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:119)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:81)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:45)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     ... 125 morenull [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R   Caused by: java.lang.ClassNotFoundException: org.springframework.transaction.jta.JtaTransactionManagernull [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at java.net.URLClassLoader.findClass(URLClassLoader.java:434)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at com.ibm.ws.bootstrap.ExtClassLoader.findClass(ExtClassLoader.java:230)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at java.lang.ClassLoader.loadClassHelper(ClassLoader.java:703)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at java.lang.ClassLoader.loadClass(ClassLoader.java:682)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at com.ibm.ws.bootstrap.ExtClassLoader.loadClass(ExtClassLoader.java:123)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:62)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at com.ibm.ws.classloader.ProtectionClassLoader.loadClass(ProtectionClassLoader.java:58)null [9/10/14 13:47:02:671 AST] 0000007b SystemErr     R     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:566)null [9/10/14 13:47:02:672 AST] 0000007b SystemErr     R     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)null [9/10/14 13:47:02:672 AST] 0000007b SystemErr     R     at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:566)null [9/10/14 13:47:02:672 AST] 0000007b SystemErr     R     at java.lang.ClassLoader.loadClass(ClassLoader.java:665)null [9/10/14 13:47:02:672 AST] 0000007b SystemErr     R     ... 142 morenull ``` </body>
		<created>2014-09-10 10:49:51</created>
		<closed>2014-09-15 14:05:48</closed>
	</bug>
	<bug>
		<id>1534</id>
		<title>No difference between spring-boot-sample-web-secure-jdbc and spring-boot-sample-web-secure?</title>
		<body>Doing a file comparison, it seems that the only difference between these 2 samples is the ordering of a few lines in the pom.xml.  Seems like either they are duplicates and one is unnecessary or that one needs to be changed to contain significant differences. </body>
		<created>2014-09-09 19:35:17</created>
		<closed>2014-09-13 11:44:09</closed>
	</bug>
	<bug>
		<id>1528</id>
		<title>Asterisks in metrics causing incompatibility with codahale metrics</title>
		<body>After upgrading from 1.1.4 to 1.1.6, I'm now getting exceptions with both the JmxReporter and CsvReporter reporters in the codahale metrics library due to the asterisks now present in the static resource metrics.  e.g. gauge.response.**.favicon.ico  This causes both the MBean registration and creation of the CSV file to fail.  Is there any way to optionally change the asterisks for something else, or to exclude these metrics from being registered with the MetricRegistry? </body>
		<created>2014-09-08 13:43:14</created>
		<closed>2014-09-13 12:10:12</closed>
	</bug>
	<bug>
		<id>1520</id>
		<title>JndiObjectFactoryBean not recognizing Datasource.class and unbinding on close</title>
		<body>We are trying to use the JndiObjectFactoryBean to retrieve our Datasources following the pattern of the jee tag for Spring Boot and getting the following exception:  ``` Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public javax.sql.DataSource org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$NonEmbeddedConfiguration.dataSource()] threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Cannot determine embedded database driver class for database type NONE. If you want an embedded database please put a supported one on the classpath.     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:188)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586)     ... 274 common frames omitted     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)Caused by: org.springframework.beans.factory.BeanCreationException: Cannot determine embedded database driver class for database type NONE. If you want an embedded database please put a supported one on the classpath.     at org.springframework.boot.autoconfigure.jdbc.DataSourceProperties.getDriverClassName(DataSourceProperties.java:93)     at org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$NonEmbeddedConfiguration.dataSource(DataSourceAutoConfiguration.java:105)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ```  The following code works fine:  ``` java @Bean(destroyMethod = "")     public DataSource dataSource() {         return (DataSource) new JndiObjectFactoryBean() {{             setExpectedType(DataSource.class);             setResourceRef(true);             setJndiName("jndiDatasource");              try {                 afterPropertiesSet();             } catch (Exception e) {                 e.printStackTrace();             }          }}.getObject();     } ```  But the code below throws the exception above:  ``` java @Bean     public JndiObjectFactoryBean dataSource() {         return new JndiObjectFactoryBean() {{             setExpectedType(DataSource.class);             setResourceRef(true);             setJndiName("jndiDatasource");         }};     } ```  From looking at the source a bit, it would seem that the @ConditionalOnMissingBean does not also check the FactoryBean return type.  We also tried using the jee tag within the XML and including that but it still gave the error above.  This looks similar to #352 and #355 but wanted to report this.  We are running in Weblogic 12c and had to add the destroyMethod="" as without it it was unbinding the Datasource on undeploy. </body>
		<created>2014-09-05 18:56:11</created>
		<closed>2014-10-10 20:50:28</closed>
	</bug>
	<bug>
		<id>1515</id>
		<title>CLI install command prefers remote snapshots to those in the local Maven cache</title>
		<body></body>
		<created>2014-09-05 14:00:32</created>
		<closed>2014-09-05 14:39:06</closed>
	</bug>
	<bug>
		<id>1513</id>
		<title>Wrong JmsBootstrapConfiguration import in JmsAnnotationDrivenConfiguration</title>
		<body>It looks like that `JmsAnnotationDrivenConfiguration` is importing `JmsBootstrapConfiguration` unconditionally which defeats the purpose of the inner `EnableJmsConfiguration` class. </body>
		<created>2014-09-05 13:00:56</created>
		<closed>2014-10-10 21:10:01</closed>
	</bug>
	<bug>
		<id>1511</id>
		<title>[1.1.6] Could not find property 'applicationDefaultJvmArgs' on root project</title>
		<body>When upgrading to 1.1.6.RELEASE my builds start failing:  FAILURE: Build failed with an exception. - What went wrong:   A problem occurred configuring root project 'my-project'.   &gt; Failed to notify project evaluation listener.   &gt; Could not find property 'applicationDefaultJvmArgs' on root project 'my-project'.  I did not find anything in the ref guide that it's needed to set this.  My build script is:   ``` buildscript {     repositories {         mavenCentral()         maven { url "http://repo.spring.io/milestone" }         maven { url "http://repo.spring.io/snapshot" }     }     dependencies {         classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.6.RELEASE")         classpath("org.springframework:springloaded:1.2.0.RELEASE")    } } ```  Note when switching back to 1.1.5.RELEASE my project will build again. </body>
		<created>2014-09-05 11:16:20</created>
		<closed>2014-09-07 23:27:37</closed>
	</bug>
	<bug>
		<id>1507</id>
		<title>Thymeleaf DataAttributeDialect declared twice exception</title>
		<body>ee40fb8cf153b840836b9abcff2bb112c64cc79a registers new beans but doesn't guard against the fact that existing ones could already be registered. The breaks sagan. </body>
		<created>2014-09-05 00:54:21</created>
		<closed>2014-09-05 00:58:58</closed>
	</bug>
	<bug>
		<id>1484</id>
		<title>git.properties is generated in the wrong directory</title>
		<body>When adding the `git-commit-id-plugin` to a Maven build, the `git.properties` is generated in the wrong directory. Consequently, the [/info](http://docs.spring.io/spring-boot/docs/1.1.x/reference/htmlsingle/#production-ready-git-commit-information) endpoint does not pick up the git information.  ---  Example: - Add the `git-commit-id-plugin` to your pom:  ``` xml &lt;plugin&gt;     &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;     &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt; &lt;/plugin&gt; ``` - Execute `mvn compile`  Expected result: There should be a `git.properties` file generated in the `[project root]/target/classes/` folder.  Actual result: The project root name is used twice when the path is created, i.e. the `git.properties` file is generated in the `[project root]/[project root]/target/classes/``  ---  Version: Spring Boot 1.1.5.RELEASE </body>
		<created>2014-09-02 08:04:53</created>
		<closed>2014-09-02 13:45:35</closed>
	</bug>
	<bug>
		<id>1481</id>
		<title>Thymeleaf logging not working correctly when setting to DEBUG or TRACE</title>
		<body>I think the change for issue #265 has broken Thymeleaf logging when setting to Debug or Trace.  Basically setting to debug or trace does not give any output at all.  I have copied the logback config into my project and removed the remapper declaration and all works fine.  I'm assuming that in the method below the get is returning null when not one of the explicitly mapped levels and therefore not appending to the log.  ``` protected void append(ILoggingEvent event) {     Level remappedLevel = this.remapLevels.get(event.getLevel());     if (remappedLevel != null) {         AppendableLogger logger = getLogger(this.destinationLogger);         logger.callAppenders(new RemappedLoggingEvent(event));     } } ``` </body>
		<created>2014-09-01 14:27:30</created>
		<closed>2014-09-03 18:46:06</closed>
	</bug>
	<bug>
		<id>1480</id>
		<title>HornetQ native mode does not work without EmbeddedJMS anymore</title>
		<body>Recent changes for JTA broke the ability to use HornetQ only in native mode. `EmbeddedJMS` may not be available if `hornetq-jms-server` is not on the classpath, which is a perfectly sane option when connecting to an existing broker.  Most probably the new `HornetQConnectionFactoryConfiguration` broke this use case. </body>
		<created>2014-09-01 13:55:42</created>
		<closed>2014-09-01 21:09:18</closed>
	</bug>
	<bug>
		<id>1475</id>
		<title>spring-boot-maven-plugin overwrites jars with same artifactid but with different groupid</title>
		<body>I have the following dependencies configured in my pom.xml file  ``` &lt;dependency&gt;   &lt;groupId&gt;a.b&lt;/groupId&gt;   &lt;artifactId&gt;client&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;x.y&lt;/groupId&gt;   &lt;artifactId&gt;client&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; ```  When I create an executable jar file using spring-boot-maven-plugin the created jar only has one client-0.0.1-SNAPSHOT.jar packaged inside it. Seems like the jars are getting overwritten as they have the same artifactid. I think it will make more sense to use the groupid as well in the name of the jar files packaged so that these kinds of hard to find issues don't occur.   Please note that maven also uses groupid in addition to artifactid to resolve correct dependencies. I think the same mechanism should be applied here. </body>
		<created>2014-08-31 09:38:18</created>
		<closed>2014-09-03 18:46:06</closed>
	</bug>
	<bug>
		<id>1469</id>
		<title>Overriding active profile during test fails</title>
		<body>When using `@ActiveProfile` during test, the provided profile(s) gets added to the list of active profiles instead of replacing it entirely.  ---  Example:  application.properties  ``` .properties spring.profiles.active=banana ```  SomeTest.java  ``` java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = Application.class) @ActiveProfiles("carrot") public class ActiveProfilesTest {      @Autowired     Environment env;      @Test     public void activeProfile() {         assertArrayEquals(new String[]{"carrot"}, env.getActiveProfiles());     } } ```  Expected result: The test should pass.  Actual result: The test fails because the `getActiveProfiles()` method returns an array with both "carrot" and "banana".  ---  Note: The test also fails despite setting the `inheritProfile` attribute of the `@ActiveProfiles` to `false`.  Spring Boot Version: 1.1.5.RELEASE </body>
		<created>2014-08-29 11:11:49</created>
		<closed>2014-09-03 22:05:08</closed>
	</bug>
	<bug>
		<id>1455</id>
		<title>Bare Filter @Beans are always registered after FilterRegistrationBeans</title>
		<body>Bare `Filter` `@Beans` are always registered after `FilterRegistrationBeans`, even if the user clearly intended them to be `Ordered`. </body>
		<created>2014-08-27 13:58:39</created>
		<closed>2014-08-27 15:31:54</closed>
	</bug>
	<bug>
		<id>1451</id>
		<title>`@EnableIntegrationMBeanExport` can't override the auto-config, because of wrong order of classes processing</title>
		<body>The sample is based on Spring Integration:  ``` java @Configuration @EnableAutoConfiguration @EnableIntegrationMBeanExport(defaultDomain = "foo.my") public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args).close();     } } ```  The Boot logs show:  ``` o.s.i.monitor.IntegrationMBeanExporter   : Located managed bean 'org.springframework.integration:type=MessageChannel,name=nullChannel': registering with JMX server as MBean [org.springframework.integration:type=MessageChannel,name=nullChannel] ```  However the test-case passes:  ``` java @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes = Application.class) public class ApplicationTests {      @Autowired     private IntegrationMBeanExporter integrationMBeanExporter;      @Test     public void contextLoads() {         DirectFieldAccessor dfa = new DirectFieldAccessor(integrationMBeanExporter);         assertEquals("foo.my", dfa.getPropertyValue("domain"));     }  } ```  Reproducible on Boot 1.1.5.  Not sure what's going on, but it looks like `@Conditional...`s and any auto-config have to be appliend only after after any other custom configs and explicit `@Enable...` usage.  Suppose the same issue we have with any `...AutoConfiguration` which is based on `@Enable...`  BTW, the same result I see, if I explicitly define:  ``` java @Bean public IntegrationMBeanExporter mbeanExporter(MBeanServer mbeanServer) {         IntegrationMBeanExporter exporter = new IntegrationMBeanExporter();         exporter.setDefaultDomain("foo.my");         exporter.setServer(mbeanServer);         return exporter; } ```  isntead of `@EnableIntegrationMBeanExport` </body>
		<created>2014-08-27 09:43:24</created>
		<closed>2014-09-04 15:51:58</closed>
	</bug>
	<bug>
		<id>1450</id>
		<title>PropertySourcesPropertyResolver.getProperty(String) may fail</title>
		<body>Having below:  ``` @ConfigurationProperties(value = "spring.yarn.client.localizer") public class SpringYarnClientLocalizerProperties extends AbstractLocalizerProperties {      private Map&lt;String, byte[]&gt; rawFileContents;      public Map&lt;String, byte[]&gt; getRawFileContents() {         return rawFileContents;     }      public void setRawFileContents(Map&lt;String, byte[]&gt; rawFileContents) {         this.rawFileContents = rawFileContents;     }  }  @Test public void testRawFileContents() {     SpringApplicationBuilder builder = new SpringApplicationBuilder(TestConfiguration.class);      Properties p = new Properties();     Map&lt;String, byte[]&gt; content = new HashMap&lt;String, byte[]&gt;();     p.put("spring.yarn.client.localizer.rawFileContents", content);     builder.properties(p);      SpringApplication app = builder.application();     app.setWebEnvironment(false);     ConfigurableApplicationContext context = app.run(new String[0]);     SpringYarnClientLocalizerProperties properties = context.getBean(SpringYarnClientLocalizerProperties.class);     assertThat(properties, notNullValue());     assertThat(properties.getRawFileContents(), notNullValue()); } ```  fails with:  ``` Caused by: java.lang.IllegalArgumentException: Cannot convert value [{}] from source type [HashMap] to target type [String]     at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:94)     at org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:60)     at org.springframework.boot.bind.PropertySourcesPropertyValues.processDefaultPropertySource(PropertySourcesPropertyValues.java:155)     at org.springframework.boot.bind.PropertySourcesPropertyValues.processPropertySource(PropertySourcesPropertyValues.java:102)     at org.springframework.boot.bind.PropertySourcesPropertyValues.&lt;init&gt;(PropertySourcesPropertyValues.java:78)     at org.springframework.boot.bind.PropertiesConfigurationFactory.doBindPropertiesToTarget(PropertiesConfigurationFactory.java:272)     at org.springframework.boot.bind.PropertiesConfigurationFactory.bindPropertiesToTarget(PropertiesConfigurationFactory.java:225)     at org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.postProcessBeforeInitialization(ConfigurationPropertiesBindingPostProcessor.java:287)     ... 38 more ```  This works with 1.1.0 but fails with 1.1.5. It looks like `processDefaultPropertySource()` in `PropertySourcesPropertyValues` in `1.1.5` is now using  ``` Object value = resolver.getProperty(propertyName); ```  which doesn't use try/catch. With `1.1.0` all calls to that are within try/catch and doesn't fail if conversion service is unable to find a converter.  This failure is totally unnecessary and would happen every single time when there is something which can't be automatically converted back to string. I did a workaround in SHDP for this so we are all good there. </body>
		<created>2014-08-27 09:20:20</created>
		<closed>2014-08-27 15:05:54</closed>
	</bug>
	<bug>
		<id>1437</id>
		<title>Velocity cannot be used in non-webapp without including spring-webmvc</title>
		<body>It might be disruptive to fix this because the autoconfiguration properties have webmvc dependencies (for all the template engines it looks like). </body>
		<created>2014-08-26 07:27:28</created>
		<closed>2014-08-26 08:19:48</closed>
	</bug>
	<bug>
		<id>1432</id>
		<title>Custom logback configuration ignored in external Tomcat</title>
		<body>When I provide custom `logback.xml` configuration the file is not being used when the `war` is deployed to external Tomcat (7.0.55). It is being used when running in embedded Tomcat though.  The content of `logback.xml`:  ``` &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;     &lt;!-- Spring boot base --&gt;     &lt;include resource="org/springframework/boot/logging/logback/base.xml" /&gt;      &lt;logger name="com.springframework" level="ERROR" /&gt; &lt;/configuration&gt; ```  The application output:  ``` 2014-08-25 09:05:29.565  WARN 5348 --- [on(3)-127.0.0.1] o.s.b.l.LoggingApplicationListener       : Logging environment value '-Djava.util.logging.config.file="C:\Documents and Settings\zykajan\.IntelliJIdea13\system\tomcat\Unnamed_cnc-parent_2\conf\logging.properties"' cannot be opened and will be ignored    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.1.5.RELEASE)  2014-08-25 09:05:29.643  INFO 5348 --- [on(3)-127.0.0.1] o.s.boot.SpringApplication               : ... ``` </body>
		<created>2014-08-25 07:09:59</created>
		<closed>2014-08-28 18:02:32</closed>
	</bug>
	<bug>
		<id>1429</id>
		<title>Failure in SpringLoadedTests on Windows</title>
		<body>Spaces are not being handled correctly:  ``` C:\Documents%20and%20Settings\bamboo-agent\.m2\repository\org\springframework\springloaded\1.2.0.RELEASE\springloaded-1.2.0.RELEASE.jar ```  http://build.spring.io/browse/BOOT-WIN-JOB1-59/test/case/155728954 </body>
		<created>2014-08-24 07:11:17</created>
		<closed>2014-08-26 16:06:58</closed>
	</bug>
	<bug>
		<id>1427</id>
		<title>ErrorPageFilter doesn't log exceptions</title>
		<body>When the `ErrorPageFilter` is used exception stack-traces are not logged and it is not possible to tell the root cause of a problem. </body>
		<created>2014-08-23 21:32:46</created>
		<closed>2014-08-25 16:28:16</closed>
	</bug>
	<bug>
		<id>1421</id>
		<title>DataSourceProperties "sa" username/password not detected when deducing the driver class</title>
		<body></body>
		<created>2014-08-22 05:05:52</created>
		<closed>2014-08-22 05:11:53</closed>
	</bug>
	<bug>
		<id>1415</id>
		<title>YAML lists cannot be mapped to Sets</title>
		<body>I have a YAML application properties file and I'm trying to map a series of items to a `Set`. This appears to be impossible given the Spring Beans code that processes the properties, but the documentation tells a different story.  YAML:  ``` test:   - "value" ```  Code:  ``` @ConfigurationProperties public class MyTest {      private Set&lt;String&gt; test;      public void setTest(Set&lt;String&gt; test) {         this.test = test;     }      public Set&lt;String&gt; getTest() {         return this.test;     } } ```  The `spring-boot` [documentation](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html) states:  &gt; To bind to properties like that using the Spring DataBinder utilities (which is what @ConfigurationProperties does) you need to have a property in the target bean of type java.util.List **(or Set)** and you either need to provide a setter, or initialize it with a mutable value, e.g. this will bind to the properties above  However, `Set` is not supported. If you attempt to map a YAML property to a `Set`, you'll get an exception similar to the following:  ``` Property referenced in indexed property path 'test[0]' is neither an array nor a List nor a Map; returned value was [value] ```  The documentation should be corrected on this point. </body>
		<created>2014-08-21 00:50:01</created>
		<closed>2017-04-27 22:34:31</closed>
	</bug>
	<bug>
		<id>1411</id>
		<title>applicationDefaultJvmArgs does not work with Spring Loaded</title>
		<body>In `build.gradle`, when setting:  ``` applicationDefaultJvmArgs = [         "-DSOME_ARG=someValue" ] ```  AND adding Spring Loaded to the class path, this property does not resolve in the application.  I have a small repro-application, will add once I get the issue id. Just start it with `gradle bootRun` (fails). Remove Spring Loaded -&gt; starts fine.  See #406 </body>
		<created>2014-08-20 02:05:02</created>
		<closed>2014-08-21 15:27:18</closed>
	</bug>
	<bug>
		<id>1391</id>
		<title>DefaultCounterService.reset does not work properly</title>
		<body>The `reset` method on `DefaultCounterService` tries to increment the metric value by 0, instead of actually resetting the value.  The `metricWriter` offers me two solutions - I could set the metric value to 0 or I could reset the metric value so that it will be deleted.  Which one would be more appropriate? Or is there another way?  </body>
		<created>2014-08-18 13:01:16</created>
		<closed>2014-08-19 00:55:40</closed>
	</bug>
	<bug>
		<id>1386</id>
		<title>DatasourceInitializer swallows DataSourceInitializedEvent and doesn't import data.sql</title>
		<body>This happens under weird circumstances on having multiple @Configuration beans where the JDBCTemplate gets @Autowired into security configuration.   Please see the attached mini-project which doesn't import data.sql (this is the bug),  If you refer to WebSecurityConfig class commentig out the two @Autowires and launch the project again you'll se the data.sql was imported  . </body>
		<created>2014-08-16 20:58:37</created>
		<closed>2014-08-25 16:18:41</closed>
	</bug>
	<bug>
		<id>1378</id>
		<title>MessageSource not working after 1.1.5 upgrade</title>
		<body>Using spring-boot 1.1.4, the default `MessageSource` bean I get is a `ResourceBundleMessageSource` instance loading from my `messages.properties` on the root classpath.  When I upgraded to 1.1.5 the default `MessageSource` bean I get is now a `DelegatingMessageSource` with no `parentMessageSource`, so no messages are resolved. I still have messages.properties on the root classpath.  Was a breaking change so I needed to roll back to 1.1.4 </body>
		<created>2014-08-14 04:14:07</created>
		<closed>2014-08-21 19:24:28</closed>
	</bug>
	<bug>
		<id>1369</id>
		<title>OPTIONS request failing in 1.1.5 (MetricsFilter fails with status=0)</title>
		<body>I have a Boot application that has a servlet filter to apply CORS headers to responses in certain scenarios.  In 1.1.4, when I make an OPTIONS call to my application, I get the response I'm expecting.  In 1.1.5, the CORS headers I'm expecting are missing, and no exception is generated in the logs. However, if I look at the `/manage/trace` endpoint, I see two things: 1) the OPTIONS request for some reason is returning an HTTP status of "0"; 2) the server is sending an error and the trace has a stack in it.  Can someone help me understand why an HTTP status code of 0 is being returned?  Also, the code in 1.1.5 for `MetricFilterAutoConfiguration` has a change that does not gracefully handle the 0 status, while the code in 1.1.4 does handle it.  Here is the stack that I found in the trace endpoint:  ``` java.lang.IllegalArgumentException: No matching constant for [0] at org.springframework.http.HttpStatus.valueOf(HttpStatus.java:467) at org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration$MetricsFilter.doFilterInternal(MetricFilterAutoConfiguration.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1480) at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:108)\n\tat  ``` </body>
		<created>2014-08-12 22:03:36</created>
		<closed>2014-08-13 15:16:07</closed>
	</bug>
	<bug>
		<id>1368</id>
		<title>Filesystem dependencies of "compile project" not included in repackaged jar</title>
		<body>I've just upgraded my spring boot version from 1.0.4.RELEASE to 1.1.5.RELEASE and think I may have found an issue that extends https://github.com/spring-projects/spring-boot/issues/672 and https://github.com/spring-projects/spring-boot/issues/1215.   I have a multi-project gradle build, my main application includes some of the other projects as dependencies using:  ``` groovy compile project(':myapplication-common') ```  The "myapplication-common" project includes filesystem dependencies:  ``` groovy compile files {"lib/myExternalJar-1.1.jar"} ```  Following the upgrade this filesystem based transitive dependency is no longer bundled in the boot jar, prior to the upgrade it was.  For now I'm using the following workaround in the main app gradle file:  ``` groovy compile files {"../myapplication-common/lib/myExternalJar-1.1.jar"} ```  With this workaround in place the dependency is bundled. </body>
		<created>2014-08-12 16:21:14</created>
		<closed>2014-08-21 14:38:48</closed>
	</bug>
	<bug>
		<id>1365</id>
		<title>ConfigurationPropertiesBindingPostProcessor can instanciate FactoryBeans too early</title>
		<body>The `deducePropertySources` method calls `beanFactory.getBean(PropertySourcesPlaceholderConfigurer.class)` which can cause early instantiation of `FactoryBeans` which return `null` from `getObjectType`.  Raised initially in [SPR-11582](https://jira.spring.io/browse/SPR-11582) from a [problem identified with MyBatis](https://github.com/mybatis/spring/issues/30) </body>
		<created>2014-08-11 21:26:58</created>
		<closed>2014-08-11 23:13:57</closed>
	</bug>
	<bug>
		<id>1364</id>
		<title>Spring Boot 1.1.5.RELEASE breaks gs-securing-web guide</title>
		<body>Spring Boot 1.1.4.RELEASE works fine with [gs-securing-web/complete](https://github.com/spring-guides/gs-securing-web/tree/master/complete), but upgrading to Spring Boot 1.1.5.RELEASE causes it to fail with the following stack trace:  ``` $ ./gradlew bootRun Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0 :compileJava :processResources :classes :findMainClass :bootRun    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.1.5.RELEASE)  2014-08-11 09:12:59.903  INFO 56967 --- [           main] hello.Application                        : Starting Application on retina with PID 56967 (/private/tmp/gs-securing-web/complete/build/classes/main started by gturnquist in /private/tmp/gs-securing-web/complete) 2014-08-11 09:12:59.953  INFO 56967 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@290dbf45: startup date [Mon Aug 11 09:12:59 CDT 2014]; root of context hierarchy 2014-08-11 09:13:00.315  INFO 56967 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2014-08-11 09:13:00.965  INFO 56967 --- [           main] .t.TomcatEmbeddedServletContainerFactory : Server initialized with port: 8080 2014-08-11 09:13:01.109  INFO 56967 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2014-08-11 09:13:01.110  INFO 56967 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.54 2014-08-11 09:13:01.201  INFO 56967 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2014-08-11 09:13:01.201  INFO 56967 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1251 ms 2014-08-11 09:13:01.876  INFO 56967 --- [ost-startStop-1] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: org.springframework.security.web.util.matcher.AnyRequestMatcher@1, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@75966349, org.springframework.security.web.context.SecurityContextPersistenceFilter@77d57c1b, org.springframework.security.web.header.HeaderWriterFilter@7fb6b132, org.springframework.security.web.csrf.CsrfFilter@2f0ffb7d, org.springframework.security.web.authentication.logout.LogoutFilter@66b9d54f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@62f2e07b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@29f40f87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@782c3e3b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5af2b2f2, org.springframework.security.web.session.SessionManagementFilter@7f5c68e7, org.springframework.security.web.access.ExceptionTranslationFilter@4f4a6449, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5cf84811] 2014-08-11 09:13:01.918  INFO 56967 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2014-08-11 09:13:01.921  INFO 56967 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'springSecurityFilterChain' to: [/*] 2014-08-11 09:13:01.922  INFO 56967 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2014-08-11 09:13:02.225  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-08-11 09:13:02.333  INFO 56967 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-08-11 09:13:02.334  INFO 56967 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2014-08-11 09:13:02.340  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/home] onto handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2014-08-11 09:13:02.340  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/login] onto handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2014-08-11 09:13:02.340  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Root mapping to handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2014-08-11 09:13:02.340  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/hello] onto handler of type [class org.springframework.web.servlet.mvc.ParameterizableViewController] 2014-08-11 09:13:02.349  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-08-11 09:13:02.349  INFO 56967 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-08-11 09:13:02.588  INFO 56967 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2014-08-11 09:13:02.630  INFO 56967 --- [           main] o.apache.catalina.core.StandardService   : Stopping service Tomcat 2014-08-11 09:13:02.639  INFO 56967 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/private/tmp/gs-securing-web/complete/src/main/resources/, file:/private/tmp/gs-securing-web/complete/build/classes/main/, file:/private/tmp/gs-securing-web/complete/build/resources/main/, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/1.1.5.RELEASE/spring-boot-starter-thymeleaf-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter-security/1.1.5.RELEASE/spring-boot-starter-security-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter/1.1.5.RELEASE/spring-boot-starter-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter-web/1.1.5.RELEASE/spring-boot-starter-web-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-core/4.0.6.RELEASE/spring-core-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/thymeleaf/thymeleaf-spring4/2.1.3.RELEASE/thymeleaf-spring4-2.1.3.RELEASE.jar, file:/Users/gturnquist/.m2/repository/nz/net/ultraq/thymeleaf/thymeleaf-layout-dialect/1.2.5/thymeleaf-layout-dialect-1.2.5.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-beans/4.0.6.RELEASE/spring-beans-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-context/4.0.6.RELEASE/spring-context-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-expression/4.0.6.RELEASE/spring-expression-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-web/4.0.6.RELEASE/spring-web-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/security/spring-security-config/3.2.4.RELEASE/spring-security-config-3.2.4.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/security/spring-security-web/3.2.4.RELEASE/spring-security-web-3.2.4.RE                                                                                                                                                                                                   LEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-aop/4.0.6.RELEASE/spring-aop-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot/1.1.5.RELEASE/spring-boot-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/1.1.5.RELEASE/spring-boot-autoconfigure-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter-logging/1.1.5.RELEASE/spring-boot-starter-logging-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/yaml/snakeyaml/1.13/snakeyaml-1.13.jar, file:/Users/gturnquist/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/1.1.5.RELEASE/spring-boot-starter-tomcat-1.1.5.RELEASE.jar, file:/Users/gturnquist/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3/jackson-databind-2.3.3.jar, file:/Users/gturnquist/.m2/repository/org/hibernate/hibernate-validator/5.0.3.Final/hibernate-validator-5.0.3.Final.jar, file:/Users/gturnquist/.m2/repository/org/springframework/spring-webmvc/4.0.6.RELEASE/spring-webmvc-4.0.6.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/thymeleaf/thymeleaf/2.1.3.RELEASE/thymeleaf-2.1.3.RELEASE.jar, file:/Users/gturnquist/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/Users/gturnquist/.m2/repository/org/springframework/security/spring-security-core/3.2.4.RELEASE/spring-security-core-3.2.4.RELEASE.jar, file:/Users/gturnquist/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.7/jcl-over-slf4j-1.7.7.jar, file:/Users/gturnquist/.m2/repository/org/slf4j/jul-to-slf4j/1.7.7/jul-to-slf4j-1.7.7.jar, file:/Users/gturnquist/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.7/log4j-over-slf4j-1.7.7.jar, file:/Users/gturnquist/.m2/repository/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar, file:/Users/gturnquist/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/7.0.54/tomcat-embed-core-7.0.54.jar, file:/Users/gturnquist/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/                                                                                                                                                                                                    7.0.54/tomcat-embed-el-7.0.54.jar, file:/Users/gturnquist/.m2/repository/org/apache/tomcat/embed/tomcat-embed-logging-juli/7.0.54/tomcat-embed-logging-juli-7.0.54.jar, file:/Users/gturnquist/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.3.0/jackson-annotations-2.3.0.jar, file:/Users/gturnquist/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.3.3/jackson-core-2.3.3.jar, file:/Users/gturnquist/.m2/repository/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar, file:/Users/gturnquist/.m2/repository/org/jboss/logging/jboss-logging/3.1.1.GA/jboss-logging-3.1.1.GA.jar, file:/Users/gturnquist/.m2/repository/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar, file:/Users/gturnquist/.m2/repository/ognl/ognl/3.0.6/ognl-3.0.6.jar, file:/Users/gturnquist/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.16.1-GA/315891b371395271977af518d4db5cee1a0bc9bf/javassist-3.16.1-GA.jar, file:/Users/gturnquist/.m2/repository/org/unbescape/unbescape/1.0/unbescape-1.0.jar, file:/Users/gturnquist/.m2/repository/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar, file:/Users/gturnquist/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar] 2014-08-11 09:13:02.640  INFO 56967 --- [           main] utoConfigurationReportLoggingInitializer :   Error starting ApplicationContext. To display the auto-configuration report enabled debug logging (start with --debug)   2014-08-11 09:13:02.646 ERROR 56967 --- [           main] o.s.boot.SpringApplication               : Application startup failed  java.lang.NullPointerException: null     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.onApplicationEvent(AuthenticationManagerConfiguration.java:96)     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.onApplicationEvent(AuthenticationManagerConfiguration.java:54)     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration$$EnhancerBySpringCGLIB$$6afa3b9a.onApplicationEvent(&lt;generated&gt;)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333)     at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:776)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:142)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at hello.Application.main(Application.java:14)  2014-08-11 09:13:02.647  INFO 56967 --- [           main] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@290dbf45: startup date [Mon Aug 11 09:12:59 CDT 2014]; root of context hierarchy 2014-08-11 09:13:02.650  INFO 56967 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown Exception in thread "main" java.lang.NullPointerException     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.onApplicationEvent(AuthenticationManagerConfiguration.java:96)     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.onApplicationEvent(AuthenticationManagerConfiguration.java:54)     at org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration$$EnhancerBySpringCGLIB$$6afa3b9a.onApplicationEvent(&lt;generated&gt;)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98)     at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:333)     at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:776)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:142)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at hello.Application.main(Application.java:14) :bootRun FAILED  FAILURE: Build failed with an exception.  * What went wrong: Execution failed for task ':bootRun'. &gt; Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED  Total time: 10.021 secs ```  (It also fails with the same exception when doing `mvn spring-boot:run`.) </body>
		<created>2014-08-11 14:14:22</created>
		<closed>2014-08-12 00:43:18</closed>
	</bug>
	<bug>
		<id>1354</id>
		<title>@Grab processing from internal Maven repository (requiring authentication) not working properly</title>
		<body>Hi. In my company we have an internal Maven repository (Nexus) and in-house artifacts that get deployed there. What I want to achieve is using spring-boot-cli to "run" a Groovy script, which will @Grab multiple of these artifacts.  However this fails for several reasons: 1.) The artifacts seem to be always loaded from the public Maven repositories defined in RepositoryConfigurationFactory. Of course, they don't exist there. 2.) Using @GrabResolver to point to our Nexus URL also won't work, because our Nexus requires authentication. 3.) My local .m2/settings.xml is loaded (where a &amp;lt;mirror&amp;gt; and a &amp;lt;server&amp;gt; block is defined), but it seems not to be "used" when the @Grabs are processed.  Affected version: 1.1.4.RELEASE and master  After digging and poking around a bit in the code, I managed to create a "patch" which will replace the repository list with the mirror from the settings.xml and add the authentication information. Warning: this patch is to be considered as "quick hack" to get the stuff running, also known as "works for me". :-) A proper fix has to be done by you guys, because I'm not really familar with the spring-boot-cli code base, and just don't know how things are really supposed to work there...  Here's the Gist repo containing my (anonymized) settings.xml and the patch: https://gist.github.com/827c0ed85fc944798fef.git  Thanks. </body>
		<created>2014-08-08 15:42:47</created>
		<closed>2014-08-19 16:57:04</closed>
	</bug>
	<bug>
		<id>1352</id>
		<title>PropertiesLauncher: loader.path failed to reference a windows folder</title>
		<body>The problem occurred when using the parameter below: `-Dloader.pah=C:/MyFolder,D:/AnotherFolder,lib`  `MyFolder` is ignored as the source code of `PropertiesLauncher.java` is performing a check of a starting '/' character which makes sense under Linux but not under Windows.  Below is the identified bug:  ``` private List&lt;Archive&gt; getClassPathArchives(String path) throws Exception {     String root = cleanupPath(stripFileUrlPrefix(path));     List&lt;Archive&gt; lib = new ArrayList&lt;Archive&gt;();     File file = new File(root);     if (!root.startsWith("/")) {       file = new File(this.home, root);     } .... ```  The effect is that launcher is looking for resource `C:/MyFolder` under the user home directory ... which does not exist. The effect is that folder is ignored without any notice...  As Workaround I may use the `-Dhome=C:/` to customize the "user.home" folder, unfortunately this solve only the problem for `MyFolder` but does not solve my whole problem as I need to refer directories from multiple partitions ...  Another idea was to prefix `C:/MyFolder` with a `'/C:/MyFolder'` ... it works better, but for resources in `MyFolder` `ClassLoader.getResource` returns URL while `getResourceAsStream` return null on the same resource .... (due to the presence of the leading / in the URL)  To Workaround totally the issue I need to write a custom `ClassLoader` and declared it with `-Dloader.classLoader ....` and perform URL correction on the fly ... </body>
		<created>2014-08-08 09:51:49</created>
		<closed>2014-08-19 13:16:47</closed>
	</bug>
	<bug>
		<id>1343</id>
		<title>ErrorPageFilter causes an infinite loop when error page produces an error</title>
		<body>This was originally reported against Spring: https://jira.spring.io/browse/SPR-12066. It's reproducible. We need to short-circuit the error filter so that it gives up if the forward to the error page produces an error. </body>
		<created>2014-08-07 06:36:47</created>
		<closed>2014-08-07 08:47:16</closed>
	</bug>
	<bug>
		<id>1336</id>
		<title>spring.datasource.initialize=false Does not disable loading of data-${platform}.sql</title>
		<body>When setting the flag spring.datasource.initialize=false, the data-${platform}.sql and data.sql files are always loaded.   This comes after the refactoring "Defer SQL initialization to fit with JPA better" that fixes "gh-1006" (done on june 2nd, commit id 49a09c807c437ad9b668652a89ea70c122aff89a)  This behaviour is different than specified in the chpater "63.3 Initialize a database using Spring JDBC" of the documentation. </body>
		<created>2014-08-05 17:43:28</created>
		<closed>2014-08-06 14:08:00</closed>
	</bug>
	<bug>
		<id>1335</id>
		<title>Auto-configured webmvc application with security not publishing authentication events</title>
		<body>The default spring-security ProviderManager uses a NullEventPublisher by default, which means authentication events don't get published to ApplicationListeners (such as the AuditListener provided by spring-boot-actuator). For example I wasn't seeing BadCredentials events published when they should have been, etc.  Based on the boot web security samples, I worked around this by adding an Autowired AuthenticationEventPublisher in my GlobalAuthenticationConfigurerAdapter and then calling auth.authenticationEventPublisher with it in init() which sets up a DefaultAuthenticationEventPublisher thanks to its Bean definition in boot's SecurityAutoConfiguration.  It looks like there might be the beginning of some work to make this the default autoconfigured behavior in AuthenticationManagerConfiguration via lazyAuthenticationManager, but it seems to be unused.  Not sure if I'm way off base and noone wants this as default behavior, or that its supposed to be the default behavior and there is another bug in a place I've overlooked causing DefaultAuthenticationEventPublisher to not be setup? </body>
		<created>2014-08-05 14:44:58</created>
		<closed>2014-08-07 02:34:00</closed>
	</bug>
	<bug>
		<id>1328</id>
		<title>NullPointerException: null at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:63)</title>
		<body>I've somehow managed to cause a NullPointerException: null at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:63)  Whatever the root cause of this may be, which could quite likely be a bug in my code/misunderstanding of how to use Spring (Boot), I'm hoping you'd agree that as an end-user I should never hit an NPE, but instead get a clearer exception?  Here is the full stack trace in case this is useful:  ``````   .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.1.4.RELEASE)  16:56:56.556 [main] INFO  o.e.j.i.j.runner.RemoteTestRunner - Starting RemoteTestRunner on feather with PID 361 (/home/vorburger/dev/ngMUI/com.temenos.ds.op.sdk.ide/configuration/org.eclipse.osgi/251/0/.cp started by vorburger in /home/vorburger/dev/M/mifosx/mifosng-provider) 16:56:56.813 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@65987993: startup date [Fri Aug 01 16:56:56 CEST 2014]; root of context hierarchy 16:56:56.886 [main] INFO  o.s.b.l.ClasspathLoggingApplicationListener - Application failed to start with classpath: [file:/home/vorburger/dev/M/mifosx/mifosng-provider/bin/, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-web/1.1.4.RELEASE/jar/b74730f6ff7665339ce31fadb89226e0c057d3e6/spring-boot-starter-web-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-data-jpa/1.1.4.RELEASE/jar/9e5d736f66dc2c77e1bae89002ea31e2d08741cb/spring-boot-starter-data-jpa-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-security/1.1.4.RELEASE/jar/a96dda664051be912e317337ccc0756b6429616/spring-boot-starter-security-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-context-support/4.0.6.RELEASE/jar/cfdd2172538cfd5d540d4d6283abda83785ec624/spring-context-support-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.ws.rs/jsr311-api/1.1.1/jar/59033da2a1afd56af1ac576750a8d0b1830d59e6/jsr311-api-1.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey/jersey-core/1.17/jar/ea723f958123e794f5c08fc0baa92578c72eef96/jersey-core-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey/jersey-servlet/1.17/jar/ab4ff82bbc5e86761bf92e9686d7ab09d2404c30/jersey-servlet-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey/jersey-server/1.17/jar/f3ec0882700751d45d86b6b638804eb6d34bad6f/jersey-server-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey/jersey-json/1.17/jar/e676aa8f1b09027aecba46e85351ce8e30bb4217/jersey-json-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey.contribs/jersey-spring/1.17/jar/d39228b47b2aa0a638c1f9bc6f09be3fe8e3abc/jersey-spring-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.jersey.contribs/jersey-multipart/1.17/jar/ddc8564845fd1096dea66c82ff4154017fb9af8c/jersey-multipart-1.17.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.google.code.gson/gson/2.2.4/jar/a60a5e993c98c864010053cb901b7eab25306568/gson-2.2.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.google.guava/guava/15.0/bundle/ed727a8d9f247e2050281cb083f1c77b09dcb5cd/guava-15.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/joda-time/joda-time/2.4/jar/89e9725439adffbbd41c5f5c215c136082b34a7f/joda-time-2.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/net.sourceforge.javacsv/javacsv/2.0/jar/8092b1ba2d4929f2ec27e58cd240502afdd6a9a7/javacsv-2.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.commons/commons-email/1.3.3/jar/c1a7133db9008fa1eae082e6158c3f4c128ec27e/commons-email-1.3.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.commons/commons-lang3/3.3.2/jar/90a3822c38ec8c996e84c16a3477ef632cbc87a3/commons-lang3-3.3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/mysql/mysql-connector-java/5.1.27/jar/2e4fbf71af3fa214951aa32bb6b39076e4e01b6f/mysql-connector-java-5.1.27.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.tomcat/tomcat-jdbc/7.0.54/jar/c325fb6d376df8bb34de0252aef2f7472658d4d7/tomcat-jdbc-7.0.54.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-reporting-engine/pentaho-reporting-engine-classic-core/3.9.1.1/jar/77036efc94f1bab8dfe07bfdcf28cb4cdc4dcc46/pentaho-reporting-engine-classic-core-3.9.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-reporting-engine/pentaho-reporting-engine-classic-extensions/3.9.1-GA/jar/24114228757a9325f4b4e4899471413f6ae90d2c/pentaho-reporting-engine-classic-extensions-3.9.1-GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-reporting-engine/pentaho-reporting-engine-classic-extensions-scripting/3.9.1-GA/jar/174cce581a247680f24404e9ed6ef1fbfb53ae29/pentaho-reporting-engine-classic-extensions-scripting-3.9.1-GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-reporting-engine/pentaho-reporting-engine-wizard-core/3.9.1-GA/jar/671508e5f7b038b19ddbdf34914eab87bbb646ee/pentaho-reporting-engine-wizard-core-3.9.1-GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-report-designer/pentaho-reporting-engine-wizard-xul/3.9.1-GA/jar/25759f94ef914d13cc7a1551674838f0a8ed14f5/pentaho-reporting-engine-wizard-xul-3.9.1-GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libbase/1.2.8/jar/32f9469c29fd16edcf6706d7531d74a75884d756/libbase-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libdocbundle/1.2.8/jar/9bde3c7aa2154a08e6c7bfdfd6d35dc3b18d05aa/libdocbundle-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libfonts/1.2.8/jar/8d20d16c7b4022480df8fb8aa7c51f6357ff1817/libfonts-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libformat/1.2.8/jar/3fd10ea2e18845e80c0fd506265d8ab904f90bbe/libformat-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libformula/1.2.8/jar/54f0bc121d9012734f022625ff53de000d774a3e/libformula-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libloader/1.2.8/jar/3ac28cb50f07311a131b0b9ffc6869ba03f2e618/libloader-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/librepository/1.2.8/jar/6e30182126a8bf1c5807c18b020b277789ad25b4/librepository-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libserializer/1.2.8/jar/52d4ccad3fa757ec040a3da34314d08c4a071332/libserializer-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libsparkline/1.2.8/jar/8cc1e0c6b5ae6fa44f0a40c8518d2346ae3f1f3f/libsparkline-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/pentaho-library/libxml/1.2.8/jar/60a57221b2f5b3ac5e8822bf14001640738a6ab/libxml-1.2.8.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.poi/poi/3.9/jar/5d5e41354e88322e4bc590b31f3d2d1d52b3e6ac/poi-3.9.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.poi/poi-ooxml/3.9/jar/bbe83c739d22eecfacd06d7e0b99ba13277040ed/poi-ooxml-3.9.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.poi/poi-ooxml-schemas/3.9/jar/4c514498f0e82cccfdd3208b9caff2f45158db4a/poi-ooxml-schemas-3.9.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.lowagie/itext/2.1.7/jar/892bfb3e97074a61123b3b2d7caa2db112750864/itext-2.1.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.lowagie/itext-rtf/2.1.7/jar/ed1cbe69ff69c6e6fa7645f51c8d25894a177e7b/itext-rtf-2.1.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.mnode.ical4j/ical4j/1.0.4/jar/a7b5ef561262e2f4e72dc7706980777413ca6bfb/ical4j-1.0.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.googlecode.flyway/flyway-maven-plugin/2.1.1/maven-plugin/294b6519b157fecbfa7235929cf1c7103cdfbe7b/flyway-maven-plugin-2.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.quartz-scheduler/quartz/2.1.7/jar/d096220c97746b7c586cac6411afd5eca80eb4f1/quartz-2.1.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.amazonaws/aws-java-sdk/1.2.1/jar/8bfebcd4b39b87bbe788b4eeced068c8dbe75822/aws-java-sdk-1.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/net.sf.ehcache/ehcache/2.7.2/jar/db9632e1fc8a1946e286ad0da7eb501ae1f9a8c1/ehcache-2.7.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.github.spullara.mustache.java/compiler/0.8.12/bundle/883f5f1251240be239060f627a20a83acd160ec6/compiler-0.8.12.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.jayway.jsonpath/json-path/0.9.1/bundle/1a198cf545b2656656fecda5add3ba436e715185/json-path-0.9.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/junit/junit/4.11/jar/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.mockito/mockito-all/1.9.5/jar/79a8984096fc6591c1e3690e07d41be506356fa5/mockito-all-1.9.5.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.jayway.restassured/rest-assured/1.7.2/jar/b6897c1f2fe56790df24296825276857ae35039f/rest-assured-1.7.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-test/1.1.4.RELEASE/jar/e6eadc7c9f3593d9dba74862c0c7fe052245b7c6/spring-boot-starter-test-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.httpcomponents/httpclient/4.4-alpha1/jar/2abd96cd4bed03615b889987feac955098f6bf03/httpclient-4.4-alpha1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-core/4.0.6.RELEASE/jar/d880beac77d42c5798aa2b632ddd0e4ae47c79ad/spring-core-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-beans/4.0.6.RELEASE/jar/587879b58acebeb5b0a63c01e822f9b44d9a4c77/spring-beans-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-expression/4.0.6.RELEASE/jar/5f0a135b8cf290aa244097dc6264ad0989d25c56/spring-expression-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/aopalliance/aopalliance/1.0/jar/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-aop/4.0.6.RELEASE/jar/e377760b7692569535573ba9f6e80b4b74869369/spring-aop-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-context/4.0.6.RELEASE/jar/3bb3a52edabf9ffe73aa534fb085c816bac28b4d/spring-context-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot/1.1.4.RELEASE/jar/338574f840409cb91adbbb4adb7b7f458c213ce0/spring-boot-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-autoconfigure/1.1.4.RELEASE/jar/8f1c2de4847a1456788f26df61a4639febf1a77f/spring-boot-autoconfigure-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/slf4j-api/1.7.7/jar/2b8019b6249bb05d81d3a3094e468753e2b21311/slf4j-api-1.7.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/jcl-over-slf4j/1.7.7/jar/56003dcd0a31deea6391b9e2ef2f2dc90b205a92/jcl-over-slf4j-1.7.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/jul-to-slf4j/1.7.7/jar/def21bc1a6e648ee40b41a84f1db443132913105/jul-to-slf4j-1.7.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/log4j-over-slf4j/1.7.7/jar/d521cb26a9c4407caafcec302e7804b048b07cea/log4j-over-slf4j-1.7.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/ch.qos.logback/logback-core/1.1.2/jar/2d23694879c2c12f125dac5076bdfd5d771cc4cb/logback-core-1.1.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/ch.qos.logback/logback-classic/1.1.2/jar/b316e9737eea25e9ddd6d88eaeee76878045c6b2/logback-classic-1.1.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-logging/1.1.4.RELEASE/jar/5525505b4e63800bc3e69313e66fd4a7a4eb9b6d/spring-boot-starter-logging-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter/1.1.4.RELEASE/jar/660c34b289fe68357cdb7bea1ee1c6c7b180ba3b/spring-boot-starter-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.yaml/snakeyaml/1.13/bundle/73cbb494a912866c4c831a178c3a2a9169f4eaad/snakeyaml-1.13.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.tomcat.embed/tomcat-embed-core/7.0.54/jar/874cb56db3ccd8101d9373f433d86f1badb5dada/tomcat-embed-core-7.0.54.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.tomcat.embed/tomcat-embed-el/7.0.54/jar/3c9425b650ba700ac47185500facabd9ab970adc/tomcat-embed-el-7.0.54.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.tomcat.embed/tomcat-embed-logging-juli/7.0.54/jar/68a1a1fc9fa2c7f97431a36e89f95c5d2eb2ebd5/tomcat-embed-logging-juli-7.0.54.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-tomcat/1.1.4.RELEASE/jar/e38cf0b7e3aa6a13cbfd050bd218477ee88931e5/spring-boot-starter-tomcat-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.fasterxml.jackson.core/jackson-annotations/2.3.0/bundle/f5e853a20b60758922453d56f9ae1e64af5cb3da/jackson-annotations-2.3.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.fasterxml.jackson.core/jackson-core/2.3.3/bundle/7d8c5d79cc99995e21e6f955857312d8409f02a1/jackson-core-2.3.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.fasterxml.jackson.core/jackson-databind/2.3.3/bundle/63b77400b5f1cf83a81823562c48d3120ef5518e/jackson-databind-2.3.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.validation/validation-api/1.1.0.Final/jar/8613ae82954779d518631e05daa73a6a954817d5/validation-api-1.1.0.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.fasterxml/classmate/1.0.0/bundle/434efef28c81162b17c540e634cffa3bd9b09b4c/classmate-1.0.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.jboss.logging/jboss-logging/3.1.3.GA/jar/64499e907f19e5e1b3fdc02f81440c1832fe3545/jboss-logging-3.1.3.GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hibernate/hibernate-validator/5.0.3.Final/jar/e0fa071d3ced426a05fc1a59d788cb72a1659c3c/hibernate-validator-5.0.3.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-web/4.0.6.RELEASE/jar/85ef4b91fcdd86d81e4a9b3e5f006dcb4128e6d/spring-web-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-webmvc/4.0.6.RELEASE/jar/9020a09a96058133c822ff04f00e7fa0e0c3b82b/spring-webmvc-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.aspectj/aspectjrt/1.8.1/jar/5e7a0fa36cc24ead36d885b9d775bb31ffa8524c/aspectjrt-1.8.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.aspectj/aspectjweaver/1.8.1/jar/da75e95c91703667b2ae20acdd3d8ee40ea7aabd/aspectjweaver-1.8.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-aop/1.1.4.RELEASE/jar/da647979b3a34f2f8e92f785c634a6732e0fccda/spring-boot-starter-aop-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-tx/4.0.6.RELEASE/jar/6b4ed868e07d58f2cf15bcd7958acd86fd4f3da4/spring-tx-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-jdbc/4.0.6.RELEASE/jar/28fa5e60c3d68132d83d9c1e7d9fccebb83c9104/spring-jdbc-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.tomcat/tomcat-juli/7.0.54/jar/b1ab768678cb729831ed6ae926a90ab6f0974a60/tomcat-juli-7.0.54.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.boot/spring-boot-starter-jdbc/1.1.4.RELEASE/jar/56ea9bbdc0b7bbbf0b2a0932b078c58dab249168/spring-boot-starter-jdbc-1.1.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/xml-apis/xml-apis/1.0.b2/jar/3136ca936f64c9d68529f048c2618bd356bf85c9/xml-apis-1.0.b2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/dom4j/dom4j/1.6.1/jar/5d3ccc056b6f056dbf0dddfdf43894b9065a8f94/dom4j-1.6.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.jboss.logging/jboss-logging-annotations/1.2.0.Beta1/jar/2f437f37bb265d9f8f1392823dbca12d2bec06d6/jboss-logging-annotations-1.2.0.Beta1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hibernate.common/hibernate-commons-annotations/4.0.4.Final/jar/f1af75eca4e13ac0578750a497159695feceebfc/hibernate-commons-annotations-4.0.4.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hibernate.javax.persistence/hibernate-jpa-2.1-api/1.0.0.Final/jar/5e731d961297e5a07290bfaf3db1fbc8bbbf405a/hibernate-jpa-2.1-api-1.0.0.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.jboss.spec.javax.transaction/jboss-transaction-api_1.2_spec/1.0.0.Final/jar/1f9fef7a9fcbb41cc390fc370a291cf30729e094/jboss-transaction-api_1.2_spec-1.0.0.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.javassist/javassist/3.18.1-GA/bundle/d9a09f7732226af26bf99f19e2cffe0ae219db5b/javassist-3.18.1-GA.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/antlr/antlr/2.7.7/jar/83cd2cd674a217ade95a4bb83a8a14f351f48bd0/antlr-2.7.7.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.jboss/jandex/1.1.0.Final/jar/e84a2122e76f0b6503be78094ddf2108057ac15f/jandex-1.1.0.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hibernate/hibernate-core/4.3.5.Final/jar/8ba469a4749447a8e9a04f229c8017f60f9a04c9/hibernate-core-4.3.5.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hibernate/hibernate-entitymanager/4.3.5.Final/jar/d5e18e531ffa6fde84b998d2fbf796663a8b112d/hibernate-entitymanager-4.3.5.Final.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-orm/4.0.6.RELEASE/jar/e13077d6527b7e0c1c04293c1d1696436d053a61/spring-orm-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.data/spring-data-commons/1.8.1.RELEASE/jar/add55d3fa4046f096567e08aee504b1baac25a29/spring-data-commons-1.8.1.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.data/spring-data-jpa/1.6.1.RELEASE/jar/fa07f0cd58698af4286dff1c6d02a87fb61d52bf/spring-data-jpa-1.6.1.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-aspects/4.0.6.RELEASE/jar/198b4f801c533e7441ff038aedc9c2c0099738d3/spring-aspects-4.0.6.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.security/spring-security-core/3.2.4.RELEASE/jar/493bc57396a821e8ffa7d99fac77cc79c15e9b7f/spring-security-core-3.2.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.security/spring-security-config/3.2.4.RELEASE/jar/952da051fc959b215c8e5882a7ab1ca5137af036/spring-security-config-3.2.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework.security/spring-security-web/3.2.4.RELEASE/jar/197d803ab63dd3523d9df186505fc1cc93044334/spring-security-web-3.2.4.RELEASE.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/asm/asm/3.2/jar/9bc1511dec6adf302991ced13303e4140fdf9ab7/asm-3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.jettison/jettison/1.1/bundle/1a01a2a1218fcf9faa2cc2a6ced025bdea687262/jettison-1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.activation/activation/1.1.1/jar/485de3a253e23f645037828c07f1d7f1af40763a/activation-1.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.xml.stream/stax-api/1.0-2/jar/d6337b0de8b25e53e81b922352fbea9f9f57ba0b/stax-api-1.0-2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.xml.bind/jaxb-api/2.2.2/jar/aeb3021ca93dde265796d82015beecdcff95bf09/jaxb-api-2.2.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.sun.xml.bind/jaxb-impl/2.2.3-1/jar/56baae106392040a45a06d4a41099173425da1e6/jaxb-impl-2.2.3-1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.jackson/jackson-core-asl/1.9.13/jar/3c304d70f42f832e0a86d45bd437f692129299a4/jackson-core-asl-1.9.13.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.jackson/jackson-mapper-asl/1.9.2/jar/95400a7922ce75383866eb72f6ef4a7897923945/jackson-mapper-asl-1.9.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.jackson/jackson-jaxrs/1.9.2/jar/aedf43f1d5005561e531b6bf0d067e4d20f58aba/jackson-jaxrs-1.9.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.jackson/jackson-xc/1.9.2/jar/437c991a8eb2c8b69ef1dba2eba27fccb9b98448/jackson-xc-1.9.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.jvnet/mimepull/1.6/jar/9a108888661e4c47edec899b796c91557ebf3a35/mimepull-1.6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/javax.mail/mail/1.5.0-b01/jar/c128515e42609622ce3f7dc0b431026d80bdb688/mail-1.5.0-b01.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/commons-codec/commons-codec/1.6/jar/b7f0fc8f61ecadeb3695f0b9464755eee44374d4/commons-codec-1.6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/stax/stax-api/1.0.1/jar/49c100caf72d658aca8e58bd74a4ba90fa2b0d70/stax-api-1.0.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.xmlbeans/xmlbeans/2.3.0/jar/8704dcf5c9f10265a08f5020b0fab70eb64ac3c4/xmlbeans-2.3.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/bouncycastle/bcmail-jdk14/138/jar/14ff2dfec8578f5f6838c4d6a77a86789afe5382/bcmail-jdk14-138.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/bouncycastle/bcprov-jdk14/138/jar/de366c3243a586eb3c0e2bcde1ed9bb1bfb985ff/bcprov-jdk14-138.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.bouncycastle/bcprov-jdk14/1.38/jar/de366c3243a586eb3c0e2bcde1ed9bb1bfb985ff/bcprov-jdk14-1.38.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.bouncycastle/bcmail-jdk14/1.38/jar/14ff2dfec8578f5f6838c4d6a77a86789afe5382/bcmail-jdk14-1.38.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.bouncycastle/bctsp-jdk14/1.38/jar/4821122f8390d15f4b5ee652621e2a2bb1f1bf16/bctsp-jdk14-1.38.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/commons-lang/commons-lang/2.6/jar/ce1edb914c94ebc388f086c6827e8bdeec71ac2/commons-lang-2.6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/backport-util-concurrent/backport-util-concurrent/3.1/jar/682f7ac17fed79e92f8e87d8455192b63376347b/backport-util-concurrent-3.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-plugin-api/2.2.1/jar/d60c36b60f760e0b5b87dd0c6311f93a72dc4585/maven-plugin-api-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-utils/1.5.15/jar/c689598ce1eb94c304817877ed15911099972526/plexus-utils-1.5.15.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-artifact/2.2.1/jar/23600f790d4dab2cb965419eaa982e3e84c428f8/maven-artifact-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-model/2.2.1/jar/c0a1c17436ec3ff5a56207c031d82277b4250a29/maven-model-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-interpolation/1.11/jar/ad9dddff6043194904ad1d2c00ff1d003c3915f7/plexus-interpolation-1.11.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hamcrest/hamcrest-core/1.3/jar/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-1.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-classworlds/1.2-alpha-9/jar/a927f9212093cb8fde7de0a5aa40ea4f5678215f/plexus-classworlds-1.2-alpha-9.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-container-default/1.0-alpha-30/jar/669d4ba8e898e37987eb5e30b121ed1d62c5b7b8/plexus-container-default-1.0-alpha-30.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-settings/2.2.1/jar/2236ffe71fa5f78ce42b0f5fc22c54ed45f14294/maven-settings-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-profile/2.2.1/jar/3950071587027e5086e9c395574a60650c432738/maven-profile-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-provider-api/1.0-beta-6/jar/3f952e0282ae77ae59851d96bb18015e520b6208/wagon-provider-api-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-repository-metadata/2.2.1/jar/98f0c07fcf1eeb213bef8d9316a9935184084b06/maven-repository-metadata-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-artifact-manager/2.2.1/jar/ec355b913c34d37080810f98e3f51abecbe1572b/maven-artifact-manager-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-plugin-registry/2.2.1/jar/72a24b7775649af78f3986b5aa7eb354b9674cfd/maven-plugin-registry-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-project/2.2.1/jar/8239e98c16f641d55a4ad0e0bab0aee3aff8933f/maven-project-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.sonatype.plexus/plexus-cipher/1.4/jar/50ade46f23bb38cd984b4ec560c46223432aac38/plexus-cipher-1.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.sonatype.plexus/plexus-sec-dispatcher/1.4/jar/43fde524e9b94c883727a9fddb8669181b890ea7/plexus-sec-dispatcher-1.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-plugin-parameter-documenter/2.2.1/jar/1a117baac49437fc5a6fcd9f18f779e6bad4207e/maven-plugin-parameter-documenter-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/nekohtml/xercesMinimal/1.9.6.2/jar/d1c5e063683a0e6f77cd5f051a9d4af48346fa6/xercesMinimal-1.9.6.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/nekohtml/nekohtml/1.9.6.2/jar/2d960be7b62ae6622dbbbe49ab4ffdc609f85c80/nekohtml-1.9.6.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/commons-httpclient/commons-httpclient/3.1/jar/964cd74171f427720480efdec40a7c7f6e58426a/commons-httpclient-3.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-http-shared/1.0-beta-6/jar/ccd70d7e0d8c085e648a83f072da06ca9a53be94/wagon-http-shared-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-http-lightweight/1.0-beta-6/jar/b3815078570c3b1f0667e123d59717c6b726c6c2/wagon-http-lightweight-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-http/1.0-beta-6/jar/8c665cbb0ab67c355fbd2c942ad26e39753b6f2e/wagon-http-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.doxia/doxia-logging-api/1.1/jar/c8fe274396e40452ca3e6121f6dd00220b210d48/doxia-logging-api-1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.doxia/doxia-sink-api/1.1/jar/9fc15c69e09a14fd07acba7300009eff6e692a44/doxia-sink-api-1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.reporting/maven-reporting-api/2.2.1/jar/61942e490c112f84b3a1a61572d570f369414939/maven-reporting-api-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-error-diagnostics/2.2.1/jar/e81bb342d7d172f23d108dc8fa979a1facdcde8e/maven-error-diagnostics-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/commons-cli/commons-cli/1.2/jar/2bf96b7aa8b611c177d329452af1dc933e14501c/commons-cli-1.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-plugin-descriptor/2.2.1/jar/68d20ae3c40c4664dc52be90338af796db7ffb32/maven-plugin-descriptor-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-monitor/2.2.1/jar/afc57c3a1368cd34caccb638e00523701f398c20/maven-monitor-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.jcraft/jsch/0.1.38/jar/677f7038dd5c8d5d687c558d09c124f820a8fd5/jsch-0.1.38.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-component-api/1.0-alpha-16/jar/5a2100a1c6a37804b1abfc70000b0ea33b83b7f9/plexus-component-api-1.0-alpha-16.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.plexus/plexus-interactivity-api/1.0-alpha-6/jar/c06f0eb818633033f09a87d14c4cfb6f39af9a37/plexus-interactivity-api-1.0-alpha-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-ssh-common/1.0-beta-6/jar/c654cc7e10e18bedca04a6e42f980d6c68435fc/wagon-ssh-common-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-ssh/1.0-beta-6/jar/37ac531f8159dddffa398a7612d5cbe313228437/wagon-ssh-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/classworlds/classworlds/1.1/jar/60c708f55deeb7c5dfce8a7886ef09cbc1388eca/classworlds-1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven/maven-core/2.2.1/jar/6f488e461188496c62e161f32160b3465ce5901e/maven-core-2.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-file/1.0-beta-6/jar/6c53633505460caf49d2660de1e24744d915afb9/wagon-file-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.jackrabbit/jackrabbit-jcr-commons/1.5.0/bundle/816ca280dc631b277e7b963723f2e99b038383f2/jackrabbit-jcr-commons-1.5.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.jackrabbit/jackrabbit-webdav/1.5.0/jar/b14c7fbbd34862d4d51c5e72ba3a69cde892c260/jackrabbit-webdav-1.5.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/slf4j-nop/1.5.3/jar/36a3c886235cddd05e55a979cef549196740231a/slf4j-nop-1.5.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-webdav-jackrabbit/1.0-beta-6/jar/b694b223d0f19abcb32e304ebd5054061ee0f7b5/wagon-webdav-jackrabbit-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.slf4j/slf4j-jdk14/1.5.6/jar/cc383fbd07dd1826bbcba1b907bbdc0b5be627f1/slf4j-jdk14-1.5.6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.maven.wagon/wagon-ssh-external/1.0-beta-6/jar/76918505c5fa6e309cd393aca8acd1b236559288/wagon-ssh-external-1.0-beta-6.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/com.googlecode.flyway/flyway-core/2.1.1/jar/49f345a4924d84a961ba136fae73d0d256c1e080/flyway-core-2.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/c3p0/c3p0/0.9.1.1/jar/302704f30c6e7abb7a0457f7771739e03c973e80/c3p0-0.9.1.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.httpcomponents/httpcore/4.4-alpha1/jar/feb2686d4cd107f591bb85c4b3ec65889a5bd374/httpcore-4.4-alpha1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/net.minidev/json-smart/1.2/bundle/199828b0a7be9626c6eaecb005baddd24bfddc1f/json-smart-1.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/asm/asm-tree/3.2/jar/cd792e29c79d170c5d0bdd05adf5807cf6875c90/asm-tree-3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/asm/asm-commons/3.2/jar/e7a19b8c60589499e35f5d2068d09013030b8891/asm-commons-3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/asm/asm-util/3.2/jar/37ebfdad34d5f1f45109981465f311bbfbe82dcf/asm-util-3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/asm/asm-analysis/3.2/jar/c624956db93975b7197699dcd7de6145ca7cf2c8/asm-analysis-3.2.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.codehaus.groovy/groovy/1.8.4/jar/344c49f07cf37471935d5103b6cbe7c5aaa09445/groovy-1.8.4.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.apache.httpcomponents/httpmime/4.2.1/jar/7c772bace9aa31a728c39a88c6ff66a7cd177e89/httpmime-4.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/commons-collections/commons-collections/3.2.1/jar/761ea405b9b37ced573d2df0d1e3a4e0f9edc668/commons-collections-3.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.ccil.cowan.tagsoup/tagsoup/1.2.1/jar/5584627487e984c03456266d3f8802eb85a9ce97/tagsoup-1.2.1.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.hamcrest/hamcrest-library/1.3/jar/4785a3c21320980282f9f33d0d1264a69040538f/hamcrest-library-1.3.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.objenesis/objenesis/1.0/jar/9b473564e792c2bdf1449da1f0b1b5bff9805704/objenesis-1.0.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.mockito/mockito-core/1.9.5/jar/c3264abeea62c4d2f367e21484fbb40c7e256393/mockito-core-1.9.5.jar, file:/home/vorburger/.gradle/caches/artifacts-26/filestore/org.springframework/spring-test/4.0.6.RELEASE/jar/b2f65445f300f1317fe694e6530cce39d7090ff6/spring-test-4.0.6.RELEASE.jar, file:/home/vorburger/dev/M/MariaDB4j/target/classes/, file:/home/vorburger/dev/M/MariaDB4j/target/test-classes/, file:/home/vorburger/.m2/repository/mysql/mysql-connector-java/5.1.31/mysql-connector-java-5.1.31.jar, file:/home/vorburger/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/home/vorburger/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/home/vorburger/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar, file:/home/vorburger/.m2/repository/org/slf4j/slf4j-simple/1.7.7/slf4j-simple-1.7.7.jar, file:/home/vorburger/.m2/repository/org/apache/commons/commons-exec/1.2/commons-exec-1.2.jar, file:/home/vorburger/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar, file:/home/vorburger/.m2/repository/org/springframework/spring-core/4.0.6.RELEASE/spring-core-4.0.6.RELEASE.jar, file:/home/vorburger/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar, file:/home/vorburger/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar, file:/home/vorburger/.m2/repository/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar, file:/home/vorburger/.m2/repository/commons-dbutils/commons-dbutils/1.6/commons-dbutils-1.6.jar, file:/home/vorburger/dev/ngMUI/com.temenos.ds.op.sdk.ide/configuration/org.eclipse.osgi/252/0/.cp/, file:/home/vorburger/dev/ngMUI/com.temenos.ds.op.sdk.ide/configuration/org.eclipse.osgi/251/0/.cp/] 16:56:56.891 [main] ERROR o.s.boot.SpringApplication - Application startup failed org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load bean class: ; nested exception is java.lang.NullPointerException     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:395) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:305) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:107) [spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: java.lang.NullPointerException: null     at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:63) ~[spring-boot-autoconfigure-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:391) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     ... 38 common frames omitted 16:56:56.893 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@31000e60] to prepare test instance [org.mifosplatform.boot.MifosSpringBootServerTest@1d470d0] java.lang.IllegalStateException: Failed to load ApplicationContext     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:101) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:292) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]     at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176) [spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) [.cp/:na]     at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) [.cp/:na] Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load bean class: ; nested exception is java.lang.NullPointerException     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:395) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:305) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:107) ~[spring-boot-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) ~[spring-test-4.0.6.RELEASE.jar:4.0.6.RELEASE]     ... 25 common frames omitted Caused by: java.lang.NullPointerException: null     at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:63) ~[spring-boot-autoconfigure-1.1.4.RELEASE.jar:1.1.4.RELEASE]     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:391) ~[spring-context-4.0.6.RELEASE.jar:4.0.6.RELEASE]     ... 38 common frames omitted``` `````` </body>
		<created>2014-08-01 15:00:21</created>
		<closed>2014-08-04 15:34:53</closed>
	</bug>
	<bug>
		<id>1321</id>
		<title>CLI jar can fail to locate sources if there is another jar on the classpath</title>
		<body>Sort of a corner case, but the CF buildpack hits it now because it adds another jar to the classpath when it runs a CLI-generated exploded jar. The problem is that `META-INF/MANIFEST.MF` is not unique any more so you have to use `findResources()` not `findResource()`. </body>
		<created>2014-07-31 16:51:09</created>
		<closed>2014-07-31 22:58:34</closed>
	</bug>
	<bug>
		<id>1320</id>
		<title>Unauthorised request returns HTTP 200 when deployed in an external Tomcat instead of 401 as when running embedded</title>
		<body>As discussed in issue #602, when I run my application, which is using Spring Security, as an executable jar and try to access the index page I get a HTTP 401 response and the browser asks for credentials.   If I deploy my application as a war file to an external tomcat then the index page returns a HTTP 200 (but still displays the Spring error page because the request was unauthorised).   Why is the behaviour different in these two cases?  I set logging to TRACE for all "org" classes and recorded the output in each case, starting from when I send the request from the browser:  https://gist.github.com/gdubya/ff40a9a5b6f62d7c0840  I haven't gone through it in detail yet, but at first glance the AccessDeniedException seems to have a few additional filters in the stacktrace. Does this have anything to do with it? </body>
		<created>2014-07-31 14:14:54</created>
		<closed>2014-08-04 21:57:04</closed>
	</bug>
	<bug>
		<id>1316</id>
		<title>Spring Boot removing content-type for CXF responses</title>
		<body>I have a webapp that I've developed with Spring, CXF and Apache Camel. I've been developing it for several months, using Tomcat to run and test it. This week, I integrated Spring Boot to take advantage of its external configuration feature.  Now something strange is happening. If I run "mvn spring-boot:run" and run my integration tests against it, everything works fine. The headers on my SOAP requests look as follows:  ``` HTTP/1.1 200 OK Server: Apache-Coyote/1.1 X-Application-Context: application X-Application-Context: application Content-Type: application/soap+xml;charset=UTF-8 Content-Length: 333 Date: Wed, 30 Jul 2014 17:03:18 GMT ```  However, if I run the same application in Tomcat, it seems that something is removing the Content-\* headers.  ``` HTTP/1.1 200 OK Server: Apache-Coyote/1.1 X-Application-Context: application Transfer-Encoding: chunked Date: Wed, 30 Jul 2014 17:01:09 GMT ```  This all worked fine before I integrated Spring Boot 1.1.4. </body>
		<created>2014-07-30 17:09:23</created>
		<closed>2014-07-31 12:23:56</closed>
	</bug>
	<bug>
		<id>1309</id>
		<title>Yaml parsing exception handling</title>
		<body>In `application.yaml` I have this:  ``` spring.profiles.active: ${profiles} ```  If I run this without specifying a profile, I get the following exception:  ``` java.util.regex.PatternSyntaxException: Illegal repetition near index 0 ${profiles} ^     at java.util.regex.Pattern.error(Pattern.java:1924)     at java.util.regex.Pattern.closure(Pattern.java:3104)     at java.util.regex.Pattern.sequence(Pattern.java:2101)     at java.util.regex.Pattern.expr(Pattern.java:1964)     at java.util.regex.Pattern.compile(Pattern.java:1665)     at java.util.regex.Pattern.&lt;init&gt;(Pattern.java:1337)     at java.util.regex.Pattern.compile(Pattern.java:1022)     at java.util.regex.Pattern.matches(Pattern.java:1128)     at java.lang.String.matches(String.java:2063)     at org.springframework.boot.yaml.ArrayDocumentMatcher.matches(ArrayDocumentMatcher.java:54)     at org.springframework.boot.yaml.SpringProfileDocumentMatcher.matches(SpringProfileDocumentMatcher.java:62)     at org.springframework.boot.yaml.YamlProcessor.process(YamlProcessor.java:213)     at org.springframework.boot.yaml.YamlProcessor.process(YamlProcessor.java:141)     at org.springframework.boot.yaml.YamlProcessor.process(YamlProcessor.java:127)     at org.springframework.boot.yaml.YamlPropertiesFactoryBean.getObject(YamlPropertiesFactoryBean.java:80)     at org.springframework.boot.env.YamlPropertySourceLoader.load(YamlPropertySourceLoader.java:56)     at org.springframework.boot.env.PropertySourcesLoader.load(PropertySourcesLoader.java:126)     at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.loadIntoGroup(ConfigFileApplicationListener.java:360)     at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:349)     at org.springframework.boot.context.config.ConfigFileApplicationListener$Loader.load(ConfigFileApplicationListener.java:317)     at org.springframework.boot.context.config.ConfigFileApplicationListener.addPropertySources(ConfigFileApplicationListener.java:155)     at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:138)     at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEnvironmentPreparedEvent(ConfigFileApplicationListener.java:131)     at org.springframework.boot.context.config.ConfigFileApplicationListener.onApplicationEvent(ConfigFileApplicationListener.java:120)     at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:98)     at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:100)     at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:59)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:284)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941) ```  Probably worth adding a custom exception here, if possible carrying more details, it's rather confusing this way.  Related to [this issue](https://github.com/spring-projects/spring-boot/issues/1301). </body>
		<created>2014-07-29 20:37:57</created>
		<closed>2016-08-31 15:56:38</closed>
	</bug>
	<bug>
		<id>1295</id>
		<title>GridFsTemplate should instantiate from MongoDbFactory</title>
		<body>Spring Cloud registers found MongoDB connections as `MongoDbFactory` instances. Spring Boot's `MongoDataAutoConfiguration` wants the actual `Mongo` object to instantiate `GridFsTemplate` and just wraps it into a `SimpleMongoDbFactory` anyway.  The `GridFsTemplate` method should take the `MongoDbFactory` as a parameter rather than creating its own; if no factory is externally supplied, the one created in the configuration class is identical to the duplicate currently created in `gridFsTemplate()`. </body>
		<created>2014-07-26 09:13:32</created>
		<closed>2014-08-06 21:17:45</closed>
	</bug>
	<bug>
		<id>1294</id>
		<title>@ConfigurationProperties cannot bind to Map from CompositePropertySource</title>
		<body>This is a corner case really, but it just bit me, so I'm going to fix it. the problem is that a CompositePropertySource is not enumerable. Making it enumerable will involve some reflection hacks (should be fixed in Spring probably). </body>
		<created>2014-07-25 15:29:36</created>
		<closed>2014-07-25 15:36:11</closed>
	</bug>
	<bug>
		<id>1293</id>
		<title>Registration of HttpMessageConverter should not replace existing converter of same type</title>
		<body>The constructor of `HttpMessageConverters` assumes that additional converters of assignable type of one of the default converters shall replace the default converter. Even more so, multiple additional converters of that type will override each other. This means that the `HttpMessageConverters` e.g. only allow a single converter of type `MappingJackson2HttpMessageConverter`, which is a bug for various reasons: - The converter setup includes setting the HTTP media type to be answered. So it's a perfectly valid use case to have multiple converters of the same type as they might be configured with different `ObjectMapper`s to accommodate the needs for certain JSON based media types. - Subtypes of `MappingJackson2HttpMessageConverter` might override `canRead(…)`/`canWrite(…)` to restrict the applicability of a converter - again, due to a certain `ObjectMapper` configuration being set up to render particular root types only.  Trying to work around this I played with `@EnableAutoConfiguration(exclude=HttpMessageConvertersAutoConfiguration.class` but using that as is breaks the app as `WebMvcAutoConfiguration` requires an `HttpMessageConverters` instance. After manually adding an empty bean of that type to the config, things are back to work as expected. </body>
		<created>2014-07-25 09:21:39</created>
		<closed>2014-07-28 22:41:59</closed>
	</bug>
	<bug>
		<id>1289</id>
		<title>MongoHealtIndicator fails without sufficient privileges</title>
		<body>`MongoHealtIndicator` uses command `{ serverStatus: 1 }` to check MongoDB connection status. This command fails in case user has insufficient privileges in database.   For example if MongoDB user account has only built in roles _read_ and/or _readWrite_ assigned. As result misleading message is shown in `/health` output:   ``` json "mongo":{"status":"DOWN","error":"java.lang.IllegalArgumentException: Data must not be null"} ```  Proposed solution: use MongoDB command `{ buildInfo: 1 }` to get server version. This command is working with built in roles _read_,  _readWrite_, _userAdmin_.  MongoDB version used: 2.6.3.  Not tested with other versions. Not tested with all [built in roles](http://docs.mongodb.org/manual/reference/built-in-roles/).  </body>
		<created>2014-07-24 00:24:21</created>
		<closed>2014-07-24 08:06:48</closed>
	</bug>
	<bug>
		<id>1268</id>
		<title>Non-Hibernate JPA config</title>
		<body>I need to configure boot to use EclipseLink, I thought I could just extend JpaBaseConfiguration and provide the createJpaVendorAdapter etc. However, JpaBaseConfiguration includes JpaProperties which has an embedded Hibernate specific class. That class has a DEFAULT_NAMING_STRATEGY which extends ImprovedNamingStrategy. So running boot with EclipseLink (or OpenJPA) results in "Caused by: java.lang.NoClassDefFoundError: org/hibernate/cfg/ImprovedNamingStrategy" </body>
		<created>2014-07-17 19:12:09</created>
		<closed>2014-07-21 21:29:40</closed>
	</bug>
	<bug>
		<id>1264</id>
		<title>HealthIndicator does not return HTTP Status 503 for Status.DOWN</title>
		<body>Currently HTTP status 200 is returned for Status.DOWN.  In the [Spring Boot 1.1 release notes](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.1-Release-Notes#healthindicators) it is stated that:  &gt; By default Status.DOWN will create a 503; Status.UP will return 200.  Step by step: - Create a simple web app configured with the actuator. - Add a "down" health check:  ``` @Component public class DownHealthIndicator extends AbstractHealthIndicator {      @Override     protected void doHealthCheck(Health.Builder builder) throws Exception {         builder.down();     } } ``` - Check the health status:   ``` $ curl -i localhost:8080/health HTTP/1.1 200 OK [...] {"status":"DOWN"} ```  Spring Boot version: 1.1.4.RELEASE </body>
		<created>2014-07-17 09:36:11</created>
		<closed>2014-07-21 15:03:11</closed>
	</bug>
	<bug>
		<id>1262</id>
		<title>RabbitProperties should not reorder addresses</title>
		<body>See https://github.com/spring-projects/spring-boot/commit/aa38d33404829b426699e4723eee62bf97d6ca2f#commitcomment-7017880 </body>
		<created>2014-07-17 06:14:58</created>
		<closed>2014-07-17 11:33:33</closed>
	</bug>
	<bug>
		<id>1259</id>
		<title>RelaxedPropertyResolver.subProperties() doesn't return same value as getProperty()</title>
		<body>When the `RelaxedPropertyResolver` has multiple property sources, the `subProperties()` method does not return the same property values as `getProperty()`. The `getProperty()` method returns the value from the first property source that defines it whereas the `subProperties()` method returns the value from the last property source that defines it.  Here is a test case:  ``` import java.util.Map; import java.util.Properties;  import org.junit.Assert; import org.junit.Test; import org.springframework.boot.bind.RelaxedPropertyResolver; import org.springframework.core.env.PropertiesPropertySource; import org.springframework.core.env.StandardEnvironment;  public class SubPropertiesTest {     @Test     public void testPropertySource() throws Exception {         String propertyPrefix = "spring.datasource.";         String propertyName = "password";         String fullPropertyName = propertyPrefix + propertyName;         System.setProperty(fullPropertyName, "systemPassword");         StandardEnvironment environment = new StandardEnvironment();         Properties properties = new Properties();         properties.put(fullPropertyName, "propertiesPassword");         PropertiesPropertySource propertySource = new PropertiesPropertySource("properties", properties);         environment.getPropertySources().addLast(propertySource);         RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(environment, propertyPrefix);         String directProperty = propertyResolver.getProperty(propertyName);         Map&lt;String, Object&gt; subProperties = propertyResolver.getSubProperties("");         String subProperty = (String) subProperties.get(propertyName);         Assert.assertEquals(directProperty, subProperty);     } } ``` </body>
		<created>2014-07-16 13:35:47</created>
		<closed>2014-07-21 14:15:26</closed>
	</bug>
	<bug>
		<id>1257</id>
		<title>Spring Boot with Spring Security as deployable war results in redirect loop</title>
		<body>I'm migrating a JSP based application to Spring Boot, for the moment I'm tied to JSP but I'm planning to move to Thymeleaf. However in the meantime I need JSPs to work and I also need Spring Security (basic auth) to work.  When creating an executable jar and run the application, navigating to the URL nicely prompts me with a login box. Supplying credentials is resulting in a login to the application and shows me the default error page. Because JSP doesn't work in a jar file.  The jar is now packaged as a war which can be deployed on Tomcat, however when doing so navigating to the URL leads to a redirect loop to /error instead of prompting me with a login box.   An executable war seems to work but I need it to be a deployable war for now (or at least have that as an option!).  </body>
		<created>2014-07-16 09:52:09</created>
		<closed>2014-07-17 13:21:58</closed>
	</bug>
	<bug>
		<id>1251</id>
		<title>Start-Class and Main-Class can end up pointing to same place</title>
		<body>``` $ cd spring-boot-samples/spring-boot-sample-simple $ mvn clean install package # note the mistake $ java -jar target/*.jar &lt;BANG!&gt; ``` </body>
		<created>2014-07-14 16:46:26</created>
		<closed>2014-07-30 10:14:32</closed>
	</bug>
	<bug>
		<id>1242</id>
		<title>Unable to resolve a Map of configuration properties when the key is an Enumerated type</title>
		<body>I have a @ConfigurationProperties class that accepts a Map where the key is an enumerated type:  ``` public class Configuration {     private Map&lt;BaseUri, String&gt; baseUris = newHashMap();      public Map&lt;BaseUri, String&gt; getBaseUris() {         return baseUris;     }      public enum BaseUri {         operations,         admin     } } ```  And a corresponding yml file:  ``` baseUris:   operations: http://localhost:9080/   admin: http://localhost:9080/ ```  Attempting to initialise this application gives:  ``` Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [boot.config.Configuration$BaseUri]: no matching editors or conversion strategy found     at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:267)     at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:459) ```  If I remove the enumerated type and use Map&lt; String, String &gt;, it works fine.  The cause seems to be the following line in org.springframework.boot.bind.RelaxedDataBinder:  ```                 wrapper.getPropertyValue(name + "[foo]"); ```  Because 'foo' doesn't correspond to any of the enumerated values, the exception is produced.  I'm sure this is hopelessly naive, but changing it to the following fixed the problem and passed the tests in the current master:  ```                 String mapKey = (path.nodes.size() &gt; 1) ? path.nodes.get(path.nodes.size() - 1).name : "foo";                 wrapper.getPropertyValue(name + "[" + mapKey + "]"); ```  I note that there is an existing test for properties evaluating to an enumerated type, but I couldn't see how it properly tested this situtation. </body>
		<created>2014-07-12 08:58:18</created>
		<closed>2014-08-04 22:47:58</closed>
	</bug>
	<bug>
		<id>1232</id>
		<title>How to determine if server startup was successful?</title>
		<body>when running the [example project](http://projects.spring.io/spring-boot/) while something is already running on port 8080, the caller is not able to determine that the startup was not successfull.   As you can see below, an exception will be written into the log in this case, right after this there is the message "Tomcat started on port(s): -1/http", and the JVM keeps running alltought there isn't any webserver running.  I would like to have a way to handle this kind of startup failures.  ```   .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::        (v1.1.4.RELEASE)  2014-07-10 10:41:27.921  INFO 8600 --- [           main] hello.SampleController                   : Starting SampleController on eddie with PID 8600 (/home/mst_unenc/workspace/default/boottest/target/classes started by mst in /home/mst_unenc/workspace/default/boottest) 2014-07-10 10:41:27.963  INFO 8600 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1bd940d: startup date [Thu Jul 10 10:41:27 CEST 2014]; root of context hierarchy 2014-07-10 10:41:28.436  INFO 8600 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2014-07-10 10:41:29.489  INFO 8600 --- [           main] .t.TomcatEmbeddedServletContainerFactory : Server initialized with port: 8080 2014-07-10 10:41:29.837  INFO 8600 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2014-07-10 10:41:29.839  INFO 8600 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.54 2014-07-10 10:41:30.002  INFO 8600 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2014-07-10 10:41:30.003  INFO 8600 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2045 ms 2014-07-10 10:41:30.840  INFO 8600 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2014-07-10 10:41:30.850  INFO 8600 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2014-07-10 10:41:31.160  INFO 8600 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-07-10 10:41:31.403  INFO 8600 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto java.lang.String hello.SampleController.home() 2014-07-10 10:41:31.415  INFO 8600 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2014-07-10 10:41:31.420  INFO 8600 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-07-10 10:41:31.447  INFO 8600 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-07-10 10:41:31.448  INFO 8600 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-07-10 10:41:31.707  INFO 8600 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2014-07-10 10:41:31.928 ERROR 8600 --- [           main] o.a.coyote.http11.Http11NioProtocol      : Failed to start end point associated with ProtocolHandler ["http-nio-8080"]  java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method)     at sun.nio.ch.Net.bind(Net.java:414)     at sun.nio.ch.Net.bind(Net.java:406)     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)     at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473)     at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:647)     at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:449)     at org.apache.catalina.connector.Connector.startInternal(Connector.java:1007)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     at org.apache.catalina.core.StandardService.addConnector(StandardService.java:241)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:162)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:149)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:376)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:143)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at hello.SampleController.main(SampleController.java:20)  2014-07-10 10:41:31.938 ERROR 8600 --- [           main] o.apache.catalina.core.StandardService   : Failed to start connector [Connector[org.apache.coyote.http11.Http11NioProtocol-8080]]  org.apache.catalina.LifecycleException: Failed to start component [Connector[org.apache.coyote.http11.Http11NioProtocol-8080]]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)     at org.apache.catalina.core.StandardService.addConnector(StandardService.java:241)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:162)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:149)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:376)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:143)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:952)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:941)     at hello.SampleController.main(SampleController.java:20) Caused by: org.apache.catalina.LifecycleException: service.getName(): "Tomcat";  Protocol handler start failed     at org.apache.catalina.connector.Connector.startInternal(Connector.java:1014)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     ... 12 common frames omitted Caused by: java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method)     at sun.nio.ch.Net.bind(Net.java:414)     at sun.nio.ch.Net.bind(Net.java:406)     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)     at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:473)     at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:647)     at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:449)     at org.apache.catalina.connector.Connector.startInternal(Connector.java:1007)     ... 13 common frames omitted  2014-07-10 10:41:31.953  INFO 8600 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): -1/http 2014-07-10 10:41:31.955  INFO 8600 --- [           main] hello.SampleController                   : Started SampleController in 4.622 seconds (JVM running for 5.104) ``` </body>
		<created>2014-07-10 09:29:25</created>
		<closed>2014-07-10 14:17:48</closed>
	</bug>
	<bug>
		<id>1228</id>
		<title>Encoding error when using spring-boot 1.1.3, 1.1.4 or 1.1.5 but works great in 1.0.2 version</title>
		<body>Hi, seems like there is a bug in later releases of spring boot when message source is used in webapp alone or together with thymeleaf.  I have tried to pinpoint the bug but could not find the reason why the encoding show up wrong.   I have created a simple github project to reproduce the error in 2 minutes, follow this quick steps 1. git clone https://github.com/maol74/spring-boot-encoding-error.git 2. cd spring-boot-encoding-error 3. Read and follow the README.md file in the root directory </body>
		<created>2014-07-09 21:04:31</created>
		<closed>2014-07-10 11:42:05</closed>
	</bug>
	<bug>
		<id>1212</id>
		<title>Deadlock when health check is run before application has started up when registering new rabbit connection</title>
		<body>When my application starts it will occasionally stop starting and I traced it down to a deadlock between my queue listeners starting up.  In my Spring Configuration I am declaring a binding between a queue and an exchange.   If the health url is called invoking the CompositeHealthIndicator during startup it can obtain a lock on the RabbitMQ Connection factory needed by startup and wait on a lock held by startup.  I am running: - Spring Boot version 1.1.3.RELEASE - Spring AMQP 1.3.4.RELEASE  I am using embedded Tomcat and exposing it on 8080 and 8443 following these instructions: http://docs.spring.io/spring-boot/docs/1.1.3.RELEASE/reference/htmlsingle/#howto-enable-multiple-connectors-in-tomcat  Here is my main thread.  It is in the middle of starting up and it is adding some binding to RabbitMQ:  ``` "main":     at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:357)     - waiting to lock &lt;0x00000000e4030d60&gt; (a java.lang.Object)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils$1.createConnection(ConnectionFactoryUtils.java:80) ...     at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:820)     at org.springframework.amqp.rabbit.core.RabbitAdmin.declareBinding(RabbitAdmin.java:216) ... ```  Meanwhile, we have a tool pinging the url "health" for status.  ``` "http-nio-8443-exec-7":     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:186)     - waiting to lock &lt;0x00000000e1d23970&gt; (a java.util.concurrent.ConcurrentHashMap)     at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:488)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:387)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:362)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:466)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:459)     at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1063)     at org.springframework.amqp.rabbit.core.RabbitAdmin.initialize(RabbitAdmin.java:356)     at org.springframework.amqp.rabbit.core.RabbitAdmin$11.onCreate(RabbitAdmin.java:323)     at org.springframework.amqp.rabbit.connection.CompositeConnectionListener.onCreate(CompositeConnectionListener.java:32)     at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:361)     - locked &lt;0x00000000e4030d60&gt; (a java.lang.Object)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils$1.createConnection(ConnectionFactoryUtils.java:80)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.doGetTransactionalResourceHolder(ConnectionFactoryUtils.java:130)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.getTransactionalResourceHolder(ConnectionFactoryUtils.java:67)     at org.springframework.amqp.rabbit.connection.RabbitAccessor.getTransactionalResourceHolder(RabbitAccessor.java:106)     at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:826)     at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:820)     at org.springframework.boot.actuate.health.RabbitHealthIndicator.getVersion(RabbitHealthIndicator.java:49)     at org.springframework.boot.actuate.health.RabbitHealthIndicator.doHealthCheck(RabbitHealthIndicator.java:45)     at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:38) ```  The problem is that health check has obtained a lock on in the rabbitmq Connection factory that startup needs.  At the same time main startup has a lock in DefaultSingletonBeanRegistry.getSingleton that the health check needs.  ``` Found one Java-level deadlock: ============================= "http-nio-8443-exec-13":   waiting to lock monitor 0x00007fe9e0006dc8 (object 0x00000000e4030d60, a java.lang.Object),   which is held by "http-nio-8443-exec-7" "http-nio-8443-exec-7":   waiting to lock monitor 0x00007fea08029278 (object 0x00000000e1d23970, a java.util.concurrent.ConcurrentHashMap),   which is held by "main" "main":   waiting to lock monitor 0x00007fe9e0006dc8 (object 0x00000000e4030d60, a java.lang.Object),   which is held by "http-nio-8443-exec-7" ```  Here is the complete stack trace with some redactions:  ``` "main" prio=10 tid=0x00007fea146b8000 nid=0x15c4 waiting for monitor entry [0x00007fea0d47b000]    java.lang.Thread.State: BLOCKED (on object monitor)     at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:357)     - waiting to lock &lt;0x00000000e4030d60&gt; (a java.lang.Object)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils$1.createConnection(ConnectionFactoryUtils.java:80)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.doGetTransactionalResourceHolder(ConnectionFactoryUtils.java:130)     at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.getTransactionalResourceHolder(ConnectionFactoryUtils.java:67)     at org.springframework.amqp.rabbit.connection.RabbitAccessor.getTransactionalResourceHolder(RabbitAccessor.java:106)     at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:826)     at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:820)     at org.springframework.amqp.rabbit.core.RabbitAdmin.declareBinding(RabbitAdmin.java:216)     at com.myapp.MySpringConfiguration.myWorkerListenerContainer(MySpringConfiguration.java:112)     at com.myapp.MySpringConfiguration$$EnhancerBySpringCGLIB$$4249b054.CGLIB$myWorkerListenerContainer$0(&lt;generated&gt;)     at com.myapp.MySpringConfiguration$$EnhancerBySpringCGLIB$$4249b054$$FastClassBySpringCGLIB$$2ea24afb.invoke(&lt;generated&gt;)     at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)     at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:312)     at com.myapp.MySpringConfiguration$$EnhancerBySpringCGLIB$$4249b054.myWorkerListenerContainer(&lt;generated&gt;)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:166)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     - locked &lt;0x00000000e1d23970&gt; (a java.util.concurrent.ConcurrentHashMap)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     - locked &lt;0x00000000e1885d38&gt; (a java.lang.Object)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:944)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:933)     at com.myapp.Application.main(Application.java:71)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:744) ``` </body>
		<created>2014-07-06 22:37:47</created>
		<closed>2014-07-08 06:45:05</closed>
	</bug>
	<bug>
		<id>1204</id>
		<title>Repackage broken in gradle plugin</title>
		<body>trouble with boot 1.1.2/1.1.3 gradle plugin. We use custom BootRepackage task to build a boot fat jar. https://github.com/spring-projects/spring-hadoop/blob/master/build.gradle:  ``` task appmasterBootJar(type: BootRepackage, dependsOn: appmasterJar) {   withJarTask = appmasterJar   mainClass = 'org.springframework.yarn.boot.app.SpringYarnBootApplication' } ```  Manifest for file test-archive-appmaster.jar is(1.1.2/1.1.3):  ``` $ cat MANIFEST.MF  Manifest-Version: 1.0 ```  Manifest for file test-archive-appmaster.jar is(1.1.1):  ``` $ cat MANIFEST.MF  Manifest-Version: 1.0 Start-Class: org.springframework.yarn.boot.app.SpringYarnBootApplicati  on Spring-Boot-Version: 1.1.1.RELEASE Main-Class: org.springframework.boot.loader.JarLauncher ```  Problem might be in commit https://github.com/spring-projects/spring-boot/commit/f83c6aa7c1568a208d9677338d49d4985ed15d72 or any other just around it. There seem to be quite a few changes to gradle plugin right after 1.1.1. </body>
		<created>2014-07-02 20:11:55</created>
		<closed>2014-07-03 12:38:25</closed>
	</bug>
	<bug>
		<id>1199</id>
		<title>Resource filtering default configuration and documentation is error prone</title>
		<body>I think there're a couple of issues with the default configuration of the maven-resources-plugin within **spring-boot-starter-parent**; I'll be glad to contribute a pull request (I suppose it'll land in 1.2 since it might be a non-retrocompatible change) if you think this makes sense. - The maven-resources-plugin when using spring-boot-starter-parent sports the default configuration, which leads to a filtering of ${...} values that exist at compile time in resources; e.g. I had an issue where ${java.home} , which I was using in application.properties, was filtered with the build box variable rather than being filled at runtime (which is what I wanted).  Proposed solution: use a different default configuration for maven-resources-plugin, limiting the compile-time filtering delimiter to '@', something like  ``` xml &lt;plugin&gt;                  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                  &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;                  &lt;version&gt;2.6&lt;/version&gt;                  &lt;configuration&gt;                      &lt;encoding&gt;UTF-8&lt;/encoding&gt;                      &lt;delimiters&gt;                          &lt;delimiter&gt;@&lt;/delimiter&gt;                      &lt;/delimiters&gt;                      &lt;useDefaultDelimiters&gt;false&lt;/useDefaultDelimiters&gt;                  &lt;/configuration&gt; &lt;/plugin&gt;       ``` - The default resources filtering in spring-boot-starter-parent only applies to _application.yml_ and _application.properties_. This can lead to unpredictable results when using profiles: application.properties would be filtered, while application-profile.properties would not.  Proposed solution: filter application-\* files as well. - The documentation at [58.3](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto-use-short-command-line-arguments) is a bit misleading, saying that  &lt;pre&gt; If you have enabled maven filtering for the application.properties you may want to avoid using ${*} for the tokens to filter as it conflicts with those placeholders. You can either use @*@ (i.e. @maven.token@ instead of ${maven.token}) or you can configure the maven-resources-plugin to use other delimiters. &lt;/pre&gt;   The suggestion is fine (it's what I did in the implementation) but it would suggest that resources filtering is **not** enabled by default, while it is indeed.  Proposed solution: change the docs to reflect what actually happens when filtering.  Of course this whole issue could be solved by completely disabling resource filtering in spring-boot-starter-parent.  Let me know what you think about that. </body>
		<created>2014-07-01 14:24:21</created>
		<closed>2014-11-03 13:01:56</closed>
	</bug>
	<bug>
		<id>1190</id>
		<title>Broken Jackson getter serialization.</title>
		<body>Hi,  I've got problem with Spring Boot 1.1.1-1.1.3. All works on Spring Boot 1.0.2.  There is problem with serialization of getters. It doesn't work with entities which is got from a repository, but it's ok with serialization of POJO classes. Adding of @JsonAutoDetect and @JsonProperty don't help.  I  forked [spring-guides/gs-accessing-data-rest](https://github.com/KonstantinLepa/gs-accessing-data-rest) and [make some getters](https://github.com/KonstantinLepa/gs-accessing-data-rest/commit/f650d9ddd807988d52051186f1a9c9fb83454ea4) (Spring Boot 1.1.3). Then I ran server (./gradlew bootRun) and executed next commands:  ``` bash curl -i -X POST -H "Content-Type:application/json" -d '{  "firstName" : "Frodo",  "lastName" : "Baggins" }' http://localhost:8080/people curl http://localhost:8080/people ```  I got answer without properties 'number' and 'someString':  ``` javascript {   "_links" : {     "self" : {       "href" : "http://localhost:8080/people{?page,size,sort}",       "templated" : true     },     "search" : {       "href" : "http://localhost:8080/people/search"     }   },   "_embedded" : {     "people" : [ {       "firstName" : "Frodo",       "lastName" : "Baggins",       "_links" : {         "self" : {           "href" : "http://localhost:8080/people/1"         }       }     } ]   },   "page" : {     "size" : 20,     "totalElements" : 1,     "totalPages" : 1,     "number" : 0   } } ```  If I [switch](https://github.com/KonstantinLepa/gs-accessing-data-rest/commit/ad56871db3dcdb2fb06972724941b4a688c4f4c6) to Spring Boot v1.0.2, I've got correct output:  ``` javascript {   "_links" : {     "self" : {       "href" : "http://localhost:8080/people{?page,size,sort}",       "templated" : true     },     "search" : {       "href" : "http://localhost:8080/people/search"     }   },   "_embedded" : {     "people" : [ {       "firstName" : "Frodo",       "lastName" : "Baggins",       "someString" : "A string",       "number" : 5,       "_links" : {         "self" : {           "href" : "http://localhost:8080/people/1"         }       }     } ]   },   "page" : {     "size" : 20,     "totalElements" : 1,     "totalPages" : 1,     "number" : 0   } } ```  Thanks </body>
		<created>2014-06-29 18:20:40</created>
		<closed>2014-07-01 08:02:03</closed>
	</bug>
	<bug>
		<id>1187</id>
		<title>Jetty JARs get in both lib and lib-provided</title>
		<body>When using Gradle to package application into a WAR, Jetty JARs end up in both `lib` and `lib-provided` folders. Those in `lib` folder will prevent application from being deployed in servlet container (for example, Tomcat).  This issue is present in versions 1.1.2 and 1.1.3. When using Spring Boot version 1.1.1 the resulting WAR file is correct (Jetty JARs are only in `lib-provided` folder).  `build.gradle` file to reproduce this problem:  ``` buildscript {   repositories { mavenCentral() }   dependencies { classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.3.RELEASE' } }  apply plugin: 'java' apply plugin: 'spring-boot' apply plugin: 'war'  sourceCompatibility = 1.7  repositories { mavenCentral() }  configurations.compile {   exclude group: 'commons-logging'   exclude module: 'spring-boot-starter-tomcat' }  dependencies {   compile 'org.springframework.boot:spring-boot-starter-web'   providedCompile 'org.eclipse.jetty:jetty-webapp:9.2.1.v20140609'   providedCompile 'org.eclipse.jetty.websocket:websocket-server:9.2.1.v20140609' }  task wrapper(type: Wrapper) {   gradleVersion = '1.12' } ``` </body>
		<created>2014-06-28 09:17:08</created>
		<closed>2014-07-01 09:11:24</closed>
	</bug>
	<bug>
		<id>1185</id>
		<title>Unable to disable mappings production service</title>
		<body>I enabled the production services in our spring boot project and was able to disable all the endpoints except the mappings one. In my `application.properties` file I set `endpoints.mappings.enabled=false` and after restarting I can still access `/mappings`. I even tried setting an ENV property `export ENDPOINTS_MAPPINGS_ENABLED=false` and restart, but that didn't work either.  I'm using spring boot version 1.0.1.RELEASE. </body>
		<created>2014-06-28 02:57:33</created>
		<closed>2014-06-28 06:21:42</closed>
	</bug>
	<bug>
		<id>1179</id>
		<title>Groovy jars with @GrabResolver annotations don't run unless ivy is added as a dependency</title>
		<body>Here is my application:  bad.groovy  ``` groovy @GrabResolver(name='clojars.org', root='http://clojars.org/repo') @Grab('redis.embedded:embedded-redis:0.2')  @RestController class EmbeddedRedis {     @RequestMapping('/')     String home() {         'hello'     } } ```  This runs correctly when I run it via spring run bad.groovy  Package the app via spring jar bad.jar bad.groovy  Run the app via java -jar bad.jar  I get an exception:  ``` Caused by: java.lang.NoClassDefFoundError: org/apache/ivy/core/report/ResolveReport     at java.lang.Class.getDeclaredMethods0(Native Method)     at java.lang.Class.privateGetDeclaredMethods(Class.java:2531) ```  I need to explicitly add   ``` @Grab('org.apache.ivy:ivy:2.3.0') ```  in order for this to run correctly within the jar file. There shouldn't be this discrepancy when working with Groovy files.   This is with 1.1.2.RELEASE  </body>
		<created>2014-06-26 23:17:08</created>
		<closed>2014-06-27 09:22:58</closed>
	</bug>
	<bug>
		<id>1166</id>
		<title>Cannot create 2 DataSources when upgrading to version 1.1.2</title>
		<body>Hi,  When upgrading a batch application with two datasources from 1.1.1 to 1.1.2, application startup fail with a **_BeanCurrentlyInCreationException**_  ``` Error creating bean with name 'dataSourceAutoConfigurationInitializer': Requested bean is currently in creation: Is there an unresolvable circular reference ? ```  The two datasources are defined in application.yml as follow :  ``` datasource:   batch:     driverClassName: org.postgresql.Driver     url: jdbc:postgresql://localhost/batch     username: user     password: pass   app:     driverClassName: org.postgresql.Driver     url: jdbc:postgresql://localhost/app     username: user     password: pass ```  and used by beans :  ``` @Configuration public class Datasources {      @Bean     @Primary     @ConfigurationProperties(prefix = "datasource.batch")     public DataSource batchDataSource() {         return DataSourceBuilder.create().build();     }      @Bean(name = "dsApp")     @ConfigurationProperties(prefix = "datasource.app")     public DataSource appDataSource() {         return DataSourceBuilder.create().build();     }      @Bean     public JdbcTemplate jdbcTemplate() {         return new JdbcTemplate(exdatDataSource());     } } ```  Setup is STS on Linux x64 with Java 8 </body>
		<created>2014-06-25 15:05:23</created>
		<closed>2014-06-26 08:49:50</closed>
	</bug>
	<bug>
		<id>1149</id>
		<title>1.1.2 breaks error page (blank page) in deployed WAR</title>
		<body>With the upgrade from 1.1.1 to 1.1.2, using the BasicErrorController, any Exception thrown causes a blank error page to appear and the following log message appears:  ``` 2014-06-25 09:16:41.688 ERROR 9940 --- [apr-8080-exec-6] o.s.boot.context.web.ErrorPageFilter     : Cannot forward to error page for &lt;url&gt; (response is committed), so this response may have the wrong status code ```  This only happens when run on a "real" tomcat server. Using "gradle bootRun" instead still works.  I assume that this was broken by bfe4240ed26b1c61692bc5f76857fcb300ed484e which checks for if (!response.isCommitted()) instead of if (response.isCommitted()) . </body>
		<created>2014-06-25 07:26:24</created>
		<closed>2014-06-25 07:47:29</closed>
	</bug>
	<bug>
		<id>1134</id>
		<title>SecurityException: signer information does not match signer information of other classes in the same package</title>
		<body>I'm trying to upgrade to Spring Boot 1.1.x but when signing the jar, I'm getting security exceptions on configuration annotated classes:  ``` java.lang.IllegalStateException: Cannot load configuration class: com.example.app.view.WebConfig         at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:378)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurationClassPostProcessor.java:263)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:265)         at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:126)         at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:609)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)         at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)         at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)         at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)         at com.example.app.ExampleApplication.main(ExampleApplication.java:42)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)         at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null         at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237)         at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)         at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:317)         at org.springframework.context.annotation.ConfigurationClassEnhancer.createClass(ConfigurationClassEnhancer.java:128)         at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:100)         at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:368)         ... 15 common frames omitted Caused by: java.lang.reflect.InvocationTargetException: null         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:606)         at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384)         at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219)         ... 20 common frames omitted Caused by: java.lang.SecurityException: class "com.example.app.view.WebConfig$$EnhancerBySpringCGLIB$$d849233e"'s signer information does not match signer information of other classes in the same package         at java.lang.ClassLoader.checkCerts(ClassLoader.java:952)         at java.lang.ClassLoader.preDefineClass(ClassLoader.java:666)         at java.lang.ClassLoader.defineClass(ClassLoader.java:794)         ... 26 common frames omitted ```  The same code works just fine on Spring Boot 1.0.x. Also when I don't sign the jar, it runs perfectly well on 1.1.x.  Did something break moving to 1.1.x or am I missing some configuration? </body>
		<created>2014-06-22 08:24:41</created>
		<closed>2014-06-24 18:46:25</closed>
	</bug>
	<bug>
		<id>1125</id>
		<title>ConcurrentModificationException when retry a failed or stopped execution in JobLauncherCommandLineRunner</title>
		<body>In org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner#getNextJobParameters(Job, JobParameters) method; in the bellow code I get a ConcurrentModificationException   for (Entry&lt;String, JobParameter&gt; parameter : additionals.entrySet()) {                     // Non-identifying additional parameters can be added to a retry                     if (!parameter.getValue().isIdentifying()) {                         additionals.remove(parameter.getKey());                     }                 }  I think is beacuse it cannot remove an element when looping in the "additionals" set.  PS: Please excuse my poor English </body>
		<created>2014-06-19 16:29:21</created>
		<closed>2014-06-19 17:16:27</closed>
	</bug>
	<bug>
		<id>1107</id>
		<title>Actuator endpoints disappear behind  generic app endpoints</title>
		<body>Even when the management.contextPath is not empty, the Actuator endpoints are not visible if the app has a `@RequestMapping("/{foo}/{bar}`. </body>
		<created>2014-06-16 10:28:28</created>
		<closed>2014-06-16 17:25:43</closed>
	</bug>
	<bug>
		<id>1105</id>
		<title>Support for main class detection in "gradle installApp"</title>
		<body>**Given** : A Spring boot project (v1.1.1) integrated with gradle   **When**: I run   ``` ./gradlew clean build install ```  **Then**: My build fails with exception :  ``` :startScripts FAILED FAILURE: Build failed with an exception. * What went wrong: A problem was found with the configuration of task ':startScripts'. &gt; No value has been specified for property 'mainClassName'. ```  **When**: I change version of spring boot to 1.0.2 and run the same command  **Then**:  My build passes and installs my application in build/install folder. </body>
		<created>2014-06-16 09:15:39</created>
		<closed>2014-06-17 09:12:22</closed>
	</bug>
	<bug>
		<id>1103</id>
		<title>Gradle builds automatically exclude too many dependencies</title>
		<body>I am using spring-boot 1.1.1.RELEASE  My dependencies are declared in gradle like this:  ``` dependencies {     compile("org.springframework.boot:spring-boot-starter-web:$versions.springBoot")     compile("org.springframework.boot:spring-boot-starter-jetty:$versions.springBoot")     compile("org.springframework.boot:spring-boot-starter-actuator:$versions.springBoot") } ```  The application starts fine, as expected and Jetty is used to serve web requests.  However, when I try to exclude tomcat dependencies  ```     configurations {         compile.exclude module: "spring-boot-starter-tomcat"     } ```  then the application context will be initialized and then shut down instantly. Serving web content is not enabled at all without tomcat dependencies. </body>
		<created>2014-06-15 13:52:59</created>
		<closed>2014-06-16 23:55:45</closed>
	</bug>
	<bug>
		<id>1092</id>
		<title>Weblogic JMX issue</title>
		<body>Hello,  There seems to be an issue with JMX on Weblogic 10.3.3.0 .  Disabling JMX resolves the issue  ``` spring:   jmx:     enabled: false ```  error:  ``` &lt;2014. 6. 13 &lt;EC&gt;&lt;98&gt;&lt;A4&gt;&lt;EC&gt;&lt;A0&gt;&lt;84&gt; 10&lt;EC&gt;&lt;8B&gt;&lt;9C&gt; 21&lt;EB&gt;&lt;B6&gt;&lt;84&gt; 49&lt;EC&gt;&lt;B4&gt;&lt;88&gt; EST&gt; &lt;Warning&gt; &lt;HTTP&gt; &lt;BEA-101162&gt; &lt;User defined listener org.springframework.boot.legacy.cont ext.web.SpringBootContextLoaderListener failed: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mbeanExporter' defined in class path reso urce [org/springframework/context/annotation/MBeanExportConfiguration.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionS toreException: Factory method [public org.springframework.jmx.export.annotation.AnnotationMBeanExporter org.springframework.context.annotation.MBeanExportConfiguration.mbeanExpo rter()] threw exception; nested exception is java.lang.IllegalStateException: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface javax.m anagement.MBeanServer. org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mbeanExporter' defined in class path resource [org/springframework/context/annotation/MBe anExportConfiguration.class]: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.spring framework.jmx.export.annotation.AnnotationMBeanExporter org.springframework.context.annotation.MBeanExportConfiguration.mbeanExporter()] threw exception; nested exception is jav a.lang.IllegalStateException: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface javax.management.MBeanServer         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:597)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)         Truncated. see log file for complete stacktrace  Caused By: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.jmx.export.annotation.AnnotationMBeanExporter org.springfra mework.context.annotation.MBeanExportConfiguration.mbeanExporter()] threw exception; nested exception is java.lang.IllegalStateException: java.lang.IllegalArgumentException: Obj ect of class [null] must be an instance of interface javax.management.MBeanServer         at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:188)         at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:586)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)         Truncated. see log file for complete stacktrace  Caused By: java.lang.IllegalStateException: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface javax.management.MBeanServer         at org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.getMBeanServer(MBeanExportConfiguration.java:154)         at org.springframework.context.annotation.MBeanExportConfiguration.setupServer(MBeanExportConfiguration.java:111)         at org.springframework.context.annotation.MBeanExportConfiguration.mbeanExporter(MBeanExportConfiguration.java:85)         at org.springframework.context.annotation.MBeanExportConfiguration$$EnhancerBySpringCGLIB$$5e40d9a2.CGLIB$mbeanExporter$3(&lt;generated&gt;)         at org.springframework.context.annotation.MBeanExportConfiguration$$EnhancerBySpringCGLIB$$5e40d9a2$$FastClassBySpringCGLIB$$5138484d.invoke(&lt;generated&gt;)         Truncated. see log file for complete stacktrace  Caused By: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface javax.management.MBeanServer         at org.springframework.util.Assert.isInstanceOf(Assert.java:339)         at org.springframework.util.Assert.isInstanceOf(Assert.java:319)         at org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.getMBeanServer(MBeanExportConfiguration.java:150)         at org.springframework.context.annotation.MBeanExportConfiguration.setupServer(MBeanExportConfiguration.java:111)         at org.springframework.context.annotation.MBeanExportConfiguration.mbeanExporter(MBeanExportConfiguration.java:85)         Truncated. see log file for complete stacktrace &gt; &lt;2014. 6. 13 &lt;EC&gt;&lt;98&gt;&lt;A4&gt;&lt;EC&gt;&lt;A0&gt;&lt;84&gt; 10&lt;EC&gt;&lt;8B&gt;&lt;9C&gt; 21&lt;EB&gt;&lt;B6&gt;&lt;84&gt; 49&lt;EC&gt;&lt;B4&gt;&lt;88&gt; EST&gt; &lt;Error&gt; &lt;Deployer&gt; &lt;BEA-149265&gt; &lt;Failure occurred in the execution of deployment request with ID '1402618892412' for task '34'. Error is: 'weblogic.application.ModuleException: ' weblogic.application.ModuleException:         at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1514)         at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:486)         at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:425)         at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:41)         at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:119)         Truncated. see log file for complete stacktrace  Caused By: java.lang.IllegalArgumentException: Object of class [null] must be an instance of interface javax.management.MBeanServer         at org.springframework.util.Assert.isInstanceOf(Assert.java:339)         at org.springframework.util.Assert.isInstanceOf(Assert.java:319)         at org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.getMBeanServer(MBeanExportConfiguration.java:150)         at org.springframework.context.annotation.MBeanExportConfiguration.setupServer(MBeanExportConfiguration.java:111)         at org.springframework.context.annotation.MBeanExportConfiguration.mbeanExporter(MBeanExportConfiguration.java:85)         Truncated. see log file for complete stacktrace ``` </body>
		<created>2014-06-13 00:31:32</created>
		<closed>2014-06-13 10:30:42</closed>
	</bug>
	<bug>
		<id>1091</id>
		<title>Use of logback.groovy results in double output.</title>
		<body>If one replaces logback.xml with a logback.groovy file and eliminates the logback.xml file, the program produces two copies of each log item.  It is as though there are two appenders created. Seems likely spring-boot is not checking for logback.groovy to suppress its own logging configuration, as it does with logback.xml.  This is with 1.1.1-RELEASE. </body>
		<created>2014-06-12 21:00:50</created>
		<closed>2014-10-30 07:34:54</closed>
	</bug>
	<bug>
		<id>1079</id>
		<title>Using versionManagement in the Gradle plugin overwrites Boot's transitive exclusions</title>
		<body>If the properties file pointed to by a dependency in the `versionManagement` configuration declares a dependency that Boot also provide dependency management for then any exclusions that Boot would normally apply are lost for that dependency </body>
		<created>2014-06-11 13:48:07</created>
		<closed>2014-06-11 15:10:27</closed>
	</bug>
	<bug>
		<id>1077</id>
		<title>Using versionManagement in the Gradle plugin fails as the configuration is resolved too early</title>
		<body>This Gradle project:  ``` buildscript {     repositories {         mavenCentral()     }     dependencies {         classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.0.RELEASE"     } }  apply plugin: 'java' apply plugin: 'spring-boot'  repositories {     maven{ url 'https://repo.spring.io/libs-snapshot' } }  dependencies {     compile "org.springframework:spring-core"     versionManagement "io.spring.platform:platform-versions:1.0.0.BUILD-SNAPSHOT@properties" } ```  Fails to build with the error `You can't change a configuration which is not in unresolved state!`  The problem is that `ApplyExcludeRules` is being applied directly as part of the Boot plugin being applied. This leads to `VersionManagedDependencies` resolving the `versionManagement` configuration before anyone gets a chance to add dependencies to it. `ApplyExcludeRules` needs to be applied lazily, most likey as a before resolve action. </body>
		<created>2014-06-11 12:43:17</created>
		<closed>2014-06-11 15:10:27</closed>
	</bug>
	<bug>
		<id>1074</id>
		<title>NPE in DataSourceInitializedPublisher</title>
		<body>In class  ``` org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher ```  a NullPointerException occurs when configuring the bean with a DataSource (and not using JpaProperties). In this case properties class variable is not set, and method isInitializingDatabase throws a NPE. </body>
		<created>2014-06-11 06:16:19</created>
		<closed>2014-06-11 17:04:07</closed>
	</bug>
	<bug>
		<id>1064</id>
		<title>war deployment not working with current BUILD-SNAPSHOT</title>
		<body>Hi, it looks like the deployment via a war is not working anymore with the current BUILD-SNAPSHOT.   I used local cargo deployment to test it. https://github.com/mxab/gs-convert-jar-to-war/tree/master/complete  The log says somewhere: `No Spring WebApplicationInitializer types detected on classpath` </body>
		<created>2014-06-10 11:43:54</created>
		<closed>2014-06-10 17:54:48</closed>
	</bug>
	<bug>
		<id>1061</id>
		<title>RunProcess signal handling isn't thread-safe</title>
		<body>If you run an app and then kill it with `CTRL-C` it may report an NPE during shutdown. Here's an example from using `mvn spring-boot:run`:  ``` [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.1.0.BUILD-SNAPSHOT:run (default-cli) on project spring-boot-sample-ws: Could not exec java: NullPointerException -&gt; [Help 1]  org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.1.0.BUILD-SNAPSHOT:run (default-cli) on project spring-boot-sample-ws: Could not exec java     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Could not exec java     at org.springframework.boot.maven.RunMojo.run(RunMojo.java:172)     at org.springframework.boot.maven.RunMojo.execute(RunMojo.java:134)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 19 more Caused by: java.lang.NullPointerException     at org.springframework.boot.loader.tools.RunProcess.run(RunProcess.java:78)     at org.springframework.boot.loader.tools.RunProcess.run(RunProcess.java:52)     at org.springframework.boot.maven.RunMojo.run(RunMojo.java:168)     ... 22 more ```  The problem is that there's a race between the signal handler setting `this.process` to `null` on one thread while another thread in `run()` that was blocked on `this.process.waitFor()` then tries to call `this.process.exitValue()`. If the signal handling thread gets in first and manages to null out `this.process` the call to `exitValue()` will NPE.  The fix is to remove the call to `this.process.exitValue()` from `run()` and use the value returned from `this.process.waitFor()` instead. </body>
		<created>2014-06-09 18:23:46</created>
		<closed>2014-06-09 20:42:48</closed>
	</bug>
	<bug>
		<id>1059</id>
		<title>Make IntegrationAutoConfiguration work with XML config and JMX</title>
		<body>If user adds XML config (hack, spit, cough) with JMX support then the autoconfig `@Conditionals` doesn't detect it because we are looking for the `@Configuration` imports. Easy to fix.  Also we should set the search strategy to CURRENT for the `MBeanExporters`. </body>
		<created>2014-06-09 16:36:57</created>
		<closed>2014-06-09 16:47:56</closed>
	</bug>
	<bug>
		<id>1058</id>
		<title>Management security misfiring still</title>
		<body>It looks like when management.context_path is not empty we are getting the wrong security settings on the Actuator endpoints (e.g. /info is secure and shouldn't be). </body>
		<created>2014-06-09 15:49:28</created>
		<closed>2014-06-09 16:05:48</closed>
	</bug>
	<bug>
		<id>1046</id>
		<title>JMX @ManagedResources not showing up in running app</title>
		<body>Spring Core and Spring Integration and Spring Boot all want to create  an MBeanServer for you if you don't explicitly do it yourself. For some reason when that happens the MBeans don't show up in JConsole/VisualVM etc (that bit I don't understand yet, so any light you can shed on it would be great). </body>
		<created>2014-06-06 13:49:24</created>
		<closed>2014-06-06 17:09:17</closed>
	</bug>
	<bug>
		<id>1041</id>
		<title>DataSourceInitialization requires dataSource injection</title>
		<body>The `DataSourceAutoConfiguration` has only condition for `EmbeddedDatabaseType`, however it doesn't matter that we have any DB driver in the classpath or even do any DB logic in the application. So, Boot does a fallback to the `EmbeddedDataSourceConfiguration`, which doesn't populate `dataSource()` bean and we end up with:  ``` Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private javax.sql.DataSource org.springframework.boot.autoconfigure.jdbc.DataSourceInitialization.dataSource; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [javax.sql.DataSource] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:508) ```  Looks like the simplest way to fix it to mark `DataSourceInitialization.dataSource` just with `@Autowired(required = false)` </body>
		<created>2014-06-05 20:54:12</created>
		<closed>2014-06-06 06:20:34</closed>
	</bug>
	<bug>
		<id>1034</id>
		<title>BasicErrorControllerDirectMockMvcTests may not close the context properly</title>
		<body>#1029 lead to consistent build failures on the CI server. Investigating as why, another embedded HornetQ broker was started and the one that the test was supposed to use was not started. Further assertions on the customizations made to the broker failed. This  works just fine locally.  Tracking this down, CI is ordering the tests differently and another test is started before `HornetQAutoConfigurationTests`: `BasicErrorControllerDirectMockMvcTests`  It looks like that while this test closes "a" context in a `@Before` annotated method, not everything may be closed properly (hence the hornetQ is still live while it shouldn't)  To try to fix the build, an exclude on the `HornetQAutoConfiguration` has been added to those contexts: if we fix the issue, the exclude should go away. One way to make sure the contexts have been cleaned properly is to look for a message that states something like  `java.lang.IllegalArgumentException: HQ119062: Acceptor with id 0 already registered` </body>
		<created>2014-06-05 09:13:48</created>
		<closed>2014-06-17 19:14:31</closed>
	</bug>
	<bug>
		<id>1028</id>
		<title>When used in isolation in Gradle some of the starters give you Spring 3.2.x dependencies</title>
		<body>- spring-boot-starter-amqp   - org.springframework:spring-tx:3.2.8.RELEASE - spring-boot-starter-data-elasticsearch   - org.springframework:spring-tx:3.2.9.RELEASE - spring-boot-starter-data-gemfire   - org.springframework:spring-tx:3.2.9.RELEASE   - org.springframework:spring-context-support:3.2.9.RELEASE - spring-boot-starter-data-mongodb   - org.springframework:spring-tx:3.2.9.RELEASE - spring-boot-starter-data-rest   - org.springframework:spring-tx:3.2.9.RELEASE - spring-boot-starter-data-solr   - org.springframework:spring-tx:3.2.9.RELEASE - spring-boot-starter-redis   - org.springframework:spring-tx:3.2.9.RELEASE   - org.springframework:spring-context-support:3.2.9.RELEASE </body>
		<created>2014-06-04 14:05:31</created>
		<closed>2014-06-04 17:22:15</closed>
	</bug>
	<bug>
		<id>1023</id>
		<title>Elasticsearch auto-configuration may cause startup failure</title>
		<body>If Elasticsearch is on the classpath but Spring Data Elasticsearch is not, the auto-configuration kicks in and fails when it tries to load `org.springframework.data.elasticsearch.client.NodeClientFactoryBean` </body>
		<created>2014-06-03 16:37:01</created>
		<closed>2014-06-03 19:58:21</closed>
	</bug>
	<bug>
		<id>1021</id>
		<title>Dependency management in the CLI isn't working as intended</title>
		<body>A CLI app that grabs `spring-boot-starter-data-jpa` and nothing else:  ``` groovy @Grab('spring-boot-starter-data-jpa') class X {} ```  falls in a heap with a very unhelpful `java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy`. The underlying cause is that `DeferredImportSelector` is not on the classpath. `DeferredImportSelector`was added to `spring-context` in Spring 4.0. `spring-context` is on the classpath as it's a transitive dependency of `spring-data-jpa`, however 3.2.x is being pulled in, rather than 4.0.x.  The intended behaviour is that the CLI will apply dependency management to the resolution process and, as a result, any Spring dependencies will be upgraded to 4.0.x </body>
		<created>2014-06-03 14:39:31</created>
		<closed>2014-06-03 15:27:56</closed>
	</bug>
	<bug>
		<id>1008</id>
		<title>EntityScanRegistrar fails because can't see a LocalContainerEntityManagerFactoryBean</title>
		<body>Here is a not-so-small test case: https://www.dropbox.com/s/4mu3qwjbbh60d2t/test-case-1.tar.gz  I started getting this exception after trying to auto-wire an UserDetailsService into my GlobalAuthenticationConfigurerAdapter, based on the spring-boot-sample-web-method-security example.  It seems to be related to the ordering of the javaconfig stuff.  I am sorry if I'm doing something really dump here. I find the AutoConf stuff very hard to reason about and understand, albeit very very convenient and powerful. I am just reporting because there may be some hidden bug. </body>
		<created>2014-05-31 00:17:08</created>
		<closed>2014-06-02 15:48:48</closed>
	</bug>
	<bug>
		<id>1006</id>
		<title>SQL initialization with "data.sql" comes too late if using hibernate DDL auto as well</title>
		<body>JVM:  ``` java version "1.8.0_05" Java(TM) SE Runtime Environment (build 1.8.0_05-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode) ```  Spring Boot:  ```  &lt;parent&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;         &lt;version&gt;1.1.0.M2&lt;/version&gt;     &lt;/parent&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;             &lt;artifactId&gt;lombok&lt;/artifactId&gt;             &lt;version&gt;1.12.6&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;             &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;             &lt;scope&gt;runtime&lt;/scope&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; ```  Spring Boot 1.1.0.M2 fails to create HSQLDB in memory database tables and in boot up log there are these line:  ``` 2014-05-30 19:11:44.625  INFO 10092 --- [           main] o.h.h.i.ast.ASTQueryTranslatorFactory    : HHH000397: Using ASTQueryTranslatorFactory 2014-05-30 19:11:44.631  WARN 10092 --- [           main] org.hibernate.cfg.SettingsFactory        : Unrecognized value for "hibernate.hbm2ddl.auto": none ```  For that reason loading in data from `data.sql` fails with following exception:  ``` 2014-05-30 19:11:46.725 ERROR 10092 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/C:/projects/personal/sport-store/target/classes/data.sql]: INSERT INTO category (id, name) VALUES (1, 'Watersports'); nested exception is java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: CATEGORY     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1545)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:482)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:944)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:933)     at com.selgal.sportstore.Application.main(Application.java:13) Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement at line 1 of resource URL [file:/C:/projects/personal/sport-store/target/classes/data.sql]: INSERT INTO category (id, name) VALUES (1, 'Watersports'); nested exception is java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: CATEGORY     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:474)     at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:208)     at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:49)     at org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.initialize(DataSourceAutoConfiguration.java:115)     at sun.reflect.GeneratedMethodAccessor240.invoke(Unknown Source)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300)     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)     ... 18 common frames omitted Caused by: java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: CATEGORY     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)     at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)     at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:459)     ... 26 common frames omitted Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: CATEGORY     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.error.Error.error(Unknown Source)     at org.hsqldb.SchemaManager.getTable(Unknown Source)     at org.hsqldb.ParserDQL.readTableName(Unknown Source)     at org.hsqldb.ParserDQL.readRangeVariableForDataChange(Unknown Source)     at org.hsqldb.ParserDML.compileInsertStatement(Unknown Source)     at org.hsqldb.ParserCommand.compilePart(Unknown Source)     at org.hsqldb.ParserCommand.compileStatements(Unknown Source)     at org.hsqldb.Session.executeDirectStatement(Unknown Source)     at org.hsqldb.Session.execute(Unknown Source)     ... 29 common frames omitted ```  Tested also with version 1.0.2.RELEASE and everything works as expected tables are created and `data.sql` is loaded in without any issues. </body>
		<created>2014-05-30 16:28:08</created>
		<closed>2014-06-02 12:12:48</closed>
	</bug>
	<bug>
		<id>1003</id>
		<title>DependencyCustomizer.ifAnyMissingClasses always returns true</title>
		<body></body>
		<created>2014-05-30 15:38:21</created>
		<closed>2014-05-30 16:38:45</closed>
	</bug>
	<bug>
		<id>997</id>
		<title>Cannot login to spring-boot-sample-web-secure sample on 1.0.x</title>
		<body>See #979, same issue but may not be the same cause. </body>
		<created>2014-05-30 09:06:34</created>
		<closed>2014-05-30 12:16:04</closed>
	</bug>
	<bug>
		<id>995</id>
		<title>Aether-based @Grab support doesn't honour ext or classifier</title>
		<body>Doing:  ```   @Grab(group='org.grails', module='grails-dependencies', version='3.0.0.BUILD-SNAPSHOT', ext='pom') ```  Does not resolve the dependencies of the referenced POM </body>
		<created>2014-05-30 08:32:06</created>
		<closed>2014-05-30 14:34:15</closed>
	</bug>
	<bug>
		<id>993</id>
		<title>Error in configuration of resource filtering for multi module projects</title>
		<body>The spring-boot-starter-parent-1.0.2.RELEASE has the following section for filtering application.properties by default:  ``` &lt;resources&gt;         &lt;resource&gt;             &lt;directory&gt;src/main/resources&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;includes&gt;                 &lt;include&gt;**/application.yml&lt;/include&gt;                 &lt;include&gt;**/application.properties&lt;/include&gt;             &lt;/includes&gt;         &lt;/resource&gt;         &lt;resource&gt;             &lt;directory&gt;src/main/resources&lt;/directory&gt;             &lt;excludes&gt;                 &lt;exclude&gt;**/application.yml&lt;/exclude&gt;                 &lt;exclude&gt;**/application.properties&lt;/exclude&gt;             &lt;/excludes&gt;         &lt;/resource&gt;     &lt;/resources&gt; ```  However, this does not work in a multimodule project. It should be like this to work:  ``` &lt;resources&gt;         &lt;resource&gt;             &lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt;             &lt;filtering&gt;true&lt;/filtering&gt;             &lt;includes&gt;                 &lt;include&gt;**/application.yml&lt;/include&gt;                 &lt;include&gt;**/application.properties&lt;/include&gt;             &lt;/includes&gt;         &lt;/resource&gt;         &lt;resource&gt;             &lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt;             &lt;excludes&gt;                 &lt;exclude&gt;**/application.yml&lt;/exclude&gt;                 &lt;exclude&gt;**/application.properties&lt;/exclude&gt;             &lt;/excludes&gt;         &lt;/resource&gt;     &lt;/resources&gt; ```  Notice the additional `${basedir}` </body>
		<created>2014-05-30 08:04:48</created>
		<closed>2014-05-30 15:38:14</closed>
	</bug>
	<bug>
		<id>990</id>
		<title>CLI generated jar files do not contain the GroovyTemplates convenience class</title>
		<body>There are some convenience classes in spring-boot-cli.jar that are not added to the jar. </body>
		<created>2014-05-29 15:30:08</created>
		<closed>2014-05-29 17:22:46</closed>
	</bug>
	<bug>
		<id>988</id>
		<title>spring.jpa.properties.* are passed incorrectly to the entity manager factory</title>
		<body>My Hibernate entityManagerFactory bean fails to create because the extra properties under spring.jpa.properties.\* were passed in the following format.  `{hibernate={cache={use_query_cache=true, region={factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory}, use_second_level_cache=true}}`  In 1.1.0.M1 they properly came in as:   hibernate.cache.use_second_level_cache: true   hibernate.cache.use_query_cache: true   hibernate.cache.region.factory_class: org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory  The breaking change may have been in JpaBaseConfiguration#entityManagerFactoryBuilder.  When this line was removed:  ``` entityManagerFactoryBean.getJpaPropertyMap().putAll(this.environment.getSubProperties("properties.")); ``` </body>
		<created>2014-05-29 14:46:14</created>
		<closed>2014-05-30 09:32:46</closed>
	</bug>
	<bug>
		<id>986</id>
		<title>Apps that depend on spring-social-github fail to start</title>
		<body>The failure is  ``` Caused by: java.io.FileNotFoundException: class path resource [org/springframework/social/config/annotation/SocialConfigurerAdapter.class] cannot be opened because it does not exist     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)     at org.springframework.core.type.classreading.SimpleMetadataReader.&lt;init&gt;(SimpleMetadataReader.java:50)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:82)     at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:77)     at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:563)     at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getSuperClass(ConfigurationClassParser.java:726)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:287)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:218)     at org.springframework.context.annotation.ConfigurationClassParser.processMemberClasses(ConfigurationClassParser.java:307)     at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:235)     at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:218)     at org.springframework.context.annotation.ConfigurationClassParser.processImports(ConfigurationClassParser.java:438)     at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:392)     ... 57 more ```  I think it's because Spring Social GitHub depends on Spring Social 1.1.0.M4 which, I'm guessing, doesn't have `org/springframework/social/config/annotation/SocialConfigurerAdapter.class` </body>
		<created>2014-05-29 10:51:10</created>
		<closed>2014-05-30 14:11:38</closed>
	</bug>
	<bug>
		<id>985</id>
		<title>Spring Boot CLI generated projects include commons-logging and jcl-over-slf4j</title>
		<body>``` $ spring jar sample.jar web.groovy $ unzip -l sample.jar| grep lib    ...     62050  05-29-14 10:35   lib/commons-logging-1.1.3.jar ...     16519  05-29-14 10:35   lib/jcl-over-slf4j-1.7.7.jar ... ``` </body>
		<created>2014-05-29 09:41:14</created>
		<closed>2014-05-31 00:15:43</closed>
	</bug>
	<bug>
		<id>983</id>
		<title>CLI adds import for any annotation named "Controller" regardless of package</title>
		<body>If you do:  ```  import grails.web.Controller @Controller class FooController { ```  Then Boot assumes that `Controller` is a Spring MVC annotation and applies AST transforms it shouldn't. Since the package name of the annotation differs it shouldn't be doing this. A workaround is to do:  ``` @grails.web.Controller class FooController { ``` </body>
		<created>2014-05-29 08:02:21</created>
		<closed>2014-05-30 05:44:46</closed>
	</bug>
	<bug>
		<id>977</id>
		<title>Runtime dependencies not added in CLI</title>
		<body></body>
		<created>2014-05-28 17:09:24</created>
		<closed>2014-05-28 17:18:19</closed>
	</bug>
	<bug>
		<id>968</id>
		<title>Jetty fails to launch with BindException in FreeBSD</title>
		<body>I'm having difficulty running the spring-boot demo with jetty due to `BindException: Address already in use` errors. Port 8080 is open when I run the command.  I receive this issue 90% of the time when running on FreeBSD 10.0-STABLE with openjdk-7.55.13_4,1. I found that when debugging the problem will sometimes cause it to not occur (race condition?). It seems to work fine when I repeat the steps on a Ubuntu VM.  I've tried using 1.0.2.RELEASE , 1.0.1.RELEASE, 1.0.0.RELEASE as well with no change.  ``` $ sockstat -4 -p 8080 # showing nothing listening on 8080 USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS $ git clone git@github.com:spring-projects/spring-boot.git $ cd spring-boot/spring-boot-samples/spring-boot-sample-jetty $ git log --pretty=format:'%h' -n 1 d20ed65 $ mvn clean install ... $ java -jar target/*.jar    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::  (v1.1.0.BUILD-SNAPSHOT)  2014-05-27 20:25:31.884  INFO 6086 --- [           main] sample.jetty.SampleJettyApplication      : Starting SampleJettyApplication on qk.local with PID 6086 (/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar started by ecd in /usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty) 2014-05-27 20:25:31.941  INFO 6086 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6596f6ef: startup date [Tue May 27 20:25:31 CDT 2014]; root of context hierarchy 2014-05-27 20:25:32.575  INFO 6086 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]] 2014-05-27 20:25:33.172  INFO 6086 --- [           main] e.j.JettyEmbeddedServletContainerFactory : Server initialized with port: 8080 2014-05-27 20:25:33.176  INFO 6086 --- [           main] org.eclipse.jetty.server.Server          : jetty-8.1.14.v20131031 2014-05-27 20:25:33.221  INFO 6086 --- [           main] /                                        : Initializing Spring embedded WebApplicationContext 2014-05-27 20:25:33.221  INFO 6086 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1283 ms 2014-05-27 20:25:33.653  INFO 6086 --- [           main] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/] 2014-05-27 20:25:33.658  INFO 6086 --- [           main] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*] 2014-05-27 20:25:33.675  INFO 6086 --- [           main] o.e.jetty.server.AbstractConnector       : Started SelectChannelConnector@0.0.0.0:8080 2014-05-27 20:25:33.904  INFO 6086 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-05-27 20:25:34.023  INFO 6086 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String sample.jetty.web.SampleController.helloWorld() 2014-05-27 20:25:34.026  INFO 6086 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest) 2014-05-27 20:25:34.026  INFO 6086 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest) 2014-05-27 20:25:34.053  INFO 6086 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-05-27 20:25:34.054  INFO 6086 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-05-27 20:25:34.297  INFO 6086 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2014-05-27 20:25:34.328  INFO 6086 --- [           main] /                                        : Initializing Spring FrameworkServlet 'dispatcherServlet' 2014-05-27 20:25:34.329  INFO 6086 --- [           main] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started 2014-05-27 20:25:34.361  INFO 6086 --- [           main] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 32 ms 2014-05-27 20:25:34.391  WARN 6086 --- [           main] o.e.j.util.component.AbstractLifeCycle   : FAILED SelectChannelConnector@0.0.0.0:8080: java.net.BindException: Address already in use  java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method)     at sun.nio.ch.Net.bind(Net.java:444)     at sun.nio.ch.Net.bind(Net.java:436)     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)     at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187)     at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316)     at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.start(JettyEmbeddedServletContainer.java:95)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:376)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:143)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:944)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:933)     at sample.jetty.SampleJettyApplication.main(SampleJettyApplication.java:30)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745)  2014-05-27 20:25:34.392  INFO 6086 --- [           main] /                                        : Destroying Spring FrameworkServlet 'dispatcherServlet' 2014-05-27 20:25:34.395  INFO 6086 --- [           main] o.e.jetty.server.handler.ContextHandler  : stopped o.s.b.c.e.j.JettyEmbeddedWebAppContext{/,null} 2014-05-27 20:25:34.495  WARN 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   : 1 threads could not be stopped 2014-05-27 20:25:34.495  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   : Couldn't stop Thread[qtp1818419723-20 Acceptor0 SelectChannelConnector@0.0.0.0:8080,5,main] 2014-05-27 20:25:34.495  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method) 2014-05-27 20:25:34.495  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:241) 2014-05-27 20:25:34.495  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at org.eclipse.jetty.server.nio.SelectChannelConnector.accept(SelectChannelConnector.java:109) 2014-05-27 20:25:34.496  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at org.eclipse.jetty.server.AbstractConnector$Acceptor.run(AbstractConnector.java:938) 2014-05-27 20:25:34.496  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608) 2014-05-27 20:25:34.496  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543) 2014-05-27 20:25:34.496  INFO 6086 --- [           main] o.e.jetty.util.thread.QueuedThreadPool   :  at java.lang.Thread.run(Thread.java:745) 2014-05-27 20:25:34.496  INFO 6086 --- [           main] .b.l.ClasspathLoggingApplicationListener : Application failed to start with classpath: [file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-boot-starter-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-boot-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-boot-autoconfigure-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-boot-starter-logging-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jcl-over-slf4j-1.7.7.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/slf4j-api-1.7.7.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jul-to-slf4j-1.7.7.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/log4j-over-slf4j-1.7.7.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/logback-classic-1.1.2.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/logback-core-1.1.2.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/snakeyaml-1.13.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-boot-starter-jetty-1.1.0.BUILD-SNAPSHOT.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-webapp-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-xml-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-util-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-servlet-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-security-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-server-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-continuation-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-http-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-io-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/jetty-jsp-8.1.14.v20131031.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/javax.servlet.jsp-2.2.0.v201112011158.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/javax.servlet-3.0.0.v201112011016.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/org.apache.jasper.glassfish-2.2.2.v201112011158.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/javax.servlet.jsp.jstl-1.2.0.v201105211821.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/javax.el-2.2.0.v201108011116.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/com.sun.el-2.2.0.v201108011116.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/org.eclipse.jdt.core-3.7.1.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-webmvc-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-beans-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-context-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-aop-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/aopalliance-1.0.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-core-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-expression-4.0.5.RELEASE.jar!/, jar:file:/usr/home/ecd/repos/misc/spring-boot/spring-boot-samples/spring-boot-sample-jetty/target/spring-boot-sample-jetty-1.1.0.BUILD-SNAPSHOT.jar!/lib/spring-web-4.0.5.RELEASE.jar!/] 2014-05-27 20:25:34.497  INFO 6086 --- [           main] utoConfigurationReportLoggingInitializer :   Error starting ApplicationContext. To display the auto-configuration report enabled debug logging (start with --debug)   2014-05-27 20:25:34.497 ERROR 6086 --- [           main] o.s.boot.SpringApplication               : Application startup failed  org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Jetty servlet container     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.start(JettyEmbeddedServletContainer.java:100)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:376)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:143)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:944)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:933)     at sample.jetty.SampleJettyApplication.main(SampleJettyApplication.java:30)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method)     at sun.nio.ch.Net.bind(Net.java:444)     at sun.nio.ch.Net.bind(Net.java:436)     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)     at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187)     at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316)     at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.start(JettyEmbeddedServletContainer.java:95)     ... 15 common frames omitted  2014-05-27 20:25:34.497  INFO 6086 --- [           main] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6596f6ef: startup date [Tue May 27 20:25:31 CDT 2014]; root of context hierarchy 2014-05-27 20:25:34.498  INFO 6086 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown java.lang.reflect.InvocationTargetException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:745) Caused by: org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Jetty servlet container     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.start(JettyEmbeddedServletContainer.java:100)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:376)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:143)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:485)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:683)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:944)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:933)     at sample.jetty.SampleJettyApplication.main(SampleJettyApplication.java:30)     ... 6 more Caused by: java.net.BindException: Address already in use     at sun.nio.ch.Net.bind0(Native Method)     at sun.nio.ch.Net.bind(Net.java:444)     at sun.nio.ch.Net.bind(Net.java:436)     at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:214)     at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)     at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187)     at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316)     at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)     at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.start(JettyEmbeddedServletContainer.java:95)     ... 15 more ``` </body>
		<created>2014-05-28 01:41:28</created>
		<closed>2014-07-28 13:57:21</closed>
	</bug>
	<bug>
		<id>962</id>
		<title>spring-boot-sample-web-jsp not working with tomcat 8</title>
		<body>Hi, I used the latest sample and set `&lt;tomcat.version&gt;8.0.3&lt;/tomcat.version&gt;`, the application starts normal but when I request the page tomcat has an internal NPE.  ``` java.lang.NullPointerException: null     at org.apache.jasper.JspCompilationContext.getTldResourcePath(JspCompilationContext.java:530)     at org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:410)     at org.apache.jasper.compiler.Parser.parseDirective(Parser.java:469)     at org.apache.jasper.compiler.Parser.parseElements(Parser.java:1455)     at org.apache.jasper.compiler.Parser.parse(Parser.java:139) .... ```  It looks like tomcat does not have a tldCache in its jsp context  I fixed it when I copied some code from tomcats JasperInitializer and into SampleWebJspApplication let the implement `org.springframework.boot.context.embedded.ServletContextInitializer`  Code copied: - the static block - and the onStartup code into the ServletContextInitializer's onStartup method </body>
		<created>2014-05-27 15:57:02</created>
		<closed>2014-05-28 13:57:34</closed>
	</bug>
	<bug>
		<id>945</id>
		<title>Changing server.servletPath breaks the security configuration</title>
		<body>Similar to gh-939 but this time related to the security configuration. It only results in more security than you need in simple cases, but definitely worth fixing. </body>
		<created>2014-05-23 17:10:10</created>
		<closed>2014-05-24 07:33:37</closed>
	</bug>
	<bug>
		<id>940</id>
		<title>FreeMarker and Velocity auto-configuration is enabled too eagerly</title>
		<body>Both are enabled if you only have their own jar on the classpath but don't have `spring-context-support` on the classpath leading to start up failures due to a `ClassNotFoundException` </body>
		<created>2014-05-23 10:28:34</created>
		<closed>2014-05-23 10:36:48</closed>
	</bug>
	<bug>
		<id>939</id>
		<title>Changing server.servletPath breaks the /error endpoint</title>
		<body>When we add a custom server.servletPath we don't (yet) adjust the `ErrorPage` registration, so it breaks when there is an error to handle. </body>
		<created>2014-05-23 09:17:44</created>
		<closed>2014-05-23 09:49:21</closed>
	</bug>
	<bug>
		<id>927</id>
		<title>RedisMultiMetricRepository reports wrong groups</title>
		<body>If there is a prefix, the group names should be sans-prefix </body>
		<created>2014-05-22 08:05:35</created>
		<closed>2014-05-22 08:35:52</closed>
	</bug>
	<bug>
		<id>923</id>
		<title>MultiMetricsRepository and MetricsRepository share a method name (count)</title>
		<body>It's a bug because `InMemoryMetricsReporitory` implements both interfaces and the meaning of the two methods is different. </body>
		<created>2014-05-21 16:31:24</created>
		<closed>2014-05-22 08:35:52</closed>
	</bug>
	<bug>
		<id>919</id>
		<title>Running with embedded Tomcat 8.0.5 produces warning and JSPs don't work</title>
		<body>Spring Boot: **1.0.2.RELEASE**. OS: **Win7 64** Java: Java(TM) SE Runtime Environment (build **1.8.0_05-b13**) Tomcat (embed) version changed to: **8.0.5**  I create an executable WAR with Spring Boot, and when I run it (java -jar myapp.war) I get the following errors. However, the application seems to be working fine.  ``` 2014-05-21 13:13:43.839  INFO 4084 --- [           main] com.technoserv.umms.sxpot.Application    : Starting Application on my-hostname with PID 4084 (started by my-hostname in C:\tmp\sb-war) 2014-05-21 13:13:43.882  INFO 4084 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2ba28e77: startup date [Wed May 21 13:13:43 MSK 2014]; root of context hierarchy 2014-05-21 13:13:44.868  INFO 4084 --- [           main] .t.TomcatEmbeddedServletContainerFactory : Server initialized with port: 8080 2014-05-21 13:13:45.038  INFO 4084 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat 2014-05-21 13:13:45.038  INFO 4084 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.5 2014-05-21 13:13:45.531  INFO 4084 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext 2014-05-21 13:13:45.531  INFO 4084 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1651 ms 2014-05-21 13:13:45.568  WARN 4084 --- [ost-startStop-1] o.s.boot.loader.jar.Handler              : Unable to open fallback handler  java.lang.reflect.InvocationTargetException: null     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:127)     at org.springframework.boot.loader.jar.Handler.openFallbackConnection(Handler.java:88)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:81)     at java.net.URL.openConnection(URL.java:972)     at sun.net.www.protocol.jar.JarURLConnection.&lt;init&gt;(JarURLConnection.java:84)     at sun.net.www.protocol.jar.Handler.openConnection(Handler.java:41)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:127)     at org.springframework.boot.loader.jar.Handler.openFallbackConnection(Handler.java:88)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:81)     at java.net.URL.openConnection(URL.java:972)     at sun.misc.URLClassPath$JarLoader.getJarFile(URLClassPath.java:731)     at sun.misc.URLClassPath$JarLoader.access$600(URLClassPath.java:592)     at sun.misc.URLClassPath$JarLoader$1.run(URLClassPath.java:674)     at sun.misc.URLClassPath$JarLoader$1.run(URLClassPath.java:667)     at java.security.AccessController.doPrivileged(Native Method)     at sun.misc.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:666)     at sun.misc.URLClassPath$JarLoader.&lt;init&gt;(URLClassPath.java:617)     at sun.misc.URLClassPath$3.run(URLClassPath.java:366)     at sun.misc.URLClassPath$3.run(URLClassPath.java:356)     at java.security.AccessController.doPrivileged(Native Method)     at sun.misc.URLClassPath.getLoader(URLClassPath.java:355)     at sun.misc.URLClassPath.getLoader(URLClassPath.java:332)     at sun.misc.URLClassPath.getResource(URLClassPath.java:198)     at java.net.URLClassLoader$1.run(URLClassLoader.java:364)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:894)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader.findClassIgnoringNotFound(TomcatEmbeddedWebappClassLoader.java:95)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:61)     at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1175)     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:340)     at com.sun.beans.finder.ClassFinder.findClass(ClassFinder.java:67)     at com.sun.beans.finder.ClassFinder.findClass(ClassFinder.java:110)     at com.sun.beans.finder.InstanceFinder.instantiate(InstanceFinder.java:93)     at com.sun.beans.finder.InstanceFinder.find(InstanceFinder.java:66)     at java.beans.Introspector.findExplicitBeanInfo(Introspector.java:448)     at java.beans.Introspector.&lt;init&gt;(Introspector.java:398)     at java.beans.Introspector.getBeanInfo(Introspector.java:173)     at org.springframework.beans.CachedIntrospectionResults.&lt;init&gt;(CachedIntrospectionResults.java:284)     at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:188)     at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:327)     at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:335)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1343)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1322)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1180)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getOrderedBeansOfType(EmbeddedWebApplicationContext.java:367)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:233)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:213)     at org.springframework.boot.context.embedded.tomcat.ServletContextInitializerLifecycleListener.lifecycleEvent(ServletContextInitializerLifecycleListener.java:54)     at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)     at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5058)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1388)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: java.net.MalformedURLException: no !/ found in url spec:file:/C:/tmp/sb-war/target/sb-war-1.0.0-SNAPSHOT.war     at java.net.JarURLConnection.parseSpecs(JarURLConnection.java:172)     at java.net.JarURLConnection.&lt;init&gt;(JarURLConnection.java:158)     at sun.net.www.protocol.jar.JarURLConnection.&lt;init&gt;(JarURLConnection.java:81)     at sun.net.www.protocol.jar.Handler.openConnection(Handler.java:41)     ... 84 common frames omitted  2014-05-21 13:13:45.570  WARN 4084 --- [ost-startStop-1] o.s.boot.loader.jar.Handler              : Unable to open fallback handler  java.lang.reflect.InvocationTargetException: null     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:127)     at org.springframework.boot.loader.jar.Handler.openFallbackConnection(Handler.java:88)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:81)     at java.net.URL.openConnection(URL.java:972)     at sun.misc.URLClassPath$JarLoader.getJarFile(URLClassPath.java:731)     at sun.misc.URLClassPath$JarLoader.access$600(URLClassPath.java:592)     at sun.misc.URLClassPath$JarLoader$1.run(URLClassPath.java:674)     at sun.misc.URLClassPath$JarLoader$1.run(URLClassPath.java:667)     at java.security.AccessController.doPrivileged(Native Method)     at sun.misc.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:666)     at sun.misc.URLClassPath$JarLoader.&lt;init&gt;(URLClassPath.java:617)     at sun.misc.URLClassPath$3.run(URLClassPath.java:366)     at sun.misc.URLClassPath$3.run(URLClassPath.java:356)     at java.security.AccessController.doPrivileged(Native Method)     at sun.misc.URLClassPath.getLoader(URLClassPath.java:355)     at sun.misc.URLClassPath.getLoader(URLClassPath.java:332)     at sun.misc.URLClassPath.getResource(URLClassPath.java:198)     at java.net.URLClassLoader$1.run(URLClassLoader.java:364)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:894)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader.findClassIgnoringNotFound(TomcatEmbeddedWebappClassLoader.java:95)     at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader.loadClass(TomcatEmbeddedWebappClassLoader.java:61)     at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1175)     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:340)     at com.sun.beans.finder.ClassFinder.findClass(ClassFinder.java:67)     at com.sun.beans.finder.ClassFinder.findClass(ClassFinder.java:110)     at com.sun.beans.finder.InstanceFinder.instantiate(InstanceFinder.java:93)     at com.sun.beans.finder.InstanceFinder.find(InstanceFinder.java:66)     at java.beans.Introspector.findExplicitBeanInfo(Introspector.java:448)     at java.beans.Introspector.&lt;init&gt;(Introspector.java:398)     at java.beans.Introspector.getBeanInfo(Introspector.java:173)     at org.springframework.beans.CachedIntrospectionResults.&lt;init&gt;(CachedIntrospectionResults.java:284)     at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:188)     at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:327)     at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:335)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1343)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1322)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1180)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:370)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1094)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:989)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getOrderedBeansOfType(EmbeddedWebApplicationContext.java:367)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getServletContextInitializerBeans(EmbeddedWebApplicationContext.java:233)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext$1.onStartup(EmbeddedWebApplicationContext.java:213)     at org.springframework.boot.context.embedded.tomcat.ServletContextInitializerLifecycleListener.lifecycleEvent(ServletContextInitializerLifecycleListener.java:54)     at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)     at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5058)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)     at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1388)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: java.net.MalformedURLException: Jar URL does not contain !/ separator     at org.springframework.boot.loader.jar.Handler.getJarFileFromUrl(Handler.java:136)     at org.springframework.boot.loader.jar.Handler.openConnection(Handler.java:78)     at java.net.URL.openConnection(URL.java:972)     at sun.net.www.protocol.jar.JarURLConnection.&lt;init&gt;(JarURLConnection.java:84)     at sun.net.www.protocol.jar.Handler.openConnection(Handler.java:41)     ... 74 common frames omitted ```  full log: https://gist.githubusercontent.com/anton-martynov/e0468770be222571b4c4/raw/3f3aa2cbfd16440ffa9d8a86760bc1b6e24175ff/spring-boot-war.log </body>
		<created>2014-05-21 09:49:22</created>
		<closed>2014-05-23 20:43:02</closed>
	</bug>
	<bug>
		<id>918</id>
		<title>Jedis 2.4 and commons-pool2</title>
		<body></body>
		<created>2014-05-21 09:16:31</created>
		<closed>2014-05-21 10:30:48</closed>
	</bug>
	<bug>
		<id>916</id>
		<title>management.port is not overridden by additional @PropertySource</title>
		<body>Given that I have the following configuration:  ``` java @Configuration @EnableAutoConfiguration @ComponentScan("com.example.project") @PropertySources({     @PropertySource("classpath:/some.properties"),     @PropertySource("classpath:/override.properties") }) public class SomeConfig { } ```  Content of the `some.properties` file:  ``` .properties server.port=8100 management.port=8101 ```  Content of the `override.properties` file:  ``` .properties server.port=9100 management.port=9101 ```  Test the configuration:  ``` java @IntegrationTest @SpringApplicationConfiguration(classes = SomeConfig.class) @RunWith(SpringJUnit4ClassRunner.class) @WebAppConfiguration public class SomeTest {      @Value("${server.port}")     int serverPort;      @Value("${management.port}")     int managementPort;      @Test     public void testPorts() {         System.out.println("serverPort: " + serverPort);         System.out.println("managementPort: " + managementPort);     } } ```  Output copied from the console log:  ``` .sh INFO TomcatEmbeddedServletContainer.logPorts:139 - Tomcat started on port(s): 8101/http INFO TomcatEmbeddedServletContainer.logPorts:139 - Tomcat started on port(s): 8100/http [...] serverPort: 9100 managementPort: 9101 ```  As can be seen the `@Value("${...}")` annotations evaluates to what has been specified in the `override.properties`, but the Tomcat is started to the ports specified in `some.properties`.  Spring Boot version: 1.0.2.RELEASE Related: #910 </body>
		<created>2014-05-21 06:38:51</created>
		<closed>2014-05-24 07:33:37</closed>
	</bug>
	<bug>
		<id>900</id>
		<title>start.groovy in the actuator sample grabs out-of-date versions of Boot components</title>
		<body>``` @Grab("org.springframework.boot:spring-boot-starter-actuator:0.5.0.BUILD-SNAPSHOT") @Grab("org.springframework.boot:spring-boot-starter-web:0.5.0.BUILD-SNAPSHOT") ```  The version numbers (and group ids) should be redundant so can probably just be removed </body>
		<created>2014-05-19 15:16:02</created>
		<closed>2014-05-21 12:56:15</closed>
	</bug>
	<bug>
		<id>894</id>
		<title>Cannot use ddl-auto=validate with Hibernate and Flyway</title>
		<body>Hibernate wants to validate the `DataSource` before the migrations are executed. </body>
		<created>2014-05-17 06:23:39</created>
		<closed>2014-05-19 10:18:26</closed>
	</bug>
	<bug>
		<id>892</id>
		<title>BatchDatabaseInitializer does not recognize Oracle database properly</title>
		<body>I'm using the Spring Boot autoconfigurer for Spring Batch but the application does not start when I use an Oracle 11gR2 JDBC Thin driver data source. Apparently the scripts expect `schema-oracle10g.sql` but `BatchDatabaseInitializer` just returns `oracle`.  ``` Error creating bean with name 'batchDatabaseInitializer': Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.CannotReadScriptException: Cannot read SQL script from class path resource [org/springframework/batch/core/schema-oracle.sql]; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/batch/core/schema-oracle.sql] cannot be opened because it does not exist     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1545) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:703) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760) ~[spring-context-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482) ~[spring-context-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:648) ~[spring-boot-1.0.2.RELEASE.jar:1.0.2.RELEASE]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311) ~[spring-boot-1.0.2.RELEASE.jar:1.0.2.RELEASE]     at org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:88) ~[spring-boot-1.0.2.RELEASE.jar:1.0.2.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64) ~[spring-test-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91) ~[spring-test-4.0.3.RELEASE.jar:4.0.3.RELEASE]     ... 25 common frames omitted Caused by: org.springframework.jdbc.datasource.init.CannotReadScriptException: Cannot read SQL script from class path resource [org/springframework/batch/core/schema-oracle.sql]; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/batch/core/schema-oracle.sql] cannot be opened because it does not exist     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:425) ~[spring-jdbc-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:206) ~[spring-jdbc-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:49) ~[spring-jdbc-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.boot.autoconfigure.batch.BatchDatabaseInitializer.initialize(BatchDatabaseInitializer.java:77) ~[spring-boot-autoconfigure-1.0.2.RELEASE.jar:1.0.2.RELEASE]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51]     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133) ~[spring-beans-4.0.3.RELEASE.jar:4.0.3.RELEASE]     ... 41 common frames omitted Caused by: java.io.FileNotFoundException: class path resource [org/springframework/batch/core/schema-oracle.sql] cannot be opened because it does not exist     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158) ~[spring-core-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.core.io.support.EncodedResource.getReader(EncodedResource.java:132) ~[spring-core-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.jdbc.datasource.init.ScriptUtils.readScript(ScriptUtils.java:267) ~[spring-jdbc-4.0.3.RELEASE.jar:4.0.3.RELEASE]     at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:422) ~[spring-jdbc-4.0.3.RELEASE.jar:4.0.3.RELEASE]     ... 51 common frames omitted ``` </body>
		<created>2014-05-16 19:16:59</created>
		<closed>2014-05-17 05:52:33</closed>
	</bug>
	<bug>
		<id>886</id>
		<title>ComputeMain for spring-boot-gradle-plugin should not override mainClassName setting from build.gradle</title>
		<body>When I have two classes with main methods in two different packages, Spring Boot gradle plugin chooses which one to run, even if I have specified which I would prefer to be run.  Example project here:  https://github.com/berlin-ab/cats/tree/bug/set-main-class  I set `mainClassName = "cats.Application"` yet `gradle bootRun` starts using `utils.Console` </body>
		<created>2014-05-15 21:24:50</created>
		<closed>2014-05-23 10:03:43</closed>
	</bug>
	<bug>
		<id>883</id>
		<title>JmsTemplate is always created in JmsTemplate and ConnectionFactory are in the classpath</title>
		<body>If a boot application has the JMS api in the classpath, boot will try to create a `JmsTemplate` bean if none exists, regardless of the presence of `ConnectionFactory` bean.   Typically, if ActiveMQ is not in the classpath, but the JMS api are a boot app won't start unless `JmsTemplateAutoConfiguration` is excluded. </body>
		<created>2014-05-15 13:54:30</created>
		<closed>2014-05-15 14:27:24</closed>
	</bug>
	<bug>
		<id>882</id>
		<title>ActiveMQ BrokerUrl ignored unless inMemory is set to false</title>
		<body>`spring.activemq.brokerUrl` is ignored unless we explicitly add `spring.activemq.inMemory=false`.   `getBrokerUrl` actually always return a default `vm://localhost` url if the inMemory flag is `true` (and it's true by default).   We should instead inspect what the user has provided and figure out what the URL might be. Some documentation clarifications are required as well. </body>
		<created>2014-05-15 13:52:49</created>
		<closed>2014-05-15 14:27:12</closed>
	</bug>
	<bug>
		<id>879</id>
		<title>Exception running groovy scripts on IBM mainframe (USS)</title>
		<body>Trying to run a groovy script from the examples on Unix System Services on an IBM mainfraime with EBCDIC character set leeds to folowing exception:  ``` Could not instantiate global transform class ▒▒▒%?▒/%▒▒▒/&gt;▒▒?▒_/▒▒?&gt;▒▒?▒▒/&gt;▒%▒ ▒▒/�/&gt;&gt;?▒/▒▒?&gt; specified at jar:file:/u/FIX0GER/spring/lib/spring-boot-cli-1.1.0.BUILD-SNAPSHOT.jar!/lib/groovy-2.3.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception java.lang.ClassNotFoundException: ▒▒▒%?▒/%▒▒▒/&gt;▒▒?▒_/▒▒?&gt;▒▒?▒▒/&gt;▒%▒ ▒▒/�/&gt;&gt;?▒/▒▒?&gt;  Could not instantiate global transform class ▒▒▒??▒`▒▒/▒▒▒▒/ &gt;&gt;?▒/▒▒?&gt;▒▒/&gt;▒▒?▒_/▒▒?&gt; specified at jar:file:/u/FIX0GER/spring/lib/spring-boot-cli-1.1.0.BUILD-SNAPSHOT.jar!/lib/groovy-2.3.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception java.lang.ClassNotFoundException: ▒▒▒??▒`▒▒/▒▒▒▒/ &gt;&gt;?▒/▒▒?&gt;▒▒/&gt;▒▒?▒_/▒▒?&gt;  Could not instantiate global transform class ▒ specified at jar:file:/u/FIX0GER/spring/lib/spring-boot-cli-1.1.0.BUILD-SNAPSHOT.jar!/lib/groovy-2.3.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception java.lang.ClassNotFoundException: ▒  Could not instantiate global transform class ▒▒▒%?▒/%▒▒▒/&gt;▒▒?▒_/▒▒?&gt;▒▒?ʀ▒▒▒▒▒▒%▒▒▒ specified at jar:file:/u/FIX0GER/spring/lib/spring-boot-cli-1.1.0.BUILD-SNAPSHOT.jar!/lib/groovy-2.3.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception java.lang.ClassNotFoundException: ▒▒▒%?▒/%▒▒▒/&gt;▒▒?▒_/▒▒?&gt;▒▒?ʀ▒▒▒▒▒▒%▒▒▒  Could not instantiate global transform class ▒?▒▒▒?▒▒▒/▒▒▒▒??▒`/▒▒▒▒▒%▒▒▒▒▒▒▒▒▒%▒▒▒▒▒/&gt;▒▒?▒_/▒▒?&gt; specified at jar:file:/u/FIX0GER/spring/lib/spring-boot-cli-1.1.0.BUILD-SNAPSHOT.jar!/lib/groovy-2.3.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception java.lang.ClassNotFoundException: ▒?▒▒▒?▒▒▒/▒▒▒▒??▒`/▒▒▒▒▒%▒▒▒▒▒▒▒▒▒%▒▒▒▒▒/&gt;▒▒?▒_/▒▒?&gt; ``` </body>
		<created>2014-05-15 10:20:02</created>
		<closed>2014-05-21 07:19:39</closed>
	</bug>
	<bug>
		<id>873</id>
		<title>Error in configuration of git-commit-id-plugin for multimodule projects</title>
		<body>The `git-commit-id-plugin` is currently configured as:  ``` &lt;plugin&gt;             &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;             &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;             &lt;configuration&gt;                 &lt;verbose&gt;true&lt;/verbose&gt;                 &lt;dateFormat&gt;yyyy-MM-dd'T'HH:mm:ssZ&lt;/dateFormat&gt;                 &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;                 &lt;generateGitPropertiesFilename&gt;src/main/resources/git.properties&lt;/generateGitPropertiesFilename&gt;             &lt;/configuration&gt;         &lt;/plugin&gt; ```  See https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-parent/pom.xml  However, this does not work as it should in a multi-module Maven build. The `git.properties` file is always created at the top pom level, while it should be created at the pom level where the plugin is defined. To fix this change `generateGitPropertiesFilename` to:  ``` &lt;generateGitPropertiesFilename&gt;${basedir}/src/main/resources/git.properties&lt;/generateGitPropertiesFilename&gt; ``` </body>
		<created>2014-05-14 15:29:53</created>
		<closed>2014-05-15 08:29:24</closed>
	</bug>
	<bug>
		<id>869</id>
		<title>No pathInfo URI decoding in JolokiaMvcEndpoint.PathStripper</title>
		<body>When using an URL like `http://localhost:8080/jolokia/read/java.lang%3Atype%3DMemory/HeapMemoryUsage` for reading the heap memory via Jolokia and which uses URL encoded characters (`:` and `=` in this case), the pathInfo gets not properly decoded since JolokiaMvcEndpoint uses an own ServletRequestWrapper which overrides `getPathInfo()` without the proper decoding (jetty does a `org.eclipse.jetty.http.HttpURI#getDecodedPath()` for this).  However I not really understand the logic of Jetty here, since the original request arriving in the endpoint's handle() method doesn't has a pathInfo at all. Debugging this, it seems that Jetty uses various scopes for preparing the request and the innermost scope sets the pathInfo back to null (which was properly set before):  - `org.eclipse.jetty.server.AbstractHttpConnection#handleRequest` is called where the `pathInfo` is properly calculated to `/jolokia/read/java.lang:type=Memory/HeapMemoryUsage` and set accordingly. - In `org.eclipse.jetty.server.handler.ContextHandler#doScope` `pathInfo` is set to the proper path again. - In `org.eclipse.jetty.servlet.ServletHandler#doScope` pathInfo is set to `null` (!) - Then, `JolokiaMvcEndpoint#handle()` is called. Strangely, if I call `request.getPathInfo()` on the original, non-wrapped request, I get null and for the URI `/jolokia/read/java.lang%3Atype%3DMemory/HeapMemoryUsage`. I really would expected the decoded values here, including a proper path value.  - Then the wrapper `PathStripper` takes this URI and extracts the path _without_ URI decoding, which finally breaks the Jolokia logic.    One fix would be to simply decode the extracted part, but since I don't really understand, why the request in the endpoint's handle() method looks bogus to me, I dare to prepare a pull request.  </body>
		<created>2014-05-14 06:25:48</created>
		<closed>2014-05-15 15:29:28</closed>
	</bug>
	<bug>
		<id>868</id>
		<title>Remove checked exceptions from @PostConstruct methods</title>
		<body>Glassfish deployment fails due to autoconfigure.*.initialize() methods which use @PostConstruct annotation and can throw checked exception.  http://docs.oracle.com/javaee/6/api/javax/annotation/PostConstruct.html http://docs.oracle.com/javaee/7/api/javax/annotation/PostConstruct.html  Tried current snapshot version 1.1.0 and 1.0.2-RELEASE.   Basically all methods which use @PostConstuct should not throw checked exceptions.    This works on embeded tomcat 7 but not on Glassfish 4.0  ``` The lifecycle method [initialize] must not throw a checked exception. Related annotation information: annotation [@javax.annotation.PostConstruct()] on annotated element [public void org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer.initialize() throws java.lang.Exception] of type [METHOD] ```  ``` The lifecycle method [initialize] must not throw a checked exception. Related annotation information: annotation [@javax.annotation.PostConstruct()] on annotated element [protected void org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration.initialize() throws java.lang.Exception] of type [METHOD].  ```  P.S. Just as a reference There was similar issue in spring-batch itself but has been fixed in v2.2.6 https://jira.spring.io/browse/BATCH-2189 </body>
		<created>2014-05-13 22:26:47</created>
		<closed>2014-05-15 15:37:38</closed>
	</bug>
	<bug>
		<id>867</id>
		<title>Maven plugin cannot work with pom packaging</title>
		<body>It obviously can't repackage a POM but it might be common to declare the plugin in a parent. </body>
		<created>2014-05-13 22:18:55</created>
		<closed>2014-05-15 08:37:16</closed>
	</bug>
	<bug>
		<id>853</id>
		<title>Rename DefaulErrorAttributes to DefaultErrorAttributes</title>
		<body></body>
		<created>2014-05-13 15:05:16</created>
		<closed>2014-05-13 15:45:09</closed>
	</bug>
	<bug>
		<id>850</id>
		<title>RedisAutoConfiguration doesn't use server details set in properties file if using pooled connection</title>
		<body>If using custom redis properties in the `application.properties` or yaml equivalent, RedisAutoConfiguration doesn't use these settings when using `RedisPooledConnectionConfiguration.redisConnectionFactory ()`.  ``` if (this.properties.getPool() != null) {     JedisConnectionFactory factory = new JedisConnectionFactory(             jedisPoolConfig());     return factory; } ```  It needs to set the factory config from properties file.  ``` if (this.properties.getPool() != null) {     JedisConnectionFactory factory = new JedisConnectionFactory(             jedisPoolConfig());     factory.setHostName(this.properties.getHost());     factory.setPort(this.properties.getPort());     if (this.properties.getPassword() != null) {         factory.setPassword(this.properties.getPassword());     }                     return factory; } ```  Otherwise it uses JedisConnectionFactory defaults which is always localhost and throws connection errors if you're using something other than `localhost`.  </body>
		<created>2014-05-13 10:15:37</created>
		<closed>2014-05-13 15:34:19</closed>
	</bug>
	<bug>
		<id>838</id>
		<title>BOM imports in Spring Dependencies do not resolve from gradle</title>
		<body>Testing the 1.1.0.M1 staged release with sagan it appears that Spring Security dependencies no longer have their version numbers resolved.  This is due to the fact that they were using a BOM import. We will also have the same issue with Spring Data. </body>
		<created>2014-05-11 08:32:56</created>
		<closed>2014-05-20 13:39:31</closed>
	</bug>
	<bug>
		<id>836</id>
		<title>spring-boot-tools LaunchedURLClassLoader getUrls() returns invalid jar:file: urls on windows</title>
		<body>I have a spring boot (1.0.0.RC3) application with an embedded jetty (9.1.0.v20131115).   When trying to start on windows, while on Linux works normally, I get this exception on jetty WebAppContext startup:  ``` java.net.URISyntaxException: Illegal character in opaque part at index 11:  ```  While debugging I noticed that the urls returned from LaunchedURLClassLoader.getUrls() on line 97 of org.eclipse.jetty.webapp.WebInfConfiguration are in this format (note the single backslash):  ``` jar:file:C:\path_to_jar.jar!/webapp ```  I could workaround the problem by extending WebInfConfiguration changing line 110 from:  ``` containerUris[i] = new URI(u.toString().replaceAll(" ", "%20")); ```  to  ``` containerUris[i] = new URI(u.toString().replaceAll(" ", "%20").replace('\\', '/')); ```  and:  ``` WebAppContext ctx = new WebAppContext(); ctx.setConfigurationClasses(new String[] {        "au.com......MyEmbeddedWebInfConfiguration",  [... default classes ...] }); ```  Is  jar:file:C:\path_to_jar.jar!/webapp a valid URL at all?  Shouldn't it be with escaped backslashes or forward slashes? </body>
		<created>2014-05-10 08:37:34</created>
		<closed>2014-05-16 14:05:13</closed>
	</bug>
	<bug>
		<id>779</id>
		<title>Reference guide is incorrect about "default password for shell access" message</title>
		<body>Section [35.1 Connecting to the remote shell](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-connecting-to-the-remote-shell) reads:  &gt; Using default password for shell access: ec03e16c-4cf4-49ee-b745-7c8255c1dd7e  But in fact, this message never actually appears in the console. Only the usual one regarding endpoint access does:  &gt; Using default password for application endpoints: 4f52937a-4da9-478b-ac96-2e9446c2f937  The latter value _does work_ when attempting to ssh into the shell, but it's confusing for users, because they're expecting a second message, worded as advertised--and it never shows up. </body>
		<created>2014-05-04 12:36:14</created>
		<closed>2014-05-05 09:13:08</closed>
	</bug>
	<bug>
		<id>773</id>
		<title>CTRL-C doesn't stop running app in Windows</title>
		<body>http://stackoverflow.com/questions/23432651/terminating-mvn-spring-bootrun-doesnt-stop-tomcat </body>
		<created>2014-05-02 16:24:28</created>
		<closed>2014-05-02 19:47:09</closed>
	</bug>
	<bug>
		<id>767</id>
		<title>Unable to attach Spring Loaded to the JVM: Unable to locate tools.jar</title>
		<body>Hi,  I'm using **springloaded** with the **spring-boot-maven-plugin** on 1.0.1.RELEASE (also tried on 1.0.2.RELEASE). When lauching with the main() method  and passing the JVM arguments :  ``` -javaagent:${mypath}\springloaded-1.2.0.RELEASE.jar -noverify ```  **it works well**.  When I try to launch it using maven with **spring-boot:run** with the following configuration:  ```             &lt;plugin&gt;                 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                 &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                  &lt;configuration&gt;                     &lt;mainClass&gt;${org.springframework.boot.start.class}&lt;/mainClass&gt;                     &lt;layout&gt;ZIP&lt;/layout&gt;                     &lt;noverify&gt;&lt;/noverify&gt;                     &lt;agent&gt;C:/PTOD/localrepository/org/springframework/springloaded/1.2.0.RELEASE/springloaded-1.2.0.RELEASE.jar&lt;/agent&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                 ...                 &lt;/executions&gt;                  &lt;dependencies&gt;                     &lt;dependency&gt;                         &lt;groupId&gt;org.springframework&lt;/groupId&gt;                         &lt;artifactId&gt;springloaded&lt;/artifactId&gt;                         &lt;version&gt;1.2.0.RELEASE&lt;/version&gt;                     &lt;/dependency&gt;                 &lt;/dependencies&gt;             &lt;/plugin&gt; ```  I have the following exception :  &lt;i&gt;[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.0.1.RELEASE:run (default-cli) on project restful-spring-web: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:1.0.1.RELEASE:run failed: Unable to attach Spring Loaded to the JVM: Unable to locate tools.jar -&gt; [Help 1] &lt;/i&gt; I then tried to debug it and it occurs into "org.springframework.boot.loader.tools.JvmUtils":  ``` public static URL getToolsJarUrl() {     String javaHome = getJavaHome();     for (String location : TOOLS_LOCATIONS) {         try {             URL url = new URL("file://" + javaHome + "/" + location);             if (new File(url.toURI()).exists()) {                 return url;             }         }         catch (Exception ex) {             // Ignore and try the next location         }     }     throw new IllegalStateException("Unable to locate tools.jar"); } ```  When I add a '/' at the beginning of "javaHome" variable, the **file is then found**, the application starts well... and then I have a more odd behaviour letting the program running with jdk1.7.0_55: &lt;i&gt; [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.0.1.RELEASE:run (default-cli) on project restful-spring-web: An exception occured while running. null: InvocationTargetException: Cannot load configuration class: pacifica.proto.newsesame.restful.spring.config.WebConfig: Expecting a stackmap frame at branch target 49 [ERROR] Exception Details: [ERROR] Location: [ERROR] pacifica/proto/newsesame/restful/spring/config/WebConfig.&lt;init&gt;()V @9: ifnull [ERROR] Reason: [ERROR] Expected stackmap frame at this location. [ERROR] Bytecode: [ERROR] 0000000: b200 1212 54b6 0058 59c6 0028 c000 3c2a [ERROR] 0000010: 01b7 005a 2ab4 000e c700 122a bb00 1059 [ERROR] 0000020: 2ab2 0012 b700 16b5 000e 2ab9 0048 0200 [ERROR] 0000030: b157 2ab7 0040 2ab4 000e c700 122a bb00 [ERROR] 0000040: 1059 2ab2 0012 b700 16b5 000e 2a12 02b8 [ERROR] 0000050: 0060 2ab4 000e c700 122a bb00 1059 2ab2 [ERROR] 0000060: 0012 b700 16b5 000e 1261 1262 b800 682a [ERROR] 0000070: b400 0ec7 0012 2abb 0010 592a b200 12b7 [ERROR] 0000080: 0016 b500 0e99 000d 5f5a 1262 b700 6aa7 [ERROR] 0000090: 0006 b500 6cb1 [ERROR] -&gt; [Help 1] &lt;/i&gt; It seems that the -noverify option is not interpreted... I can provide the WebConfig code if needed  thanks in advance... </body>
		<created>2014-05-02 08:50:02</created>
		<closed>2014-05-02 12:02:48</closed>
	</bug>
	<bug>
		<id>764</id>
		<title>Build error similar to 711 on UN*X (or Mac) if LANG environment variable is not set</title>
		<body>On MacOS, I have the same error than the one described in #711 if the `LANG` environment variable is not set.   If I set it to `en_US.UTF-8` the tests pass. </body>
		<created>2014-05-01 16:42:43</created>
		<closed>2014-05-02 14:05:39</closed>
	</bug>
	<bug>
		<id>711</id>
		<title>Build error on Windows</title>
		<body>I am using JDK 7.04, Maven 3.0.5 to build spring boot in windows 7. It has following error ：  ``` Results : Failed tests:   JarFileTests.getSpecialResourceViaClassLoader:134 Expected: not null      but: was null   JarFileTests.jdkJarFile:92 Expected: not null      but: was null ```  It looks like a encoding problem, but I change to encoding it with utf-8. But it still occurs some error.  </body>
		<created>2014-04-22 05:57:32</created>
		<closed>2014-04-30 12:11:34</closed>
	</bug>
	<bug>
		<id>700</id>
		<title>SecurityProperties [security.user.role=USER] not working</title>
		<body>According to:  http://docs.spring.io/spring-boot/docs/current/SNAPSHOT/reference/htmlsingle/#common-application-properties-security  security.user.role=USER  # can be set but if one does that all tests are failing  This is in due to:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityProperties': Could not bind properties; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'user.role' of bean class [org.springframework.boot.autoconfigure.security.SecurityProperties]: Bean property 'role' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter? ```  Below is the full stack trace that shows the problem:  ``` 2014-04-21 14:23:27.370 ERROR 57357 --- [cat-startStop-1] org.apache.catalina.core.ContainerBase   : A child container failed during start ... Caused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)     ... 7 common frames omitted Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.setFilterChainProxySecurityConfigurer(org.springframework.security.config.annotation.ObjectPostProcessor,java.util.List) throws java.lang.Exception; nested exception is org.springframework.beans.factory.BeanExpressionException: Expression parsing failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.setAuthenticationConfiguration(org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration); nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.setGlobalAuthenticationConfigurers(java.util.List) throws java.lang.Exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.util.List org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.dependencies; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityProperties': Could not bind properties; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'user.role' of bean class [org.springframework.boot.autoconfigure.security.SecurityProperties]: Bean property 'role' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at  ``` </body>
		<created>2014-04-21 12:26:14</created>
		<closed>2014-04-21 13:43:07</closed>
	</bug>
	<bug>
		<id>699</id>
		<title>Management security not picking up user's AuthenticationManager in secure method sample</title>
		<body>See question on StackOverflow: http://stackoverflow.com/questions/23174275/configure-actuator-enpoints-security/23176998?noredirect=1#comment35451713_23176998 </body>
		<created>2014-04-20 16:58:05</created>
		<closed>2014-04-20 17:20:01</closed>
	</bug>
	<bug>
		<id>694</id>
		<title>ErrorPageFilter causes StackOverflow Exception when custom ErrorController/Page Defined</title>
		<body>When packaged as a WAR file, Spring Boot apps with custom `ErrorController` and Pages cause a StackOverflow exception on invalid `POST` requests (bad CSRF token) due to `ErrorPageFilter`'s behaviour of doing a Forward to the Error handler.  This Forward propagates the `POST` to the `ErrorController` which itself is protected by CSRF Filter, and the loop begins.  A tweaked `gs-securing-web` project is available for reproducibility https://github.com/hoserdude/spring-boot-actuator-csrf </body>
		<created>2014-04-18 22:12:53</created>
		<closed>2014-04-19 23:12:24</closed>
	</bug>
	<bug>
		<id>692</id>
		<title>TestRestTemplate overwrites HttpRequestFactory in customizer</title>
		<body></body>
		<created>2014-04-18 16:22:07</created>
		<closed>2014-04-18 17:48:09</closed>
	</bug>
	<bug>
		<id>684</id>
		<title>Whitelabel error page doesn't display when deployed to Tomcat server</title>
		<body>I've got a basic spring boot webapp and I'm trying to create a customised error page for it.  I'm using spring-boot-actuator so I've got its default whitelabel error page and have successfully customised it by creating my own `error.html` page. This is working nicely when running with the embedded Tomcat container - if one of my controllers throws an exception (e.g. DataAccessException) then my custom error page gets displayed. However, when I deploy my app to a Tomcat server I get the default Tomcat error page showing the full stack trace.  I've been trying to trace what's going on using the debugger in STS and I've found the `ErrorPageFilter` (which only seems to be present when running on the Tomcat server) is correctly handling the exception and forwarding the request to the error controller. However tracing further I eventually get to the `invoke` method of `org.apache.catalina.valves.ErrorReportValve` which seems to then reset the response.  I'm using Spring Boot 1.0.1.RELEASE and Apache Tomcat 7.0.53. </body>
		<created>2014-04-16 22:11:28</created>
		<closed>2014-04-16 23:30:08</closed>
	</bug>
	<bug>
		<id>673</id>
		<title>JettyEmbeddedServletContainer assumes handler order</title>
		<body>Configuring a Jetty RewriteHandler with spring-boot embedded Jetty is not possible due to the fact that the JettyEmbeddedServletContainer assumes that the Jetty Server handler is of type JettyEmbeddedWebAppContext.  The implementation of method JettyEmbeddedServletContainer.start practically iterates over a single handler when it looks for a handler which is an instance of JettyEmbeddedWebAppContext, but since Jetty Server class extends HandlerWrapper, it will always return a single Handler implementation, which is the top of the handlers chain. Since the RewriteHandler is configured first, the JettyEmbeddedWebAppContext deferredInitialize logic never executes and the server cannot handle requests after startup.  ``` public void start() throws EmbeddedServletContainerException {     if (!this.autoStart) {         return;     }     try {         this.server.start();         for (Handler handler : this.server.getHandlers()) {             if (handler instanceof JettyEmbeddedWebAppContext) {                 ((JettyEmbeddedWebAppContext) handler).deferredInitialize();             }         }         Connector[] connectors = this.server.getConnectors();         for (Connector connector : connectors) {             connector.start();             this.logger.info("Jetty started on port: " + getLocalPort(connector));         }     }     catch (Exception ex) {         throw new EmbeddedServletContainerException(                 "Unable to start embedded Jetty servlet container", ex);     } } ``` </body>
		<created>2014-04-13 18:36:01</created>
		<closed>2014-04-15 13:21:38</closed>
	</bug>
	<bug>
		<id>672</id>
		<title>Local jars in lib dir are not included in the jar anymore with gradle</title>
		<body>My build.gradle looks like this:  ``` buildscript {     repositories {         maven { url "http://repo.spring.io/libs-snapshot" }         mavenLocal()     }     dependencies {         classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.1.RELEASE")     } }  apply plugin: 'java' apply plugin: 'idea' apply plugin: 'spring-boot'  jar {     baseName = 'jpowermeter'     version =  '0.1.0' }  repositories {     mavenCentral()     maven { url "http://repo.spring.io/libs-snapshot" } }  dependencies {     compile("org.springframework.boot:spring-boot-starter-web:1.0.1.RELEASE") {         exclude module: "spring-boot-starter-tomcat"     }     compile("org.springframework.boot:spring-boot-starter-jetty:1.0.1.RELEASE")     compile("org.springframework.boot:spring-boot-starter-actuator:1.0.1.RELEASE")     compile("org.springframework.boot:spring-boot-starter-data-jpa:1.0.1.RELEASE")     compile("org.thymeleaf:thymeleaf-spring3:2.0.16")     testCompile("junit:junit:4.11")     compile files("libs/jsml-1.0.15.jar")     compile("com.h2database:h2:1.3.172")     compile files("libs/rxtxcomm_api-2.1.7.jar") }  task wrapper(type: Wrapper) {     gradleVersion = '1.8' } ```  What happens is that jsml-1.0.15.jar and rxtxcomm_api-2.1.7.jar which are in the libs dir are not included anymore in the resulting jar file.  When I change it back to e.g. version 0.5.0M6, they are included.  Desired behavior or bug?  Example can be found here:  https://github.com/oliverwehrens/jpowermeter  </body>
		<created>2014-04-13 11:13:08</created>
		<closed>2014-04-15 14:52:58</closed>
	</bug>
	<bug>
		<id>642</id>
		<title>Jolokia MVC endpoint doesn't map to the change in management context path</title>
		<body>If the management context path is set to use a different path(say, /management) from the default ('/') one, the jolokia MVC endpoints could not be accessed from that context path.   Please see https://jira.spring.io/browse/XD-1496 for the stacktrace when accessing the jolokia mvc endpoint. </body>
		<created>2014-04-08 07:25:17</created>
		<closed>2014-04-08 09:28:55</closed>
	</bug>
	<bug>
		<id>621</id>
		<title>HibernateJpaAutoConfiguration causes external database's tables to be dropped when in-memory database is on classpath</title>
		<body>HibernateJpaAutoConfiguration.getDefaultDdlAuto() returns by default 'create-drop' which causes database tables to be dropped from external database [Oracle10g].  Our setup: Our Spring-boot Application.class has been annotated with @EnableAtuConfiguration. We have specific JPA configuration beans that uses specially named entitymanager and TX-manager (need separate of both for different database instances) so we are not using default names for those Spring beans. These configuration beans are loaded with Application.class.  We have 'hibernate.hbm2ddl.auto'=none specially in our configuration classes.  What happens: Automatic configuration notices that no default entitymanger is created and proceeds to create one named as 'default' and scans for available @Entity classes.  Then HibernateJpaAutoConfiguration.getDefaultDdlAuto() method returns 'create-drop' as schema DDL option. This then during server startup drops all scanned @Entity tables from external database instance, luckily development environment database in this case.  Should we use 'spring.jpa.hibernate.ddl-auto' property instead of 'hibernate.hbm2ddl.auto'?  Seems this feature has been here for quite some time: http://stackoverflow.com/questions/21250627/spring-boot-jpa-base-configuration-taking-precendence-over-app-configuration  and also discussed earlier "in-house" as well: https://github.com/spring-projects/spring-boot/issues/373  https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java </body>
		<created>2014-04-02 14:20:18</created>
		<closed>2014-04-02 16:28:11</closed>
	</bug>
	<bug>
		<id>614</id>
		<title>Spring Boot runner with top-level package duplicate does not work</title>
		<body>**Given**: A Spring boot application integrated with Jersey 2.7, Jerse-Spring3 (2.7)  https://github.com/sukrit007/springboot-jersey  **And**: An empty/non-empty folder, "com"  in resources folder.  **When**: I run Spring boot application  ``` mvn spring-boot:run ```  **Then**: My application fails with error:  ``` [WARNING]  java.lang.ClassNotFoundException: com.geowarin.Application     at java.net.URLClassLoader$1.run(URLClassLoader.java:372)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:360)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:304)     at java.lang.Thread.run(Thread.java:744) ```  **When**: I remove the folder com and run the application again.  **Then**: My application starts working. </body>
		<created>2014-03-31 22:00:28</created>
		<closed>2014-04-01 16:37:13</closed>
	</bug>
	<bug>
		<id>585</id>
		<title>Logback CONSOLE appender isn't set until after main logback.xml is used</title>
		<body>The `basic-logback.xml` introduced a while ago is a good idea (stops from writing to a file if the user doesn't want that), but it isn't actually producing any output. </body>
		<created>2014-03-26 16:23:58</created>
		<closed>2014-03-26 16:26:00</closed>
	</bug>
	<bug>
		<id>576</id>
		<title>@EnableTransactionManagement is off by default</title>
		<body>Not a really big deal, but it was supposed to be on by default (`@ConditionalOnMissingClass` should be`@ConditionalOnMissingBean`). </body>
		<created>2014-03-25 16:01:52</created>
		<closed>2014-03-25 16:36:20</closed>
	</bug>
	<bug>
		<id>568</id>
		<title>spring-boot-sample-web-secure does not start</title>
		<body>Despite the tests passing, I get the following error when trying to start spring-boot-sample-web-secure  ``` Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'applicationSecurity': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.security.config.annotation.ObjectPostProcessor] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:292)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1185)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)     at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:648)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:130)     at sample.ui.secure.SampleSecureApplication.main(SampleSecureApplication.java:56) Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire method: public void org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.setObjectPostProcessor(org.springframework.security.config.annotation.ObjectPostProcessor); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.security.config.annotation.ObjectPostProcessor] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)     at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:87)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:289)     ... 15 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.security.config.annotation.ObjectPostProcessor] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}     at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1100)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:960)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:855)     at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:553)     ... 17 more ``` </body>
		<created>2014-03-25 01:58:28</created>
		<closed>2014-03-25 07:54:41</closed>
	</bug>
	<bug>
		<id>554</id>
		<title>Websockets autoconfig in 1.0.0.RC5 not compatible with tomcat 8.0.3</title>
		<body>I get the following when upgrading to RC5. RC4 works `java.lang.NoClassDefFoundError: org/apache/catalina/deploy/ApplicationListener     at java.lang.Class.getDeclaredMethods0(Native Method)     at java.lang.Class.privateGetDeclaredMethods(Class.java:2531)     at java.lang.Class.getDeclaredMethods(Class.java:1855)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:474)     at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:458)     at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:519)` </body>
		<created>2014-03-23 14:33:40</created>
		<closed>2014-03-24 09:04:33</closed>
	</bug>
	<bug>
		<id>551</id>
		<title>RC5 - WebSockets-Starter causes failure in WAR deployment</title>
		<body>When WebSockets are declared as dependencies in a pom.xml the following stack occurs when deploying as a war: `Caused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'errorPageFilter': Initialization of bean failed; nested exception is java.lang.IllegalStateException: Websockets are currently only supported in Tomcat (found class org.springframework.boot.context.web.ErrorPageFilter)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:648)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)     at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:130)     at org.springframework.boot.context.web.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:89)     at org.springframework.boot.context.web.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:51)     at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:175)     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5456)     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)     ... 40 more` Simple way to reproduce is to take the `gs-convert-jar-to-war` project, upgrade it to RC5, and add the following to the POM:  ```         &lt;dependency&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;         &lt;/dependency&gt; ``` </body>
		<created>2014-03-23 01:34:10</created>
		<closed>2014-03-23 21:47:35</closed>
	</bug>
	<bug>
		<id>549</id>
		<title>ThymeleafViewResolver tries to resolve existing, static html files</title>
		<body>I'm forced to exclude (either through white or blacklisting) existing, static files.   See here https://github.com/michael-simons/biking2/blob/public/src/main/java/ac/simons/biking2/config/WebConfig.java#L114-L116.   If i leave this out and goto / the resource servlet should deliver index.html from webapp/public/index.html (fails also when in main/resources/static) but the ThymeleafViewResolver tries to handle that view.   Same when i hit /about (or any other view mapped via https://github.com/michael-simons/biking2/blob/public/src/main/java/ac/simons/biking2/config/WebConfig.java#L53-L68).  I'd expect Spring (Boot) to deliver the existing, static resources.  The issue occurs in RC3, RC4 and RC5.   Thanks for looking into it. </body>
		<created>2014-03-22 13:05:05</created>
		<closed>2014-03-22 14:21:28</closed>
	</bug>
	<bug>
		<id>547</id>
		<title>Discovering mainClass via custom gradle task broken</title>
		<body>This used to work:  ``` task appmasterJar(type: Jar) {   appendix = 'appmaster'   from sourceSets.main.output   exclude('**/*Container*')   exclude('**/*Client*') }  task appmasterBootJar(type: BootRepackage, dependsOn: appmasterJar) {   withJarTask = appmasterJar } ```  This custom task no longer find main class from the jar defined with `withJarTask` property.  This seems to be caused by commit https://github.com/spring-projects/spring-boot/commit/511fff05bbc42b1c8338a24dfa06adaf631d4e85 because as a quick test I removed what that commit changed and main class was detected correctly from the specific jar.  I can still use it if I define a mainClass manually within a custom task so this is not a hard blocker, though it'd be nice to get fixed. So sorry that I didn't catch this earlier, especially because that commit is rather old.  </body>
		<created>2014-03-22 12:48:59</created>
		<closed>2014-05-22 17:18:52</closed>
	</bug>
	<bug>
		<id>546</id>
		<title>Issue with contentNegotiatingViewResolver</title>
		<body>After upgrading to RC5, I have an issue with a defined ResourceBundleViewResolver, this used to work fine in RC4, it might be related to commit 6b83e0a. Besides a name change, I also notice an annotation change: @ConditionalOnBean(ViewResolver.class) which is probably the reason why it pops-up in RC5.  My configured view resolvers are as follows:  Using RC4 resourceBundleViewResolver, order 2147483597 thymeleafViewResolver, order 2147483627 defaultViewResolver, order 2147483647  Using RC5 contentNegotiatingViewResolver, order -2147483648 resourceBundleViewResolver, order 2147483597 thymeleafViewResolver, order 2147483627 defaultViewResolver, order 2147483647  So the contentNegotiatingViewResolver "pops-up" in RC5 which breaks my resourceBundleViewResolver for some reason. What I don't understand from this is that contentNegotiatingViewResolver is set to highest priority (lowest number). How can I configure my resourceBundleViewResolver to have a higher prio?  Is there an easy way to disable this contentNegotiatingViewResolver? </body>
		<created>2014-03-22 09:47:58</created>
		<closed>2014-03-22 14:46:22</closed>
	</bug>
	<bug>
		<id>530</id>
		<title>spring-boot-sample-actuator doesn't compile with Gradle</title>
		<body>It's missing a dependency on the test starter </body>
		<created>2014-03-19 11:31:16</created>
		<closed>2014-03-19 11:32:49</closed>
	</bug>
	<bug>
		<id>520</id>
		<title>PropertiesLauncher searches whole filesystem (unnecessarily)</title>
		<body>`PropertiesLauncher` tries to locate a MANIFEST.MF to extract a `Main-Class` from (amongst other things). If it is launched with `loader.home=${user.home}`, or `loader.home=/` (or some other disasterously large file tree), it ends up creating an `ExplodedArchive` for the whole tree, where all it really wanted to was to look for the manifest. </body>
		<created>2014-03-18 14:25:50</created>
		<closed>2014-03-18 14:28:27</closed>
	</bug>
	<bug>
		<id>486</id>
		<title>Windows users get ugly error message from absolute file name passed to ClassLoader</title>
		<body>This [SO question](http://stackoverflow.com/questions/22337323/spring-boot-standalone-jar-crashing-when-config-location-is-a-windows-absolute-p/22337823#22337823) turned out to be an obscure stack trace hiding the real problem (the `ClassLaoder` was being given an absolute file path to resolve as resource). </body>
		<created>2014-03-13 08:36:38</created>
		<closed>2014-03-13 09:05:17</closed>
	</bug>
	<bug>
		<id>483</id>
		<title>"+" syntax for profiles is confusing</title>
		<body>I know this was added in response to a previous issue where someone actually expected overriding of profiles to be additive, but in my opinion it doesn't provide much benefit and adds confusion. It would be simpler to just say that when you override spring.profiles.active, then those are the profiles you get. Working out what happens when there are one or more of them with a "+" sign in front seems like unnecessary complexity that we'd be better without. There is enough to get your head round with working out how multiple property sources are combined together and in practice, many people dealing with these configuration files for the environment won't even be developers. I don't think they should have to know that this property behaves differently from others depending on this syntax. </body>
		<created>2014-03-12 15:16:18</created>
		<closed>2014-03-21 17:03:05</closed>
	</bug>
	<bug>
		<id>479</id>
		<title>Unable to customize TomcatEmbeddedServletContainerFactory with Websocket auto-configuration</title>
		<body>See https://github.com/hoserdude/spring-boot-sample-tomcat-ssl to show the problem in action - when a project with both websockets and embedded tomcat boot up and the user has created a custom `TomcatEmbeddedServletContainerFactory` (in this case to set up SSL), the AppContext detects two such Factories and terminates execution.  The second factory is created by the `WebSocketAutoConfiguration` which precedes the `EmbeddedServletContainerAutoConfiguration` which itself will respect an existing factory already registered.  This is the error: `Exception in thread "main" org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to multiple EmbeddedServletContainerFactory beans : servletContainer,tomcatEmbeddedServletContainerFactory     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:135)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:476)     at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:120)     at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:619)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:306)` </body>
		<created>2014-03-12 06:07:39</created>
		<closed>2014-03-12 09:21:55</closed>
	</bug>
	<bug>
		<id>469</id>
		<title>management.contextPath doesn't quite work as expected</title>
		<body>... it does set the context path in the case of a separate management port, but it is also used to set a prefix for endpoint mapping when the port is the same as the main app. In that case the the security configuration is wrong (it needs to pick up a prefix, so that e.g. /health is unsecured by default). </body>
		<created>2014-03-10 16:16:07</created>
		<closed>2014-03-10 16:29:32</closed>
	</bug>
	<bug>
		<id>451</id>
		<title>SQL Initialization double execution from "mvn spring-boot:run"</title>
		<body>Defining an SQL initialization using spring.datasource.initialize and spring.datasource.schema does not work in Tomcat.  See https://www.dropbox.com/s/kvzd1y1n1o80put/ZipBug.zip for an Example. I am using the SQL initialization in that project. There is a web controller and a test doing an SQL statement. mvn test executes the test correctly. If you do mvn spring-boot:run and open http://localhost:8080/ the same SQL statement fails because the table does not exist. However, the table should have been created at startup. </body>
		<created>2014-03-07 12:03:32</created>
		<closed>2014-03-10 17:06:14</closed>
	</bug>
	<bug>
		<id>433</id>
		<title>RC4 emits log4j errors on startup</title>
		<body>The following errors are emitted when running the application using log4j: log4j:ERROR Could not find value for key log4j.appender.FILE log4j:ERROR Could not instantiate appender named "FILE". log4j:ERROR Could not find value for key log4j.appender.FILE log4j:ERROR Could not instantiate appender named "FILE".  To reproduce run:  [spring-boot-sample-actuator-log4j](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-actuator-log4j) </body>
		<created>2014-03-04 21:44:41</created>
		<closed>2014-03-04 22:24:35</closed>
	</bug>
	<bug>
		<id>429</id>
		<title>Cannot change default profiles in a local config file</title>
		<body>XD singlenode not working with RC4 ...apparently HSQLDB is not starting up </body>
		<created>2014-03-04 18:01:35</created>
		<closed>2014-03-05 16:02:54</closed>
	</bug>
	<bug>
		<id>428</id>
		<title>User adds bean named "viewResolver" and app breaks</title>
		<body>The `ContentNegotiatingViewResolver` from Spring Boot is called "viewResolver" so if a user adds a bean with the same name it gets overwritten. Not helpful and quite confusing for user.  &gt; what surprised me is that when I was using boot cli, it worked. So I guess it is a matter of class path order which determines which one wins... </body>
		<created>2014-03-04 17:36:28</created>
		<closed>2014-03-05 09:08:17</closed>
	</bug>
	<bug>
		<id>423</id>
		<title>Disabling EmbeddedServletContainerAutoConfiguration breaks request routing in non-embedded containers</title>
		<body>Currently if you exclude `EmbeddedServletContainerAutoConfiguration` from auto-reconfiguration, it seems to break routing even in non-embedded containers.  I've created a [sample application](https://github.com/nebhale/spring-boot-423) to demonstrate the problem.  In the application's stock form, [it excludes `EmbeddedServletContainerAutoConfiguration`](https://github.com/nebhale/spring-boot-422/blob/master/src/main/java/ApplicationConfiguration.java#L10).  ``` java @ComponentScan @EnableAutoConfiguration(exclude = EmbeddedServletContainerAutoConfiguration.class) public class ApplicationConfiguration { } ```  When this application is built and deployed to an existing Tomcat instance, you get the following output:  ``` bash bhale-desktop master: catalina run Using CATALINA_BASE:   /usr/local/Cellar/tomcat/7.0.52/libexec Using CATALINA_HOME:   /usr/local/Cellar/tomcat/7.0.52/libexec Using CATALINA_TMPDIR: /usr/local/Cellar/tomcat/7.0.52/libexec/temp Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home Using CLASSPATH:       /usr/local/Cellar/tomcat/7.0.52/libexec/bin/bootstrap.jar:/usr/local/Cellar/tomcat/7.0.52/libexec/bin/tomcat-juli.jar Mar 04, 2014 11:02:17 AM org.apache.catalina.core.AprLifecycleListener init INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: /Users/bhale/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:. Mar 04, 2014 11:02:17 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["http-bio-8080"] Mar 04, 2014 11:02:17 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["ajp-bio-8009"] Mar 04, 2014 11:02:17 AM org.apache.catalina.startup.Catalina load INFO: Initialization processed in 407 ms Mar 04, 2014 11:02:17 AM org.apache.catalina.core.StandardService startInternal INFO: Starting service Catalina Mar 04, 2014 11:02:17 AM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: Apache Tomcat/7.0.52 Mar 04, 2014 11:02:17 AM org.apache.catalina.startup.HostConfig deployWAR INFO: Deploying web application archive /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/ROOT.war    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::            (v1.0.0.RC3)  2014-03-04 11:02:19.123  INFO 16947 --- [ost-startStop-1] o.s.boot.SpringApplication               : Starting application on bhale-desktop.local with PID 16947 (/usr/local/Cellar/tomcat/7.0.52/libexec/webapps/ROOT/WEB-INF/lib/spring-boot-1.0.0.RC3.jar started by bhale) 2014-03-04 11:02:19.151  INFO 16947 --- [ost-startStop-1] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@239612b0: startup date [Tue Mar 04 11:02:19 GMT 2014]; root of context hierarchy 2014-03-04 11:02:19.660  INFO 16947 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 509 ms 2014-03-04 11:02:20.012  INFO 16947 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:02:20.080  INFO 16947 --- [ost-startStop-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto java.lang.String application.ApplicationController.health() 2014-03-04 11:02:20.099  INFO 16947 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:02:20.099  INFO 16947 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:02:20.234  INFO 16947 --- [ost-startStop-1] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2014-03-04 11:02:20.273  INFO 16947 --- [ost-startStop-1] o.s.boot.SpringApplication               : Started application in 1.647 seconds (JVM running for 3.49) Mar 04, 2014 11:02:20 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/docs Mar 04, 2014 11:02:20 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/examples Mar 04, 2014 11:02:20 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/host-manager Mar 04, 2014 11:02:20 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/manager Mar 04, 2014 11:02:20 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["http-bio-8080"] Mar 04, 2014 11:02:20 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["ajp-bio-8009"] Mar 04, 2014 11:02:20 AM org.apache.catalina.startup.Catalina start INFO: Server startup in 3308 ms ```  As you can see, it implies that an application has been started correctly.  However, doing a `curl http://localhost:8080/` indicates that something is wrong:  ``` bash bhale-desktop master: curl http://localhost:8080/ &lt;html&gt;&lt;head&gt;&lt;title&gt;Apache Tomcat/7.0.52 - Error report&lt;/title&gt;&lt;style&gt;&lt;!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--&gt;&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 - /&lt;/h1&gt;&lt;HR size="1" noshade="noshade"&gt;&lt;p&gt;&lt;b&gt;type&lt;/b&gt; Status report&lt;/p&gt;&lt;p&gt;&lt;b&gt;message&lt;/b&gt; &lt;u&gt;/&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;description&lt;/b&gt; &lt;u&gt;The requested resource is not available.&lt;/u&gt;&lt;/p&gt;&lt;HR size="1" noshade="noshade"&gt;&lt;h3&gt;Apache Tomcat/7.0.52&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt; ```  Removing the exclusion  ``` java @ComponentScan @EnableAutoConfiguration public class ApplicationConfiguration { } ```  and re-deploying results in the same output:  ``` bash bhale-desktop master: catalina run Using CATALINA_BASE:   /usr/local/Cellar/tomcat/7.0.52/libexec Using CATALINA_HOME:   /usr/local/Cellar/tomcat/7.0.52/libexec Using CATALINA_TMPDIR: /usr/local/Cellar/tomcat/7.0.52/libexec/temp Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home Using CLASSPATH:       /usr/local/Cellar/tomcat/7.0.52/libexec/bin/bootstrap.jar:/usr/local/Cellar/tomcat/7.0.52/libexec/bin/tomcat-juli.jar Mar 04, 2014 11:05:14 AM org.apache.catalina.core.AprLifecycleListener init INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: /Users/bhale/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:. Mar 04, 2014 11:05:14 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["http-bio-8080"] Mar 04, 2014 11:05:14 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["ajp-bio-8009"] Mar 04, 2014 11:05:14 AM org.apache.catalina.startup.Catalina load INFO: Initialization processed in 400 ms Mar 04, 2014 11:05:14 AM org.apache.catalina.core.StandardService startInternal INFO: Starting service Catalina Mar 04, 2014 11:05:14 AM org.apache.catalina.core.StandardEngine startInternal INFO: Starting Servlet Engine: Apache Tomcat/7.0.52 Mar 04, 2014 11:05:14 AM org.apache.catalina.startup.HostConfig deployWAR INFO: Deploying web application archive /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/ROOT.war    .   ____          _            __ _ _  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \ ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )   '  |____| .__|_| |_|_| |_\__, | / / / /  =========|_|==============|___/=/_/_/_/  :: Spring Boot ::            (v1.0.0.RC3)  2014-03-04 11:05:16.567  INFO 17279 --- [ost-startStop-1] o.s.boot.SpringApplication               : Starting application on bhale-desktop.local with PID 17279 (/usr/local/Cellar/tomcat/7.0.52/libexec/webapps/ROOT/WEB-INF/lib/spring-boot-1.0.0.RC3.jar started by bhale) 2014-03-04 11:05:16.594  INFO 17279 --- [ost-startStop-1] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3072115: startup date [Tue Mar 04 11:05:16 GMT 2014]; root of context hierarchy 2014-03-04 11:05:17.118  INFO 17279 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 525 ms 2014-03-04 11:05:17.571  INFO 17279 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:05:17.641  INFO 17279 --- [ost-startStop-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto java.lang.String application.ApplicationController.health() 2014-03-04 11:05:17.661  INFO 17279 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:05:17.661  INFO 17279 --- [ost-startStop-1] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler] 2014-03-04 11:05:17.816  INFO 17279 --- [ost-startStop-1] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup 2014-03-04 11:05:17.831  INFO 17279 --- [ost-startStop-1] o.s.boot.SpringApplication               : Started application in 1.814 seconds (JVM running for 3.656) Mar 04, 2014 11:05:17 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/docs Mar 04, 2014 11:05:17 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/examples Mar 04, 2014 11:05:18 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/host-manager Mar 04, 2014 11:05:18 AM org.apache.catalina.startup.HostConfig deployDirectory INFO: Deploying web application directory /usr/local/Cellar/tomcat/7.0.52/libexec/webapps/manager Mar 04, 2014 11:05:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["http-bio-8080"] Mar 04, 2014 11:05:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["ajp-bio-8009"] Mar 04, 2014 11:05:18 AM org.apache.catalina.startup.Catalina start INFO: Server startup in 3472 ms ```  but `curl http://localhost:8080/` works properly:  ``` bash bhale-desktop master: curl http://localhost:8080/ ok ```  It would appear that some sort of servlet plumbing is only done as part of the `EmbeddedServletContainerAutoConfiguration` when it should be done more generically than that since there is a lot of value to using Boot, even in a non-embedded situation. </body>
		<created>2014-03-04 11:07:46</created>
		<closed>2014-03-04 16:07:01</closed>
	</bug>
	<bug>
		<id>417</id>
		<title>ErrorWrapperEmbeddedServletContainerFactory does not deal with exception subclasses</title>
		<body>http://stackoverflow.com/questions/5299169/how-does-tomcat-prioritize-which-type-of-error-page-to-use </body>
		<created>2014-03-04 01:38:41</created>
		<closed>2014-03-05 09:45:47</closed>
	</bug>
	<bug>
		<id>400</id>
		<title>Spring Security configuration options are picked up too early</title>
		<body>Have a look at this application:  https://github.com/michael-simons/biking2  I'll use it as a deployed executable jar file.  It contains an application.properties inside the deployed jar file at classpath:application.properties with 2 defaults:  security.user.name = biking2 security.user.password = biking2  these are picked up correct.  In production I have another application.properties parallel to the jar  ./biking2.jar ./application.properties  when i run java -jar biking2.jar, properties from those 2nd file are picked up but not the security.\* properties, those are still the properties from the jar file. </body>
		<created>2014-02-25 18:20:12</created>
		<closed>2014-02-26 15:00:36</closed>
	</bug>
	<bug>
		<id>389</id>
		<title>Gradle plugin stopped allowing a main class to be specified.</title>
		<body>See https://github.com/spring-guides/gs-uploading-files/issues/3 </body>
		<created>2014-02-22 08:20:45</created>
		<closed>2014-02-24 08:55:15</closed>
	</bug>
	<bug>
		<id>388</id>
		<title>Shutdown endpoint doesn't shutdown the servlet context completely</title>
		<body>I am trying to use ShutdownMvcEndpoint to invoke a shutdown on the application context. In this case I am using tomcat servlet container that processes the `/shutdown` request.  Apparently, the thread that processes the `/shutdown` request doesn't get stopped when the corresponding application context is closed. This leaves some of the threads still active.  To add more info, following is the output log for the threads that aren't cleaned up:  ``` Feb 21, 2014 5:09:23 PM org.apache.coyote.AbstractProtocol pause INFO: Pausing ProtocolHandler ["http-nio-9393"] Feb 21, 2014 5:09:23 PM org.apache.catalina.core.StandardService stopInternal INFO: Stopping service Tomcat Feb 21, 2014 5:09:23 PM org.apache.catalina.core.ApplicationContext log INFO: Destroying Spring FrameworkServlet 'dispatcherServlet' Feb 21, 2014 5:09:23 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: The web application [] appears to have started a thread named [Thread-7] but has failed to stop it. This is very likely to create a memory leak. Feb 21, 2014 5:09:23 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: The web application [] appears to have started a thread named [pool-6-thread-1] but has failed to stop it. This is very likely to create a memory leak. Feb 21, 2014 5:09:23 PM org.apache.catalina.loader.WebappClassLoader clearReferencesThreads SEVERE: The web application [] appears to have started a thread named [Tomcat-startStop-2] but has failed to stop it. This is very likely to create a memory leak. Feb 21, 2014 5:09:23 PM org.apache.coyote.AbstractProtocol stop INFO: Stopping ProtocolHandler ["http-nio-9393"] Feb 21, 2014 5:09:23 PM org.apache.coyote.AbstractProtocol destroy INFO: Destroying ProtocolHandler ["http-nio-9393"] ``` </body>
		<created>2014-02-22 01:25:42</created>
		<closed>2014-02-24 11:34:06</closed>
	</bug>
	<bug>
		<id>380</id>
		<title>SpringApplicationContextLoader (test loader) cannot be used with default configuration more than once</title>
		<body>Because of https://jira.springsource.org/browse/SPR-11455 it seems to be impossible to default the test configuration (the attempt that was made already fails because the `MergedContextConfiguration` is immutable and also used as a key in the context cache, so changing the context locations after it is created is futile).   User sees strange looking error messages as soon as the second attempt is made to default the context configuration because the first context is used instead. </body>
		<created>2014-02-20 11:29:33</created>
		<closed>2014-02-25 12:53:34</closed>
	</bug>
	<bug>
		<id>377</id>
		<title>The /shutdown endpoint appears to be open by default</title>
		<body>During the labs training it was noticed that `/shutdown` could be hit by default without any security. </body>
		<created>2014-02-19 21:25:05</created>
		<closed>2014-02-20 08:36:25</closed>
	</bug>
	<bug>
		<id>363</id>
		<title>Actuator application fails to start if Security Core but not Security Web is on classpath</title>
		<body>Spring Security is on runtime classpath due to transitive dependency. Do _not_ want to actually use spring security for web security.   Adding:  ``` @EnableAutoConfiguration(exclude=[SecurityAutoConfiguration.class]) ```  does not work as expected, and still seems to be attempting to activate security.  Please see: http://stackoverflow.com/questions/21710450/disable-spring-boot-autoconfiguration-for-transitive-dependencies  Minimal Reproducing Project: https://github.com/madorb/spring-boot-autoconfig-issue </body>
		<created>2014-02-17 15:50:41</created>
		<closed>2014-02-17 18:09:29</closed>
	</bug>
	<bug>
		<id>284</id>
		<title>java.io.IOException when running Spring Boot jar on Centos 6.4 / Open JDK 1.7.0</title>
		<body>We have a spring boot (0.5.0.M7) generated jar file. When we "mvn clean package" and then run ("java -jar target/my-app-camel-0.1.0.jar") on Windows 7 (64 bit with Oracle 64-bit Java SE JVM, 1.7.0_51-b13) it all works as expected:  ``` Code:       .   ____          _            __ _ _      /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \     ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \      \\/  ___)| |_)| | | | | || (_| |  ) ) ) )       '  |____| .__|_| |_|_| |_\__, | / / / /      =========|_|==============|___/=/_/_/_/      :: Spring Boot ::             (v0.5.0.M7)      10:47:25.324 [main] INFO  com.myco.myapp.Application - Starting Application on MYLAPTOP with PID 12260 (D:\Users\me\My Projects\Work\myco\myapp\src\myapp\my-app-camel\target\my-app-camel-0.1.0-SNAPSHOT.jar started by ME)     10:47:25.953 [main] INFO  o.s.b.f.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [META-INF/spring/camel-server.xml]     10:47:27.698 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e6d136c: startup date [Tue Jan 28 10:47:27 GMT 2014]; root of context hierarchy     ... ```  However, when we "mvn clean package" and then run ("java -jar target/my-app-camel-0.1.0.jar") on CentOS release 6.4 (Final) (64 bit OS, with OpenJDK 64-bit Java SE JVM, 1.7.0_51-b02) it fails:   ``` Code:     java.io.IOException: Unable to find ZIP central directory records after reading 206 bytes         at org.springframework.boot.loader.jar.CentralDirectoryEndRecord.&lt;init&gt;(CentralDirectoryEndRecord.java:64)         at org.springframework.boot.loader.jar.JarFile.loadJarEntries(JarFile.java:124)         at org.springframework.boot.loader.jar.JarFile.&lt;init&gt;(JarFile.java:120)         at org.springframework.boot.loader.jar.JarFile.getNestedJarFileFromFileEntry(JarFile.java:333)         at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:305)         at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:87)         at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchives(JarFileArchive.java:74)         at org.springframework.boot.loader.ExecutableArchiveLauncher.getClassPathArchives(ExecutableArchiveLauncher.java:78)         at org.springframework.boot.loader.Launcher.launch(Launcher.java:52)         at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:44) ```  NOTE: When I "unzip my-app-camel.jar" on the Centos command line it extracts fine.  This was originally reported at http://forum.spring.io/forum/spring-projects/boot/744230-java-io-ioexception-when-running-spring-boot-jar-on-centos-6-4-open-jdk-1-7-0 </body>
		<created>2014-01-28 16:08:57</created>
		<closed>2014-01-30 07:03:46</closed>
	</bug>
	<bug>
		<id>275</id>
		<title>/shutdown only applies to parent context and webapp doesn't stop</title>
		<body></body>
		<created>2014-01-27 16:26:48</created>
		<closed>2014-01-28 07:15:27</closed>
	</bug>
	<bug>
		<id>270</id>
		<title>PropertiesLauncher: current archive should be part of classpath if run with "java -jar"</title>
		<body>http://stackoverflow.com/questions/21339925/spring-boot-loading-jars-application-dependencies-and-external-file-system-jars </body>
		<created>2014-01-24 22:20:47</created>
		<closed>2014-02-25 12:38:34</closed>
	</bug>
	<bug>
		<id>229</id>
		<title>CLI shell barfs on CTRL-D</title>
		<body>Previously CTRL-D would exit the shell (it's a null line from the console reader). Now there's a NPE, so I'm guessing the null isn't being checked any more? </body>
		<created>2014-01-16 11:43:11</created>
		<closed>2014-01-16 17:32:03</closed>
	</bug>
	<bug>
		<id>225</id>
		<title>Gradle plugin doesn't allow reloading of static resources from bootRun</title>
		<body>See [SO question](http://stackoverflow.com/questions/21047061/spring-boot-gradle-plugin-bootrun-task-not-recognizing-when-static-files-are-gen) for more background. </body>
		<created>2014-01-14 19:42:03</created>
		<closed>2014-01-15 11:26:38</closed>
	</bug>
	<bug>
		<id>212</id>
		<title>Spring CLI performance degraded significantly</title>
		<body>Performance of the CLI is really really bad on master. Previously I was able to get sub-second startup:  &lt;pre&gt; java -jar  hint  0.32s user 0.05s system 136% cpu 0.271 total &lt;/pre&gt;   It is really important to get this performance back so that bash/zsh completion work nicely.  git bisect thinks this is to blame:  &lt;pre&gt; ➜  code (f5f41fe) git bisect good 033250195bd01bfdbce4257ed1de253f7a11d937 is the first bad commit commit 033250195bd01bfdbce4257ed1de253f7a11d937 Author: Dave Syer &lt;dsyer@gopivotal.com&gt; Date:   Tue Dec 31 14:35:51 2013 +0000      Allow user to specify classLoader as loader property          PropertiesLauncher now supports creating its own class loader     from looader.classLoader property. It will succeed if the     implementation specified has a default constructor or one     that takes a parent class loader, or one that takes a URL[]     and a parent class loader (like URLClassLoader).  :040000 040000 3ac0bdba6fd580a13b010ea8dbc01abadf978777 900c881fb3359e969922e9bb156a9c2078ceff96 M  spring-boot-cli :040000 040000 1c5409d5b8d3b637451092e5f09e920530a1a1d2 a4f9e216dfa4789f08bfdf493bfcb6a568e3cc37 M  spring-boot-tools &lt;/pre&gt; </body>
		<created>2014-01-11 00:22:33</created>
		<closed>2014-01-14 14:11:16</closed>
	</bug>
	<bug>
		<id>204</id>
		<title>JobLoader cannot be autowired when Batch is on classpath but @EnableBatchProcessing not used</title>
		<body></body>
		<created>2014-01-09 16:50:58</created>
		<closed>2014-01-09 17:50:47</closed>
	</bug>
	<bug>
		<id>189</id>
		<title>JpaTransactionManager not created when needed</title>
		<body>Commit d39a8360 added a `@Conditional` guarding the `JpaTransactionManager` but failed to take into account the possibility that a `DataSourceTransactionManager` might already have been autoconfigured.  I can see a test for this already and it passes, so need to do some more research on what happened [here](http://stackoverflow.com/questions/20918410/upgrading-from-spring-boot-starter-data-jpa-0-5-0-m6-to-0-5-0-build-snapshot-cau). </body>
		<created>2014-01-05 10:09:38</created>
		<closed>2014-01-06 10:42:01</closed>
	</bug>
	<bug>
		<id>177</id>
		<title>CLI application will not start unless it can access `repo.spring.io`</title>
		<body>Currently, if you try and start a CLI application without an external network connection, the following failure appears.  ``` org.springframework.boot.cli.compiler.grape.DependencyResolutionFailedException: org.eclipse.aether.resolution.DependencyResolutionException: Failed to collect dependencies at com.gopivotal.cloudfoundry.test:core:jar:1.0.0.BUILD-SNAPSHOT     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.resolve(AetherGrapeEngine.java:231)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.grab(AetherGrapeEngine.java:153)     at groovy.grape.Grape.grab(Grape.java:137)     at groovy.grape.GrabAnnotationTransformation.visit(GrabAnnotationTransformation.java:311)     at org.codehaus.groovy.transform.ASTTransformationVisitor$3.call(ASTTransformationVisitor.java:319)     at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:912)     at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:574)     at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:550)     at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:527)     at org.springframework.boot.cli.compiler.GroovyCompiler.compile(GroovyCompiler.java:197)     at org.springframework.boot.cli.compiler.GroovyCompiler.sources(GroovyCompiler.java:163)     at org.springframework.boot.cli.runner.SpringApplicationRunner.compileAndRun(SpringApplicationRunner.java:81)     at org.springframework.boot.cli.command.RunCommand$RunOptionHandler.run(RunCommand.java:97)     at org.springframework.boot.cli.command.OptionHandler.run(OptionHandler.java:88)     at org.springframework.boot.cli.command.OptionParsingCommand.run(OptionParsingCommand.java:57)     at org.springframework.boot.cli.SpringCli.run(SpringCli.java:135)     at org.springframework.boot.cli.SpringCli.runAndHandleErrors(SpringCli.java:91)     at org.springframework.boot.cli.SpringCli.main(SpringCli.java:369)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53)     at java.lang.Thread.run(Thread.java:724) Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Failed to collect dependencies at com.gopivotal.cloudfoundry.test:core:jar:1.0.0.BUILD-SNAPSHOT     at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:380)     at org.springframework.boot.cli.compiler.grape.AetherGrapeEngine.resolve(AetherGrapeEngine.java:226)     ... 23 more Caused by: org.eclipse.aether.collection.DependencyCollectionException: Failed to collect dependencies at com.gopivotal.cloudfoundry.test:core:jar:1.0.0.BUILD-SNAPSHOT     at org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:298)     at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:342)     ... 24 more Caused by: org.eclipse.aether.resolution.ArtifactDescriptorException: Failed to read artifact descriptor for com.gopivotal.cloudfoundry.test:core:jar:1.0.0.BUILD-SNAPSHOT     at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.loadPom(DefaultArtifactDescriptorReader.java:329)     at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.readArtifactDescriptor(DefaultArtifactDescriptorReader.java:217)     at org.eclipse.aether.internal.impl.DefaultDependencyCollector.process(DefaultDependencyCollector.java:466)     at org.eclipse.aether.internal.impl.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:261)     ... 25 more Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not transfer artifact com.gopivotal.cloudfoundry.test:core:pom:1.0.0.BUILD-SNAPSHOT from/to spring-snapshot (http://repo.spring.io/snapshot): repo.spring.io     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:460)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:262)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifact(DefaultArtifactResolver.java:239)     at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.loadPom(DefaultArtifactDescriptorReader.java:314)     ... 28 more Caused by: org.eclipse.aether.transfer.ArtifactTransferException: Could not transfer artifact com.gopivotal.cloudfoundry.test:core:pom:1.0.0.BUILD-SNAPSHOT from/to spring-snapshot (http://repo.spring.io/snapshot): repo.spring.io     at org.eclipse.aether.connector.basic.ArtifactTransportListener.transferFailed(ArtifactTransportListener.java:43)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:342)     at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$DirectExecutor.execute(BasicRepositoryConnector.java:649)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector.get(BasicRepositoryConnector.java:247)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.performDownloads(DefaultArtifactResolver.java:536)     at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:437)     ... 31 more Caused by: java.net.UnknownHostException: repo.spring.io     at java.net.InetAddress.getAllByName0(InetAddress.java:1243)     at java.net.InetAddress.getAllByName(InetAddress.java:1155)     at java.net.InetAddress.getAllByName(InetAddress.java:1091)     at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)     at org.apache.http.impl.conn.DefaultClientConnectionOperator.resolveHostname(DefaultClientConnectionOperator.java:260)     at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:160)     at org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:304)     at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)     at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)     at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)     at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:72)     at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)     at org.apache.http.impl.client.DecompressingHttpClient.execute(DecompressingHttpClient.java:158)     at org.eclipse.aether.transport.http.HttpTransporter.execute(HttpTransporter.java:294)     at org.eclipse.aether.transport.http.HttpTransporter.implGet(HttpTransporter.java:250)     at org.eclipse.aether.spi.connector.transport.AbstractTransporter.get(AbstractTransporter.java:59)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$GetTaskRunner.runTask(BasicRepositoryConnector.java:418)     at org.eclipse.aether.connector.basic.BasicRepositoryConnector$TaskRunner.run(BasicRepositoryConnector.java:337)     ... 36 more  1 error ```  This would indicate that CLI applications will not start unless they can access `repo.spring.io`.  CLI application should start gracefully without access to that host. </body>
		<created>2013-12-20 14:25:43</created>
		<closed>2014-01-06 15:14:41</closed>
	</bug>
	<bug>
		<id>171</id>
		<title>Jolokia servlet is not tied to the management server</title>
		<body>The `JolokiaAutoConfiguration` registers a `ServletRegistrationBean` to expose the `AgentServlet`. In addition there is a `JolokiaEndpoint` that allows security etc to be configured.  It looks like this approach will work when the management server is running on the main port as the main server, but may break if the user chooses a different management port. It also looks like changing the port may expose the `AgentServlet` without any security, possibly posing a security threat. </body>
		<created>2013-12-17 17:48:00</created>
		<closed>2013-12-21 09:06:07</closed>
	</bug>
	<bug>
		<id>169</id>
		<title>Exception parsing VCAP_SERVICES</title>
		<body>When pushing the spring-boot-sample-jetty app to cloud foundry and binding it to a new relic service I get the following error (which appears to be benign) in the logs:  23:58:59.438 [main] DEBUG o.s.c.e.PropertySourcesPropertyResolver - Found key 'VCAP_SERVICES' in [systemEnvironment] with type [String] and value '{"newrelic-n/a":[{"name":"newrelic","label":"newrelic-n/a","tags":[],"plan":"standard","credentials":{"licenseKey":"xxxx"}}]}' 23:58:59.447 [main] ERROR o.s.b.c.i.VcapApplicationContextInitializer - Could not parse VCAP_SERVICES java.lang.ClassCastException: java.lang.String cannot be cast to java.util.List     at org.springframework.boot.context.initializer.VcapApplicationContextInitializer.getPropertiesFromServices(VcapApplicationContextInitializer.java:183) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.context.initializer.VcapApplicationContextInitializer.initialize(VcapApplicationContextInitializer.java:127) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:433) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:293) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:784) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.SpringApplication.run(SpringApplication.java:773) [spring-boot-0.5.0.BUILD-SNAPSHOT.jar!/:0.5.0.BUILD-SNAPSHOT]     at org.springframework.boot.sample.jetty.SampleJettyApplication.main(SampleJettyApplication.java:30) [app/:na]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_45]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_45]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_45]     at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_45]     at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53) [app/:na]     at java.lang.Thread.run(Thread.java:744) [na:1.7.0_45] </body>
		<created>2013-12-17 00:03:28</created>
		<closed>2013-12-17 09:54:23</closed>
	</bug>
	<bug>
		<id>164</id>
		<title>Can't build this project on windows by eclipse or maven</title>
		<body>SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. [INFO] Scanning for projects... [INFO]   [INFO] ------------------------------------------------------------------------ [INFO] Building spring-boot-loader 0.5.0.BUILD-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-enforcer-plugin:1.3.1:enforce-once (enforce-rules) @ spring-boot-loader --- [WARNING] enforcer:enforce-once is deprecated. Use enforcer:enforce instead. See MENFORCER-11/MENFORCER-12 for more information. [INFO]  [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spring-boot-loader --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] skip non existing resourceDirectory D:\ProgramData\Cygwin\home\Administrator\git\spring-boot\spring-boot-tools\spring-boot-loader\src\main\resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ spring-boot-loader --- [INFO] Nothing to compile - all classes are up to date [INFO]  [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spring-boot-loader --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 3 resources [INFO]  [INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ spring-boot-loader --- [INFO] Nothing to compile - all classes are up to date [INFO]  [INFO] --- maven-surefire-plugin:2.15:test (default-test) @ spring-boot-loader --- [INFO] Surefire report directory: D:\ProgramData\Cygwin\home\Administrator\git\spring-boot\spring-boot-tools\spring-boot-loader\target\surefire-reports  --- ##  T E S T S  Running org.springframework.boot.loader.archive.ExplodedArchiveTests Tests run: 6, Failures: 1, Errors: 1, Skipped: 0, Time elapsed: 5.219 sec &lt;&lt;&lt; FAILURE! - in org.springframework.boot.loader.archive.ExplodedArchiveTests getManifest(org.springframework.boot.loader.archive.ExplodedArchiveTests)  Time elapsed: 5.07 sec  &lt;&lt;&lt; ERROR! java.lang.NullPointerException: null     at org.springframework.boot.loader.archive.ExplodedArchiveTests.getManifest(ExplodedArchiveTests.java:91)  getUrl(org.springframework.boot.loader.archive.ExplodedArchiveTests)  Time elapsed: 0.025 sec  &lt;&lt;&lt; FAILURE! java.lang.AssertionError:  Expected: "file:/C:/Users/ADMINI~1/AppData/Local/Temp/junit2665003493174653596/junit5554992355841228097/"      but: was "file:C:\Users\ADMINI~1\AppData\Local\Temp\junit2665003493174653596\junit5554992355841228097\"     at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)     at org.junit.Assert.assertThat(Assert.java:865)     at org.junit.Assert.assertThat(Assert.java:832)     at org.springframework.boot.loader.archive.ExplodedArchiveTests.getUrl(ExplodedArchiveTests.java:103)  Running org.springframework.boot.loader.archive.JarFileArchiveTests Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec - in org.springframework.boot.loader.archive.JarFileArchiveTests Running org.springframework.boot.loader.AsciiBytesTests Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in org.springframework.boot.loader.AsciiBytesTests Running org.springframework.boot.loader.data.RandomAccessDataFileTests Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.134 sec - in org.springframework.boot.loader.data.RandomAccessDataFileTests Running org.springframework.boot.loader.jar.RandomAccessJarFileTests Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.958 sec - in org.springframework.boot.loader.jar.RandomAccessJarFileTests Running org.springframework.boot.loader.PropertiesLauncherTests ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:application.properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [etc/, lib/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher getMainClass INFO: Main class from environment: foo.Bar ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:foo.properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [etc/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher getMainClass INFO: Main class from properties: my.Application 09:16:11.433 [main] DEBUG o.s.test.util.ReflectionTestUtils - Getting field [paths] from target [org.springframework.boot.loader.PropertiesLauncher@5c8b9a98] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:application.properties Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.225 sec - in org.springframework.boot.loader.PropertiesLauncherTests ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [etc/, lib/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:application.properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Adding resolved properties to System properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [etc/, lib/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:application.properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [etc/, lib/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher getMainClass INFO: Main class from properties: demo.Application ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializeProperties INFO: Found: classpath:bar.properties ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher initializePaths INFO: Nested archive paths: [lib/] ʮ���� 16, 2013 9:16:11 ���� org.springframework.boot.loader.PropertiesLauncher getMainClass INFO: Main class from properties: my.BarApplication Running org.springframework.boot.loader.util.SystemPropertyUtilsTests Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.springframework.boot.loader.util.SystemPropertyUtilsTests  Results :  Failed tests:    ExplodedArchiveTests.getUrl:103  Expected: "file:/C:/Users/ADMINI~1/AppData/Local/Temp/junit2665003493174653596/junit5554992355841228097/"      but: was "file:C:\Users\ADMINI~1\AppData\Local\Temp\junit2665003493174653596\junit5554992355841228097\"  Tests in error:    ExplodedArchiveTests.getManifest:91 NullPointer  Tests run: 81, Failures: 1, Errors: 1, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 9.276s [INFO] Finished at: Mon Dec 16 09:16:11 CST 2013 [INFO] Final Memory: 13M/174M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.15:test (default-test) on project spring-boot-loader: There are test failures. [ERROR]  [ERROR] Please refer to D:\ProgramData\Cygwin\home\Administrator\git\spring-boot\spring-boot-tools\spring-boot-loader\target\surefire-reports for the individual test results. [ERROR] -&gt; [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException </body>
		<created>2013-12-16 01:32:35</created>
		<closed>2013-12-18 14:56:11</closed>
	</bug>
	<bug>
		<id>161</id>
		<title>spring-boot sample project fails to start if source jar is in classpath</title>
		<body>if `spring-boot-autoconfigure` source jar is added to classpath along with `spring-boot-autoconfigure` binary jar, spring-boot sample project fails to start with hard to understand error message:  ``` Exception in thread "main" java.lang.IllegalStateException: Could not register object [org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer$AutoConfigurationReportLogger@2fd6b6c7] under bean name 'autoConfigurationReportLogger': there is already object [org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer$AutoConfigurationReportLogger@5bfa9431] bound     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.registerSingleton(DefaultSingletonBeanRegistry.java:129)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerSingleton(DefaultListableBeanFactory.java:778)     at org.springframework.boot.autoconfigure.AutoConfigurationReportLoggingInitializer.initialize(AutoConfigurationReportLoggingInitializer.java:60)     at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:403)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:287)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:749)     at org.springframework.boot.SpringApplication.run(SpringApplication.java:738)     at ru.yandex.salmon.SalmonMain.main(SalmonMain.java:22)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:491)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) ```  It fails due to the fact that spring.factories of spring-boot-configuration is added twice to the classpath.  This problem is easy to detect: if two objects of the same type added to SpringApplication.initializers, then spring-boot should either:  ``` print nice diagnostics message or just quietly ignore second initializer ``` </body>
		<created>2013-12-11 20:47:00</created>
		<closed>2013-12-18 17:57:44</closed>
	</bug>
	<bug>
		<id>151</id>
		<title>SecurityAutoConfiguration causes early instantiation of JPA</title>
		<body>Because `SecurityAutoConfiguration` uses `@ConditionalOnMissngBean(annotation=...)` it triggers a call to `BeanFactory.getBeanNamesForAnnotation()` really early in the application context lifecycle. This in turn triggers instantiation of `HibernateJpaAutoConfiguration` (if present and active) in order to extract the types of its `@Beans`. The instantiation is too early for the config class to have been proxied yet, so it results in a singleton registration for that `@Configuration` in its "bare" form. This leads to problems later: in this case the transaction manager cannot be instantiated because it depends on the `EntityManagerFactory` which hasn't been initialized (because it is created using a bare factory method not the proxy that adds lifecycle callbacks).  Stackoverflow reference: http://stackoverflow.com/questions/20450326/adding-spring-boot-starter-security-to-spring-boot-application-causes-error-ent </body>
		<created>2013-12-09 09:47:42</created>
		<closed>2013-12-09 09:49:30</closed>
	</bug>
	<bug>
		<id>145</id>
		<title>AutoConfigurationReportLoggingInitializer error handling not defensive enough</title>
		<body>You can get an NPE when `SpringApplication` is trying to report errors if it hasn't got very  far in its lifecycle yet. See the example [here](https://github.com/dturanski/boot-yaml-issue) </body>
		<created>2013-12-04 22:25:50</created>
		<closed>2013-12-05 08:55:23</closed>
	</bug>
	<bug>
		<id>139</id>
		<title>Gradle plugin still includes *Launcher classes with Layout.NONE</title>
		<body></body>
		<created>2013-12-02 13:12:06</created>
		<closed>2013-12-02 14:11:37</closed>
	</bug>
	<bug>
		<id>136</id>
		<title>Spring boot cli ignores http proxy settings</title>
		<body>Spring boot cli fails when trying to run the simple groovy web app example behind a corporate proxy. I'm having the same issue as the author of this post: http://forum.spring.io/forum/spring-projects/boot/726134-spring-boot-cli-proxy-server-configuration. Tried from Bash after 'export JAVA_OPTS="-Dhttp.proxyHost=... -Dhttp.proxyPort=..."' but the started Java process ignores these settings.  </body>
		<created>2013-11-26 23:04:24</created>
		<closed>2013-11-29 10:16:57</closed>
	</bug>
	<bug>
		<id>122</id>
		<title>spring-boot-starter-amqp requires a &lt;version&gt;</title>
		<body>When using spring-boot-starter-amqp, it won't resolve it's version from parent spring-boot-starter-parent. </body>
		<created>2013-11-18 22:43:59</created>
		<closed>2013-11-19 13:32:15</closed>
	</bug>
	<bug>
		<id>120</id>
		<title>application.properties ignored in simple war deployment </title>
		<body>If i convert a webapp from a runable jar into a war file that can run in any standard servlet container - following the http://spring.io/guides/gs/convert-jar-to-war/ guide. The application.properties is not considered anymore.  Sample App https://github.com/oliver-schoenherr/spring-boot-issue-sample throws exception at @Value(${message}): "could not resolve placeholder".  ``` String SampleController.message; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'message' in string value "${message}" ``` </body>
		<created>2013-11-17 12:10:18</created>
		<closed>2013-11-18 10:00:26</closed>
	</bug>
	<bug>
		<id>115</id>
		<title>Groovy CLI apps do not have current directory on application classpath</title>
		<body>Groovy CLI apps do not have current directory on application classpath. It used to work in M5 and is bust in M6. Workaround is easy (add "-cp .") on the command line. </body>
		<created>2013-11-14 12:16:19</created>
		<closed>2013-12-04 11:14:10</closed>
	</bug>
</bugs>
