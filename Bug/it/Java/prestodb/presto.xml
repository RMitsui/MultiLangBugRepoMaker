<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>14807</id>
		<title>Session value is not correct, the bahavior of server and client is not consistent</title>
		<body>presto version: 0.236  case 1:  TZ=UTC java -jar presto-cli-*-executable.jar  --server http://localhost:8080  --user admin  --session execution_policy="a+1" --execute "SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a)"  The request http header is as following:  X-Presto-User: admin User-Agent: StatementClientV1/0.236xx X-Presto-Source: presto-cli X-Presto-Time-Zone: UTC X-Presto-Language: en-US X-Presto-Session: execution_policy=a+1 X-Presto-Transaction-Id: NONE Content-Type: text/plain; charset=UTF-8 Content-Length: 63 Host: localhost:8080 Connection: keep-alive Accept-Encoding: gzip   case 2:  TZ=UTC java -jar presto-cli-*-executable.jar  --server http://localhost:8080  --user admin  presto&gt; set session execution_policy='a+1'; SET SESSION presto&gt; SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a);  The request http header is as following:  X-Presto-User: admin User-Agent: StatementClientV1/0.236xx X-Presto-Source: presto-cli X-Presto-Time-Zone: UTC X-Presto-Language: en-US X-Presto-Session: execution_policy=a%2B1 X-Presto-Transaction-Id: NONE Content-Type: text/plain; charset=UTF-8 Content-Length: 63 Host: localhost:8080 Connection: keep-alive Accept-Encoding: gzip  conclusion: X-Presto-Session is not same, and on web ui, the case 2 also shows session incorrectly.  &lt;img width="573" alt="Screen Shot 2020-07-08 at 10 57 55 PM" src="https://user-images.githubusercontent.com/30369486/86934645-84650e00-c16e-11ea-9cfc-9b1965317a67.png"&gt;      Analysis:  For case 1, client does not encode session value in presto-cli. However, the second case, in ExecutingStatementResource.java, server 'urlEncode' the session value when query "set session ...." comes, but does not decode the session value in HttpRequestSessionContext.java when query "SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a)" comes.  I know the session value "a+1" is invalid, and in most of cases the value will be correct due to no special character involves. However, the behavior at server side and client side is indeed not consistent. Could anyone help to fix it? By the way, Does any other client also need a corresponding fix?  like any code need to be changed in https://github.com/prestodb/presto-go-client  </body>
		<created>2020-07-08 15:02:24</created>
		<closed>2020-07-14 14:32:12</closed>
	</bug>
	<bug>
		<id>14787</id>
		<title>max_by and min_by queries fail with PageFile in LBM</title>
		<body>In large batch mode with presto native format,  queries with `max_by` or `min_by ` sometimes fail, this is data dependent and not able to reproduce without customer data.  ``` create table t1(nationkey int,  bool_features map&lt;varchar, boolean&gt;); insert into t1 values (1, map(ARRAY['1','3'], ARRAY[True, False])); select max_by(bool_features, nationkey) from t1 group by nationkey; ```  Stack trace: ``` java.lang.IllegalArgumentException at com.google.common.base.Preconditions.checkArgument(Preconditions.java:127) at com.facebook.presto.operator.aggregation.minmaxby.KeyAndBlockPositionValueStateSerializer.deserialize(KeyAndBlockPositionValueStateSerializer.java:79) at com.facebook.presto.operator.aggregation.minmaxby.KeyAndBlockPositionValueStateSerializer.deserialize(KeyAndBlockPositionValueStateSerializer.java:30) at com.facebook.presto.$gen.Map_varchar_boolean_Map_varchar_boolean_BigintMaxByGroupedAccumulator_20200627_094758_5454.addIntermediate(Unknown Source) at com.facebook.presto.operator.aggregation.builder.InMemoryHashAggregationBuilder$Aggregator.processPage(InMemoryHashAggregationBuilder.java:432) at com.facebook.presto.operator.aggregation.builder.InMemoryHashAggregationBuilder.lambda$processPage$2(InMemoryHashAggregationBuilder.java:170) at com.facebook.presto.operator.TransformWork.process(TransformWork.java:44) at com.facebook.presto.operator.HashAggregationOperator.addInput(HashAggregationOperator.java:408) at com.facebook.presto.operator.Driver.processInternal(Driver.java:387) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:284) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:672) at com.facebook.presto.operator.Driver.processFor(Driver.java:277) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1077) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:545) at com.facebook.presto.$gen.Presto_0_239_SNAPSHOT_ca60019____20200627_073828_1.run(Unknown Source) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844) ```</body>
		<created>2020-07-06 19:14:09</created>
		<closed>2020-07-10 15:05:33</closed>
	</bug>
	<bug>
		<id>14750</id>
		<title>Result is wrong for function classification_miss_rate for version 0.237 and earlier</title>
		<body>Due to wrong arguments passed to constructor method of `BucketResult`,  the result from aggregation function `classification_miss_rate` is wrong in version 0.237 and earlier.  Fixed in https://github.com/prestodb/presto/pull/14740</body>
		<created>2020-06-30 14:37:45</created>
		<closed>2020-06-30 17:55:43</closed>
	</bug>
	<bug>
		<id>14731</id>
		<title>Result is wrong for function classification_fall_out for version 0.237 and earlier</title>
		<body>The numerator of formula should be false positive for classification aggregate function https://prestodb.io/docs/current/functions/aggregate.html</body>
		<created>2020-06-26 21:54:43</created>
		<closed>2020-06-30 17:55:43</closed>
	</bug>
	<bug>
		<id>14705</id>
		<title>Some queries that end in User Error cause queuedQueries metric to be inaccurate</title>
		<body>I recently discovered that the queued queries metric reported through JMX by our Presto cluster is wildly inaccurate: reported value of nearly 4k when the Cluster Overview UI shows 0 queued queries.  After a restart to zero it out, it seems like the inaccuracies in reported queuedQueries value track with queries that end in User Error. Looking at the source, it seems plausible that the query was cancelled before it triggered the queryStarted() method of QueryManagerStats, and thus the counter is not getting decremented.  Please let me know if I can be of any further help in addressing this problem ![Screen Shot 2020-06-23 at 11 40 55 AM](https://user-images.githubusercontent.com/2699748/85425532-4ac5bd80-b547-11ea-90ea-3eb8e345ffb5.png) </body>
		<created>2020-06-23 15:47:28</created>
		<closed>2020-06-30 22:37:49</closed>
	</bug>
	<bug>
		<id>14494</id>
		<title>`ANALYZE TABLE` fails on tables with structs</title>
		<body>Starting with version 0.225 `ANALYZE TABLE` command on Hive connector fails for tables with struct columns. Fails also on current v0.235.  &gt; java.lang.IllegalArgumentException: unsupported type: struct&lt;cause:string,is_enabled:boolean,created_at:date,disable_date:date,processed_last:date,processed_since:date&gt; at com.google.common.base.Preconditions.checkArgument(Preconditions.java:210) at com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil.createMetastoreColumnStatistics(ThriftMetastoreUtil.java:792) at com.facebook.presto.hive.metastore.thrift.ThriftHiveMetastore.lambda$updateTableStatistics$18(ThriftHiveMetastore.java:412) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566) at com.facebook.presto.hive.metastore.thrift.ThriftHiveMetastore.updateTableStatistics(ThriftHiveMetastore.java:413) at com.facebook.presto.hive.metastore.thrift.BridgingHiveMetastore.updateTableStatistics(BridgingHiveMetastore.java:112) at com.facebook.presto.hive.metastore.CachingHiveMetastore.updateTableStatistics(CachingHiveMetastore.java:338) at com.facebook.presto.hive.metastore.CachingHiveMetastore.updateTableStatistics(CachingHiveMetastore.java:338) at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.lambda$setTableStatistics$6(SemiTransactionalHiveMetastore.java:322) at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.commit(SemiTransactionalHiveMetastore.java:905) at com.facebook.presto.hive.HiveMetadata.commit(HiveMetadata.java:2518) at com.facebook.presto.hive.HiveConnector.commit(HiveConnector.java:211) at com.facebook.presto.transaction.InMemoryTransactionManager$TransactionMetadata$ConnectorTransactionMetadata.commit(InMemoryTransactionManager.java:601) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:125) at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:57) at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:78) at io.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)</body>
		<created>2020-05-07 10:47:06</created>
		<closed>2020-05-19 18:04:45</closed>
	</bug>
	<bug>
		<id>14470</id>
		<title>Length of the field blocks differ in Structs field resulting in a java.lang.IllegalArgumentException</title>
		<body>``` com.facebook.presto.spi.PrestoException: Failed to read ORC file: at com.facebook.presto.hive.orc.OrcSelectivePageSource.getNextPage(OrcSelectivePageSource.java:100) at com.facebook.presto.operator.ScanFilterAndProjectOperator.processPageSource(ScanFilterAndProjectOperator.java:272) at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:237) at com.facebook.presto.operator.Driver.processInternal(Driver.java:379) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:283) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:675) at com.facebook.presto.operator.Driver.processFor(Driver.java:276)  Caused by: java.lang.IllegalArgumentException: length of field blocks differ: field 0: 232, block 1: 34 at com.facebook.presto.spi.block.RowBlock.validateConstructorArguments(RowBlock.java:93) at com.facebook.presto.spi.block.RowBlock.fromFieldBlocks(RowBlock.java:52) at com.facebook.presto.orc.reader.StructSelectiveStreamReader.getBlockView(StructSelectiveStreamReader.java:545) at com.facebook.presto.orc.reader.StructSelectiveStreamReader.getBlockView(StructSelectiveStreamReader.java:540) at com.facebook.presto.orc.reader.StructSelectiveStreamReader.getBlockView(StructSelectiveStreamReader.java:540) ```</body>
		<created>2020-05-03 08:15:55</created>
		<closed>2020-05-05 13:39:18</closed>
	</bug>
	<bug>
		<id>14469</id>
		<title>Integer overflow exception when creating a BigIntValue Filter</title>
		<body>For an "IN" expression like `IN(Long.MIN_VALUE, 1, 10)`, since the max - min falls in out of range of int we will not be able to use BigintValuesUsingBitmask as the number of bits is max - min + 1. The check for an valid integer was incomplete where we are not checking if its less than the Integer.MIN_VALUE which can happen because of long wrap around  ``` Caused by: java.lang.ArithmeticException: integer overflow at java.base/java.lang.Math.toIntExact(Math.java:1071) at com.facebook.presto.orc.TupleDomainFilter$BigintValuesUsingBitmask.&lt;init&gt;(TupleDomainFilter.java:636) at com.facebook.presto.orc.TupleDomainFilter$BigintValuesUsingBitmask.of(TupleDomainFilter.java:645) at com.facebook.presto.orc.TupleDomainFilterUtils.toBigintValues(TupleDomainFilterUtils.java:354) at com.facebook.presto.orc.TupleDomainFilterUtils.toFilter(TupleDomainFilterUtils.java:112) at com.facebook.presto.hive.orc.TupleDomainFilterCache.lambda$new$0(TupleDomainFilterCache.java:35) ``` </body>
		<created>2020-05-02 08:26:40</created>
		<closed>2020-05-05 19:11:58</closed>
	</bug>
	<bug>
		<id>14401</id>
		<title>JSON Format reader does not fetch compression from source system</title>
		<body>While adding the support for ZSTD write(https://github.com/prestodb/presto/pull/14396), we removed compression usage for zero row file creation. However with this change, JSON format sources started failing, as it seems JSON reader can not fetch encoding information from the source system, hence it uses it from the configuration.  So when we change the encoding configuration at run time, reading JSON format files fails, as it uses the wrong encoding to read.   How to reproduce: 1. Remove the JSON Format check from the HiveZeroRowFileCreator.generateZeroRowFile 2. Use None compression encoding for JSON format. 3. Create Table CREATE TABLE hive.tpch.partition6_json( orderkey bigint, linenumber integer ) WITH ( format = 'JSON', partitioned_by = ARRAY['linenumber'], bucketed_by=ARRAY['orderkey'], bucket_count=4); 4. insert into tpch.partition6_json values(1,1); 5. Select * from partition6_json; The above steps should fail the select query and throw following stack trace:  ``` com.facebook.presto.spi.PrestoException: Unexpected end of input stream at com.facebook.presto.hive.GenericHiveRecordCursor.advanceNextPosition(GenericHiveRecordCursor.java:227) at com.facebook.presto.hive.HiveRecordCursor.advanceNextPosition(HiveRecordCursor.java:175) at com.facebook.presto.spi.RecordPageSource.getNextPage(RecordPageSource.java:100) at com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:251) at com.facebook.presto.operator.Driver.processInternal(Driver.java:381) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:283) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:677) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1077) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:545) at com.facebook.presto.$gen.Presto_null__testversion____20200416_041640_2.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.io.EOFException: Unexpected end of input stream at org.apache.hadoop.io.compress.DecompressorStream.decompress(DecompressorStream.java:145) at org.apache.hadoop.io.compress.DecompressorStream.read(DecompressorStream.java:85) at java.io.InputStream.read(InputStream.java:101) at org.apache.hadoop.util.LineReader.fillBuffer(LineReader.java:200) at org.apache.hadoop.util.LineReader.readDefaultLine(LineReader.java:238) at org.apache.hadoop.util.LineReader.readLine(LineReader.java:193) at org.apache.hadoop.mapred.LineRecordReader.skipUtfByteOrderMark(LineRecordReader.java:208) at org.apache.hadoop.mapred.LineRecordReader.next(LineRecordReader.java:246) at org.apache.hadoop.mapred.LineRecordReader.next(LineRecordReader.java:48) at com.facebook.presto.hive.GenericHiveRecordCursor.advanceNextPosition(GenericHiveRecordCursor.java:209) ```</body>
		<created>2020-04-16 21:16:03</created>
		<closed>2020-06-27 03:10:13</closed>
	</bug>
	<bug>
		<id>14400</id>
		<title>Presto with hive query fails when column name with spaces in it used in where clause</title>
		<body>### Summary Given a simple table in Hive with a column name that has spaces in it, that column name cannot successfully be used in a where clause on a select. The stack trace for the failed query shows a message of `Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `com.facebook.presto.spi.Subfield`, problem: Invalid subfield path: 'spaces‸ here'` ```sh use hive.default; create table test_failure ("spaces here" varchar); insert into test_failure values ('first row'); select * from test_failure;  spaces here -------------  first row (1 row)  select * from test_failure where "spaces here" = 'first row';  Query 20200416_172844_11301_rfm7b, FAILED, 2 nodes Splits: 16 total, 0 done (0.00%) 0:00 [0 rows, 0B] [0 rows/s, 0B/s]  Query 20200416_172844_11301_rfm7b failed: Unexpected response from &lt;node hostname&gt;/v1/task/20200416_172844_11301_rfm7b.1.0.0?summarize ```  ### Expected behavior Example query above should return the only row that matches in the table, similar to how the first query with no where clause handles it. In general, column names with spaces or other special characters in them should be useable in where clauses.  ### Other relevant information Presto version: 0.230-3B9AF8C Hive standalone metastore version: 3.0.0 Hive and Presto storage backend: S3 Stack trace from query failure summary: ``` com.facebook.presto.spi.PrestoException: Unexpected response from &lt;node hostname&gt;/v1/task/20200416_172200_11224_rfm7b.1.0.0?summarize at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:69) at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:30) at com.google.common.util.concurrent.Futures$CallbackListener.run(Futures.java:1058) at com.facebook.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.IllegalArgumentException: Unable to create class com.facebook.presto.execution.TaskInfo from JSON response: [com.facebook.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest at com.facebook.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:156) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156) at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156) at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1091) at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874) at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271) at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:97) at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:80) at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:74) at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:92) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:133) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104) at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268) at org.glassfish.jersey.internal.Errors.process(Errors.java:316) at org.glassfish.jersey.internal.Errors.process(Errors.java:298) at org.glassfish.jersey.internal.Errors.process(Errors.java:268) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:867) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623) at com.facebook.presto.server.security.AuthenticationFilter.doFilter(AuthenticationFilter.java:69) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at com.facebook.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at com.facebook.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:51) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:703) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:174) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:61) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.Server.handle(Server.java:502) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:364) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683) at java.lang.Thread.run(Thread.java:748) Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `com.facebook.presto.spi.Subfield`, problem: Invalid subfield path: 'spaces‸ here'  at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 1271] (through reference chain: com.facebook.presto.server.TaskUpdateRequest["fragment"]-&gt;com.facebook.presto.sql.planner.PlanFragment["root"]-&gt;com.facebook.presto.spi.plan.FilterNode["source"]-&gt;com.facebook.presto.spi.plan.TableScanNode["table"]-&gt;com.facebook.presto.spi.TableHandle["connectorTableLayout"]-&gt;com.facebook.presto.hive.HiveTableLayoutHandle["domainPredicate"]-&gt;com.facebook.presto.spi.predicate.TupleDomain["columnDomains"]-&gt;java.util.ArrayList[0]-&gt;com.facebook.presto.spi.predicate.TupleDomain$ColumnDomain["column"]) at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67) at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1608) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException(StdValueInstantiator.java:484) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem(StdValueInstantiator.java:503) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:329) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1373) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:171) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:185) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:193) at com.facebook.presto.metadata.AbstractTypedJacksonModule$InternalTypeDeserializer.deserialize(AbstractTypedJacksonModule.java:87) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:185) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:527) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:527) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:185) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3984) at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2342) at com.facebook.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:143) ... 69 more Caused by: com.facebook.presto.spi.PrestoException: Invalid subfield path: 'spaces‸ here' at com.facebook.presto.spi.SubfieldTokenizer.invalidSubfieldPath(SubfieldTokenizer.java:262) at com.facebook.presto.spi.SubfieldTokenizer.computeNext(SubfieldTokenizer.java:122) at com.facebook.presto.spi.SubfieldTokenizer.tryToComputeNext(SubfieldTokenizer.java:69) at com.facebook.presto.spi.SubfieldTokenizer.hasNext(SubfieldTokenizer.java:63) at java.util.Iterator.forEachRemaining(Iterator.java:115) at com.facebook.presto.spi.Subfield.&lt;init&gt;(Subfield.java:225) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call1(AnnotatedConstructor.java:129) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:326) ... 142 more ] at com.facebook.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:122) at com.facebook.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:69) at com.facebook.presto.server.smile.AdaptingJsonResponseHandler.handle(AdaptingJsonResponseHandler.java:57) at com.facebook.presto.server.smile.AdaptingJsonResponseHandler.handle(AdaptingJsonResponseHandler.java:31) at com.facebook.airlift.http.client.jetty.JettyResponseFuture.processResponse(JettyResponseFuture.java:99) at com.facebook.airlift.http.client.jetty.JettyResponseFuture.completed(JettyResponseFuture.java:76) at com.facebook.airlift.http.client.jetty.BufferingResponseListener.onComplete(BufferingResponseListener.java:90) at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:196) at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:188) at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470) at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:416) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:316) at org.eclipse.jetty.http.HttpParser.parseFields(HttpParser.java:1165) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1525) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:172) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:135) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73) at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133) at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683) ... 1 more Caused by: java.lang.IllegalArgumentException: Invalid JSON bytes for [simple type, class com.facebook.presto.execution.TaskInfo] at com.facebook.airlift.json.JsonCodec.fromJson(JsonCodec.java:196) at com.facebook.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:119) ... 29 more Caused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'com': was expecting ('true', 'false' or 'null')  at [Source: (byte[])"com.facebook.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest at com.facebook.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:156) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236) at org.gla"[truncated 16923 bytes]; line: 1, column: 5] at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1804) at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:703) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(UTF8StreamJsonParser.java:3532) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2627) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:832) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:729) at com.fasterxml.jackson.databind.ObjectReader._initForReading(ObjectReader.java:355) at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1596) at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1234) at com.facebook.airlift.json.JsonCodec.fromJson(JsonCodec.java:193) ... 30 more ```  </body>
		<created>2020-04-16 17:40:25</created>
		<closed>2020-07-07 11:08:39</closed>
	</bug>
	<bug>
		<id>14358</id>
		<title>NPE when reading structs with a newly added subfield</title>
		<body>In case of a schema change where a new field is added to a struct there will be a missing stream when reading from older files. We need to create a MissingFieldsStreamReader to return an empty block. This was handled for the case where the field was in the output. The same should be added when its pruned.  ``` Caused by: java.lang.NullPointerException: streamDescriptor is null at java.base/java.util.Objects.requireNonNull(Objects.java:246) at com.facebook.presto.orc.reader.StructSelectiveStreamReader$PruningStreamReader.&lt;init&gt;(StructSelectiveStreamReader.java:703) at com.facebook.presto.orc.reader.StructSelectiveStreamReader$PruningStreamReader.&lt;init&gt;(StructSelectiveStreamReader.java:690) at com.facebook.presto.orc.reader.StructSelectiveStreamReader.&lt;init&gt;(StructSelectiveStreamReader.java:191) at com.facebook.presto.orc.reader.SelectiveStreamReaders.createStreamReader(SelectiveStreamReaders.java:85) at com.facebook.presto.orc.reader.StructSelectiveStreamReader.&lt;init&gt;(StructSelectiveStreamReader.java:176) at com.facebook.presto.orc.reader.SelectiveStreamReaders.createStreamReader(SelectiveStreamReaders.java:85) at com.facebook.presto.orc.OrcSelectiveRecordReader.createStreamReaders(OrcSelectiveRecordReader.java:587) at com.facebook.presto.orc.OrcSelectiveRecordReader.&lt;init&gt;(OrcSelectiveRecordReader.java:179) at com.facebook.presto.orc.OrcReader.createSelectiveRecordReader(OrcReader.java:253) at com.facebook.presto.hive.orc.OrcSelectivePageSourceFactory.createOrcPageSource(OrcSelectivePageSourceFactory.java:371) ... 17 more ```  cc: @mbasmanova  @sujay-jain  @jbroll  @oerling </body>
		<created>2020-04-07 07:28:23</created>
		<closed>2020-04-09 20:49:27</closed>
	</bug>
	<bug>
		<id>14333</id>
		<title>VerifyException when using named query with TABLE reference</title>
		<body>When the named query is a TABLE, as in ```   WITH t(x) AS (TABLE qualifiedName) ``` Presto throws VerifyException in `RelationPlanner.addCoercions` if table has invisible fields. </body>
		<created>2020-04-03 22:45:02</created>
		<closed>2020-04-30 21:38:11</closed>
	</bug>
	<bug>
		<id>14318</id>
		<title>SimpleArrayAllocator should be able to allocate max arrays</title>
		<body> checkState(getBorrowedArrayCount() &lt; maxOutstandingArrays, "Requested too many arrays: %s", getBorrowedArrayCount());  This should be &lt;=  cc : @mbasmanova  @yingsu00 </body>
		<created>2020-03-31 21:28:43</created>
		<closed>2020-03-31 22:08:52</closed>
	</bug>
	<bug>
		<id>14271</id>
		<title>Cassandra Connector: java.lang.NoClassDefFoundError: io/netty/util/Timer</title>
		<body>The presto-cli fails with `Query is gone (server restarted?)` when trying to describe a table from Cassandra.   Error at presto server side:  ``` WARN    statement-response-5    com.facebook.presto.server.ThrowableMapper      Request failed for /v1/statement/20200321_162656_00004_8zbfq/1 java.lang.NoClassDefFoundError: io/netty/util/Timer         at com.datastax.driver.core.Configuration$Builder.build(Configuration.java:317)         at com.datastax.driver.core.Cluster$Builder.getConfiguration(Cluster.java:1282)         at com.datastax.driver.core.Cluster.&lt;init&gt;(Cluster.java:113)         at com.datastax.driver.core.Cluster.buildFrom(Cluster.java:178)         at com.datastax.driver.core.Cluster$Builder.build(Cluster.java:1299)         at com.facebook.presto.cassandra.CassandraClientModule.lambda$createCassandraSession$0(CassandraClientModule.java:149)         at com.facebook.presto.cassandra.ReopeningCluster.delegate(ReopeningCluster.java:54)         at com.datastax.driver.core.DelegatingCluster.getConfiguration(DelegatingCluster.java:96)         at com.facebook.presto.cassandra.NativeCassandraSession.executeWithSession(NativeCassandraSession.java:531)         at com.facebook.presto.cassandra.NativeCassandraSession.getKeyspaceByCaseInsensitiveName(NativeCassandraSession.java:257)         at com.facebook.presto.cassandra.NativeCassandraSession.getTable(NativeCassandraSession.java:190)         at com.facebook.presto.cassandra.CassandraMetadata.getTableHandle(CassandraMetadata.java:104)         at com.facebook.presto.cassandra.CassandraMetadata.getTableHandle(CassandraMetadata.java:66)         at com.facebook.presto.metadata.MetadataManager.getTableHandle(MetadataManager.java:331)         at com.facebook.presto.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowColumns(ShowQueriesRewrite.java:371)         at com.facebook.presto.sql.rewrite.ShowQueriesRewrite$Visitor.visitShowColumns(ShowQueriesRewrite.java:154)         at com.facebook.presto.sql.tree.ShowColumns.accept(ShowColumns.java:54)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.rewrite.ShowQueriesRewrite.rewrite(ShowQueriesRewrite.java:151)         at com.facebook.presto.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:53)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:76)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:71)         at com.facebook.presto.execution.SqlQueryExecution.&lt;init&gt;(SqlQueryExecution.java:194)         at com.facebook.presto.execution.SqlQueryExecution.&lt;init&gt;(SqlQueryExecution.java:96)         at com.facebook.presto.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:733)         at com.facebook.presto.execution.SqlQueryManager.createQueryInternal(SqlQueryManager.java:366)         at com.facebook.presto.execution.SqlQueryManager.lambda$createQuery$4(SqlQueryManager.java:304)         at com.facebook.presto.$gen.Presto_0_233_e343965____20200321_162135_1.run(Unknown Source)         at com.facebook.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)         at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.ClassNotFoundException: io.netty.util.Timer         at java.net.URLClassLoader.findClass(URLClassLoader.java:382)         at java.lang.ClassLoader.loadClass(ClassLoader.java:424)         at com.facebook.presto.server.PluginClassLoader.loadClass(PluginClassLoader.java:80)         at java.lang.ClassLoader.loadClass(ClassLoader.java:357)         ... 32 more   ``` How to solve this dependency issue? </body>
		<created>2020-03-21 16:29:44</created>
		<closed>2020-06-04 00:47:54</closed>
	</bug>
	<bug>
		<id>14257</id>
		<title>Wrong results for queries with join over unnest.</title>
		<body>We recently observed some query returns wrong results for queries that have joins over unnest, and unnest produces multiple level of nested DictionaryBlocks and some of them is a view (i.e. the idsOffset is non-zero). For such blocks, the BlockFlattener would calculate the mappings wrong, such that the OptimizedPartitionedOutputOperator would shuffle wrong rows. For more details please see the fix https://github.com/prestodb/presto/pull/14245</body>
		<created>2020-03-16 22:08:24</created>
		<closed>2020-03-16 22:08:56</closed>
	</bug>
	<bug>
		<id>14232</id>
		<title>Fix reading Map&lt;int,int&gt; column with negative keys</title>
		<body>Currently the SubfieldTokenizer throws parse exception when we try to access a map with negative key.  `Select map_col[-1] from map_table` ``` Caused by: com.facebook.presto.spi.PrestoException: Invalid subfield path: 'map_col[‸-1]' at com.facebook.presto.spi.SubfieldTokenizer.invalidSubfieldPath(SubfieldTokenizer.java:262) at com.facebook.presto.spi.SubfieldTokenizer.matchUnquotedSubscript(SubfieldTokenizer.java:167) at com.facebook.presto.spi.SubfieldTokenizer.computeNext(SubfieldTokenizer.java:109) at com.facebook.presto.spi.SubfieldTokenizer.tryToComputeNext(SubfieldTokenizer.java:69) at com.facebook.presto.spi.SubfieldTokenizer.hasNext(SubfieldTokenizer.java:63) at java.util.Iterator.forEachRemaining(Iterator.java:115) at com.facebook.presto.spi.Subfield.&lt;init&gt;(Subfield.java:225) ``` cc: @mbasmanova </body>
		<created>2020-03-10 08:23:37</created>
		<closed>2020-03-10 14:07:05</closed>
	</bug>
	<bug>
		<id>13828</id>
		<title>BooleanInputStream#getSetBits returns incorrect result</title>
		<body>com.facebook.presto.orc.stream.BooleanInputStream#getSetBits(int, boolean[]) sometimes returns a value larger than nextBatchSize parameter. This happens, when `data` below is -2,  batchSize is 2 and bitsInData is 7.  `countBitsSet += Integer.bitCount(value);` adds 7 which is &gt; 2  ```java     public int getSetBits(int batchSize, boolean[] vector)             throws IOException     {         int offset = 0;         int countBitsSet = 0;         // handle the head         int count = Math.min(batchSize, bitsInData);         if (count != 0) {             int value = (data &gt;&gt;&gt; (8 - count)) &amp; 0x7f;             countBitsSet += Integer.bitCount(value);             switch (count) {                 case 7:                     vector[offset++] = ((value &amp; 64) &gt;&gt;&gt; 6) == 1;                 case 6:                     vector[offset++] = ((value &amp; 32) &gt;&gt;&gt; 5) == 1;                 case 5:                     vector[offset++] = ((value &amp; 16) &gt;&gt;&gt; 4) == 1;                 case 4:                     vector[offset++] = ((value &amp; 8) &gt;&gt;&gt; 3) == 1;                 case 3:                     vector[offset++] = ((value &amp; 4) &gt;&gt;&gt; 2) == 1;                 case 2:                     vector[offset++] = ((value &amp; 2) &gt;&gt;&gt; 1) == 1;                 case 1:                     vector[offset++] = ((value &amp; 1) &gt;&gt;&gt; 0) == 1;             }             data &lt;&lt;= count;             bitsInData -= count;              if (count == batchSize) {                 return countBitsSet;             }         } ```  This seems to be a regression from #13602 (CC: @martint)</body>
		<created>2019-12-10 01:53:35</created>
		<closed>2019-12-10 17:02:56</closed>
	</bug>
	<bug>
		<id>13759</id>
		<title>Hyphens in column names fail in where clause</title>
		<body>Using column names with hyphens in them in the where clause works in release 0.220.  In releases 0.224 and 0.227, I can no longer use column names with hyphens in them in the where clause.  Other field names with no hyphens work fine in the where clause.  Putting columns with hyphen names in the select clause still works fine.    This query works: ``` select * from mydb.mytable where "datehour" = '2019-11-26T17' limit 1000; ```  This query fails: ``` select * from mydb.mytable where "datehour" = '2019-11-26T17' and "cs-host" = 'google.com' limit 1000; ```  Error: ``` Query failed (#20191126_204022_02148_6cxre): Unexpected response from http://172.16.27.106:8889/v1/task/20191126_204022_02148_6cxre.1.0?summarize [DB Errorcode=65542] ```  Full Stack Trace: ``` com.facebook.presto.spi.PrestoException: Unexpected response from http://172.16.27.106:8889/v1/task/20191126_202336_02135_6cxre.1.0?summarize at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:69) at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:30) at com.google.common.util.concurrent.Futures$CallbackListener.run(Futures.java:1347) at io.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.IllegalArgumentException: Unable to create class com.facebook.presto.execution.TaskInfo from JSON response: [io.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:156) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156) at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:73) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:156) at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1091) at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874) at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271) at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:97) at org.glassfish.jersey.server.internal.inject.EntityParamValueParamProvider$EntityValueSupplier.apply(EntityParamValueParamProvider.java:80) at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.apply(ParamValueFactoryWithSource.java:74) at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:92) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:133) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104) at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268) at org.glassfish.jersey.internal.Errors.process(Errors.java:316) at org.glassfish.jersey.internal.Errors.process(Errors.java:298) at org.glassfish.jersey.internal.Errors.process(Errors.java:268) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:867) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623) at com.facebook.presto.server.security.AuthenticationFilter.doFilter(AuthenticationFilter.java:69) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:51) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:703) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:174) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:61) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.Server.handle(Server.java:502) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:364) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683) at java.lang.Thread.run(Thread.java:748) Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `com.facebook.presto.spi.Subfield`, problem: Invalid subfield path: 'cs‸-host'  at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream); line: 1, column: 7741] (through reference chain: com.facebook.presto.server.TaskUpdateRequest["fragment"]-&gt;com.facebook.presto.sql.planner.PlanFragment["root"]-&gt;com.facebook.presto.spi.plan.LimitNode["source"]-&gt;com.facebook.presto.spi.plan.FilterNode["source"]-&gt;com.facebook.presto.spi.plan.TableScanNode["table"]-&gt;com.facebook.presto.spi.TableHandle["connectorTableLayout"]-&gt;com.facebook.presto.hive.HiveTableLayoutHandle["domainPredicate"]-&gt;com.facebook.presto.spi.predicate.TupleDomain["columnDomains"]-&gt;java.util.ArrayList[1]-&gt;com.facebook.presto.spi.predicate.TupleDomain$ColumnDomain["column"]) at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67) at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1608) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException(StdValueInstantiator.java:484) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem(StdValueInstantiator.java:503) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:328) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1373) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:171) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245) at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:184) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:193) at com.facebook.presto.metadata.AbstractTypedJacksonModule$InternalTypeDeserializer.deserialize(AbstractTypedJacksonModule.java:87) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:184) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:527) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:527) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:161) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:527) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer.deserialize(ReferenceTypeDeserializer.java:184) at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:530) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:528) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:417) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1287) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3984) at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2342) at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:143) ... 69 more Caused by: com.facebook.presto.spi.PrestoException: Invalid subfield path: 'cs‸-host' at com.facebook.presto.spi.SubfieldTokenizer.invalidSubfieldPath(SubfieldTokenizer.java:262) at com.facebook.presto.spi.SubfieldTokenizer.computeNext(SubfieldTokenizer.java:122) at com.facebook.presto.spi.SubfieldTokenizer.tryToComputeNext(SubfieldTokenizer.java:69) at com.facebook.presto.spi.SubfieldTokenizer.hasNext(SubfieldTokenizer.java:63) at java.util.Iterator.forEachRemaining(Iterator.java:115) at com.facebook.presto.spi.Subfield.&lt;init&gt;(Subfield.java:225) at sun.reflect.GeneratedConstructorAccessor166.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call1(AnnotatedConstructor.java:129) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:326) ... 152 more ] at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:122) at io.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:69) at com.facebook.presto.server.smile.AdaptingJsonResponseHandler.handle(AdaptingJsonResponseHandler.java:57) at com.facebook.presto.server.smile.AdaptingJsonResponseHandler.handle(AdaptingJsonResponseHandler.java:31) at io.airlift.http.client.jetty.JettyResponseFuture.processResponse(JettyResponseFuture.java:99) at io.airlift.http.client.jetty.JettyResponseFuture.completed(JettyResponseFuture.java:76) at io.airlift.http.client.jetty.BufferingResponseListener.onComplete(BufferingResponseListener.java:90) at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:196) at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:188) at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470) at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:416) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:316) at org.eclipse.jetty.http.HttpParser.parseFields(HttpParser.java:1165) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1525) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:172) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:135) at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73) at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133) at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683) ... 1 more Caused by: java.lang.IllegalArgumentException: Invalid JSON bytes for [simple type, class com.facebook.presto.execution.TaskInfo] at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:196) at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:119) ... 29 more Caused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'io': was expecting ('true', 'false' or 'null')  at [Source: (byte[])"io.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:156) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:257) at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:236) at org.glassfish.jersey.messag"[truncated 17982 bytes]; line: 1, column: 4] at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1804) at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:679) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(UTF8StreamJsonParser.java:3524) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2619) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:824) at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:721) at com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:4141) at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4000) at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3121) at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:193) ... 30 more ``` </body>
		<created>2019-11-26 21:18:12</created>
		<closed>2019-12-02 21:14:30</closed>
	</bug>
	<bug>
		<id>13400</id>
		<title>OrcWriter may close column writers twice if rollback</title>
		<body>During rollback, do not close the writer if the it has already been closed. Need to re-exam `outputPageSink`'s behavior in `compactSorted` method.  ``` java.util.concurrent.CompletionException: java.lang.IllegalStateException         at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)         at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)         at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1739)         at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135)         at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)         at java.base/java.lang.Thread.run(Thread.java:844) Caused by: java.lang.IllegalStateException         at com.google.common.base.Preconditions.checkState(Preconditions.java:488)         at com.facebook.presto.orc.writer.SliceDictionaryColumnWriter.getBufferedBytes(SliceDictionaryColumnWriter.java:518)         at com.facebook.presto.orc.DictionaryCompressionOptimizer$DictionaryColumnManager.getBufferedBytes(DictionaryCompressionOptimizer.java:443)         at com.facebook.presto.orc.DictionaryCompressionOptimizer$DictionaryColumnManager.getCompressionRatio(DictionaryCompressionOptimizer.java:438)         at com.facebook.presto.orc.DictionaryCompressionOptimizer.convertLowCompressionStreams(DictionaryCompressionOptimizer.java:184)         at com.facebook.presto.orc.DictionaryCompressionOptimizer.finalOptimize(DictionaryCompressionOptimizer.java:107)         at com.facebook.presto.orc.OrcWriter.bufferStripeData(OrcWriter.java:368)         at com.facebook.presto.orc.OrcWriter.flushStripe(OrcWriter.java:332)         at com.facebook.presto.orc.OrcWriter.close(OrcWriter.java:444)         at com.facebook.presto.raptor.storage.OrcFileWriter.close(OrcFileWriter.java:149)         at com.facebook.presto.raptor.storage.OrcStorageManager$OrcStoragePageSink.rollback(OrcStorageManager.java:679)         at com.facebook.presto.raptor.storage.organization.ShardCompactor.compactSorted(ShardCompactor.java:161)         at com.facebook.presto.raptor.storage.organization.OrganizationJob.performCompaction(OrganizationJob.java:108)         at com.facebook.presto.raptor.storage.organization.OrganizationJob.runJob(OrganizationJob.java:83)         at com.facebook.presto.raptor.storage.organization.OrganizationJob.runJob(OrganizationJob.java:71)         at com.facebook.presto.raptor.storage.organization.OrganizationJob.run(OrganizationJob.java:59)         at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1736)         ... 3 more ```</body>
		<created>2019-09-15 05:42:26</created>
		<closed>2019-10-20 07:07:37</closed>
	</bug>
	<bug>
		<id>13116</id>
		<title>TypeOnly optimization in RowExpression can cause wrong result in nested cast</title>
		<body>Following queries: ``` select cast(varchar_value as varchar(3)) || ' sfd' from (values ('9898.122')) t(varchar_value) ; select cast(cast(varchar_value as varchar(3)) as varchar(5)) from (values ('9898.122')) t(varchar_value); ```  will return: ``` 9898. sfd and  9898. ``` instead of the expected: ``` 989 sfd 989 ``` Since the outside cast is typeOnly, the optimization inside `SqlToRowExpressionTranslator` will remove the outside cast and change the inside cast into cast as VARCHAR(5).   This is likely a long term bug got triggered by recent code path changes. </body>
		<created>2019-07-24 00:07:26</created>
		<closed>2019-08-06 17:29:49</closed>
	</bug>
	<bug>
		<id>12950</id>
		<title>Planning time failure: Streaming aggregation with input not grouped on the grouping keys</title>
		<body>To reproduce, add the following to `TestHiveDistributedQueries`:  ```     @Test     public void test()     {         assertQuery("SELECT\n" +                 "      linenumber,\n" +                 "      'xxx'\n" +                 "  FROM\n" +                 "  (\n" +                 "      (SELECT orderkey, linenumber FROM lineitem)\n" +                 "      UNION\n" +                 "      (SELECT orderkey, linenumber FROM lineitem)\n" +                 "  ) WHERE orderkey = 1 \n" +                 "  GROUP BY\n" +                 "      1");     } ```  ``` Caused by: java.lang.IllegalArgumentException: Streaming aggregation with input not grouped on the grouping keys at com.google.common.base.Preconditions.checkArgument(Preconditions.java:135) at com.facebook.presto.sql.planner.sanity.ValidateStreamingAggregations$Visitor.visitAggregation(ValidateStreamingAggregations.java:89) at com.facebook.presto.sql.planner.sanity.ValidateStreamingAggregations$Visitor.visitAggregation(ValidateStreamingAggregations.java:52) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:200) at com.facebook.presto.sql.planner.plan.InternalPlanNode.accept(InternalPlanNode.java:31) at com.facebook.presto.sql.planner.sanity.ValidateStreamingAggregations$Visitor.lambda$visitPlan$0(ValidateStreamingAggregations.java:73) ```  CC: @highker @wenleix @rongrong @hellium01 </body>
		<created>2019-06-14 17:23:53</created>
		<closed>2019-06-16 23:21:29</closed>
	</bug>
	<bug>
		<id>12826</id>
		<title>Failing runtime assertion: "Driver should never block"</title>
		<body>``` java.lang.IllegalStateException: Driver should never block at com.google.common.base.Preconditions.checkState(Preconditions.java:504) at com.facebook.presto.operator.index.IndexLoader$IndexSnapshotLoader.load(IndexLoader.java:337) at com.facebook.presto.operator.index.IndexLoader.getIndexedDataForKeys(IndexLoader.java:180) at com.facebook.presto.operator.index.IndexLoader.getIndexedDataForKeys(IndexLoader.java:158) at com.facebook.presto.operator.index.IndexLookupSource.getJoinPosition(IndexLookupSource.java:83) at com.facebook.presto.operator.index.IndexLookupSource.getJoinPosition(IndexLookupSource.java:74) at com.facebook.presto.operator.JoinProbe.getCurrentJoinPosition(JoinProbe.java:87) at com.facebook.presto.operator.LookupJoinOperator.advanceProbePosition(LookupJoinOperator.java:565) at com.facebook.presto.operator.LookupJoinOperator.processProbe(LookupJoinOperator.java:478) at com.facebook.presto.operator.LookupJoinOperator.lambda$processProbe$3(LookupJoinOperator.java:399) at com.facebook.presto.operator.StaticLookupSourceProvider.withLease(StaticLookupSourceProvider.java:34) at com.facebook.presto.operator.LookupJoinOperator.processProbe(LookupJoinOperator.java:396) at com.facebook.presto.operator.LookupJoinOperator.getOutput(LookupJoinOperator.java:311) at com.facebook.presto.operator.Driver.processInternal(Driver.java:379) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:283) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:675) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1077) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:483) at com.facebook.presto.$gen.Presto_0_219____20190514_204259_1.run(Unknown Source) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844) ```</body>
		<created>2019-05-17 17:50:15</created>
		<closed>2019-09-25 18:19:06</closed>
	</bug>
	<bug>
		<id>12704</id>
		<title>Verifier failed handle floating point columns with sums close to 0</title>
		<body>In one of the production query, a columns mismatch on a floating point column `f` where `sum(f) = 0` on the production cluster while `sum(f) ~= ±1e-12` on the test cluster. The data contains positive values and their negates which should exactly cancels each other, and the discrepancy results from the order of execution of `sum` aggregation.  It looks like we attempt to handle those cases in which on the control and test sum are exactly 0 and thus relative error is meaningless but the absolute margin we tolerate is basically 0. https://github.com/prestodb/presto/blob/master/presto-verifier/src/main/java/com/facebook/presto/verifier/checksum/FloatingPointColumnValidator.java#L148-L154  ### Solution We need to introduce some sort of absolute error margin so that we allow verification to pass when ``` difference &lt; absolute_error_margin ```  In addition, we might want to add a checksum column for floating point columns to double-check those cases. ``` sum(abs(f)) ```</body>
		<created>2019-04-19 20:26:18</created>
		<closed>2019-05-01 20:22:01</closed>
	</bug>
	<bug>
		<id>12703</id>
		<title>Sorted checksum for array columns causing checksum queries to fail in Verifier</title>
		<body>Following up on https://github.com/prestodb/presto/issues/12623 cc @mayankgarg1990 @mbasmanova   ### Cause The failure occurred when we sort an orderable array column, `checksum(array_sort(array_column))`, in order to disregard the ordering when verifying the column.  In SQL spec, `NULLs` are generally treated as unknown. For example in Presto, `SELECT row(1, null) &lt; row(2, null)` is `True` because the order can be determined at position 0, but `SELECT row(1, null) &lt; row(1, null)` throws because null comparison happens at position 1.  In the checksum query, the  `array_column` can be an `Array(Row)` with some of the rows containing `null` elements, causing `array_sort` to throw.  ### What columns are impacted? - Array columns with element types `ARRAY` or `ROW`. - Array columns with element type `Map`, and with `ARRAY` or `ROW` nested in the key type or the value type.  ### Solution 1 Cast the column to `ARRAY(JSON)` before sorting ``` checksum(array_sort(CAST(array_column AS ARRAY(JSON)))) ```  ### Solution 2 Only cast to `ARRAY(JSON)` as a fallback ``` COALESCE(     checksum(array_sort(array_column)),     checksum(array_sort(CAST(array_column AS ARRAY(JSON)))) ) ```  Other thoughts?</body>
		<created>2019-04-19 20:14:04</created>
		<closed>2019-05-01 20:22:10</closed>
	</bug>
	<bug>
		<id>12638</id>
		<title>Limit incorrectly pushed down for full outer join</title>
		<body>https://github.com/prestodb/presto/commit/28cc38b0766e6b938a1e22fa09589f2f875458e9 incorrectly pushes a limit through a full outer join.  You can't push down the limit because you will end up losing matches and outputting nulls.  Example: ``` SELECT * FROM          (VALUES (1),(2),(3)     ) AS a(id) FULL OUTER JOIN (         VALUES (2),(3), (1)     ) AS b(id)     ON a.id = b.id LIMIT     1; ```</body>
		<created>2019-04-11 14:26:13</created>
		<closed>2019-04-11 16:58:05</closed>
	</bug>
	<bug>
		<id>12623</id>
		<title>Support ROW comparison for fields with NULL elements</title>
		<body>The issue is manifested when we're calling `checksum` on row-typed columns, and some rows contains null elements.  To reproduce:  ```sql SELECT array_sort(array_agg(row(x, y))) FROM (VALUES (null, null), (1, 2)) AS t(x, y) ```  stacktrace: ``` com.facebook.presto.spi.PrestoException: ROW comparison not supported for fields with null elements         at com.facebook.presto.spi.type.RowType.checkElementNotNull(RowType.java:269)         at com.facebook.presto.spi.type.RowType.compareTo(RowType.java:240)         at com.facebook.presto.operator.scalar.ArraySortFunction$1.compare(ArraySortFunction.java:83)         at com.facebook.presto.operator.scalar.ArraySortFunction$1.compare(ArraySortFunction.java:66)         at java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)         at java.base/java.util.TimSort.sort(TimSort.java:220)         at java.base/java.util.Arrays.sort(Arrays.java:1440)         at java.base/java.util.List.sort(List.java:506)         at java.base/java.util.Collections.sort(Collections.java:176)         at com.facebook.presto.operator.scalar.ArraySortFunction.sort(ArraySortFunction.java:65)         at com.facebook.presto.$gen.PageProjectionWork_20190416_225748_08059_xkma5_0_7_570478.evaluate(Unknown Source)         at com.facebook.presto.$gen.PageProjectionWork_20190416_225748_08059_xkma5_0_7_570478.process(Unknown Source)         at com.facebook.presto.operator.project.DictionaryAwarePageProjection$DictionaryAwarePageProjectionWork.process(DictionaryAwarePageProjection.java:175)         at com.facebook.presto.operator.project.PageProcessor$ProjectSelectedPositions.processBatch(PageProcessor.java:295)         at com.facebook.presto.operator.project.PageProcessor$ProjectSelectedPositions.process(PageProcessor.java:183)         at com.facebook.presto.operator.WorkProcessorUtils$ProcessWorkProcessor.process(WorkProcessorUtils.java:315)         at com.facebook.presto.operator.WorkProcessorUtils$YieldingIterator.computeNext(WorkProcessorUtils.java:79)         at com.facebook.presto.operator.WorkProcessorUtils$YieldingIterator.computeNext(WorkProcessorUtils.java:65)         at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:141)         at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:136)         at com.facebook.presto.operator.project.MergingPageOutput.getOutput(MergingPageOutput.java:111)         at com.facebook.presto.operator.FilterAndProjectOperator.getOutput(FilterAndProjectOperator.java:102)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:379)         at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:283)         at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:675)         at com.facebook.presto.operator.Driver.processFor(Driver.java:276)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1077)         at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162)         at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:483) ... ``` </body>
		<created>2019-04-09 20:05:33</created>
		<closed>2019-04-19 18:18:52</closed>
	</bug>
	<bug>
		<id>12581</id>
		<title>Incorrect result in joni with word boundaries at end of line</title>
		<body>When a word boundary appears at the end of line `\b` won't match it even though it should   Example: ``` presto&gt; select regexp_like('test', 'test\b');  _col0  -------  false  (1 row) ```  Expected result ``` presto&gt; select regexp_like('test', 'test\b');  _col0  -------  true   (1 row) ```  This regression was introduced at https://github.com/prestodb/presto/pull/12406  The PR to fix it in airlift is here: https://github.com/airlift/joni/pull/11.  After that we should update the joni version in Presto</body>
		<created>2019-04-04 02:01:25</created>
		<closed>2019-04-05 22:28:52</closed>
	</bug>
	<bug>
		<id>12577</id>
		<title>Incorrect result in certain situations with multiple joins with difference partition schemes</title>
		<body>This is a bug introduced by #12013. The result would be wrong if the following situation happens: * The query uses `COALESCE(joinKey)` on top of `FULL OUTER JOIN` with equi-join. * The children of the FullJoin node uses a different hash function to compute the partition from the join keys. For example, hash is computed on `(a, constant)` and join key is just `a`. * There is another `JOIN` with the result of `FULL OUTER JOIN` using equi-join on only the coalesced keys of the `FULL OUTER JOIN`.  In such situation, the newly introduced optimization would assume that the result of the `FULL OUTER JOIN` is already partitioned on `COALESCE(a)` thus there's no need for another shuffle before the next join. However, because the hash function is calculated on `(a, constant)`, even if the data is "partitioned on `a`" it would be on a different node as a hash function computed with just `a`. Thus a shuffle would still be needed to produce correct result.</body>
		<created>2019-04-02 18:21:47</created>
		<closed>2019-12-02 23:25:38</closed>
	</bug>
	<bug>
		<id>12279</id>
		<title>One or more partitions already exist for table</title>
		<body>During a batch insertion of records to my table: default.tracked_action. I ran into the following exception: com.facebook.presto.spi.PrestoException One or more partitions already exist for table 'default.tracked_action' com.facebook.presto.hive.metastore.ThriftHiveMetastore.addPartitions(ThriftHiveMetastore.java:526) com.facebook.presto.hive.metastore.BridgingHiveMetastore.addPartitions(BridgingHiveMetastore.java:261) com.facebook.presto.hive.metastore.CachingHiveMetastore.addPartitions(CachingHiveMetastore.java:697) com.facebook.presto.hive.metastore.CachingHiveMetastore.addPartitions(CachingHiveMetastore.java:697) com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore$PartitionAdder.execute(SemiTransactionalHiveMetastore.java:2219) com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore$Committer.executeAddPartitionOperations(SemiTransactionalHiveMetastore.java:1149) com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore$Committer.access$1200(SemiTransactionalHiveMetastore.java:876) com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.commitShared(SemiTransactionalHiveMetastore.java:825)  This error is NOT reproducible, meaning it happens sometimes, not always.  The table contains two partitioned columns.  Here is the table schema: CREATE EXTERNAL TABLE IF NOT EXISTS default.tracked_action (     tivo_pixel_id string,     ad_unit_id string,     device_id string,     Event string,     creative_id string,     client_ip String,     line_item_id String,     advertiser_id String,     order_id String,     description_url String,     ppid String,     act_date timestamp ) PARTITIONED BY (act_date timestamp, tivo_pixel_id string) ROW FORMAT SERDE 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' STORED AS INPUTFORMAT 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat' LOCATION 's3://.......';</body>
		<created>2019-01-30 14:28:22</created>
		<closed>2019-10-20 09:14:01</closed>
	</bug>
	<bug>
		<id>12235</id>
		<title>joda-to-java bridge causing excessive CachedDateTimeZone$Info objects</title>
		<body>While testing we found that 8ac4b8466a7db96d9941e27cecf7aaf64c85bfaf causes 180gb heaps to fill up with 145-150gb of org.joda.time.tz.CachedDateTimeZone.  It looks like it's due to https://github.com/airlift/joda-to-java-time-bridge/commit/bebbce575864bb4bbc56be6f799cd8acae65c8d9: the JdkBasedZoneInfoProvider creates CachedDateTimeZone for all non fixed zones (in the static block).  @haozhun would you have more context about this?</body>
		<created>2019-01-16 19:40:24</created>
		<closed>2019-01-17 10:14:50</closed>
	</bug>
	<bug>
		<id>12228</id>
		<title>Support non-deterministic check for INSERT in verifier</title>
		<body>Currently, only `SELECT` does check for non-determinism. We should support such feature for `INSERT` queries as well.</body>
		<created>2019-01-15 17:06:22</created>
		<closed>2019-04-23 21:10:10</closed>
	</bug>
	<bug>
		<id>12109</id>
		<title>Extra remote exchange when window partitions is a super set of bucket columns</title>
		<body>``` presto:tiny&gt; CREATE TABLE test_bucket (           -&gt;     bucket_key INT,            -&gt;     foo VARCHAR,            -&gt;     bar VARCHAR,            -&gt;     partition_key VARCHAR)           -&gt; WITH (           -&gt;    partitioned_by=ARRAY['partition_key'],            -&gt;    bucketed_by=ARRAY['bucket_key'],            -&gt;    bucket_count=16); CREATE TABLE   presto:tiny&gt; INSERT INTO test_bucket VALUES (1, 'foo', 'bar', '2018-12-18'); INSERT: 1 row  Query 20181219_202234_58401_d46p5, FINISHED, 18 nodes Splits: 22 total, 22 done (100.00%) 0:06 [0 rows, 0B] [0 rows/s, 0B/s]   presto:tiny&gt; EXPLAIN (TYPE DISTRIBUTED)            -&gt; SELECT rank() OVER (PARTITION BY bucket_key)            -&gt; FROM test_bucket;                                                    Query Plan                                                     -----------------------------------------------------------------------------------------------------------------  Fragment 0 [SINGLE]                                                                                                   Output layout: [rank]                                                                                             Output partitioning: SINGLE []                                                                                    Grouped Execution: false                                                                                          - Output[_col0] =&gt; [rank:bigint]                                                                                          _col0 := rank                                                                                                 - RemoteSource[1] =&gt; [rank:bigint]                                                                                                                                                                                          Fragment 1 [HASH]                                                                                                     Output layout: [rank]                                                                                             Output partitioning: SINGLE []                                                                                    Grouped Execution: false                                                                                          - Project[] =&gt; [rank:bigint]                                                                                          - Window[partition by (bucket_key)][$hashvalue] =&gt; [bucket_key:integer, $hashvalue:bigint, rank:bigint]                   rank := rank() RANGE UNBOUNDED_PRECEDING CURRENT_ROW                                                          - LocalExchange[HASH][$hashvalue] ("bucket_key") =&gt; bucket_key:integer, $hashvalue:bigint                             - RemoteSource[2] =&gt; [bucket_key:integer, $hashvalue_4:bigint]                                                                                                                                                      Fragment 2 [prism:buckets=16, hiveTypes=[int]]                                                                        Output layout: [bucket_key, $hashvalue_5]                                                                         Output partitioning: HASH [bucket_key][$hashvalue_5]                                                              Grouped Execution: false                                                                                          - ScanProject[table = prism:di:test_bucket, grouped = false] =&gt; [bucket_key:integer, $hashvalue_5:bigint]                 $hashvalue_5 := "combine_hash"(bigint '0', COALESCE("$operator$hash_code"("bucket_key"), 0))                      LAYOUT: di.test_bucket bucket=16                                                                                  bucket_key := bucket_key:int:0:REGULAR                                                                            partition_key:string:-1:PARTITION_KEY                                                                                 :: [[2018-12-18]]                                                                                                                                                                                                                                                                                                                    (1 row)  Query 20181219_202654_59652_d46p5, FINISHED, 1 node Splits: 1 total, 1 done (100.00%) 0:00 [0 rows, 0B] [0 rows/s, 0B/s] ```  Looks to me if window partition (e.g. ['a', 'b', 'c']) is a super set of bucket columns (e.g. ['a', 'b']), we don't need to do a remote exchange, since the required rows are available locally. In this way fragment 1 and 2 could be combined into one fragment.   Let me know if I'm missing some obvious/essential part. If it looks good, I could work on this optimization.  cc @wenleix @haozhun </body>
		<created>2018-12-19 20:34:37</created>
		<closed>2019-10-23 18:52:54</closed>
	</bug>
	<bug>
		<id>12087</id>
		<title>PlanPrinter prints "PartialSort" for the only sort when distributed sort is enabled</title>
		<body>## Steps to reproduce  1. A modification of Presto source code is required to get a plan printed at the stage before exchanges are inserted into the plan:    ```diff    diff --git presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java    index 39fb55ce18..dbdc9c317d 100644    --- presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java    +++ presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java    @@ -156,6 +156,10 @@ public class LogicalPlanner         {             PlanNode root = planStatement(analysis, analysis.getStatement());        +        System.out.println("--- CREATED PLAN ---");    +        System.out.println("\n" + com.facebook.presto.sql.planner.planPrinter.PlanPrinter.textLogicalPlan(root, symbolAllocator.getTypes(), metadata.getFunctionRegistry(), StatsAndCosts.empty(), session, 0));    +        System.out.println("--- EOF CREATED PLAN ---");    +             planSanityChecker.validateIntermediatePlan(root, session, metadata, sqlParser, symbolAllocator.getTypes(), warningCollector);                 if (stage.ordinal() &gt;= Stage.OPTIMIZED.ordinal()) {    ``` 2. Run a query with an ORDER BY:     ```sql     select * from nation order by nationkey;     ```  The following is printed (projections and symbol mappings were elided for brevity): ``` - Output[nationkey, name, regionkey, comment] =&gt; [expr_8:bigint, expr_9:varchar(25), expr_10:bigint, expr_11:varchar(152)]     - Project[] =&gt; [expr_8:bigint, expr_9:varchar(25), expr_10:bigint, expr_11:varchar(152)]         - Project[] =&gt; [expr_4:bigint, expr_5:varchar(25), expr_6:bigint, expr_7:varchar(152)]             - Project[] =&gt; [expr:bigint, expr_0:varchar(25), expr_1:bigint, expr_2:varchar(152)]                 - PartialSort[expr ASC_NULLS_LAST] =&gt; [nationkey_3:bigint, expr:bigint, expr_0:varchar(25), expr_1:bigint, expr_2:varchar(152)]                               *********                     - Project[] =&gt; [nationkey_3:bigint, expr:bigint, expr_0:varchar(25), expr_1:bigint, expr_2:varchar(152)]                         - ScanProject[table = tpch:tpch:nation:sf0.01] =&gt; [expr:bigint, expr_0:varchar(25), expr_1:bigint, expr_2:varchar(152), nationkey:bigint, name:varchar(25), regionkey:bigint, comment:varchar(152), row_number:bigint] ```  Now, the only sorting that is done is "PartialSort". There should be final sort.  - this may be a glitch in `PlanPrinter` that it incorrectly inserts "Partial" if only distributed sort is enabled. - this may be an incorrect plan produced when distributed sort is enabled, which is only later made correct during planning process. </body>
		<created>2018-12-17 14:10:09</created>
		<closed>2019-09-16 15:35:34</closed>
	</bug>
	<bug>
		<id>12040</id>
		<title>"future should be done" assertion in HashBuilderOperator</title>
		<body>Some queries are failing with this stack trace:  ``` Caused by: com.google.common.base.VerifyException: future should be done at com.google.common.base.Verify.verify(Verify.java:123) at com.facebook.presto.memory.DefaultQueryContext.tryUpdateUserMemory(DefaultQueryContext.java:199) at com.facebook.presto.memory.DefaultQueryContext$QueryMemoryReservationHandler.tryReserveMemory(DefaultQueryContext.java:314) at com.facebook.presto.memory.context.RootAggregatedMemoryContext.tryUpdateBytes(RootAggregatedMemoryContext.java:49) at com.facebook.presto.memory.context.ChildAggregatedMemoryContext.tryUpdateBytes(ChildAggregatedMemoryContext.java:46) at com.facebook.presto.memory.context.ChildAggregatedMemoryContext.tryUpdateBytes(ChildAggregatedMemoryContext.java:46) at com.facebook.presto.memory.context.ChildAggregatedMemoryContext.tryUpdateBytes(ChildAggregatedMemoryContext.java:46) at com.facebook.presto.memory.context.ChildAggregatedMemoryContext.tryUpdateBytes(ChildAggregatedMemoryContext.java:46) at com.facebook.presto.memory.context.SimpleLocalMemoryContext.trySetBytes(SimpleLocalMemoryContext.java:77) at com.facebook.presto.operator.OperatorContext$InternalLocalMemoryContext.trySetBytes(OperatorContext.java:599) at com.facebook.presto.operator.HashBuilderOperator.updateIndex(HashBuilderOperator.java:344) at com.facebook.presto.operator.HashBuilderOperator.addInput(HashBuilderOperator.java:333) at com.facebook.presto.operator.Driver.processInternal(Driver.java:384) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:283) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:675) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:1065) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:483) at com.facebook.presto.$gen.Presto_0_214_84_gad05dcb____20181206_001801_1.run(Unknown Source) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844) ```</body>
		<created>2018-12-10 18:09:55</created>
		<closed>2018-12-10 21:37:35</closed>
	</bug>
	<bug>
		<id>11978</id>
		<title>array_intersect returns wrong results</title>
		<body>ARRAY_INTERSECT would skip 0-value if the arrays contain both NULL and 0-value:  Correct: select ARRAY_INTERSECT(array[ 0], array[0]) -- [0]  Wrong: select ARRAY_INTERSECT(array[ 0, null], array[0]) -- [null]  Correct: select ARRAY_INTERSECT(array[ 0, 0, 1, 2], array[0, 0, 1, 2]) --[0,1,2]  Wrong: select ARRAY_INTERSECT(array[ 0, 1, 2, null], array[0, 1, 2, null]) --  [null,1,2]  Wrong: select ARRAY_INTERSECT(array[ 0, 0, 1, 2, null], array[0, 0, 1, 2, null]) --  [null,1,2]  Wrong: select ARRAY_INTERSECT(array[ 0, 1, 2, null], array[0, 1, 2]) -- [null,1,2]  Correct: select ARRAY_INTERSECT(array[ 0, 0], array[0, 0, null]) -- [0]  Wrong: select ARRAY_INTERSECT(array[ 0, 0, null], array[0, 0, null]) --[null]  This is because it used type.equalTo() when advancing the indexes with same array value, and it doesn't distinguish between 0 and NULL.</body>
		<created>2018-11-26 05:45:46</created>
		<closed>2018-12-21 20:49:03</closed>
	</bug>
	<bug>
		<id>11977</id>
		<title>ARRAY_DISTINCT returns wrong results</title>
		<body>ARRAY_DISTINCT can't distinguish null from 0-value (e.g. 0 for INTEGER or false for BOOLEAN) when there're 2 elements in the array. Examples:  Correct select ARRAY_DISTINCT(array[null, 0, 1]) -- [null,0,1]  Correct select ARRAY_DISTINCT(array[null, 0, 0]) -- [null,0]  Wrong select ARRAY_DISTINCT(array[null, 0])  -- [null]  correct select ARRAY_DISTINCT(array[null, true]) -- [null,true]  Correct select ARRAY_DISTINCT(array[null, false, false]) -- [null,false]  wrong select ARRAY_DISTINCT(array[null, false]) -- [null]  The problem was because it used type.equalTo() to compare the elements when the cardinality of array is two, and type.equalTo() doesn't check for nullness. </body>
		<created>2018-11-26 05:34:05</created>
		<closed>2018-12-19 23:52:39</closed>
	</bug>
	<bug>
		<id>11900</id>
		<title>Unsupported RowExpression type LambdaDefinitionExpression</title>
		<body>Reproducible query:  ``` WITH t AS (   SELECT * FROM (VALUES (1, 2, 'c', 'd', '2018-11-01')) AS t (a, b, c, d, ds) ) SELECT label FROM (   SELECT IF (p &lt;= q, '1', '0') AS label   FROM (       SELECT         reduce(                          array_agg(a),           CAST(Row(0.0, 0.0) AS ROW(field0 DOUBLE, field1 DOUBLE)),           (s, x) -&gt; CAST(ROW(s.field0, s.field1) AS ROW(field0 DOUBLE, field1 DOUBLE)),           s -&gt; s.field0 + s.field1         ) as p,         reduce(                          array_agg(a),                        CAST(Row(0.0, 0.0) AS ROW(field0 DOUBLE, field1 DOUBLE)),           (s, x) -&gt; CAST(ROW(s.field0, s.field1) AS ROW(field0 DOUBLE, field1 DOUBLE)),           s -&gt; s.field0 + s.field1         ) as q       FROM t       WHERE ds = '2018-11-01' AND d = 'test' GROUP BY c    ) WHERE p &gt;= 0.75 AND q &gt;= 0.75) ```  The query above works if i remove `WHERE p &gt;= 0.75 AND q &gt;= 0.75`.  I found commit 92b8a88 by bisecting from 0.213.</body>
		<created>2018-11-12 18:26:52</created>
		<closed>2018-11-15 09:28:40</closed>
	</bug>
	<bug>
		<id>11593</id>
		<title>Planning failure when hash generation optimization is turned on</title>
		<body>```sql SELECT 1 FROM (     SELECT a, b     FROM (VALUES (1, 2)) t(a, b)     WHERE a = 1     GROUP BY a, b     LIMIT 1 ) GROUP BY a ```  fails with:  ``` Query 20180927_174933_00021_zsw5t failed: Node DistinctLimitNode declares hash symbols not in the output java.lang.IllegalStateException: Node DistinctLimitNode declares hash symbols not in the output at com.google.common.base.Preconditions.checkState(Preconditions.java:585) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:746) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planAndEnforce(HashGenerationOptimizer.java:684) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitExchange(HashGenerationOptimizer.java:531) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitExchange(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:243) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitProject(HashGenerationOptimizer.java:606) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitProject(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planAndEnforce(HashGenerationOptimizer.java:684) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitAggregation(HashGenerationOptimizer.java:171) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitAggregation(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:198) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planAndEnforce(HashGenerationOptimizer.java:684) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitExchange(HashGenerationOptimizer.java:531) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitExchange(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:243) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planAndEnforce(HashGenerationOptimizer.java:684) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitAggregation(HashGenerationOptimizer.java:171) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitAggregation(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:198) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitProject(HashGenerationOptimizer.java:606) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitProject(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.plan(HashGenerationOptimizer.java:745) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planAndEnforce(HashGenerationOptimizer.java:684) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planSimpleNodeWithProperties(HashGenerationOptimizer.java:668) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.planSimpleNodeWithProperties(HashGenerationOptimizer.java:655) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitPlan(HashGenerationOptimizer.java:135) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer$Rewriter.visitPlan(HashGenerationOptimizer.java:118) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:49) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.optimizations.HashGenerationOptimizer.optimize(HashGenerationOptimizer.java:112) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:150) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:139) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:362) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:347) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:291) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ```  This is probably a side-effect of 032575a1f2d47de2cc034716de645ce3c1b14281 </body>
		<created>2018-09-27 17:51:53</created>
		<closed>2018-09-27 20:22:01</closed>
	</bug>
	<bug>
		<id>11543</id>
		<title>SHOW STATS column projection</title>
		<body>The SHOW STATS command accepts column projections in the form SHOW STATS FOR (SELECT column1 FROM table), however they are not applied.  We should probably implement this or disallow it.</body>
		<created>2018-09-20 17:15:06</created>
		<closed>2018-10-10 11:13:30</closed>
	</bug>
	<bug>
		<id>11533</id>
		<title>The presto-jdbc Statement.execute() method returns true even for DDL statements</title>
		<body>If a ddl task is not yet submitted a default empty QueryResults is returned to the client which has getUpdateType == null when it should be set to the task name (ex. "CREATE TABLE", "CREATE SCHEMA", etc.).  From com.facebook.presto.jdbc.PrestoStatement.internalExecute(): ```              if (client.currentStatusInfo().getUpdateType() == null) {                 currentResult.set(resultSet);                 return true;             } ``` From com.facebook.presto.server.protocol.Query.getNextResults(): ```         // if query query submission has not finished, return simple empty result         if (!submissionFuture.isDone()) {             QueryResults queryResults = new QueryResults(                     queryId.toString(),                     queryHtmlUri,                     null,                     createNextResultsUri(scheme, uriInfo),                     null,                     null,                     StatementStats.builder()                             .setState(QueryState.QUEUED.toString())                             .setQueued(true)                             .setScheduled(false)                             .build(),                     null,                     ImmutableList.of(),                     null,                     null);              cacheLastResults(queryResults);             return queryResults;         } ``` </body>
		<created>2018-09-20 03:00:31</created>
		<closed>2018-09-20 07:20:13</closed>
	</bug>
	<bug>
		<id>11456</id>
		<title>ThriftIndexHandle toString has raw TupleDomain</title>
		<body>It needs to properly convert the `TupleDomain` into a string, as `TupleDomain` does not have a `toString` method.</body>
		<created>2018-09-11 19:04:30</created>
		<closed>2018-10-01 22:39:42</closed>
	</bug>
	<bug>
		<id>11385</id>
		<title>Planning error when aliasing table colums</title>
		<body>```sql SELECT 1 FROM orders AS t (a, b, c, d, e, f, g, h, i) ```  fails with   ``` java.lang.IllegalArgumentException: Number of outputs (10) doesn't match number of fields in scopes tree (9) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:294) at com.facebook.presto.sql.planner.RelationPlan.&lt;init&gt;(RelationPlan.java:51) at com.facebook.presto.sql.planner.RelationPlanner.visitAliasedRelation(RelationPlanner.java:170) at com.facebook.presto.sql.planner.RelationPlanner.visitAliasedRelation(RelationPlanner.java:98) at com.facebook.presto.sql.tree.AliasedRelation.accept(AliasedRelation.java:71) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.QueryPlanner.planFrom(QueryPlanner.java:262) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:143) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:597) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:98) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:251) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:123) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:590) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:98) at com.facebook.presto.sql.tree.Query.accept(Query.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:439) at com.facebook.presto.sql.planner.LogicalPlanner.planStatementWithoutOutput(LogicalPlanner.java:190) at com.facebook.presto.sql.planner.LogicalPlanner.planStatement(LogicalPlanner.java:171) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:144) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:139) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:344) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:329) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:285) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844) ```</body>
		<created>2018-08-29 17:37:56</created>
		<closed>2018-08-30 00:09:31</closed>
	</bug>
	<bug>
		<id>11344</id>
		<title>Querying information_schema with uppercase names fails</title>
		<body>For example if you do ``` presto:test&gt; select 1 from information_schema.columns where table_schema = 'schema' and table_name = 'NAME'; Query 20180823_194720_62752_z8m8y failed: objectName is not lowercase: NAME ``` this should not fail though</body>
		<created>2018-08-23 20:18:55</created>
		<closed>2020-08-13 14:48:04</closed>
	</bug>
	<bug>
		<id>11338</id>
		<title>TestPrestoDriver.testQueryCancelByInterrupt is flaky</title>
		<body>https://travis-ci.org/prestodb/presto/jobs/419044128 ``` [ERROR] Tests run: 99, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 69.013 s &lt;&lt;&lt; FAILURE! - in TestSuite [ERROR] testQueryCancelByInterrupt(com.facebook.presto.jdbc.TestPrestoDriver)  Time elapsed: 1.399 s  &lt;&lt;&lt; FAILURE! org.testng.internal.thread.ThreadTimeoutException: Method com.facebook.presto.jdbc.TestPrestoDriver.testQueryCancelByInterrupt() didn't finish within the time-out 10000 ``` </body>
		<created>2018-08-22 08:56:16</created>
		<closed>2018-12-12 20:25:16</closed>
	</bug>
	<bug>
		<id>11296</id>
		<title>Improper predicate pushdown with empty grouping set</title>
		<body>```sql WITH t AS (     SELECT a      FROM (         VALUES 1, 2     ) AS u(a)     GROUP BY GROUPING SETS ((), (a)) ) SELECT * FROM t WHERE a IS NOT NULL ```  incorrectly produces:  ```   a ------     1  NULL         &lt;&lt;&lt;&lt;&lt;&lt; this should be filtered out     2 ```  Query plan:  ```  - Output[a] =&gt; [a$gid:integer]          a := a$gid      - Project[] =&gt; [a$gid:integer]          - Aggregate(FINAL)[a$gid, groupid][$hashvalue] =&gt; [a$gid:integer, groupid:bigint, $hashvalue:bigint]              - LocalExchange[HASH][$hashvalue] ("a$gid", "groupid") =&gt; a$gid:integer, groupid:bigint, $hashvalue:bigint                  - Aggregate(PARTIAL)[a$gid, groupid][$hashvalue_10] =&gt; [a$gid:integer, groupid:bigint, $hashvalue_10:bigint]                      - FilterProject[filterPredicate = (NOT ("a$gid" IS NULL))] =&gt; [a$gid:integer, groupid:bigint, $hashvalue_10:bigint]                              Cost: {rows: ? (?), cpu: ?, memory: ?, network: ?}/{rows: ? (?), cpu: ?, memory: ?, network: ?}                              $hashvalue_10 := "combine_hash"("combine_hash"(bigint '0', COALESCE("$operator$hash_code"("a$gid"), 0)), COALESCE("$operator$hash                          - GroupId[[], [field]] =&gt; [a$gid:integer, groupid:bigint]                                  a$gid := field                              - LocalExchange[ROUND_ROBIN] () =&gt; field:integer                                      Cost: {rows: 2 (10B), cpu: 10.00, memory: 0.00, network: 0.00}                                  - Values =&gt; [field:integer]                                          Cost: {rows: 2 (10B), cpu: 0.00, memory: 0.00, network: 0.00}                                          (1)                                          (2) ```  The is that while it's safe to push below an aggregation with no empty grouping set (because they will ultimately be filtered out anyway), the empty grouping set has to produce a row. So, the filter has to be retained above the aggregation in that case. This is analogous to pushing down a filter through a global aggregation.</body>
		<created>2018-08-17 20:10:37</created>
		<closed>2018-08-17 21:19:47</closed>
	</bug>
	<bug>
		<id>11223</id>
		<title>Race condition in OuterPositionTracker</title>
		<body>This is a reoccurrence of #9766 and #9982. ``` com.google.common.base.VerifyException at com.google.common.base.Verify.verify(Verify.java:99) at com.facebook.presto.operator.PartitionedLookupSource$OuterPositionTracker.positionVisited(PartitionedLookupSource.java:330) at com.facebook.presto.operator.PartitionedLookupSource.appendTo(PartitionedLookupSource.java:179) at com.facebook.presto.operator.LookupJoinPageBuilder.appendRow(LookupJoinPageBuilder.java:78) at com.facebook.presto.operator.LookupJoinOperator.joinCurrentPosition(LookupJoinOperator.java:540) at com.facebook.presto.operator.LookupJoinOperator.processProbe(LookupJoinOperator.java:467) at com.facebook.presto.operator.LookupJoinOperator.lambda$processProbe$3(LookupJoinOperator.java:399) at com.facebook.presto.operator.PartitionedLookupSourceFactory$SpillAwareLookupSourceProvider.withLease(PartitionedLookupSourceFactory.java:432) at com.facebook.presto.operator.LookupJoinOperator.processProbe(LookupJoinOperator.java:396) at com.facebook.presto.operator.LookupJoinOperator.getOutput(LookupJoinOperator.java:311) at com.facebook.presto.operator.Driver.processInternal(Driver.java:373) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:282) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:672) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:973) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:477) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844)</body>
		<created>2018-08-08 20:41:49</created>
		<closed>2018-10-30 19:56:06</closed>
	</bug>
	<bug>
		<id>11168</id>
		<title>Endpoint '/' doesn't respects the X-Forwarded-Proto header </title>
		<body>Hi,   When access to '/' with 'X-Forwarded-Proto' header, Presto return http url in location header.  I expect to return https url in this case.  ``` % rpm -qa presto-server-rpm presto-server-rpm-0.206-1.x86_64  % curl -i -H 'X-Forwarded-Proto: https' http://localhost:8080/ HTTP/1.1 301 Moved Permanently Date: Wed, 01 Aug 2018 12:09:50 GMT Location: http://localhost:8080/ui/ Content-Length: 0 ```</body>
		<created>2018-08-01 12:26:46</created>
		<closed>2018-09-01 18:56:41</closed>
	</bug>
	<bug>
		<id>11167</id>
		<title>Glue integration: CREATE TABLE fails with NPE ("parameters is null") in some cases</title>
		<body>With Presto 0.203 when a Glue database (schema) is created from AWS Glue, or created via Presto (CREATE SCHEMA) but later edited via AWS Web UI, eg. setting the "Location" property, then CREATE TABLE using that schema fails in Presto.  It's somewhat similar to https://github.com/prestodb/presto/issues/10573 but that has been fixed with https://github.com/prestodb/presto/pull/10726 fix which is present in 0.203.   ``` presto&gt; create table glue.test.foo (a int); Query 20180731_151404_00138_wx7wd failed: java.lang.NullPointerException: parameters is null com.google.common.util.concurrent.UncheckedExecutionException: java.lang.NullPointerException: parameters is null at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2052) at com.google.common.cache.LocalCache.get(LocalCache.java:3943) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3967) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4952) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4958) at com.facebook.presto.hive.metastore.CachingHiveMetastore.get(CachingHiveMetastore.java:238) at com.facebook.presto.hive.metastore.CachingHiveMetastore.getDatabase(CachingHiveMetastore.java:261) at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.getDatabase(SemiTransactionalHiveMetastore.java:126) at com.facebook.presto.hive.HiveWriteUtils.getDatabase(HiveWriteUtils.java:465) at com.facebook.presto.hive.HiveWriteUtils.getTableDefaultLocation(HiveWriteUtils.java:445) at com.facebook.presto.hive.HiveLocationService.forNewTable(HiveLocationService.java:55) at com.facebook.presto.hive.HiveMetadata.createTable(HiveMetadata.java:628) at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.createTable(ClassLoaderSafeConnectorMetadata.java:227) at com.facebook.presto.metadata.MetadataManager.createTable(MetadataManager.java:547) at com.facebook.presto.execution.CreateTableTask.internalExecute(CreateTableTask.java:175) at com.facebook.presto.execution.CreateTableTask.execute(CreateTableTask.java:81) at com.facebook.presto.execution.CreateTableTask.execute(CreateTableTask.java:63) at com.facebook.presto.execution.DataDefinitionExecution.start(DataDefinitionExecution.java:124) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.NullPointerException: parameters is null at java.util.Objects.requireNonNull(Objects.java:228) at com.facebook.presto.hive.metastore.Database$Builder.setParameters(Database.java:152) at com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter.convertDatabase(GlueToPrestoConverter.java:56) at com.facebook.presto.hive.metastore.glue.GlueHiveMetastore.getDatabase(GlueHiveMetastore.java:168) at com.facebook.presto.hive.metastore.CachingHiveMetastore.loadDatabase(CachingHiveMetastore.java:266) at com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(CacheLoader.java:165) at com.google.common.cache.CacheLoader$1.load(CacheLoader.java:188) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3524) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2273) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2156) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2046) ... 20 more ```</body>
		<created>2018-08-01 09:45:38</created>
		<closed>2018-08-02 11:47:11</closed>
	</bug>
	<bug>
		<id>11120</id>
		<title>Incorrect behavior for DISTINCT grouping sets with mixed references to same column</title>
		<body>This query:  ```sql SELECT grouping(a)  FROM (values (1) ) t(a)  GROUP BY DISTINCT GROUPING SETS ((a), (t.a)); ```  incorrectly produces two grouping sets:  ```  _col0 -------      0      0 ```  Plan:  ```  - Output[_col0] =&gt; [expr_2:integer]          _col0 := expr_2      - Project[] =&gt; [expr_2:integer]              expr_2 := "$literal$array(integer)"("from_base64"('CQAAAElOVF9BUlJBWQIAAAAAAAAAAAAAAAA='))[("groupid" + BIGINT '1')]          - Aggregate(FINAL)[a$gid, groupid][$hashvalue] =&gt; [a$gid:integer, groupid:bigint, $hashvalue:bigint]              - LocalExchange[HASH][$hashvalue] ("a$gid", "groupid") =&gt; a$gid:integer, groupid:bigint, $hashvalue:bigint                  - Aggregate(PARTIAL)[a$gid, groupid][$hashvalue_6] =&gt; [a$gid:integer, groupid:bigint, $hashvalue_6:bigint]                      - Project[] =&gt; [a$gid:integer, groupid:bigint, $hashvalue_6:bigint]                              $hashvalue_6 := "combine_hash"("combine_hash"(bigint '0', COALESCE("$operator$hash_code"("a$gid"), 0)), C                          - GroupId[[field], [field]] =&gt; [a$gid:integer, groupid:bigint]                                  a$gid := field                              - LocalExchange[ROUND_ROBIN] () =&gt; field:integer                                      Cost: {rows: 1 (5B), cpu: 5.00, memory: 0.00, network: 0.00}                                  - Values =&gt; [field:integer]                                          Cost: {rows: 1 (5B), cpu: 0.00, memory: 0.00, network: 0.00}                                          (1) ```</body>
		<created>2018-07-24 04:10:08</created>
		<closed>2018-08-30 00:10:58</closed>
	</bug>
	<bug>
		<id>11110</id>
		<title>PreparedStatement#close does not deallocate the prepared statement from session</title>
		<body>Hi Guys,  Here are the versions:  - OSX (does the same on my production environment - Ubuntu)  - Presto JDBC Driver/0.206  - Presto CLI 0.206  - Same for presto server  - NiFi: stable 1.7.1  # The actual issue  I am using NiFi and its [DBCPConnectionPool](https://nifi.apache.org/docs/nifi-docs/components/org.apache.nifi/nifi-dbcp-service-nar/1.7.1/org.apache.nifi.dbcp.DBCPConnectionPool/index.html) to query Presto with the JDBC Driver.  It works the first few times. But after a while it doesn't work anymore and I get the following error on presto side: ``` tail -f /usr/local/var/presto/data/var/log/server.log 2018-07-23T17:32:11.402+0200WARNhttp-worker-520org.eclipse.jetty.http.HttpParserHeader is too large 8193&gt;8192 ``` The first request send to Presto via NiFi (found it via mitmproxy) is:  ``` X-Presto-User:                 micka X-Presto-Source:               presto-jdbc X-Presto-Time-Zone:            Europe/Paris X-Presto-Language:             en-US X-Presto-Transaction-Id:       NONE X-Presto-Client-Capabilities:  PATH User-Agent:                    Presto JDBC Driver/0.206 Content-Type:                  text/plain; charset=utf-8 Content-Length:                64 Host:                          127.0.0.1 Connection:                    Keep-Alive Accept-Encoding:               gzip ---RAW BODY--- PREPARE statement1 FROM SELECT * FROM pg.public.csv_test limit 5 ``` The seconde one is: ``` X-Presto-User:                 micka X-Presto-Source:               presto-jdbc X-Presto-Time-Zone:            Europe/Paris X-Presto-Language:             en-US X-Presto-Prepared-Statement:   statement1=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Transaction-Id:       NONE X-Presto-Client-Capabilities:  PATH User-Agent:                    Presto JDBC Driver/0.206 Content-Type:                  text/plain; charset=utf-8 Content-Length:                18 Host:                          127.0.0.1 Connection:                    Keep-Alive Accept-Encoding:               gzip ---RAW BODY--- EXECUTE statement1 ``` When it stops working with the header to large error, it is: ``` X-Presto-User:                 micka X-Presto-Source:               presto-jdbc X-Presto-Time-Zone:            Europe/Paris X-Presto-Language:             en-US X-Presto-Prepared-Statement:   statement36=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement37=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement34=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement78=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement35=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement79=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement9=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement7=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement38=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement8=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement39=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement5=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement6=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement3=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement4=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement1=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement2=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement72=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement73=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement70=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement71=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement32=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement76=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement33=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement77=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement30=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement74=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement31=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement75=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement47=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement48=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement45=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement46=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement49=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement80=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement83=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement40=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement84=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement81=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement82=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement43=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement44=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement41=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement85=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement42=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement14=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement58=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement15=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement59=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement12=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement56=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement13=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement57=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement18=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement19=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement16=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement17=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement50=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement51=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement10=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement54=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement11=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement55=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement52=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement53=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement25=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement69=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement26=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement23=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement67=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement24=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement68=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement29=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement27=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement28=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement61=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement62=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement60=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement21=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement65=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement22=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement66=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement63=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement20=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Prepared-Statement:   statement64=SELECT+*%0AFROM%0A++pg.public.csv_test%0ALIMIT+5%0A X-Presto-Transaction-Id:       NONE X-Presto-Client-Capabilities:  PATH User-Agent:                    Presto JDBC Driver/0.206 Content-Type:                  text/plain; charset=utf-8 Content-Length:                19 Host:                          127.0.0.1 Connection:                    Keep-Alive Accept-Encoding:               gzip ---RAW BODY--- EXECUTE statement85 ```  # Why I post it here  I use the exact same flow with the PostgreSQL JDBC Driver, and it works perfectly. So, I figured the issue might be in the PrestoDB JDBC driver.  # Reproduce it The bug is easily reproducible in a local environment. 1. Install NiFi 2. Install Presto (create a catalog, any will do) 3. Download the Official Presto JDBC Driver and move into a directory accessible by NiFi. 4. Configure NiFi to query Presto, each 2 secondes. 5. Capture the request using a tool such as mitmproxy. My presto server run on `127.0.0.1:9090`, I configured NiFi to query presto on `127.0.0.1:8484` and use mitmproxy in between, like so :  `mitmproxy --mode reverse:http://127.0.0.1:9090 --listen-host 127.0.0.1 --listen-port 8484 --replacements :~s:\/\/127\.0\.0\.1/:\/\/127\.0\.0\.1\:9090/`  ## The NiFi DataFlow ![screen shot 2018-07-23 at 17 11 42](https://user-images.githubusercontent.com/3918958/43085617-b405dc5a-8e9b-11e8-816a-893e79dfb690.png) ## The ExecuteQuery configuration ![screen shot 2018-07-23 at 17 14 53](https://user-images.githubusercontent.com/3918958/43085751-0e0c8e7e-8e9c-11e8-9ad8-90ea3cd45eb7.png) ## The DBCPConnectionPool configuration ![screen shot 2018-07-23 at 17 14 28](https://user-images.githubusercontent.com/3918958/43085769-1e7dfb08-8e9c-11e8-88fd-c570539a45e9.png)</body>
		<created>2018-07-23 15:40:44</created>
		<closed>2018-08-31 13:22:13</closed>
	</bug>
	<bug>
		<id>11047</id>
		<title>NPE for lateral join with unnest</title>
		<body>```sql select * from (values array[1]) t(x), lateral (select * from unnest(x)) ```  fails with   ``` java.lang.NullPointerException: type cannot be null at java.util.Objects.requireNonNull(Objects.java:228) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.setExpressionType(ExpressionAnalyzer.java:224) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:378) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:302) at com.facebook.presto.sql.tree.SymbolReference.accept(SymbolReference.java:41) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:323) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:268) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1524) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1477) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1443) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitValues(LocalExecutionPlanner.java:1234) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitValues(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.ValuesNode.accept(ValuesNode.java:73) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitExchange(LocalExecutionPlanner.java:2196) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitExchange(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitUnnest(LocalExecutionPlanner.java:1256) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitUnnest(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.UnnestNode.accept(UnnestNode.java:106) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitExchange(LocalExecutionPlanner.java:2196) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitExchange(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createNestedLoopJoin(LocalExecutionPlanner.java:1653) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:1511) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:279) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:701) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:653) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:432) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:358) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:85) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:351) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:354) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:129) ```</body>
		<created>2018-07-13 22:59:58</created>
		<closed>2018-07-21 04:44:15</closed>
	</bug>
	<bug>
		<id>11026</id>
		<title>Correlated subqueries does not handle coercion</title>
		<body>``` presto:tiny&gt; SELECT 1 FROM nation n WHERE 1 = (SELECT n.nationkey);  _col0 -------      1 (1 row)  Query 20180712_134539_00036_qa8mt, FINISHED, 1 node Splits: 20 total, 20 done (100.00%) 0:00 [25 rows, 0B] [243 rows/s, 0B/s]  presto:tiny&gt; SELECT 1 FROM nation n WHERE 1 = (SELECT cast(n.nationkey as decimal(7,2))); Query 20180712_134545_00037_qa8mt failed: line 1:35: Given correlated subquery is not supported SELECT 1 FROM nation n WHERE 1 = (SELECT cast(n.nationkey as decimal(7,2))) ```  As you could see above when correlated predicate requires coercion then correlated subquery does not work.  CC: @anusudarsan </body>
		<created>2018-07-12 13:47:50</created>
		<closed>2018-08-03 08:56:12</closed>
	</bug>
	<bug>
		<id>11001</id>
		<title>Name based struct field mapping for ORC files</title>
		<body>## Summary  Currently fields in structs are mapped to the underlying data based on the ordinal of the data field. This approach does not work in the case where the table schema changes to drop a field from the struct that is not the last field. Currently, such a change will cause all fields following the dropped field to be mis-aligned.   ## Detail ### Current behavior Consider the case of a struct `&lt;a string, b string, c string&gt;` being changed to `&lt;a string, c string, d string&gt;`.  * The data of the deleted column `b` will be assigned to column `c`. * The data from column `c` from the files which have data for column `b` will be assigned to column `d`.  ### Desired behavior * Data in the deleted column `b` should be ignored.  * Column `c` should be  read correctly from files written before and after the schema change.  * Column `d` should be null when reading files prior to the schema change and should be read in correctly from  the files written after  the schema change.  ## Proposal  Similar to the `hive.orc.use-column-names` property, create a `hive.orc.use-struct-field-names` that maps to the underlying data based on field names rather than the position. </body>
		<created>2018-07-09 13:24:23</created>
		<closed>2018-08-15 02:41:19</closed>
	</bug>
	<bug>
		<id>10953</id>
		<title>Hive $partitions table does not translate null partitions</title>
		<body>The `$partitions` table returns `__DEFAULT_PARTITION__` for null partitions rather than translating it into a SQL null (as happens when you query the underlying table).</body>
		<created>2018-06-29 20:30:09</created>
		<closed>2018-11-08 00:44:58</closed>
	</bug>
	<bug>
		<id>10947</id>
		<title>FileBasedSystemAccessControl do not fail when parsing unknown rules</title>
		<body>`FileBasedSystemAccessControl` parses the file like: ``` {   "schemas": [     {       "user": "(alice|bob)",       "schema": "(default|pv)",       "owner": true     },     {       "user": ".*",       "owner": false     }   ],   "tables": [     {       "user":"(alice|bob)",       "schema": "default",       "table": "(temp_.*)",       "privileges": ["SELECT","INSERT", "DELETE", "OWNERSHIP"]     },     {       "user":"(alice|bob)",       "schema": "pv",       "table": ".*",       "privileges": ["SELECT","INSERT", "DELETE", "OWNERSHIP"]     },     {       "user": ".*",       "privileges": ["SELECT"]     }   ] } ```  Above file syntax is not supported, however parser do fail. Instead it returns an empty list of rules, which could be misleading for users.</body>
		<created>2018-06-29 07:38:37</created>
		<closed>2018-07-18 08:59:31</closed>
	</bug>
	<bug>
		<id>10834</id>
		<title>FILTER clause incorrectly allowed for COALESCE</title>
		<body>This should fail during analysis, but it doesn't:  ``` select coalesce(1, 2) filter where (true) ```</body>
		<created>2018-06-14 14:53:34</created>
		<closed>2018-06-17 03:30:29</closed>
	</bug>
	<bug>
		<id>10724</id>
		<title>Multiple PushAggregationThroughOuterJoin issues</title>
		<body>1.  Query: ``` presto&gt; explain select x, max(x) from (select * from (values (1)) t(x) left join (values (1)) t2(y) on t.x = t2.y) group by x; Query is gone (server restarted?)  java.lang.IllegalStateException: Cannot resolve symbol field at com.google.common.base.Preconditions.checkState(Preconditions.java:585) at com.facebook.presto.sql.planner.ExpressionSymbolInliner$Visitor.rewriteSymbolReference(ExpressionSymbolInliner.java:68) at com.facebook.presto.sql.planner.ExpressionSymbolInliner$Visitor.rewriteSymbolReference(ExpressionSymbolInliner.java:55) ``` Diagnosis: `PushAggregationThroughOuterJoin` should verify that aggregations don't contain probe symbols  2.   With optimization: ``` presto&gt; select x, count(*) from (select * from (values (1)) t(x) left join (select * from (values (1)) t2(y) where false) t2(y) on true) group by x;  x | _col1 ---+-------  1 |     0 (1 row) ``` without: ``` presto&gt; set session push_aggregation_through_join=false; SET SESSION presto&gt; select x, count(*) from (select * from (values (1)) t(x) left join (select * from (values (1)) t2(y) where false) t2(y) on true) group by x;  x | _col1 ---+-------  1 |     1 (1 row) ```  Diagnosis: `PushAggregationThroughOuterJoin` shouldn't fire if default aggregation would be pushed to build side  CC: @rschlussel2 </body>
		<created>2018-05-29 09:31:09</created>
		<closed>2018-08-02 07:44:58</closed>
	</bug>
	<bug>
		<id>10694</id>
		<title>Invalid plan for complex order by expression involving lambda in grouping keys</title>
		<body>**Query**: ``` SELECT   cardinality (filter(numbers, x -&gt; x &lt; 7)) FROM( VALUES ARRAY[1,2,3] ) AS t (numbers) GROUP BY  cardinality (filter(numbers, x -&gt; x &lt; 7)) ORDER BY  cardinality (filter(numbers, x -&gt; x &lt; 7)) ```  **Error**: `Query 20180523_224742_00013_nx3i2 failed: Invalid node. Expression dependencies ([expr_3]) not in source plan output ([cardinality$gid])`  It looks like the invalid project node is created here: https://github.com/prestodb/presto/blob/2501e88816ca9f66c6b65635573ac0f18f435b3c/presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java#L168-L171  CC: @findepi it looks like you wrote that code, so maybe you have some context.  </body>
		<created>2018-05-23 23:01:34</created>
		<closed>2020-05-21 21:48:35</closed>
	</bug>
	<bug>
		<id>10664</id>
		<title>Array distinct from operator fails with cannot convert MethodHandle</title>
		<body>Example stacktrace: ``` Test state FAILED, Control state SUCCESS java.sql.SQLException: Query failed (#XXXXXXXXXXX): cannot convert MethodHandle(Block,Block)boolean to (Object,boolean,Object,boolean)boolean at com.facebook.presto.jdbc.PrestoResultSet.resultsException(PrestoResultSet.java:1798) at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1786) at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1751) at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:141) at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.hasNext(AbstractIterator.java:136) at com.facebook.presto.jdbc.internal.guava.collect.TransformedIterator.hasNext(TransformedIterator.java:42) at com.facebook.presto.jdbc.internal.guava.collect.Iterators$ConcatenatedIterator.getTopMetaIterator(Iterators.java:1319) at com.facebook.presto.jdbc.internal.guava.collect.Iterators$ConcatenatedIterator.hasNext(Iterators.java:1335) at com.facebook.presto.jdbc.PrestoResultSet.next(PrestoResultSet.java:142) at com.facebook.presto.verifier.Validator.convertJdbcResultSet(Validator.java:513) at sun.reflect.GeneratedMethodAccessor26.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.google.common.util.concurrent.SimpleTimeLimiter$1$1.call(SimpleTimeLimiter.java:95) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:206) at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:238) at com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(SimpleTimeLimiter.java:135) at com.google.common.util.concurrent.SimpleTimeLimiter.access$100(SimpleTimeLimiter.java:48) at com.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(SimpleTimeLimiter.java:101) at com.sun.proxy.$Proxy80.convert(Unknown Source) at com.facebook.presto.verifier.Validator.executeQuery(Validator.java:439) at com.facebook.presto.verifier.Validator.executeQueryTest(Validator.java:308) at com.facebook.presto.verifier.Validator.validate(Validator.java:219) at com.facebook.presto.verifier.Validator.valid(Validator.java:191) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: com.facebook.presto.spi.PrestoException: cannot convert MethodHandle(Block,Block)boolean to (Object,boolean,Object,boolean)boolean at com.facebook.presto.util.Failures.internalError(Failures.java:166) at com.facebook.presto.operator.scalar.ArrayDistinctFromOperator.isDistinctFrom(ArrayDistinctFromOperator.java:77) at com.facebook.presto.$gen.PagesHashStrategy_20180521_170900_65007.positionNotDistinctFromRow(Unknown Source) at com.facebook.presto.operator.MultiChannelGroupByHash.positionNotDistinctFromCurrentRow(MultiChannelGroupByHash.java:421) at com.facebook.presto.operator.MultiChannelGroupByHash.putIfAbsent(MultiChannelGroupByHash.java:265) at com.facebook.presto.operator.MultiChannelGroupByHash.putIfAbsent(MultiChannelGroupByHash.java:255) at com.facebook.presto.operator.MultiChannelGroupByHash.access$200(MultiChannelGroupByHash.java:53) at com.facebook.presto.operator.MultiChannelGroupByHash$GetNonDictionaryGroupIdsWork.process(MultiChannelGroupByHash.java:648) at com.facebook.presto.operator.DistinctLimitOperator.processUnfinishedWork(DistinctLimitOperator.java:222) at com.facebook.presto.operator.DistinctLimitOperator.addInput(DistinctLimitOperator.java:167) at com.facebook.presto.operator.Driver.processInternal(Driver.java:379) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:282) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:672) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:973) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:844) Caused by: java.lang.invoke.WrongMethodTypeException: cannot convert MethodHandle(Block,Block)boolean to (Object,boolean,Object,boolean)boolean at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:858) at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:844) at java.base/java.lang.invoke.Invokers.checkGenericType(Invokers.java:495) at com.facebook.presto.operator.scalar.ArrayDistinctFromOperator.isDistinctFrom(ArrayDistinctFromOperator.java:68) ... 18 more ```</body>
		<created>2018-05-21 19:19:15</created>
		<closed>2018-05-22 18:05:35</closed>
	</bug>
	<bug>
		<id>10636</id>
		<title>Fix silent clamping in double to long cast</title>
		<body>`cast(9.3e18 as bigint)` should fail the same way as `cast(2.2e9 as integer)`. However, it clamps silently right now.  ``` presto:di&gt; select cast(9.3e18 as bigint);         _col0 ---------------------  9223372036854775807 (1 row) ```</body>
		<created>2018-05-17 18:59:38</created>
		<closed>2018-07-23 18:44:49</closed>
	</bug>
	<bug>
		<id>10592</id>
		<title>Incorrect results due to bad assumption in PushAggregationThroughOuterJoin</title>
		<body>```sql WITH     t (a, b) AS (VALUES (1, 'a'), (1, 'b')),     u (a) AS (VALUES 1) SELECT DISTINCT v.a FROM (     SELECT DISTINCT a, b     FROM t) v LEFT JOIN u on v.a = u.a ```  Produces:  ```  a ---  1  1 (2 rows) ```  Query plan:  ```  Fragment 0 [SINGLE]      Output layout: [field]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - Output[a] =&gt; [field:integer]              a := field          - RemoteSource[1] =&gt; [field:integer]   Fragment 1 [HASH]      Output layout: [field]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - CrossJoin =&gt; [field:integer]              Distribution: REPLICATED          - LeftJoin[("field" = "field_12")] =&gt; [field:integer]                  Distribution: PARTITIONED              - RemoteSource[2] =&gt; [field:integer]              - LocalExchange[HASH] ("field_12") =&gt; field_12:integer                  - RemoteSource[3] =&gt; [field_12:integer]          - LocalExchange[SINGLE] () =&gt;              - RemoteSource[4] =&gt; []   Fragment 2 [SINGLE]      Output layout: [field]      Output partitioning: HASH [field]      Execution Flow: UNGROUPED_EXECUTION      - Project[] =&gt; [field:integer]              Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}          - Aggregate(FINAL)[field, field_0] =&gt; [field:integer, field_0:varchar(1)]                  Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}              - LocalExchange[HASH] ("field", "field_0") =&gt; field:integer, field_0:varchar(1)                      Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}                  - Aggregate(PARTIAL)[field, field_0] =&gt; [field:integer, field_0:varchar(1)]                          Cost: {rows: ? (?), cpu: 40.00, memory: ?, network: 0.00}                      - Values =&gt; [field:integer, field_0:varchar(1)]                              Cost: {rows: 2 (40B), cpu: 0.00, memory: 0.00, network: 0.00}                              (1, 'a')                              (1, 'b')   Fragment 3 [SINGLE]      Output layout: [field_12]      Output partitioning: HASH [field_12]      Execution Flow: UNGROUPED_EXECUTION      - Aggregate(FINAL)[field_12] =&gt; [field_12:integer]              Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}          - LocalExchange[HASH] ("field_12") =&gt; field_12:integer                  Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}              - Aggregate(PARTIAL)[field_12] =&gt; [field_12:integer]                      Cost: {rows: ? (?), cpu: 10.00, memory: ?, network: 0.00}                  - Values =&gt; [field_12:integer]                          Cost: {rows: 1 (10B), cpu: 0.00, memory: 0.00, network: 0.00}                          (1)   Fragment 4 [SINGLE]      Output layout: []      Output partitioning: BROADCAST []      Execution Flow: UNGROUPED_EXECUTION      - Aggregate =&gt; []              Cost: {rows: ? (?), cpu: 0.00, memory: ?, network: 0.00}          - Values =&gt; []                  Cost: {rows: 1 (0B), cpu: 0.00, memory: 0.00, network: 0.00}                  () ```  </body>
		<created>2018-05-10 06:54:41</created>
		<closed>2018-05-18 17:27:23</closed>
	</bug>
	<bug>
		<id>10591</id>
		<title>Function Implementation Missing error: `IS_DISTINCT_FROM(json,json):boolean not found`</title>
		<body>Presto version 0.201 fails some queries with the following stack trace:  ``` com.google.common.util.concurrent.UncheckedExecutionException: com.facebook.presto.spi.PrestoException: $operator$IS_DISTINCT_FROM(json,json):boolean not found at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2052) at com.google.common.cache.LocalCache.get(LocalCache.java:3943) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3967) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4952) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4958) at com.facebook.presto.sql.gen.JoinCompiler.compilePagesHashStrategyFactory(JoinCompiler.java:154) at com.facebook.presto.sql.gen.JoinCompiler.compilePagesHashStrategyFactory(JoinCompiler.java:145) at com.facebook.presto.operator.MultiChannelGroupByHash.&lt;init&gt;(MultiChannelGroupByHash.java:131) at com.facebook.presto.operator.GroupByHash.createGroupByHash(GroupByHash.java:55) at com.facebook.presto.operator.aggregation.builder.InMemoryHashAggregationBuilder.&lt;init&gt;(InMemoryHashAggregationBuilder.java:119) at com.facebook.presto.operator.aggregation.builder.InMemoryHashAggregationBuilder.&lt;init&gt;(InMemoryHashAggregationBuilder.java:80) at com.facebook.presto.operator.HashAggregationOperator.addInput(HashAggregationOperator.java:373) at com.facebook.presto.operator.Driver.processInternal(Driver.java:379) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:282) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:672) at com.facebook.presto.operator.Driver.processFor(Driver.java:276) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) at java.base/java.lang.Thread.run(Thread.java:844) Caused by: com.facebook.presto.spi.PrestoException: $operator$IS_DISTINCT_FROM(json,json):boolean not found at com.facebook.presto.metadata.FunctionRegistry.doGetSpecializedFunctionKey(FunctionRegistry.java:994) at com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(CacheLoader.java:165) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3524) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2273) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2156) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2046) at com.google.common.cache.LocalCache.get(LocalCache.java:3943) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3967) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4952) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4958) at com.facebook.presto.metadata.FunctionRegistry.getSpecializedFunctionKey(FunctionRegistry.java:920) at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:909) at com.facebook.presto.operator.annotations.ScalarImplementationDependency.resolve(ScalarImplementationDependency.java:45) at com.facebook.presto.operator.annotations.ScalarImplementationDependency.resolve(ScalarImplementationDependency.java:26) at com.facebook.presto.operator.ParametricFunctionHelpers.bindDependencies(ParametricFunctionHelpers.java:32) at com.facebook.presto.operator.scalar.annotations.ScalarImplementation.specialize(ScalarImplementation.java:150) at com.facebook.presto.operator.scalar.ParametricScalar.specialize(ParametricScalar.java:111) at com.facebook.presto.metadata.FunctionRegistry.lambda$new$0(FunctionRegistry.java:379) at com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(CacheLoader.java:165) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3524) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2273) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2156) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2046) at com.google.common.cache.LocalCache.get(LocalCache.java:3943) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3967) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4952) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4958) at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:909) at com.facebook.presto.sql.gen.JoinCompiler.generatePositionNotDistinctFromRowWithPageMethod(JoinCompiler.java:709) at com.facebook.presto.sql.gen.JoinCompiler.internalCompileHashStrategy(JoinCompiler.java:232) at com.facebook.presto.sql.gen.JoinCompiler.lambda$new$1(JoinCompiler.java:106) at com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(CacheLoader.java:165) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3524) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2273) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2156) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2046) ... 21 more ```</body>
		<created>2018-05-10 05:34:04</created>
		<closed>2018-05-15 18:01:00</closed>
	</bug>
	<bug>
		<id>10587</id>
		<title>Cannot request more data when base processor is finished</title>
		<body>I am running a pretty large query (large in terms of size of the key in group by), which is like ``` select id, date, count(*) from table WHERE  date BETWEEN A AND  B group BY  1,  2 having   count(*) &gt; 1) ``` the id, date combinations is really huge and I am enabling spill to disk,  it is on release 0.199. and the query runs around half an hour, then got failed due to: ``` java.lang.IllegalStateException: Cannot request more data when base processor is finished at com.google.common.base.Preconditions.checkState(Preconditions.java:504) at com.facebook.presto.operator.WorkProcessorUtils$4.process(WorkProcessorUtils.java:212) at com.facebook.presto.operator.WorkProcessorUtils$5.process(WorkProcessorUtils.java:241) at com.facebook.presto.operator.HashAggregationOperator.getOutput(HashAggregationOperator.java:480) at com.facebook.presto.operator.Driver.processInternal(Driver.java:392) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:281) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:687) at com.facebook.presto.operator.Driver.processFor(Driver.java:275) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ``` What's happening here?</body>
		<created>2018-05-09 21:55:49</created>
		<closed>2018-05-10 09:39:09</closed>
	</bug>
	<bug>
		<id>10573</id>
		<title>Hive metastore glue connector fails when db,table, or partition is missing properties</title>
		<body>Hi, I'm getting a stacktrace when the Glue database, table and/or partition are missing properties. i.e. properties = null. ``` 2018-05-07T09:40:43.497Z        WARN    http-worker-137 com.facebook.presto.server.ThrowableMapper      Request failed for /v1/statement java.lang.NullPointerException         at java.util.HashMap.putMapEntries(HashMap.java:501)         at java.util.LinkedHashMap.&lt;init&gt;(LinkedHashMap.java:384)         at com.facebook.presto.hive.metastore.Table$Builder.setParameters(Table.java:240)         at com.facebook.presto.hive.metastore.glue.converter.GlueToPrestoConverter.convertTable(GlueToPrestoConverter.java:71)         at com.facebook.presto.hive.metastore.glue.GlueHiveMetastore.getTable(GlueHiveMetastore.java:202)         at com.facebook.presto.hive.metastore.CachingHiveMetastore.loadTable(CachingHiveMetastore.java:255)         at com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(CacheLoader.java:165)         at com.google.common.cache.CacheLoader$1.load(CacheLoader.java:188)         at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3524)         at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2273)         at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2156)         at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2046)         at com.google.common.cache.LocalCache.get(LocalCache.java:3943)         at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3967)         at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4952)         at com.facebook.presto.hive.metastore.CachingHiveMetastore.get(CachingHiveMetastore.java:208)         at com.facebook.presto.hive.metastore.CachingHiveMetastore.getTable(CachingHiveMetastore.java:250)         at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.getTable(SemiTransactionalHiveMetastore.java:135)         at com.facebook.presto.hive.HiveMetadata.getViews(HiveMetadata.java:1096)         at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.getViews(ClassLoaderSafeConnectorMetadata.java:328)         at com.facebook.presto.metadata.MetadataManager.getView(MetadataManager.java:788)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitTable(StatementAnalyzer.java:782)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitTable(StatementAnalyzer.java:253)         at com.facebook.presto.sql.tree.Table.accept(Table.java:53)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:265)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.analyzeFrom(StatementAnalyzer.java:1866)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:947)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:253)         at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:265)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:275)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:676)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:253)         at com.facebook.presto.sql.tree.Query.accept(Query.java:94)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:265)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:239)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:72)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:64)         at com.facebook.presto.execution.SqlQueryExecution.&lt;init&gt;(SqlQueryExecution.java:169)         at com.facebook.presto.execution.SqlQueryExecution$SqlQueryExecutionFactory.createQueryExecution(SqlQueryExecution.java:643) ```   Could probably be solved with some replacements in presto-hive/src/main/java/com/facebook/presto/hive/metastore/glue/converter/GlueToPrestoConverter.java ``` -                .setParameters(glueDb.getParameters()) +                .setParameters(firstNonNull(glueDb.getParameters(), ImmutableMap.of())) ```</body>
		<created>2018-05-08 11:43:37</created>
		<closed>2018-12-12 20:48:22</closed>
	</bug>
	<bug>
		<id>10508</id>
		<title>Planning failure when column names are reused in ORDER BY query</title>
		<body>```sql SELECT     k,     SUM(a) a,     SUM(b) a FROM (VALUES (1, 2, 3)) t(k, a, b) GROUP BY k ORDER BY k ```  fails with   ``` Query 20180427_013334_04199_fv2gg failed: line 3:9: Column 'a' is ambiguous com.facebook.presto.sql.analyzer.SemanticException: line 3:9: Column 'a' is ambiguous at com.facebook.presto.sql.analyzer.SemanticExceptions.ambiguousAttributeException(SemanticExceptions.java:44) at com.facebook.presto.sql.analyzer.Scope.resolveField(Scope.java:137) at com.facebook.presto.sql.analyzer.Scope.tryResolveField(Scope.java:130) at com.facebook.presto.sql.analyzer.Scope.tryResolveField(Scope.java:111) at com.facebook.presto.sql.planner.TranslationMap.getSymbol(TranslationMap.java:313) at com.facebook.presto.sql.planner.TranslationMap.access$700(TranslationMap.java:43) at com.facebook.presto.sql.planner.TranslationMap$2.rewriteExpressionWithResolvedName(TranslationMap.java:253) at com.facebook.presto.sql.planner.TranslationMap$2.rewriteIdentifier(TranslationMap.java:247) at com.facebook.presto.sql.planner.TranslationMap$2.rewriteIdentifier(TranslationMap.java:222) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitIdentifier(ExpressionTreeRewriter.java:734) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitIdentifier(ExpressionTreeRewriter.java:70) at com.facebook.presto.sql.tree.Identifier.accept(Identifier.java:70) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:50) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.access$300(ExpressionTreeRewriter.java:25) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:539) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:70) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:119) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:67) at com.facebook.presto.sql.planner.TranslationMap$2.rewriteExpression(TranslationMap.java:226) at com.facebook.presto.sql.planner.TranslationMap$2.rewriteExpression(TranslationMap.java:222) at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteFunctionCall(ExpressionRewriter.java:105) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:479) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:70) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:119) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewriteWith(ExpressionTreeRewriter.java:37) at com.facebook.presto.sql.planner.TranslationMap.translateNamesToSymbols(TranslationMap.java:221) at com.facebook.presto.sql.planner.TranslationMap.put(TranslationMap.java:158) at com.facebook.presto.sql.planner.QueryPlanner.lambda$planBuilderFor$1(QueryPlanner.java:278) at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:407) at com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.forEach(ImmutableMapEntrySet.java:72) at com.facebook.presto.sql.planner.QueryPlanner.planBuilderFor(QueryPlanner.java:278) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:172) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:594) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:97) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:253) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:125) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:587) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:97) at com.facebook.presto.sql.tree.Query.accept(Query.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:382) at com.facebook.presto.sql.planner.LogicalPlanner.planStatementWithoutOutput(LogicalPlanner.java:180) at com.facebook.presto.sql.planner.LogicalPlanner.planStatement(LogicalPlanner.java:161) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:134) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:129) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:310) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:295) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:251) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) at java.base/java.lang.Thread.run(Thread.java:844) ```  The issue doesn't happen if the ORDER BY clause is removed or if the outputs of the SELECT clause don't reuse the names of the FROM table. </body>
		<created>2018-04-27 01:37:47</created>
		<closed>2018-04-27 13:46:35</closed>
	</bug>
	<bug>
		<id>10502</id>
		<title>bug: presto-geospatial map size overflow problem </title>
		<body>/presto/presto-geospatial/src/main/java/com/facebook/presto/plugin/geospatial/BingTileFunctions.java  &gt; private static int mapSize(int zoomLevel) &gt;     { &gt;         return 256 &lt;&lt; zoomLevel; &gt;     }  since zoomLevel can be [1, 23], it will over flow the map size. https://msdn.microsoft.com/en-us/library/bb259689.aspx</body>
		<created>2018-04-26 07:11:17</created>
		<closed>2018-04-27 20:37:20</closed>
	</bug>
	<bug>
		<id>10479</id>
		<title>Problem with legacy row field access</title>
		<body>The following query fails with the stack trace below:  ``` WITH R AS (      SELECT 1, MAX(x) T      FROM (VALUES ROW(ROW(3, 4))) S(x)      GROUP BY 1  )  SELECT T.field0 FROM R; ```   ``` com.facebook.presto.sql.analyzer.SemanticException: Column ':input(0).field0' cannot be resolved         at com.facebook.presto.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:39)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitDereferenceExpression(ExpressionAnalyzer.java:440)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitDereferenceExpression(ExpressionAnalyzer.java:292)         at com.facebook.presto.sql.tree.DereferenceExpression.accept(DereferenceExpression.java:54)         at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:313)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:263)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1498)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1480)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithInputs(ExpressionAnalyzer.java:1468)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypesFromInput(ExpressionAnalyzer.java:1439)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1137)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:1075)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:646)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:697)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:646)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82)         at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:425)         at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:351)         at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:83)         at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:350)         at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324)         at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:129)         at jdk.internal.reflect.GeneratedMethodAccessor260.invoke(Unknown Source)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.base/java.lang.reflect.Method.invoke(Method.java:564) ```</body>
		<created>2018-04-24 04:52:37</created>
		<closed>2018-04-24 16:54:13</closed>
	</bug>
	<bug>
		<id>10428</id>
		<title>LEFT JOIN fails with "A fixed distribution is required for JOIN when spilling is enabled"</title>
		<body>I've started experimenting with enabling spilling on a 3 node cluster.   It seems when a query on the right side of a LEFT JOIN has a non-existent partition, the query consistently fails with `A fixed distribution is required for JOIN when spilling is enabled`. This query otherwise runs fine with spilling disabled.  On the Presto user forum, @findepi indicated this is caused by  &gt;The planner created a plan where spilling is not possible to do   Here is the full stack trace: ``` java.lang.IllegalStateException: A fixed distribution is required for JOIN when spilling is enabled at com.google.common.base.Preconditions.checkState(Preconditions.java:444) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.getJoinOperatorsCountForSpill(LocalExecutionPlanner.java:2008) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createLookupJoin(LocalExecutionPlanner.java:1988) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createLookupJoin(LocalExecutionPlanner.java:1821) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:1526) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:221) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1115) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:1075) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:425) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:396) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:83) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:350) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:129) at sun.reflect.GeneratedMethodAccessor502.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104) at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268) at org.glassfish.jersey.internal.Errors.process(Errors.java:316) at org.glassfish.jersey.internal.Errors.process(Errors.java:298) at org.glassfish.jersey.internal.Errors.process(Errors.java:268) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:860) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) at com.facebook.presto.server.security.AuthenticationFilter.doFilter(AuthenticationFilter.java:69) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:64) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:455) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:190) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:61) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.Server.handle(Server.java:530) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:347) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:256) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:382) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626) at java.lang.Thread.run(Thread.java:748)  ```   Here are steps to reproduce the error: ``` CREATE TABLE customers (   email varchar,   companyid int ) WITH (   format = 'PARQUET',   partitioned_by = ARRAY['companyid'] );  CREATE TABLE orders (   email varchar,   companyid int ) WITH (   format = 'PARQUET',   partitioned_by = ARRAY['companyid'] );  INSERT INTO customers VALUES('abc@email.com', 1234);  SELECT * FROM customers c LEFT JOIN orders o ON c.companyid = o.companyid and c.email = o.email WHERE c.companyid  = 1234; ```  Thanks for your time!</body>
		<created>2018-04-17 16:09:26</created>
		<closed>2018-04-19 21:27:43</closed>
	</bug>
	<bug>
		<id>10427</id>
		<title>Query fails with: "Build execution is GROUPED_EXECUTION. Probe execution is expected be GROUPED_EXECUTION, but is UNGROUPED_EXECUTION."</title>
		<body>@haozhun is working on a fix for this issue.  ``` java.sql.SQLException: Query failed (#20180417_034948_02872_dfg6z): Build execution is GROUPED_EXECUTION. Probe execution is expected be GROUPED_EXECUTION, but is UNGROUPED_EXECUTION. at com.facebook.presto.jdbc.PrestoResultSet.resultsException(PrestoResultSet.java:1798) at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1786) at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1751) at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:141) at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.hasNext(AbstractIterator.java:136) at com.facebook.presto.jdbc.internal.guava.collect.TransformedIterator.hasNext(TransformedIterator.java:42) at com.facebook.presto.jdbc.internal.guava.collect.Iterators$ConcatenatedIterator.getTopMetaIterator(Iterators.java:1319) at com.facebook.presto.jdbc.internal.guava.collect.Iterators$ConcatenatedIterator.hasNext(Iterators.java:1335) at com.facebook.presto.jdbc.PrestoResultSet.next(PrestoResultSet.java:142) at com.facebook.presto.verifier.Validator.convertJdbcResultSet(Validator.java:513) at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.google.common.util.concurrent.SimpleTimeLimiter$1$1.call(SimpleTimeLimiter.java:95) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:206) at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:238) at com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(SimpleTimeLimiter.java:135) at com.google.common.util.concurrent.SimpleTimeLimiter.access$100(SimpleTimeLimiter.java:48) at com.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(SimpleTimeLimiter.java:101) at com.sun.proxy.$Proxy86.convert(Unknown Source) at com.facebook.presto.verifier.Validator.executeQuery(Validator.java:439) at com.facebook.presto.verifier.Validator.executeQueryTest(Validator.java:308) at com.facebook.presto.verifier.Validator.validate(Validator.java:219) at com.facebook.presto.verifier.Validator.valid(Validator.java:191) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.lang.IllegalStateException: Build execution is GROUPED_EXECUTION. Probe execution is expected be GROUPED_EXECUTION, but is UNGROUPED_EXECUTION. at com.google.common.base.Preconditions.checkState(Preconditions.java:504) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createLookupSourceFactory(LocalExecutionPlanner.java:1846) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createLookupJoin(LocalExecutionPlanner.java:1820) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:1526) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:279) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createLookupJoin(LocalExecutionPlanner.java:1816) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:1526) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:279) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1115) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:1075) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1115) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:1075) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:1014) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:646) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:182) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:425) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:396) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:83) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:350) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:129) at jdk.internal.reflect.GeneratedMethodAccessor732.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:564) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:200) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104) at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268) at org.glassfish.jersey.internal.Errors.process(Errors.java:316) at org.glassfish.jersey.internal.Errors.process(Errors.java:298) at org.glassfish.jersey.internal.Errors.process(Errors.java:268) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:860) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) at com.facebook.presto.server.security.AuthenticationFilter.doFilter(AuthenticationFilter.java:69) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:64) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:455) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:190) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:61) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) at org.eclipse.jetty.server.Server.handle(Server.java:530) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:347) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:256) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140) at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131) at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:382) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626) at java.base/java.lang.Thread.run(Thread.java:844) ```</body>
		<created>2018-04-17 14:58:26</created>
		<closed>2018-04-19 21:25:19</closed>
	</bug>
	<bug>
		<id>10353</id>
		<title>Presto throws exception for all queries on partitioned Hive tables with "float" data type if column statistics are calculated, and partition column is not specified as a filter</title>
		<body>Consider the following Hive table creation &amp; insert script:  ``` CREATE TABLE test (mgrs varchar(11), testVal float) PARTITIONED BY (part_digit tinyint) ROW FORMAT DELIMITED FIELDS TERMINATED BY '|' STORED AS TEXTFILE; INSERT INTO test PARTITION(part_digit=1) VALUES ('16REU833621',0.0); INSERT INTO test PARTITION(part_digit=2) VALUES ('11SLT745622',14.20005); ```  We can now run the following commands in Presto CLI: ``` SHOW STATS FOR hive.default.test;  column_name | data_size | distinct_values_count | nulls_fraction | row_count | low_value | high_value -------------+-----------+-----------------------+----------------+-----------+-----------+------------  mgrs        | NULL      | NULL                  | NULL           | NULL      | NULL      | NULL  part_digit  | NULL      |                   2.0 |            0.0 | NULL      | 1         | 2  testval     | NULL      | NULL                  | NULL           | NULL      | NULL      | NULL  NULL        | NULL      | NULL                  | NULL           |       2.0 | NULL      | NULL  SELECT * FROM hive.default.test;     mgrs     | testval  | part_digit -------------+----------+------------  11SLT745622 | 14.20005 |          2  16REU833621 |      0.0 |          1 (2 rows) ```  But if we go back to Hive and calculate column statistics on the table: ``` ANALYZE TABLE test PARTITION(part_digit) COMPUTE STATISTICS; ANALYZE TABLE test PARTITION(part_digit) COMPUTE STATISTICS FOR COLUMNS; ```  Then we get an error when interacting with the table in Presto UNLESS we specify the partition: ``` SHOW STATS FOR test; Query 20180409_200805_00073_m7qye failed: Object '0' does not match type long  SELECT * FROM hive.default.test; Query 20180409_195322_00069_m7qye failed: Object '0' does not match type long  SELECT * FROM hive.default.test WHERE part_digit=1;     mgrs     | testval | part_digit -------------+---------+------------  16REU833621 |     0.0 |          1 (1 row) ```  However we can go back and change the column type to "double" in Hive: ``` ALTER TABLE test CHANGE COLUMN testval testval double; ```  ...and now the Presto query works again:  ``` SELECT * FROM hive.default.test;     mgrs     | testval  | part_digit -------------+----------+------------  11SLT745622 | 14.20005 |          2  16REU833621 |      0.0 |          1 (2 rows) ```  Here is the full stack trace of the "Object '0' does not match type long" exception: ``` java.lang.IllegalArgumentException: Object '0' does not match type long at com.facebook.presto.spi.predicate.Utils.nativeValueToBlock(Utils.java:33) at com.facebook.presto.hive.statistics.MetastoreHiveStatisticsProvider.lambda$getTableStatistics$9(MetastoreHiveStatisticsProvider.java:163) at java.util.function.BinaryOperator.lambda$minBy$0(BinaryOperator.java:59) at java.util.stream.ReduceOps$2ReducingSink.accept(ReduceOps.java:123) at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:479) at java.util.stream.ReferencePipeline.min(ReferencePipeline.java:520) at com.facebook.presto.hive.statistics.MetastoreHiveStatisticsProvider.getTableStatistics(MetastoreHiveStatisticsProvider.java:167) at com.facebook.presto.hive.HiveMetadata.getTableStatistics(HiveMetadata.java:401) at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.getTableStatistics(ClassLoaderSafeConnectorMetadata.java:176) at com.facebook.presto.metadata.MetadataManager.getTableStatistics(MetadataManager.java:368) at com.facebook.presto.cost.CoefficientBasedStatsCalculator$Visitor.visitTableScan(CoefficientBasedStatsCalculator.java:154) at com.facebook.presto.cost.CoefficientBasedStatsCalculator$Visitor.visitTableScan(CoefficientBasedStatsCalculator.java:75) at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:136) at com.facebook.presto.cost.CoefficientBasedStatsCalculator.calculateStats(CoefficientBasedStatsCalculator.java:72) at com.facebook.presto.cost.SelectingStatsCalculator.calculateStats(SelectingStatsCalculator.java:55) at com.facebook.presto.cost.CachingStatsProvider.getStats(CachingStatsProvider.java:73) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter$Visitor.isKnownPlanNodeStatsOrCost(PlanPrinter.java:1386) at java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90) at java.util.Spliterators$ArraySpliterator.tryAdvance(Spliterators.java:958) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230) at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter$Visitor.printPlanNodesStatsAndCost(PlanPrinter.java:1376) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:907) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:592) at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:136) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.&lt;init&gt;(PlanPrinter.java:208) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.&lt;init&gt;(PlanPrinter.java:177) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.&lt;init&gt;(PlanPrinter.java:164) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.textLogicalPlan(PlanPrinter.java:260) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.formatFragment(PlanPrinter.java:368) at com.facebook.presto.sql.planner.planPrinter.PlanPrinter.textPlanFragment(PlanPrinter.java:304) at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:124) at com.facebook.presto.execution.PlanFlattener$FlattenedPlanFragment.fromPlanFragment(PlanFlattener.java:97) at com.facebook.presto.execution.PlanFlattener.lambda$flatten$0(PlanFlattener.java:67) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.execution.PlanFlattener.flatten(PlanFlattener.java:68) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:377) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:343) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:275) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)` ``` Thank you</body>
		<created>2018-04-09 19:57:40</created>
		<closed>2018-04-20 10:53:45</closed>
	</bug>
	<bug>
		<id>10285</id>
		<title>hash values calculated and shuffled but not used by subsequent stages for aggregation</title>
		<body> In the following plan, hashvalue_10 was created in Fragment2 as the hash value for interface. Then this value is shuffled and fragment1 was getting it as hashvalue_9. But then this value is not used, but instead, a new hashvalue $hashvalue was created on interface. This increases the amount of data shuffled over the network, wasting buffers:  ``` explain (type distributed) select custkey, count(*) from orders group by custkey;   Fragment 0 [SINGLE]      Output layout: [custkey, count]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - Output[custkey, _col1] =&gt; [custkey:bigint, count:bigint]              _col1 := count          - RemoteSource[1] =&gt; [custkey:bigint, count:bigint]   Fragment 1 [HASH]      Output layout: [custkey, count]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - Aggregate(FINAL)[custkey] =&gt; [custkey:bigint, count:bigint]              count := "count"("count_8")          - LocalExchange[HASH][$hashvalue] ("custkey") =&gt; custkey:bigint, count_8:bigint, $hashvalue:bigint              - RemoteSource[2] =&gt; [custkey:bigint, count_8:bigint, $hashvalue_9:bigint]   Fragment 2 [tpch:orders:15000]      Output layout: [custkey, count_8, $hashvalue_10]      Output partitioning: HASH [custkey][$hashvalue_10]      Execution Flow: UNGROUPED_EXECUTION      - Project[] =&gt; [custkey:bigint, count_8:bigint, $hashvalue_10:bigint]              Cost: {rows: ? (?), cpu: ?, memory: ?, network: 0.00}              $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("custkey"), 0))          - Aggregate(PARTIAL)[custkey] =&gt; [custkey:bigint, count_8:bigint]                  Cost: {rows: ? (?), cpu: 300000.00, memory: ?, network: 0.00}                  count_8 := "count"(*)              - TableScan[tpch:tpch:orders:sf0.01, originalConstraint = true] =&gt; [custkey:bigint]                      Cost: {rows: 15000 (146.48kB), cpu: 150000.00, memory: 0.00, network: 0.00}                      custkey := tpch:custkey                      tpch:orderstatus                          :: [[F], [O], [P]] ``` </body>
		<created>2018-03-28 23:59:13</created>
		<closed>2018-03-29 09:49:54</closed>
	</bug>
	<bug>
		<id>10249</id>
		<title>Disallow creating Hive tables with unsupported partition types</title>
		<body>``` presto&gt; create table test_part with (partitioned_by = array['a']) as select 123 x, array['foo'] a; CREATE TABLE: 1 row     presto&gt; select * from test_part; Query 20180323_212832_42185_mpcaa failed: Unsupported Type [array(varchar)] for partition: a=%5Bfoo%5D </body>
		<created>2018-03-23 21:30:34</created>
		<closed>2018-06-05 17:42:29</closed>
	</bug>
	<bug>
		<id>10238</id>
		<title>NullPointerException in PartitionedLookupSourceFactory</title>
		<body>``` java.lang.NullPointerException: at index 0 at com.google.common.collect.ObjectArrays.checkElementNotNull(ObjectArrays.java:236) at com.google.common.collect.ObjectArrays.checkElementsNotNull(ObjectArrays.java:226) at com.google.common.collect.ObjectArrays.checkElementsNotNull(ObjectArrays.java:220) at com.google.common.collect.ImmutableList.copyOf(ImmutableList.java:291) at com.facebook.presto.operator.PartitionedLookupSourceFactory.supplyLookupSources(PartitionedLookupSourceFactory.java:260) at com.facebook.presto.operator.PartitionedLookupSourceFactory.lendPartitionLookupSource(PartitionedLookupSourceFactory.java:189) at com.facebook.presto.operator.HashBuilderOperator.finishInput(HashBuilderOperator.java:509) at com.facebook.presto.operator.HashBuilderOperator.finish(HashBuilderOperator.java:458) at com.facebook.presto.operator.Driver.processInternal(Driver.java:399) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:278) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:645) at com.facebook.presto.operator.Driver.processFor(Driver.java:272) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641) at java.base/java.lang.Thread.run(Thread.java:844)</body>
		<created>2018-03-22 20:37:17</created>
		<closed>2018-04-04 15:03:41</closed>
	</bug>
	<bug>
		<id>10223</id>
		<title>Query kill button is not working</title>
		<body>With the latest release I tried killing several queries with the `Kill` button in the query details page and it doesn't work.</body>
		<created>2018-03-21 23:01:32</created>
		<closed>2018-08-11 16:17:44</closed>
	</bug>
	<bug>
		<id>10156</id>
		<title>Planning failure for multiple aggregates with same distinct inputs</title>
		<body>```sql SELECT count(DISTINCT x), sum(DISTINCT x) FROM (VALUES 1, 1, 2, 3) t(x) ```  fails with  ``` Query 20180314_001708_00128_g7z3n failed: Invalid node. Aggregation dependencies ([x_1]) not in source plan output ([field, $hashvalue]) java.lang.IllegalArgumentException: Invalid node. Aggregation dependencies ([x_1]) not in source plan output ([field, $hashvalue]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:146) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:613) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:79) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:122) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:182) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:465) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:115) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:182) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:292) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:90) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:85) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validateFinalPlan$0(PlanSanityChecker.java:54) at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validateFinalPlan(PlanSanityChecker.java:54) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:133) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:115) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:364) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:343) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:275) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2018-03-14 03:46:25</created>
		<closed>2018-03-20 02:36:33</closed>
	</bug>
	<bug>
		<id>10134</id>
		<title>QueryManager is reporting RunningQueries wrong</title>
		<body>https://fburl.com/ods/0qjke3vt RunningQueries from QueryManager was 450-500 sometimes while the RunningQueries counters from the resource groups are just 40-50.</body>
		<created>2018-03-09 20:15:18</created>
		<closed>2019-03-27 22:12:50</closed>
	</bug>
	<bug>
		<id>10085</id>
		<title>Planning fails for queries with non-deterministic predicate pushdownable to semi-join source</title>
		<body>Example query:  ``` SELECT * FROM lineitem WHERE orderkey NOT IN (SELECT orderkey FROM orders) AND orderkey = random(5) ```  fails with:  ``` java.lang.IllegalArgumentException: Only deterministic expressions may be considered for rewrite  at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122) at com.facebook.presto.sql.planner.EqualityInference.rewriteExpression(EqualityInference.java:106) at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitSemiJoin(PredicatePushDown.java:811) at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitSemiJoin(PredicatePushDown.java:115) at com.facebook.presto.sql.planner.plan.SemiJoinNode.accept(SemiJoinNode.java:139) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:275) at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:115) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:72) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ... ```  This happens when `PredicatePushDown` tries to push down `orderkey = random(5)` to semi-join source responsible for scanning `lineitem` table. It seems like a valid pushdown as semi-join does not creates copies of rows from the source side.</body>
		<created>2018-03-04 21:15:27</created>
		<closed>2018-03-13 20:30:17</closed>
	</bug>
	<bug>
		<id>10036</id>
		<title>Memory leak: OperatorContext holds reference to Driver and Operators after Drivers are closed</title>
		<body>`OperatorContext#memoryRevocationRequestListener` comes from lambda from `Driver`. `OperatorContext` are kept for some time after sql tasks are finished. However, since `memoryRevocationRequestListener` isn't reset, actual Operators (and all structures they had) are kept too.</body>
		<created>2018-02-27 16:13:22</created>
		<closed>2018-02-28 10:06:17</closed>
	</bug>
	<bug>
		<id>10025</id>
		<title>Incorrect return value for ROUND_N with negative N for types other than DECIMAL</title>
		<body>`ROUND(SMALLINT '99', -1)` should return 100, now it returns 99.</body>
		<created>2018-02-26 14:10:28</created>
		<closed>2019-01-24 12:06:23</closed>
	</bug>
	<bug>
		<id>9962</id>
		<title>Count(*) on empty relation return NULL when optimize_mixed_distinct_aggregations is turned on</title>
		<body>``` presto:tiny&gt; set session optimize_mixed_distinct_aggregations = true; SET SESSION presto:tiny&gt; SELECT count(*),count(distinct nationkey) FROM (SELECT * FROM nation EXCEPT SELECT * FROM nation);  _col0 | _col1 -------+-------  NULL  |     0 (1 row) ```</body>
		<created>2018-02-14 13:40:37</created>
		<closed>2018-02-14 15:17:33</closed>
	</bug>
	<bug>
		<id>9939</id>
		<title>log() function does not conform to SQL 2016</title>
		<body>From section `6.30 &lt;numeric value function&gt;`:  ``` &lt;general logarithm function&gt; ::=   LOG &lt;left paren&gt; &lt;general logarithm base&gt; &lt;comma&gt;       &lt;general logarithm argument&gt; &lt;right paren&gt; ```  The current implementation has the arguments reversed `log(value, base)`.</body>
		<created>2018-02-11 00:45:52</created>
		<closed>2018-04-25 01:06:13</closed>
	</bug>
	<bug>
		<id>9896</id>
		<title>EXPLAIN CREATE TABLE AS SELECT creates a table, should be side-effect free</title>
		<body>``` presto&gt; use memory.default; USE presto:default&gt; explain create table x as select 1 c;                                                                                                                                Query Plan -------------------------------------------------------------------------------------------------------------------------------------------------------  - Output[rows] =&gt; [rows:bigint]      - TableCommit[memory:INSTANCE:MemoryOutputTableHandle{table=MemoryTableHandle{connectorId=memory, schemaName=default, tableName=x, tableId=0, columnHandles=...          - LocalExchange[SINGLE] () =&gt; partialrows:bigint, fragment:varbinary              - RemoteExchange[GATHER] =&gt; partialrows:bigint, fragment:varbinary                  - TableWriter =&gt; [partialrows:bigint, fragment:varbinary]                          c := expr                      ..................  [...]  presto:default&gt; explain create table x as select 1 c; Query 20180205_101139_00002_ijv9f failed: line 1:9: Destination table 'memory.default.x' already exists  elect * from x;  c --- (0 rows) ```  `EXPLAIN` renders query plan without actually running the query, so `EXPLAIN CREATE TABLE ... AS SELECT ...` should do just that. Currently, it creates the table (but does't populate it). </body>
		<created>2018-02-05 10:12:35</created>
		<closed>2019-02-01 11:28:27</closed>
	</bug>
	<bug>
		<id>9881</id>
		<title>Race condition in OuterPositionTracker</title>
		<body>We saw an error in the OuterPositionTracker, where the outer position iterator is being fetched while there are still reference counts.   I think this might be caused because the query was tearing down due to a limit.  Here is the stack. ``` com.google.common.base.VerifyException at com.google.common.base.Verify.verify(Verify.java:99) at com.facebook.presto.operator.PartitionedLookupSource$OuterPositionTracker$Factory.getOuterPositionIterator(PartitionedLookupSource.java:299) at com.facebook.presto.operator.PartitionedLookupSource$1.getOuterPositionIterator(PartitionedLookupSource.java:65) at com.facebook.presto.operator.PartitionedLookupSourceFactory.getOuterPositionIterator(PartitionedLookupSourceFactory.java:362) at com.facebook.presto.operator.LookupJoinOperatorFactory$PerLifespanData.lambda$new$1(LookupJoinOperatorFactory.java:315) at com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture.doTransform(AbstractTransformFuture.java:239) at com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture.doTransform(AbstractTransformFuture.java:229) at com.google.common.util.concurrent.AbstractTransformFuture.run(AbstractTransformFuture.java:130) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:902) at com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:813) at com.google.common.util.concurrent.AbstractFuture.setFuture(AbstractFuture.java:713) at com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture.setResult(AbstractTransformFuture.java:221) at com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture.setResult(AbstractTransformFuture.java:200) at com.google.common.util.concurrent.AbstractTransformFuture.run(AbstractTransformFuture.java:177) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:902) at com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:813) at com.google.common.util.concurrent.AbstractFuture.set(AbstractFuture.java:655) at com.google.common.util.concurrent.SettableFuture.set(SettableFuture.java:48) at com.facebook.presto.operator.ReferenceCount.release(ReferenceCount.java:55) at com.google.common.io.Closer.close(Closer.java:216) at com.facebook.presto.operator.LookupJoinOperator.close(LookupJoinOperator.java:514) at com.facebook.presto.operator.Driver.destroyIfNecessary(Driver.java:496) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:667) at com.facebook.presto.operator.Driver.processFor(Driver.java:272) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163) at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2018-02-02 00:53:02</created>
		<closed>2018-02-02 08:25:21</closed>
	</bug>
	<bug>
		<id>9880</id>
		<title>Lambda function couldn't be found in FunctionRegistry if return type is a literal varchar</title>
		<body>E.g. `REGEXP_REPLACE('abbabba', 'abba', x -&gt; 'm')` doesn't work but `REGEXP_REPLACE('abbabba', 'abba', x -&gt; VARCHAR 'm')` works  The error is like:  ``` com.facebook.presto.sql.analyzer.SemanticException: Unexpected parameters (varchar(7), varchar(4), com.facebook.presto.sql.analyzer.TypeSignatureProvider@6ee660fb) for function regexp_replace.             Expected: regexp_replace(varchar(x), Re2JRegExp, varchar(y)) , regexp_replace(varchar, Re2JRegExp, function(array(varchar),varchar)) , regexp_replace(varchar(x), Re2JRegExp)   at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.resolveFunction(ExpressionAnalyzer.java:1363) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:818) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:288) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:119) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:309) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:259) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1485) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1438) at com.facebook.presto.operator.scalar.FunctionAssertions.createExpression(FunctionAssertions.java:747) at com.facebook.presto.operator.scalar.FunctionAssertions.executeProjectionWithAll(FunctionAssertions.java:574) at com.facebook.presto.operator.scalar.FunctionAssertions.selectUniqueValue(FunctionAssertions.java:303) at com.facebook.presto.operator.scalar.FunctionAssertions.selectSingleValue(FunctionAssertions.java:298) at com.facebook.presto.operator.scalar.FunctionAssertions.assertFunction(FunctionAssertions.java:261) at com.facebook.presto.operator.scalar.AbstractTestFunctions.assertFunction(AbstractTestFunctions.java:99) at com.facebook.presto.operator.scalar.TestRegexpFunctions.testRegexpReplaceLambda(TestRegexpFunctions.java:168) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104) at org.testng.internal.Invoker.invokeMethod(Invoker.java:645) at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851) at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177) at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112) at org.testng.TestRunner.privateRun(TestRunner.java:756) at org.testng.TestRunner.run(TestRunner.java:610) at org.testng.SuiteRunner.runTest(SuiteRunner.java:387) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340) at org.testng.SuiteRunner.run(SuiteRunner.java:289) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293) at org.testng.TestNG.runSuitesLocally(TestNG.java:1218) at org.testng.TestNG.runSuites(TestNG.java:1133) at org.testng.TestNG.run(TestNG.java:1104) at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72) at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123) ```</body>
		<created>2018-02-02 00:52:29</created>
		<closed>2018-02-02 01:33:33</closed>
	</bug>
	<bug>
		<id>9863</id>
		<title>presto-cli prints "Query aborted by user" even for successful queries</title>
		<body>``` presto:sf100&gt; select count(*) from region;  _col0 -------      5 (1 row)  Query 20180131_042030_00000_5bgy3, FINISHED, 4 nodes http://localhost:8080/query.html?20180131_042030_00000_5bgy3 Splits: 37 total, 37 done (100.00%) CPU Time: 2.3s total,     2 rows/s,     0B/s, 66% active Per Node: 0.1 parallelism,     0 rows/s,     0B/s Parallelism: 0.6 0:04 [5 rows, 0B] [1 rows/s, 0B/s]  Query aborted by user presto:sf100&gt; ```</body>
		<created>2018-01-31 04:20:46</created>
		<closed>2018-12-12 21:12:45</closed>
	</bug>
	<bug>
		<id>9792</id>
		<title>row_number() produces wrong results with some inequality filters</title>
		<body>A filter of = x or &lt;0 on row_number() would be optimized and produce correct empty result set:  ``` presto:ad_metrics&gt; select id, val, rank from (select id, val, row_number() over (PARTITION by id) as rank from test) where rank &lt; 0;  id | val | rank ----+-----+------ (0 rows) ```  But if we change the filter to &lt;= x where x is a negative number, it produces non-empty result set which was wrong.  ``` presto:ad_metrics&gt; select id, val, rank from (select id, val, row_number() over (PARTITION by id) as rank from test) where rank &lt;=-1;  id | val  | rank ----+------+------   1 | -100 |    1   2 |  -50 |    1 (2 rows) ```  This is because the planner created a RowNumberNode, but visitFilter() does not try to optimize it because the tupleDomain and the range represented by upperbound is the same. Instead it just return the original RowNumberNode with maxRowCountPerPartition = -1.   To fix this, the planner should recogonize this is an empty upperbound.  </body>
		<created>2018-01-23 00:27:21</created>
		<closed>2018-01-25 16:50:07</closed>
	</bug>
	<bug>
		<id>9780</id>
		<title>TopNRowNumber fails when updating the memory usage</title>
		<body>``` presto:tiny&gt; SELECT custkey, orderkey, rank FROM (     SELECT custkey, orderkey, row_number() OVER (PARTITION BY custkey ORDER BY orderkey) AS rank FROM orders) WHERE rank = 3;  Query 20180120_011051_00000_rajdf, FAILED, 4 nodes http://localhost:8080/query.html?20180120_011051_00000_rajdf Splits: 68 total, 47 done (69.12%) CPU Time: 3.0s total,    5K rows/s,     0B/s, 9% active Per Node: 0.2 parallelism, 1.09K rows/s,     0B/s Parallelism: 0.9 0:03 [15K rows, 0B] [4.37K rows/s, 0B/s]  Query 20180120_011051_00000_rajdf failed: bytes cannot be negative java.lang.IllegalArgumentException: bytes cannot be negative at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122) at com.facebook.presto.memory.context.SimpleLocalMemoryContext.setBytes(SimpleLocalMemoryContext.java:55) at com.facebook.presto.operator.OperatorContext$DecoratedLocalMemoryContext.setBytes(OperatorContext.java:632) at com.facebook.presto.operator.TopNRowNumberOperator.getPage(TopNRowNumberOperator.java:341) at com.facebook.presto.operator.TopNRowNumberOperator.getOutput(TopNRowNumberOperator.java:252) at com.facebook.presto.operator.Driver.processInternal(Driver.java:379) at com.facebook.presto.operator.Driver.lambda$processFor$8(Driver.java:278) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:645) at com.facebook.presto.operator.Driver.processFor(Driver.java:272) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2018-01-20 01:11:23</created>
		<closed>2018-01-25 20:10:57</closed>
	</bug>
	<bug>
		<id>9779</id>
		<title>Planner fails to create correct TopNRowNumber Node with invalid filters on row_number()</title>
		<body>When there is a filter on row_number(), we tried to push down the filter and replace the Window operator with TopNRowNumber operator and a Filter operator on top. If the filter has invalid range the query will fail with the above error.   ``` presto:tiny&gt; explain (type distributed) SELECT orderkey, orderdate, rank FROM (     SELECT orderkey, orderdate, row_number() OVER ( PARTITION BY orderkey ORDER BY orderdate DESC) AS rank FROM orders) WHERE rank=-1;  Query 20180119_211226_00015_vy95y failed: maxRowCountPerPartition must be &gt; 0  java.lang.IllegalArgumentException: maxRowCountPerPartition must be &gt; 0 at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122) at com.facebook.presto.sql.planner.plan.TopNRowNumberNode.&lt;init&gt;(TopNRowNumberNode.java:60) at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.convertToTopNRowNumber(WindowFilterPushDown.java:260) at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:169) at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:84) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:72) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) ... ```  This is because we use the range [1..upperbound in filter] as the limit of the TopNRowNumber, and enforce the upperbound must be greater than 0, therefore if the user uses some invalid range like row_number()=-1 the query will fail.  With a valid filter like WHERE row_number() between [99,100], the following plan was created:  ``` explain (type distributed) SELECT orderkey, orderdate, rank FROM (SELECT orderkey, orderdate, row_number() OVER ( PARTITION BY orderkey ORDER BY orderdate DESC) AS rank FROM orders) WHERE rank&lt;=10000 and rank &gt;= 9999;                                                                                           Query Plan ---------------------------------------------------------------------------------------------------- Fragment 0 [SINGLE]      Output layout: [orderkey, orderdate, row_number_2]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - Output[orderkey, orderdate, rank] =&gt; [orderkey:bigint, orderdate:date, row_number_2:bigint]              rank := row_number_2          - RemoteSource[1] =&gt; [orderkey:bigint, orderdate:date, row_number_2:bigint]   Fragment 1 [tpch:orders:15000]      Output layout: [orderkey, orderdate, row_number_2]      Output partitioning: SINGLE []      Execution Flow: UNGROUPED_EXECUTION      - Filter[filterPredicate = (("row_number_2" &lt;= BIGINT '10000') AND ("row_number_2" &gt;= BIGINT '9999'))] =&gt; [orderkey:bigint, orderdate:date, row_number_2:bigint]          - Project[] =&gt; [orderkey:bigint, orderdate:date, row_number_2:bigint]              - TopNRowNumber[partition by (orderkey), order by (orderdate DESC_NULLS_LAST) limit 10000][$hashvalue] =&gt; [orderkey:bigint, orderdate:date, $hashvalue:bigint, row_number_2:bigint]                      row_number_2 := row_number()                  - ScanProject[table = tpch:tpch:orders:sf0.01, originalConstraint = true] =&gt; [orderkey:bigint, orderdate:date, $hashvalue:bigint]                          Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}                          $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))                          orderkey := tpch:orderkey                          orderdate := tpch:orderdate ```  One interesting thing to notice is that no matter how narrow the filter range(lb, ub) is we always use TopNRowNumber(1..ub) then apply the filter on top of it. In the above query we have limit 10000 (range [1..10000] for this TopNRowNumber, which is not always helpful. </body>
		<created>2018-01-20 01:05:43</created>
		<closed>2018-01-25 16:50:38</closed>
	</bug>
	<bug>
		<id>9766</id>
		<title>VerifyException exception when executing RIGHT OUTER JOIN</title>
		<body>Hi,  I use presto 0.192 + HDP 2.5.3 + hive connector.  VerifyException occured in the following query. ``` SELECT yyyymmdd FROM test_view WHERE yyyymmdd='20180117' LIMIT 1 ```  view ddl ``` create or replace view test_view as select     b.yyyymm     , b.yyyymmdd ...     , count(distinct ...) as ...  from     ... a right outer join     (select distinct yyyymmdd, substr(yyyymmdd,1,6) as yyyymm, ... from ... cross join ...) b on     a.yyyymmdd = b.yyyymmdd     and ... group by     b.yyyymm     , b.yyyymmdd ... ```  stacktrace ``` com.google.common.base.VerifyException: undefined at com.google.common.base.Verify.verify(Verify.java:99) at com.facebook.presto.operator.PartitionedLookupSource$OuterPositionTracker$Factory.getOuterPositionIterator(PartitionedLookupSource.java:299) at com.facebook.presto.operator.PartitionedLookupSource$1.getOuterPositionIterator(PartitionedLookupSource.java:65) at com.facebook.presto.operator.PartitionedLookupSourceFactory.getOuterPositionIterator(PartitionedLookupSourceFactory.java:362) at com.facebook.presto.operator.LookupJoinOperatorFactory$PerLifespanData.lambda$new$1(LookupJoinOperatorFactory.java:315) at com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture.doTransform(AbstractTransformFuture.java:239) at com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture.doTransform(AbstractTransformFuture.java:229) at com.google.common.util.concurrent.AbstractTransformFuture.run(AbstractTransformFuture.java:130) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:902) at com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:813) at com.google.common.util.concurrent.AbstractFuture.setFuture(AbstractFuture.java:713) at com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture.setResult(AbstractTransformFuture.java:221) at com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture.setResult(AbstractTransformFuture.java:200) at com.google.common.util.concurrent.AbstractTransformFuture.run(AbstractTransformFuture.java:177) at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) at com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:902) at com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:813) at com.google.common.util.concurrent.AbstractFuture.set(AbstractFuture.java:655) at com.google.common.util.concurrent.SettableFuture.set(SettableFuture.java:48) at com.facebook.presto.operator.ReferenceCount.release(ReferenceCount.java:55) at com.google.common.io.Closer.close(Closer.java:216) at com.facebook.presto.operator.LookupJoinOperator.close(LookupJoinOperator.java:514) at com.facebook.presto.operator.Driver.destroyIfNecessary(Driver.java:496) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:667) at com.facebook.presto.operator.Driver.processFor(Driver.java:272) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:975) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163) at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  If I modify view not to use ```right outer join``` in the following, error will be fixed although I'm not sure why ``` create or replace view test_view as select     a.yyyymm     , a.yyyymmdd ...     , count(distinct ...) as ...  from     (select distinct yyyymmdd, substr(yyyymmdd,1,6) as yyyymm, ... from ... cross join ...) a left outer join   ... b on     a.yyyymmdd = b.yyyymmdd     and ... group by     a.yyyymm     , a.yyyymmdd ... ```  Thanks</body>
		<created>2018-01-18 05:32:36</created>
		<closed>2018-02-16 22:58:03</closed>
	</bug>
	<bug>
		<id>9709</id>
		<title>Lambda cannot be used inside unnest</title>
		<body>``` presto&gt; select * from unnest(transform(sequence(1, 5), x -&gt; x * x)); Query 20180110_011726_00386_hgjdi failed: com.facebook.presto.sql.tree.ArithmeticBinaryExpression cannot be cast to java.lang.Long java.lang.ClassCastException: com.facebook.presto.sql.tree.ArithmeticBinaryExpression cannot be cast to java.lang.Long         at com.facebook.presto.$gen.VarArgsToMapAdapter_3751.varArgsToMap(Unknown Source)         at java.lang.invoke.MethodHandleProxies$1.invoke(MethodHandleProxies.java:187)         at com.sun.proxy.$Proxy457.apply(Unknown Source)         at com.facebook.presto.$gen.ArrayTransform_3752.transform(Unknown Source)         at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)         at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:649)         at com.facebook.presto.sql.FunctionInvoker.invoke(FunctionInvoker.java:88)         at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:971)         at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:114)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.planner.ExpressionInterpreter.evaluate(ExpressionInterpreter.java:271)         at com.facebook.presto.sql.planner.ExpressionInterpreter.evaluateConstantExpression(ExpressionInterpreter.java:234)         at com.facebook.presto.sql.planner.RelationPlanner.visitUnnest(RelationPlanner.java:523)         at com.facebook.presto.sql.planner.RelationPlanner.visitUnnest(RelationPlanner.java:94)         at com.facebook.presto.sql.tree.Unnest.accept(Unnest.java:62)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.planner.QueryPlanner.planFrom(QueryPlanner.java:269)         at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:150)         at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:467)         at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:94)         at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:258)         at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:130)         at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:460)         at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:94)         at com.facebook.presto.sql.tree.Query.accept(Query.java:94)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:376)         at com.facebook.presto.sql.planner.LogicalPlanner.planStatementWithoutOutput(LogicalPlanner.java:175)         at com.facebook.presto.sql.planner.LogicalPlanner.planStatement(LogicalPlanner.java:156)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:127)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:122)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:363)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:342)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:274)         at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)         at java.lang.Thread.run(Thread.java:748) </body>
		<created>2018-01-10 01:20:11</created>
		<closed>2018-01-18 01:49:53</closed>
	</bug>
	<bug>
		<id>9669</id>
		<title>SHOW SCHEMAS&amp;TABLES in memory connector recognize only default and information_schema schema</title>
		<body>Memory connector can create schemas, but `SHOW SCHEMAS` and `SHOW TABLES` doesn't recognize it.  Below is reproducing step. ``` presto&gt; create table memory.test.t1(c1 int); CREATE TABLE ```  ``` presto&gt; show schemas in memory;        Schema        --------------------  default              information_schema  (2 rows)  Query 20180104_022814_00199_x222s, FINISHED, 1 node Splits: 18 total, 18 done (100.00%) 0:00 [2 rows, 35B] [37 rows/s, 651B/s]  presto&gt;  presto&gt; show tables in memory.test; Query 20180104_023102_00200_x222s failed: line 1:1: Schema 'test' does not exist show tables in memory.test ```  `SHOW COLUMNS` and (of course) `SELECT` query success. ``` presto&gt; show columns in memory.test.t1;  Column |  Type   | Extra | Comment  --------+---------+-------+---------  c1     | integer |       |          (1 row)  Query 20180104_023539_00202_x222s, FINISHED, 1 node Splits: 18 total, 18 done (100.00%) 0:00 [1 rows, 54B] [12 rows/s, 683B/s] presto&gt; presto&gt; select * from memory.test.t1;  c1  ---- (0 rows)  Query 20180104_023134_00201_x222s, FINISHED, 1 node Splits: 17 total, 17 done (100.00%) 0:00 [0 rows, 0B] [0 rows/s, 0B/s] ```</body>
		<created>2018-01-04 02:43:03</created>
		<closed>2018-01-15 11:31:07</closed>
	</bug>
	<bug>
		<id>9592</id>
		<title>Presto doesn't start on local machine with Java 8</title>
		<body>When starting newest version of Presto from `master` from IntelliJ with Java 8 the following error happens: ``` 2017-12-20T15:55:59.785+0100WARNquery-management-0com.facebook.presto.memory.RemoteNodeMemoryMemory info update request to http://172.20.1.10:8080/v1/memory has not returned in 21.94s Disconnected from the target VM, address: '127.0.0.1:65173', transport: 'socket' 2017-12-20T15:56:28.410+0100ERRORmaincom.facebook.presto.server.PrestoServerError loading pom: /Users/sopel39/Desktop/Projekty/Starburstdata/presto/presto-main/../presto-blackhole/pom.xml java.lang.RuntimeException: Error loading pom: /Users/sopel39/Desktop/Projekty/Starburstdata/presto/presto-main/../presto-blackhole/pom.xml at io.airlift.resolver.ArtifactResolver.resolvePom(ArtifactResolver.java:141) at com.facebook.presto.server.PluginManager.buildClassLoaderFromPom(PluginManager.java:239) at com.facebook.presto.server.PluginManager.buildClassLoader(PluginManager.java:228) at com.facebook.presto.server.PluginManager.loadPlugin(PluginManager.java:152) at com.facebook.presto.server.PluginManager.loadPlugins(PluginManager.java:140) at com.facebook.presto.server.PrestoServer.run(PrestoServer.java:116) at com.facebook.presto.server.PrestoServer.main(PrestoServer.java:66) Caused by: org.apache.maven.project.ProjectBuildingException: Some problems were encountered while processing the POMs: [ERROR] Failed to determine Java version for profile java9-surefire @ io.airlift:airbase:78, /Users/sopel39/.m2/repository/io/airlift/airbase/78/airbase-78.pom, line 1324, column 22  at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:176) at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:102) at io.airlift.resolver.ArtifactResolver.resolvePom(ArtifactResolver.java:134) ... 6 more Caused by: org.apache.maven.model.building.ModelBuildingException: 1 problem was encountered while building the effective model for com.facebook.presto:presto-blackhole:0.192-SNAPSHOT [ERROR] Failed to determine Java version for profile java9-surefire @ io.airlift:airbase:78, /Users/sopel39/.m2/repository/io/airlift/airbase/78/airbase-78.pom, line 1324, column 22  at org.apache.maven.model.building.DefaultModelProblemCollector.newModelBuildingException(DefaultModelProblemCollector.java:195) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:419) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:371) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:362) at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:232) at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:142) ... 8 more  ```  I think this is related to: https://github.com/airlift/airbase/commit/87a1977311179f6e4097768a7ea3336d11298a9f  ``` bash-3.2$ java -version java version "1.8.0_152" ```  CC: @electrum @ilfrin @findepi </body>
		<created>2017-12-20 15:00:31</created>
		<closed>2017-12-20 16:58:33</closed>
	</bug>
	<bug>
		<id>9528</id>
		<title>Selective aggregates filtering applied too late</title>
		<body>Query ``` WITH test AS (     SELECT * FROM (         VALUES             ('1', 'a', 'good'),             ('2', 'b', 'good'),             ('x', 'c', 'bad')     ) AS t (v, k, name) ) SELECT     MAP_AGG(CAST(v AS BIGINT), LOWER(k)) FILTER (WHERE name = 'good') AS col1,     ARRAY_AGG(CAST(v AS BIGINT)) FILTER (WHERE name = 'good') AS col2 FROM test ``` Fails with `Cannot cast 'x' to BIGINT` Seems that casts are evaluated even for rows which will be filtered out by `FILTER` condition  If I add `WHERE name = 'good'` it doesn't fail, but semantically it is the same query</body>
		<created>2017-12-11 14:29:15</created>
		<closed>2018-01-03 19:28:33</closed>
	</bug>
	<bug>
		<id>9488</id>
		<title>Getting "Tried to free more revocable memory than is reserved" randomly when using spill</title>
		<body>Presto Version - 0.188 Here is stacktrace for the error.  ``` java.lang.IllegalArgumentException: tried to free more revocable memory than is reserved         at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)         at com.facebook.presto.memory.MemoryPool.freeRevocable(MemoryPool.java:196)         at com.facebook.presto.memory.QueryContext.freeRevocableMemory(QueryContext.java:168)         at com.facebook.presto.operator.TaskContext.freeRevocableMemory(TaskContext.java:226)         at com.facebook.presto.operator.PipelineContext.freeRevocableMemory(PipelineContext.java:274)         at com.facebook.presto.operator.DriverContext.freeRevocableMemory(DriverContext.java:254)         at com.facebook.presto.operator.OperatorContext.freeRevocableMemory(OperatorContext.java:315)         at com.facebook.presto.operator.OperatorContext.setRevocableMemoryReservation(OperatorContext.java:307)         at com.facebook.presto.operator.HashBuilderOperator.lambda$close$11(HashBuilderOperator.java:644)         at com.google.common.io.Closer.close(Closer.java:216)         at com.facebook.presto.operator.HashBuilderOperator.close(HashBuilderOperator.java:645)         at com.facebook.presto.operator.HashBuilderOperator.finish(HashBuilderOperator.java:450)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:357)         at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:241)         at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:614)         at com.facebook.presto.operator.Driver.processFor(Driver.java:235)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)         at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163)         at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23)         at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)         at java.lang.Thread.run(Thread.java:748) ```   </body>
		<created>2017-12-06 02:42:47</created>
		<closed>2018-01-17 15:03:47</closed>
	</bug>
	<bug>
		<id>9434</id>
		<title>It's not possible to query JDBC connector information_schema.columns when there is a table with all unsupported data type columns</title>
		<body>Steps to reproduce:  1. `create table m (m interval);` in Postgres 1. using `postgresql` connector: `select * from postgresql.information_schema.columns;`  ``` Query 20171129_143915_00004_exah8 failed: Table has no supported column types: public.m com.facebook.presto.spi.PrestoException: Table has no supported column types: public.m at com.facebook.presto.plugin.jdbc.BaseJdbcClient.getColumns(BaseJdbcClient.java:227) at com.facebook.presto.plugin.jdbc.JdbcMetadata.getTableMetadata(JdbcMetadata.java:95) at com.facebook.presto.plugin.jdbc.JdbcMetadata.listTableColumns(JdbcMetadata.java:136) at com.facebook.presto.metadata.MetadataManager.listTableColumns(MetadataManager.java:419) at com.facebook.presto.metadata.MetadataListing.listTableColumns(MetadataListing.java:93) at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.buildColumns(InformationSchemaPageSourceProvider.java:169) at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInformationSchemaTable(InformationSchemaPageSourceProvider.java:144) at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInternalTable(InformationSchemaPageSourceProvider.java:138) at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.createPageSource(InformationSchemaPageSourceProvider.java:96) at com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:56) at com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:259) at com.facebook.presto.operator.Driver.processInternal(Driver.java:337) at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:241) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:614) at com.facebook.presto.operator.Driver.processFor(Driver.java:235) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163) at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:492) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ```  I think a better behavior would be to ignore unsupported columns, just like we do for tables where unsupported columns exist together with supported ones.  </body>
		<created>2017-11-29 14:41:17</created>
		<closed>2017-12-13 01:43:08</closed>
	</bug>
	<bug>
		<id>9433</id>
		<title>SetSessionTask does not validate that value decodes</title>
		<body>We allow setting an invalid session property, causing the CLI (or other client) to get stuck with the invalid value (which can't be changed because future queries are rejected).  ``` presto&gt; set session iterative_optimizer_timeout = 'xxx'; SET SESSION             presto&gt; select 123; Query 20171129_055858_00027_aw6kc failed: iterative_optimizer_timeout is invalid: xxx  presto&gt; set session iterative_optimizer_timeout = '5s'; Query 20171129_055907_00028_aw6kc failed: iterative_optimizer_timeout is invalid: xxx ``` Note that other types of errors, such as using the wrong type or setting a property which doesn't exist, are validated properly.</body>
		<created>2017-11-29 06:01:11</created>
		<closed>2018-10-04 04:44:33</closed>
	</bug>
	<bug>
		<id>9428</id>
		<title>TIMESTAMP WITH TIME ZONE and TIME WITH TIME ZONE equality doesn't conform to standard</title>
		<body>SQL 2003 says  &gt; TIME — contains the &lt;primary datetime field&gt;s HOUR, MINUTE, and SECOND. &gt; TIMESTAMP — contains the &lt;primary datetime field&gt;s YEAR, MONTH, DAY, HOUR, MINUTE, and SECOND.  (this listing wasn't suppose to cover `TIMEZONE_HOUR`, `TIMEZONE_MINUTE` fields present in the `WITH TIME ZONE` data types)  &gt; Items of type datetime are comparable only if they have the same &lt;primary datetime field&gt;s.  * My understanding is that the TIME and TIMESTAMP equality `=` (and comparisons `&lt;, &gt;`)  should be based on those fields.  * This is further reinforced by reasoning that if values are printed differently, then they are different (not equal) * ... and that if `a = b`, then `hour(a) = hour(b)` (which doesn't hold today)  Thus the following should return `false`, but they return `true` now: ``` SELECT TIMESTAMP '2012-06-07 10:13:00 +01:00' = TIMESTAMP '2012-06-07 11:13:00 +02:00'; SELECT TIME '10:13:00 +01:00' = TIME '11:13:00 +02:00'; SELECT TIME '10:13:00 +01:00' &gt; TIME '11:13:00 +05:00'; ```  This should be fixed after #9385 . cc @losipiuk @kokosing @martint  </body>
		<created>2017-11-28 11:01:40</created>
		<closed>2017-11-29 20:09:16</closed>
	</bug>
	<bug>
		<id>9377</id>
		<title>Number/decimal literals with digits on only one side of the dot should be rejected</title>
		<body>As per @martint's comment https://github.com/prestodb/presto/pull/9369#discussion_r151808814:  &gt; &gt; `123.`  &gt; I don't think this is a valid literal in SQL, and that it's a bug for Presto to accept them. </body>
		<created>2017-11-20 09:56:44</created>
		<closed>2017-11-20 10:59:49</closed>
	</bug>
	<bug>
		<id>9338</id>
		<title>INTERVAL types not supported in CAST</title>
		<body>`CAST(null AS INTERVAL YEAR TO MONTH)` `CAST(null AS INTERVAL DAY TO SECOND)` `CAST(null AS INTERVAL HOUR TO SECOND)` etc.  fail with a parsing error:  ``` com.facebook.presto.sql.parser.ParsingException: line 1:30: mismatched input 'day' expecting {'(', ')', 'ARRAY'} at com.facebook.presto.sql.parser.SqlParser$1.syntaxError(SqlParser.java:48) at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41) at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:540) at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:301) at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:124) at com.facebook.presto.sql.parser.SqlBaseParser.type(SqlBaseParser.java:9186) at com.facebook.presto.sql.parser.SqlBaseParser.primaryExpression(SqlBaseParser.java:8076) at com.facebook.presto.sql.parser.SqlBaseParser.valueExpression(SqlBaseParser.java:6867) at com.facebook.presto.sql.parser.SqlBaseParser.predicated(SqlBaseParser.java:6132) at com.facebook.presto.sql.parser.SqlBaseParser.booleanExpression(SqlBaseParser.java:6023) at com.facebook.presto.sql.parser.SqlBaseParser.expression(SqlBaseParser.java:5767) at com.facebook.presto.sql.parser.SqlBaseParser.selectItem(SqlBaseParser.java:4809) at com.facebook.presto.sql.parser.SqlBaseParser.querySpecification(SqlBaseParser.java:3906) at com.facebook.presto.sql.parser.SqlBaseParser.queryPrimary(SqlBaseParser.java:3674) at com.facebook.presto.sql.parser.SqlBaseParser.queryTerm(SqlBaseParser.java:3479) at com.facebook.presto.sql.parser.SqlBaseParser.queryNoWith(SqlBaseParser.java:3330) at com.facebook.presto.sql.parser.SqlBaseParser.query(SqlBaseParser.java:2759) at com.facebook.presto.sql.parser.SqlBaseParser.statement(SqlBaseParser.java:1412) at com.facebook.presto.sql.parser.SqlBaseParser.singleStatement(SqlBaseParser.java:234) at com.facebook.presto.sql.parser.SqlParser.invokeParser(SqlParser.java:95) at com.facebook.presto.sql.parser.SqlParser.createStatement(SqlParser.java:68) ```</body>
		<created>2017-11-13 23:27:56</created>
		<closed>2017-11-16 18:43:19</closed>
	</bug>
	<bug>
		<id>9317</id>
		<title>Highly selective LIMIT queries don't complete as soon as required data is output</title>
		<body>A query like the following one on a large table (19.8B rows, 347GB) where only one row matches the where clause keeps running after that row is returned to the client.  ```sql SELECT 1  FROM t  WHERE x = ... LIMIT 1 ```  It affects 0.188. Not sure about earlier versions.  </body>
		<created>2017-11-09 01:32:48</created>
		<closed>2017-11-16 18:51:27</closed>
	</bug>
	<bug>
		<id>9230</id>
		<title>Wrong error message for UNION type mismatch</title>
		<body>This should be column 1, not 0. ``` presto&gt; select 123, 'foo' union all select 'bar', 999; Query 20171027_202828_44812_fkpyx failed: line 1:19: column 0 in UNION query has incompatible types: integer, varchar(3) </body>
		<created>2017-10-27 20:29:38</created>
		<closed>2019-04-26 07:47:27</closed>
	</bug>
	<bug>
		<id>9225</id>
		<title>Decimal cast errors are not handled correctly</title>
		<body>These should throw `INVALID_CAST_ARGUMENT` with a useful error message.  ``` presto&gt; select cast('foo' as decimal); Query 20171026_175718_55655_ivxzb failed: null java.lang.NumberFormatException at java.math.BigDecimal.&lt;init&gt;(BigDecimal.java:596) at java.math.BigDecimal.&lt;init&gt;(BigDecimal.java:383) at java.math.BigDecimal.&lt;init&gt;(BigDecimal.java:806) at com.facebook.presto.type.DecimalCasts.varcharToLongDecimal(DecimalCasts.java:583) at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627) ```  Compare to bigint:  ``` presto&gt; select cast('foo' as bigint); Query 20171026_175841_55785_ivxzb failed: Cannot cast 'foo' to BIGINT com.facebook.presto.spi.PrestoException: Cannot cast 'foo' to BIGINT at com.facebook.presto.type.VarcharOperators.castToBigint(VarcharOperators.java:177) at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627) </body>
		<created>2017-10-26 17:59:12</created>
		<closed>2017-11-16 19:32:47</closed>
	</bug>
	<bug>
		<id>9173</id>
		<title>Column cannot be resolved for views</title>
		<body>Steps to reproduce ``` create table memory.default.t (s varchar); create view memory.default.v as select s from memory.default.t;  select memory.default.t.s from memory.default.t; -- works select memory.default.v.s from memory.default.v; -- fails with: Column 'memory.default.v.s' cannot be resolved ```  -----------------   I was integrating presto (0.186) with metabase (0.26.1) and in my environment I have created a catalog just to create views that maps my business rules. So when metabase tries to submit any query that projects columns in format "\&lt;schema\&gt;"."\&lt;view\&gt;"."\&lt;column\&gt;", presto returns the following error: **Column '\&lt;schema\&gt;.\&lt;view\&gt;.\&lt;column\&gt;' cannot be resolved**.  I have tried several times in several different ways to discover the origin of that error.  But the conclusion is it just occurs with views.  After debugging presto project I found a possible solution.  Follow the code:  In presto-main/src/main/java/com/facebook/presto/sql/analyzer/Field.java:  ```     public boolean matchesPrefix(Optional&lt;QualifiedName&gt; prefix)     {         return !prefix.isPresent() || relationAlias.isPresent() &amp;&amp; relationAlias.get().hasSuffix(prefix.get());     }  ```  was changed to:  ```     public boolean matchesPrefix(Optional&lt;QualifiedName&gt; prefix)     {         return !prefix.isPresent() || relationAlias.isPresent() &amp;&amp; relationAlias.get().hasSuffix(prefix.get()) || ((Supplier&lt;Boolean&gt;) () -&gt; {                 if (!originTable.isPresent())                     return false;                  int idx = 0;                 boolean match = true;                  QualifiedObjectName origin = originTable.get();                 List&lt;String&gt; prefixes = prefix.get().getParts();                  switch (prefixes.size()) {                     case 3: match =          origin.getCatalogName().equalsIgnoreCase(prefixes.get(idx++));                     case 2: match = match &amp;&amp; origin.getSchemaName().equalsIgnoreCase(prefixes.get(idx++));                     case 1: match = match &amp;&amp; origin.getObjectName().equalsIgnoreCase(prefixes.get(idx++));                 }                  return idx &gt; 0 &amp;&amp; match;             }).get();     }  ```  In my tests it is working well.  -- SG </body>
		<created>2017-10-18 21:58:06</created>
		<closed>2019-09-05 15:22:03</closed>
	</bug>
	<bug>
		<id>9164</id>
		<title>ConcurrentModificationException in BridgingHiveMetastore</title>
		<body>Trying to drop a column from a Hive table with Presto 0.186 throws a ConcurrentModificationException:  ``` java.util.ConcurrentModificationException         at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)         at java.util.ArrayList$Itr.next(ArrayList.java:851)         at com.facebook.presto.hive.metastore.BridgingHiveMetastore.dropColumn(BridgingHiveMetastore.java:214)         at com.facebook.presto.hive.metastore.CachingHiveMetastore.dropColumn(CachingHiveMetastore.java:495)         at com.facebook.presto.hive.metastore.CachingHiveMetastore.dropColumn(CachingHiveMetastore.java:495)         at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.lambda$dropColumn$9(SemiTransactionalHiveMetastore.java:357)         at com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.commit(SemiTransactionalHiveMetastore.java:743)         at com.facebook.presto.hive.HiveMetadata.commit(HiveMetadata.java:1522)         at com.facebook.presto.hive.HiveConnector.commit(HiveConnector.java:177)         at com.facebook.presto.transaction.TransactionManager$TransactionMetadata$ConnectorTransactionMetadata.commit(TransactionManager.java:577)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)         at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:111)         at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:58)         at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:75)         at io.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:748) ```  The table in question looks like this:  ``` presto&gt; SHOW CREATE TABLE hive.default.posts; CREATE TABLE hive.default.posts (   user_id_dup varchar,   title varchar,   body varchar,   foo integer,   user_id varchar ) WITH (   external_location = 's3a://my-s3-bucket/posts',   format = 'ORC',   partitioned_by = ARRAY['user_id'] ) ```  And I'm trying to drop the column `foo`. (`ALTER TABLE hive.default.posts DROP COLUMN foo`) </body>
		<created>2017-10-17 01:37:20</created>
		<closed>2018-10-31 12:07:33</closed>
	</bug>
	<bug>
		<id>9113</id>
		<title>Row to Row Cast doesn't work with JSON type</title>
		<body>```SQL select cast(row(json'1') as row(field BIGINT)); ```  Exception details: ``` Query 20171006_040158_53624_d7r6y failed: java.lang.VerifyError: Inconsistent stackmap frames at branch target 102 Exception Details:   Location:     com/facebook/presto/$gen/RowCast$13F6822651DA095C094FE44A06BA8013_259687.castRow(Lcom/facebook/presto/spi/ConnectorSession;Lcom/facebook/presto/spi/block/Block;)Lcom/facebook/presto/spi/block/Block; @47: goto   Reason:     Current frame's stack size doesn't match stackmap.   Current Frame:     bci: @47     flags: { }     locals: { 'com/facebook/presto/spi/ConnectorSession', 'com/facebook/presto/spi/block/Block', integer, 'com/facebook/presto/spi/block/BlockBuilder', 'com/facebook/presto/spi/block/BlockBuilder' }     stack: { }   Stackmap Frame:     bci: @102     flags: { }     locals: { 'com/facebook/presto/spi/ConnectorSession', 'com/facebook/presto/spi/block/Block', integer, 'com/facebook/presto/spi/block/BlockBuilder', 'com/facebook/presto/spi/block/BlockBuilder' }     stack: { 'com/facebook/presto/spi/type/Type' }   Bytecode:     0x0000000: 033d ba00 1500 00bb 0017 59b7 001a 04b9     0x0000010: 0020 0300 4e2d b900 2601 003a 042b 03b9     0x0000020: 002c 0200 9900 0e19 04b9 002f 0100 57a7     0x0000030: 0037 ba00 3400 0019 04ba 0039 0000 2b03     0x0000040: b900 3d03 001c 9900 0857 09a7 0016 ba00     0x0000050: 4300 0059 c700 0a04 3d57 09a7 0006 b600     0x0000060: 49b9 004d 0300 2db9 0050 0100 57ba 0053     0x0000070: 0000 2dc0 0028 03b9 0057 0300 c000 28b0     0x0000080:   Stackmap Table:     append_frame(@50,Integer,Object[#34],Object[#34])     full_frame(@78,{Object[#98],Object[#40],Integer,Object[#34],Object[#34]},{Object[#28],Object[#34],Object[#100]})     full_frame(@94,{Object[#98],Object[#40],Integer,Object[#34],Object[#34]},{Object[#28],Object[#34],Object[#69]})     full_frame(@97,{Object[#98],Object[#40],Integer,Object[#34],Object[#34]},{Object[#28],Object[#34],Long})     same_locals_1_stack_item_frame(@102,Object[#28]) ```</body>
		<created>2017-10-06 04:02:37</created>
		<closed>2018-06-09 00:51:20</closed>
	</bug>
	<bug>
		<id>9067</id>
		<title>json_parse succeeds for invalid input</title>
		<body>`json_parse` does not fail on invalid inputs like `"x":1`:  ``` presto&gt; select json_parse('"x":1');  _col0 -------  "x" (1 row) ```</body>
		<created>2017-09-29 00:27:16</created>
		<closed>2017-10-01 18:17:29</closed>
	</bug>
	<bug>
		<id>9056</id>
		<title>Running queries counter leaks queries</title>
		<body>Queries that fail before they get to run cause the running queries counter to increment but never decrement. This is caused by 516801ab482c9189344304b97ff4e4429488dfc7, which calls queryStarted but not queryStopped. </body>
		<created>2017-09-27 20:06:45</created>
		<closed>2017-09-28 03:04:36</closed>
	</bug>
	<bug>
		<id>9025</id>
		<title>Wrong query results when lambda scope shadows column name</title>
		<body>It's not possible to use dereference expressions in lambda context (#9023) except when dereferencing lambda argument's field (https://github.com/prestodb/presto/commit/789e4772527037efaed9e3bfbccfdee42697fa4b).   However, even in the "supported" case, result is different when lambda arguement shadows a column reference: ``` SELECT transform(array[CAST(ROW(10) AS ROW(x INTEGER))], r -&gt; r.x) FROM (VALUES 1) u(x);  _col0  -------  [10]   (1 row)  SELECT transform(array[CAST(ROW(10) AS ROW(x INTEGER))], r -&gt; r.x) FROM (VALUES 1) r(x);  _col0  -------  [1]    (1 row) ```  IMO both queries should produce `10`, as column is being shadowed by lambda's formal argument.</body>
		<created>2017-09-21 13:57:53</created>
		<closed>2017-11-03 09:13:04</closed>
	</bug>
	<bug>
		<id>9015</id>
		<title>Query completion event doesn't capture final stats</title>
		<body>We've noticed cases where the stats recorded in the query completion event don't reflect the final state of the query. For instance, it contains information about splits in flight.</body>
		<created>2017-09-20 19:30:50</created>
		<closed>2019-01-19 06:04:00</closed>
	</bug>
	<bug>
		<id>9014</id>
		<title>Implicit coercions for ROW type not handled correctly</title>
		<body>``` select row('a') = row('aa')```  fails with:  ``` Query 20170920_184840_03951_gui64 failed: line 1:17: '=' cannot be applied to row(field0 varchar(1)), row(field0 varchar(2)) com.facebook.presto.sql.analyzer.SemanticException: line 1:17: '=' cannot be applied to row(field0 varchar(1)), row(field0 varchar(2)) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:1147) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:446) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:282) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:71) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:258) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:1466) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.analyzeExpression(StatementAnalyzer.java:1834) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.analyzeSelect(StatementAnalyzer.java:1646) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.legacyVisitQuerySpecification(StatementAnalyzer.java:909) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:854) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:242) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:254) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:264) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:605) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:242) at com.facebook.presto.sql.tree.Query.accept(Query.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:254) at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:228) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:72) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:64) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:305) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:291) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:247) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:748) ```  `row('a')::row(varchar(1))` should implicitly cast to `row(varchar(2))`</body>
		<created>2017-09-20 18:49:54</created>
		<closed>2017-09-25 22:35:45</closed>
	</bug>
	<bug>
		<id>8965</id>
		<title>SqlQueryManager.queuedQueries counter leaks</title>
		<body>Over time, the counter increases and doesn't go back to the initial value. Also, it doesn't reflect the number of currently queued queries reported by the UI.  Looking at the code, the counter is incremented when a query is queued and decremented when it starts running. If the query fails or gets canceled before it gets a chance to run, it won't be decremented.</body>
		<created>2017-09-13 22:13:34</created>
		<closed>2019-01-19 06:46:24</closed>
	</bug>
	<bug>
		<id>8958</id>
		<title>JsonExtract does not handle invalid Unicode</title>
		<body>``` java.lang.RuntimeException: java.io.CharConversionException: Invalid UTF-32 character 0x7b227222(above 10ffff)  at char #8, byte #35)  at com.google.common.base.Throwables.propagate(Throwables.java:240)  at com.facebook.presto.operator.scalar.JsonExtract.extract(JsonExtract.java:143)  at com.facebook.presto.operator.scalar.JsonFunctions.varcharJsonExtractScalar(JsonFunctions.java:398)  at com.facebook.presto.$gen.PageFilter_20170912_184704_30869_8bak5_2_278_332907.filter(Unknown Source)  at com.facebook.presto.$gen.PageFilter_20170912_184704_30869_8bak5_2_278_332907.filter(Unknown Source)  at com.facebook.presto.operator.project.PageProcessor.process(PageProcessor.java:85)  at com.facebook.presto.operator.ScanFilterAndProjectOperator.processPageSource(ScanFilterAndProjectOperator.java:281)  at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:229)  at com.facebook.presto.operator.Driver.processInternal(Driver.java:337)  at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:241)  at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:614)  at com.facebook.presto.operator.Driver.processFor(Driver.java:235)  at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)  at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163)  at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23)  at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:485)  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)  at java.lang.Thread.run(Thread.java:748)  Caused by: java.io.CharConversionException: Invalid UTF-32 character 0x7b227222(above 10ffff)  at char #8, byte #35)  at com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(UTF32Reader.java:189)  at com.fasterxml.jackson.core.io.UTF32Reader.read(UTF32Reader.java:150)  at com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMore(ReaderBasedJsonParser.java:241)  at com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2346)  at com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:644)  at com.facebook.presto.operator.scalar.JsonExtract.extract(JsonExtract.java:131)  ... 17 more </body>
		<created>2017-09-12 19:27:10</created>
		<closed>2017-11-16 20:00:01</closed>
	</bug>
	<bug>
		<id>8881</id>
		<title>Presto Verifier 0.183 does not work</title>
		<body>Unknown column 'session_properties_json' in 'field list', it seems that document has not updated.</body>
		<created>2017-08-30 03:51:42</created>
		<closed>2018-10-29 22:08:30</closed>
	</bug>
	<bug>
		<id>8843</id>
		<title>All usage of `trimSpacesAndTruncateToLength` are likely wrong</title>
		<body>For `CHAR` values, we must do `trim(truncate(val, x))` instead `truncate(trim(val), x)`. The latter can produce values with trailing spaces, which is not valid in-memory representation for `CHAR` values in Presto.  We should have a function `truncateToLengthAndTrimSpace` instead, and move (likely) all current callers to the new function.  Reproduce with ORC SliceDirectStreamReader (#8712 will fix SliceDirectStreamReader, but not this bug in general).  ``` presto:default&gt; create table test_hjin_char with (format='orc') as select cast('a c' as char(3)) x; CREATE TABLE: 1 row  hive&gt; alter table test_hjin_char change x x char(2);  presto:default&gt; select cast(x as varchar) || 'zz' from test_hjin_char;  _col0 -------  a zz  presto:default&gt; select upper(x) from test_hjin_char; Query 20170825_190517_00019_47f4s failed: Slice representing Char should not have trailing spaces java.lang.IllegalArgumentException: Slice representing Char should not have trailing spaces         at com.facebook.presto.spi.type.CharType.writeSlice(CharType.java:149)         at com.facebook.presto.spi.type.CharType.writeSlice(CharType.java:142)         at com.facebook.presto.$gen.PageProjection_10.project(Unknown Source)         at com.facebook.presto.$gen.PageProjection_10.project(Unknown Source)         at com.facebook.presto.operator.project.DictionaryAwarePageProjection.project(DictionaryAwarePageProjection.java:99)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.processBatch(PageProcessor.java:269)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:177)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:126)         at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:145)         at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:140)         at com.facebook.presto.operator.project.PageProcessorOutput.hasNext(PageProcessorOutput.java:49)         at com.facebook.presto.operator.ScanFilterAndProjectOperator.processPageSource(ScanFilterAndProjectOperator.java:286)         at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:229)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:337)         at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:241)         at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:614)         at com.facebook.presto.operator.Driver.processFor(Driver.java:235)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)         at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163)         at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23)         at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:483)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)         at java.lang.Thread.run(Thread.java:748) </body>
		<created>2017-08-25 19:14:11</created>
		<closed>2017-08-30 09:35:18</closed>
	</bug>
	<bug>
		<id>8836</id>
		<title>Incorrect result for array_min/max of doubles containing NaN</title>
		<body>`array_min(array[1, 2, nan()])` =&gt; `1` `array_min(array[nan(), 1, 2])` =&gt; `NaN`  This probably occurs because the array_min function interprets `false` when comparing with NaN incorrectly.  The function should return `NaN` if any of the elements is `NaN` (similar to how NULLs are treated). </body>
		<created>2017-08-25 06:37:36</created>
		<closed>2017-11-15 19:34:13</closed>
	</bug>
	<bug>
		<id>8826</id>
		<title>`select histogram(T)` causes json exception in presto-client</title>
		<body>To reproduce: ``` presto:locations&gt; select histogram(array[1]); Query is gone (server restarted?) ```  stacktrace with `--debug`: ``` java.lang.RuntimeException: Error fetching next at http://localhost:8080/v1/statement/20170823_213958_00044_xee46/4 returned an invalid response: JsonResponse{statusCode=200, statusMessage=OK, headers={content-type=[application/json], date=[Wed, 23 Aug 2017 21:39:58 GMT], vary=[Accept-Encoding, User-Agent], x-content-type-options=[nosniff]}, hasValue=false} [Error: {"id":"20170823_213958_00044_xee46","infoUri":"http://localhost:8080/query.html?20170823_213958_00044_xee46","partialCancelUri":"http://127.0.0.1:8080/v1/stage/20170823_213958_00044_xee46.0","nextUri":"http://localhost:8080/v1/statement/20170823_213958_00044_xee46/5","columns":[{"name":"_col0","type":"map(array(integer),bigint)","typeSignature":{"rawType":"map","typeArguments":[{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]},{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]}},{"kind":"TYPE_SIGNATURE","value":{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}}]}}],"data":[[{"[1]":1}]],"stats":{"state":"RUNNING","queued":false,"scheduled":true,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":0,"processedBytes":0,"rootStage":{"stageId":"0","state":"RUNNING","done":false,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":1,"processedBytes":0,"subStages":[]},"progressPercentage":16.666666666666668}} ] at com.facebook.presto.client.StatementClient.requestFailedException(StatementClient.java:363) at com.facebook.presto.client.StatementClient.advance(StatementClient.java:306) at com.facebook.presto.cli.StatusPrinter.printInitialStatusUpdates(StatusPrinter.java:122) at com.facebook.presto.cli.Query.renderQueryOutput(Query.java:125) at com.facebook.presto.cli.Query.renderOutput(Query.java:107) at com.facebook.presto.cli.Console.process(Console.java:337) at com.facebook.presto.cli.Console.runConsole(Console.java:262) at com.facebook.presto.cli.Console.run(Console.java:148) at com.facebook.presto.cli.Presto.main(Presto.java:32) Caused by: java.lang.IllegalArgumentException: Unable to create class com.facebook.presto.client.QueryResults from JSON response: [{"id":"20170823_213958_00044_xee46","infoUri":"http://localhost:8080/query.html?20170823_213958_00044_xee46","partialCancelUri":"http://127.0.0.1:8080/v1/stage/20170823_213958_00044_xee46.0","nextUri":"http://localhost:8080/v1/statement/20170823_213958_00044_xee46/5","columns":[{"name":"_col0","type":"map(array(integer),bigint)","typeSignature":{"rawType":"map","typeArguments":[{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]},{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]}},{"kind":"TYPE_SIGNATURE","value":{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}}]}}],"data":[[{"[1]":1}]],"stats":{"state":"RUNNING","queued":false,"scheduled":true,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":0,"processedBytes":0,"rootStage":{"stageId":"0","state":"RUNNING","done":false,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":1,"processedBytes":0,"subStages":[]},"progressPercentage":16.666666666666668}} ] at com.facebook.presto.client.JsonResponse.&lt;init&gt;(JsonResponse.java:69) at com.facebook.presto.client.JsonResponse.execute(JsonResponse.java:143) at com.facebook.presto.client.StatementClient.advance(StatementClient.java:293) ... 7 more Caused by: java.lang.IllegalArgumentException: Invalid JSON string for [simple type, class com.facebook.presto.client.QueryResults] at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:137) at com.facebook.presto.client.JsonResponse.&lt;init&gt;(JsonResponse.java:66) ... 9 more Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.facebook.presto.client.QueryResults, problem: Cannot cast java.lang.String to java.util.List  at [Source: {"id":"20170823_213958_00044_xee46","infoUri":"http://localhost:8080/query.html?20170823_213958_00044_xee46","partialCancelUri":"http://127.0.0.1:8080/v1/stage/20170823_213958_00044_xee46.0","nextUri":"http://localhost:8080/v1/statement/20170823_213958_00044_xee46/5","columns":[{"name":"_col0","type":"map(array(integer),bigint)","typeSignature":{"rawType":"map","typeArguments":[{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]},{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"array","typeArguments":[{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}],"literalArguments":[],"arguments":[{"kind":"TYPE_SIGNATURE","value":{"rawType":"integer","typeArguments":[],"literalArguments":[],"arguments":[]}}]}},{"kind":"TYPE_SIGNATURE","value":{"rawType":"bigint","typeArguments":[],"literalArguments":[],"arguments":[]}}]}}],"data":[[{"[1]":1}]],"stats":{"state":"RUNNING","queued":false,"scheduled":true,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":0,"processedBytes":0,"rootStage":{"stageId":"0","state":"RUNNING","done":false,"nodes":1,"totalSplits":18,"queuedSplits":14,"runningSplits":1,"completedSplits":3,"userTimeMillis":1,"cpuTimeMillis":1,"wallTimeMillis":2,"processedRows":1,"processedBytes":0,"subStages":[]},"progressPercentage":16.666666666666668}} ; line: 1, column: 1718] at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:268) at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1405) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException(StdValueInstantiator.java:468) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem(StdValueInstantiator.java:487) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:276) at com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromObjectWith(ValueInstantiator.java:224) at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:135) at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:471) at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1194) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:314) at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148) at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3789) at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2871) at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:134) ... 10 more Caused by: java.lang.ClassCastException: Cannot cast java.lang.String to java.util.List at java.lang.Class.cast(Class.java:3369) at com.facebook.presto.client.QueryResults.fixValue(QueryResults.java:242) at com.facebook.presto.client.QueryResults.fixValue(QueryResults.java:252) at com.facebook.presto.client.QueryResults.fixData(QueryResults.java:224) at com.facebook.presto.client.QueryResults.&lt;init&gt;(QueryResults.java:95) at sun.reflect.GeneratedConstructorAccessor15.newInstance(Unknown Source) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call(AnnotatedConstructor.java:124) at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:274) ... 19 more ```</body>
		<created>2017-08-23 21:58:20</created>
		<closed>2017-08-23 22:52:35</closed>
	</bug>
	<bug>
		<id>8804</id>
		<title>Grouping ID doesn't work with expressions including aggregations functions</title>
		<body>The following query failed:  ``` sql SELECT grouping(orderpriority, clerk) AS grouping_id,   SUM(totalprice) / count(*) FROM orders GROUP BY GROUPING SETS (   (orderpriority, clerk),   (clerk) ) ```  Stacktrace: ``` Query 20170822_040005_00007_zcmwy failed: Invalid node. Expression dependencies ([groupid]) not in source plan output ([sum_3, count, clerk_4, orderpriority_5]) java.lang.IllegalArgumentException: Invalid node. Expression dependencies ([groupid]) not in source plan output ([sum_3, count, clerk_4, orderpriority_5]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:146) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:597) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:79) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:237) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:276) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:90) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:85) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validateIntermediatePlan$1(PlanSanityChecker.java:59) at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validateIntermediatePlan(PlanSanityChecker.java:59) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:129) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:122) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:358) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:337) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:269) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  However, compute `sum` or `count` separately doesn't have any problem:  ``` sql SELECT grouping(orderpriority, clerk) AS grouping_id,   SUM(totalprice) AS s,   count(*) as cnt FROM orders GROUP BY GROUPING SETS (   (orderpriority, clerk),   (clerk) ) ```  </body>
		<created>2017-08-22 04:03:41</created>
		<closed>2017-11-14 02:13:33</closed>
	</bug>
	<bug>
		<id>8780</id>
		<title>Max-run-time is enforced using query create time instead of start execution time</title>
		<body>I think we should enforce query max run time using its start execution time instead of create time. The query could be stuck in the queue for a while and it would count that time towards the time-before-kill.  https://github.com/prestodb/presto/blob/2ffc0e14b6966d274d09dc735ca3ff069893012b/presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java#L552</body>
		<created>2017-08-18 23:00:19</created>
		<closed>2017-10-31 14:22:10</closed>
	</bug>
	<bug>
		<id>8743</id>
		<title>Wrong results when filtering on partitioned char(x) or long decimal column</title>
		<body>The following example is based on TestHiveIntegrationSmokeTest.createPartitionedTable()  ``` CREATE TABLE test_partitioned_table (                    _string VARCHAR                  ,  _varchar VARCHAR(65535)                  , _char CHAR(10)                  , _bigint BIGINT                  , _integer INTEGER                  , _smallint SMALLINT                  , _tinyint TINYINT                  , _real REAL                  , _double DOUBLE                  , _boolean BOOLEAN                  , _decimal_short DECIMAL(3,2)                  , _decimal_long DECIMAL(30,10)                  , _partition_string VARCHAR                  , _partition_varchar VARCHAR(65535)                  , _partition_char CHAR(10)                  , _partition_tinyint TINYINT                  , _partition_smallint SMALLINT                  , _partition_integer INTEGER                  , _partition_bigint BIGINT                  , _partition_decimal_short DECIMAL(3,2)                  , _partition_decimal_long DECIMAL(30,10)                  )                   WITH (                  partitioned_by = ARRAY[ '_partition_string', '_partition_varchar', '_partition_char', '_partition_tinyint', '_partition_smallint', '_partition_integer', '_partition_bigint', '_partition_decimal_short', '_partition_decimal_long' ]                  ) ; ```  ``` INSERT INTO test_partitioned_table SELECT  'foo' _string ,  'bar' _varchar ,  CAST('boo' AS CHAR(10)) _char ,  CAST(1 AS BIGINT) _bigint ,  2 _integer ,  CAST (3 AS SMALLINT) _smallint ,  CAST (4 AS TINYINT) _tinyint ,  CAST('123.45' AS REAL) _real ,  CAST('3.14' AS DOUBLE) _double ,  true _boolean ,  CAST('3.14' AS DECIMAL(3,2)) _decimal_short , CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _decimal_long , 'foo' _partition_string ,  'bar' _partition_varchar ,  CAST('boo' AS CHAR(10)) _partition_char ,  CAST(1 AS TINYINT) _partition_tinyint ,  CAST(1 AS SMALLINT) _partition_smallint ,  1 _partition_integer ,  CAST (1 AS BIGINT) _partition_bigint ,  CAST('3.14' AS DECIMAL(3,2)) _partition_decimal_short , CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _partition_decimal_long; ```  Running `SELECT * from test_partitioned_table WHERE CAST('boo' AS CHAR(10)) = _partition_char;`  returns 0 rows   The same is true for filters on the long decimal column e.g.  `SELECT * from test_partitioned_table WHERE CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) =_partition_decimal_long;`  returns 0 results  Filtering by the rest of the partitioning keys returns correct results </body>
		<created>2017-08-15 16:07:49</created>
		<closed>2017-11-24 00:36:12</closed>
	</bug>
	<bug>
		<id>8738</id>
		<title>Planning failure with GROUPING and expression that requires implicit coercions</title>
		<body>```sql SELECT     GROUPING(k),     SUM(v) + 1.0 FROM (VALUES (1,1)) AS t(k,v) GROUP BY k ```  fails with:  ``` com.facebook.presto.sql.analyzer.SemanticException: Column 'k' cannot be resolved at com.facebook.presto.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:30) at com.facebook.presto.sql.analyzer.Scope.lambda$resolveField$0(Scope.java:104) at java.util.Optional.orElseThrow(Optional.java:290) at com.facebook.presto.sql.analyzer.Scope.resolveField(Scope.java:104) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:371) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:282) at com.facebook.presto.sql.tree.Identifier.accept(Identifier.java:51) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitGroupingOperation(ExpressionAnalyzer.java:1130) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitGroupingOperation(ExpressionAnalyzer.java:282) at com.facebook.presto.sql.tree.GroupingOperation.accept(GroupingOperation.java:49) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:258) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1447) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1400) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1366) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1354) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1342) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:118) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109) at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:49) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.sanity.TypeValidator.validate(TypeValidator.java:57) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validateIntermediatePlan$1(PlanSanityChecker.java:59) at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validateIntermediatePlan(PlanSanityChecker.java:59) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:129) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:122) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:358) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:337) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:269) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:748) ```  If `1.0` is replaced with `1`, the query succeeds. I believe this is due to some issue with implicit coercions. </body>
		<created>2017-08-15 03:00:10</created>
		<closed>2017-08-15 04:49:04</closed>
	</bug>
	<bug>
		<id>8711</id>
		<title>Regular expression failure for certain strings</title>
		<body>``` presto&gt; select REGEXP_EXTRACT('Baby K', 'by ([A-Z].*)\b[a-z]');   Query 20170809_223707_70717_ucc54 failed: 6 java.lang.ArrayIndexOutOfBoundsException: 6         at io.airlift.jcodings.MultiByteEncoding.safeLengthForUptoFour(MultiByteEncoding.java:64)         at io.airlift.jcodings.specific.NonStrictUTF8Encoding.length(NonStrictUTF8Encoding.java:30)         at io.airlift.jcodings.specific.BaseUTF8Encoding.mbcToCode(BaseUTF8Encoding.java:91)         at io.airlift.jcodings.specific.NonStrictUTF8Encoding.mbcToCode(NonStrictUTF8Encoding.java:22)         at io.airlift.jcodings.Encoding.isMbcWord(Encoding.java:469)         at io.airlift.joni.ByteCodeMachine.opWordBound(ByteCodeMachine.java:1063)         at io.airlift.joni.ByteCodeMachine.matchAt(ByteCodeMachine.java:239)         at io.airlift.joni.Matcher.matchCheck(Matcher.java:304)         at io.airlift.joni.Matcher.searchInterruptible(Matcher.java:457)         at io.airlift.joni.Matcher.search(Matcher.java:318)         at com.facebook.presto.operator.scalar.JoniRegexpFunctions.regexpExtract(JoniRegexpFunctions.java:256)         at com.facebook.presto.operator.scalar.JoniRegexpFunctions.regexpExtract(JoniRegexpFunctions.java:242)         at com.facebook.presto.$gen.PageProjection_20170809_223707_70717_ucc54_0_71_270090.project(Unknown Source)         at com.facebook.presto.$gen.PageProjection_20170809_223707_70717_ucc54_0_71_270090.project(Unknown Source)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.processBatch(PageProcessor.java:186)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:132)         at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:106)         at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:145)         at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:140)         at com.facebook.presto.operator.project.PageProcessorOutput.hasNext(PageProcessorOutput.java:51)         at com.facebook.presto.operator.FilterAndProjectOperator.isFinished(FilterAndProjectOperator.java:71)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:297)         at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234)         at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:538)         at com.facebook.presto.operator.Driver.processFor(Driver.java:229)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:623)         at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163)         at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23)         at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:483)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2017-08-09 22:38:26</created>
		<closed>2019-03-05 18:32:17</closed>
	</bug>
	<bug>
		<id>8673</id>
		<title>Planning failure for non-equi left join</title>
		<body>```sql SELECT 1 FROM orders a LEFT JOIN lineitem b ON a.comment &gt;= b.comment WHERE b.comment IS NOT NULL ```  Fails with:  ``` java.lang.IllegalArgumentException: Invalid node. Predicate dependencies ([comment_1, comment]) not in source plan output ([comment_1]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:146) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:597) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:79) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitFilter(ValidateDependenciesChecker.java:214) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitFilter(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:72) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:449) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:449) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitJoin(ValidateDependenciesChecker.java:307) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitJoin(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:218) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:232) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:449) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:196) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:276) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:93) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:90) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:85) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validateFinalPlan$0(PlanSanityChecker.java:54) at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validateFinalPlan(PlanSanityChecker.java:54) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:140) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:122) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:358) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:337) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:269) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  The issue doesn't occur if the WHERE clause is removed, if the join is converted to an INNER JOIN or an equality join.  This seems to be a recent regression, although I haven't tracked down which commit introduced it.</body>
		<created>2017-08-04 20:47:26</created>
		<closed>2017-08-14 07:57:49</closed>
	</bug>
	<bug>
		<id>8661</id>
		<title>Spaces in field names breaks CREATE TABLE AS</title>
		<body>[CREATE TABLE AS](https://prestodb.io/docs/current/sql/create-table-as.html) raises an Illegal Argument Exception when spaces are present in field names  Create table ```SQL CREATE TABLE IF NOT EXISTS scratch.foo AS   SELECT 'cats' AS "field with spaces"; ```  ``` [2017-08-03 10:14:47] [65536] Query failed (#20170803_141431_21545_jrg8x): field ended by ';': expected ';' but got 'with' at line 1:   optional binary field with [2017-08-03 10:14:47] java.lang.RuntimeException: java.lang.IllegalArgumentException: field ended by ';': expected ';' but got 'with' at line 1:   optional binary field with ```  A temporary solution is to replace spaces with underscores in the field names  ```SQL CREATE TABLE IF NOT EXISTS scratch.foo AS   SELECT 'cats' AS "field_without_spaces"; ```  ``` [2017-08-03 10:15:04] 1 row affected in 13s 500ms ```</body>
		<created>2017-08-03 14:30:12</created>
		<closed>2017-08-23 18:01:10</closed>
	</bug>
	<bug>
		<id>8654</id>
		<title>Unclear error message when selecting from table with empty schema</title>
		<body>I'm using the mongodb connector to read data from mongodb. In the beginning, Presto inferred an empty schema because my table didn't have any data in it at that time. However, even after adding data, simple queries would continue to fail with a rather strange and uninformative error message:  ``` presto:stuff&gt; select * from table; Query 20170803_032644_00003_2kmi5 failed: line 1:8: SELECT * not allowed in queries without FROM clause com.facebook.presto.sql.analyzer.SemanticException: line 1:8: SELECT * not allowed in queries without FROM clause ```  Manually updating the schema in the `_schema` table solves the issue and the query works as expected. However, this error message is still strange.  I'm not very familiar with Presto so I would like to know if this is a bug or if it is intended. If it is intended, why?</body>
		<created>2017-08-03 04:19:27</created>
		<closed>2018-10-29 22:25:55</closed>
	</bug>
	<bug>
		<id>8635</id>
		<title>Inserting data into REAL column in PostgreSQL table via Presto results in wrong data in table</title>
		<body>To reproduce:  * configure Presto to connect PSQL instance  * on PSQL: ``` psql&gt; create table ftestpg(a real, d double precision); ```  * on Presto: ``` presto&gt; insert into ftestpg values (real '1.0', 1.0); presto&gt; select * from ftestpg;       a       |  d --------------+-----  1.06535322E9 | 1.0 ```  The reason for that behaviour is that decision how insert is performed to SQL connector is made in many cases just based on  Presto container type (and not actual SQL type) in `JDBCRecordSink`. In case of `REAL` `appendLong` method is called, which results in `statement.setLong` being called on prepared statement while `setFloat` should have been. There is high chance that the problem is present also for some other SQL types. The code of `append*` methods should explicitly check for SQL type of handled column, and perform logic based on it. The default branch should just throw exception "Unsupported SQL type". </body>
		<created>2017-07-31 08:03:14</created>
		<closed>2017-11-27 00:39:26</closed>
	</bug>
	<bug>
		<id>8566</id>
		<title>Allow empty password in presto-jdbc</title>
		<body>JDBC password should be allowed to be empty: https://github.com/prestodb/presto/blob/eff7dcc2e2b88d60c23479a5e99c8ae582581f59/presto-jdbc/src/main/java/com/facebook/presto/jdbc/ConnectionProperties.java#L108  But this code wrongly forces password presence check: https://github.com/prestodb/presto/blob/eff7dcc2e2b88d60c23479a5e99c8ae582581f59/presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriverUri.java#L135  Background: presto-jdbc before 0.180 has ignored JDBC password property, so we are using username property for authentication (e.g., by embedding some API keys), so we have been using presto-jdbc with SSL + username (api key) + empty password. </body>
		<created>2017-07-20 22:25:14</created>
		<closed>2017-10-06 19:00:22</closed>
	</bug>
	<bug>
		<id>8559</id>
		<title>approx_percentile() with percentages array fails when used as window function</title>
		<body>``` presto&gt; select approx_percentile(42, array[0.5]) over ();  Query 20170720_165839_00007_qt844 failed: com.facebook.presto.spi.function.WindowIndex.getObject(II)Lcom/facebook/presto/spi/block/Block; java.lang.NoSuchMethodError: com.facebook.presto.spi.function.WindowIndex.getObject(II)Lcom/facebook/presto/spi/block/Block; at com.facebook.presto.$gen.Array_bigint_BigintArray_double_ApproxPercentileAccumulator_70.addInput(Unknown Source) at com.facebook.presto.operator.window.AggregateWindowFunction.accumulate(AggregateWindowFunction.java:81) at com.facebook.presto.operator.window.AggregateWindowFunction.processRow(AggregateWindowFunction.java:71) at com.facebook.presto.operator.window.WindowPartition.processNextRow(WindowPartition.java:108) at com.facebook.presto.operator.WindowOperator.extractOutput(WindowOperator.java:439) at com.facebook.presto.operator.WindowOperator.getOutput(WindowOperator.java:395) at com.facebook.presto.operator.Driver.processInternal(Driver.java:300) at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:538) at com.facebook.presto.operator.Driver.processFor(Driver.java:229) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:623) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:163) at com.facebook.presto.execution.executor.LegacyPrioritizedSplitRunner.process(LegacyPrioritizedSplitRunner.java:23) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:478) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-07-20 16:59:19</created>
		<closed>2017-07-25 23:01:03</closed>
	</bug>
	<bug>
		<id>8550</id>
		<title>PartialAggregationPushdown does not preserve symbols required by join filters and equi-conditions</title>
		<body>``` SELECT orders.custkey AS custkey, orders.orderstatus AS orderstatus FROM orders JOIN lineitem ON lineitem.orderkey = orders.orderkey AND lineitem.orderkey &lt;= orders.orderkey GROUP BY orders.custkey, orders.orderstatus ``` output: ``` Caused by: java.lang.IllegalArgumentException: Invalid node. Expression dependencies ([orderkey]) not in source plan output ([custkey, orderstatus, $hashvalue_17]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:146) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:597) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:79) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:237) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:93) ```</body>
		<created>2017-07-19 14:35:58</created>
		<closed>2017-07-25 11:54:49</closed>
	</bug>
	<bug>
		<id>8536</id>
		<title>Temporary table left after insert into mysql table fails</title>
		<body>Hi I found a bug to implement jdbc insert into! It is like this:          When the mysql character set is latin1 - cp1252 West European, I execute the insert statement: insert into test1 values ('世界', cast ('Ver.1.3' as varchar (100))) I got the following error:          Query 20170718_012821_00019_yucvr failed: Incorrect string value: '\ xE8 \ xB4 \ xB5 \ xE9 \ x98 \ xB3 ...' for column 'user_addr_name' at row 1 After a period of time there are many temporary table: ![2017-07-18 09-40-57](https://user-images.githubusercontent.com/19815755/28296899-8b923c7c-6b9d-11e7-8cc1-10b5d5f77ff9.png)  </body>
		<created>2017-07-18 01:46:16</created>
		<closed>2018-07-09 05:57:45</closed>
	</bug>
	<bug>
		<id>8499</id>
		<title>Analysis error in query involving grouping() and implicit coercion</title>
		<body>```sql SELECT     1.0 * count(*),     grouping(x) FROM (VALUES 1) t(x) GROUP BY GROUPING SETS ((x)) ```  Fails with:  ``` com.facebook.presto.sql.analyzer.SemanticException: Column 'x' cannot be resolved         at com.facebook.presto.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:30)         at com.facebook.presto.sql.analyzer.Scope.lambda$resolveField$0(Scope.java:104)         at java.util.Optional.orElseThrow(Optional.java:290)         at com.facebook.presto.sql.analyzer.Scope.resolveField(Scope.java:104)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:371)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIdentifier(ExpressionAnalyzer.java:282)         at com.facebook.presto.sql.tree.Identifier.accept(Identifier.java:51)         at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitGroupingOperation(ExpressionAnalyzer.java:1130)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitGroupingOperation(ExpressionAnalyzer.java:282)         at com.facebook.presto.sql.tree.GroupingOperation.accept(GroupingOperation.java:49)         at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:258)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1447)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1400)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1366)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1354)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1342)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:118)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)         at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)         at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)         at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:109)         at com.facebook.presto.sql.planner.sanity.TypeValidator$Visitor.visitProject(TypeValidator.java:60)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)         at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)         at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19)         at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:49)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82)         at com.facebook.presto.sql.planner.sanity.TypeValidator.validate(TypeValidator.java:57)         at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validateIntermediatePlan$1(PlanSanityChecker.java:60)         at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408)         at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validateIntermediatePlan(PlanSanityChecker.java:60)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:128)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:121)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:312)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:291)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:247)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:748) ```  It doesn't happen if `1.0 *` is removed or `count(*)` is explicitly cast to double before multiplying it, which makes me think this is a issue with implicit coercions.</body>
		<created>2017-07-13 21:40:44</created>
		<closed>2017-11-16 18:26:19</closed>
	</bug>
	<bug>
		<id>8497</id>
		<title>explain for join fails on Hive when partition_by contains TS column</title>
		<body>Steps to reproduce: 1. Create a table with timestamp column which is partition key:   `create table ts_table (a bigint, ts timestamp) with (partitioned_by = array['ts']);` 2. Insert any data into such table (does not reproduce when table is empty):   `insert into ts_table values (1, cast(current_time as timestamp));` 3. Create any other table (doesn't have to contain TS column):   `create table other_table (a bigint);` 4. Try to join both tables (TS column doesn't have to be included in the join criteria): ``` presto:default&gt; explain select ts_table.*, other_table.* from ts_table, other_table where ts_table.a = other_table.a; Query 20170713_202815_00064_etzv2 failed: index (1) must be less than size (1) ```</body>
		<created>2017-07-13 20:30:28</created>
		<closed>2017-07-14 13:16:36</closed>
	</bug>
	<bug>
		<id>8457</id>
		<title>JsonMappingException No serializer found for class java.util.concurrent.TimeoutException</title>
		<body>REST /v1/node endpoint returns internal server error due to Jakson serialization problem.    ``` curl -i localhost:8080/v1/node HTTP/1.1 500 Internal Server Error Date: Sun, 09 Jul 2017 21:20:14 GMT Content-Type: text/plain Content-Length: 6714  com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.util.concurrent.TimeoutException and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.google.common.collect.Values[6]-&gt;com.facebook.presto.failureDetector.Stats["lastFailureException"]) at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:275) at com.fasterxml.jackson.databind.SerializerProvider.mappingException(SerializerProvider.java:1109) at com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(SerializerProvider.java:1134) at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:69) at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:32) at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:693) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:690) at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContentsUsing(CollectionSerializer.java:176) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:120) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:112) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:416) at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1416) at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:940) at io.airlift.jaxrs.JsonMapper.writeTo(JsonMapper.java:233) at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250) at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:711) at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444) at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434) at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) at org.glassfish.jersey.internal.Errors.process(Errors.java:315) at org.glassfish.jersey.internal.Errors.process(Errors.java:297) at org.glassfish.jersey.internal.Errors.process(Errors.java:267) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:462) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:523) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2017-07-09 21:21:31</created>
		<closed>2017-07-12 20:02:22</closed>
	</bug>
	<bug>
		<id>8390</id>
		<title>Major performance regression in PartitionedOutputOperator  between 0.173 and 0.174</title>
		<body>Our benchmarking shows a regression in performance between 0.173 and 0.174, and after much analysis the regression seems to be solely in the PartitionedOutputOperator.  For example, in TPCH q5 we see stage  6 we see                     `addInputWall` increase from 1.17 seconds to 1.21 minutes. </body>
		<created>2017-06-28 19:54:04</created>
		<closed>2018-04-13 19:56:21</closed>
	</bug>
	<bug>
		<id>8348</id>
		<title>!= operator is not working correctly in presto for decimal values</title>
		<body>I connected hive with presto and query a table containing decimal values. In  case of != operator it's showing me all the rows of the table.  Below are the create table and load queries for hive:  `create table decimalOperatorCheck(name String, ids decimal(10,2))ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';`  Load data: `load data local inpath '/home/hduser/Files/decimaldata.csv' into table decimalOperatorCheck;`  Query in Presto CLI: `select * from decimaloperatorcheck where ids !=12345.56;`  Output:  &gt; presto:default&gt; select * from decimaloperatorcheck where ids !=12345.56; &gt;   name  |   ids     &gt; --------+---------- &gt;  Justin | 11.90     &gt;  Josh   | 233.34    &gt;  Alex   | 123.45    &gt;  Ryan   | 12345.56  &gt; (4 rows)   Here is the csv used for loading data. [data.txt](https://github.com/prestodb/presto/files/1096920/data.txt) </body>
		<created>2017-06-23 06:28:50</created>
		<closed>2018-06-13 10:56:40</closed>
	</bug>
	<bug>
		<id>8341</id>
		<title>Query fails with newMemoryReservation is negative</title>
		<body>``` java.lang.IllegalArgumentException: newMemoryReservation is negative         at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)         at com.facebook.presto.operator.OperatorContext.setMemoryReservation(OperatorContext.java:306)         at com.facebook.presto.operator.AggregationOperator.addInput(AggregationOperator.java:168)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:309)         at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234)         at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:541)         at com.facebook.presto.operator.Driver.processFor(Driver.java:229)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:623)         at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162)         at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:463)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:748) ```  </body>
		<created>2017-06-22 22:55:18</created>
		<closed>2017-06-23 05:05:33</closed>
	</bug>
	<bug>
		<id>8331</id>
		<title>Fix error handling of RLE block projection and filter</title>
		<body>``` &lt;NULL failure message&gt; com.google.common.base.VerifyException com.google.common.base.Verify.verify(Verify.java:99) com.facebook.presto.operator.project.DictionaryAwarePageProjection.project(DictionaryAwarePageProjection.java:79) </body>
		<created>2017-06-22 16:58:35</created>
		<closed>2017-07-06 17:26:47</closed>
	</bug>
	<bug>
		<id>8329</id>
		<title>Explain (plan printing) fails for a Hive table partitioned by timestmp or date</title>
		<body>Explain &lt;select * from table&gt; gives errors for a table partitoned by timestamp.   ``` CREATE EXTERNAL TABLE TEST_TABLE(   account_id bigint,   account_type string,   account_number bigint ) PARTITIONED BY (   business_eff_dt timestamp) STORED AS ORC   LOCATION   's3://fimt-fpphistory-dev-content/TABLE_DATA/TEMP_LOAD/TEST_TABLE' TBLPROPERTIES (   'orc.compress'='ZLIB'); ``` This is the stack i get when i run explain  ``` presto:default&gt; explain select * from TEST_TABLE; Query 20170622_135942_00034_dwh5v failed: index (1) must be less than size (1) java.lang.IndexOutOfBoundsException: index (1) must be less than size (1)         at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:1177)         at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:1159)         at com.google.common.collect.SingletonImmutableList.get(SingletonImmutableList.java:41)         at com.facebook.presto.sql.FunctionInvoker.invoke(FunctionInvoker.java:67)         at com.facebook.presto.sql.FunctionInvoker.invoke(FunctionInvoker.java:43)         at com.facebook.presto.sql.planner.PlanPrinter.castToVarchar(PlanPrinter.java:1376)         at com.facebook.presto.sql.planner.PlanPrinter.access$700(PlanPrinter.java:146)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.lambda$formatDomain$15(PlanPrinter.java:1293)         at com.facebook.presto.spi.predicate.SortedRangeSet$2.consume(SortedRangeSet.java:220)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.formatDomain(PlanPrinter.java:1288)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.printConstraint(PlanPrinter.java:1274)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.printTableScanInfo(PlanPrinter.java:1036)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:909)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:620)         at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.processChildren(PlanPrinter.java:1247)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitExchange(PlanPrinter.java:1189)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitExchange(PlanPrinter.java:620)         at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:195)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.processChildren(PlanPrinter.java:1247)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitOutput(PlanPrinter.java:1077)         at com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitOutput(PlanPrinter.java:620)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82)         at com.facebook.presto.sql.planner.PlanPrinter.&lt;init&gt;(PlanPrinter.java:167)         at com.facebook.presto.sql.planner.PlanPrinter.&lt;init&gt;(PlanPrinter.java:154)         at com.facebook.presto.sql.planner.PlanPrinter.textLogicalPlan(PlanPrinter.java:191)         at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:95)         at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.getQueryPlan(ExplainRewrite.java:126)         at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:104)         at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:60)         at com.facebook.presto.sql.tree.Explain.accept(Explain.java:80)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)         at com.facebook.presto.sql.rewrite.ExplainRewrite.rewrite(ExplainRewrite.java:57)         at com.facebook.presto.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:51)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:65)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:296)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:282)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:238)         at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:748) ```  This looks like its happening for a "timestamp" or "date" partitioned table. I tried on a table without partitioning table and another table with "string" partitioning and both worked fine without issues. Note: The tables are Hive tables, stored as ORC accessed in presto via the hive connector.    </body>
		<created>2017-06-22 14:06:42</created>
		<closed>2017-07-21 22:57:26</closed>
	</bug>
	<bug>
		<id>8323</id>
		<title>`TRY(MAP(ARRAY[NULL], ARRAY[x]))` fails</title>
		<body>The query below fails      SELECT       TRY(MAP(ARRAY[NULL], ARRAY[x]))     FROM       (VALUES 1, 2) t(x);  with error stack trace      java.lang.IllegalStateException: Expected current entry to be closed but was opened             at com.facebook.presto.spi.block.MapBlockBuilder.beginBlockEntry(MapBlockBuilder.java:152)             at com.facebook.presto.spi.block.MapBlockBuilder.beginBlockEntry(MapBlockBuilder.java:29)             at com.facebook.presto.operator.scalar.MapConstructor.createMap(MapConstructor.java:105)             at com.facebook.presto.$gen.PageProjection_90585.try_0(Unknown Source)             at com.facebook.presto.$gen.PageProjection_90585.project(Unknown Source)             at com.facebook.presto.$gen.PageProjection_90585.project(Unknown Source)             at com.facebook.presto.operator.project.DictionaryAwarePageProjection.project(DictionaryAwarePageProjection.java:97)             at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.processBatch(PageProcessor.java:179)             at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:125)             at com.facebook.presto.operator.project.PageProcessor$PositionsPageProcessorIterator.computeNext(PageProcessor.java:99)             at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:145)             at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:140)             at com.facebook.presto.operator.project.PageProcessorOutput.hasNext(PageProcessorOutput.java:51)             at com.facebook.presto.operator.FilterAndProjectOperator.isFinished(FilterAndProjectOperator.java:71)             at com.facebook.presto.operator.Driver.processInternal(Driver.java:300)             at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234)             at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:537)             at com.facebook.presto.operator.Driver.processFor(Driver.java:229)             at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:623)             at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162)             at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:463)             at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)             at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)             at java.lang.Thread.run(Thread.java:748)  This sequence of event explains the root cause:  * Certain functions (mostly functions that return array/map) use a feature in the Presto function framework called `instanceFactory` to avoid repeated allocation of `BlockBuilder`s and to avoid the burden of estimating the size of the allocation. * When a function fails, it leaves the `BlockBuilder` in a broken state. * The exception is caught by `TRY`. As a result, the function will be invoked again. * When the function gets invoked again, it uses the broken `BlockBuilder` and fails.  To fix this:  * Some of the functions uses byte code generated. Working with `try ... catch` in byte code generation is hard. Making things worse, Presto almost exclusively use stack to maintain intermediates during byte code generation. It doesn't use local variables. Stack is completely dropped by JVM before a catch block is executed. In addition, we don't really want to handle this in every function implementation. That is error prone and burdensome for future functions. * Adding a `try...catch` to projection/filter processor to reset the `instance` a function maintains. Such processors are also generated. And the above mentioned complexity applies. (Resetting the `instance`s also carry a cost.) * Revamp the way exceptions that can be caught by `TRY` are thrown, so that they don't actually throw a Java exception. (Instead, use a passed-in object to track exceptions.) Further, require that all functions make sure that states are left in a good state.  The last fix is the one we would like.  It is not a straightforward fix. As a result, we would settle for a quick temporary mitigation. This doesn't fix the issue, but would get us a more deterministic behavior.  * Throw an exception using error code GENERIC_INTERNAL_ERROR from functions that uses `BlockBuilder`s as intermediate states so that it can't be caught by `TRY`. Add tests for this (and improve function test framework to enable such tests). We considered using a special error code, but after discussion with @martint, we decide to go with GENERIC_INTERNAL_ERROR for now. </body>
		<created>2017-06-22 00:33:04</created>
		<closed>2017-08-24 21:23:07</closed>
	</bug>
	<bug>
		<id>8316</id>
		<title>Number of splits for intermediate stages in CLI shows incorrect values</title>
		<body>There two related problems: 1) the number of running intermediate splits goes up and down throughout the execution of the query. This causes the progress bar to move forward and backward, since the chevron section of the bar depends on how many splits are running at a given point in time. 2) in cases where most leaf splits are done and the query is waiting on stragglers, intermediate stages show "0" splits running. This causes overall progress to show a misleading number, since the intermediate splits are being counted towards the total number of splits to be completed.  I believe this may be happening because RUNNING state for intermediate splits no longer counts splits that are BLOCKED. We need to fix the counter so that it reflects both (i.e., splits scheduled on workers, instead of just splits being scheduled on a CPU).  ``` 46:20 [32.4M rows, 3.01GB] [11.7K rows/s, 1.11MB/s] [========&gt;                                 ] 18%       STAGES   ROWS  ROWS/s  BYTES  BYTES/s  QUEUED    RUN   DONE 0.........R      0       0     0B       0B       0      0      0   1.......R      0       0     0B       0B       0      0      0     2.....R  56.6M   20.3K   7.1G    2.61M       0      0      0       3...R  32.4M   11.7K  3.01G    1.11M       0      1    489 ```</body>
		<created>2017-06-21 16:58:25</created>
		<closed>2017-06-27 17:29:06</closed>
	</bug>
	<bug>
		<id>8250</id>
		<title>Column name resolution issue</title>
		<body>I've found following issue regarding column name resolution when switching from version 0.158 to 0.178. Using version 0.158 this query:  &gt; SELECT catalog.schema.table."column" FROM catalog.schema.table GROUP BY "column" ORDER BY catalog.schema.table."column" ASC;  Worked fine. Using v 0.178 I've got:  &gt; Query 20170613_104018_34104_v6755 failed: line 1:95: Column 'catalog.schema.table.column' cannot be resolved  It seems to be a problem with `ExpressionAnalyzer` that has changed over those versions.  Stacktrace for this query:  &gt; com.facebook.presto.sql.analyzer.SemanticException: line 1:95: Column 'catalog.schema.table.column' cannot be resolved  &gt;at com.facebook.presto.sql.analyzer.SemanticExceptions.missingAttributeException(SemanticExceptions.java:30)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitDereferenceExpression(ExpressionAnalyzer.java:399)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitDereferenceExpression(ExpressionAnalyzer.java:282)  &gt;at com.facebook.presto.sql.tree.DereferenceExpression.accept(DereferenceExpression.java:53)  &gt;at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:301)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:258)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1441)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1394)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1360)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1348)  &gt;at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1336)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.desugar(DesugaringOptimizer.java:203)  &gt;at com.facebook.presto.sql.planner.plan.Assignments.lambda$rewrite$1(Assignments.java:109)  &gt;at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)  &gt;at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)  &gt;at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)  &gt;at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)  &gt;at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)  &gt;at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  &gt;at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)  &gt;at com.facebook.presto.sql.planner.plan.Assignments.rewrite(Assignments.java:110)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:125)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73)  &gt;at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)  &gt;at java.util.Collections$2.tryAdvance(Collections.java:4717)  &gt;at java.util.Collections$2.forEachRemaining(Collections.java:4725)  &gt;at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)  &gt;at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)  &gt;at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)  &gt;at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  &gt;at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:38)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:99)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.PlanVisitor.visitSort(PlanVisitor.java:104)  &gt;at com.facebook.presto.sql.planner.plan.SortNode.accept(SortNode.java:88)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73)  &gt;at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)  &gt;at java.util.Collections$2.tryAdvance(Collections.java:4717)  &gt;at java.util.Collections$2.forEachRemaining(Collections.java:4725)  &gt;at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)  &gt;at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)  &gt;at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)  &gt;at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)  &gt;at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:38)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:99)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:77)  &gt;at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:49)  &gt;at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82)  &gt;at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:27)  &gt;at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer.optimize(DesugaringOptimizer.java:74)  &gt;at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:130)  &gt;at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:121)  &gt;at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:312)  &gt;at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:291)  &gt;at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:247)  &gt;at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)  &gt;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)  &gt;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)  &gt;at java.lang.Thread.run(Thread.java:745)</body>
		<created>2017-06-13 10:44:37</created>
		<closed>2017-07-03 08:19:54</closed>
	</bug>
	<bug>
		<id>8207</id>
		<title>Planning failure when using GROUPING and legacy_order_by=true</title>
		<body>``` presto&gt; set session legacy_order_by=true; SET SESSION  presto&gt; SELECT grouping(a) FROM (VALUES (1) ) AS t (a) GROUP BY a;  Query 20170607_011620_02738_84kx5 failed: GroupingOperation should have been re-written to a FunctionCall before execution java.lang.IllegalStateException: GroupingOperation should have been re-written to a FunctionCall before execution at com.google.common.base.Preconditions.checkState(Preconditions.java:444) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.desugar(DesugaringOptimizer.java:198) at com.facebook.presto.sql.planner.plan.Assignments.lambda$rewrite$1(Assignments.java:109) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.Assignments.rewrite(Assignments.java:110) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:125) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:124) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:77) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Collections$2.tryAdvance(Collections.java:4717) at java.util.Collections$2.forEachRemaining(Collections.java:4725) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:38) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:99) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitPlan(DesugaringOptimizer.java:77) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:49) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:27) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer.optimize(DesugaringOptimizer.java:74) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:130) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:121) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:312) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:291) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:247) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:748) ```</body>
		<created>2017-06-07 01:20:34</created>
		<closed>2017-06-07 16:26:39</closed>
	</bug>
	<bug>
		<id>8194</id>
		<title>Planning failure for ORDER BY...LIMIT with similar expressions</title>
		<body>```SQL WITH t AS (SELECT 1 x, 1 y)  SELECT x, y  FROM t ORDER BY x, y LIMIT 1 ```  ``` Query 20170606_002050_01487_rgj4j failed: Multiple entries with same key: expr=ASC_NULLS_LAST and expr=ASC_NULLS_LAST java.lang.IllegalArgumentException: Multiple entries with same key: expr=ASC_NULLS_LAST and expr=ASC_NULLS_LAST at com.google.common.collect.ImmutableMap.checkNoConflict(ImmutableMap.java:186) at com.google.common.collect.RegularImmutableMap.checkNoConflictInKeyBucket(RegularImmutableMap.java:102) at com.google.common.collect.RegularImmutableMap.fromEntryArray(RegularImmutableMap.java:88) at com.google.common.collect.ImmutableMap$Builder.build(ImmutableMap.java:359) at com.facebook.presto.sql.planner.optimizations.SymbolMapper.map(SymbolMapper.java:128) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitTopN(UnaliasSymbolReferences.java:448) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitTopN(UnaliasSymbolReferences.java:117) at com.facebook.presto.sql.planner.plan.TopNNode.accept(TopNNode.java:119) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:403) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:117) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:403) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:117) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:403) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitProject(UnaliasSymbolReferences.java:117) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitOutput(UnaliasSymbolReferences.java:410) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitOutput(UnaliasSymbolReferences.java:117) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:27) at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences.optimize(UnaliasSymbolReferences.java:114) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:129) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:312) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:291) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:247) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-06-06 00:23:10</created>
		<closed>2017-06-08 15:49:13</closed>
	</bug>
	<bug>
		<id>8165</id>
		<title>Test failure due to correlated subquery in IN predicate</title>
		<body>TestRedisDistributedHash.testCorrelatedInPredicateSubqueries fails with the following error:  ``` java.lang.AssertionError: Execution of 'actual' query failed: SELECT orderkey, clerk IN (SELECT clerk FROM orders s WHERE s.custkey = o.custkey AND s.orderkey &lt; o.orderkey) FROM orders o  at org.testng.Assert.fail(Assert.java:83) at com.facebook.presto.tests.QueryAssertions.assertQuery(QueryAssertions.java:86) at com.facebook.presto.tests.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:117) at com.facebook.presto.tests.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:112) at com.facebook.presto.tests.AbstractTestQueries.testCorrelatedInPredicateSubqueries(AbstractTestQueries.java:7166) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104) at org.testng.internal.Invoker.invokeMethod(Invoker.java:645) at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851) at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177) at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112) at org.testng.TestRunner.privateRun(TestRunner.java:756) at org.testng.TestRunner.run(TestRunner.java:610) at org.testng.SuiteRunner.runTest(SuiteRunner.java:387) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340) at org.testng.SuiteRunner.run(SuiteRunner.java:289) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293) at org.testng.TestNG.runSuitesLocally(TestNG.java:1218) at org.testng.TestNG.runSuites(TestNG.java:1133) at org.testng.TestNG.run(TestNG.java:1104) at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72) at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:127) Caused by: java.lang.IllegalStateException: No mapping for column handle RedisColumnHandle{connectorId=redis, ordinalPosition=0, name=redis_key, type=varchar(64), mapping=null, dataFormat=null, formatHint=null, keyDecoder=true, hidden=true, internal=false}! at com.google.common.base.Preconditions.checkState(Preconditions.java:518) at com.facebook.presto.redis.decoder.hash.HashRedisRowDecoder.decodeRow(HashRedisRowDecoder.java:58) at com.facebook.presto.redis.RedisRecordCursor.nextRow(RedisRecordCursor.java:184) at com.facebook.presto.redis.RedisRecordCursor.advanceNextPosition(RedisRecordCursor.java:147) at com.facebook.presto.spi.RecordPageSource.getNextPage(RecordPageSource.java:99) at com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:262) at com.facebook.presto.operator.Driver.processInternal(Driver.java:303) at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234) at com.facebook.presto.operator.Driver.tryWithLock(Driver.java:537) at com.facebook.presto.operator.Driver.processFor(Driver.java:229) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:623) at com.facebook.presto.execution.executor.PrioritizedSplitRunner.process(PrioritizedSplitRunner.java:162) at com.facebook.presto.execution.executor.TaskExecutor$TaskRunner.run(TaskExecutor.java:463) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  This seems to be a regression introduced in 98faf69c110b0f7e51b79924fa06aef9ae345a6e</body>
		<created>2017-06-01 18:22:07</created>
		<closed>2017-06-02 15:15:37</closed>
	</bug>
	<bug>
		<id>8151</id>
		<title>UNNEST of collections of row types should produce multiple columns</title>
		<body>According to the spec, if the type of the elements of the collection passed to UNNEST is a row type, the output of unnest should "flatten" the fields in each row.  ``` m)     ...     ii) Otherwise, Case:         1) If any ET_j, 1 (one) ≤ j ≤ NCV, is a row type, then:             A) For each ET_j that is a row type:                 I) Let DET(j) be the degree of ET_j.                 II) Let FN_j,i, 1 (one) ≤ i ≤ DET(j), be the name of the i-th  eld in ET_j. ...  n) If ET_j, 1 (one) ≤ j ≤ NCV, is a row type, then let SLE_j be (N_j).*; otherwise, let SLE_j be N_j.     ...     ii) Otherwise, let ELDT be:         LATERAL ( RECQP SELECT SLE_1, ..., SLE_NCV         FROM TEMP ) AS CN PDCLP ```  Currently, Presto returns a single column whose type is ROW:  ``` presto&gt; SELECT * FROM UNNEST(array[row('a', 1), row('b', 2)]);         _col0 ----------------------  {field0=a, field1=1}  {field0=b, field1=2} (2 rows) ```</body>
		<created>2017-05-30 23:32:36</created>
		<closed>2018-07-24 18:46:49</closed>
	</bug>
	<bug>
		<id>8143</id>
		<title>Memory not accounted for during right outer join</title>
		<body>## Steps to reproduce  1. in CLI execute ``` select * from (values 1) t(a) right outer join tpch.sf1.orders on t.a = orderkey; ``` 2. wait until initial results are already visible (but query is still running)  ## Observed  - Query is still running (of course) - Server JVM has increased memory usage (by ~400MB for this particular query on my particular laptop) - Reserved Memory in Web UI shows **`0`**   This is because `HashBuilderOperator` completes (and it's memory is un-accounted-for) once `PartitionedLookupSourceFactory` is destroyed, which is triggered by `LookupOuterOperatorFactory#close`. `LookupOuterOperator` continues to use memory allocated and originally accounted for by `HashBuilderOperator`, but the memory is no longer in the books. </body>
		<created>2017-05-29 13:24:26</created>
		<closed>2017-06-10 20:20:54</closed>
	</bug>
	<bug>
		<id>8142</id>
		<title>CLI doesn't abort query on the server when partial results already shown in pager</title>
		<body>## Steps to reproduce  1. in CLI execute ``` select * from tpch.sf1.orders; ``` 2. wait until initial results are already visible (but query is still running) 3. press `q` to quit pager  Now CLI prints  ``` (query aborted by user)  Query 20170529_130533_00023_9v5js, RUNNING, 1 node Splits: 20 total, 0 done (0.00%) 0:05 [0 rows, 0B] [0 rows/s, 0B/s]  Query aborted by user ```  ## Observed  - Query still running on the server. - Query is only killed by "Failing abandoned query". - if query is killed manually in the UI, it ends immediately, so it looks like CLI fails to deliver kill to the server </body>
		<created>2017-05-29 13:09:21</created>
		<closed>2017-09-11 20:34:43</closed>
	</bug>
	<bug>
		<id>8117</id>
		<title>STATS keyword should be non-reserved</title>
		<body></body>
		<created>2017-05-24 01:53:29</created>
		<closed>2017-05-24 20:18:50</closed>
	</bug>
	<bug>
		<id>8025</id>
		<title>Invalid results when fast_inequality_join=true and table contains null values</title>
		<body>``` presto:default&gt; create table t3(a bigint, b bigint); CREATE TABLE  presto:default&gt; insert into t3 values (0,0), (0, -1), (0, null), (0, 1); INSERT: 4 rows  presto:default&gt; set session fast_inequality_join=true; SET SESSION  presto:default&gt; select * from nation n, t3 where n.regionkey -100 &lt; t3.b and n.nationkey = t3.a;  nationkey |   name    | regionkey |                                   comment                                    | a | b   -----------+-----------+-----------+------------------------------------------------------------------------------+---+----          0 | ALGERIA   |         0 |  haggle. carefully final deposits detect slyly agai                          | 0 | -1           0 | ALGERIA   |         0 |  haggle. carefully final deposits detect slyly agai                          | 0 |  0           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  1           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  2           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  3   presto:default&gt; set session fast_inequality_join=false; SET SESSION  presto:default&gt; select * from nation n, t3 where n.regionkey -100 &lt; t3.b and n.nationkey = t3.a;  nationkey |   name    | regionkey |                                   comment                                    | a | b   -----------+-----------+-----------+------------------------------------------------------------------------------+---+----          0 | ALGERIA   |         0 |  haggle. carefully final deposits detect slyly agai                          | 0 |  1           0 | ALGERIA   |         0 |  haggle. carefully final deposits detect slyly agai                          | 0 | -1           0 | ALGERIA   |         0 |  haggle. carefully final deposits detect slyly agai                          | 0 |  0           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  3           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  2           1 | ARGENTINA |         1 | al foxes promise slyly according to the regular accounts. bold requests alon | 1 |  1  ```  Rows with null values are part of `SortedPositionLinks`. However, `applyLessThanFunction` will return `false` for null rows prematurely breaking join position enumeration.  This most likely is a release blocker since `fast_inequality_join` is true by default.  FYI: @pnowojski @dain @martint </body>
		<created>2017-05-15 12:36:06</created>
		<closed>2017-05-18 02:15:56</closed>
	</bug>
	<bug>
		<id>7928</id>
		<title>Planning failure for UNION and GROUP BY</title>
		<body>The following query:  ``` WITH t1 AS (   SELECT 1   FROM tpch.tiny.nation   GROUP BY 1 ), t2 AS (   SELECT 1 FROM tpch.tiny.nation   UNION ALL   SELECT 1 FROM tpch.tiny.nation )  SELECT 1 FROM t1 UNION ALL SELECT 1 FROM t2 ```  Fails during planning with:  ``` java.lang.IllegalStateException: Cannot set distribution to ROUND_ROBIN. Already set to Optional[HASH] at com.google.common.base.Preconditions.checkState(Preconditions.java:721) at com.facebook.presto.sql.planner.PlanFragmenter$FragmentProperties.setDistribution(PlanFragmenter.java:259) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:192) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:84) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:195) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:183) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:84) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:195) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.buildSubPlan(PlanFragmenter.java:215) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:198) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitExchange(PlanFragmenter.java:84) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:195) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Collections$2.tryAdvance(Collections.java:4717) at java.util.Collections$2.forEachRemaining(Collections.java:4725) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitOutput(PlanFragmenter.java:135) at com.facebook.presto.sql.planner.PlanFragmenter$Fragmenter.visitOutput(PlanFragmenter.java:84) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:32) at com.facebook.presto.sql.planner.PlanFragmenter.createSubPlans(PlanFragmenter.java:75) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:314) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:282) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:238) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  This is probably related to the recent changes in https://github.com/prestodb/presto/pull/7239  cc @pnowojski </body>
		<created>2017-04-29 18:34:45</created>
		<closed>2017-05-01 21:26:12</closed>
	</bug>
	<bug>
		<id>7877</id>
		<title>"System distribution does not support source splits"</title>
		<body>```sql SELECT suppkey, 1 FROM supplier UNION ALL SELECT suppkey, count(*) FROM supplier GROUP BY 1 ``` Fails with:  ``` Query 20170420_233053_00006_69zes failed: System distribution does not support source splits java.lang.UnsupportedOperationException: System distribution does not support source splits at com.facebook.presto.sql.planner.SystemPartitioningHandle.lambda$getNodePartitionMap$0(SystemPartitioningHandle.java:157) at com.facebook.presto.sql.planner.NodePartitionMap.getNode(NodePartitionMap.java:59) at com.facebook.presto.execution.scheduler.NodeScheduler.selectDistributionNodes(NodeScheduler.java:276) at com.facebook.presto.execution.scheduler.SimpleNodeSelector.computeAssignments(SimpleNodeSelector.java:174) at com.facebook.presto.execution.scheduler.FixedSourcePartitionedScheduler$FixedSplitPlacementPolicy.computeAssignments(FixedSourcePartitionedScheduler.java:147) at com.facebook.presto.execution.scheduler.SourcePartitionedScheduler.schedule(SourcePartitionedScheduler.java:111) at com.facebook.presto.execution.scheduler.FixedSourcePartitionedScheduler.schedule(FixedSourcePartitionedScheduler.java:91) at com.facebook.presto.execution.scheduler.SqlQueryScheduler.schedule(SqlQueryScheduler.java:354) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  This is a regression introduced by 7c373d45525e84ce77ddfd05434b7323ba070565  cc @pnowojski </body>
		<created>2017-04-20 23:32:08</created>
		<closed>2017-04-21 23:40:21</closed>
	</bug>
	<bug>
		<id>7846</id>
		<title>CREATE TABLE should check for duplicate columns</title>
		<body>`CreateTableTask` should check for a duplicate column and throw `SemanticException(DUPLICATE_COLUMN_NAME)` rather than leaving it up to the connector (which should not be expected to handle this).  Here is what happens today against the Hive connector:  ``` presto&gt; create table test (x bigint, x bigint); Query 20170417_183416_15485_qs2vr failed: Multiple entries with same key: x=HiveColumnHandle{clientId=prism, name=x, hiveType=bigint, hiveColumnIndex=1, columnType=REGULAR, comment=Optional.empty} and x=HiveColumnHandle{clientId=prism, name=x, hiveType=bigint, hiveColumnIndex=0, columnType=REGULAR, comment=Optional.empty}. To index multiple values under a key, use Multimaps.index. ```  This should have the same error message as `CREATE TABLE AS`:  ``` presto:di&gt; create table test as select 123 x, 456 x; Query 20170417_183658_15553_qs2vr failed: line 1:1: Column name 'x' specified more than once ```</body>
		<created>2017-04-17 18:36:40</created>
		<closed>2017-05-25 19:45:11</closed>
	</bug>
	<bug>
		<id>7824</id>
		<title>Limit is not accounted for when transforming correlated scalar subquery with aggregation into join</title>
		<body>Flat with limit ``` presto:sf1&gt; select count(*) from (select * from (values (7,1), (7,2), (7,3), (7,4), (7,5), (7,6)) t(orderkey, value) where orderkey = 7 limit 5);  _col0  -------      5  (1 row) ``` flat without limit: ``` presto:sf1&gt; select count(*) from (select * from (values (7,1), (7,2), (7,3), (7,4), (7,5), (7,6)) t(orderkey, value) where orderkey = 7);  _col0  -------      6  (1 row) ``` correlated with limit: ``` presto:sf1&gt; select corr_key, (select count(*) from (select * from (values (7,1), (7,2), (7,3), (7,4), (7,5), (7,6)) t(orderkey, value) where orderkey = corr_key limit 5)) from (values 7) t(corr_key);  corr_key | _col1  ----------+-------         7 |     6  (1 row) ```  Limit is removed and then ignored in `com.facebook.presto.sql.planner.optimizations.TransformCorrelatedScalarAggregationToJoin`  FYI: @kokosing </body>
		<created>2017-04-13 12:25:51</created>
		<closed>2017-04-19 20:24:27</closed>
	</bug>
	<bug>
		<id>7796</id>
		<title>Selective aggregates don't work for count(1)</title>
		<body>Actual:  ``` presto&gt; select count(1) filter (where orderstatus = 'O') from orders;  _col0 -------  15000 (1 row) ```  Expected:  ``` presto&gt; select count(*) filter (where orderstatus = 'O') from orders;  _col0 -------   7333 (1 row) ```  The issue is probably due to SimplifyCountOverConstant not preserving the filter for the aggregation.</body>
		<created>2017-04-10 19:05:24</created>
		<closed>2017-04-11 02:37:50</closed>
	</bug>
	<bug>
		<id>7784</id>
		<title>Lambda captures do not work with qualified column names</title>
		<body>This works: ``` select transform(ARRAY[1], x -&gt; x + a) from (values 1) u(a); -- output: 2 ```  But this does not: ``` select transform(ARRAY[1], x -&gt; x + u.a) from (values 1) u(a); -- line 1:37: Column 'u' cannot be resolved ```  FYI: @martint @haozhun @sopel39 </body>
		<created>2017-04-07 21:45:40</created>
		<closed>2017-11-03 09:13:00</closed>
	</bug>
	<bug>
		<id>7780</id>
		<title>Incorrect lambda analysis in aggregation context</title>
		<body>``` presto:sf1&gt; select transform(array[1], x -&gt; y + transform(array[1], z -&gt; x)[1]) from (values (1, 2)) t(x,y) group by y + transform(array[1], z -&gt; x)[1]; Query 20170407_142317_00009_bw2qq failed: Invalid node. Expression dependencies ([field_2]) not in source plan output ([expr_7, $hashvalue]) ```  `LambdaReferenceExtractor` only searches at top level and doesn't visit nested lambdas. However, simply visiting nested lambdas won't fix the bug since we need to know that nested (capture) lambda argument reference comes from outer lambda. We can do this tracking in `LambdaReferenceExtractor`. However, we could imagine lambdas with captures within subqueries. In such case the tracking won't be feasible anymore. In the future, I think lambda argument resolution should use `Scope` and `FieldId` mechanism so that lambda and column references can be processed similarly. Currently Scope and lambda name resolution code is interleaved which doesn't seem to be necessary. This would also simplify (I think) lambda specific name resolution code which seems to be redundant across visitors.  FYI: @martint @haozhun @findepi </body>
		<created>2017-04-07 14:48:21</created>
		<closed>2017-05-18 22:52:02</closed>
	</bug>
	<bug>
		<id>7773</id>
		<title>Access Denied when using IN with subqueries even though no access control in place</title>
		<body>Query ``` SELECT (select distinct 1 from system.runtime.nodes) IN (SELECT 1 from system.runtime.nodes); ```  Yields the following (probably because `com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.desugar(DesugaringOptimizer.java:121)` calls `ExpressionAnalyzer.getExpressionTypes` which runs with `DenyAllAccessControl` under the hood): ``` com.facebook.presto.spi.security.AccessDeniedException: Access Denied: Cannot select from table system.runtime.nodes at com.facebook.presto.spi.security.AccessDeniedException.denySelectTable(AccessDeniedException.java:148) at com.facebook.presto.spi.security.AccessDeniedException.denySelectTable(AccessDeniedException.java:143) at com.facebook.presto.security.DenyAllAccessControl.checkCanSelectFromTable(DenyAllAccessControl.java:140) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitTable(StatementAnalyzer.java:754) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitTable(StatementAnalyzer.java:237) at com.facebook.presto.sql.tree.Table.accept(Table.java:53) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:249) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.analyzeFrom(StatementAnalyzer.java:1692) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:854) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuerySpecification(StatementAnalyzer.java:237) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:249) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:259) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:599) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.visitQuery(StatementAnalyzer.java:237) at com.facebook.presto.sql.tree.Query.accept(Query.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer$Visitor.process(StatementAnalyzer.java:249) at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:223) at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyze(StatementAnalyzer.java:218) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSubqueryExpression(ExpressionAnalyzer.java:1003) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSubqueryExpression(ExpressionAnalyzer.java:258) at com.facebook.presto.sql.tree.SubqueryExpression.accept(SubqueryExpression.java:51) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:277) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:234) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1435) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1388) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1354) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1342) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1330) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.desugar(DesugaringOptimizer.java:121) at com.facebook.presto.sql.planner.plan.Assignments.lambda$rewrite$1(Assignments.java:110) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.Assignments.rewrite(Assignments.java:111) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:87) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:86) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:38) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:22) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitApply(PlanVisitor.java:185) at com.facebook.presto.sql.planner.plan.ApplyNode.accept(ApplyNode.java:140) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:86) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:86) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:86) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:95) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:86) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:65) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:84) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:73) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Collections$2.tryAdvance(Collections.java:4717) at java.util.Collections$2.forEachRemaining(Collections.java:4725) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:74) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:38) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:22) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:27) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer.optimize(DesugaringOptimizer.java:62) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:121) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:112) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:303) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:282) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:238) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-04-06 19:43:04</created>
		<closed>2017-04-07 06:37:54</closed>
	</bug>
	<bug>
		<id>7753</id>
		<title>Query Optimizer failed to eliminating Remote Exchange </title>
		<body>The following query will generate non-optimal plan:  ``` explain (type distributed)  select b.orderkey, count(*)  from    (SELECT * FROM orders) a    JOIN    (SELECT * FROM lineitem) b  ON a.orderkey = b.orderkey  GROUP BY 1; ```  The plan: (we can eliminate the remote exchange between Fragment 1 and 2)  ```                                                               Query Plan                                                                ---------------------------------------------------------------------------------------------------------------------------------------  Fragment 0 [SINGLE]                                                                                                                         Output layout: [orderkey_35, count]                                                                                                     Output partitioning: SINGLE []                                                                                                          - Output[orderkey, _col1] =&gt; [orderkey_35:bigint, count:bigint]                                                                                 orderkey := orderkey_35                                                                                                                 _col1 := count                                                                                                                      - RemoteSource[1] =&gt; [orderkey_35:bigint, count:bigint]                                                                                                                                                                                                                 Fragment 1 [HASH]                                                                                                                           Output layout: [orderkey_35, count]                                                                                                     Output partitioning: SINGLE []                                                                                                          - Aggregate(FINAL)[orderkey_35] =&gt; [orderkey_35:bigint, count:bigint]                                                                           count := "count"("count_113")                                                                                                       - LocalExchange[HASH][$hashvalue] ("orderkey_35") =&gt; orderkey_35:bigint, count_113:bigint, $hashvalue:bigint                                - RemoteSource[2] =&gt; [orderkey_35:bigint, count_113:bigint, $hashvalue_114:bigint]                                                                                                                                                                                  Fragment 2 [tpch:orders:15000]                                                                                                              Output layout: [orderkey_35, count_113, $hashvalue_119]                                                                                 Output partitioning: HASH [orderkey_35][$hashvalue_119]                                                                                 - Project[] =&gt; [orderkey_35:bigint, count_113:bigint, $hashvalue_119:bigint]                                                                    $hashvalue_119 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_35"), 0))                                     - Aggregate(PARTIAL)[orderkey_35] =&gt; [orderkey_35:bigint, count_113:bigint]                                                                     count_113 := "count"(*)                                                                                                             - InnerJoin[("orderkey" = "orderkey_35")][$hashvalue_115, $hashvalue_116] =&gt; [orderkey_35:bigint]                                           - ScanProject[table = tpch:tpch:orders:sf0.01, originalConstraint = true] =&gt; [orderkey:bigint, $hashvalue_115:bigint]                           $hashvalue_115 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))                                            orderkey := tpch:orderkey                                                                                                       - LocalExchange[HASH][$hashvalue_116] ("orderkey_35") =&gt; orderkey_35:bigint, $hashvalue_116:bigint                                          - RemoteSource[3] =&gt; [orderkey_35:bigint, $hashvalue_117:bigint]                                                                                                                                                                                            Fragment 3 [tpch:orders:15000]                                                                                                              Output layout: [orderkey_35, $hashvalue_118]                                                                                            Output partitioning: tpch:orders:15000 [orderkey_35]                                                                                    - ScanProject[table = tpch:tpch:lineitem:sf0.01, originalConstraint = true] =&gt; [orderkey_35:bigint, $hashvalue_118:bigint]                      $hashvalue_118 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_35"), 0))                                         orderkey_35 := tpch:orderkey                                                                                               (1 row) ```                                                                                                                                                                                                                                                                                 The following queries can generate the correct plan:  - GROUP BY `a.orderkey` instead: ``` explain (type distributed)  select a.orderkey, count(*)  from    (SELECT * FROM orders) a    JOIN    (SELECT * FROM lineitem) b  ON a.orderkey = b.orderkey  GROUP BY 1; ```  - No subquery: ``` explain (type distributed)  select b.orderkey, count(*)  from orders a JOIN lineitem b ON a.orderkey = b.orderkey  GROUP BY 1; ```   </body>
		<created>2017-04-05 20:51:42</created>
		<closed>2017-04-07 06:02:16</closed>
	</bug>
	<bug>
		<id>7745</id>
		<title>"CREATE TABLE ... AS ..." doesn't parse proper query expressions</title>
		<body>```sql CREATE TABLE u AS (    WITH t(x) AS (VALUES 1)     SELECT x FROM t); ```  fails with a parsing error:  ``` Query 20170405_035149_08220_kmjsc failed: line 1:31: mismatched input 'WITH' expecting {'(', 'SELECT', 'VALUES', 'TABLE'} com.facebook.presto.sql.parser.ParsingException: line 1:31: mismatched input 'WITH' expecting {'(', 'SELECT', 'VALUES', 'TABLE'} at com.facebook.presto.sql.parser.SqlParser$1.syntaxError(SqlParser.java:45) at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41) at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:540) at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:301) at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:124) at com.facebook.presto.sql.parser.SqlBaseParser.queryPrimary(SqlBaseParser.java:3450) at com.facebook.presto.sql.parser.SqlBaseParser.queryTerm(SqlBaseParser.java:3196) at com.facebook.presto.sql.parser.SqlBaseParser.queryNoWith(SqlBaseParser.java:3047) at com.facebook.presto.sql.parser.SqlBaseParser.queryPrimary(SqlBaseParser.java:3439) at com.facebook.presto.sql.parser.SqlBaseParser.queryTerm(SqlBaseParser.java:3196) at com.facebook.presto.sql.parser.SqlBaseParser.queryNoWith(SqlBaseParser.java:3047) at com.facebook.presto.sql.parser.SqlBaseParser.query(SqlBaseParser.java:2492) at com.facebook.presto.sql.parser.SqlBaseParser.statement(SqlBaseParser.java:1461) at com.facebook.presto.sql.parser.SqlBaseParser.singleStatement(SqlBaseParser.java:233) at com.facebook.presto.sql.parser.SqlParser.invokeParser(SqlParser.java:92) at com.facebook.presto.sql.parser.SqlParser.createStatement(SqlParser.java:65) at com.facebook.presto.execution.SqlQueryManager.createQuery(SqlQueryManager.java:338) at com.facebook.presto.server.StatementResource$Query.&lt;init&gt;(StatementResource.java:329) at com.facebook.presto.server.StatementResource.createQuery(StatementResource.java:173) ```  Per the spec, the `&lt;table contents source&gt;` should be a parenthesized query expression, which can start with a `WITH` clause. Presto currently parses it as a `&lt;query&gt;`, which can resolve to a `&lt;query primary&gt;` that doesn't allow such clause.  ``` &lt;table definition&gt; ::=   CREATE [ &lt;table scope&gt; ] TABLE &lt;table name&gt; &lt;table contents source&gt;       [ WITH &lt;system versioning clause&gt; ]       [ ON COMMIT &lt;table commit action&gt; ROWS ]  &lt;table contents source&gt; ::=     &lt;table element list&gt;   | &lt;typed table clause&gt;   | &lt;as subquery clause&gt;  &lt;as subquery clause&gt; ::=   [ &lt;left paren&gt; &lt;column name list&gt; &lt;right paren&gt; ] AS &lt;table subquery&gt;       &lt;with or without data&gt;  &lt;table subquery&gt; ::=  &lt;subquery&gt; &lt;subquery&gt; ::=  &lt;left paren&gt; &lt;query expression&gt; &lt;right paren&gt;  &lt;query expression&gt; ::=   [ &lt;with clause&gt; ] &lt;query expression body&gt;       [ &lt;order by clause&gt; ] [ &lt;result offset clause&gt; ] [ &lt;fetch first clause&gt; ] ```  </body>
		<created>2017-04-05 04:01:36</created>
		<closed>2017-04-27 02:47:57</closed>
	</bug>
	<bug>
		<id>7733</id>
		<title>Memory connector doesn't allow inserting into empty, newly created tables</title>
		<body>``` presto:default&gt; create table memory.default.TCHAR10( RNUM integer ); CREATE TABLE presto:default&gt; insert into memory.default.tchar10 values ( 0 );  Query 20170403_093522_00014_xs4w3, FAILED, 1 node Splits: 35 total, 17 done (48,57%) 0:03 [0 rows, 0B] [0 rows/s, 0B/s]  Query 20170403_093522_00014_xs4w3 failed: Failed to find table on a worker. ``` stacktrace: ``` com.facebook.presto.spi.PrestoException: Failed to find table on a worker. at com.facebook.presto.plugin.memory.MemoryPagesStore.add(MemoryPagesStore.java:63) at com.facebook.presto.plugin.memory.MemoryPageSinkProvider$MemoryPageSink.appendPage(MemoryPageSinkProvider.java:87) at com.facebook.presto.operator.TableWriterOperator.addInput(TableWriterOperator.java:203) at com.facebook.presto.operator.Driver.processInternal(Driver.java:309) at com.facebook.presto.operator.Driver.lambda$processFor$6(Driver.java:234) ```  FYI: @pnowojski </body>
		<created>2017-04-03 09:39:24</created>
		<closed>2017-11-23 23:17:25</closed>
	</bug>
	<bug>
		<id>7716</id>
		<title>Lambda error "No type for symbol"</title>
		<body>``` presto&gt; select map_filter(m, (k, v) -&gt; v = array_max(map_values(m))) from (select map(array['a','b','c','d'],array[1,2,3,3]) m); Query 20170331_175118_77449_3bs58 failed: No type for symbol map java.lang.IllegalArgumentException: No type for symbol map at com.google.common.base.Preconditions.checkArgument(Preconditions.java:191) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:335) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:256) at com.facebook.presto.sql.tree.SymbolReference.accept(SymbolReference.java:41) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:275) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:814) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:256) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:275) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:814) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:256) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:275) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:1124) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:425) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:256) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:71) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:275) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:238) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.access$1800(ExpressionAnalyzer.java:153) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.lambda$visitFunctionCall$1(ExpressionAnalyzer.java:810) at com.facebook.presto.sql.analyzer.TypeSignatureProvider.getTypeSignature(TypeSignatureProvider.java:61) at com.facebook.presto.metadata.SignatureBinder$FunctionSolver.update(SignatureBinder.java:725) at com.facebook.presto.metadata.SignatureBinder.iterativeSolve(SignatureBinder.java:399) at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:114) at com.facebook.presto.metadata.SignatureBinder.bind(SignatureBinder.java:91) at com.facebook.presto.metadata.FunctionRegistry.identifyApplicableFunctions(FunctionRegistry.java:703) at com.facebook.presto.metadata.FunctionRegistry.matchFunction(FunctionRegistry.java:672) at com.facebook.presto.metadata.FunctionRegistry.matchFunctionExact(FunctionRegistry.java:662) at com.facebook.presto.metadata.FunctionRegistry.resolveFunction(FunctionRegistry.java:617) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:821) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:256) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:275) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:232) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1380) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1362) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithInputs(ExpressionAnalyzer.java:1350) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypesFromInput(ExpressionAnalyzer.java:1321) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1052) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:990) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:570) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:612) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:570) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:372) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:311) at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:161) at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:120) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:70) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:309) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:321) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:128) at sun.reflect.GeneratedMethodAccessor444.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) at org.glassfish.jersey.internal.Errors.process(Errors.java:315) at org.glassfish.jersey.internal.Errors.process(Errors.java:297) at org.glassfish.jersey.internal.Errors.process(Errors.java:267) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:395) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:523) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-03-31 17:52:12</created>
		<closed>2017-04-14 20:34:20</closed>
	</bug>
	<bug>
		<id>7711</id>
		<title>AnalyzeAggregations doesn't correctly verify lambas</title>
		<body>``` presto:sf1&gt; select transform(array[0], y -&gt; transform(array[42], y -&gt; x + y)) from (values (1,2)) t(x, y) group by x+y; Query 20170331_142639_00008_tdkiy failed: Invalid node. Expression dependencies ([field]) not in source plan output ([expr_6, $hashvalue]) ```  I will fix it as part (or prerequisite) of https://github.com/prestodb/presto/pull/7315 since it closely related and I want to avoid conflicts.  FYI: @martint @haozhun </body>
		<created>2017-03-31 14:30:42</created>
		<closed>2017-04-05 16:38:05</closed>
	</bug>
	<bug>
		<id>7703</id>
		<title>DenyAllAccessControl uses denyShowSchemas instead of denyShowTables</title>
		<body>`checkCanShowTables` should use `checkCanShowTables`, so it throws the wrong error message. Also check if there are similar typos.</body>
		<created>2017-03-30 18:23:54</created>
		<closed>2017-04-05 18:52:57</closed>
	</bug>
	<bug>
		<id>7683</id>
		<title>lambdas don't work when filter is in JoinNode optional filter</title>
		<body>Query: ``` presto:sf1&gt; SELECT * from (VALUES 1000) t(x) left join (VALUES 1001) t2(y) ON (cardinality(transform(array[1], x -&gt; transform(array[10], y -&gt; x))) &gt; 0); Query 20170328_063720_00000_6r2vd failed: Compiler failed and interpreter is disabled ``` Fixed by: https://github.com/prestodb/presto/pull/7674  Related to: https://github.com/prestodb/presto/issues/7527  </body>
		<created>2017-03-28 06:57:06</created>
		<closed>2017-04-07 00:44:39</closed>
	</bug>
	<bug>
		<id>7646</id>
		<title>max_by does not support row</title>
		<body>``` presto&gt; select max_by(1, row(2, 3)); Query 20170322_170010_13107_t649g failed: Unsupported state type combination: (com.facebook.presto.spi.block.Block, long) java.lang.IllegalArgumentException: Unsupported state type combination: (com.facebook.presto.spi.block.Block, long) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:383) at com.facebook.presto.operator.aggregation.state.TwoNullableValueStateMapping.getStateClass(TwoNullableValueStateMapping.java:72) at com.facebook.presto.operator.aggregation.AbstractMinMaxBy.generateAggregation(AbstractMinMaxBy.java:98) at com.facebook.presto.operator.aggregation.AbstractMinMaxBy.specialize(AbstractMinMaxBy.java:93) at com.facebook.presto.metadata.FunctionRegistry$3.load(FunctionRegistry.java:367) at com.facebook.presto.metadata.FunctionRegistry$3.load(FunctionRegistry.java:361) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3628) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2336) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2295) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2208) at com.google.common.cache.LocalCache.get(LocalCache.java:4053) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:4057) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4986) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4992) at com.facebook.presto.metadata.FunctionRegistry.getAggregateFunctionImplementation(FunctionRegistry.java:862) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812) at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230) at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.allMatch(ReferencePipeline.java:454) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitAggregation(PartialAggregationPushDown.java:121) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitAggregation(PartialAggregationPushDown.java:69) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:252) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:33) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown.optimize(PartialAggregationPushDown.java:66) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:303) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:282) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:238) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-03-22 17:00:36</created>
		<closed>2017-03-24 18:53:01</closed>
	</bug>
	<bug>
		<id>7550</id>
		<title>Filter based on VARCHAR literal padded with spaces returns wrong results</title>
		<body>Based on *tpcds.sf10* data:  ```sql presto:sf10&gt; select count(*) from item where i_category IN ('Sports                                            ');  _col0 -------  10287 (1 row) ```  vs  ```sql presto:sf10&gt; select count(*) from item where i_category = 'Sports                                            ';  _col0 -------      0 (1 row) ```  The only difference is `IN` vs `=`.  Here are plans:  ```sql presto:sf10&gt; explain select count(*) from item where i_category IN ('Sports                                            ');                                                                                                                                                    Query Plan --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  - Output[_col0] =&gt; [count:bigint]          _col0 := count      - Aggregate(FINAL) =&gt; [count:bigint]              count := "count"("count_3")          - LocalExchange[SINGLE] () =&gt; count_3:bigint              - RemoteExchange[GATHER] =&gt; count_3:bigint                  - Aggregate(PARTIAL) =&gt; [count_3:bigint]                          count_3 := "count"(*)                      - ScanFilterProject[table = hive:hive:sf10:item, originalConstraint = (CAST("i_category" AS varchar(50)) IN ('Sports                                            ')), filterPredicate = (CAST("i_category" AS varchar(50)) IN ('Sports                              LAYOUT: hive                              i_category := HiveColumnHandle{clientId=hive, name=i_category, hiveType=char(50), hiveColumnIndex=12, columnType=REGULAR, comment=Optional.empty}  (1 row) ```  ```sql presto:sf10&gt; explain select count(*) from item where i_category = 'Sports                                            ';                                                                                                                                    Query Plan --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  - Output[_col0] =&gt; [count:bigint]          _col0 := count      - Aggregate(FINAL) =&gt; [count:bigint]              count := "count"("count_3")          - LocalExchange[SINGLE] () =&gt; count_3:bigint              - RemoteExchange[GATHER] =&gt; count_3:bigint                  - Aggregate(PARTIAL) =&gt; [count_3:bigint]                          count_3 := "count"(*)                      - ScanFilterProject[table = hive:hive:sf10:item, originalConstraint = (CAST("i_category" AS varchar(50)) = 'Sports                                            '), filterPredicate = ("i_category" = "$literal$char(50)"("from_base64"('U3BvcnRz')))] =&gt; []                              LAYOUT: hive                              i_category := HiveColumnHandle{clientId=hive, name=i_category, hiveType=char(50), hiveColumnIndex=12, columnType=REGULAR, comment=Optional.empty}  (1 row) ```</body>
		<created>2017-03-09 19:31:26</created>
		<closed>2017-07-25 17:46:51</closed>
	</bug>
	<bug>
		<id>7533</id>
		<title>Improve decimal type support in the new Parquet reader</title>
		<body>The new Parquet reader should handle all the types (`int32`, `int64`, etc.) for supporting Parquet decimals properly, please see the [spec](https://github.com/Parquet/parquet-format/blob/master/LogicalTypes.md). I checked the new reader and it currently only handles the `fixed_len_byte_array` case. This is needed to fix #7232.</body>
		<created>2017-03-08 02:15:28</created>
		<closed>2017-03-16 16:19:00</closed>
	</bug>
	<bug>
		<id>7527</id>
		<title>SimplifyExpressions and DesugaringOptimizer doesn't process all expressions in tree</title>
		<body>`SimplifyExpressions` and `DesugaringOptimizer` works only for project, filter and table scan. What about other nodes, e.g:  * arguments of aggregation function call * Probably `ApplyNode` should also be handled (it contains assignments) * join node filter function * values node?  FYI: @martint @haozhun </body>
		<created>2017-03-07 14:08:15</created>
		<closed>2017-04-13 12:29:05</closed>
	</bug>
	<bug>
		<id>7520</id>
		<title>Join on expression without columns produces wrong results</title>
		<body>```sql select count(*) &gt; 0 from customer join part on (cast ('a' as char(1)) = cast ('a' as char(2))); ``` returns `true` despite the fact ```sql select cast('a' as char(1)) = cast('a' as char(2)); ``` returns `false`.  This happens because: 1. Analyzer picks the equality operator is picked in `ExpressionAnalyzer` (to be `$operator$EQUAL(varchar(2),varchar(2)):boolean`), registering necessary coercions (`cast ('a' as char(1))` -&gt; `VARCHAR(2)`, `cast ('a' as char(2))` -&gt; `VARCHAR(2)`) 2. `expressionOptimizer(canonicalized, metadata, session, analyzer.getExpressionTypes()).optimize(NoOpSymbolResolver.INSTANCE)` fires aforementioned equal operator to compare two char fields (stored as `Slice` Java type). 3. Given CHAR does not store pad-spaces, both `Slices` contain the exact same value - one char 'a' only. `expressionOptimizer` notes that, therefore ```sql join on (cast ('a' as char(1)) = cast ('a' as char(2)) ``` becomes rewritten into: ```sql join on true ```  That is because since `expressionOptimize` works on plan, without taking into consideration already existing coercions.  Similar situation would occur for other coercible types which share common Java type e.g. short decimal and real: ```sql select (real '1.2' = cast(1.2 as decimal(2,1))) ``` returns `true` but: ```sql select count(*) &gt; 0 from customer join part on (real '1.2' = cast(1.2 as decimal(2,1))) ``` returns `false`. Mechanism is the same: equal operator is picked to be `$operator$EQUAL(real,real):boolean` but rewrites further on (in `Analyzer`) look only at the plan, not considering coercions, therefore `Real.equal(long, long)` is called with one long staying for `Real` type while another representing `Short Decimal` (also represented as `long` Java type underneath).</body>
		<created>2017-03-06 22:17:43</created>
		<closed>2017-03-09 17:26:05</closed>
	</bug>
	<bug>
		<id>7496</id>
		<title>java.lang.IllegalArgumentException: left and right type do not match in comparison expression</title>
		<body>Hi  I use presto 0.167 + HDP 2.5.3 + hive connector  The following error occurred ``` java.lang.IllegalArgumentException: left and right type do not match in comparison expression (((CASE WHEN ("code" = BIGINT '1') THEN 'a' ELSE 'b' END) = 'aaa')) ```  table ``` desc test; code bigint ```  query ``` SELECT a FROM ( SELECT     case when code = 1 then 'a' else 'b' end as a FROM test UNION ALL SELECT     'aaa' as a ) WHERE  a = 'aaa' ``` This error doesn't occur in presto 0.166.  I guess https://github.com/prestodb/presto/commit/6ec736dd91753ad2566890d24205e5b35811b27b is related  And, there is no error in the following query in presto 0.167 ``` SELECT a FROM ( SELECT     case when code = 1 then varchar 'a' else varchar 'b' end as a FROM test UNION ALL SELECT     'aaa' as a ) WHERE  a = 'aaa' ``` </body>
		<created>2017-03-03 03:14:52</created>
		<closed>2017-03-23 22:50:46</closed>
	</bug>
	<bug>
		<id>7493</id>
		<title>Live Plan for queued queries fail</title>
		<body>Clicking "Live Plan" for a queued query fails with the below JS error.  Maybe we should disable that button for QUEUED and PLANNING queries.  ``` Uncaught TypeError: Cannot read property 'subStages' of null     at flattenStage (eval at transform.run (browser.min.js:4), &lt;anonymous&gt;:31:14)     at flatten (eval at transform.run (browser.min.js:4), &lt;anonymous&gt;:20:5)     at t.updateD3Graph (eval at transform.run (browser.min.js:4), &lt;anonymous&gt;:253:22)     at t.render (eval at transform.run (browser.min.js:4), &lt;anonymous&gt;:284:14)     at c._renderValidatedComponentWithoutOwnerOrContext (react-15.0.1.min.js:13)     at c._renderValidatedComponent (react-15.0.1.min.js:13)     at c._updateRenderedComponent (react-15.0.1.min.js:13)     at c._performComponentUpdate (react-15.0.1.min.js:13)     at c.updateComponent (react-15.0.1.min.js:13)     at c.performUpdateIfNecessary (react-15.0.1.min.js:13) ```</body>
		<created>2017-03-02 23:58:47</created>
		<closed>2017-03-23 07:08:22</closed>
	</bug>
	<bug>
		<id>7443</id>
		<title>Planning failure for mixed distinct and non-distinct aggregation</title>
		<body>``` SELECT       t.c, count(DISTINCT a), count(t.c) FROM  (VALUES (NULL, NULL)) t(a, b) CROSS JOIN UNNEST(cast(b as array&lt;varchar&gt;)) with ORDINALITY AS t(c,d) GROUP BY 1 ```  Fails with:  ``` java.lang.IllegalStateException: Duplicate key field_4 at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133) at java.util.HashMap.merge(HashMap.java:1253) at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.createGroupIdNode(OptimizeMixedDistinctAggregations.java:359) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:216) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:91) at com.facebook.presto.sql.planner.plan.MarkDistinctNode.accept(MarkDistinctNode.java:95) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:134) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:91) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:252) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:33) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations.optimize(OptimizeMixedDistinctAggregations.java:85) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:303) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:282) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:238) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:63) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-02-24 19:05:34</created>
		<closed>2017-02-24 19:12:26</closed>
	</bug>
	<bug>
		<id>7414</id>
		<title>Broken full CI tests in presto-orc</title>
		<body>Running full-ci in Jenkins turns up the following test failures. These can be reproduced in IntelliJ also.  ``` testCharDirectSequence(com.facebook.presto.orc.TestFullOrcReader)  Time elapsed: 2.737 sec  &lt;&lt;&lt; FAILURE! java.lang.ArrayIndexOutOfBoundsException: 11111  testStringDirectSequence(com.facebook.presto.orc.TestFullOrcReader)  Time elapsed: 55.727 sec  &lt;&lt;&lt; FAILURE! java.lang.ArrayIndexOutOfBoundsException   Results :  Failed tests:    TestFullOrcReader&gt;AbstractTestOrcReader.testCharDirectSequence:308 » ArrayIndexOutOfBounds   TestFullOrcReader.testStringDirectSequence » ArrayIndexOutOfBounds ```</body>
		<created>2017-02-21 01:07:44</created>
		<closed>2017-02-22 03:56:39</closed>
	</bug>
	<bug>
		<id>7376</id>
		<title>Lambdas are not suffciently verified during analyzis</title>
		<body>Query: ``` select filter(array [5], x -&gt; x + a &gt; 0) from (VALUES (1,2)) t(a,b); ``` fails with: ``` Query 20170215_110307_00000_geqw6 failed: No type for symbol field ```  This should be addressed after #7354 and #7315 are merged.  FYI: @martint @kokosing </body>
		<created>2017-02-15 10:01:33</created>
		<closed>2017-02-16 07:53:43</closed>
	</bug>
	<bug>
		<id>7304</id>
		<title>Successful metadata queries not logged</title>
		<body>`DataDefinitionExecution` queries that succeed are not logged. I bisect'ed this to c4c40c43b0647f983bf69096df7ee54f146fdad3. It can be reproduced with the following test:  ``` public class TestQueryLogging {     @Test     public void test()             throws Exception     {         try (DistributedQueryRunner queryRunner = RaptorQueryRunner.createRaptorQueryRunner(ImmutableMap.of(), false, false)) {             queryRunner.execute("CREATE TABLE foo (x bigint)");             queryRunner.execute("DROP TABLE foo");              QueryManager queryManager = queryRunner.getCoordinator().getQueryManager();             assertEquals(((SqlQueryManager) queryManager).getStats().getCompletedQueries().getTotalCount(), 2);         }     } } ```</body>
		<created>2017-02-04 01:46:24</created>
		<closed>2017-04-05 18:56:43</closed>
	</bug>
	<bug>
		<id>7301</id>
		<title>INSERT creating new Hive table partition uses wrong field delimiters for text format</title>
		<body>Hi - When running INSERT INTO a hive table as defined below, it seems Presto is writing valid data files. However running subsequent SELECTs on the table will return all NULL values. When running the SELECT in Hive, the same files are read and displayed correctly.  Is this a known/fixed bug or is there an issue with my table definition? I'm running Presto 0.152.3.   ``` CREATE TABLE `test`(   `d` timestamp,   `a` string,   `b` string,   `c` string ) PARTITIONED BY (   `p` string) ROW FORMAT SERDE   'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES (   'field.delim'='\t',   'line.delim'='\n',   'serialization.format'='\t') STORED AS INPUTFORMAT   'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT   'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' LOCATION   's3://bucket' TBLPROPERTIES (   'serialization.null.format'='' )  ```  Thanks</body>
		<created>2017-02-03 21:21:39</created>
		<closed>2018-01-23 14:29:11</closed>
	</bug>
	<bug>
		<id>7278</id>
		<title>Leaked system memory reservation in ExchangeOperator</title>
		<body>`ExchangeOperator` calls `pipelineContext.reserveSystemMemory`, but appears to leak this reservation under some circumstances. It looks like this was introduced by 64c3fc8b027f598d63fd13e4d8e0b91b77d7d012  Generally, `Operator`s should use `OperatorContext.reserveSystemMemory` not `PipelineContext.reserveSystemMemory`  To reproduce run `TestMemoryManager.testClusterPools` with an invocation count of at least 100</body>
		<created>2017-02-02 06:02:44</created>
		<closed>2017-03-08 22:57:12</closed>
	</bug>
	<bug>
		<id>7249</id>
		<title>Uncategorized error: not a scalar function</title>
		<body>``` select * from (values (1)) as t (a) where a in (1) having count(a) over (partition by a) = 1; ```  ``` java.lang.IllegalArgumentException: count(integer):bigint is not a scalar function at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:861) at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:950) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitComparisonExpression(ExpressionInterpreter.java:784) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:71) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:271) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:155) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:117) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:72) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:85) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:297) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:276) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:234) at com.facebook.presto.execution.resourceGroups.InternalResourceGroup.lambda$startInBackground$1(InternalResourceGroup.java:478) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-01-30 21:12:49</created>
		<closed>2017-01-31 01:29:20</closed>
	</bug>
	<bug>
		<id>7248</id>
		<title>Uncategorized error: Unsupported correlated subquery type </title>
		<body>``` java.lang.IllegalArgumentException: Unsupported correlated subquery type com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker$1.visitApply(NoApplyNodeLeftChecker.java:42) com.facebook.presto.sql.planner.plan.ApplyNode.accept(ApplyNode.java:140) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:175) com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:195) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker.validate(NoApplyNodeLeftChecker.java:33) com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:44) java.lang.Iterable.forEach(Iterable.java:75) com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:44) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:127) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:136) com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:94) com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.getQueryPlan(ExplainRewrite.java:126) com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:104) com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:60) com.facebook.presto.sql.tree.Explain.accept(Explain.java:73) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) com.facebook.presto.sql.rewrite.ExplainRewrite.rewrite(ExplainRewrite.java:57) com.facebook.presto.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:51) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:65) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:290) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:276) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:234) com.facebook.presto.execution.resourceGroups.InternalResourceGroup.lambda$startInBackground$1(InternalResourceGroup.java:478) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745)</body>
		<created>2017-01-30 21:10:53</created>
		<closed>2017-01-30 21:34:10</closed>
	</bug>
	<bug>
		<id>7247</id>
		<title>Window function dependencies not in source plan output</title>
		<body>``` with t1 as (   select orderkey, totalprice   from tpch.tiny.orders ), t2 as (   select orderkey, totalprice, sum(totalprice) over () x   from t1 ), t3 as (   select orderkey, max(x) over()   from t2 ) select * from t3 ```  ``` java.lang.IllegalArgumentException: Invalid node. Window function dependencies ([sum]) not in source plan output ([orderkey]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:645) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:80) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitWindow(ValidateDependenciesChecker.java:187) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitWindow(ValidateDependenciesChecker.java:94) at com.facebook.presto.sql.planner.plan.WindowNode.accept(WindowNode.java:154) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:303) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:94) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:86) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:44) at java.lang.Iterable.forEach(Iterable.java:75) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:44) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:127) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:297) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:276) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:234) at com.facebook.presto.execution.resourceGroups.InternalResourceGroup.lambda$startInBackground$1(InternalResourceGroup.java:478) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-01-30 21:08:15</created>
		<closed>2017-02-10 22:13:05</closed>
	</bug>
	<bug>
		<id>7246</id>
		<title>Error in OptimizeMixedDistinctAggregations</title>
		<body>``` java.lang.IllegalStateException: Duplicate key xxx java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133) java.util.HashMap.merge(HashMap.java:1253) java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.createGroupIdNode(OptimizeMixedDistinctAggregations.java:359) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:216) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:91) com.facebook.presto.sql.planner.plan.MarkDistinctNode.accept(MarkDistinctNode.java:95) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:134) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:91) com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:206) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) com.facebook.presto.sql.planner.plan.PlanVisitor.visitSort(PlanVisitor.java:105) com.facebook.presto.sql.planner.plan.SortNode.accept(SortNode.java:88) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:33) com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations.optimize(OptimizeMixedDistinctAggregations.java:85) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:297) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:276) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:234) com.facebook.presto.execution.resourceGroups.InternalResourceGroup.lambda$startInBackground$1(InternalResourceGroup.java:478) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) </body>
		<created>2017-01-30 21:06:42</created>
		<closed>2017-01-30 21:08:31</closed>
	</bug>
	<bug>
		<id>7240</id>
		<title>UI query detail page: long session strings overflow to next column</title>
		<body>A long user provided string such as User, Principal, Source or Resource Group will overflow to the Data Source section.</body>
		<created>2017-01-30 18:38:42</created>
		<closed>2017-02-18 06:40:29</closed>
	</bug>
	<bug>
		<id>7229</id>
		<title>Planning failure for count distinct on row type</title>
		<body>This query:  ```sql SELECT count(DISTINCT a), max(b) FROM (VALUES (row(1, 2), 3)) t(a, b) ```  fails with:  ``` java.lang.AssertionError: Number of parameters and fieldNames for ROW type doesn't match at com.facebook.presto.spi.type.TypeSignature.verify(TypeSignature.java:379) at com.facebook.presto.spi.type.TypeSignature.createNamedTypeParameters(TypeSignature.java:286) at com.facebook.presto.spi.type.TypeSignature.parseRowTypeSignature(TypeSignature.java:202) at com.facebook.presto.spi.type.TypeSignature.parseTypeSignature(TypeSignature.java:106) at com.facebook.presto.spi.type.TypeSignature.parseTypeSignature(TypeSignature.java:93) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:955) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.Cast.accept(Cast.java:98) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.coerceToSingleType(ExpressionAnalyzer.java:1181) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIfExpression(ExpressionAnalyzer.java:466) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitIfExpression(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.IfExpression.accept(IfExpression.java:70) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:231) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1382) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1335) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1301) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1289) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1277) at com.facebook.presto.sql.planner.optimizations.PropertyDerivations$Visitor.visitProject(PropertyDerivations.java:505) at com.facebook.presto.sql.planner.optimizations.PropertyDerivations$Visitor.visitProject(PropertyDerivations.java:124) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.optimizations.PropertyDerivations.deriveProperties(PropertyDerivations.java:110) at com.facebook.presto.sql.planner.optimizations.PropertyDerivations.deriveProperties(PropertyDerivations.java:105) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.deriveProperties(AddExchanges.java:1214) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.withDerivedProperties(AddExchanges.java:1209) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.rebaseAndDeriveProperties(AddExchanges.java:1196) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:242) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:199) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1191) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:287) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:199) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:206) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1191) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:248) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:199) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:149) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:297) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:276) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:234) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:63) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  The query succeeds if the `max(b)` expression is removed from the select list.</body>
		<created>2017-01-26 00:27:37</created>
		<closed>2017-02-10 21:24:39</closed>
	</bug>
	<bug>
		<id>7214</id>
		<title>Query with GROUP BY and DISTINCT on same field fails</title>
		<body>``` EXPLAIN SELECT x, count(1), count(distinct x) FROM (values 1) t(x) group by 1 ```  ``` java.lang.IllegalStateException: Duplicate key field at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133) at java.util.HashMap.merge(HashMap.java:1253) at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.createGroupIdNode(OptimizeMixedDistinctAggregations.java:359) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:216) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitMarkDistinct(OptimizeMixedDistinctAggregations.java:91) at com.facebook.presto.sql.planner.plan.MarkDistinctNode.accept(MarkDistinctNode.java:95) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:134) at com.facebook.presto.sql.planner.optimizations.OptimizeMixedDistinctAggregations$Optimizer.visitAggregation(OptimizeMixedDistinctAggregations.java:91) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:206) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) ```</body>
		<created>2017-01-24 17:35:55</created>
		<closed>2017-03-25 03:24:06</closed>
	</bug>
	<bug>
		<id>7142</id>
		<title>Incorrect results due to improper implicit coercion</title>
		<body>This query:  ```sql SELECT 1 x ```  produces:  ```  x ---  1 (1 row) ```  ```  - Output[x] =&gt; [expr:integer]          x := expr      - Project[] =&gt; [expr:integer]              expr := 1          - LocalExchange[ROUND_ROBIN] () =&gt;              - Values =&gt; []                      () ```  However, the following query produces a different result:  ```sql SELECT 1 x ORDER BY degrees(x) ```  ```   x -----  1.0 (1 row) ```  ```  - Output[x] =&gt; [expr:double]          x := expr      - Project[] =&gt; [expr:double]          - Sort[degrees ASC_NULLS_LAST] =&gt; [degrees:double, expr:double]              - LocalExchange[SINGLE] () =&gt; degrees:double, expr:double                  - Project[] =&gt; [degrees:double, expr:double]                          degrees := 57.29577951308232                          expr := 1.0                      - LocalExchange[ROUND_ROBIN] () =&gt;                          - Values =&gt; []                                  () ```  I believe the issue is that the presence of the `degrees(x)` call in the `ORDER BY` clause causes the type inferencer to decide that `x` needs to be coerced to `double` to satisfy the call, and it incorrectly applies the coercion to the `x` field in the `SELECT` clause.</body>
		<created>2017-01-20 00:58:31</created>
		<closed>2017-04-05 16:34:52</closed>
	</bug>
	<bug>
		<id>7111</id>
		<title>Incorrect results for DISTINCT + LIMIT over inequality JOIN</title>
		<body>This query:  ```sql SELECT DISTINCT x  FROM (VALUES 1) t(x) JOIN (VALUES 10, 20) u(a) ON t.x &lt; u.a  LIMIT 100 ```  Incorrectly produces:  ```  x ---  1  1 ```  The plan seems to be missing a projection (or output pruning) for the join below the DistinctLimit node:  ```  - Output[x] =&gt; [field:integer]          x := field      - DistinctLimit[100] =&gt; [field:integer, field_1:integer]          - LocalExchange[SINGLE] () =&gt; field:integer, field_1:integer              - InnerJoin[("field" &lt; "field_1")] =&gt; [field:integer, field_1:integer]                  - LocalExchange[ROUND_ROBIN] () =&gt; field:integer                      - Values =&gt; [field:integer]                              (1)                  - Values =&gt; [field_1:integer]                          (10)                          (20) ```</body>
		<created>2017-01-17 21:34:35</created>
		<closed>2017-01-19 19:30:02</closed>
	</bug>
	<bug>
		<id>7072</id>
		<title>Planning failure for dependent selective aggregates</title>
		<body>```sql SELECT sum(b) FILTER (WHERE true) FROM (  SELECT count(*) FILTER (WHERE true) AS b ) ```  fails with:  ``` java.lang.IllegalStateException: Generated plan contains unimplemented filtered aggregations at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:47) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:37) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:205) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:175) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:209) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitAggregation(PlanVisitor.java:30) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:43) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:37) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:205) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:175) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:209) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitAggregation(PlanVisitor.java:30) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:43) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations$Visitor.visitAggregation(VerifyNoFilteredAggregations.java:37) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:205) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.sanity.VerifyNoFilteredAggregations.validate(VerifyNoFilteredAggregations.java:34) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:44) at java.lang.Iterable.forEach(Iterable.java:75) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:44) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:127) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-01-13 18:37:36</created>
		<closed>2017-01-13 21:08:06</closed>
	</bug>
	<bug>
		<id>7070</id>
		<title>Exponential behavior in SimplifyExpressions</title>
		<body>This query never completes:  ```sql select * from (values (1,1)) t(x,y) where  (x=21.0 AND y=-89.0) OR (x=22.0 AND y=-99.0) OR (x=28.0 AND y=-111.0) OR (x=28.0 AND y=-107.0) OR (x=16.0 AND y=-92.0) OR (x=23.0 AND y=-99.0) OR (x=33.0 AND y=-116.0) OR (x=26.0 AND y=-104.0) OR (x=20.0 AND y=-90.0) OR (x=16.0 AND y=-95.0) OR (x=21.0 AND y=-88.0) OR (x=20.0 AND y=-87.0) OR (x=28.0 AND y=-110.0) OR (x=28.0 AND y=-101.0) OR (x=23.0 AND y=-102.0) OR (x=27.0 AND y=-109.0) OR (x=27.0 AND y=-106.0) OR (x=21.0 AND y=-99.0) OR (x=24.0 AND y=-107.0) OR (x=18.0 AND y=-92.0) OR (x=24.0 AND y=-104.0) OR (x=18.0 AND y=-98.0) OR (x=31.0 AND y=-110.0) OR (x=22.0 AND y=-100.0) OR (x=16.0 AND y=-97.0) OR (x=26.0 AND y=-99.0) OR (x=32.0 AND y=-107.0) OR (x=22.0 AND y=-103.0) OR (x=17.0 AND y=-99.0) OR (x=28.0 AND y=-100.0) ```  The issue is in this code in SimplifyExpressions:  ```java int newBaseExpressions = subPredicates.stream()     .mapToInt(Set::size)     .reduce(Math::multiplyExact)     .getAsInt() * subPredicates.size(); ```  The result of multiplyExact is 2^30 (there are 30 terms of size 2). The final multiply by `subPredicates.size()` causes an overflow and makes `newBaseExpressions` negative. This makes the following check fail and the code proceeds to compute the cartesian product of the 30 terms:  ```java if (newBaseExpressions &gt; originalBaseExpressions * 2) { ```</body>
		<created>2017-01-13 16:32:36</created>
		<closed>2017-01-13 18:08:40</closed>
	</bug>
	<bug>
		<id>7069</id>
		<title>Overflow in distributeIfPossible</title>
		<body>```sql select * from (values (1,1)) t(x,y) where  (x=21.0 AND y=-89.0) OR (x=22.0 AND y=-99.0) OR (x=28.0 AND y=-111.0) OR (x=28.0 AND y=-107.0) OR (x=16.0 AND y=-92.0) OR (x=23.0 AND y=-99.0) OR (x=33.0 AND y=-116.0) OR (x=26.0 AND y=-104.0) OR (x=20.0 AND y=-90.0) OR (x=16.0 AND y=-95.0) OR (x=21.0 AND y=-88.0) OR (x=20.0 AND y=-87.0) OR (x=28.0 AND y=-110.0) OR (x=28.0 AND y=-101.0) OR (x=23.0 AND y=-102.0) OR (x=27.0 AND y=-109.0) OR (x=27.0 AND y=-106.0) OR (x=21.0 AND y=-99.0) OR (x=24.0 AND y=-107.0) OR (x=18.0 AND y=-92.0) OR (x=24.0 AND y=-104.0) OR (x=18.0 AND y=-98.0) OR (x=31.0 AND y=-110.0) OR (x=22.0 AND y=-100.0) OR (x=16.0 AND y=-97.0) OR (x=26.0 AND y=-99.0) OR (x=32.0 AND y=-107.0) OR (x=22.0 AND y=-103.0) OR (x=17.0 AND y=-99.0) OR (x=28.0 AND y=-100.0) OR (x=16.0 AND y=-96.0) ```  fails with:  ``` java.lang.ArithmeticException: integer overflow at java.lang.Math.multiplyExact(Math.java:867) at java.util.stream.ReduceOps$6ReducingSink.accept(ReduceOps.java:306) at java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:210) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.IntPipeline.reduce(IntPipeline.java:461) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$ExtractCommonPredicatesExpressionRewriter.distributeIfPossible(SimplifyExpressions.java:295) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$ExtractCommonPredicatesExpressionRewriter.rewriteLogicalBinaryExpression(SimplifyExpressions.java:230) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$ExtractCommonPredicatesExpressionRewriter.rewriteLogicalBinaryExpression(SimplifyExpressions.java:200) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:241) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:88) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewriteWith(ExpressionTreeRewriter.java:34) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:152) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:117) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:72) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:92) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:82) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:85) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  It should skip the transformation and continue, instead.</body>
		<created>2017-01-13 16:28:21</created>
		<closed>2017-01-13 18:08:40</closed>
	</bug>
	<bug>
		<id>7068</id>
		<title>NPE when committing transaction in Hive connector</title>
		<body>``` java.lang.NullPointerException     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.doRecursiveDeleteFiles(SemiTransactionalHiveMetastore.java:1450)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.doRecursiveDeleteFiles(SemiTransactionalHiveMetastore.java:1472)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.recursiveDeleteFiles(SemiTransactionalHiveMetastore.java:1433)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.recursiveDeleteFilesAndLog(SemiTransactionalHiveMetastore.java:1381)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.rollbackShared(SemiTransactionalHiveMetastore.java:1190)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.commitShared(SemiTransactionalHiveMetastore.java:787)     com.facebook.presto.hive.metastore.SemiTransactionalHiveMetastore.commit(SemiTransactionalHiveMetastore.java:671)     com.facebook.presto.hive.HiveMetadata.commit(HiveMetadata.java:1345)     com.facebook.presto.hive.PrismMetadata.commit(PrismMetadata.java:591)     com.facebook.presto.hive.PrismConnector.commit(PrismConnector.java:168)     com.facebook.presto.transaction.TransactionManager$TransactionMetadata$ConnectorTransactionMetadata.commit(TransactionManager.java:578)     java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1626)     io.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:77)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-01-13 16:07:04</created>
		<closed>2019-01-19 06:05:05</closed>
	</bug>
	<bug>
		<id>7064</id>
		<title>Planning failure for correlated subquery</title>
		<body>This query:  ```sql select (     select avg(custkey)     from tpch.tiny.orders c2     where c2.orderkey = c1.orderkey ), (     select avg(custkey)     from tpch.tiny.orders c3     where c3.orderkey = c1.orderkey ) from tpch.tiny.orders c1 ```  fails during planning with:  ``` java.lang.IllegalArgumentException: Invalid node. Expression dependencies ([custkey_1]) not in source plan output ([orderkey, unique, $hashvalue_45, avg]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:620) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:77) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:257) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAssignUniqueId(ValidateDependenciesChecker.java:565) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAssignUniqueId(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.AssignUniqueId.accept(AssignUniqueId.java:73) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitJoin(ValidateDependenciesChecker.java:333) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitJoin(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:171) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:250) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:117) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:205) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:469) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:209) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:117) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitAggregation(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:205) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:250) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:469) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:209) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:300) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:88) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:83) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:44) at java.lang.Iterable.forEach(Iterable.java:75) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:44) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:127) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-01-13 01:20:42</created>
		<closed>2017-01-13 17:52:21</closed>
	</bug>
	<bug>
		<id>7058</id>
		<title>FILTER should not be allowed for non-aggregates</title>
		<body>This query:  ```sql SELECT    array_sort(array_agg(a)) FILTER (WHERE a = 0) FROM    (VALUES 1) t(a) ```  should fail, since `array_sort` is not an aggregation function. The query completes successfully, but produces incorrect results.</body>
		<created>2017-01-12 16:11:39</created>
		<closed>2017-01-13 18:45:28</closed>
	</bug>
	<bug>
		<id>7036</id>
		<title>Try/Lambda fails codegen when two identical instances appears in a single expression</title>
		<body>These following queries fails:  ``` SELECT   try(1/x)+try(1/x) FROM   (VALUES 2) t(x) ```  Stack trace:  ``` com.facebook.presto.spi.PrestoException: Compiler failed and interpreter is disabled at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1056) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:950) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:538) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:577) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:538) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:353) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:292) at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:161) at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:120) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:70) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:315) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:125) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) at org.glassfish.jersey.internal.Errors.process(Errors.java:315) at org.glassfish.jersey.internal.Errors.process(Errors.java:297) at org.glassfish.jersey.internal.Errors.process(Errors.java:267) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:395) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:523) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) Caused by: com.google.common.util.concurrent.UncheckedExecutionException: java.lang.IllegalArgumentException: Multiple entries with same key: $operator$DIVIDE(1, #0)=public java.lang.Long project_0_try_1(com.facebook.presto.spi.ConnectorSession session, com.facebook.presto.spi.block.Block block_0, int position) and $operator$DIVIDE(1, #0)=public java.lang.Long project_0_try_0(com.facebook.presto.spi.ConnectorSession session, com.facebook.presto.spi.block.Block block_0, int position) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2203) at com.google.common.cache.LocalCache.get(LocalCache.java:3937) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830) at com.facebook.presto.sql.gen.ExpressionCompiler.compilePageProcessor(ExpressionCompiler.java:99) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1043) ... 69 more Caused by: java.lang.IllegalArgumentException: Multiple entries with same key: $operator$DIVIDE(1, #0)=public java.lang.Long project_0_try_1(com.facebook.presto.spi.ConnectorSession session, com.facebook.presto.spi.block.Block block_0, int position) and $operator$DIVIDE(1, #0)=public java.lang.Long project_0_try_0(com.facebook.presto.spi.ConnectorSession session, com.facebook.presto.spi.block.Block block_0, int position) at com.google.common.collect.ImmutableMap.checkNoConflict(ImmutableMap.java:150) at com.google.common.collect.RegularImmutableMap.checkNoConflictInBucket(RegularImmutableMap.java:104) at com.google.common.collect.RegularImmutableMap.&lt;init&gt;(RegularImmutableMap.java:70) at com.google.common.collect.ImmutableMap$Builder.build(ImmutableMap.java:254) at com.facebook.presto.sql.gen.PageProcessorCompiler.generateMethodsForLambdaAndTry(PageProcessorCompiler.java:798) at com.facebook.presto.sql.gen.PageProcessorCompiler.generateProjectMethod(PageProcessorCompiler.java:845) at com.facebook.presto.sql.gen.PageProcessorCompiler.generateMethods(PageProcessorCompiler.java:110) at com.facebook.presto.sql.gen.ExpressionCompiler.compileProcessor(ExpressionCompiler.java:134) at com.facebook.presto.sql.gen.ExpressionCompiler.compile(ExpressionCompiler.java:114) at com.facebook.presto.sql.gen.ExpressionCompiler.access$300(ExpressionCompiler.java:46) at com.facebook.presto.sql.gen.ExpressionCompiler$1.load(ExpressionCompiler.java:57) at com.facebook.presto.sql.gen.ExpressionCompiler$1.load(ExpressionCompiler.java:52) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197) ... 75 more ```</body>
		<created>2017-01-10 18:55:00</created>
		<closed>2017-01-13 18:17:24</closed>
	</bug>
	<bug>
		<id>7030</id>
		<title>Bad error message for correlated subquery</title>
		<body>This query:  ```sql WITH t(a) AS (VALUES 1) SELECT  (SELECT 1 FROM t WHERE a = CAST(u.a as BIGINT)) FROM t u GROUP BY CAST(a AS BIGINT) ```  Fails with  ``` java.lang.IllegalArgumentException: Input does not contain symbols from correlation at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122) at com.facebook.presto.sql.planner.plan.ApplyNode.&lt;init&gt;(ApplyNode.java:52) at com.facebook.presto.sql.planner.SubqueryPlanner.appendSubqueryApplyNode(SubqueryPlanner.java:495) at com.facebook.presto.sql.planner.SubqueryPlanner.appendScalarSubqueryApplyNode(SubqueryPlanner.java:222) at com.facebook.presto.sql.planner.SubqueryPlanner.appendScalarSubqueryApplyNodes(SubqueryPlanner.java:210) at com.facebook.presto.sql.planner.SubqueryPlanner.handleSubqueries(SubqueryPlanner.java:134) at com.facebook.presto.sql.planner.SubqueryPlanner.handleSubqueries(SubqueryPlanner.java:128) at com.facebook.presto.sql.planner.QueryPlanner.handleSubqueries(QueryPlanner.java:679) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:141) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:409) at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:92) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:215) at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:110) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:402) at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:92) at com.facebook.presto.sql.tree.Query.accept(Query.java:92) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:347) at com.facebook.presto.sql.planner.LogicalPlanner.planStatement(LogicalPlanner.java:152) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:114) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:109) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2017-01-09 23:36:55</created>
		<closed>2017-04-27 02:48:46</closed>
	</bug>
	<bug>
		<id>7014</id>
		<title>Raptor system.tables throws NPE on non-existant table</title>
		<body>presto:baldr&gt; SELECT * FROM raptor.system.tables WHERE table_name = 'does_not_exist';  Query 20170106_200150_59222_asbmw failed: null java.lang.NullPointerException at com.facebook.presto.split.MappedPageSource.getNextPage(MappedPageSource.java:67) at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:248) at com.facebook.presto.operator.Driver.processInternal(Driver.java:378) at com.facebook.presto.operator.Driver.processFor(Driver.java:301) at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622) at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:534) at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:670) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745)</body>
		<created>2017-01-06 20:03:24</created>
		<closed>2017-01-19 03:29:03</closed>
	</bug>
	<bug>
		<id>6984</id>
		<title>in-list with decimal types fails with object.getClass (class java.lang.Long) and type.getJavaType (double) do not agree</title>
		<body>When the in-list has decimal values with different precision the exception is thrown   i.e. ok SELECT  c1, case when c1 in ( decimal '2.0', decimal '3.0'   ) then 'a' else 'b' end FROM ( values ( cast (1 as double) ) ) T (c1)  i.e. fails SELECT  c1, case when c1 in ( decimal '2.0', decimal '30.0'   ) then 'a' else 'b' end FROM ( values ( cast (1 as double) ) ) T (c1) </body>
		<created>2016-12-29 23:24:27</created>
		<closed>2017-04-07 17:19:23</closed>
	</bug>
	<bug>
		<id>6982</id>
		<title>Bad error message when lambda expression references column in enclosing query</title>
		<body>```sql SELECT filter(a, v -&gt; v &gt;= c)  FROM (VALUES (1, array[1])) t(c, a)) ```  Fails with:  ``` Query 20161229_202516_00011_suq2a failed: No type for symbol field java.lang.IllegalArgumentException: No type for symbol field at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:334) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSymbolReference(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.SymbolReference.accept(SymbolReference.java:41) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:1126) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:424) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:71) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:237) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.access$1800(ExpressionAnalyzer.java:152) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.lambda$visitFunctionCall$1(ExpressionAnalyzer.java:810) at com.facebook.presto.sql.analyzer.TypeSignatureProvider.getTypeSignature(TypeSignatureProvider.java:61) at com.facebook.presto.metadata.SignatureBinder$FunctionSolver.update(SignatureBinder.java:725) at com.facebook.presto.metadata.SignatureBinder.iterativeSolve(SignatureBinder.java:399) at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:114) at com.facebook.presto.metadata.SignatureBinder.bind(SignatureBinder.java:91) at com.facebook.presto.metadata.FunctionRegistry.identifyApplicableFunctions(FunctionRegistry.java:692) at com.facebook.presto.metadata.FunctionRegistry.matchFunction(FunctionRegistry.java:661) at com.facebook.presto.metadata.FunctionRegistry.matchFunctionExact(FunctionRegistry.java:651) at com.facebook.presto.metadata.FunctionRegistry.resolveFunction(FunctionRegistry.java:606) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:821) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:231) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1383) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1365) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithInputs(ExpressionAnalyzer.java:1353) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypesFromInput(ExpressionAnalyzer.java:1324) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1012) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:950) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:538) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:91) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:577) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:538) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:353) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:292) at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:161) at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:120) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:70) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:315) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:125) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) at org.glassfish.jersey.internal.Errors.process(Errors.java:315) at org.glassfish.jersey.internal.Errors.process(Errors.java:297) at org.glassfish.jersey.internal.Errors.process(Errors.java:267) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:395) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:523) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-12-29 20:26:38</created>
		<closed>2017-11-22 18:22:31</closed>
	</bug>
	<bug>
		<id>6981</id>
		<title>Bad error message when lamba expression doesn't match expected signature</title>
		<body>```sql SELECT filter(a, (k, v) -&gt; true)  FROM (VALUES array[1]) t(a) ```  fails with:  ``` Query 20161229_202204_00006_suq2a failed: null java.lang.IllegalArgumentException at com.google.common.base.Preconditions.checkArgument(Preconditions.java:108) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.lambda$visitFunctionCall$1(ExpressionAnalyzer.java:795) at com.facebook.presto.sql.analyzer.TypeSignatureProvider.getTypeSignature(TypeSignatureProvider.java:61) at com.facebook.presto.metadata.SignatureBinder$FunctionSolver.update(SignatureBinder.java:725) at com.facebook.presto.metadata.SignatureBinder.iterativeSolve(SignatureBinder.java:399) at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:114) at com.facebook.presto.metadata.SignatureBinder.bind(SignatureBinder.java:91) at com.facebook.presto.metadata.FunctionRegistry.identifyApplicableFunctions(FunctionRegistry.java:692) at com.facebook.presto.metadata.FunctionRegistry.matchFunction(FunctionRegistry.java:661) at com.facebook.presto.metadata.FunctionRegistry.matchFunctionExact(FunctionRegistry.java:651) at com.facebook.presto.metadata.FunctionRegistry.resolveFunction(FunctionRegistry.java:606) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:821) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:255) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:111) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:274) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:231) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:1408) at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeExpression(StatementAnalyzer.java:1791) at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeSelect(StatementAnalyzer.java:1612) at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:785) at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:187) at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:127) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:549) at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:187) at com.facebook.presto.sql.tree.Query.accept(Query.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:68) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:285) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-12-29 20:22:48</created>
		<closed>2017-11-22 18:21:47</closed>
	</bug>
	<bug>
		<id>6970</id>
		<title>GetTableLayout in HiveMetadata takes forever to create predicates</title>
		<body>Depending on the order of results from the metastore, we may end up doing a n^2 computation to create predicates. This appears to be introduced by 7ea59dd37eef00e1a2d47cecad9f1eef1b4a772a  If the metastore is unable to prune partitions for us, we can spend several minutes in the planning state.  Here's a representative jstack (code as of 0.161):  ```         at com.facebook.presto.spi.predicate.Marker.compareTo(Marker.java:231)         at com.facebook.presto.spi.predicate.Range.overlaps(Range.java:153)         at com.facebook.presto.spi.predicate.SortedRangeSet$Builder.build(SortedRangeSet.java:409)         at com.facebook.presto.spi.predicate.SortedRangeSet.union(SortedRangeSet.java:269)         at com.facebook.presto.spi.predicate.SortedRangeSet.union(SortedRangeSet.java:43)         at com.facebook.presto.spi.predicate.Domain.union(Domain.java:179)         at com.facebook.presto.hive.HiveMetadata$$Lambda$732/1213488507.apply(Unknown Source)         at java.util.HashMap.merge(HashMap.java:1245)         at com.facebook.presto.hive.HiveMetadata.createPredicate(HiveMetadata.java:1125)         at com.facebook.presto.hive.HiveMetadata.getTableLayout(HiveMetadata.java:1072)         at com.facebook.presto.hive.PrismMetadata.getTableLayout(PrismMetadata.java:340)         at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.getTableLayout(ClassLoaderSafeConnectorMetadata.java:77)         at com.facebook.presto.metadata.MetadataManager.getLayout(MetadataManager.java:312)         at com.facebook.presto.sql.planner.optimizations.PropertyDerivations$Visitor.visitTableScan(PropertyDerivations.java:580)         at com.facebook.presto.sql.planner.optimizations.PropertyDerivations$Visitor.visitTableScan(PropertyDerivations.java:124)         at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135) ```</body>
		<created>2016-12-27 21:04:18</created>
		<closed>2016-12-30 00:54:45</closed>
	</bug>
	<bug>
		<id>6954</id>
		<title>Query optimizer generates incorrect plans for some logical expressions</title>
		<body>Reproduce with: ``` select (a=8 or b=2) and (a=8 or c=3) or (b=9) from (values (1, 2, 3)) as t (a, b, c); ```  `(a=8 or b=2) and (a=8 or c=3)` should become `a=8 or (b=2 and c=3)`. The query optimizer turns it into `a=8 and (b=2 and c=3)` </body>
		<created>2016-12-22 23:40:40</created>
		<closed>2017-01-04 19:30:45</closed>
	</bug>
	<bug>
		<id>6935</id>
		<title>Incorrect results for UNION ALL query with duplicate column names</title>
		<body>This query:  ```sql SELECT 'x', 'y'  UNION ALL  SELECT orderstatus, orderstatus  FROM orders ```  produces incorrect results:  ```  _col0 | _col1 -------+-------  x     | x  F     | F  F     | F  F     | F  F     | F  F     | F ... ```  Plan:  ```  - Output[_col0, _col1] =&gt; [orderstatus:varchar(1), orderstatus:varchar(1)]          _col0 := orderstatus          _col1 := orderstatus      - LocalExchange[ROUND_ROBIN] () =&gt; orderstatus:varchar(1)          - Project =&gt; [expr:varchar(1)]                  expr := 'x'              - LocalExchange[ROUND_ROBIN] () =&gt;                  - Values =&gt; []                          ()          - RemoteExchange[GATHER] =&gt; orderstatus:varchar(1)              - TableScan[tpch:tpch:orders:sf0.01, originalConstraint = true]                      orderstatus := tpch:orderstatus ```  This is probably another bug in UnaliasSymbolReferences.</body>
		<created>2016-12-21 04:13:02</created>
		<closed>2016-12-21 21:25:23</closed>
	</bug>
	<bug>
		<id>6932</id>
		<title>incorrect number of rows returned by quantified predicate </title>
		<body>presto release 0.160  query using a quantified predicate is not returning the expected number of rows  in the following example, tjoin2 has four rows and derived table returns 0 rows  query expected to return 4 rows but returns 0 rows  select 1  from postgres_cert.public.tjoin2 where 5 &gt; all  ( select 1 from postgres_cert.public.tjoin1 where 1 = 0 )  </body>
		<created>2016-12-20 22:39:58</created>
		<closed>2016-12-27 21:06:58</closed>
	</bug>
	<bug>
		<id>6924</id>
		<title>Invalid initial plan for EXISTS subquery</title>
		<body>This query:  ```sql SELECT orderkey FROM orders WHERE EXISTS (SELECT orderkey FROM lineitem) ```  produces an initial plan with the following shape. Note that the expression in the Apply node contains a full subquery, which is invalid.   ``` - Output[orderkey] =&gt; [expr_9:bigint]         orderkey := expr_9     - Project =&gt; [expr_9:bigint]             expr_9 := "expr_8"         - Project =&gt; [expr_8:bigint]                 expr_8 := "orderkey_7"             - Project =&gt; [orderkey_7:bigint]                     orderkey_7 := "orderkey_6"                 - Project =&gt; [orderkey_6:bigint]                         orderkey_6 := "orderkey"                     - Filter["exists"] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint, exists:boolean]                         - Apply[[]] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint, exists:boolean]                                         exists := (EXISTS (SELECT "orderkey" FROM   lineitem ))                             - Project =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint]                                 - TableScan[local:tpch:orders:sf0.01, originalConstraint = null] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint]                                         orderkey := tpch:orderkey                                         custkey := tpch:custkey                                         orderstatus := tpch:orderstatus                                         totalprice := tpch:totalprice                                         orderdate := tpch:orderdate                                         orderpriority := tpch:orderpriority                                         clerk := tpch:clerk                                         shippriority := tpch:shippriority                                         comment := tpch:comment                                         row_number := tpch:row_number                             - Project =&gt; [expr_5:bigint]                                     expr_5 := "expr"                                 - Project =&gt; [expr:bigint]                                         expr := "orderkey_4"                                     - Project =&gt; [orderkey_4:bigint]                                             orderkey_4 := "orderkey_3"                                         - Project =&gt; [orderkey_3:bigint]                                                 orderkey_3 := "orderkey_0"                                             - TableScan[local:tpch:lineitem:sf0.01, originalConstraint = null] =&gt; [orderkey_0:bigint, partkey:bigint, suppkey:bigint, linenumber:integer, quantity:double, extendedprice:double, discount:double, tax:double, returnflag:varchar(1), linestatus:varchar(1), shipdate:date, commitdate:date, receiptdate:date, shipinstruct:varchar(25), shipmode:varchar(10), comment_1:varchar(44), row_number_2:bigint]                                                     orderkey_0 := tpch:orderkey                                                     partkey := tpch:partkey                                                     suppkey := tpch:suppkey                                                     linenumber := tpch:linenumber                                                     quantity := tpch:quantity                                                     extendedprice := tpch:extendedprice                                                     discount := tpch:discount                                                     tax := tpch:tax                                                     returnflag := tpch:returnflag                                                     linestatus := tpch:linestatus                                                     shipdate := tpch:shipdate                                                     commitdate := tpch:commitdate                                                     receiptdate := tpch:receiptdate                                                     shipinstruct := tpch:shipinstruct                                                     shipmode := tpch:shipmode                                                     comment_1 := tpch:comment                                                     row_number_2 := tpch:row_number ```  For comparison, an IN predicate correctly produces:  ``` - Apply[[]] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint, orderkey_0:bigint, expr_8:boolean]         expr_8 := ("orderkey_0" IN "expr_7")     - Project =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), row_number:bigint, orderkey_0:bigint]         ...     - Project =&gt; [expr_6:bigint, expr_7:bigint]         ... ```  This can be reproduced in 0.161.</body>
		<created>2016-12-19 20:03:08</created>
		<closed>2017-01-02 08:39:49</closed>
	</bug>
	<bug>
		<id>6909</id>
		<title>Integer overflow during implicit cast in subquery</title>
		<body>``` select * from (values 1.0,2.0,3.0) as t(id) where t.id in (select u.id from (values 1,2) as u(id));  Query failed: integer overflow ```</body>
		<created>2016-12-16 03:15:28</created>
		<closed>2016-12-16 17:51:01</closed>
	</bug>
	<bug>
		<id>6875</id>
		<title>Bad error when aggregation function is used in lambda expression</title>
		<body>```sql SELECT transform(ARRAY[1], x -&gt; max(x)) ```  fails with:  ``` java.lang.IllegalArgumentException: function must be of type com.facebook.presto.metadata.SqlScalarFunction, not com.facebook.presto.operator.aggregation.MaxAggregationFunction at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.util.Types.checkType(Types.java:28) at com.facebook.presto.metadata.FunctionRegistry$2.load(FunctionRegistry.java:348) at com.facebook.presto.metadata.FunctionRegistry$2.load(FunctionRegistry.java:342) at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527) at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319) at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282) at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197) at com.google.common.cache.LocalCache.get(LocalCache.java:3937) at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941) at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824) at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830) at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:862) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:146) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:72) at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitLambda(ExpressionOptimizer.java:191) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitLambda(ExpressionOptimizer.java:72) at com.facebook.presto.sql.relational.LambdaDefinitionExpression.accept(LambdaDefinitionExpression.java:93) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.lambda$visitCall$3(ExpressionOptimizer.java:151) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:152) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:72) at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88) at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer.optimize(ExpressionOptimizer.java:69) at com.facebook.presto.sql.relational.SqlToRowExpressionTranslator.translate(SqlToRowExpressionTranslator.java:146) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.toRowExpression(LocalExecutionPlanner.java:1119) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.lambda$visitScanFilterAndProject$5(LocalExecutionPlanner.java:1023) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1024) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:951) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:536) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:575) at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:536) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:351) at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:290) at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:161) at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:120) at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:70) at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:315) at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:324) at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:125) at sun.reflect.GeneratedMethodAccessor154.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) at org.glassfish.jersey.internal.Errors.process(Errors.java:315) at org.glassfish.jersey.internal.Errors.process(Errors.java:297) at org.glassfish.jersey.internal.Errors.process(Errors.java:267) at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:395) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119) at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) at org.eclipse.jetty.server.Server.handle(Server.java:523) at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-12-14 00:17:15</created>
		<closed>2016-12-21 00:34:13</closed>
	</bug>
	<bug>
		<id>6873</id>
		<title>Planning issue when using lambda expression</title>
		<body>```sql SELECT filter(m, v -&gt; v = 1) FROM (SELECT array[] m) ```  Fails with:  ``` java.lang.IllegalStateException: Cannot resolve symbol expr at com.google.common.base.Preconditions.checkState(Preconditions.java:197) at com.facebook.presto.sql.planner.ExpressionSymbolInliner.rewriteSymbolReference(ExpressionSymbolInliner.java:39) at com.facebook.presto.sql.planner.ExpressionSymbolInliner.rewriteSymbolReference(ExpressionSymbolInliner.java:25) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitSymbolReference(ExpressionTreeRewriter.java:794) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitSymbolReference(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.SymbolReference.accept(SymbolReference.java:38) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitCast(ExpressionTreeRewriter.java:768) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitCast(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.Cast.accept(Cast.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitComparisonExpression(ExpressionTreeRewriter.java:206) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitComparisonExpression(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:68) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLambdaExpression(ExpressionTreeRewriter.java:567) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLambdaExpression(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.LambdaExpression.accept(LambdaExpression.java:58) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:547) at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitFunctionCall(ExpressionTreeRewriter.java:58) at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:109) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:46) at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewriteWith(ExpressionTreeRewriter.java:29) at com.facebook.presto.sql.planner.optimizations.MergeProjections$Rewriter.visitProject(MergeProjections.java:68) at com.facebook.presto.sql.planner.optimizations.MergeProjections$Rewriter.visitProject(MergeProjections.java:55) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28) at com.facebook.presto.sql.planner.optimizations.MergeProjections.optimize(MergeProjections.java:52) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111) at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:131) at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:88) at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.getQueryPlan(ExplainRewrite.java:119) at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:103) at com.facebook.presto.sql.rewrite.ExplainRewrite$Visitor.visitExplain(ExplainRewrite.java:59) at com.facebook.presto.sql.tree.Explain.accept(Explain.java:73) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.rewrite.ExplainRewrite.rewrite(ExplainRewrite.java:56) at com.facebook.presto.sql.rewrite.StatementRewrite.rewrite(StatementRewrite.java:51) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:64) at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:59) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:285) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-12-14 00:06:59</created>
		<closed>2016-12-14 00:22:41</closed>
	</bug>
	<bug>
		<id>6811</id>
		<title>ExpressionVerifier fails to match cast expressions</title>
		<body>```java new ExpressionVerifier(new SymbolAliases())     .process(         expression("CAST('2' AS varchar)"),          expression("CAST('2' AS varchar)")); ```  returns `false`</body>
		<created>2016-12-08 16:51:42</created>
		<closed>2017-11-22 18:24:54</closed>
	</bug>
	<bug>
		<id>6801</id>
		<title>Error executing prepared statement when complex join criteria contains parameter</title>
		<body>A query like this:  ```sql SELECT * FROM (VALUES 1) t(a) JOIN (VALUES 2) u(a) ON t.a + u.a &lt; ?; ```  Fails to execute with "EXECUTE ... USING ..." with:  ``` com.facebook.presto.sql.analyzer.SemanticException: line 1:67: query takes no parameters at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitParameter(ExpressionAnalyzer.java:896) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitParameter(ExpressionAnalyzer.java:254) at com.facebook.presto.sql.tree.Parameter.accept(Parameter.java:48) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:273) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:1130) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:423) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:254) at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:68) at com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:26) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:273) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:230) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1391) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:1344) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1310) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1298) at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:1286) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.desugar(DesugaringOptimizer.java:118) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitFilter(DesugaringOptimizer.java:92) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitFilter(DesugaringOptimizer.java:64) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:83) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:64) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:83) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:64) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:83) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:64) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:83) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer$Rewriter.visitProject(DesugaringOptimizer.java:64) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28) at com.facebook.presto.sql.planner.optimizations.DesugaringOptimizer.optimize(DesugaringOptimizer.java:61) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120) at com.facebook.presto.testing.LocalQueryRunner.createPlan(LocalQueryRunner.java:676) at com.facebook.presto.testing.LocalQueryRunner.createPlan(LocalQueryRunner.java:642) at com.facebook.presto.testing.LocalQueryRunner.createPlan(LocalQueryRunner.java:629) at com.facebook.presto.testing.LocalQueryRunner.createDrivers(LocalQueryRunner.java:539) at com.facebook.presto.testing.LocalQueryRunner.executeInternal(LocalQueryRunner.java:500) at com.facebook.presto.testing.LocalQueryRunner.lambda$execute$2(LocalQueryRunner.java:473) at com.facebook.presto.transaction.TransactionBuilder.execute(TransactionBuilder.java:149) at com.facebook.presto.testing.LocalQueryRunner.inTransaction(LocalQueryRunner.java:485) at com.facebook.presto.testing.LocalQueryRunner.execute(LocalQueryRunner.java:473) at com.facebook.presto.tests.AbstractTestQueryFramework.computeActual(AbstractTestQueryFramework.java:88) at com.facebook.presto.tests.TestLocalQueries.testExecuteUsingx(TestLocalQueries.java:46) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85) at org.testng.internal.Invoker.invokeMethod(Invoker.java:696) at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882) at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189) at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124) at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108) at org.testng.TestRunner.privateRun(TestRunner.java:767) at org.testng.TestRunner.run(TestRunner.java:617) at org.testng.SuiteRunner.runTest(SuiteRunner.java:348) at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343) at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305) at org.testng.SuiteRunner.run(SuiteRunner.java:254) at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52) at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86) at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224) at org.testng.TestNG.runSuitesLocally(TestNG.java:1149) at org.testng.TestNG.run(TestNG.java:1057) at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72) at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:127) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) ```</body>
		<created>2016-12-08 02:34:29</created>
		<closed>2016-12-09 17:36:00</closed>
	</bug>
	<bug>
		<id>6778</id>
		<title>UnionNode symbol mapping failure</title>
		<body>``` WITH temp AS (   SELECT orderkey,          partkey,          suppkey,          extendedprice     FROM tpch.tiny.lineitem )  SELECT NULL AS test,      NULL AS orderkey,      NULL AS partkey,      SUM(extendedprice) AS extendedprice FROM temp  UNION ALL  SELECT NULL AS test,      ARBITRARY(orderkey) AS arbitrary_orderkey,      NULL AS partkey,      SUM(extendedprice) AS extendedprice FROM temp GROUP BY suppkey ```  results in  ``` Query failed: Every source needs to map its symbols to an output UnionNode operation symbol java.lang.IllegalArgumentException: Every source needs to map its symbols to an output UnionNode operation symbol         at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)         at com.facebook.presto.sql.planner.plan.SetOperationNode.&lt;init&gt;(SetOperationNode.java:67)         at com.facebook.presto.sql.planner.plan.UnionNode.&lt;init&gt;(UnionNode.java:36)         at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitUnion(UnaliasSymbolReferences.java:584)         at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitUnion(UnaliasSymbolReferences.java:117)         at com.facebook.presto.sql.planner.plan.UnionNode.accept(UnionNode.java:42)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96)         at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitOutput(UnaliasSymbolReferences.java:473)         at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences$Rewriter.visitOutput(UnaliasSymbolReferences.java:117)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28)         at com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences.optimize(UnaliasSymbolReferences.java:114)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:120)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:111)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-12-06 17:34:54</created>
		<closed>2016-12-29 20:30:00</closed>
	</bug>
	<bug>
		<id>6757</id>
		<title>Incorrect results for nested EXCEPT</title>
		<body>`a EXCEPT (b EXCEPT c)` is being evaluated as `(a EXCEPT b) EXCEPT c`. This is incorrect, since EXCEPT (set subtraction) is not associative.  For example: ``` (VALUES 1)  EXCEPT  ((VALUES 1) EXCEPT (VALUES 1)) ```  Produces: ```  _col0 ------- (0 rows) ```  The correct output should be: ```  _col0 -------      1 (1 row) ```  This is due to SetFlatteningOptimizer treating EXCEPT in the same manner as UNION and INTERSECT.</body>
		<created>2016-12-02 20:57:49</created>
		<closed>2016-12-15 00:45:23</closed>
	</bug>
	<bug>
		<id>6750</id>
		<title>Incorrect results due to improper inlining of arguments to TRY</title>
		<body>The following query should fail:  ```sql SELECT TRY(x) IS NULL FROM (SELECT 1/y as x FROM (VALUES 1, 2, 3, 0, 4) t(y)) ```  However, it succeeds and produces this incorrect output: ```  _col0 -------  false  false  false  true  false (5 rows) ```  This is due to this check in MergeProjections, which only tests whether TRY appears at the root of an expression:  ```java private static boolean containsTry(ProjectNode node) {     return node.getAssignments().values().stream().anyMatch(TryExpression.class::isInstance); } ```</body>
		<created>2016-12-02 04:17:14</created>
		<closed>2016-12-27 18:46:19</closed>
	</bug>
	<bug>
		<id>6747</id>
		<title>Coordinator does not expire all queries</title>
		<body>I see finished queries that are several days old in the UI on busy clusters that should only have a few minutes worth of finished queries. This means there is a bug/leak in query expiration.</body>
		<created>2016-12-02 00:19:17</created>
		<closed>2017-04-18 17:26:57</closed>
	</bug>
	<bug>
		<id>6741</id>
		<title>SET SESSION allows setting invalid values to session properties</title>
		<body>Currently it is possible to set arbitrary value to session property even if it has validation function attached to it.  E.g. I can do ``` presto:public&gt; set session task_writer_count=3; SET SESSION ```  And it completes without error. But then I cannot do anything until I restart cli: Any command fails: ``` presto:public&gt; select 1; Query 20161201_152600_00032_8zkam failed: task_writer_count must be a power of 2: 3  presto:public&gt; set session task_writer_count=4; Query 20161201_152534_00031_8zkam failed: task_writer_count must be a power of 2: 3 ```  </body>
		<created>2016-12-01 15:26:02</created>
		<closed>2018-10-04 04:44:33</closed>
	</bug>
	<bug>
		<id>6735</id>
		<title>TestLocalBinarySpilledQueries fails with "Too many open files in system"</title>
		<body>I consistently get this failure when running the tests on OSX. ``` testAssignUniqueId(com.facebook.presto.tests.TestLocalBinarySpilledQueries)  Time elapsed: 2.7 sec  &lt;&lt;&lt; FAILURE! java.lang.AssertionError: Execution of 'actual' query failed: SELECT count(*) FROM (SELECT * FROM (   SELECT (SELECT count(*) WHERE c = 1)    FROM (SELECT CASE orderkey WHEN 1 THEN orderkey ELSE 1 END        FROM (SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem)) o(c)) result(a) WHERE a = 1) at com.facebook.presto.tests.QueryAssertions.assertQuery(QueryAssertions.java:85) at com.facebook.presto.tests.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:108) at com.facebook.presto.tests.AbstractTestQueries.testAssignUniqueId(AbstractTestQueries.java:7738) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: com.facebook.presto.spi.PrestoException: Failed to read spilled pages at com.facebook.presto.spiller.BinaryFileSpiller.readPages(BinaryFileSpiller.java:121) at com.facebook.presto.spiller.BinaryFileSpiller.lambda$getSpills$1(BinaryFileSpiller.java:109) at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.spiller.BinaryFileSpiller.getSpills(BinaryFileSpiller.java:110) at com.facebook.presto.operator.aggregation.builder.SpillableHashAggregationBuilder.mergeFromDisk(SpillableHashAggregationBuilder.java:239) at com.facebook.presto.operator.aggregation.builder.SpillableHashAggregationBuilder.buildResult(SpillableHashAggregationBuilder.java:170) at com.facebook.presto.operator.HashAggregationOperator.getOutput(HashAggregationOperator.java:421) at com.facebook.presto.operator.Driver.processInternal(Driver.java:378) at com.facebook.presto.operator.Driver.process(Driver.java:327) at com.facebook.presto.testing.LocalQueryRunner.executeInternal(LocalQueryRunner.java:508) at com.facebook.presto.testing.LocalQueryRunner.lambda$execute$2(LocalQueryRunner.java:473) at com.facebook.presto.transaction.TransactionBuilder.execute(TransactionBuilder.java:149) at com.facebook.presto.testing.LocalQueryRunner.inTransaction(LocalQueryRunner.java:485) at com.facebook.presto.testing.LocalQueryRunner.execute(LocalQueryRunner.java:473) at com.facebook.presto.tests.QueryAssertions.assertQuery(QueryAssertions.java:82) ... 15 more Caused by: java.io.FileNotFoundException: /var/folders/fz/hxvyn4gd06vcggyw9hhr4fnr0000gp/T/presto/spills/presto-spill1292993305067446573/306.bin (Too many open files in system) at java.io.FileInputStream.open0(Native Method) at java.io.FileInputStream.open(FileInputStream.java:195) at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138) at com.facebook.presto.spiller.BinaryFileSpiller.readPages(BinaryFileSpiller.java:116) ... 36 more ... Removed 11 stack frames ```</body>
		<created>2016-12-01 06:00:10</created>
		<closed>2017-02-01 15:56:42</closed>
	</bug>
	<bug>
		<id>6655</id>
		<title>Some test do fail due to translated Exception.getMessage</title>
		<body>Some of recently added tests do check message of RuntimeException. Messages of some jdbc connector are translated to system language and (at least on Mac) for that reason, the test fails. Tested on polish as system language. One example of that is: fbd8dd8c385015a7618aaa3751135f1d8dab8dd2 TestDbResourceGroupConfigurationManager.testDuplicates():86 ```             assertTrue(ex.getCause().getMessage().startsWith("Unique index or primary key violation")); ```  but it would be nice to make sure that all standard test that are started by `mvn clean install` do pass on different system language.  The fix is to force language for test or to avoid checking exception.getMessage() content.</body>
		<created>2016-11-17 14:29:50</created>
		<closed>2018-11-25 22:03:44</closed>
	</bug>
	<bug>
		<id>6654</id>
		<title>Supertype not recognized in SIMPLE CASE, IF, IN (Subquery), ANY (Subquery), ALL (Subquery)</title>
		<body>``` presto:sf1&gt; SELECT IF(1, 1.0, 1); Query 20161117_123322_00020_dd5yv failed: line 1:11: IF condition must evaluate to a boolean (actual: integer) ``` CC: @kokosing, @ilfrin, @martint, @arhimondr   This issue is caused by `ExpressionAnalyzer#coerceToSingleType`, which doesn't use `getCommonSuperType` </body>
		<created>2016-11-17 12:36:01</created>
		<closed>2017-03-27 06:30:01</closed>
	</bug>
	<bug>
		<id>6653</id>
		<title>Incorrect ANY, ALL subquery results with null row or empty subquery results</title>
		<body>Presto empty subquery table: ``` presto:sf1&gt; SELECT 1 &lt; ALL (SELECT 1 WHERE false);  _col0  -------  NULL   (1 row)  presto:sf1&gt; SELECT 1 &lt; ALL (SELECT 1 WHERE false);  _col0  -------  NULL   (1 row) ```  Presto NULL row subquery: ``` presto:sf1&gt; SELECT 1 &lt; ALL (VALUES null); Query 20161117_084642_00001_h4d5y failed: Cannot resolve symbol min  presto:sf1&gt; SELECT 1 &lt; ANY (VALUES null); Query 20161117_112202_00006_tje4f failed: Expected method MethodHandle(BlockState,Block)void parameter 1 type to be void (unknown) ```  Postgresql empty subquery table ``` postgres=# select 1 &lt; ALL (SELECT 1 WHERE false);  ?column?  ----------  t (1 row)  postgres=# select 1 &lt; ANY (SELECT 1 WHERE false);  ?column?  ----------  f (1 row) ```  Postgresql NULL row subquery: ``` postgres=# select 1 &lt; ANY (SELECT null); ERROR:  failed to find conversion function from unknown to integer  postgres=# select 1 &lt; ALL (SELECT null); ERROR:  failed to find conversion function from unknown to integer ```  CC: @martint @kokosing </body>
		<created>2016-11-17 11:26:59</created>
		<closed>2016-12-30 18:15:40</closed>
	</bug>
	<bug>
		<id>6639</id>
		<title>Unable to start server when cassandra host is not resolvable</title>
		<body>Unable to start presto with cassandra connector when cassandra host (`cassandra.contact-points` from `cassandra.properties`) is not resolvable to an IP.  ```  2016-11-16T09:24:39.229ZERRORmaincom.facebook.presto.server.PrestoServerUnable to create injector, see the following errors:  1) Error in custom provider, java.lang.IllegalArgumentException: cassandra: unknown error   at com.facebook.presto.cassandra.CassandraClientModule.createCassandraSession(CassandraClientModule.java:99)   at com.facebook.presto.cassandra.CassandraClientModule.createCassandraSession(CassandraClientModule.java:99)   while locating com.facebook.presto.cassandra.CassandraSession Caused by: java.lang.IllegalArgumentException: cassandra: unknown error at com.datastax.driver.core.Cluster$Builder.addContactPoint(Cluster.java:839) at com.datastax.driver.core.Cluster$Builder.addContactPoints(Cluster.java:859) at com.facebook.presto.cassandra.CassandraClientModule.createCassandraSession(CassandraClientModule.java:106) at com.facebook.presto.cassandra.CassandraClientModule$$FastClassByGuice$$2bcb94b1.invoke(&lt;generated&gt;) at com.google.inject.internal.ProviderMethod$FastClassProviderMethod.doProvision(ProviderMethod.java:272) at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:172) at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81) at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53) at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61) at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45) at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46) at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103) at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40) at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145) at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41) at com.google.inject.internal.InternalInjectorCreator$1.call(InternalInjectorCreator.java:205) at com.google.inject.internal.InternalInjectorCreator$1.call(InternalInjectorCreator.java:199) at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092) at com.google.inject.internal.InternalInjectorCreator.loadEagerSingletons(InternalInjectorCreator.java:199) at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:180) at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110) at com.google.inject.Guice.createInjector(Guice.java:96) at io.airlift.bootstrap.Bootstrap.initialize(Bootstrap.java:242) at com.facebook.presto.cassandra.CassandraConnectorFactory.create(CassandraConnectorFactory.java:82) at com.facebook.presto.connector.ConnectorManager.createConnector(ConnectorManager.java:304) at com.facebook.presto.connector.ConnectorManager.addCatalogConnector(ConnectorManager.java:193) at com.facebook.presto.connector.ConnectorManager.createConnection(ConnectorManager.java:185) at com.facebook.presto.connector.ConnectorManager.createConnection(ConnectorManager.java:171) at com.facebook.presto.metadata.StaticCatalogStore.loadCatalog(StaticCatalogStore.java:99) at com.facebook.presto.metadata.StaticCatalogStore.loadCatalogs(StaticCatalogStore.java:77) at com.facebook.presto.server.PrestoServer.run(PrestoServer.java:120) at com.facebook.presto.server.PrestoServer.main(PrestoServer.java:67) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) ```  CC: @maciejgrzybek </body>
		<created>2016-11-16 09:30:18</created>
		<closed>2016-11-16 16:27:47</closed>
	</bug>
	<bug>
		<id>6637</id>
		<title>Unable to create plan for query with duplicated IN predicates</title>
		<body>``` presto:tiny&gt; select 1 in (select 1), 2 in (select 1) where 1 in (select 1); Query 20161116_072550_00005_ztdnc failed: Invalid node. Expression dependencies ([semijoin_result]) not in source plan output ([expr_4, $hashvalue_22, semijoin_result_17]) ```  ```  java.lang.IllegalArgumentException: Invalid node. Expression dependencies ([semijoin_result]) not in source plan output ([expr_4, $hashvalue_22, semijoin_result_17]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:610) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:77) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:257) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:469) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitExchange(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:208) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:300) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:91) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:88) at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:83) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:43) at java.lang.Iterable.forEach(Iterable.java:75) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:43) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:125) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:109) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:292) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:271) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:229) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-11-16 07:27:28</created>
		<closed>2016-12-05 10:14:50</closed>
	</bug>
	<bug>
		<id>6622</id>
		<title>Incorrect result when using NULL IN empty subquery</title>
		<body>``` presto:tiny&gt; select x from (values null, 1) t(x) where (x in (select * from (values 1) p(y) where y &lt; 0)) is null;   x ------  NULL (1 row) ``` The query is expected to return an empty result set.</body>
		<created>2016-11-15 01:04:59</created>
		<closed>2016-12-30 18:24:35</closed>
	</bug>
	<bug>
		<id>6606</id>
		<title>Uncategorized error when casting nan or infinite to decimal</title>
		<body>``` select cast(nan() as decimal(1,1)) ```  ``` Query 20161111_172739_13734_rka4f failed: Infinite or NaN java.lang.NumberFormatException: Infinite or NaN at java.math.BigDecimal.&lt;init&gt;(BigDecimal.java:895) at java.math.BigDecimal.&lt;init&gt;(BigDecimal.java:872) at com.facebook.presto.type.DecimalCasts.doubleToShortDecimal(DecimalCasts.java:427) at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627) at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:649) at com.facebook.presto.sql.planner.ExpressionInterpreter.invoke(ExpressionInterpreter.java:1312) at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitCast(ExpressionInterpreter.java:1093) at com.facebook.presto.sql.tree.Cast.accept(Cast.java:94) at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:264) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:157) at com.google.common.collect.Maps$7.transformEntry(Maps.java:1812) at com.google.common.collect.Maps$10.getValue(Maps.java:1857) at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:111) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:89) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:110) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:89) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:110) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:89) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:110) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:89) at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:28) at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:86) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:118) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:109) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:288) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:267) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:225) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  It should be categorized as `INVALID_FUNCTION_ARGUMENT`</body>
		<created>2016-11-11 17:30:35</created>
		<closed>2016-11-16 14:03:49</closed>
	</bug>
	<bug>
		<id>6589</id>
		<title>Explain analyze incorrectly strips off output columns</title>
		<body>Explain analyze currently strips off output columns of a query, which is a problem because it changes the performance characteristics of the query. For example, if I have a query with 1000 group-by aggregates, the explain analyze will only run with 1 of the group-by aggregates.</body>
		<created>2016-11-10 01:33:33</created>
		<closed>2016-11-21 19:44:31</closed>
	</bug>
	<bug>
		<id>6554</id>
		<title>Invalid plan for query involving an aggregation subquery joined to a partitioned table</title>
		<body>Given this hive table:  ```sql CREATE TABLE t (a bigint, ds varchar) WITH (partitioned_by = array['ds']) ```  The following query fails with an exception during planning:  ```sql SELECT * FROM (     SELECT count(*)     FROM tpch.tiny.orders     HAVING count(DISTINCT custkey) &gt; 1 )  CROSS JOIN t ```  ``` java.lang.IllegalArgumentException: Output layout ([count_20]) don't include all partition columns ([custkey]) at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) at com.facebook.presto.sql.planner.PartitioningScheme.&lt;init&gt;(PartitioningScheme.java:70) at com.facebook.presto.sql.planner.PartitioningScheme.&lt;init&gt;(PartitioningScheme.java:50) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:165) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:69) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:208) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:155) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:69) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:208) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitAggregation(PartialAggregationPushDown.java:126) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitAggregation(PartialAggregationPushDown.java:69) at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:185) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:64) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:141) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown$Rewriter.visitExchange(PartialAggregationPushDown.java:69) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:208) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitFilter(PlanVisitor.java:35) at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitJoin(PlanVisitor.java:90) at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:170) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.Iterator.forEachRemaining(Iterator.java:116) at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:33) at com.facebook.presto.sql.planner.optimizations.PartialAggregationPushDown.optimize(PartialAggregationPushDown.java:66) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:118) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:109) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:288) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:267) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:225) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-11-08 02:29:02</created>
		<closed>2016-11-09 21:19:37</closed>
	</bug>
	<bug>
		<id>6553</id>
		<title>NPE when table is bucketed on non-existent column</title>
		<body>Given this table (which is, allegedly, bucketed on a non-existent column)  ``` CREATE TABLE foo (a bigint)  WITH (bucketed_by = array['b'], bucket_count=1000) ```  Querying the table fails with:  ``` java.lang.NullPointerException at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.facebook.presto.hive.HiveMetadata.lambda$getTableLayout$6(HiveMetadata.java:1037) at java.util.Optional.map(Optional.java:215) at com.facebook.presto.hive.HiveMetadata.getTableLayout(HiveMetadata.java:1031) at com.facebook.presto.hive.HiveMetadata.getTableLayouts(HiveMetadata.java:999) at com.facebook.presto.hive.PrismMetadata.getTableLayouts(PrismMetadata.java:386) at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.getTableLayouts(ClassLoaderSafeConnectorMetadata.java:69) at com.facebook.presto.metadata.MetadataManager.getLayouts(MetadataManager.java:298) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planTableScan(AddExchanges.java:583) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableScan(AddExchanges.java:535) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableScan(AddExchanges.java:197) at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1169) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:244) at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:197) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:147) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:118) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:109) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:288) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:267) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:225) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ```  This is related to https://github.com/prestodb/presto/issues/6552</body>
		<created>2016-11-08 02:08:11</created>
		<closed>2016-11-10 00:36:52</closed>
	</bug>
	<bug>
		<id>6552</id>
		<title>Hive table can be bucketed on non-existent column</title>
		<body>This statement succeeds, even though the table does contain a column named `b`:  ```sql CREATE TABLE foo (a bigint) WITH (bucketed_by = array['b'], bucket_count=1000) ``` </body>
		<created>2016-11-08 02:05:47</created>
		<closed>2016-11-09 22:33:01</closed>
	</bug>
	<bug>
		<id>6551</id>
		<title>Planning error for query containing disjunctions and IN (subquery) predicates</title>
		<body>```sql SELECT * FROM tpch.tiny.orders WHERE orderkey IN (VALUES 1) OR TRUE ```  fails with:  ``` java.lang.IllegalArgumentException: Unsupported subquery type at com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker$1.visitApply(NoApplyNodeLeftChecker.java:39) at com.facebook.presto.sql.planner.plan.ApplyNode.accept(ApplyNode.java:96) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:175) at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:208) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26) at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19) at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) at com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker.validate(NoApplyNodeLeftChecker.java:33) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:42) at java.lang.Iterable.forEach(Iterable.java:75) at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:42) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:123) at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:107) at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:291) at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:270) at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:228) at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-11-08 01:57:12</created>
		<closed>2016-11-08 22:22:53</closed>
	</bug>
	<bug>
		<id>6550</id>
		<title>Uncategorized error for from_unixtime</title>
		<body>``` Invalid offset minutes 1080 java.lang.IllegalArgumentException     com.facebook.presto.spi.type.TimeZoneKey.checkArgument(TimeZoneKey.java:300)     com.facebook.presto.spi.type.TimeZoneKey.getTimeZoneKeyForOffset(TimeZoneKey.java:140)     com.facebook.presto.spi.type.DateTimeEncoding.packDateTimeWithZone(DateTimeEncoding.java:41)     com.facebook.presto.operator.scalar.DateTimeFunctions.fromUnixTime(DateTimeFunctions.java:149)     com_facebook_presto_$gen_PageProcessor_14559.project_1(Unknown Source)     com_facebook_presto_$gen_PageProcessor_14559.process(Unknown Source)     com.facebook.presto.operator.FilterAndProjectOperator.getOutput(FilterAndProjectOperator.java:111)     com.facebook.presto.operator.Driver.processInternal(Driver.java:378)     com.facebook.presto.operator.Driver.processFor(Driver.java:301)     com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)     com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:534)     com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:670)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     java.lang.Thread.run(Thread.java:745) ```</body>
		<created>2016-11-08 01:44:51</created>
		<closed>2018-01-04 22:04:07</closed>
	</bug>
	<bug>
		<id>6449</id>
		<title>Incorrect plan when hash pre-computation is on</title>
		<body>Give this table:  ``` sql CREATE TABLE u AS (     SELECT x, y     FROM (VALUES      ('a', 0),      ('b', 1)     ) t(x, y) ); ```  The following query may randomly produce an invalid plan, which causes the query to produce 0 as a result instead of 1.  ``` sql WITH t AS (     SELECT x, y     FROM u     GROUP BY 1, 2 ) SELECT count(*) FROM t a JOIN t b ON a.x = 'a' AND a.y = b.y - 1; ```  Correct plan:  ```  Fragment 0 [SINGLE]      Output layout: [count]      Output partitioning: SINGLE []      - Output[_col0] =&gt; [count:bigint]              _col0 := count          - Aggregate(FINAL) =&gt; [count:bigint]                  count := "count"("count_46")              - RemoteSource[1] =&gt; [count_46:bigint]   Fragment 1 [HASH]      Output layout: [count_47]      Output partitioning: SINGLE []      - Aggregate(PARTIAL) =&gt; [count_47:bigint]              count_47 := "count"(*)          - InnerJoin[("x" = "expr_39") AND ("y" = "expr_41")] =&gt; [x:varchar, y:integer, $hashvalue:bigint, expr_28:varchar, expr_29:integer, expr_39:varchar, expr_41:integer, $hashvalue_49:bigint]              - Aggregate(FINAL)[x, y] =&gt; [x:varchar, y:integer, $hashvalue:bigint]                  - RemoteSource[2] =&gt; [x:varchar, y:integer, $hashvalue:bigint]              - Project =&gt; [expr_28:varchar, expr_29:integer, expr_39:varchar, expr_41:integer, $hashvalue_49:bigint]                  - RemoteSource[3] =&gt; [expr_28:varchar, expr_29:integer, expr_39:varchar, expr_41:integer, $hashvalue_49:bigint, $hashvalue_50:bigint]   Fragment 2 [SOURCE]      Output layout: [x, y, $hashvalue_48]      Output partitioning: HASH [x, y]      - Aggregate(PARTIAL)[x, y] =&gt; [x:varchar, y:integer, $hashvalue_48:bigint]          - Project =&gt; [x:varchar, y:integer, $hashvalue_48:bigint]                  $hashvalue_48 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("x"), 0)), COALESCE("$operator$hash_code"("y"), 0))              - Filter[("x" = CAST('a' AS VARCHAR))] =&gt; [x:varchar, y:integer]                  - TableScan[prism_batch:local_goldprism_batch:local_gold:tmp_martint40, originalConstraint = ("x" = CAST('a' AS VARCHAR))] =&gt; [x:varchar, y:integer]                          LAYOUT: prism_batch                          x := HiveColumnHandle{clientId=prism_batch, name=x, hiveType=string, hiveColumnIndex=0, columnType=REGULAR}                          y := HiveColumnHandle{clientId=prism_batch, name=y, hiveType=int, hiveColumnIndex=1, columnType=REGULAR}   Fragment 3 [HASH]      Output layout: [expr_28, expr_29, expr_28, expr_29, $hashvalue_53, $hashvalue_53]      Output partitioning: HASH [expr_28, expr_29]      - Project =&gt; [expr_28:varchar, expr_29:integer, $hashvalue_53:bigint]              $hashvalue_53 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("expr_28"), 0)), COALESCE("$operator$hash_code"("expr_29"), 0))          - Project =&gt; [expr_28:varchar, expr_29:integer]                  expr_28 := CAST('a' AS VARCHAR)                  expr_29 := ("y_12" - 1)              - Aggregate(FINAL)[x_11, y_12] =&gt; [x_11:varchar, y_12:integer, $hashvalue_51:bigint]                  - RemoteSource[4] =&gt; [x_11:varchar, y_12:integer, $hashvalue_51:bigint]   Fragment 4 [SOURCE]       Output layout: [x_11, y_12, $hashvalue_52]       Output partitioning: HASH [x_11, y_12]       - Aggregate(PARTIAL)[x_11, y_12] =&gt; [x_11:varchar, y_12:integer, $hashvalue_52:bigint]           - Project =&gt; [x_11:varchar, y_12:integer, $hashvalue_52:bigint]                   $hashvalue_52 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("x_11"), 0)), COALESCE("$operator$hash_code"("y_12"), 0))               - TableScan[prism_batch:local_goldprism_batch:local_gold:tmp_martint40, originalConstraint = true] =&gt; [x_11:varchar, y_12:integer]                       LAYOUT: prism_batch                       x_11 := HiveColumnHandle{clientId=prism_batch, name=x, hiveType=string, hiveColumnIndex=0, columnType=REGULAR}                       y_12 := HiveColumnHandle{clientId=prism_batch, name=y, hiveType=int, hiveColumnIndex=1, columnType=REGULAR} ```  Incorrect plan:  ```  Fragment 0 [SINGLE]      Output layout: [count]      Output partitioning: SINGLE []      - Output[_col0] =&gt; [count:bigint]              _col0 := count          - Aggregate(FINAL) =&gt; [count:bigint]                  count := "count"("count_46")              - RemoteSource[1] =&gt; [count_46:bigint]   Fragment 1 [HASH]      Output layout: [count_47]      Output partitioning: SINGLE []      - Aggregate(PARTIAL) =&gt; [count_47:bigint]              count_47 := "count"(*)          - InnerJoin[("y" = "expr_39") AND ("x" = "expr_41")] =&gt; [x:varchar, y:integer, $hashvalue:bigint, expr_28:varchar, expr_29:integer, expr_39:integer, expr_41:varchar, $hashvalue_49:bigint]              - Aggregate(FINAL)[x, y] =&gt; [x:varchar, y:integer, $hashvalue:bigint]                  - RemoteSource[2] =&gt; [x:varchar, y:integer, $hashvalue:bigint]              - Project =&gt; [expr_28:varchar, expr_29:integer, expr_39:integer, expr_41:varchar, $hashvalue_49:bigint]                  - RemoteSource[3] =&gt; [expr_28:varchar, expr_29:integer, expr_39:integer, expr_41:varchar, $hashvalue_49:bigint, $hashvalue_50:bigint]   Fragment 2 [SOURCE]      Output layout: [x, y, $hashvalue_48]      Output partitioning: HASH [x, y]      - Aggregate(PARTIAL)[x, y] =&gt; [x:varchar, y:integer, $hashvalue_48:bigint]          - Project =&gt; [x:varchar, y:integer, $hashvalue_48:bigint]                  $hashvalue_48 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("y"), 0)), COALESCE("$operator$hash_code"("x"), 0))              - Filter[("x" = CAST('a' AS VARCHAR))] =&gt; [x:varchar, y:integer]                  - TableScan[prism_batch:local_goldprism_batch:local_gold:tmp_martint40, originalConstraint = ("x" = CAST('a' AS VARCHAR))] =&gt; [x:varchar, y:integer]                          LAYOUT: prism_batch                          x := HiveColumnHandle{clientId=prism_batch, name=x, hiveType=string, hiveColumnIndex=0, columnType=REGULAR}                          y := HiveColumnHandle{clientId=prism_batch, name=y, hiveType=int, hiveColumnIndex=1, columnType=REGULAR}   Fragment 3 [HASH]      Output layout: [expr_28, expr_29, expr_29, expr_28, $hashvalue_53, $hashvalue_54]      Output partitioning: HASH [expr_28, expr_29]      - Project =&gt; [expr_28:varchar, expr_29:integer, $hashvalue_53:bigint, $hashvalue_54:bigint]              $hashvalue_53 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("expr_29"), 0)), COALESCE("$operator$hash_code"("expr_28"), 0))              $hashvalue_54 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("expr_28"), 0)), COALESCE("$operator$hash_code"("expr_29"), 0))          - Project =&gt; [expr_28:varchar, expr_29:integer]                  expr_28 := CAST('a' AS VARCHAR)                  expr_29 := ("y_12" - 1)              - Aggregate(FINAL)[x_11, y_12] =&gt; [x_11:varchar, y_12:integer, $hashvalue_51:bigint]                  - RemoteSource[4] =&gt; [x_11:varchar, y_12:integer, $hashvalue_51:bigint]   Fragment 4 [SOURCE]      Output layout: [x_11, y_12, $hashvalue_52]      Output partitioning: HASH [x_11, y_12]      - Aggregate(PARTIAL)[x_11, y_12] =&gt; [x_11:varchar, y_12:integer, $hashvalue_52:bigint]          - Project =&gt; [x_11:varchar, y_12:integer, $hashvalue_52:bigint]                  $hashvalue_52 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("x_11"), 0)), COALESCE("$operator$hash_code"("y_12"), 0))              - TableScan[prism_batch:local_goldprism_batch:local_gold:tmp_martint40, originalConstraint = true] =&gt; [x_11:varchar, y_12:integer]                      LAYOUT: prism_batch                      x_11 := HiveColumnHandle{clientId=prism_batch, name=x, hiveType=string, hiveColumnIndex=0, columnType=REGULAR}                      y_12 := HiveColumnHandle{clientId=prism_batch, name=y, hiveType=int, hiveColumnIndex=1, columnType=REGULAR} ```  The join appears to be using the following hash:  ``` $hashvalue_53 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("expr_29"), 0)), COALESCE("$operator$hash_code"("expr_28"), 0)) ```  which has its inputs reversed, compared to the ones used for the aggregation and shuffle.  This issue happens in master (after 0.154), and is likely to be due to this change: 15d32ee93f8dd02cee815c3ecf2a1dd76a13e7e0. </body>
		<created>2016-10-27 02:24:07</created>
		<closed>2016-10-28 01:20:47</closed>
	</bug>
	<bug>
		<id>6440</id>
		<title>Make PROPERTIES, INCLUDING and EXCLUDING unreserved keywords</title>
		<body>This commit (055b1df2c4d8f6c220a280a0175b8542177d3753) added support for CREATE TABLE LIKE, but did not mark those keywords as unreserved. As a result, any queries that referenced columns with those names without quoting fail in the new version. </body>
		<created>2016-10-26 19:47:08</created>
		<closed>2016-10-26 20:37:41</closed>
	</bug>
	<bug>
		<id>6436</id>
		<title>Incorrect memory accounting for Hash Aggregation operator</title>
		<body>The following query reports peak memory that varies wildly from cluster to cluster and run to run. I've seen numbers ranging from 0 GB to 20 GB. It seems to be sensitive to how much concurrent work is being performed, how fast work completes, etc.  For instance, in one cluster, setting task_concurrency to 1 causes it to report ~2 GB. With a task_concurrency of 2 or higher, it reports 0 GB.  In another cluster, it reports 4.4 GB with task_concurrency=1 and 3 GB/3.3 GB/3.8 GB with task_concurrency &gt; 1  ``` sql SELECT custkey, count(*) c FROM tpch.sf1000.orders GROUP BY custkey ``` </body>
		<created>2016-10-26 01:30:41</created>
		<closed>2016-10-27 22:45:56</closed>
	</bug>
	<bug>
		<id>6407</id>
		<title>Incorrect result when using MAP in IN expression</title>
		<body>In the latest master:  ``` presto:tiny&gt; select x from (values 2) t(x) where map(array[1], array[x]) in (values map(array[1],array[2]));  x  --- (0 rows) ``` </body>
		<created>2016-10-20 18:24:27</created>
		<closed>2016-10-21 04:36:03</closed>
	</bug>
	<bug>
		<id>6379</id>
		<title>Incorrect results when GROUPING SETS refer to columns derived from same column</title>
		<body>This query:  ``` sql WITH    t (v) AS (VALUES 1, 2),    u (v1, v2) AS (SELECT v v1, v v2 FROM t) SELECT v1, v2 FROM u GROUP BY GROUPING SETS ((v1), (v2)) ```  incorrectly produces:  ```  v1 | v2 ----+----   1 |  1   2 |  2   1 |  1   2 |  2 (4 rows) ```  The expected result is:  ```   v1  |  v2 ------+------     1 | NULL     2 | NULL  NULL |    1  NULL |    2 (4 rows) ``` </body>
		<created>2016-10-17 23:40:20</created>
		<closed>2016-10-26 23:56:58</closed>
	</bug>
	<bug>
		<id>6373</id>
		<title>Fix creating tinyint or smallint for Avro in Hive</title>
		<body>Avro only supports `int`. In Hive, creating a table with `tinyint` or `smallint` with Avro storage format creates a table with `int` automatically. In Presto, we currently create a broken table (reading it fails with an Avro schema mismatch).  We should either disallow it as not supported (telling the user to use `integer` instead), or automatically translate the types. </body>
		<created>2016-10-17 19:31:42</created>
		<closed>2018-12-02 09:15:57</closed>
	</bug>
	<bug>
		<id>6346</id>
		<title>Planning error when subquery is used in CASE/IF expression</title>
		<body>``` SELECT if(false, 'a' IN (VALUES 'b')) ```  Produces   ``` java.lang.IllegalArgumentException: Unsupported subquery type     at com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker$1.visitApply(NoApplyNodeLeftChecker.java:39)     at com.facebook.presto.sql.planner.plan.ApplyNode.accept(ApplyNode.java:96)     at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)     at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:26)     at com.facebook.presto.sql.planner.SimplePlanVisitor.visitPlan(SimplePlanVisitor.java:19)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.sanity.NoApplyNodeLeftChecker.validate(NoApplyNodeLeftChecker.java:33)     at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:42)     at java.lang.Iterable.forEach(Iterable.java:75)     at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:42)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:123)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:107)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:291)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:270)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:228)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This is a regression in 0.153 </body>
		<created>2016-10-13 18:21:38</created>
		<closed>2016-10-13 22:00:12</closed>
	</bug>
	<bug>
		<id>6332</id>
		<title>Predicate pushdown derives incorrect join equality</title>
		<body>The following query:  ``` sql WITH t AS (   SELECT     name x,     CASE name       WHEN 'AFRICA' THEN 'AMERICA'       ELSE NULL     END AS y   FROM tpch.tiny.region ) SELECT * FROM t a JOIN t b ON a.x = b.y ```  incorrectly produces 0 rows. The expected output is:  ```     x    |  y   |   x    |    y ---------+------+--------+---------  AMERICA | NULL | AFRICA | AMERICA ```  This is the plan (distributed joins and hash generation optimization disabled):  ``` Fragment 0 [SINGLE]      Output layout: [name, expr, name_10, expr_14]      Output partitioning: SINGLE []      - Output[x, y, x, y] =&gt; [name:varchar(25), expr:varchar(7), name_10:varchar(25), expr_14:varchar(7)]              x := name              y := expr              x := name_10              y := expr_14          - RemoteSource[1] =&gt; [name:varchar(25), expr:varchar(7), name_10:varchar(25), expr_14:varchar(7)]    Fragment 1 [SOURCE]      Output layout: [name, expr, name_10, expr_14]      Output partitioning: SINGLE []      - Project =&gt; [name:varchar(25), expr:varchar(7), name_10:varchar(25), expr_14:varchar(7)]          - InnerJoin[("expr" = "expr_46") AND ("name" = "expr_48")] =&gt; [name:varchar(25), expr:varchar(7), name_10:varchar(25), expr_14:varchar(7), expr_46:varchar(7), expr_48:varchar(25)]              - Project =&gt; [name:varchar(25), expr:varchar(7)]                      expr := (CASE "name" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END)                  - Filter[((CASE "name" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) = (CASE "name" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END))] =&gt; [name:varchar(25)]                      - TableScan[tpch:tpch:region:sf0.01, originalConstraint = true] =&gt; [name:varchar(25)]                              name := tpch:name              - RemoteSource[2] =&gt; [name_10:varchar(25), expr_14:varchar(7), expr_46:varchar(7), expr_48:varchar(25)]  Fragment 2 [SOURCE]      Output layout: [name_10, expr_52, expr_50, expr_51]      Output partitioning: BROADCAST []      - Project =&gt; [name_10:varchar(25), expr_50:varchar(7), expr_51:varchar(25), expr_52:varchar(7)]              expr_50 := (CASE CAST((CASE "name_10" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) AS VARCHAR(25)) WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END)              expr_51 := CAST((CASE "name_10" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) AS VARCHAR(25))              expr_52 := (CASE "name_10" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END)          - Filter[((CASE CAST((CASE "name_10" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) AS VARCHAR(25)) WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) = (CASE CAST((CASE "name_10" WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END) AS VARCHAR(25)) WHEN CAST('AFRICA' AS VARCHAR(25)) THEN 'AMERICA' END))] =&gt; [name_10:varchar(25)]              - TableScan[tpch:tpch:region:sf0.01, originalConstraint = true] =&gt; [name_10:varchar(25)]                      name_10 := tpch:name ```  The filter above the table scan looks incorrect, so this would appear to be a bug in predicate / projection pushdown (casts elided for readability)  ``` CASE (CASE "name_10" WHEN 'AFRICA' THEN 'AMERICA' END)     WHEN 'AFRICA' THEN 'AMERICA' END  =  CASE (CASE "name_10" WHEN 'AFRICA' THEN 'AMERICA' END)     WHEN 'AFRICA' THEN 'AMERICA' END ``` </body>
		<created>2016-10-12 05:25:12</created>
		<closed>2016-10-16 18:18:09</closed>
	</bug>
	<bug>
		<id>6330</id>
		<title>Planning bug when creating bucketed table</title>
		<body>This query:  ``` sql CREATE TABLE t WITH (     bucketed_by=array['k'],     bucket_count=64)  AS (SELECT '' a, '' b, 0 k) ```  fails with:  ``` java.lang.IllegalArgumentException: Input symbols do not match output symbols     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.sql.planner.plan.ExchangeNode.&lt;init&gt;(ExchangeNode.java:82)     at com.facebook.presto.sql.planner.plan.ExchangeNode.partitionedExchange(ExchangeNode.java:130)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableWriter(AddExchanges.java:636)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableWriter(AddExchanges.java:187)     at com.facebook.presto.sql.planner.plan.TableWriterNode.accept(TableWriterNode.java:128)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1231)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableFinish(AddExchanges.java:791)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitTableFinish(AddExchanges.java:187)     at com.facebook.presto.sql.planner.plan.TableFinishNode.accept(TableFinishNode.java:80)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1231)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:236)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:187)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:149)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:105)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:281)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:260)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:224)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-10-11 23:10:22</created>
		<closed>2016-10-14 03:56:13</closed>
	</bug>
	<bug>
		<id>6319</id>
		<title>Fix thread safety of IndexLookup in AccumuloClient</title>
		<body>`AccumuloClient` is a singleton and contains an instance of `IndexLookup`. It then calls `setAuths()` from `getTabletSplits()` which is called from different threads.  Additionally, `IndexLookup` uses `ColumnCardinalityCache` which has a normal `HashMap` without any synchronization. This code path is also called from multiple threads.  This should probably be done after #6318, since several of the classes involved store an `AccumuloConfig`. </body>
		<created>2016-10-10 22:07:49</created>
		<closed>2016-10-31 15:08:58</closed>
	</bug>
	<bug>
		<id>6318</id>
		<title>Remove usages of stored AccumuloConfig</title>
		<body>Various classes like `AccumuloPageSinkProvider` store an `AccumuloConfig` class rather than extracting the values in the constructor and saving them to `final` fields. Config classes are mutable, so other classes should not keep a reference to them. </body>
		<created>2016-10-10 22:00:18</created>
		<closed>2016-10-18 16:13:43</closed>
	</bug>
	<bug>
		<id>6317</id>
		<title>Make AccumuloColumnHandle immutable</title>
		<body>Mutable classes for a data object is a general anti-pattern (_Effective Java_ gives a full explanation) and is contrary to the general coding style of Presto. Additionally, the mutable fields are used in `equals` / `hashCode` which violates the contract. </body>
		<created>2016-10-10 21:55:07</created>
		<closed>2016-10-18 15:55:25</closed>
	</bug>
	<bug>
		<id>6295</id>
		<title>O(N^2) behavior when grouping by double column containing NaNs</title>
		<body>NaNs are not equal to any other value (even to NaN). This causes insertions into the hash table of a group by or join to become O(N) for NaN values.  Once https://github.com/prestodb/presto/issues/1508 is implemented, this should no longer be a problem. In the meantime, we should consider failing queries that GROUP BY or JOIN on NaNs. </body>
		<created>2016-10-07 19:41:07</created>
		<closed>2018-07-13 22:57:47</closed>
	</bug>
	<bug>
		<id>6293</id>
		<title>CLI progress bar overflows on queries running for 100+ minutes</title>
		<body>Here's an example from a query that's been running for 2+ hours. The CLI terminal width is 80 characters, but this line is rendered at 81 characters (due to the extra minute digit):  ``` 125:36 [24.9M rows, 3.54GB] [ 3.3K rows/s,  493KB/s] [=====================&gt;] 99% ``` </body>
		<created>2016-10-07 19:09:06</created>
		<closed>2019-05-21 16:23:38</closed>
	</bug>
	<bug>
		<id>6278</id>
		<title>Planning Class cast exception</title>
		<body>This query now throws an error:  ``` SELECT   (MAX(x.a) OVER () - x.a) * 100.0 / MAX(x.a) OVER () FROM (   SELECT 1 as a ) x ```  ``` Query 20161005_231326_03851_gb7jd failed: com.facebook.presto.sql.tree.SymbolReference cannot be cast to com.facebook.presto.sql.tree.FunctionCall java.lang.ClassCastException: com.facebook.presto.sql.tree.SymbolReference cannot be cast to com.facebook.presto.sql.tree.FunctionCall     at com.facebook.presto.sql.planner.QueryPlanner.window(QueryPlanner.java:617)     at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:140)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:443)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:94)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:220)     at com.facebook.presto.sql.planner.QueryPlanner.plan(QueryPlanner.java:113)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:436)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:94)     at com.facebook.presto.sql.tree.Query.accept(Query.java:103)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:358)     at com.facebook.presto.sql.planner.LogicalPlanner.planStatement(LogicalPlanner.java:150)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:112)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:107)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:291)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:270)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:228)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-10-05 23:14:31</created>
		<closed>2016-10-06 04:47:03</closed>
	</bug>
	<bug>
		<id>6266</id>
		<title>Exception when pressing CTRL-C during query execution</title>
		<body>Pressing CTRL-C in the CLI while a query is processing causes:  ``` java.lang.RuntimeException: Error fetching next     at com.facebook.presto.client.StatementClient.advance(StatementClient.java:300)     at com.facebook.presto.cli.StatusPrinter.printInitialStatusUpdates(StatusPrinter.java:121)     at com.facebook.presto.cli.Query.renderQueryOutput(Query.java:123)     at com.facebook.presto.cli.Query.renderOutput(Query.java:107)     at com.facebook.presto.cli.Console.process(Console.java:294)     at com.facebook.presto.cli.Console.runConsole(Console.java:234)     at com.facebook.presto.cli.Console.run(Console.java:139)     at com.facebook.presto.cli.Presto.main(Presto.java:32) Caused by: java.lang.RuntimeException: java.lang.InterruptedException     at com.google.common.base.Throwables.propagate(Throwables.java:160)     at io.airlift.http.client.ResponseHandlerUtils.propagate(ResponseHandlerUtils.java:22) ```  Version: 0.152 </body>
		<created>2016-10-04 18:52:11</created>
		<closed>2019-01-19 06:09:45</closed>
	</bug>
	<bug>
		<id>6254</id>
		<title>TRY_CAST is inconsistent with CAST</title>
		<body>``` presto&gt; SELECT CAST(x AS BIGINT), TRY_CAST(x AS BIGINT) FROM (VALUES 1, 2, 3, NULL) t(x);  _col0 | _col1 -------+-------      1 |     1      2 |     2      3 |     3  NULL  |     0 (4 rows) ```  ``` presto&gt; SELECT CAST(NULL AS BIGINT), TRY_CAST(NULL AS BIGINT);  _col0 | _col1 -------+-------  NULL  | NULL (1 row) ``` </body>
		<created>2016-10-04 01:01:04</created>
		<closed>2016-10-05 00:00:48</closed>
	</bug>
	<bug>
		<id>6239</id>
		<title>NPE when casting map containing NULLs</title>
		<body>``` sql SELECT CAST(MAP(ARRAY[0, 1], ARRAY[1,NULL]) AS MAP&lt;BIGINT, DOUBLE&gt;); ```  ``` com.facebook.presto.spi.PrestoException: GENERIC_INTERNAL_ERROR     at com.facebook.presto.operator.scalar.MapToMapCast.toMap(MapToMapCast.java:110)     at com_facebook_presto_$gen_PageProcessor_27357.project_0(Unknown Source)     at com_facebook_presto_$gen_PageProcessor_27357.process(Unknown Source)     at com.facebook.presto.operator.FilterAndProjectOperator.getOutput(FilterAndProjectOperator.java:111)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:378)     at com.facebook.presto.operator.Driver.processFor(Driver.java:301)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.NullPointerException     at sun.invoke.util.ValueConversions.unboxLong(ValueConversions.java:121)     at com.facebook.presto.operator.scalar.MapToMapCast.toMap(MapToMapCast.java:104)     ... 11 more ``` </body>
		<created>2016-10-03 06:24:05</created>
		<closed>2016-10-03 18:10:48</closed>
	</bug>
	<bug>
		<id>6223</id>
		<title>effectivePredicate not printed nicely as part of HiveSplit.getInfo()</title>
		<body>The `effectivePredicate` part of `HiveSlit.getInfo()` is meaningless as `TupleDomain` does not provide `toString()` method. Only `toString(ConnectorSession)` method.  We should either: - create standard `toString()` in `TupleDomain` - pass session arg to `getInfo` - drop `effectivePredicate` from getInfo alltogether </body>
		<created>2016-09-29 10:46:48</created>
		<closed>2017-06-03 20:24:27</closed>
	</bug>
	<bug>
		<id>6215</id>
		<title>Planning error for correlated queries over Hive connector</title>
		<body>Running the following query as part of TestHiveDistributedQueries fails with a planning error. It seems to happen during partition pruning.  ``` sql SELECT count(*)  FROM orders o  WHERE EXISTS (     SELECT avg(l.orderkey)      FROM lineitem l      WHERE o.orderkey = l.orderkey      GROUP BY l.linenumber) ```  ``` java.lang.IllegalArgumentException: Missing column assignment for orderkey      at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.sql.planner.LookupSymbolResolver.getValue(LookupSymbolResolver.java:44)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitSymbolReference(ExpressionInterpreter.java:430)     at com.facebook.presto.sql.tree.SymbolReference.accept(SymbolReference.java:38)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitComparisonExpression(ExpressionInterpreter.java:744)     at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:133)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:254)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.shouldPrune(AddExchanges.java:659)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.lambda$planTableScan$4(AddExchanges.java:572)     at com.facebook.presto.hive.HiveMetadata.lambda$getTableLayouts$5(HiveMetadata.java:1034)     at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.hive.HiveMetadata.getTableLayouts(HiveMetadata.java:1035)     at com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata.getTableLayouts(ClassLoaderSafeConnectorMetadata.java:67)     at com.facebook.presto.metadata.MetadataManager.getLayouts(MetadataManager.java:337)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planTableScan(AddExchanges.java:570)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitFilter(AddExchanges.java:513)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitFilter(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:223)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:268)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:204)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitLimit(AddExchanges.java:477)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitLimit(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.LimitNode.accept(LimitNode.java:86)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:223)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:268)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:204)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:223)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitEnforceSingleRow(AddExchanges.java:243)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitEnforceSingleRow(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.EnforceSingleRowNode.accept(EnforceSingleRowNode.java:64)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitApply(AddExchanges.java:1140)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitApply(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.ApplyNode.accept(ApplyNode.java:96)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitFilter(AddExchanges.java:516)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitFilter(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:268)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:204)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1152)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:229)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:182)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:144)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:116)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:107)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:291)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:270)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:228)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-09-28 17:47:29</created>
		<closed>2016-09-28 21:53:07</closed>
	</bug>
	<bug>
		<id>6196</id>
		<title>Deadlock in task info fetching</title>
		<body>Hit this one in production. Suddenly all queries get queued and all clients start timing out. [Here](https://gist.githubusercontent.com/nezihyigitbasi/108b844625d69de66bd8d74e427ea876/raw/c22dc663517fa991b87c162de2b387c0e8af0d69/presto-stack) is the full stack trace.  ``` Found one Java-level deadlock: ============================= "http-worker-2010473":   waiting to lock monitor 0x00007f8fed4a6fb8 (object 0x00007f9615a7e020, a com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup),   which is held by "ResourceGroupManager" "ResourceGroupManager":   waiting to lock monitor 0x00007f91f0cc3598 (object 0x00007f9a9f000a48, a com.facebook.presto.execution.SqlStageExecution),   which is held by "HttpRemoteTask-20160926_222904_08073_w6q27.1.105-2010288" "HttpRemoteTask-20160926_222904_08073_w6q27.1.105-2010288":   waiting to lock monitor 0x00007f90ed8c3ee8 (object 0x00007f9a9f000870, a com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher),   which is held by "ContinuousTaskStatusFetcher-20160926_222904_08073_w6q27.1.105-2009564" "ContinuousTaskStatusFetcher-20160926_222904_08073_w6q27.1.105-2009564":   waiting to lock monitor 0x00007f910c0b5948 (object 0x00007f9a9f0008e0, a com.facebook.presto.server.remotetask.HttpRemoteTask),   which is held by "HttpRemoteTask-20160926_222904_08073_w6q27.1.105-2010288"  Java stack information for the threads listed above: =================================================== "http-worker-2010473":     at com.facebook.presto.execution.resourceGroups.ResourceGroup.run(ResourceGroup.java:322)     - waiting to lock &lt;0x00007f9615a7e020&gt; (a com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup)     at com.facebook.presto.execution.resourceGroups.ResourceGroupManager.submit(ResourceGroupManager.java:89)     at com.facebook.presto.execution.SqlQueryManager.createQuery(SqlQueryManager.java:348)     at com.facebook.presto.server.StatementResource$Query.&lt;init&gt;(StatementResource.java:308)     at com.facebook.presto.server.StatementResource.createQuery(StatementResource.java:171)     at sun.reflect.GeneratedMethodAccessor1181.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:396)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1176)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1106)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:314)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) "ResourceGroupManager":     at com.facebook.presto.execution.SqlStageExecution.getMemoryReservation(SqlStageExecution.java:184)     - waiting to lock &lt;0x00007f9a9f000a48&gt; (a com.facebook.presto.execution.SqlStageExecution)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler$$Lambda$792/605126606.applyAsLong(Unknown Source)     at java.util.stream.ReferencePipeline$5$1.accept(ReferencePipeline.java:227)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.LongPipeline.reduce(LongPipeline.java:438)     at java.util.stream.LongPipeline.sum(LongPipeline.java:396)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler.getTotalMemoryReservation(SqlQueryScheduler.java:310)     at com.facebook.presto.execution.SqlQueryExecution.getTotalMemoryReservation(SqlQueryExecution.java:188)     at com.facebook.presto.execution.resourceGroups.ResourceGroup.internalRefreshStats(ResourceGroup.java:438)     - locked &lt;0x00007f9615a7e020&gt; (a com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup)     at com.facebook.presto.execution.resourceGroups.ResourceGroup.internalRefreshStats(ResourceGroup.java:445)     - locked &lt;0x00007f9615a7e020&gt; (a com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup)     at com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup.processQueuedQueries(ResourceGroup.java:580)     - locked &lt;0x00007f9615a7e020&gt; (a com.facebook.presto.execution.resourceGroups.ResourceGroup$RootResourceGroup)     at com.facebook.presto.execution.resourceGroups.ResourceGroupManager.refreshAndStartQueries(ResourceGroupManager.java:110)     at com.facebook.presto.execution.resourceGroups.ResourceGroupManager$$Lambda$140/724736957.run(Unknown Source)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) "HttpRemoteTask-20160926_222904_08073_w6q27.1.105-2010288":     at com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher.updateTaskStatus(ContinuousTaskStatusFetcher.java:214)     - waiting to lock &lt;0x00007f9a9f000870&gt; (a com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher)     at com.facebook.presto.server.remotetask.HttpRemoteTask.abort(HttpRemoteTask.java:560)     - locked &lt;0x00007f9a9f0008e0&gt; (a com.facebook.presto.server.remotetask.HttpRemoteTask)     at com.facebook.presto.server.remotetask.HttpRemoteTask.abort(HttpRemoteTask.java:552)     - locked &lt;0x00007f9a9f0008e0&gt; (a com.facebook.presto.server.remotetask.HttpRemoteTask)     at com.facebook.presto.execution.SqlStageExecution$$Lambda$1037/616866428.accept(Unknown Source)     at java.lang.Iterable.forEach(Iterable.java:75)     at com.facebook.presto.execution.SqlStageExecution.abort(SqlStageExecution.java:179)     - locked &lt;0x00007f9a9f000a48&gt; (a com.facebook.presto.execution.SqlStageExecution)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler$$Lambda$1035/234080167.accept(Unknown Source)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler.abort(SqlQueryScheduler.java:412)     at com.facebook.presto.execution.SqlQueryExecution.lambda$new$0(SqlQueryExecution.java:154)     at com.facebook.presto.execution.SqlQueryExecution$$Lambda$440/1153217709.stateChanged(Unknown Source)     at com.facebook.presto.execution.StateMachine.lambda$fireStateChanged$0(StateMachine.java:225)     at com.facebook.presto.execution.StateMachine$$Lambda$413/743619379.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) "ContinuousTaskStatusFetcher-20160926_222904_08073_w6q27.1.105-2009564":     at com.facebook.presto.server.remotetask.HttpRemoteTask.abort(HttpRemoteTask.java:557)     - waiting to lock &lt;0x00007f9a9f0008e0&gt; (a com.facebook.presto.server.remotetask.HttpRemoteTask)     at com.facebook.presto.server.remotetask.HttpRemoteTask.failTask(HttpRemoteTask.java:621)     at com.facebook.presto.server.remotetask.HttpRemoteTask$$Lambda$817/1647878013.accept(Unknown Source)     at com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher.updateTaskStatus(ContinuousTaskStatusFetcher.java:234)     - locked &lt;0x00007f9a9f000870&gt; (a com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher)     at com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher.success(ContinuousTaskStatusFetcher.java:168)     at com.facebook.presto.server.remotetask.ContinuousTaskStatusFetcher.success(ContinuousTaskStatusFetcher.java:52)     at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:49)     at com.facebook.presto.server.remotetask.SimpleHttpResponseHandler.onSuccess(SimpleHttpResponseHandler.java:27)     at com.google.common.util.concurrent.Futures$6.run(Futures.java:1319)     at io.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:77)     at io.airlift.concurrent.BoundedExecutor$$Lambda$437/311179219.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745)  Found 1 deadlock. ``` </body>
		<created>2016-09-27 01:01:41</created>
		<closed>2016-10-03 19:12:03</closed>
	</bug>
	<bug>
		<id>6191</id>
		<title>Distinct sum aggregation may produce incorrect results for empty grouping sets</title>
		<body>`AbstractTestQueries::testGroupingSetsWithMultipleDistinctAndUnion` fails for some configurations with `task_concurrency` higher then 1:  ``` SELECT linenumber, COUNT(DISTINCT linenumber), SUM(DISTINCT suppkey) FROM (SELECT * FROM lineitem WHERE linenumber%2 = 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 = 1) GROUP BY GROUPING SETS ((linenumber), ()) not equal Actual 8 rows:     [3, 1, 5050]     [null, 7, 30300]     [7, 1, 5050]     [1, 1, 5050]     [4, 1, 5050]     [6, 1, 5050]     [5, 1, 5050]     [2, 1, 5050] Expected 8 rows:     [1, 1, 5050]     [2, 1, 5050]     [3, 1, 5050]     [4, 1, 5050]     [5, 1, 5050]     [6, 1, 5050]     [7, 1, 5050]     [null, 7, 5050] ```  Simplified query:  ``` &gt; set session task_concurrency=8; &gt; SELECT a, SUM(DISTINCT b) FROM (SELECT * FROM (VALUES (0,1), (0,2)) t(a,b) UNION ALL SELECT * FROM (VALUES (1,1), (1,2)) t(a,b)) GROUP BY GROUPING SETS ((a), ());   a   | _col1  ------+-------     0 |     3   NULL |     6      1 |     3  ```  To reproduce this, number of workers must be greater then 1, task_concurrency must be greater then 1, query must contain an empty grouping set AND there must be union AND aggregation function must be sum distinct. It seems like multiple partial aggregations of empty grouping set are incorrectly combined in final aggregation, effectively multiplying  result.  CC @kokosing  </body>
		<created>2016-09-26 14:07:13</created>
		<closed>2016-09-27 18:29:21</closed>
	</bug>
	<bug>
		<id>6177</id>
		<title>try_cast fails with unbound variable exception</title>
		<body>``` presto:tiny&gt; select try_cast('foo' as array&lt;integer&gt;); Query 20160923_154931_00004_72qud failed: Variable is not bound: y java.lang.IllegalStateException: Variable is not bound: y         at com.google.common.base.Preconditions.checkState(Preconditions.java:197)         at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:440)         at com.facebook.presto.metadata.SignatureBinder.lambda$bindVariables$1(SignatureBinder.java:415)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:416)         at com.facebook.presto.metadata.SignatureBinder.bindVariables(SignatureBinder.java:368)         at com.facebook.presto.metadata.SignatureBinder.bind(SignatureBinder.java:61)         at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:835)         at com.facebook.presto.metadata.FunctionRegistry.getCoercion(FunctionRegistry.java:964)         at com.facebook.presto.metadata.FunctionRegistry.getCoercion(FunctionRegistry.java:957)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:861)         at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:226)         at com.facebook.presto.sql.tree.Cast.accept(Cast.java:94) ``` </body>
		<created>2016-09-23 15:55:56</created>
		<closed>2016-10-04 00:41:55</closed>
	</bug>
	<bug>
		<id>6173</id>
		<title>NPE with join on multiple conditions</title>
		<body>``` presto:nyigitbasi&gt; select * from (values(2,2)) a(x,y) join (values(2,2)) b(x,y) on (a.x=b.x, a.y=b.y); Query 20160923_041517_00003_k64q3 failed: null java.lang.NullPointerException         at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:152)         at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:84)         at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.Iterator.forEachRemaining(Iterator.java:116)         at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:75)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:39)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:23)         at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:33)         at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown.optimize(WindowFilterPushDown.java:81)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:116)         at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:107)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:291)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:270)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:228)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ```  Not exactly sure about the difference but this works  ``` presto:nyigitbasi&gt; select * from (values(2,2)) a(x,y) inner join (values(2,2)) b(x,y) on (a.x=b.x and a.y=b.y);  x | y | x | y ---+---+---+---  2 | 2 | 2 | 2 (1 row) ``` </body>
		<created>2016-09-23 04:17:00</created>
		<closed>2016-09-30 01:13:06</closed>
	</bug>
	<bug>
		<id>6101</id>
		<title>Task IDs should sort numerically on Query Details page</title>
		<body>The are currently sorting like this: - 1.0 - 1.1 - 1.10 - 1.11  They should sort like: - 1.0 - 1.1 - 1.2 - ... - 1.10 </body>
		<created>2016-09-12 20:41:28</created>
		<closed>2016-09-19 20:50:12</closed>
	</bug>
	<bug>
		<id>6088</id>
		<title>IndexOutOfBoundsException in jsonArrayGet</title>
		<body>Presto 0.152.1  ``` Query 20160909_195630_19737_xs72x failed: Index: 0, Size: 0 java.lang.IndexOutOfBoundsException: Index: 0, Size: 0     at java.util.LinkedList.checkElementIndex(LinkedList.java:555)     at java.util.LinkedList.get(LinkedList.java:476)     at com.facebook.presto.operator.scalar.JsonFunctions.jsonArrayGet(JsonFunctions.java:332)     at com.facebook.presto.operator.scalar.JsonFunctions.varcharJsonArrayGet(JsonFunctions.java:306)     at com_facebook_presto_$gen_CursorProcessor_18730.filter(Unknown Source)     at com_facebook_presto_$gen_CursorProcessor_18730.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:215)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:378)     at com.facebook.presto.operator.Driver.processFor(Driver.java:301)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-09-09 20:12:20</created>
		<closed>2016-09-12 16:40:35</closed>
	</bug>
	<bug>
		<id>6066</id>
		<title>Incorrect results for GROUPING SETS with multiple () groups</title>
		<body>This query:  ``` sql SELECT count(*)  FROM (VALUES 1, 2, 3) t(x)  WHERE false  GROUP BY GROUPING SETS ((), ()) ```  incorrectly produces no rows. It should produce two rows with "0" in each cell. </body>
		<created>2016-09-07 19:53:43</created>
		<closed>2016-09-22 23:55:09</closed>
	</bug>
	<bug>
		<id>6061</id>
		<title>Bad error message when SELECT * is used in GROUP BY query</title>
		<body>``` sql SELECT * FROM (VALUES (1,1)) t(x,y) GROUP BY x ```  fails with:  ``` Query 20160907_180025_00008_b5xgd failed: ':input(1)' must be an aggregate expression or appear in GROUP BY clause com.facebook.presto.sql.analyzer.SemanticException: ':input(1)' must be an aggregate expression or appear in GROUP BY clause         at com.facebook.presto.sql.analyzer.AggregationAnalyzer.analyze(AggregationAnalyzer.java:133)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.verifyAggregations(StatementAnalyzer.java:1433)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeAggregations(StatementAnalyzer.java:1394)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:655)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:161)         at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:409)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:161)         at com.facebook.presto.sql.tree.Query.accept(Query.java:103)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:62)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:274)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:260)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:224)         at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ```  The correct message should be:  ``` Query 20160907_180138_16338_4xh5v failed: line 1:1: Column 't.y' not in GROUP BY clause ```  This seems to be a regression in a recent version. It doesn't happen in 0.144.7. </body>
		<created>2016-09-07 18:02:44</created>
		<closed>2016-11-09 21:42:52</closed>
	</bug>
	<bug>
		<id>6059</id>
		<title>Incorrect results when cross joining against aggregation over partitioned table</title>
		<body>This query:  ``` sql SELECT * FROM (VALUES 1, 2, 3) t CROSS JOIN (SELECT count(*) FROM table WHERE pk = 'non-existent') u ```  (`pk` is a partition key for `table`)  produces an incorrect plan:  ```  - Output[_col0, _col1] =&gt; [field:bigint, count:bigint]          _col0 := field          _col1 := count      - InnerJoin[] =&gt; [field:bigint, count:bigint]          - Filter[false] =&gt; [field:bigint]              - Values =&gt; [field:bigint]                      (1)                      (2)                      (3)          - Aggregate(FINAL) =&gt; [count:bigint]                  count := "count"("count_235")              - Exchange[GATHER] =&gt; count_235:bigint                  - Aggregate(PARTIAL) =&gt; [count_235:bigint]                          count_235 := "count"(*)                      - TableScan[...] =&gt; []                              :: NONE ```  It seems to be pushing the "false" predicate (due to no matching partitions) up through the aggregation and pushing it down on the left side. </body>
		<created>2016-09-07 16:41:52</created>
		<closed>2016-09-07 20:08:57</closed>
	</bug>
	<bug>
		<id>5994</id>
		<title>Pushdown incorrectly handles expressions that can fail</title>
		<body>``` sql select * from (   select table_name, round(row_count / shard_count) rps   from system.table_stats   where table_schema = 'xxx' and shard_count &gt;= 5000) ) where rps &lt;= 10000; ```  ``` com.facebook.presto.spi.PrestoException: / by zero     at com.facebook.presto.type.BigintOperators.divide(BigintOperators.java:101)     at com_facebook_presto_$gen_PageProcessor_130.filter(Unknown Source)     at com_facebook_presto_$gen_PageProcessor_130.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:260)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:378)     at com.facebook.presto.operator.Driver.processFor(Driver.java:301)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:622)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.ArithmeticException: / by zero     at com.facebook.presto.type.BigintOperators.divide(BigintOperators.java:98)     ... 11 more ``` </body>
		<created>2016-08-30 20:53:56</created>
		<closed>2016-08-30 21:02:12</closed>
	</bug>
	<bug>
		<id>5991</id>
		<title>Window functions cannot be used in some scalar expressions</title>
		<body>``` SELECT     100.0 * sum(x) OVER() / sum(x) OVER(),     sum(x) OVER() FROM (VALUES (1)) t(x) ```  ``` Query 20160830_174122_00896_w2gwn failed: sum(bigint):bigint is not a scalar function java.lang.IllegalArgumentException: sum(bigint):bigint is not a scalar function     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:805)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:897)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:96)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:243)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:156)     at com.google.common.collect.Maps$7.transformEntry(Maps.java:1812)     at com.google.common.collect.Maps$10.getValue(Maps.java:1857)     at com.google.common.collect.RegularImmutableMap.&lt;init&gt;(RegularImmutableMap.java:87)     at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:294)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:110)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:96)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:109)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:88)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:85)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$0(SimplePlanRewriter.java:74) ``` </body>
		<created>2016-08-30 17:43:34</created>
		<closed>2016-09-28 22:20:58</closed>
	</bug>
	<bug>
		<id>5980</id>
		<title>Presto stats planning time is including queueing time</title>
		<body>I noticed this when Presto was reporting super long planning times, but it looks like this was just because the queues are really full. </body>
		<created>2016-08-26 23:43:37</created>
		<closed>2016-09-20 21:38:24</closed>
	</bug>
	<bug>
		<id>5977</id>
		<title>UI error on detail page when outputStage is null</title>
		<body>``` Uncaught TypeError: Cannot read property 'id' of undefined &lt;td className="stage-id"&gt;{ stage.plan.id }&lt;/td&gt; ``` </body>
		<created>2016-08-26 22:06:56</created>
		<closed>2016-09-02 15:22:04</closed>
	</bug>
	<bug>
		<id>5971</id>
		<title>UI active worker count is incorrect</title>
		<body>The coordinator should not be included as a "worker" unless `node-scheduler.include-coordinator` is true. </body>
		<created>2016-08-26 20:13:46</created>
		<closed>2016-10-10 22:56:28</closed>
	</bug>
	<bug>
		<id>5970</id>
		<title>NPE in Raptor ShardCompactionManager</title>
		<body>``` 2016-08-26T11:55:57.107-0700    ERROR   shard-compaction-discovery      com.facebook.presto.raptor.storage.organization.ShardCompactionManager  Error discovering shards to compact java.lang.NullPointerException         at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)         at com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(ImmutableCollection.java:339)         at com.google.common.collect.ImmutableList$Builder.add(ImmutableList.java:652)         at com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil.getShardRange(ShardOrganizerUtil.java:231)         at com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil.toShardIndexInfo(ShardOrganizerUtil.java:118)         at com.facebook.presto.raptor.storage.organization.ShardCompactionManager.filterAndCreateCompactionSets(ShardCompactionManager.java:199)         at com.facebook.presto.raptor.storage.organization.ShardCompactionManager.discoverShards(ShardCompactionManager.java:174)         at com.facebook.presto.raptor.storage.organization.ShardCompactionManager.lambda$startDiscovery$0(ShardCompactionManager.java:151)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-08-26 18:57:30</created>
		<closed>2016-11-05 01:15:57</closed>
	</bug>
	<bug>
		<id>5926</id>
		<title>InterleavedBlock.getRegion does not update sizeInBytes</title>
		<body>When transporting pages between machines, `PageSplitterUtil` breaks pages up into smaller units to reduce buffer requirements.  The logic is pretty simple, repeatably split into two pages using `getRegion` util the pages are smaller than a limit.  This does not work with the new `InterleavedBlock` code because `getRegion` does not return a block with an updated `sizeInBytes`.  The means that if we encounter a page with a large `InterleavedBlock`, we move the data one row at a time. </body>
		<created>2016-08-23 00:21:32</created>
		<closed>2016-09-01 17:30:59</closed>
	</bug>
	<bug>
		<id>5894</id>
		<title>Large negative timestamps produce invalid result</title>
		<body>``` presto&gt; select from_unixtime(-pow(2, 54)); Query 20160818_221137_21727_4xh5v failed: Unable to create class com.facebook.presto.execution.TaskInfo from JSON response: io.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest     at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:162)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)     at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)     at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)     at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96)     at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71)     at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:94)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:399)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1162)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) Caused by: com.fasterxml.jackson.databind.JsonMappingException: line 1:1: Invalid numeric literal: 9223372036854775808 (through reference chain: java.util.LinkedHashMap["from_unixtime"])     at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:210)     at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:177)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.wrapAndThrow(MapDeserializer.java:566)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:420)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:323)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:98)     at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:18)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3038)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:1691)     at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:149)     ... 57 more Caused by: com.facebook.presto.sql.parser.ParsingException: line 1:1: Invalid numeric literal: 9223372036854775808     at com.facebook.presto.sql.tree.LongLiteral.&lt;init&gt;(LongLiteral.java:45)     at com.facebook.presto.sql.tree.LongLiteral.&lt;init&gt;(LongLiteral.java:34)     at com.facebook.presto.sql.parser.AstBuilder.visitIntegerLiteral(AstBuilder.java:1217)     at com.facebook.presto.sql.parser.AstBuilder.visitIntegerLiteral(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$IntegerLiteralContext.accept(SqlBaseParser.java:9353)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitNumericLiteral(SqlBaseBaseVisitor.java:762)     at com.facebook.presto.sql.parser.SqlBaseParser$NumericLiteralContext.accept(SqlBaseParser.java:6415)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitValueExpressionDefault(SqlBaseBaseVisitor.java:573)     at com.facebook.presto.sql.parser.SqlBaseParser$ValueExpressionDefaultContext.accept(SqlBaseParser.java:5532)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitArithmeticUnary(AstBuilder.java:883)     at com.facebook.presto.sql.parser.AstBuilder.visitArithmeticUnary(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$ArithmeticUnaryContext.accept(SqlBaseParser.java:5609)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:768)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$PredicatedContext.accept(SqlBaseParser.java:5103)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitBooleanDefault(SqlBaseBaseVisitor.java:496)     at com.facebook.presto.sql.parser.SqlBaseParser$BooleanDefaultContext.accept(SqlBaseParser.java:4809)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitExpression(SqlBaseBaseVisitor.java:482)     at com.facebook.presto.sql.parser.SqlBaseParser$ExpressionContext.accept(SqlBaseParser.java:4737)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.parser.AstBuilder.visit(AstBuilder.java:1296)     at com.facebook.presto.sql.parser.AstBuilder.visitFunctionCall(AstBuilder.java:1104)     at com.facebook.presto.sql.parser.AstBuilder.visitFunctionCall(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$FunctionCallContext.accept(SqlBaseParser.java:6301)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitValueExpressionDefault(SqlBaseBaseVisitor.java:573)     at com.facebook.presto.sql.parser.SqlBaseParser$ValueExpressionDefaultContext.accept(SqlBaseParser.java:5532)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:768)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$PredicatedContext.accept(SqlBaseParser.java:5103)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitBooleanDefault(SqlBaseBaseVisitor.java:496)     at com.facebook.presto.sql.parser.SqlBaseParser$BooleanDefaultContext.accept(SqlBaseParser.java:4809)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitExpression(SqlBaseBaseVisitor.java:482)     at com.facebook.presto.sql.parser.SqlBaseParser$ExpressionContext.accept(SqlBaseParser.java:4737)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitSingleExpression(AstBuilder.java:163)     at com.facebook.presto.sql.parser.AstBuilder.visitSingleExpression(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$SingleExpressionContext.accept(SqlBaseParser.java:258)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.SqlParser.invokeParser(SqlParser.java:103)     at com.facebook.presto.sql.parser.SqlParser.createExpression(SqlParser.java:70)     at com.facebook.presto.sql.Serialization$ExpressionDeserializer.deserialize(Serialization.java:60)     at com.facebook.presto.sql.Serialization$ExpressionDeserializer.deserialize(Serialization.java:45)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:404)     ... 92 more  java.lang.IllegalArgumentException: Unable to create class com.facebook.presto.execution.TaskInfo from JSON response: io.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest     at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:162)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74)     at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)     at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)     at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)     at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)     at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96)     at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71)     at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:94)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:399)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1162)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) Caused by: com.fasterxml.jackson.databind.JsonMappingException: line 1:1: Invalid numeric literal: 9223372036854775808 (through reference chain: java.util.LinkedHashMap["from_unixtime"])     at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:210)     at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:177)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.wrapAndThrow(MapDeserializer.java:566)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:420)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:323)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:98)     at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:18)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3038)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:1691)     at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:149)     ... 57 more Caused by: com.facebook.presto.sql.parser.ParsingException: line 1:1: Invalid numeric literal: 9223372036854775808     at com.facebook.presto.sql.tree.LongLiteral.&lt;init&gt;(LongLiteral.java:45)     at com.facebook.presto.sql.tree.LongLiteral.&lt;init&gt;(LongLiteral.java:34)     at com.facebook.presto.sql.parser.AstBuilder.visitIntegerLiteral(AstBuilder.java:1217)     at com.facebook.presto.sql.parser.AstBuilder.visitIntegerLiteral(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$IntegerLiteralContext.accept(SqlBaseParser.java:9353)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitNumericLiteral(SqlBaseBaseVisitor.java:762)     at com.facebook.presto.sql.parser.SqlBaseParser$NumericLiteralContext.accept(SqlBaseParser.java:6415)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitValueExpressionDefault(SqlBaseBaseVisitor.java:573)     at com.facebook.presto.sql.parser.SqlBaseParser$ValueExpressionDefaultContext.accept(SqlBaseParser.java:5532)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitArithmeticUnary(AstBuilder.java:883)     at com.facebook.presto.sql.parser.AstBuilder.visitArithmeticUnary(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$ArithmeticUnaryContext.accept(SqlBaseParser.java:5609)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:768)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$PredicatedContext.accept(SqlBaseParser.java:5103)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitBooleanDefault(SqlBaseBaseVisitor.java:496)     at com.facebook.presto.sql.parser.SqlBaseParser$BooleanDefaultContext.accept(SqlBaseParser.java:4809)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitExpression(SqlBaseBaseVisitor.java:482)     at com.facebook.presto.sql.parser.SqlBaseParser$ExpressionContext.accept(SqlBaseParser.java:4737)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.parser.AstBuilder.visit(AstBuilder.java:1296)     at com.facebook.presto.sql.parser.AstBuilder.visitFunctionCall(AstBuilder.java:1104)     at com.facebook.presto.sql.parser.AstBuilder.visitFunctionCall(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$FunctionCallContext.accept(SqlBaseParser.java:6301)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitValueExpressionDefault(SqlBaseBaseVisitor.java:573)     at com.facebook.presto.sql.parser.SqlBaseParser$ValueExpressionDefaultContext.accept(SqlBaseParser.java:5532)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:768)     at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$PredicatedContext.accept(SqlBaseParser.java:5103)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitBooleanDefault(SqlBaseBaseVisitor.java:496)     at com.facebook.presto.sql.parser.SqlBaseParser$BooleanDefaultContext.accept(SqlBaseParser.java:4809)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)     at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitExpression(SqlBaseBaseVisitor.java:482)     at com.facebook.presto.sql.parser.SqlBaseParser$ExpressionContext.accept(SqlBaseParser.java:4737)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.AstBuilder.visitSingleExpression(AstBuilder.java:163)     at com.facebook.presto.sql.parser.AstBuilder.visitSingleExpression(AstBuilder.java:151)     at com.facebook.presto.sql.parser.SqlBaseParser$SingleExpressionContext.accept(SqlBaseParser.java:258)     at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)     at com.facebook.presto.sql.parser.SqlParser.invokeParser(SqlParser.java:103)     at com.facebook.presto.sql.parser.SqlParser.createExpression(SqlParser.java:70)     at com.facebook.presto.sql.Serialization$ExpressionDeserializer.deserialize(Serialization.java:60)     at com.facebook.presto.sql.Serialization$ExpressionDeserializer.deserialize(Serialization.java:45)     at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:404)     ... 92 more      at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:119)     at io.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:66)     at io.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:35)     at io.airlift.http.client.jetty.JettyHttpClient$JettyResponseFuture.processResponse(JettyHttpClient.java:797)     at io.airlift.http.client.jetty.JettyHttpClient$JettyResponseFuture.completed(JettyHttpClient.java:774)     at io.airlift.http.client.jetty.JettyHttpClient$BufferingResponseListener.onComplete(JettyHttpClient.java:1053)     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193)     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185)     at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:456)     at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:403)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:268)     at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1548)     at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1281)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:158)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:119)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:69)     at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:90)     at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:114)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalArgumentException: Invalid [simple type, class com.facebook.presto.execution.TaskInfo] json bytes     at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:174)     at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:116)     ... 23 more Caused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'io': was expecting ('true', 'false' or 'null')  at [Source: [B@53a5ff2e; line: 1, column: 4]     at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1419)     at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:508)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(UTF8StreamJsonParser.java:3201)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2360)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:794)     at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:690)     at com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:3105)     at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3051)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2262)     at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:171)     ... 24 more ``` </body>
		<created>2016-08-18 22:12:59</created>
		<closed>2016-09-01 18:39:09</closed>
	</bug>
	<bug>
		<id>5855</id>
		<title>mongodb collection name contains dot. raise Invalid schemaTableName Error</title>
		<body>Hi, My mongodb collection name contains dot, `desc table` is ok. `select * from` will raise a `Invalid schemaTableName Error`  ``` presto&gt; desc mgo.actionlog."activity.get_coupon";   Column   |   Type    | Comment -----------+-----------+---------  account   | varchar   |  telephone | varchar   |  ch_id     | varchar   |  activity  | varchar   |  time      | timestamp | (5 rows)  Query 20160815_104043_06592_7mxj2, FINISHED, 1 node Splits: 2 total, 2 done (100.00%) 0:00 [5 rows, 380B] [15 rows/s, 1.11KB/s] ```  backtrace detail:  ``` presto&gt; select * from mgo.actionlog."activity.get_coupon" limit 10;  Query 20160815_104226_06595_7mxj2, FAILED, 2 nodes Splits: 1 total, 0 done (0.00%) 0:00 [0 rows, 0B] [0 rows/s, 0B/s]  Query 20160815_104226_06595_7mxj2 failed: Unable to create class com.facebook.presto.execution.TaskInfo from JSON response: io.airlift.jaxrs.JsonMapperParsingException: Invalid json for Java type com.facebook.presto.server.TaskUpdateRequest         at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:162)         at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)         at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)         at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)         at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundReadFrom(MappableExceptionWrapperInterceptor.java:74)         at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)         at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)         at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)         at org.glassfish.jersey.server.ContainerRequest.readEntity(ContainerRequest.java:271)         at org.glassfish.jersey.server.internal.inject.EntityParamValueFactoryProvider$EntityValueFactory.provide(EntityParamValueFactoryProvider.java:96)         at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71)         at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:94)         at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127)         at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)         at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:267)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)         at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)         at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)         at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)         at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)         at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:397)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)         at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)         at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)         at org.eclipse.jetty.server.Server.handle(Server.java:524)         at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:319)         at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)         at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)         at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)         at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)         at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)         at java.lang.Thread.run(Thread.java:745) Caused by: com.fasterxml.jackson.databind.JsonMappingException: Instantiation of [simple type, class com.facebook.presto.spi.SchemaTableName] value failed: Invalid schemaTableName actionlog.activity.get_coupon         at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapException(StdValueInstantiator.java:405)         at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:284)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1141)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:135)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:156)         at com.facebook.presto.metadata.AbstractTypedJacksonModule$InternalTypeDeserializer.deserialize(AbstractTypedJacksonModule.java:82)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)         at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:156)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:126)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)         at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:84)         at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:132)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:536)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)         at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:98)         at com.fasterxml.jackson.datatype.jdk8.OptionalDeserializer.deserialize(OptionalDeserializer.java:18)         at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:538)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:344)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)         at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)         at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3038)         at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:1691)         at io.airlift.jaxrs.JsonMapper.readFrom(JsonMapper.java:149)         ... 60 more Caused by: java.lang.IllegalArgumentException: Invalid schemaTableName actionlog.activity.get_coupon         at com.facebook.presto.spi.SchemaTableName.valueOf(SchemaTableName.java:35)         at sun.reflect.GeneratedMethodAccessor301.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at com.fasterxml.jackson.databind.introspect.AnnotatedMethod.call1(AnnotatedMethod.java:125)         at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:282)         ... 111 more ``` </body>
		<created>2016-08-15 10:51:05</created>
		<closed>2017-07-04 04:07:07</closed>
	</bug>
	<bug>
		<id>5834</id>
		<title>Setting task_writer_count to non power of two can cause partitionCount must be a power of 2</title>
		<body>This might happen when there is union and table writer in one pipeline:  ``` set session redistribute_writes=false; set session task_writer_count=24; CREATE TABLE blackhole.default.test AS (SELECT * FROM tpch.sf1.nation UNION SELECT * FROM tpch.sf1.nation); ``` </body>
		<created>2016-08-10 14:44:49</created>
		<closed>2016-11-09 23:55:14</closed>
	</bug>
	<bug>
		<id>5802</id>
		<title>java.lang.VerifyError with a query</title>
		<body>Below query fails with a `java.lang.VerifyError: Bad type on operand stack` with master build (9db10aa)  ``` Sql select a.orderkey from (             (select orderkey from tpch.sf100.lineitem limit 100) a              join              (select orderkey from tpch.sf100.lineitem limit 100) b              on a.orderkey ); ``` </body>
		<created>2016-08-05 17:38:41</created>
		<closed>2016-09-30 17:24:02</closed>
	</bug>
	<bug>
		<id>5798</id>
		<title>Aggregation on double column may return nondeterministic results</title>
		<body>Let:  ``` CREATE OR REPLACE VIEW revenue AS   SELECT     l_suppkey as supplier_no,     sum(l_extendedprice * (1 - l_discount)) as total_revenue   FROM     lineitem   WHERE     l_shipdate &gt;= DATE '1996-01-01'     AND l_shipdate &lt; DATE '1996-01-01' + INTERVAL '3' MONTH GROUP BY   l_suppkey; ```  then the below query returns 0 or 1 depending on internal query tasks execution order. While `0` is an incorrect result for below query.  ``` SELECT   count(*) FROM   revenue WHERE   total_revenue = (SELECT max(total_revenue) FROM revenue) ```  IMO it could be acceptable that aggregation on double can have slight result error, but non deterministic error for the same query on the same input is unacceptable.  Solving this issue will make TPC-H query 15 to pass.  My intuition tells that different execution order of tasks for aggregate FINAL and PARTIAL may produce different results.  One way to solve above query is to make Presto to populate VIEW only once per query and the redistribute results to all the stages (operators) which are reading that view. In that way query should be executed much faster. Such approach requires deeper analysis as it is possibility it may lead query to deadlock  </body>
		<created>2016-08-05 08:25:25</created>
		<closed>2016-08-08 10:05:43</closed>
	</bug>
	<bug>
		<id>5797</id>
		<title>Fix SHOW CREATE TABLE for Raptor</title>
		<body>`RaptorMetadata.getTableMetadata()` does not include table properties, so`SHOW CREATE TABLE` does not include them.  We want to make as few database calls as possible. These are the properties we need: - `ordering`: could be added to `TableColumn` - `temporal_column`: could be added to `TableColumn` - `bucket_count`: already in `RaptorTableHandle` - `bucketed_on`: could be added to `TableColumn` - `distribution_name`: could be added to `RaptorTableHandle` along with `distributionId` (seems ugly to put it in the handle, but the handle already has the schema/table name just for this metadata call) </body>
		<created>2016-08-05 05:31:51</created>
		<closed>2016-09-01 01:45:41</closed>
	</bug>
	<bug>
		<id>5775</id>
		<title>Integer to Decimal casts fails with large scale</title>
		<body>``` presto&gt; select cast(1 as decimal(38,30));               _col0                ----------------------------------  0.000000000009223372036854775807  (1 row) ```  Issue is caused by this code:  ```     static {         for (int i = 0; i &lt; LONG_POWERS_OF_TEN.length; ++i) {             LONG_POWERS_OF_TEN[i] = round(pow(10, i));             BIG_INTEGER_POWERS_OF_TEN[i] = TEN.pow(i);         }     } ```  when `pow(10, i)` exceeds `Long.MAX_VALUE`  CC @sopel39  </body>
		<created>2016-08-01 11:27:55</created>
		<closed>2016-08-26 06:19:46</closed>
	</bug>
	<bug>
		<id>5762</id>
		<title>Raptor - connection leak </title>
		<body>When using MySQL as backend there is a connection leak:  ``` 2016-07-28T14:32:56.300Z        WARN    HikariPool-1 housekeeper        com.zaxxer.hikari.pool.ProxyLeakTask    Connection leak detection triggered for com.mysql.jdbc.JDBC4Connection@7ef9c8a5, stack trace follows java.lang.Exception: Apparent connection leak detected         at org.skife.jdbi.v2.DBI.open(DBI.java:212)         at com.facebook.presto.raptor.metadata.ShardIterator.&lt;init&gt;(ShardIterator.java:87)         at com.facebook.presto.raptor.metadata.DatabaseShardManager.getShardNodes(DatabaseShardManager.java:460)         at com.facebook.presto.raptor.RaptorSplitManager$RaptorSplitSource.&lt;init&gt;(RaptorSplitManager.java:164)         at com.facebook.presto.raptor.RaptorSplitManager.getSplits(RaptorSplitManager.java:107)         at com.facebook.presto.split.SplitManager.getSplits(SplitManager.java:45)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitTableScan(DistributedExecutionPlanner.java:112)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitTableScan(DistributedExecutionPlanner.java:92)         at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitProject(DistributedExecutionPlanner.java:228)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitProject(DistributedExecutionPlanner.java:92)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:78)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:83)         at com.facebook.presto.execution.SqlQueryExecution.planDistribution(SqlQueryExecution.java:303)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:226)         at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745)  ```  I guess that the following code from ShardIterator.java should be catching Exception not SqlException  ```         try {             connection = dbi.open().getConnection();             statement = connection.prepareStatement(sql);             enableStreamingResults(statement);             predicate.bind(statement);             log.debug("Running query: %s", statement);             resultSet = statement.executeQuery();         }         catch (SQLException e) {             close();             throw metadataError(e);         } ``` </body>
		<created>2016-07-28 17:15:05</created>
		<closed>2016-08-10 20:59:11</closed>
	</bug>
	<bug>
		<id>5752</id>
		<title>PostgreSQL connector: ERROR: stack depth limit exceeded</title>
		<body>The `TestPostgreSqlDistributedQueries#testLargeIn` test for PostgreSQL connector is failing,  since 0.149 or ealier.  The error was not caught by the CI build because of `TestPostgreSqlDistributedQueries.java` being excluded in postgresql connector pom (which maybe is another issue?).  I am going to disable this test with a link to this issue, so that people don't need to re-verify this failure again and again.  ---  How to reproduce:  ``` git checkout 0.149    #the oldest commit I've reproduced it for so far ./mvnw clean install -T C1 -pl '!presto-docs,!presto-server-rpm' -DskipTests=true -Dair.check.skip-all=true -Dmaven.javadoc.skip=true ./mvnw clean test -pl presto-postgresql -Dtest=com.facebook.presto.plugin.postgresql.TestPostgreSqlDistributedQueries#testLargeIn ```  The relevant part of the output should be:  ``` Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 34.96 sec &lt;&lt;&lt; FAILURE! testLargeIn(com.facebook.presto.plugin.postgresql.TestPostgreSqlDistributedQueries)  Time elapsed: 15.478 sec  &lt;&lt;&lt; FAILURE! com.facebook.presto.client.FailureInfo$FailureException: org.postgresql.util.PSQLException: ERROR: stack depth limit exceeded   Hint: Increase the configuration parameter "max_stack_depth" (currently 2048kB), after ensuring the platform's stack depth limit is adequate.         at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2198)         at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1927)         at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)         at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:561)         at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:419)         at org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:304)         at com.facebook.presto.plugin.jdbc.JdbcRecordCursor.&lt;init&gt;(JdbcRecordCursor.java:74)         at com.facebook.presto.plugin.jdbc.JdbcRecordSet.cursor(JdbcRecordSet.java:56)         at com.facebook.presto.spi.RecordPageSource.&lt;init&gt;(RecordPageSource.java:37)         at com.facebook.presto.split.RecordPageSourceProvider.createPageSource(RecordPageSourceProvider.java:42)         at com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:48)         at com.facebook.presto.operator.ScanFilterAndProjectOperator.createSourceIfNecessary(ScanFilterAndProjectOperator.java:292)         at com.facebook.presto.operator.ScanFilterAndProjectOperator.isFinished(ScanFilterAndProjectOperator.java:180)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:375)         at com.facebook.presto.operator.Driver.processFor(Driver.java:301)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:618)         at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)         at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745)   Results :  Failed tests:     » Failure org.postgresql.util.PSQLException: ERROR: stack depth limit exceede...  Tests run: 1, Failures: 1, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 46.695 s [INFO] Finished at: 2016-07-26T13:32:05+02:00 [INFO] Final Memory: 105M/941M [INFO] ------------------------------------------------------------------------ ``` </body>
		<created>2016-07-26 11:44:02</created>
		<closed>2018-02-13 09:27:22</closed>
	</bug>
	<bug>
		<id>5735</id>
		<title>OperatorContext is not ThreadSafe</title>
		<body>Contrary to the misleading `@ThreadSafe` annotation and usage of `AtomicLong` everywhere in it `OperatorContext` is not ThreadSafe. I have stumbled on it while implementing some things related to spilling https://github.com/prestodb/presto/pull/5142 and revocable memory https://github.com/prestodb/presto/pull/5711  There is at least problem with `setMemoryReservation`, `trySetMemoryReservation` methods and `transferMemoryToTaskContext`:  ```     private final AtomicLong memoryReservation = new AtomicLong();     (...)         public void setMemoryReservation(long newMemoryReservation)     {         checkArgument(newMemoryReservation &gt;= 0, "newMemoryReservation is negative");          long delta = newMemoryReservation - memoryReservation.get();          if (delta &gt; 0) {             reserveMemory(delta);         }         else {             freeMemory(-delta);         }     } ```  Example scenario. `memoryReservation` equals to `10`.  1. caller A initiate `setMemoryReservation(3)`. 2. A thread calculates `delta = -7` and hangs. 3. caller B changes memory reservation by calling `setMemoryReservation(3)` which finishes before A thread resumes work. This give us `memoryReservation = 3`. 4. A thread resumes work. `freeMemory(7)` is executed. 5. we end up with `memoryReservation = -4` which crashes query.  This bug(s) might haven't shown up so far, because this class is mostly (only ?) used by single driver's thread. I'm not familiar with this part of code and I don't feel whether synchronization here is costly but I would be inclined to drop all `AtomicLongs` here and switch to `synchronized` methods. It would be safer and since `OperatorContext` calls should be rare I don't expect it would have negative performance impact.  CC: @cberner @sopel39  </body>
		<created>2016-07-22 07:34:56</created>
		<closed>2016-08-26 05:49:02</closed>
	</bug>
	<bug>
		<id>5671</id>
		<title>VARCHAR(n) and var-args functions</title>
		<body>The following queries fails.  ``` SELECT * FROM (   SELECT concat (t.x, t.z) cc from (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) t(x, z)   ) t   JOIN (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) u(x, z)     WHERE z='c' --split_part('b.c', '.', 2)   ) u   ON t.z = u.z ) WHERE   cc = 'ac'; ```  ``` SELECT * FROM (   SELECT greatest (t.x, t.z) cc from (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) t(x, z)   ) t   JOIN (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) u(x, z)     WHERE z='c' --split_part('b.c', '.', 2)   ) u   ON t.z = u.z ) WHERE   cc = 'c'; ```  ``` SELECT * FROM (   SELECT least (t.x, t.z) cc from (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) t(x, z)   ) t   JOIN (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) u(x, z)     WHERE z='c' --split_part('b.c', '.', 2)   ) u   ON t.z = u.z ) WHERE   cc = 'a'; ```  ``` SELECT * FROM (   SELECT array[t.x, t.z] cc from (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) t(x, z)   ) t   JOIN (     SELECT *     FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) u(x, z)     WHERE z='c' --split_part('b.c', '.', 2)   ) u   ON t.z = u.z ) WHERE   cc = array['a', 'c']; ```  Stacktrace:  ``` com.facebook.presto.spi.PrestoException: array_constructor(varchar,varchar(1)):array(varchar) not found         at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:852)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:145)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:70)         at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.lambda$visitCall$3(ExpressionOptimizer.java:150)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.Iterator.forEachRemaining(Iterator.java:116)         at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:151)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:70)         at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.lambda$visitCall$2(ExpressionOptimizer.java:140)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.Iterator.forEachRemaining(Iterator.java:116)         at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:141)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:70)         at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88)         at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer.optimize(ExpressionOptimizer.java:67)         at com.facebook.presto.sql.relational.SqlToRowExpressionTranslator.translate(SqlToRowExpressionTranslator.java:141)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.toRowExpression(LocalExecutionPlanner.java:1100)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1002)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:933)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:525)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.createNestedLoopJoin(LocalExecutionPlanner.java:1418)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:1399)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitJoin(LocalExecutionPlanner.java:525)         at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:170)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:973)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:933)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:525)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:564)         at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:525)         at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)         at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:340)         at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:279)         at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:161)         at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:120)         at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:74)         at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:313)         at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:323)         at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:125)         at sun.reflect.GeneratedMethodAccessor779.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)         at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)         at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:267)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)         at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)         at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)         at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)         at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)         at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:397)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1182)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)         at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)         at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)         at org.eclipse.jetty.server.Server.handle(Server.java:524)         at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:319)         at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)         at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)         at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)         at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)         at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)         at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)         at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-07-15 01:42:29</created>
		<closed>2016-08-04 22:30:04</closed>
	</bug>
	<bug>
		<id>5659</id>
		<title>Missing repartitioning step breaks window function results. </title>
		<body>We found a weird window function behavior when a query involves multiple window functions and self join. Here is how to reproduce this problem (in Presto 0.146):  ``` -- OK query  presto:&gt; explain WITH X AS( SELECT id, rank() over(partition BY id) AS ranking FROM kw_sequences ), Y AS ( SELECT b.id, a.ranking FROM X a JOIN X b ON a.id = b.id ) SELECT id, rank() over(partition BY id ORDER BY ranking) FROM Y;                                                                    Query Plan ------------------------------------------------------------------------------------------------------------------------------------------------  - Output[id, _col1] =&gt; [id_11:varchar, rank_40:bigint]          id := id_11          _col1 := rank_40      - Exchange[GATHER] =&gt; id_11:varchar, rank_40:bigint          - Project =&gt; [id_11:varchar, rank_40:bigint]              - Window[partition by (id_11), order by (rank)] =&gt; [id_11:varchar, rank:bigint, $hashvalue:bigint, rank_40:bigint]                      rank_40 := rank()                  - Exchange[REPARTITION] =&gt; id_11:varchar, rank:bigint, $hashvalue:bigint                      - Project =&gt; [rank:bigint, id_11:varchar, $hashvalue_50:bigint]                          - InnerJoin[("id" = "id_11")] =&gt; [id:varchar, $hashvalue_48:bigint, rank:bigint, id_11:varchar, $hashvalue_50:bigint]                              - Window[partition by (id)] =&gt; [id:varchar, $hashvalue_48:bigint, rank:bigint]                                      rank := rank()                                  - Exchange[REPARTITION] =&gt; id:varchar, $hashvalue_48:bigint                                      - Project =&gt; [id:varchar, $hashvalue_49:bigint]                                              $hashvalue_49 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("id"), 0))                                          - TableScan[td-presto:td:customer_monotaro.kw_sequences, originalConstraint = true] =&gt; [id:varchar]                                                  LAYOUT: com.treasure_data.presto.connector.TDTableLayoutHandle@ebbc2de6                                                  id := td:id                              - Window[partition by (id_11)] =&gt; [id_11:varchar, $hashvalue_50:bigint]                                  - Exchange[REPARTITION] =&gt; id_11:varchar, $hashvalue_50:bigint                                      - Project =&gt; [id_11:varchar, $hashvalue_51:bigint]                                              $hashvalue_51 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("id_11"), 0))                                          - TableScan[td-presto:td:customer_monotaro.kw_sequences, originalConstraint = true] =&gt; [id_11:varchar]                                                  LAYOUT: com.treasure_data.presto.connector.TDTableLayoutHandle@ebbc2de6                                                  id_11 := td:id  -- BAD Query (missing repartitioning) presto&gt; explain WITH X AS( SELECT id, rank() over(partition BY id) AS ranking FROM kw_sequences ), Y AS ( SELECT a.id, a.ranking FROM X a JOIN X b ON a.id = b.id ) SELECT id, rank() over(partition BY id ORDER BY ranking) FROM Y;                                                                  Query Plan --------------------------------------------------------------------------------------------------------------------------------------------  - Output[id, _col1] =&gt; [id:varchar, rank_40:bigint]          _col1 := rank_40      - Exchange[GATHER] =&gt; id:varchar, rank_40:bigint          - Project =&gt; [id:varchar, rank_40:bigint]              - Window[partition by (&lt;id&gt;), order by (rank)] =&gt; [rank:bigint, id:varchar, $hashvalue:bigint, rank_40:bigint]                      rank_40 := rank()          ======  &lt;&lt;  missing REPARTITIONING step &gt;&gt; =======                  - Project =&gt; [rank:bigint, id:varchar, $hashvalue:bigint]                      - InnerJoin[("id" = "id_11")] =&gt; [id:varchar, $hashvalue:bigint, rank:bigint, id_11:varchar, $hashvalue_49:bigint]                          - Window[partition by (id)] =&gt; [id:varchar, $hashvalue:bigint, rank:bigint]                                  rank := rank()                              - Exchange[REPARTITION] =&gt; id:varchar, $hashvalue:bigint                                  - Project =&gt; [id:varchar, $hashvalue_48:bigint]                                          $hashvalue_48 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("id"), 0))                                      - TableScan[td-presto:td:customer_monotaro.kw_sequences, originalConstraint = true] =&gt; [id:varchar]                                              LAYOUT: com.treasure_data.presto.connector.TDTableLayoutHandle@eddc8608                                              id := td:id                          - Window[partition by (id_11)] =&gt; [id_11:varchar, $hashvalue_49:bigint]                              - Exchange[REPARTITION] =&gt; id_11:varchar, $hashvalue_49:bigint                                  - Project =&gt; [id_11:varchar, $hashvalue_50:bigint]                                          $hashvalue_50 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("id_11"), 0))                                      - TableScan[td-presto:td:customer_monotaro.kw_sequences, originalConstraint = true] =&gt; [id_11:varchar]                                              LAYOUT: com.treasure_data.presto.connector.TDTableLayoutHandle@eddc8608                                              id_11 := td:id ```  The only difference between two queries is using `a.id` or `b.id` to extract the self join result, but these ids values should be the same because of `a.id = b.id` join condition. </body>
		<created>2016-07-13 23:54:49</created>
		<closed>2016-07-15 01:28:58</closed>
	</bug>
	<bug>
		<id>5596</id>
		<title>Uncategorized error for too many dots</title>
		<body>``` presto&gt; select * from a.b.c.d; Query 20160707_192115_20747_y6z74 failed: Too many dots in table name: a.b.c.d java.lang.IllegalArgumentException: Too many dots in table name: a.b.c.d     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.metadata.MetadataUtil.createQualifiedObjectName(MetadataUtil.java:119)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitTable(StatementAnalyzer.java:890)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitTable(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.Table.accept(Table.java:50)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeFrom(StatementAnalyzer.java:1733)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:1032)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:829)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.Query.accept(Query.java:103)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:270)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:256)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:220)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-07-07 19:23:04</created>
		<closed>2016-10-10 17:03:35</closed>
	</bug>
	<bug>
		<id>5575</id>
		<title>Queries with functions returning Color type fail</title>
		<body>SQL  ``` presto&gt; select rgb(0,0,0); Query is gone (server restarted?) ```  Stack Trace   ``` Query 20160701_183636_00000_9c6sb, RUNNING, 1 node, 0 splits http://localhost:8080/query.html?20160701_183636_00000_9c6sb java.lang.RuntimeException: Error fetching next at http://localhost:8080/v1/statement/20160701_183636_00000_9c6sb/52 returned an invalid response: JsonResponse{statusCode=200, statusMessage=OK, headers={Vary=[Accept-Encoding, User-Agent], Content-Length=[899], Date=[Fri, 01 Jul 2016 18:36:38 GMT], X-Content-Type-Options=[nosniff], Content-Type=[application/json]}, hasValue=false, value=null} [Error: {"id":"20160701_183636_00000_9c6sb","infoUri":"http://localhost:8080/query.html?20160701_183636_00000_9c6sb","partialCancelUri":"http://192.168.30.1:8080/v1/stage/20160701_183636_00000_9c6sb.0","nextUri":"http://localhost:8080/v1/statement/20160701_183636_00000_9c6sb/53","columns":[{"name":"_col0","type":"color","typeSignature":{"rawType":"color","typeArguments":[],"literalArguments":[],"arguments":[]}}],"data":[["#ffff00"]],"stats":{"state":"RUNNING","scheduled":true,"nodes":1,"totalSplits":1,"queuedSplits":0,"runningSplits":0,"completedSplits":1,"userTimeMillis":0,"cpuTimeMillis":4,"wallTimeMillis":25,"processedRows":0,"processedBytes":0,"rootStage":{"stageId":"0","state":"RUNNING","done":false,"nodes":1,"totalSplits":1,"queuedSplits":0,"runningSplits":0,"completedSplits":1,"userTimeMillis":0,"cpuTimeMillis":4,"wallTimeMillis":25,"processedRows":1,"processedBytes":0,"subStages":[]}}} ]     at com.facebook.presto.client.StatementClient.requestFailedException(StatementClient.java:344)     at com.facebook.presto.client.StatementClient.advance(StatementClient.java:294)     at com.facebook.presto.cli.StatusPrinter.printInitialStatusUpdates(StatusPrinter.java:121)     at com.facebook.presto.cli.Query.renderQueryOutput(Query.java:123)     at com.facebook.presto.cli.Query.renderOutput(Query.java:107)     at com.facebook.presto.cli.Console.process(Console.java:294)     at com.facebook.presto.cli.Console.runConsole(Console.java:234)     at com.facebook.presto.cli.Console.run(Console.java:139)     at com.facebook.presto.cli.Presto.main(Presto.java:32) Caused by: java.lang.IllegalArgumentException: Unable to create class com.facebook.presto.client.QueryResults from JSON response: {"id":"20160701_183636_00000_9c6sb","infoUri":"http://localhost:8080/query.html?20160701_183636_00000_9c6sb","partialCancelUri":"http://192.168.30.1:8080/v1/stage/20160701_183636_00000_9c6sb.0","nextUri":"http://localhost:8080/v1/statement/20160701_183636_00000_9c6sb/53","columns":[{"name":"_col0","type":"color","typeSignature":{"rawType":"color","typeArguments":[],"literalArguments":[],"arguments":[]}}],"data":[["#ffff00"]],"stats":{"state":"RUNNING","scheduled":true,"nodes":1,"totalSplits":1,"queuedSplits":0,"runningSplits":0,"completedSplits":1,"userTimeMillis":0,"cpuTimeMillis":4,"wallTimeMillis":25,"processedRows":0,"processedBytes":0,"rootStage":{"stageId":"0","state":"RUNNING","done":false,"nodes":1,"totalSplits":1,"queuedSplits":0,"runningSplits":0,"completedSplits":1,"userTimeMillis":0,"cpuTimeMillis":4,"wallTimeMillis":25,"processedRows":1,"processedBytes":0,"subStages":[]}}}      at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:119)     at io.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:66)     at io.airlift.http.client.FullJsonResponseHandler.handle(FullJsonResponseHandler.java:35)     at io.airlift.http.client.jetty.JettyHttpClient.execute(JettyHttpClient.java:365)     at com.facebook.presto.client.StatementClient.advance(StatementClient.java:281)     ... 7 more Caused by: java.lang.IllegalArgumentException: Invalid [simple type, class com.facebook.presto.client.QueryResults] json bytes     at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:174)     at io.airlift.http.client.FullJsonResponseHandler$JsonResponse.&lt;init&gt;(FullJsonResponseHandler.java:116)     ... 11 more Caused by: com.fasterxml.jackson.databind.JsonMappingException: Instantiation of [simple type, class com.facebook.presto.client.QueryResults] value failed: Illegal base64 character 23     at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapException(StdValueInstantiator.java:405)     at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:234)     at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:167)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:398)     at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1064)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:264)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:124)     at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3066)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2262)     at io.airlift.json.JsonCodec.fromJson(JsonCodec.java:171)     ... 12 more Caused by: java.lang.IllegalArgumentException: Illegal base64 character 23     at java.util.Base64$Decoder.decode0(Base64.java:714)     at java.util.Base64$Decoder.decode(Base64.java:526)     at java.util.Base64$Decoder.decode(Base64.java:549)     at com.facebook.presto.client.QueryResults.fixValue(QueryResults.java:319)     at com.facebook.presto.client.QueryResults.fixData(QueryResults.java:220)     at com.facebook.presto.client.QueryResults.&lt;init&gt;(QueryResults.java:92)     at sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ``` </body>
		<created>2016-07-05 23:45:38</created>
		<closed>2017-03-31 23:34:47</closed>
	</bug>
	<bug>
		<id>5531</id>
		<title>ExceededMemoryLimitException at presto 0.148, 0.149</title>
		<body>Hi  I use presto 0.149 + jdk1.8.0_92 + HDP 2.1 + hive connector + CentOS 6.5.  If I execute the following query, `Query exceeded max memory size of 70GB` error occurs.  ``` select * from test.hogeview where yyyymmdd='20160622' limit 1 ```  test.hogeview is presto view and has many `left outer join` clause and one `group by` clause.  ![](https://gyazo.com/d58bc564359ba4f248b85d755c425344.png)  Although same error occurs at presto 0.148, there is no error at presto 0.147.  worker config is the following.  ``` coordinator=false http-server.http.port=... query.max-memory=70GB query.max-memory-per-node=3GB discovery.uri=... task.cpu-timer-enabled=false exchange.http-client.request-timeout=120s ``` </body>
		<created>2016-06-27 05:25:44</created>
		<closed>2016-07-14 22:24:51</closed>
	</bug>
	<bug>
		<id>5516</id>
		<title>Division by zero error with empty interleaved block</title>
		<body>This change 373c745b30b2db1e96eef844096b3620a11a84c7 added this bit to `InterleavedBlockEncoding.readBlock`:  ``` java byte isEmpty = sliceInput.readByte(); if (isEmpty == 1) {     return new InterleavedBlock(new Block[0]); } ```  InterleavedBlock performs divisions using the length of that array (columns), which result in division by zero errors:  ``` java int positionInBlock = position / columns; ```  ``` java.sql.SQLException: Query failed (#20160623_104612_01302_fsieu): / by zero     at com.facebook.presto.jdbc.PrestoResultSet.resultsException(PrestoResultSet.java:1799)     at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1787)     at com.facebook.presto.jdbc.PrestoResultSet$ResultsPageIterator.computeNext(PrestoResultSet.java:1756)     at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)     at com.facebook.presto.jdbc.internal.guava.collect.AbstractIterator.hasNext(AbstractIterator.java:138)     at com.facebook.presto.jdbc.internal.guava.collect.TransformedIterator.hasNext(TransformedIterator.java:43)     at com.facebook.presto.jdbc.internal.guava.collect.Iterators$5.hasNext(Iterators.java:547)     at com.facebook.presto.jdbc.PrestoResultSet.next(PrestoResultSet.java:149)     at com.facebook.presto.verifier.Validator.convertJdbcResultSet(Validator.java:520)     at com.facebook.presto.verifier.Validator.lambda$getResultSetConverter$4(Validator.java:494)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745)     at java.util.concurrent.FutureTask.report(FutureTask.java:122)     at java.util.concurrent.FutureTask.get(FutureTask.java:206)     at com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(SimpleTimeLimiter.java:130)     at com.facebook.presto.verifier.Validator.executeQuery(Validator.java:426)     at com.facebook.presto.verifier.Validator.executeQueryTest(Validator.java:304)     at com.facebook.presto.verifier.Validator.validate(Validator.java:218)     at com.facebook.presto.verifier.Validator.valid(Validator.java:190)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.ArithmeticException: / by zero     at com.facebook.presto.spi.block.AbstractInterleavedBlock.getRegion(AbstractInterleavedBlock.java:260)     at com.facebook.presto.spi.block.AbstractInterleavedBlock.copyRegion(AbstractInterleavedBlock.java:249)     at com.facebook.presto.spi.block.AbstractArrayBlock.getSingleValueBlock(AbstractArrayBlock.java:234)     at com.facebook.presto.operator.TopNOperator$TopNBuilder.getValues(TopNOperator.java:338)     at com.facebook.presto.operator.TopNOperator$TopNBuilder.addRow(TopNOperator.java:313)     at com.facebook.presto.operator.TopNOperator$TopNBuilder.mergeWithGlobalCandidates(TopNOperator.java:284)     at com.facebook.presto.operator.TopNOperator$TopNBuilder.processPage(TopNOperator.java:273)     at com.facebook.presto.operator.TopNOperator.addInput(TopNOperator.java:202)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:384)     at com.facebook.presto.operator.Driver.processFor(Driver.java:301)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:618)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     ... 3 more ```  This reproduces the issue:  ``` java InterleavedBlock block = new InterleavedBlock(new Block[0]); block.copyRegion(0, 0); ```  (is that call to copyRegion even valid? If not, there might be another bug further up the stack, too)  Also, the test in `AbstractInterleavedBlock`'s constructor is a bit suspect. The condition checks for "non-negative", but the message says "positive". Moreover, given that methods use that value in division operations, it would seem that we should ensure the value is never 0.  ``` java if (columns &lt; 0) {     throw new IllegalArgumentException("Number of blocks in InterleavedBlock must be positive"); } ``` </body>
		<created>2016-06-23 16:34:02</created>
		<closed>2016-06-23 20:18:14</closed>
	</bug>
	<bug>
		<id>5514</id>
		<title>Tableau web connector hard coded "hive" catalog in it</title>
		<body>I found Presto Tableau web connector hard coded "hive" catalog in it (tableau/presto-connector.html):  ```              var catalogClient = new StatementClient({                     'catalog': 'hive',                     'schema': 'default',                      'query': 'show catalogs'               },         ......         populateSchemas('hive'); ```  This makes the Tableau web connector failed to work when the Presto is deployed without 'hive' connector configured, and Tableau web connector will always report error "Catalog hive does not exist" while users doesn't have hive configured at all. Probably using the 'system' catalog as default is better. </body>
		<created>2016-06-23 08:26:24</created>
		<closed>2016-08-05 22:44:01</closed>
	</bug>
	<bug>
		<id>5498</id>
		<title>GROUPING SETS over UNION fails</title>
		<body>The following query:  ``` SELECT x, COUNT(DISTINCT x) AS c    FROM      (      SELECT *      FROM (values (1)) t(x)      UNION ALL      SELECT *      FROM (values (1)) t(x)      ) t2    GROUP BY GROUPING SETS ((x), ()) ```  fails with:  ``` Query 20160622_013115_00003_u5amn failed: index (0) must be less than size (0) java.lang.IndexOutOfBoundsException: index (0) must be less than size (0)     at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:310)     at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:292)     at com.google.common.collect.RegularImmutableList.get(RegularImmutableList.java:65)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitUnion(AddExchanges.java:1104)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitUnion(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.UnionNode.accept(UnionNode.java:139)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitPlan(AddExchanges.java:215)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitPlan(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitGroupId(PlanVisitor.java:150)     at com.facebook.presto.sql.planner.plan.GroupIdNode.accept(GroupIdNode.java:125)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:283)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:189)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:231)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:283)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:189)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:231)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitProject(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:1143)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:237)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:188)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:150)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:100)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:277)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:256)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:220)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-06-22 01:33:05</created>
		<closed>2016-06-22 22:16:27</closed>
	</bug>
	<bug>
		<id>5449</id>
		<title>array_agg should not ignore nulls</title>
		<body>``` presto&gt; select array_agg(x) from (values 1,2,3,null) t(x);     _col0    -----------  [1, 2, 3]  ```  The expected result is `[1, 2, 3, null]`.  From the spec:  &gt; ii) Otherwise, the result of `&lt;array aggregate function&gt;` is an array of N elements such that for all i, 1 (one) ≤ i ≤ N, the value of the i-th element is the value of the  first column of Ri. &gt;  &gt;    NOTE 331 — **Null values are not eliminated when computing `&lt;array aggregate function&gt;`**. This, plus the optional `&lt;sort specification list&gt;`, sets `&lt;array aggregate function&gt;` apart from `&lt;general set function&gt;`s. </body>
		<created>2016-06-14 21:26:49</created>
		<closed>2016-06-21 17:13:48</closed>
	</bug>
	<bug>
		<id>5429</id>
		<title>round(nan(), 2) returns 0.0</title>
		<body>`SELECT round(nan(), 2)` results in `0.0`, but should be `NaN`. This is a regression since 0.144.5. </body>
		<created>2016-06-10 02:27:03</created>
		<closed>2016-06-10 03:26:18</closed>
	</bug>
	<bug>
		<id>5425</id>
		<title>Query not "fail"ed when it doesn't match any selection rule</title>
		<body>The failure isn't properly propagated. And the query continues to show "QUEUED" state until it gets expired after 5 minutes.  `````` presto:presto&gt; show tables; Error running command: Error starting query at http://.....:7777/v1/statement returned an invalid response: JsonResponse{statusCode=500, statusMessage=Internal Server Error, headers={Content-Length=[4950], Date=[Thu, 09 Jun 2016 18:04:40 GMT], Content-Type=[text/plain]}, hasValue=false, value=null} [Error: com.facebook.presto.spi.PrestoException: Query did not match any selection rule         at com.facebook.presto.execution.resourceGroups.ResourceGroupManager.selectGroup(ResourceGroupManager.java:157)         at com.facebook.presto.execution.resourceGroups.ResourceGroupManager.submit(ResourceGroupManager.java:80)         at com.facebook.presto.execution.SqlQueryManager.createQuery(SqlQueryManager.java:340)         at com.facebook.presto.server.StatementResource$Query.&lt;init&gt;(StatementResource.java:308)         at com.facebook.presto.server.StatementResource.createQuery(StatementResource.java:171)         at sun.reflect.GeneratedMethodAccessor416.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)         at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)         at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:267)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)         at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)         at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)         at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)         at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)         at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)         at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)         at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)         at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:396)         at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1176)         at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)         at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1106)         at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)         at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)         at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)         at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)         at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)         at org.eclipse.jetty.server.Server.handle(Server.java:518)         at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:314)         at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)         at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)         at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)         at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)         at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)         at java.lang.Thread.run(Thread.java:745) ]``` `````` </body>
		<created>2016-06-09 18:34:33</created>
		<closed>2016-06-20 14:47:00</closed>
	</bug>
	<bug>
		<id>5397</id>
		<title>Type mismatch in plan</title>
		<body>Latest master  ``` presto:tiny&gt; explain select avg(extendedprice) from lineitem;                                                  Query Plan -------------------------------------------------------------------------------------------------------------  - Output[_col0] =&gt; [avg:double]          _col0 := avg      - Aggregate(FINAL) =&gt; [avg:double]              avg := "avg"("avg_4")          - RemoteExchange[GATHER] =&gt; avg_4:varchar              - Aggregate(PARTIAL) =&gt; [avg_4:varchar]                      avg_4 := "avg"("extendedprice")                  - TableScan[tpch:tpch:lineitem:sf0.01, originalConstraint = true] =&gt; [extendedprice:double]                          extendedprice := tpch:extendedprice  (1 row)  presto:tiny&gt; describe lineitem;     Column     |  Type   | Comment ---------------+---------+---------  orderkey      | bigint  |  partkey       | bigint  |  suppkey       | bigint  |  linenumber    | integer |  quantity      | double  |  extendedprice | double  |  discount      | double  |  tax           | double  |  returnflag    | varchar |  linestatus    | varchar |  shipdate      | date    |  commitdate    | date    |  receiptdate   | date    |  shipinstruct  | varchar |  shipmode      | varchar |  comment       | varchar | (16 rows) ```  `extendedprice` is `double`, `avg_4 := "avg"("extendedprice")` should be `double` too, however it is `varchar`.  I found this when looking into the travis failure of #5393  </body>
		<created>2016-06-02 18:02:20</created>
		<closed>2016-06-02 18:13:26</closed>
	</bug>
	<bug>
		<id>5394</id>
		<title>LEFT JOIN against empty relation produces no rows</title>
		<body>This can be reproduced with the following test case:  ```     @Test     public void testEmptyLeftJoin()             throws Exception     {         // Use orderkey = rand() to create an empty relation         assertQuery("SELECT * FROM lineitem a LEFT JOIN (SELECT * FROM orders WHERE orderkey = rand()) b ON a.orderkey &gt; b.orderkey");         assertQuery("SELECT * FROM lineitem a LEFT JOIN (SELECT * FROM orders WHERE orderkey = rand()) b ON 1 = 1");     } ``` </body>
		<created>2016-06-02 16:31:31</created>
		<closed>2016-06-13 16:20:14</closed>
	</bug>
	<bug>
		<id>5367</id>
		<title>Incorrect row construct result</title>
		<body>The latest 0.148-snapshot  ``` presto:tiny&gt; select row(x,y,z,m,n) from (values row(cast(null as integer),2,3,4,5)) t(x,y,z,m,n);                                _col0 -------------------------------------------------------------------  {field0=null, field1=null, field2=null, field3=null, field4=null} (1 row)  Query 20160526_222606_00003_6gx5u, FINISHED, 1 node http://localhost:8080/query.html?20160526_222606_00003_6gx5u Splits: 5 total, 5 done (100.00%) CPU Time: 0.0s total,     0 rows/s,     0B/s, 50% active Per Node: 0.0 parallelism,     0 rows/s,     0B/s Parallelism: 0.0 0:01 [0 rows, 0B] [0 rows/s, 0B/s] ```  However, if there is no `NULL` cast, the result is correct:  ``` presto:tiny&gt; select row(x,y,z,m,n) from (values row(null,2,3,4,5)) t(x,y,z,m,n);                          _col0 -------------------------------------------------------  {field0=null, field1=2, field2=3, field3=4, field4=5} (1 row)  Query 20160526_222758_00006_6gx5u, FINISHED, 1 node http://localhost:8080/query.html?20160526_222758_00006_6gx5u Splits: 5 total, 5 done (100.00%) CPU Time: 0.0s total,     0 rows/s,     0B/s, 33% active Per Node: 0.0 parallelism,     0 rows/s,     0B/s Parallelism: 0.0 0:00 [0 rows, 0B] [0 rows/s, 0B/s] ``` </body>
		<created>2016-05-26 22:29:24</created>
		<closed>2016-05-27 04:23:05</closed>
	</bug>
	<bug>
		<id>5346</id>
		<title>Planning error when same subquery appears in SELECT and WHERE clause</title>
		<body>``` sql SELECT x IN (SELECT * FROM (VALUES 1)) FROM (VALUES 2) t(x) WHERE x IN (SELECT * FROM (VALUES 1)) ```  fails with   ``` java.lang.IllegalArgumentException: Invalid node. Expression dependencies ([field, field_1]) not in source plan output ([field, semijoin_result])      at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.checkDependencies(ValidateDependenciesChecker.java:564)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.access$100(ValidateDependenciesChecker.java:71)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:248)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitProject(ValidateDependenciesChecker.java:80)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:291)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker$Visitor.visitOutput(ValidateDependenciesChecker.java:80)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.sanity.ValidateDependenciesChecker.validate(ValidateDependenciesChecker.java:77)     at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.lambda$validate$0(PlanSanityChecker.java:35)     at java.lang.Iterable.forEach(Iterable.java:75)     at com.facebook.presto.sql.planner.sanity.PlanSanityChecker.validate(PlanSanityChecker.java:35)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:105)     at com.facebook.presto.testing.LocalQueryRunner.createPlan(LocalQueryRunner.java:583)     ... ```  We've bisected it to this commit b5d8bf55da276e55a7be4b43e5c275ea2eb21193 </body>
		<created>2016-05-24 20:45:31</created>
		<closed>2016-05-25 17:34:49</closed>
	</bug>
	<bug>
		<id>5343</id>
		<title>Round(0.49999999999999994) gives wrong result</title>
		<body>Presto uses floor(value + 0.5) concept to round values, which causes problem when it comes to  value 0.49999999999999994 (0x1.fffffffffffffp-2).  E.g.  ``` sql presto&gt; select round(0.49999999999999994);  _col0  -------    1.0  (1 row) ``` </body>
		<created>2016-05-24 19:37:56</created>
		<closed>2016-05-27 12:19:53</closed>
	</bug>
	<bug>
		<id>5342</id>
		<title>Bad error message when rows in VALUES have different number of fields</title>
		<body>``` sql VALUES (1), (1,2) ```  fails with:  ``` java.lang.IndexOutOfBoundsException: Index: 1, Size: 1     at java.util.ArrayList.rangeCheck(ArrayList.java:653)     at java.util.ArrayList.get(ArrayList.java:429)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitValues(StatementAnalyzer.java:1429)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitValues(StatementAnalyzer.java:229)     at com.facebook.presto.sql.tree.Values.accept(Values.java:55)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:928)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:229)     at com.facebook.presto.sql.tree.Query.accept(Query.java:103)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:273)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:259)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:223)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:62)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-05-24 19:05:13</created>
		<closed>2016-08-17 18:02:42</closed>
	</bug>
	<bug>
		<id>5337</id>
		<title>Presto Verifier  - incorrect manual</title>
		<body>Presto Verifier  https://prestodb.io/docs/current/installation/verifier.html  ``` $ ./verifier config.properties ...  2016-05-23T14:12:28.722+0900    ERROR   main    Bootstrap   Uncaught exception in thread main org.skife.jdbi.v2.exceptions.UnableToExecuteStatementException: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: ****Unknown column 'session_properties_json' in 'field list'** [statement:"SELECT** .... ```  Unknown column session_properties_json ?! Not found.  ``` CREATE TABLE verifier_queries(     id INT NOT NULL AUTO_INCREMENT,     suite VARCHAR(256) NOT NULL,     name VARCHAR(256),     test_catalog VARCHAR(256) NOT NULL,     test_schema VARCHAR(256) NOT NULL,     test_prequeries TEXT,     test_query TEXT NOT NULL,     test_postqueries TEXT,     test_username VARCHAR(256) NOT NULL default 'verifier-test',     test_password VARCHAR(256),     control_catalog VARCHAR(256) NOT NULL,     control_schema VARCHAR(256) NOT NULL,     control_prequeries TEXT,     control_query TEXT NOT NULL,     control_postqueries TEXT,     control_username VARCHAR(256) NOT NULL default 'verifier-test',     control_password VARCHAR(256),     PRIMARY KEY (id) ); ```  https://github.com/prestodb/presto/search?utf8=%E2%9C%93&amp;q=session_properties_json  ``` presto-verifier/src/main/java/com/facebook/presto/verifier/VerifierDao.java  Showing the top match. Last indexed on 18 Mar.  41              ", control_password\n" + 42              ", session_properties_json\n" + 43              "FROM verifier_queries\n" + 44              "WHERE suite = :suite\n" +  presto-verifier/src/main/java/com/facebook/presto/verifier/QueryPairMapper.java  Showing the top match. Last indexed on 18 Mar.  38          String json = resultSet.getString("session_properties_json"); 39          if (json != null) { 40              sessionProperties = propertiesJsonCodec.fromJson(json); ```  Change schema.  ``` CREATE TABLE verifier_queries(     id INT NOT NULL AUTO_INCREMENT,     suite VARCHAR(256) NOT NULL,     name VARCHAR(256),     test_catalog VARCHAR(256) NOT NULL,     test_schema VARCHAR(256) NOT NULL,     test_prequeries TEXT,     test_query TEXT NOT NULL,     test_postqueries TEXT,     test_username VARCHAR(256) NOT NULL default 'verifier-test',     test_password VARCHAR(256),     control_catalog VARCHAR(256) NOT NULL,     control_schema VARCHAR(256) NOT NULL,     control_prequeries TEXT,     control_query TEXT NOT NULL,     control_postqueries TEXT,     control_username VARCHAR(256) NOT NULL default 'verifier-test',     control_password VARCHAR(256),     session_properties_json TEXT,           /* append column */     PRIMARY KEY (id) ); ``` </body>
		<created>2016-05-23 06:00:39</created>
		<closed>2018-12-11 18:54:22</closed>
	</bug>
	<bug>
		<id>5332</id>
		<title>Cannot chain `AT TIME ZONE`</title>
		<body>Chaining `AT TIME ZONE` together results in the error `null`:   ``` presto&gt; SELECT TIMESTAMP '2012-10-31 01:00' AT TIME ZONE 'America/Los_Angeles' AT TIME ZONE 'UTC'; Query 20160520_185347_00028_kmihc failed: null  presto&gt; ```  Can work around this with e.g.:   ``` presto&gt; WITH tz_la AS (SELECT TIMESTAMP '2012-10-31 01:00' AT TIME ZONE 'America/Los_Angeles' AS ts)      -&gt; SELECT tz_la.ts, tz_la.ts AT TIME ZONE 'UTC' from tz_la;                      ts                      |            _col1 ---------------------------------------------+-----------------------------  2012-10-31 01:00:00.000 America/Los_Angeles | 2012-10-31 08:00:00.000 UTC (1 row)  Query 20160520_185900_00029_kmihc, FINISHED, 1 node Splits: 1 total, 0 done (0.00%) 0:00 [0 rows, 0B] [0 rows/s, 0B/s]  presto&gt; ```  This is on Presto 0.146. I believe this worked before but I could be mistaken and I haven't had time to bisect. I'll follow up if I find more info there.  </body>
		<created>2016-05-20 19:01:59</created>
		<closed>2016-05-20 22:24:02</closed>
	</bug>
	<bug>
		<id>5322</id>
		<title>OVER ... ROWS between UNBOUNDED PRECEDING AND n PRECEDING returns incorrect results</title>
		<body>The same issue applies to OVER(... ROWS BETWEEN n FOLLOWING AND UNBOUNDED FOLLOWING).  The actual behavior is:  ``` presto:tiny&gt; select nationkey, sum(regionkey) over (rows between unbounded preceding and 2 preceding) from nation limit 5; ```  | nationkey | _col1 | | --- | --- | | 0 | 0 | | 1 | 0 | | 2 | 0 | | 3 | 1 | | 4 | 2 |  The expected behavior is that this matches the behavior of the following:  ``` presto:tiny&gt; select nationkey, sum(regionkey) over (rows between 3 preceding and 2 preceding) from nation limit 5; ```  | nationkey | _col1 | | --- | --- | | 0 | NULL | | 1 | NULL | | 2 | 0 | | 3 | 1 | | 4 | 2 |  Postgresql matches the expected behavior and returns NULL for the first two rows. The removal of the first row.  The part of the SQL 2011 standard addressing the window clause is 7.11. The following references are in the General Rules section of that part.  In the case when the first row is the current row (nationkey == 0), the first row (nationkey == 0) should be removed from the window frame per rule 5.b.ii.2.C.II, and is specifically covered by Note 223.  In the case when the second row is the current row (nationkey == 1), the first row (nationkey == 0) should be removed from the window frame per the same rule. The current/second row (nationkey == 1) is removed per Note 223 as above. </body>
		<created>2016-05-19 18:01:44</created>
		<closed>2016-05-20 19:45:47</closed>
	</bug>
	<bug>
		<id>5317</id>
		<title>PREPARE should overwrite existing name</title>
		<body>I was looking at the spec under `20.6 &lt;prepare statement&gt;` and found this:  ``` 9) If &lt;SQL statement name&gt; identifies a prepared statement PS, then an implicit  DEALLOCATE PREPARE SSN  is executed, where SSN is an &lt;SQL statement name&gt; that identifies PS. ``` </body>
		<created>2016-05-19 05:02:02</created>
		<closed>2016-05-24 19:42:24</closed>
	</bug>
	<bug>
		<id>5278</id>
		<title>ROW type hash implementation throws misleading message</title>
		<body>Message should say `hash` is not supported for...  ``` com.facebook.presto.spi.PrestoException: ROW comparison not supported for fields with null elements     at com.facebook.presto.type.RowType.checkElementNotNull(RowType.java:216)     at com.facebook.presto.type.RowType.hash(RowType.java:206) ``` </body>
		<created>2016-05-13 22:06:08</created>
		<closed>2018-06-25 17:55:51</closed>
	</bug>
	<bug>
		<id>5268</id>
		<title>No Implicit Coercion in SemiJoin</title>
		<body>``` presto:tiny&gt; explain select orderkey from orders where orderkey in (values 39301, 39330);                                                          Query Plan -----------------------------------------------------------------------------------------------------------------------------  - Output[orderkey] =&gt; [orderkey:bigint]      - RemoteExchange[GATHER] =&gt; orderkey:bigint          - Project =&gt; [orderkey:bigint]              - Filter["semijoin_result"] =&gt; [orderkey:bigint, semijoin_result:boolean]                  - Project =&gt; [orderkey:bigint, semijoin_result:boolean]                      - SemiJoin[orderkey = field] =&gt; [orderkey:bigint, $hashvalue:bigint, semijoin_result:boolean]                          - Project =&gt; [orderkey:bigint, $hashvalue:bigint]  &lt;----- 'orderkey' is bigint                                  $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))                              - TableScan[tpch:tpch:orders:sf0.01, originalConstraint = true] =&gt; [orderkey:bigint]                                      orderkey := tpch:orderkey                          - RemoteExchange[REPARTITION] =&gt; field:integer, $hashvalue_6:bigint                              - Project =&gt; [field:integer, $hashvalue_7:bigint]                                      $hashvalue_7 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("field"), 0))                                  - Values =&gt; [field:integer]                &lt;----- integer                                          (39301)                                          (39330) ```  ``` presto:tiny&gt; select orderkey from orders where orderkey in (values 39301, 39330);  Query 20160512_175141_00023_e9yg3, FAILED, 4 nodes http://localhost:8080/query.html?20160512_175141_00023_e9yg3 Splits: 21 total, 6 done (28.57%) CPU Time: 0.0s total,     0 rows/s,     0B/s, 0% active Per Node: 0.0 parallelism,     0 rows/s,     0B/s Parallelism: 0.0 0:00 [0 rows, 0B] [0 rows/s, 0B/s]  Query 20160512_175141_00023_e9yg3 failed: Expected one BIGINT parameter java.lang.IllegalArgumentException: Expected one BIGINT parameter     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.tpch.TpchNodePartitioningProvider.getBucketFunction(TpchNodePartitioningProvider.java:82)     at com.facebook.presto.sql.planner.NodePartitioningManager.getPartitionFunction(NodePartitioningManager.java:78)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:312)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:157)     at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:119)     at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:73)     at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:275)     at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:314)     at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:123)     at sun.reflect.GeneratedMethodAccessor403.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:396)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1176)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1106)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:314)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)     at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-05-12 17:57:52</created>
		<closed>2016-05-12 19:19:31</closed>
	</bug>
	<bug>
		<id>5267</id>
		<title>Presto doesn't correctly deal with complex aggregations when arguments are also group by columns</title>
		<body>Hi,  I might found a bug related to ROLLUP function. Could you look into this issue? ### Problem  ROLLUP function return 0 as total count if `COUNT(column)` is used. If `COUNT(*)` is used, Presto returns a correct result. #### PostgreSQL 9.5.2  ``` $ psql psql (9.5.2) Type "help" for help.  postgres=# WITH test_data AS (SELECT * FROM ( postgres(# VALUES postgres(# ('a', 1), postgres(# ('b', 2), postgres(# ('a', 3) postgres(# ) as t(id, cnt) postgres(# ) postgres-# SELECT id, COUNT(*) as s_cnt postgres-# FROM test_data postgres-# GROUP BY ROLLUP(id) postgres-# ;  id | s_cnt ----+-------  a  |     2  b  |     1     |     3 (3 rows) ```  ``` postgres=# WITH test_data AS (SELECT * FROM ( postgres(# VALUES postgres(# ('a', 1), postgres(# ('b', 2), postgres(# ('a', 3) postgres(# ) as t(id, cnt) postgres(# ) postgres-# SELECT id, COUNT(id) as s_cnt postgres-# FROM test_data postgres-# GROUP BY ROLLUP(id);  id | s_cnt ----+-------  a  |     2  b  |     1     |     3 (3 rows) ``` ### Presto 0.146  ``` &gt; WITH test_data AS (SELECT * FROM ( &gt; VALUES &gt; ('a', 1), &gt; ('b', 2), &gt; ('a', 3) &gt; ) as t(id, cnt) &gt; ) &gt; SELECT id, COUNT(*) as s_cnt &gt; FROM test_data &gt; GROUP BY ROLLUP(id); &gt;  +------+-------+ | id   | s_cnt | +------+-------+ | null | 3     | | a    | 2     | | b    | 1     | +------+-------+ 3 rows in set ```  _The following SQL show this problem_. `null` returns `0`  ``` &gt; WITH test_data AS (SELECT * FROM ( &gt; VALUES &gt; ('a', 1), &gt; ('b', 2), &gt; ('a', 3) &gt; ) as t(id, cnt) &gt; ) &gt; SELECT id, COUNT(id) as s_cnt &gt; FROM test_data &gt; GROUP BY ROLLUP(id);  +------+-------+ | id   | s_cnt | +------+-------+ | null | 0     | | a    | 2     | | b    | 1     | +------+-------+ 3 rows in set ``` </body>
		<created>2016-05-12 13:24:07</created>
		<closed>2016-05-19 22:52:29</closed>
	</bug>
	<bug>
		<id>5215</id>
		<title>Error in year part of  date_parse</title>
		<body>`select date_parse('28-JAN-16 11.45.46.421000 PM','%d-%b-%y %l.%i.%s.%f %p');` ##          _col0   1916-01-28 23:45:46.421 (1 row)  Year which has to be 2016 is parsed as 1916. </body>
		<created>2016-05-06 05:51:51</created>
		<closed>2016-06-20 22:48:01</closed>
	</bug>
	<bug>
		<id>5156</id>
		<title>Typo in extract call crashes CLI</title>
		<body>``` select extract(hou from create_time) from (values 1); ```  ``` Exception in thread "main" java.lang.IllegalArgumentException: No enum constant com.facebook.presto.sql.tree.Extract.Field.HOU         at java.lang.Enum.valueOf(Enum.java:238)         at com.facebook.presto.sql.tree.Extract$Field.valueOf(Extract.java:30)         at com.facebook.presto.sql.parser.AstBuilder.visitExtract(AstBuilder.java:978)         at com.facebook.presto.sql.parser.AstBuilder.visitExtract(AstBuilder.java:151)         at com.facebook.presto.sql.parser.SqlBaseParser$ExtractContext.accept(SqlBaseParser.java:6210)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)         at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitValueExpressionDefault(SqlBaseBaseVisitor.java:573)         at com.facebook.presto.sql.parser.SqlBaseParser$ValueExpressionDefaultContext.accept(SqlBaseParser.java:5532)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)         at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:768)         at com.facebook.presto.sql.parser.AstBuilder.visitPredicated(AstBuilder.java:151)         at com.facebook.presto.sql.parser.SqlBaseParser$PredicatedContext.accept(SqlBaseParser.java:5103)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)         at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitBooleanDefault(SqlBaseBaseVisitor.java:496)         at com.facebook.presto.sql.parser.SqlBaseParser$BooleanDefaultContext.accept(SqlBaseParser.java:4809)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:70)         at com.facebook.presto.sql.parser.SqlBaseBaseVisitor.visitExpression(SqlBaseBaseVisitor.java:482)         at com.facebook.presto.sql.parser.SqlBaseParser$ExpressionContext.accept(SqlBaseParser.java:4737)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)         at com.facebook.presto.sql.parser.AstBuilder.visitSelectSingle(AstBuilder.java:489)         at com.facebook.presto.sql.parser.AstBuilder.visitSelectSingle(AstBuilder.java:151)         at com.facebook.presto.sql.parser.SqlBaseParser$SelectSingleContext.accept(SqlBaseParser.java:3772)         at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:42)         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.sql.parser.AstBuilder.visit(AstBuilder.java:1296) ``` </body>
		<created>2016-04-29 05:05:53</created>
		<closed>2016-05-03 23:59:34</closed>
	</bug>
	<bug>
		<id>5124</id>
		<title>NoClassDefFoundError: SubnetUtils</title>
		<body>I am getting the following error when trying to query a Hive table using ether 0.145 or 0.141t Is anyone else also facing this issue?  JDK v1.8.0_72-b15  ``` 2016-04-26T22:20:24.414+0200    WARN    hive-hive-110   com.facebook.presto.hive.util.ResumableTasks    ResumableTask completed exceptionally java.lang.NoClassDefFoundError: com/facebook/presto/hadoop/$internal/org/apache/commons/net/util/SubnetUtils         at org.apache.hadoop.net.NetUtils.isValidSubnet(NetUtils.java:838)         at org.apache.hadoop.hdfs.DFSClient.getLocalInterfaceAddrs(DFSClient.java:741)         at org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:686)         at org.apache.hadoop.hdfs.DFSClient.&lt;init&gt;(DFSClient.java:619)         at org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:149)         at org.apache.hadoop.fs.PrestoFileSystemCache.createFileSystem(PrestoFileSystemCache.java:74)         at org.apache.hadoop.fs.PrestoFileSystemCache.getInternal(PrestoFileSystemCache.java:61)         at org.apache.hadoop.fs.PrestoFileSystemCache.get(PrestoFileSystemCache.java:43)         at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:371)         at org.apache.hadoop.fs.Path.getFileSystem(Path.java:295)         at com.facebook.presto.hive.HdfsEnvironment.getFileSystem(HdfsEnvironment.java:53)         at com.facebook.presto.hive.BackgroundHiveSplitLoader.loadPartition(BackgroundHiveSplitLoader.java:320)         at com.facebook.presto.hive.BackgroundHiveSplitLoader.loadSplits(BackgroundHiveSplitLoader.java:232)         at com.facebook.presto.hive.BackgroundHiveSplitLoader.access$500(BackgroundHiveSplitLoader.java:71)         at com.facebook.presto.hive.BackgroundHiveSplitLoader$HiveSplitLoaderTask.lambda$process$0(BackgroundHiveSplitLoader.java:188)         at java.security.AccessController.doPrivileged(Native Method)         at javax.security.auth.Subject.doAs(Subject.java:422)         at org.apache.hadoop.security.UserGroupInformation$3.run(UserGroupInformation.java:1677)         at org.apache.hadoop.security.AsSubjectInvoker.doAs(AsSubjectInvoker.java:49)         at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1673)         at com.facebook.presto.hive.BackgroundHiveSplitLoader$HiveSplitLoaderTask.process(BackgroundHiveSplitLoader.java:187)         at com.facebook.presto.hive.util.ResumableTasks.safeProcessTask(ResumableTasks.java:45)         at com.facebook.presto.hive.util.ResumableTasks.lambda$submit$1(ResumableTasks.java:33)         at io.airlift.concurrent.BoundedExecutor.executeOrMerge(BoundedExecutor.java:69)         at io.airlift.concurrent.BoundedExecutor.access$000(BoundedExecutor.java:28)         at io.airlift.concurrent.BoundedExecutor$1.run(BoundedExecutor.java:40)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-04-26 20:26:03</created>
		<closed>2016-04-28 19:53:36</closed>
	</bug>
	<bug>
		<id>5110</id>
		<title>Race condition in array_concat</title>
		<body>A query like:  ``` sql select count(x) from (     select concat(a, b) x      from t ) ```  where `a` and `b` are of type `array(map(string, double))`, fails non-deterministically with various exceptions (Presto version 0.144.2):  ``` java.lang.IllegalStateException: closeEntry called before anything is written     at com.facebook.presto.spi.block.InterleavedBlockBuilder.closeEntry(InterleavedBlockBuilder.java:212)     at com.facebook.presto.spi.block.ArrayElementBlockWriter.closeEntry(ArrayElementBlockWriter.java:127)     at com.facebook.presto.spi.block.AbstractArrayBlock.writePositionTo(AbstractArrayBlock.java:155)     at com.facebook.presto.type.MapType.appendTo(MapType.java:192)     at com.facebook.presto.operator.scalar.ArrayConcatFunction.concat(ArrayConcatFunction.java:53)     at com_facebook_presto_$gen_CursorProcessor_37019.project_0(Unknown Source)     at com_facebook_presto_$gen_CursorProcessor_37019.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:215)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:577)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  ``` Query 20160425_183530_20138_n949w failed: Expected current entry size to be exactly 0 but was 0 java.lang.IllegalStateException: Expected current entry size to be exactly 0 but was 0     at com.facebook.presto.spi.block.ArrayBlockBuilder.beginBlockEntry(ArrayBlockBuilder.java:193)     at com.facebook.presto.spi.block.ArrayBlockBuilder.beginBlockEntry(ArrayBlockBuilder.java:24)     at com.facebook.presto.spi.block.AbstractArrayBlock.writePositionTo(AbstractArrayBlock.java:146)     at com.facebook.presto.type.MapType.appendTo(MapType.java:192)     at com.facebook.presto.operator.scalar.ArrayConcatFunction.concat(ArrayConcatFunction.java:53)     at com_facebook_presto_$gen_CursorProcessor_36742.project_0(Unknown Source)     at com_facebook_presto_$gen_CursorProcessor_36742.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:215)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:577)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  ``` Query 20160425_183539_20170_n949w failed: Expected current entry size to be exactly 0 but was 1 java.lang.IllegalStateException: Expected current entry size to be exactly 0 but was 1     at com.facebook.presto.spi.block.ArrayBlockBuilder.beginBlockEntry(ArrayBlockBuilder.java:193)     at com.facebook.presto.spi.block.ArrayBlockBuilder.beginBlockEntry(ArrayBlockBuilder.java:24)     at com.facebook.presto.spi.block.AbstractArrayBlock.writePositionTo(AbstractArrayBlock.java:146)     at com.facebook.presto.type.MapType.appendTo(MapType.java:192)     at com.facebook.presto.operator.scalar.ArrayConcatFunction.concat(ArrayConcatFunction.java:53)     at com_facebook_presto_$gen_CursorProcessor_37840.project_0(Unknown Source)     at com_facebook_presto_$gen_CursorProcessor_37840.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:215)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:577)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-04-25 18:37:35</created>
		<closed>2016-04-27 17:11:49</closed>
	</bug>
	<bug>
		<id>5100</id>
		<title>"java.lang.NullPointerException: maxSize is null" transient issue.</title>
		<body>Hi all.  We're seeing a very weird issue that only happens in newer versions of presto. Here's the setup: - ~50 worker nodes - 1 master node - We are using Hive connector as follows:  ``` connector.name=hive-hadoop2 hive.metastore.uri=thrift://xxx:9083 hive.s3.aws-access-key=xxx hive.s3.aws-secret-key=xxx hive.parquet.use-column-names=true hive.recursive-directories=true ``` - We are using external tables in Hive, with data stored in S3 - The data format is Parquet - We did not experience the problem on Presto 128 - We are on 144.1 and we do experience this problem - This error does not happen all of the time, only some of the time - Here are the errors we get, the first being the master node, the second being the worker:  ``` com.facebook.presto.operator.PageTransportErrorException: Expected response code to be 200, but was 500 Server Error: http://xxx:8080/v1/task/20160423_205833_00610_2n3nr.7.29/results/20160423_205833_00610_2n3nr.6.1/63      at com.facebook.presto.operator.HttpPageBufferClient$PageResponseHandler.handle(HttpPageBufferClient.java:569)     at com.facebook.presto.operator.HttpPageBufferClient$PageResponseHandler.handle(HttpPageBufferClient.java:527)     at io.airlift.http.client.jetty.JettyHttpClient$JettyResponseFuture.processResponse(JettyHttpClient.java:797)     at io.airlift.http.client.jetty.JettyHttpClient$JettyResponseFuture.completed(JettyHttpClient.java:774)     at io.airlift.http.client.jetty.JettyHttpClient$BufferingResponseListener.onComplete(JettyHttpClient.java:1053)     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193)     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185)     at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:456)     at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:403)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:268)     at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1333)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.shutdown(HttpReceiverOverHTTP.java:184)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:131)     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:69)     at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:90)     at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:114)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745)   java.lang.NullPointerException: maxSize is null     at java.util.Objects.requireNonNull(Objects.java:228)     at com.facebook.presto.execution.SqlTaskManager.getTaskResults(SqlTaskManager.java:287)     at com.facebook.presto.server.TaskResource.getResults(TaskResource.java:209)     at sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$VoidOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:143)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)     at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:845)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:389)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1162)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:518)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) ``` - With the following query  ```  select a.event, a.total, b.total as total_lastmonth, round(cast(a.total as double)/cast(b.total as double)-1.0, 4) as percentage from  ( select event, case                   when lower(event) = 'x' then count(*)                  when lower(event) in ('x',                     'x','x') then count(distinct uid)                   else null               end as total from x_events where     date between cast(date_add('day', -day(current_date) + 1, current_date) as varchar) and cast(date_add('day', -1, current_date) as varchar)     and      lower(event) in  ('x', 'x',                     'x','x') group by event ) as a left join  ( select event, case                   when lower(event) = 'x' then count(*)                  when lower(event) in ('x',                     'x','x') then count(distinct uid)                   else null               end as total from     x_events where     date between cast(date_add('day', -day(current_date) + 2, date_add('month', -1, date_add('day', -1, current_date))) as varchar) and cast(date_add('month', -1, date_add('day', -1, current_date)) as varchar)          and      lower(event) in  ('x', 'x',                     'x','x') group by event ) as b on lower(a.event) = lower(b.event) order by a.event ```  Any ideas?  Thanks, :) </body>
		<created>2016-04-23 21:35:00</created>
		<closed>2017-02-27 19:20:55</closed>
	</bug>
	<bug>
		<id>5057</id>
		<title>Date constructor should handle year 0 correctly</title>
		<body>Year zero is converted to January 2nd of 1 AD:  ``` presto&gt; select date '0000-12-31';    _col0     ------------  0001-01-02  (1 row) ```  It should be rejected, similar to other invalid dates:  ``` presto&gt; select date '2015-02-29'; Query ... failed: Value cannot be cast to date: 2015-02-29  presto&gt; select date '2016-12-32'; Query ... failed: Value cannot be cast to date: 2016-12-32 ``` </body>
		<created>2016-04-19 23:20:35</created>
		<closed>2016-04-29 01:42:39</closed>
	</bug>
	<bug>
		<id>5036</id>
		<title>Use proper error code for bucketing errors</title>
		<body>We should use a new error code in `BackgroundHiveSplitLoader.listAndSortBucketFiles()`. Something like `HIVE_INVALID_BUCKET_FILES`. </body>
		<created>2016-04-15 16:14:51</created>
		<closed>2016-04-18 18:15:58</closed>
	</bug>
	<bug>
		<id>5035</id>
		<title>testVerticalWideCharacterValue fails with LANG or file.encoding set to non-UTF-8</title>
		<body>Setting the LANG env variable or file.encoding to anything other than UTF-8 causes this test to fail:  ``` java.lang.AssertionError: expected [-[ RECORD 1 ]----- name | hello? bye ] but found [-[ RECORD 1 ]---- name | hello? bye ] &lt;Click to see difference&gt;       at org.testng.Assert.fail(Assert.java:94)     at org.testng.Assert.failNotEquals(Assert.java:494)     at org.testng.Assert.assertEquals(Assert.java:123)     at org.testng.Assert.assertEquals(Assert.java:176)     at org.testng.Assert.assertEquals(Assert.java:186)     at com.facebook.presto.cli.TestVerticalRecordPrinter.testVerticalWideCharacterValue(TestVerticalRecordPrinter.java:159)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)     at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)     at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)     at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)     at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)     at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)     at org.testng.TestRunner.privateRun(TestRunner.java:767)     at org.testng.TestRunner.run(TestRunner.java:617)     at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)     at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)     at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)     at org.testng.SuiteRunner.run(SuiteRunner.java:254)     at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)     at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)     at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)     at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)     at org.testng.TestNG.run(TestNG.java:1057)     at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:74)     at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:121)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) ``` </body>
		<created>2016-04-15 01:35:53</created>
		<closed>2019-01-19 06:10:04</closed>
	</bug>
	<bug>
		<id>5019</id>
		<title>testSelectPartitionedHiveTableDifferentFormats is flaky</title>
		<body>Just ran this test on my box 200 times, and saw no failures. However, Travis keeps randomly failing on this test. I'm also not sure what it's really meant to test. </body>
		<created>2016-04-14 02:26:44</created>
		<closed>2016-04-20 22:45:23</closed>
	</bug>
	<bug>
		<id>4991</id>
		<title>Handle hive.orc.use-column-names for empty files</title>
		<body>The Hive ORC writer creates the output file lazily. If there are no rows, the `close()` method creates a file without any columns (newer Hive versions create a zero byte file). This causes issues for `hive.orc.use-column-names`.  We should fix the column handling code to account for these "empty" files.  Additionally, for non-bucketed tables, the writer code could delete the file if no rows written, since the files have no purpose. </body>
		<created>2016-04-11 19:53:03</created>
		<closed>2016-04-22 23:54:43</closed>
	</bug>
	<bug>
		<id>4915</id>
		<title>Non-deterministic test failure in TestRaptorDistributedQueries.testCreateBucketedTable()</title>
		<body>This test seems to fail about 1 in 5000 runs  ``` java.lang.AssertionError: not equal Actual 1 rows:     [75] Expected 1 rows:     [100]       at org.testng.Assert.fail(Assert.java:94)     at com.facebook.presto.tests.QueryAssertions.assertEqualsIgnoreOrder(QueryAssertions.java:132)     at com.facebook.presto.tests.QueryAssertions.assertQuery(QueryAssertions.java:120)     at com.facebook.presto.tests.AbstractTestQueryFramework.assertQuery(AbstractTestQueryFramework.java:106)     at com.facebook.presto.raptor.TestRaptorDistributedQueries.testCreateBucketedTable(TestRaptorDistributedQueries.java:138) ``` </body>
		<created>2016-04-01 00:12:15</created>
		<closed>2018-06-07 10:16:44</closed>
	</bug>
	<bug>
		<id>4909</id>
		<title>Cannot insert null into table without explicit cast</title>
		<body>``` sql create table test (a bigint); insert into test (a) values (null); ```  ``` Query 20160331_004854_02765_vpwmu failed: Insert query has mismatched column types: Table: [bigint], Query: [unknown] com.facebook.presto.sql.analyzer.SemanticException: Insert query has mismatched column types: Table: [bigint], Query: [unknown]     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitInsert(StatementAnalyzer.java:583)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitInsert(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.Insert.accept(Insert.java:61)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:269)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:255)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:219)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-03-31 01:01:38</created>
		<closed>2016-04-01 21:22:20</closed>
	</bug>
	<bug>
		<id>4904</id>
		<title>Error during analysis in GROUP BY query with AT TIMEZONE</title>
		<body>``` sql SELECT MIN(x) AT TIME ZONE 'America/Chicago' from (VALUES now()) t(x); ```  ``` java.lang.UnsupportedOperationException: aggregation analysis not yet implemented for: com.facebook.presto.sql.tree.AtTimeZone     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:150)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:144)     at com.facebook.presto.sql.tree.AstVisitor.visitAtTimeZone(AstVisitor.java:542)     at com.facebook.presto.sql.tree.AtTimeZone.accept(AtTimeZone.java:59)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.process(AggregationAnalyzer.java:455)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer.analyze(AggregationAnalyzer.java:139)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.verifyAggregations(StatementAnalyzer.java:1791)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeAggregations(StatementAnalyzer.java:1749)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:1022)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:810)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:219)     at com.facebook.presto.sql.tree.Query.accept(Query.java:103)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:269)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:255)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:219)     at com.facebook.presto.execution.QueuedExecution.lambda$start$1(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-03-30 18:42:08</created>
		<closed>2016-03-31 02:20:35</closed>
	</bug>
	<bug>
		<id>4901</id>
		<title>try(cast(...)) fails with multiple predicates in a where clause</title>
		<body>When I run the following query:  ``` sql with example as (     select         id,         other_id     from (       values          (1, '23452'),          (3, '2354')     ) as t (id, other_id) )  select   try(cast(other_id as bigint)) as other_id from example where id = 1   and try(cast(other_id as bigint)) is not null ```  It produces the error message: `Compiler failed and interpreter is disabled`  When I remove the `id = 1` in the final query, the query works as expected. </body>
		<created>2016-03-30 17:16:59</created>
		<closed>2016-04-20 20:40:57</closed>
	</bug>
	<bug>
		<id>4869</id>
		<title>Potential deadlock when using phased scheduler with broadcast joins</title>
		<body>``` sql SELECT * FROM orders CROSS JOIN (VALUES 1); ```  ```  Fragment 0 [SINGLE]                                                                                                                                                                                                                      Output layout: [orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment, field]                                                                                                           Output partitioning: SINGLE []                                                                                                                                                                                                       - Output[orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment, _col9] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar, totalprice:double, orderdate:date, orderpriority:              _col9 := field                                                                                                                                                                                                                   - RemoteSource[1] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar, totalprice:double, orderdate:date, orderpriority:varchar, clerk:varchar, shippriority:bigint, comment:varchar, field:bigint]                      Fragment 1 [SOURCE]                                                                                                                                                                                                                      Output layout: [orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment, field]                                                                                                           Output partitioning: SINGLE []                                                                                                                                                                                                       - InnerJoin[] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar, totalprice:double, orderdate:date, orderpriority:varchar, clerk:varchar, shippriority:bigint, comment:varchar, field:bigint]                                     - TableScan[tpch:tpch:orders:sf1.0, originalConstraint = true] =&gt; [orderkey:bigint, custkey:bigint, orderstatus:varchar, totalprice:double, orderdate:date, orderpriority:varchar, clerk:varchar, shippriority:bigint, comm                  orderkey := tpch:orderkey                                                                                                                                                                                                            custkey := tpch:custkey                                                                                                                                                                                                              orderstatus := tpch:orderstatus                                                                                                                                                                                                      totalprice := tpch:totalprice                                                                                                                                                                                                        orderdate := tpch:orderdate                                                                                                                                                                                                          orderpriority := tpch:orderpriority                                                                                                                                                                                                  clerk := tpch:clerk                                                                                                                                                                                                                  shippriority := tpch:shippriority                                                                                                                                                                                                    comment := tpch:comment                                                                                                                                                                                                      - RemoteSource[2] =&gt; [field:bigint]                                                                                                                                                                                           Fragment 2 [SINGLE]                                                                                                                                                                                                                      Output layout: [field]                                                                                                                                                                                                               Output partitioning: BROADCAST []                                                                                                                                                                                                    - Values =&gt; [field:bigint]                                                                                                                                                                                                                   (1)    ```  The scheduling dependency graph is missing an edge (2-&gt;1), which can cause the join stage to be scheduled independently (and before) the build stage. </body>
		<created>2016-03-24 18:55:59</created>
		<closed>2016-03-24 23:11:54</closed>
	</bug>
	<bug>
		<id>4775</id>
		<title>Join using does not work with a self join</title>
		<body>``` presto:tiny&gt; explain select * from orders join orders using (orderkey); Query 20160314_204230_00004_guj48 failed: line 1:23: Relations appear more than once: [orders] com.facebook.presto.sql.analyzer.SemanticException: line 1:23: Relations appear more than once: [orders]     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitJoin(StatementAnalyzer.java:1118)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitJoin(StatementAnalyzer.java:220)     at com.facebook.presto.sql.tree.Join.accept(Join.java:87)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeFrom(StatementAnalyzer.java:1721)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:1014)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:220)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:811)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:220)     at com.facebook.presto.sql.tree.Query.accept(Query.java:103)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:129)     at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:91)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:792)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:773)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:220)     at com.facebook.presto.sql.tree.Explain.accept(Explain.java:73)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:258)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:244)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:208)     at com.facebook.presto.execution.QueuedExecution.lambda$start$259(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) explain select * from orders join orders using (orderkey) ``` </body>
		<created>2016-03-14 20:42:43</created>
		<closed>2016-12-09 01:36:22</closed>
	</bug>
	<bug>
		<id>4773</id>
		<title>Uncategorized error for OrcInputStream</title>
		<body>``` java.lang.IndexOutOfBoundsException: end index (3737344) must not be greater than size (13)     at io.airlift.slice.Preconditions.checkPositionIndexes(Preconditions.java:94)     at io.airlift.slice.Slice.checkIndexLength(Slice.java:1194)     at io.airlift.slice.Slice.slice(Slice.java:748)     at io.airlift.slice.BasicSliceInput.readSlice(BasicSliceInput.java:156)     at com.facebook.presto.orc.stream.OrcInputStream.advance(OrcInputStream.java:229)     at com.facebook.presto.orc.stream.OrcInputStream.read(OrcInputStream.java:131)     at com.facebook.presto.orc.stream.LongStreamV1.readValues(LongStreamV1.java:54)     at com.facebook.presto.orc.stream.LongStreamV1.next(LongStreamV1.java:90)     at com.facebook.presto.orc.stream.LongStreamV1.nextIntVector(LongStreamV1.java:199)     at com.facebook.presto.orc.reader.SliceDirectStreamReader.readBlock(SliceDirectStreamReader.java:124)     at com.facebook.presto.orc.reader.SliceStreamReader.readBlock(SliceStreamReader.java:53)     at com.facebook.presto.orc.OrcRecordReader.readBlock(OrcRecordReader.java:311)     at com.facebook.presto.hive.orc.OrcPageSource$OrcBlockLoader.load(OrcPageSource.java:316)     at com.facebook.presto.hive.orc.OrcPageSource$OrcBlockLoader.load(OrcPageSource.java:292)     at com.facebook.presto.spi.block.LazyBlock.assureLoaded(LazyBlock.java:249)     at com.facebook.presto.spi.block.LazyBlock.isNull(LazyBlock.java:225)     at com_facebook_presto_$gen_PageProcessor_4951.filter(Unknown Source)     at com_facebook_presto_$gen_PageProcessor_4951.process(Unknown Source)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:259)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:577)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:529)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:665)     ... 3 more ``` </body>
		<created>2016-03-14 17:44:50</created>
		<closed>2016-07-13 23:35:13</closed>
	</bug>
	<bug>
		<id>4771</id>
		<title>Failure in phased scheduler</title>
		<body>``` java.lang.UnsupportedOperationException: not yet implemented: com.facebook.presto.sql.planner.plan.ExchangeNode     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:282)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:160)     at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:197)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processJoin(PhasedExecutionSchedule.java:214)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitJoin(PhasedExecutionSchedule.java:195)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitJoin(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitFilter(PlanVisitor.java:35)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitAggregation(PlanVisitor.java:30)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:184)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.lambda$processFragment$478(PhasedExecutionSchedule.java:179)     at java.util.HashMap.computeIfAbsent(HashMap.java:1118)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:179)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitRemoteSource(PhasedExecutionSchedule.java:239)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitRemoteSource(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.RemoteSourceNode.accept(RemoteSourceNode.java:75)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:160)     at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:197)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitAggregation(PlanVisitor.java:30)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitProject(PlanVisitor.java:40)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:184)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.lambda$processFragment$478(PhasedExecutionSchedule.java:179)     at java.util.HashMap.computeIfAbsent(HashMap.java:1118)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:179)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitRemoteSource(PhasedExecutionSchedule.java:239)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitRemoteSource(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.RemoteSourceNode.accept(RemoteSourceNode.java:75)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:280)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.visitPlan(PhasedExecutionSchedule.java:163)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:184)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.lambda$processFragment$478(PhasedExecutionSchedule.java:179)     at java.util.HashMap.computeIfAbsent(HashMap.java:1118)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule$Visitor.processFragment(PhasedExecutionSchedule.java:179)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule.extractPhases(PhasedExecutionSchedule.java:135)     at com.facebook.presto.execution.scheduler.PhasedExecutionSchedule.&lt;init&gt;(PhasedExecutionSchedule.java:63)     at com.facebook.presto.execution.scheduler.PhasedExecutionPolicy.createExecutionSchedule(PhasedExecutionPolicy.java:26)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler.schedule(SqlQueryScheduler.java:319)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-03-14 16:48:56</created>
		<closed>2016-03-16 06:50:29</closed>
	</bug>
	<bug>
		<id>4715</id>
		<title>Implicit coercions not added for expressions involving scalar subquery</title>
		<body>``` sql select 1.0 / (select 1) ```  fails with  ``` Query 20160304_012302_02354_wqvkp failed: $operator$DIVIDE(double,bigint):double not found com.facebook.presto.spi.PrestoException: $operator$DIVIDE(double,bigint):double not found     at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:642)     at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:126)     at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer$Visitor.visitCall(ExpressionOptimizer.java:68)     at com.facebook.presto.sql.relational.CallExpression.accept(CallExpression.java:88)     at com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer.optimize(ExpressionOptimizer.java:65)     at com.facebook.presto.sql.relational.SqlToRowExpressionTranslator.translate(SqlToRowExpressionTranslator.java:128)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.toRowExpression(LocalExecutionPlanner.java:1159)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.lambda$visitScanFilterAndProject$242(LocalExecutionPlanner.java:1063)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:1064)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:992)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:561)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:584)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:561)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:335)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:272)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:147)     at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:109)     at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:73)     at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:255)     at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:270)     at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:115)     at sun.reflect.GeneratedMethodAccessor138.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:373)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:835)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1685)     at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:51)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:517)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)     at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-03-04 01:25:05</created>
		<closed>2016-12-16 22:00:46</closed>
	</bug>
	<bug>
		<id>4712</id>
		<title>Assumption violation in PredicatePushDown: join predicate to be a valid join equality</title>
		<body>``` Example: 20160303_003528_01426_vsmfh Expected join predicate to be a valid join equality java.lang.IllegalStateException com.google.common.base.Preconditions.checkState(Preconditions.java:173) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:340) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:248) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:199) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitAggregation(PredicatePushDown.java:791) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitAggregation(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:199) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:313) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:199) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:312) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitJoin(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:248) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitFilter(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:199) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitProject(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitMarkDistinct(PredicatePushDown.java:214) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitMarkDistinct(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.MarkDistinctNode.accept(MarkDistinctNode.java:94) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitAggregation(PredicatePushDown.java:791) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitAggregation(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$242(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitPlan(PredicatePushDown.java:143) com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.visitPlan(PredicatePushDown.java:117) com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:34) com.facebook.presto.sql.planner.optimizations.PredicatePushDown.optimize(PredicatePushDown.java:114) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:105) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:265) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:244) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:208) com.facebook.presto.execution.QueuedExecution.lambda$start$327(QueuedExecution.java:68) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-03-03 20:42:34</created>
		<closed>2016-03-04 22:37:24</closed>
	</bug>
	<bug>
		<id>4698</id>
		<title>Invalid plan for ORDER BY expression that refers to output column</title>
		<body>The following query produces an incorrect plan. It resolves `a` in the ORDER BY clause with respect to the FROM clause, but it should be using the output column from the SELECT clause, instead.  ``` sql SELECT 10/a AS a  FROM (VALUES 1,2,3) t(a)  ORDER BY 10/a ```  This is the resulting plan:  ``` presto&gt; explain select 10/a AS a FROM (VALUES 1,2,3) t(a) order by 10/a;                     Query Plan                     --------------------------------------------------  - Output[a] =&gt; [expr:bigint]                               a := expr                                      - Sort[expr ASC_NULLS_LAST] =&gt; [expr:bigint]           - Project =&gt; [expr:bigint]                                 expr := (10 / "field")                         - Values =&gt; [field:bigint]                                 (1)                                                (2)                                                (3) ```  From the SQL spec, section "6.6 &lt;identifier chain&gt;":  &gt; i) If IC [identifier chain] is contained in an `&lt;order by clause&gt;` simply contained in a `&lt;query expression&gt;` QE, and the `&lt;select list&gt;` simply contained in QE directly contains a `&lt;derived column&gt;` DC whose explicit or implicit `&lt;column name&gt;` is equivalent to IC, then PIC1 [partial identifier chain] is a candidate basis, the **scope of PIC1 is QE**, and the referent of PIC1 is the **column referenced by DC**. </body>
		<created>2016-03-03 01:28:16</created>
		<closed>2016-12-12 19:46:18</closed>
	</bug>
	<bug>
		<id>4639</id>
		<title>MergeProjections duplicates non-deterministic expressions</title>
		<body>For example:  ``` presto:tiny&gt; explain           -&gt; select r, r + 1           -&gt; from (select rand() r from orders);                                     Query Plan                                      -----------------------------------------------------------------------------------  - Output[r, _col1] =&gt; [rand:double, expr:double]                                            r := rand                                                                           _col1 := expr                                                                   - Exchange[GATHER] =&gt; rand:double, expr:double                                          - Project =&gt; [rand:double, expr:double]                                                     rand := "rand"()                                                                    expr := ("rand"() + 1.0)                                                        - TableScan[tpch:tpch:orders:sf0.01, originalConstraint = true] =&gt; []  ``` </body>
		<created>2016-02-24 21:14:42</created>
		<closed>2016-02-24 22:41:12</closed>
	</bug>
	<bug>
		<id>4604</id>
		<title>Raptor exception during rollback</title>
		<body>``` 2016-02-21T11:33:58.635-0800    ERROR   20160221_192849_19922_hcaf5.1.235-0-29308       com.facebook.presto.operator.Driver     Error closing operator 1 for task 20160221_192849_19922_hcaf5.1.235 java.lang.RuntimeException: Exception during rollback         at com.facebook.presto.raptor.RaptorPageSink.abort(RaptorPageSink.java:138)         at com.facebook.presto.operator.TableWriterOperator.close(TableWriterOperator.java:227)         at com.facebook.presto.operator.Driver.destroyIfNecessary(Driver.java:451)         at com.facebook.presto.operator.Driver.access$400(Driver.java:61)         at com.facebook.presto.operator.Driver$DriverLockResult.close(Driver.java:619)         at com.facebook.presto.operator.Driver.processFor(Driver.java:314)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:575)         at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)         at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745)         Suppressed: com.facebook.presto.spi.PrestoException: Failed to close writer                 at com.facebook.presto.raptor.storage.OrcFileWriter.close(OrcFileWriter.java:160)                 at com.facebook.presto.raptor.storage.OrcStorageManager$OrcStoragePageSink.rollback(OrcStorageManager.java:565)                 at com.facebook.presto.raptor.RaptorPageSink.abort(RaptorPageSink.java:141)                 ... 11 more         Caused by: java.io.IOException: Stream Closed                 at java.io.FileOutputStream.writeBytes(Native Method)                 at java.io.FileOutputStream.write(FileOutputStream.java:326)                 at com.facebook.presto.raptor.util.SyncingFileSystem$LocalFileOutputStream.write(SyncingFileSystem.java:90)                 at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)                 at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)                 at java.io.FilterOutputStream.close(FilterOutputStream.java:158)                 at org.apache.hadoop.fs.FSDataOutputStream$PositionCache.close(FSDataOutputStream.java:72)                 at org.apache.hadoop.fs.FSDataOutputStream.close(FSDataOutputStream.java:106)                 at org.apache.hadoop.hive.ql.io.orc.WriterImpl.close(WriterImpl.java:2429)                 at org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat$OrcRecordWriter.close(OrcOutputFormat.java:106)                 at com.facebook.presto.raptor.storage.OrcFileWriter.close(OrcFileWriter.java:157)                 ... 13 more ``` </body>
		<created>2016-02-22 17:13:50</created>
		<closed>2016-02-22 18:33:34</closed>
	</bug>
	<bug>
		<id>4585</id>
		<title>Uncategorized error for Raptor system table</title>
		<body>The catch block needs to be `catch (SQLException | DBIException e)`  ``` org.skife.jdbi.v2.exceptions.UnableToObtainConnectionException: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: ...     at org.skife.jdbi.v2.DBI.open(DBI.java:230)     at com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor.getTableIds(ShardMetadataRecordCursor.java:321)     at com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor.&lt;init&gt;(ShardMetadataRecordCursor.java:103)     at com.facebook.presto.raptor.systemtables.ShardMetadataSystemTable.cursor(ShardMetadataSystemTable.java:57)     at com.facebook.presto.connector.system.SystemRecordSetProvider$1.cursor(SystemRecordSetProvider.java:118)     at com.facebook.presto.split.MappedRecordSet.cursor(MappedRecordSet.java:53)     at com.facebook.presto.spi.RecordPageSource.&lt;init&gt;(RecordPageSource.java:37)     at com.facebook.presto.split.RecordPageSourceProvider.createPageSource(RecordPageSourceProvider.java:42)     at com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:48)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.createSourceIfNecessary(ScanFilterAndProjectOperator.java:287)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.isFinished(ScanFilterAndProjectOperator.java:180)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:377)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:575)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-18 23:44:38</created>
		<closed>2016-03-01 23:50:56</closed>
	</bug>
	<bug>
		<id>4580</id>
		<title>AddColumnTask check for existing column should be case insensitive</title>
		<body>I think the `containsKey(element.getName())` needs to be `element.getName().toLowerCase(ENGLISH)`.  This needs a test like this:  ``` sql CREATE TABLE test (foo bigint); ALTER TABLE test ADD COLUMN Foo bigint;  ``` </body>
		<created>2016-02-18 19:18:36</created>
		<closed>2016-04-11 15:07:51</closed>
	</bug>
	<bug>
		<id>4553</id>
		<title>duplication of column ordering specification</title>
		<body>A query which emits duplication of ordering terms will encounter an error.  select rank () over ( order by c1, c3, c3 ) from x.y.z  Error: Query failed (#20160215_152308_08739_tff7r): orderBy and orderings sizes don't match </body>
		<created>2016-02-15 15:24:29</created>
		<closed>2016-03-04 04:45:56</closed>
	</bug>
	<bug>
		<id>4532</id>
		<title>Unbounded varchar should not be serialized with length</title>
		<body>The fact that `varchar` is internally represented as `varchar(MAX_INT)` is an implementation detail that should not leak out and be permanently stored in external systems. It also breaks backwards compatibility with older clients, causes issues in clients that try to allocate a buffer of that size, etc. </body>
		<created>2016-02-11 00:33:51</created>
		<closed>2016-02-11 21:05:24</closed>
	</bug>
	<bug>
		<id>4522</id>
		<title>CAST of varchar(x) -&gt; varchar(y) should fail on truncation</title>
		<body>Per the spec (6.13 General Rules 11.c):  ``` 11) If TD is variable-length character string or large object character string, then let MLTD be the maximum length in characters of TD.  c) If SD is fixed-length character string, variable-length character string, or large object character string, then  ii) If the length in characters of SV is larger than LTD, then TV is the first LTD characters of SV.  If any of the remaining characters of SV are non-&lt;space&gt; characters, then a completion condition is raised: warning — string data, right truncation. ``` </body>
		<created>2016-02-09 23:03:44</created>
		<closed>2019-01-19 06:10:49</closed>
	</bug>
	<bug>
		<id>4506</id>
		<title>TimeZoneNotSupportedException should extend PrestoException</title>
		<body>`TimeZoneNotSupportedException` should extend `PrestoException` and use the `NOT_SUPPORTED` error code.  Also, we should change the error string so the zone is at the end:  ``` java "Time zone not supported: " + zoneId ``` </body>
		<created>2016-02-08 19:26:24</created>
		<closed>2016-02-11 23:02:12</closed>
	</bug>
	<bug>
		<id>4505</id>
		<title>Uncategorized error in random</title>
		<body>The bound should be validated with `checkCondition()`  ``` bound must be positive java.lang.IllegalArgumentException java.util.concurrent.ThreadLocalRandom.nextLong(ThreadLocalRandom.java:403) com.facebook.presto.operator.scalar.MathFunctions.random(MathFunctions.java:251) com_facebook_presto_$gen_PageProcessor_58535.project_0(Unknown Source) com_facebook_presto_$gen_PageProcessor_58535.process(Unknown Source) com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:259) com.facebook.presto.operator.Driver.processInternal(Driver.java:380) com.facebook.presto.operator.Driver.processFor(Driver.java:303) com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:580) com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505) com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 19:25:30</created>
		<closed>2016-03-13 04:06:52</closed>
	</bug>
	<bug>
		<id>4504</id>
		<title>Uncategorized error in InformationSchemaPageSourceProvider.buildPartitions()</title>
		<body>``` Table ... does not exist java.lang.IllegalArgumentException com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.buildPartitions(InformationSchemaPageSourceProvider.java:244) com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInformationSchemaTable(InformationSchemaPageSourceProvider.java:145) com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInternalTable(InformationSchemaPageSourceProvider.java:127) com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.createPageSource(InformationSchemaPageSourceProvider.java:85) com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:48) com.facebook.presto.operator.ScanFilterAndProjectOperator.createSourceIfNecessary(ScanFilterAndProjectOperator.java:287) com.facebook.presto.operator.ScanFilterAndProjectOperator.isFinished(ScanFilterAndProjectOperator.java:180) com.facebook.presto.operator.Driver.processInternal(Driver.java:377) com.facebook.presto.operator.Driver.processFor(Driver.java:303) com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:580) com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505) com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 19:23:53</created>
		<closed>2016-02-11 23:01:22</closed>
	</bug>
	<bug>
		<id>4503</id>
		<title>Error in from_utf8: Invalid code point</title>
		<body>``` Invalid code point 0xD800 io.airlift.slice.InvalidCodePointException io.airlift.slice.SliceUtf8.setCodePointAt(SliceUtf8.java:895) io.airlift.slice.SliceUtf8.fixInvalidUtf8(SliceUtf8.java:426) io.airlift.slice.SliceUtf8.fixInvalidUtf8(SliceUtf8.java:388) com.facebook.presto.operator.scalar.StringFunctions.fromUtf8(StringFunctions.java:411) java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627) java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:649) com.facebook.presto.sql.planner.ExpressionInterpreter.invoke(ExpressionInterpreter.java:1070) com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:824) com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:96) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:229) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:133) com.google.common.collect.Maps$7.transformEntry(Maps.java:1812) com.google.common.collect.Maps$10.getValue(Maps.java:1857) com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:92) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$136(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24) com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:29) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:67) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:101) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:261) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:240) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:204) com.facebook.presto.execution.QueuedExecution.lambda$start$262(QueuedExecution.java:68) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 19:21:38</created>
		<closed>2016-08-11 01:43:20</closed>
	</bug>
	<bug>
		<id>4502</id>
		<title>Should not allow creating views with unknown column types</title>
		<body>This should be disallowed since the type of column `foo` is unknown:  `create view xyz as select null as foo`  It currently succeeds. The schema resulting schema is:  ``` presto&gt; desc xyz;  Column |  Type   | Comment  --------+---------+---------  foo    | unknown |          (1 row) ``` </body>
		<created>2016-02-08 19:21:13</created>
		<closed>2016-04-22 21:38:07</closed>
	</bug>
	<bug>
		<id>4499</id>
		<title>Uncategorized error in DateTimeFunctions</title>
		<body>All of the methods in `DateTimeFunctions` that pass a user specified format string to Joda Time should transform `IllegalArgumentException` (see `dateParse()` in that class for an example).  ``` Illegal pattern component: i java.lang.IllegalArgumentException org.joda.time.format.DateTimeFormat.parsePatternTo(DateTimeFormat.java:566) org.joda.time.format.DateTimeFormat.createFormatterForPattern(DateTimeFormat.java:687) org.joda.time.format.DateTimeFormat.forPattern(DateTimeFormat.java:177) com.facebook.presto.operator.scalar.DateTimeFunctions.formatDatetime(DateTimeFunctions.java:499) com.facebook.presto.operator.scalar.DateTimeFunctions.formatDatetime(DateTimeFunctions.java:482) com_facebook_presto_$gen_PageProcessor_43511.project_1(Unknown Source) com_facebook_presto_$gen_PageProcessor_43511.process(Unknown Source) com.facebook.presto.operator.ScanFilterAndProjectOperator.getOutput(ScanFilterAndProjectOperator.java:259) com.facebook.presto.operator.Driver.processInternal(Driver.java:380) com.facebook.presto.operator.Driver.processFor(Driver.java:303) com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:580) com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505) com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 19:03:53</created>
		<closed>2016-07-19 16:55:30</closed>
	</bug>
	<bug>
		<id>4498</id>
		<title>Error: row_number():bigint is not a scalar function</title>
		<body>``` row_number():bigint is not a scalar function java.lang.IllegalArgumentException com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:555) com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:812) com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:96) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitComparisonExpression(ExpressionInterpreter.java:642) com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:91) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:229) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:133) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:100) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$136(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24) com.facebook.presto.sql.planner.plan.PlanVisitor.visitWindow(PlanVisitor.java:105) com.facebook.presto.sql.planner.plan.WindowNode.accept(WindowNode.java:171) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70) com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$136(SimplePlanRewriter.java:75) java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) java.util.Iterator.forEachRemaining(Iterator.java:116) java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24) com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81) com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:29) com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:67) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:101) com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:134) com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:91) com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:713) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:694) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:208) com.facebook.presto.sql.tree.Explain.accept(Explain.java:66) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:254) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:240) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:204) com.facebook.presto.execution.QueuedExecution.lambda$start$262(QueuedExecution.java:68) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 18:56:57</created>
		<closed>2016-02-08 19:02:03</closed>
	</bug>
	<bug>
		<id>4495</id>
		<title>Uncategorized error: OrcRecordReader IndexOutOfBoundsException</title>
		<body>``` Index: 0, Size: 0 java.lang.IndexOutOfBoundsException java.util.ArrayList.rangeCheck(ArrayList.java:653) java.util.ArrayList.get(ArrayList.java:429) java.util.Collections$UnmodifiableList.get(Collections.java:1309) com.facebook.presto.orc.reader.ListStreamReader.readBlock(ListStreamReader.java:123) com.facebook.presto.orc.OrcRecordReader.readBlock(OrcRecordReader.java:311) com.facebook.presto.hive.orc.OrcPageSource$OrcBlockLoader.load(OrcPageSource.java:325) com.facebook.presto.hive.orc.OrcPageSource$OrcBlockLoader.load(OrcPageSource.java:301) com.facebook.presto.spi.block.LazyBlock.assureLoaded(LazyBlock.java:249) com.facebook.presto.spi.Page.assureLoaded(Page.java:166) com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:249) com.facebook.presto.operator.Driver.processInternal(Driver.java:380) com.facebook.presto.operator.Driver.processFor(Driver.java:303) com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:580) com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505) com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 18:52:43</created>
		<closed>2016-02-23 21:14:00</closed>
	</bug>
	<bug>
		<id>4494</id>
		<title>Uncategorized error: Array creation from cast</title>
		<body>``` Array type expects exactly one type as a parameter, got [] java.lang.IllegalArgumentException com.google.common.base.Preconditions.checkArgument(Preconditions.java:145) com.facebook.presto.type.ArrayParametricType.createType(ArrayParametricType.java:43) com.facebook.presto.type.TypeRegistry.instantiateParametricType(TypeRegistry.java:161) com.facebook.presto.type.TypeRegistry.getType(TypeRegistry.java:122) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:764) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:196) com.facebook.presto.sql.tree.Cast.accept(Cast.java:78) com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:28) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:215) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:865) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:376) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:196) com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:91) com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:28) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:215) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.coerceType(ExpressionAnalyzer.java:890) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitLogicalBinaryExpression(ExpressionAnalyzer.java:360) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitLogicalBinaryExpression(ExpressionAnalyzer.java:196) com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:73) com.facebook.presto.sql.tree.StackableAstVisitor.process(StackableAstVisitor.java:28) com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:215) com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:188) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitJoin(StatementAnalyzer.java:1072) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitJoin(StatementAnalyzer.java:208) com.facebook.presto.sql.tree.Join.accept(Join.java:87) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeFrom(StatementAnalyzer.java:1604) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:932) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuerySpecification(StatementAnalyzer.java:208) com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:125) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:732) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:208) com.facebook.presto.sql.tree.Query.accept(Query.java:103) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:254) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:240) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:204) com.facebook.presto.execution.QueuedExecution.lambda$start$262(QueuedExecution.java:68) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-02-08 18:50:33</created>
		<closed>2016-05-09 23:32:46</closed>
	</bug>
	<bug>
		<id>4471</id>
		<title>NPE with IN (null, ...) predicate for varchar columns</title>
		<body>This query:  ``` SELECT count(*) FROM (values 'a') t(a) WHERE a in (null) ```  Fails with:  ``` java.lang.NullPointerException: value is null     at java.util.Objects.requireNonNull(Objects.java:228)     at com.facebook.presto.spi.predicate.NullableValue.of(NullableValue.java:44)     at com.facebook.presto.sql.planner.DomainTranslator$Visitor.visitComparisonExpression(DomainTranslator.java:365)     at com.facebook.presto.sql.planner.DomainTranslator$Visitor.visitComparisonExpression(DomainTranslator.java:231)     at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:91)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.DomainTranslator$Visitor.visitInPredicate(DomainTranslator.java:464)     at com.facebook.presto.sql.planner.DomainTranslator$Visitor.visitInPredicate(DomainTranslator.java:231)     at com.facebook.presto.sql.tree.InPredicate.accept(InPredicate.java:55)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.DomainTranslator.fromPredicate(DomainTranslator.java:228)     at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:149)     at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown$Rewriter.visitFilter(WindowFilterPushDown.java:82)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$145(SimplePlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext$$Lambda$298/694797030.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitAggregation(PlanVisitor.java:30)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$145(SimplePlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext$$Lambda$298/694797030.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:34)     at com.facebook.presto.sql.planner.optimizations.WindowFilterPushDown.optimize(WindowFilterPushDown.java:79)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:103)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:265)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:244)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:208)     at com.facebook.presto.execution.QueuedExecution.lambda$start$229(QueuedExecution.java:68)     at com.facebook.presto.execution.QueuedExecution$$Lambda$260/1982974131.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This is a regression in trunk. </body>
		<created>2016-02-03 19:54:35</created>
		<closed>2016-02-04 01:50:48</closed>
	</bug>
	<bug>
		<id>4459</id>
		<title>Fix Hive AlreadyExists exceptions</title>
		<body>This classes `TableAlreadyExistsException` and `ViewAlreadyExistsException` should extend `PrestoException` directly and use `ALREADY_EXISTS` as the error code. </body>
		<created>2016-02-01 07:11:55</created>
		<closed>2016-02-16 00:00:25</closed>
	</bug>
	<bug>
		<id>4448</id>
		<title>Categorize error for negative approx_percentile weight</title>
		<body>All the input methods in `ApproximateLongPercentileAggregations` that take a weight should validate that it is `&gt; 0` with an error like `percentile weight must be &gt; 0`. Use a shared helper method (so the error message isn't repeated) that calls `checkCondition`.  ``` java.lang.IllegalArgumentException: count must be &gt; 0     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at io.airlift.stats.QuantileDigest.add(QuantileDigest.java:148)     at com.facebook.presto.operator.aggregation.ApproximateLongPercentileAggregations.weightedInput(ApproximateLongPercentileAggregations.java:70)     at com.facebook.presto.operator.aggregation.ApproximateDoublePercentileAggregations.weightedInput(ApproximateDoublePercentileAggregations.java:50)     at com_facebook_presto_$gen_DoubleDoubleBigintDoubleApproxPercentileGroupedAccumulator_54157.addInput(Unknown Source)     at com.facebook.presto.operator.HashAggregationOperator$Aggregator.processPage(HashAggregationOperator.java:421)     at com.facebook.presto.operator.HashAggregationOperator$GroupByHashAggregationBuilder.processPage(HashAggregationOperator.java:318)     at com.facebook.presto.operator.HashAggregationOperator$GroupByHashAggregationBuilder.access$200(HashAggregationOperator.java:277)     at com.facebook.presto.operator.HashAggregationOperator.addInput(HashAggregationOperator.java:231)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:386)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:573)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2016-01-29 17:23:38</created>
		<closed>2016-04-22 21:38:30</closed>
	</bug>
	<bug>
		<id>4421</id>
		<title>Validate column order when creating Hive tables</title>
		<body>Partition columns for Hive tables are always at the end because Hive works that way. When creating a table, the creation should fail if the columns are not in the final order (having `CREATE TABLE` silently rearrange columns is quite unexpected).  We should use a new error code for this: `HIVE_COLUMN_ORDER_MISMATCH`  This should fail because the partition column is listed first, but will be at the end in the final table:  ``` CREATE TABLE test (   ds varchar,   x bigint) WITH (partitioned_by = ARRAY['ds']); ```  This should fail because the partition columns are listed in a different order than in the partition specification:  ``` CREATE TABLE test (   x bigint,   type varchar,   ds varchar) WITH (partitioned_by = ARRAY['ds', 'type']); ``` </body>
		<created>2016-01-25 17:25:27</created>
		<closed>2016-02-03 21:31:08</closed>
	</bug>
	<bug>
		<id>4414</id>
		<title>Web UI query detail view doesn't show contents at Safari after 0.133 </title>
		<body>Web UI doesn’t seems to work anymore at 0.133 in Safari (9.0.3) as it uses javascript lambda expression. It looks fine in Chrome(47.0.2526) and Firefox(43.0.4)  ![screen shot 2016-01-22 at 1 31 08 pm](https://cloud.githubusercontent.com/assets/725129/12523555/71f13b34-c10c-11e5-945c-f05e97bb2a66.png) ![2179a69429124fbac0cf549003adf074](https://cloud.githubusercontent.com/assets/725129/12523560/79eaaa8c-c10c-11e5-99cd-15af6496fcb5.png) </body>
		<created>2016-01-22 21:35:31</created>
		<closed>2016-01-22 22:49:18</closed>
	</bug>
	<bug>
		<id>4367</id>
		<title>Fix equals / hashCode / toString for ShowSchemas</title>
		<body>`catalog` should be used by all of these methods but is not </body>
		<created>2016-01-19 17:02:14</created>
		<closed>2016-08-12 10:50:37</closed>
	</bug>
	<bug>
		<id>4361</id>
		<title>Performance regression in map dereference</title>
		<body>Between 0.132 and 0.133, queries with a map dereference are over 10x slower. The map type is `map&lt;varchar, varchar&gt;`. </body>
		<created>2016-01-18 21:42:24</created>
		<closed>2016-01-21 20:57:58</closed>
	</bug>
	<bug>
		<id>4328</id>
		<title>Do not allow calling procedure in read-only mode</title>
		<body>`CallTask` should have an additional check to prevent running a procedure in read-only mode, since the expected use of procedures is to modify some system or connector state.  This probably requires another method `isReadOnly()` added to `QueryStateMachine` that delegates to some additional methods in `TransactionManager` and `TransactionMetadata`. </body>
		<created>2016-01-13 03:02:53</created>
		<closed>2016-01-15 19:57:00</closed>
	</bug>
	<bug>
		<id>4275</id>
		<title>Raptor shards system table has bogus min/max timestamp for date column</title>
		<body>The table has a temporal column of type `date` with a range of `2015-12-31` to `2016-01-01` but the min/max timestamps are reported as `16:00:16.800` and `1969-12-31 16:00:16.801`. </body>
		<created>2016-01-05 00:33:04</created>
		<closed>2016-02-02 21:10:20</closed>
	</bug>
	<bug>
		<id>4262</id>
		<title>Add "start" to non-reserved words</title>
		<body>The changes to add transaction support (https://github.com/facebook/presto/pull/4187) broke support for parsing the word `start`. It needs to be added to the non-reserved words.  ``` presto&gt; select 1 as start; ```  fails with:  ``` Query 20160102_200936_00000_pvvtp failed: line 1:13: no viable alternative at input 'start' com.facebook.presto.sql.parser.ParsingException: line 1:13: no viable alternative at input 'start'     at com.facebook.presto.sql.parser.SqlParser$1.syntaxError(SqlParser.java:45)     at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:65)     at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:566)     at org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:308)     at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:145)     at com.facebook.presto.sql.parser.SqlBaseParser.identifier(SqlBaseParser.java:8370)     at com.facebook.presto.sql.parser.SqlBaseParser.selectItem(SqlBaseParser.java:3415)     at com.facebook.presto.sql.parser.SqlBaseParser.querySpecification(SqlBaseParser.java:2523)     at com.facebook.presto.sql.parser.SqlBaseParser.queryPrimary(SqlBaseParser.java:2296)     at com.facebook.presto.sql.parser.SqlBaseParser.queryTerm(SqlBaseParser.java:2108)     at com.facebook.presto.sql.parser.SqlBaseParser.queryNoWith(SqlBaseParser.java:1949)     at com.facebook.presto.sql.parser.SqlBaseParser.query(SqlBaseParser.java:1639)     at com.facebook.presto.sql.parser.SqlBaseParser.statement(SqlBaseParser.java:930)     at com.facebook.presto.sql.parser.SqlBaseParser.singleStatement(SqlBaseParser.java:218)     at com.facebook.presto.sql.parser.SqlParser$$Lambda$197/733976264.apply(Unknown Source)     at com.facebook.presto.sql.parser.SqlParser.invokeParser(SqlParser.java:92)     at com.facebook.presto.sql.parser.SqlParser.createStatement(SqlParser.java:65)     at com.facebook.presto.execution.SqlQueryManager.createQuery(SqlQueryManager.java:278)     at com.facebook.presto.server.StatementResource$Query.&lt;init&gt;(StatementResource.java:286)     at com.facebook.presto.server.StatementResource.createQuery(StatementResource.java:167)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:373)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)     at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)     at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:63)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:52)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.Server.handle(Server.java:499)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)     at java.lang.Thread.run(Thread.java:745) Caused by: org.antlr.v4.runtime.NoViableAltException     at com.facebook.presto.sql.parser.SqlBaseParser.identifier(SqlBaseParser.java:8365)     ... 65 more ``` </body>
		<created>2016-01-02 20:14:26</created>
		<closed>2016-01-04 23:12:38</closed>
	</bug>
	<bug>
		<id>4232</id>
		<title>View is stale immediately after creation</title>
		<body>Presto version is  presto-server-0.123  user My config ： connector.name=hive-cdh5 hive.metastore.uri=thrift://HADOOP1:9083 1. I  operated CREATE VIEW  view_nginx_log AS  2. CREATE OR REPLACE VIEW  view_nginx_log AS     SELECT   ip,...  USER,    TIME,...line_no    FROM    (SELECT  ip, ..  USER,      TIME,..url_extract_parameter(url,'lineNo') AS line_no    FROM      txt_nginx     WHERE DATE = '20151224'       AND HOUR = '15'     UNION    ALL     SELECT  ip, .....url_extract_parameter(url,'lineNo') AS line_no      FROM    orc_nginx_log); 3. select \* from view_nginx_log    show me a error: 【Query 20151224_093318_00023_wvykb failed: View 'hive.default.view_nginx_log' is stale; it must be re-created】  I  drop the view and re-created ，see the same error。 i think  【USER, TIME】  sources of errors </body>
		<created>2015-12-24 09:59:14</created>
		<closed>2018-10-29 22:45:29</closed>
	</bug>
	<bug>
		<id>4219</id>
		<title>Hive INSERT creates files with the wrong data type</title>
		<body>Presto writes the data to the file as a `bigint` but the partition column type is `int`:  ``` hive&gt; create table if not exists test_presto_int (dummy INT, name STRING) partitioned by (ds STRING);  presto&gt; insert into test_presto_int select 3 as dummy, 'abc' as name, '2015-12-21' as ds;  hive&gt; describe formatted test_presto_int partition (ds='2015-12-21'); ... dummy                   int                     None                 ...  hive&gt; select * from test_presto_int where ds='2015-12-21'; OK Failed with exception java.io.IOException:java.lang.ClassCastException: org.apache.hadoop.io.LongWritable cannot be cast to org.apache.hadoop.io.IntWritable Time taken: 9.664 seconds ``` </body>
		<created>2015-12-21 23:53:03</created>
		<closed>2016-02-09 00:53:08</closed>
	</bug>
	<bug>
		<id>4209</id>
		<title>Exception in SqlQueryScheduler</title>
		<body>This happened when I ran the query while the cluster was starting, probably before any of the workers were online.  ``` java.lang.IndexOutOfBoundsException: Index: 0, Size: 0     at java.util.ArrayList.rangeCheck(ArrayList.java:653)     at java.util.ArrayList.get(ArrayList.java:429)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler.createStages(SqlQueryScheduler.java:191)     at com.facebook.presto.execution.scheduler.SqlQueryScheduler.&lt;init&gt;(SqlQueryScheduler.java:102)     at com.facebook.presto.execution.SqlQueryExecution.planDistribution(SqlQueryExecution.java:300)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:207)     at com.facebook.presto.execution.QueuedExecution.lambda$start$269(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-12-18 17:14:38</created>
		<closed>2015-12-28 16:51:09</closed>
	</bug>
	<bug>
		<id>4201</id>
		<title>ABS returns the wrong value for Long.MIN_VALUE</title>
		<body>ISO 9075-2 Section 2.28 (8)(c):  &gt; Otherwise, the result is –1 \* N. If –1 \* N is not representable by the result data type, then an exception condition is raised: _data exception — numeric value out of range_.  We should add a new user error `NUMERIC_VALUE_OUT_OF_RANGE` </body>
		<created>2015-12-17 19:53:59</created>
		<closed>2015-12-28 16:50:02</closed>
	</bug>
	<bug>
		<id>4190</id>
		<title>Require at least one non-partition column for Hive tables</title>
		<body></body>
		<created>2015-12-16 20:29:42</created>
		<closed>2016-02-16 00:00:05</closed>
	</bug>
	<bug>
		<id>4186</id>
		<title>Query fails with "Position tracker is closed"</title>
		<body>``` java.lang.IllegalStateException: Position tracker is closed     at com.google.common.base.Preconditions.checkState(Preconditions.java:173)     at com.facebook.presto.operator.LookupOuterOperator$OuterPositionTracker.visit(LookupOuterOperator.java:394)     at com.facebook.presto.operator.LookupOuterOperator$OuterLookupSource.appendTo(LookupOuterOperator.java:329)     at com.facebook.presto.operator.LookupJoinOperator.joinCurrentPosition(LookupJoinOperator.java:202)     at com.facebook.presto.operator.LookupJoinOperator.getOutput(LookupJoinOperator.java:157)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:573)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-12-16 09:33:54</created>
		<closed>2018-04-13 20:00:19</closed>
	</bug>
	<bug>
		<id>4161</id>
		<title>Support views in JDBC connectors</title>
		<body>I think the problem is that the `getTables()` method in `BaseJdbcClient` needs to include `"VIEW"` in the list of types passed to `DatabaseMetaData.getTables()`. </body>
		<created>2015-12-14 17:21:17</created>
		<closed>2016-08-12 10:49:35</closed>
	</bug>
	<bug>
		<id>4122</id>
		<title>Insert into partitioned table fails with NPE if partition column not populated</title>
		<body>``` sql CREATE TABLE t (     x varchar,      y varchar )  WITH (partitioned_by = ARRAY['y']); ```  ``` sql INSERT INTO t (x) VALUES ('a'); ```  ``` java.lang.NullPointerException     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.hive.HivePageSink.createWriter(HivePageSink.java:287)     at com.facebook.presto.hive.HivePageSink.appendPage(HivePageSink.java:272)     at com.facebook.presto.spi.classloader.ClassLoaderSafeConnectorPageSink.appendPage(ClassLoaderSafeConnectorPageSink.java:41)     at com.facebook.presto.operator.TableWriterOperator.addInput(TableWriterOperator.java:176)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:386)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:587)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This piece of code in `HivePageSink.createWriter()` is the culprit:  ``` java List&lt;String&gt; partitionValues = partitionRow.stream()     .map(Object::toString) // todo this seems wrong     .collect(toList()); ``` </body>
		<created>2015-12-08 01:44:39</created>
		<closed>2015-12-28 20:50:05</closed>
	</bug>
	<bug>
		<id>4054</id>
		<title>Throw exception when using SESSION commands from JDBC</title>
		<body>We can consider supporting these in addition to the `setSessionProperty()` method on `PrestoConnection`, but at the very least, we should throw an exception rather than silently ignoring them. </body>
		<created>2015-11-30 13:18:04</created>
		<closed>2016-07-21 14:50:11</closed>
	</bug>
	<bug>
		<id>4043</id>
		<title>The node_id column in deleted_shard_nodes should not be nullable</title>
		<body>The table tracks shards for a node, so it should be `NOT NULL`. Being nullable is probably a leftover from when the same table was used for local and global shards (during development of the feature). </body>
		<created>2015-11-26 15:53:27</created>
		<closed>2015-12-01 02:11:24</closed>
	</bug>
	<bug>
		<id>4042</id>
		<title>Raptor local shard cleanup should only mark shards for current node</title>
		<body>The calls in `ShardCleaner` to `updateCleanedShardNodes()` and `updatePurgedShardNodes()` should take the current node ID. It is updating the shard for all nodes rather than just the local node. </body>
		<created>2015-11-26 15:50:20</created>
		<closed>2015-12-01 04:00:51</closed>
	</bug>
	<bug>
		<id>4008</id>
		<title>Array constructor with too many values causes ClassFormatError</title>
		<body>Queries that contain very large array constructors cause bytecode to be generated that contains too many method arguments.  ``` SELECT ARRAY['1','1','1','2','1','1','-1','1','1','1','1','1','-1','1','1','1','1','1','1','1','1','1','-1','1','-1','1','1','1','1','1','1','1','-1','-1','-1','1','-1','1','-1','3','-1','1','1','1','1','-1','-1','1','1','-1','-1','1','1','1','1','1','-1','1','1','1','1','1','-1','-1','1','-1','1','-1','1','1','1','-1','1','1','-1','1','1','-1','1','-1','-1','-1','1','1','-1','1','1','1','1','1','-1','1','-1','1','-1','1','1','1','1','-1','-1','-1','1','-1','-1','-1','1','1','1','-1','1','-1','-1','-1','-1','1','-1','-1','-1','1','-1','1','1','3','1','-1','-1','1','-1','-1','1','-1','-1','1','1','1','-1','-1','-1','1','1','1','-1','1','1','1','1','-1','-1','-1','1','-1','1','-1','3','-1','-1','1','-1','1','1','-1','-1','3','-1','1','-1','-1','-1','1','-1','-1','1','1','1','1','1','-1','1','1','-1','-1','-1','1','1','1','-1','1','-1','1','1','1','-1','-1','1','1','-1','-1','-1','-1','1','-1','-1','1','-1','1','1','-1','1','-1','-1','1','1','-1','-1','-1','-1','1','1','1','-1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','-1','-1','-1','-1','1','-1','1','-1','-1','1','3','-1','-1','1','1','3','1','1','1','1','1','1','1','1','-1','1','1','3','3','1','1','1','-1','-1','1','1','1','3','1','1','1','1','1','1','1','1','1','1','1','1','1','1','-1','1','1','1','1','1','1','1','3','1','1','1','1','1','1','1','1','1','1','1','1','-1','1','1','1','1','1','-1','1','3','1','1','1','1','1','3','1','3','1','1','1','1','3','-1','-1','-1','1','1','1','-1','-1','-1','-1','-1','1','-1','1','1','3','1','1','1','1','-1','-1','3','1','1','3','-1','1','1','1','-1','-1','1','1','1','-1','1','1','1','-1','1','3','1','1','1','1','3','3','-1','1','1','-1','3','3','1','1','3','-1','-1','1','1','-1','-1','1','1','3','1','-1','3','3','1','1','3','1','1','1','3','3','1','1','3','3','3','1','1','1','1','-1','-1','1','1','3','1','1','3','3','1','1','3','3','1','-1','1','1','1','1','-1','1','1','1','1','1','3','3','-1','-1','-1','1','-1','1','1','3','1','3','1','1','1','1','1','3','1','1','-1','1','3','3','3','1','1','3','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','3','1','3','3','1','1','1','1','1','1','1','1','1','1','1','1','1','3','3','1','1']; ```  fails with  ``` com.google.common.util.concurrent.ExecutionError: java.lang.ClassFormatError: Too many arguments in method signature i n class file com_facebook_presto_$gen_SliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSlice SliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSli ceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceS liceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSlic eSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSl iceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSlice SliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSli ceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceSliceS liceSliceSliceSliceSliceSliceSliceSlice         at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2201)         at com.google.common.cache.LocalCache.get(LocalCache.java:3937)         at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)         at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)         at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830)         at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:586)         at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java: 798)         at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitArrayConstructor(ExpressionInterpreter.j ava:940)         at com.facebook.presto.sql.tree.ArrayConstructor.accept(ArrayConstructor.java:54)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:251)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpre ssions.java:133)         at com.google.common.collect.Maps$7.transformEntry(Maps.java:1812)         at com.google.common.collect.Maps$10.getValue(Maps.java:1857)         at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions .java:92)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions .java:70)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions .java:91)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions .java:70)         at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)         at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:97)         at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions .java:91) ... ``` </body>
		<created>2015-11-20 19:32:36</created>
		<closed>2015-12-29 20:56:33</closed>
	</bug>
	<bug>
		<id>3979</id>
		<title>Bad error message when window function is used in HAVING clause</title>
		<body>``` sql SELECT count(*) OVER () FROM (VALUES 1)  HAVING count(*) OVER () &gt; 1 ```  fails with:  ``` count():bigint is not a scalar function ```  full stacktrace:  ``` java.lang.IllegalArgumentException: count():bigint is not a scalar function     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.metadata.FunctionRegistry.getScalarFunctionImplementation(FunctionRegistry.java:546)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:798)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:70)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitComparisonExpression(ExpressionInterpreter.java:628)     at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:77)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:251)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:133)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:100)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitFilter(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:111)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitWindow(PlanVisitor.java:105)     at com.facebook.presto.sql.planner.plan.WindowNode.accept(WindowNode.java:171)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:111)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:111)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:111)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:111)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:28)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:67)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:98)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:266)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$201(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This might be related to the changes in eb3d13eb0b1ec96802d338bab9f069b124166512 </body>
		<created>2015-11-17 17:12:43</created>
		<closed>2017-11-23 17:48:40</closed>
	</bug>
	<bug>
		<id>3951</id>
		<title>Categorize exception for invalid Raptor $shard_uuid value</title>
		<body>``` sql SELECT * FROM orders WHERE "$shard_uuid" = '4c9415cb-c37d-4bad-b8ac-952670948fa1 '; ```  ``` java.lang.NumberFormatException: For input string: "952670948fa1 "     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Long.parseLong(Long.java:589)     at java.lang.Long.valueOf(Long.java:776)     at java.lang.Long.decode(Long.java:928)     at java.util.UUID.fromString(UUID.java:206)     at com.facebook.presto.raptor.util.UuidUtil.uuidStringToBytes(UuidUtil.java:138)     at com.facebook.presto.raptor.metadata.ShardPredicate.create(ShardPredicate.java:113)     at com.facebook.presto.raptor.metadata.ShardIterator.&lt;init&gt;(ShardIterator.java:61)     at com.facebook.presto.raptor.metadata.DatabaseShardManager.getShardNodes(DatabaseShardManager.java:338)     at com.facebook.presto.raptor.RaptorSplitManager$RaptorSplitSource.&lt;init&gt;(RaptorSplitManager.java:136)     at com.facebook.presto.raptor.RaptorSplitManager.getSplits(RaptorSplitManager.java:94)     at com.facebook.presto.split.SplitManager.getSplits(SplitManager.java:59)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitTableScan(DistributedExecutionPlanner.java:99)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitTableScan(DistributedExecutionPlanner.java:85)     at com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitFilter(DistributedExecutionPlanner.java:149)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitFilter(DistributedExecutionPlanner.java:85)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitProject(DistributedExecutionPlanner.java:207)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner$Visitor.visitProject(DistributedExecutionPlanner.java:85)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:71)     at com.facebook.presto.sql.planner.DistributedExecutionPlanner.plan(DistributedExecutionPlanner.java:76)     at com.facebook.presto.execution.SqlQueryExecution.planDistribution(SqlQueryExecution.java:291)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:215)     at com.facebook.presto.execution.QueuedExecution.lambda$start$213(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-11-11 23:29:14</created>
		<closed>2016-02-25 19:53:13</closed>
	</bug>
	<bug>
		<id>3939</id>
		<title>Input symbols do not match output symbols</title>
		<body>``` java.lang.IllegalArgumentException: Input symbols do not match output symbols     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.sql.planner.plan.ExchangeNode.&lt;init&gt;(ExchangeNode.java:71)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.pushProjectionThrough(ProjectionPushDown.java:164)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.visitProject(ProjectionPushDown.java:78)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.visitProject(ProjectionPushDown.java:57)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitJoin(PlanVisitor.java:85)     at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitFilter(PlanVisitor.java:35)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:155)     at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:161)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:100)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$130(PlanRewriter.java:74)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:39)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:23)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:28)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown.optimize(ProjectionPushDown.java:54)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:98)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:266)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$201(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-11-10 21:11:16</created>
		<closed>2015-11-10 21:12:22</closed>
	</bug>
	<bug>
		<id>3937</id>
		<title>Invalid plan for JOIN</title>
		<body>``` SELECT   * FROM   (SELECT     x,     sin(x)   FROM     (values 1, 2, 3) t(x)) t JOIN   (SELECT     x,     sin(x)   FROM     (values 1, 2, 3) u(x)) u ON   t.x = u.x; ```  In `ProjectPushDown.pushProjectionThrough`, `projections` is a map but `outputBuilder` is a list. As a result, `projections.getKey()` and `outputBuilder.build()` will not be the same even if they were fed the same inputs when some of the inputs are duplicate.  For this query, the duplicate join criteria was produced by `PredicatePushDown.processInnerJoin`  ``` java.lang.IllegalArgumentException: Input symbols do not match output symbols     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.sql.planner.plan.ExchangeNode.&lt;init&gt;(ExchangeNode.java:71)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.pushProjectionThrough(ProjectionPushDown.java:165)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.visitProject(ProjectionPushDown.java:79)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown$Rewriter.visitProject(ProjectionPushDown.java:58)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$106(SimplePlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext$$Lambda$468/950410549.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitJoin(PlanVisitor.java:85)     at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:159)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$106(SimplePlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext$$Lambda$468/950410549.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitExchange(PlanVisitor.java:155)     at com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:161)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.rewrite(SimplePlanRewriter.java:86)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.lambda$defaultRewrite$106(SimplePlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext$$Lambda$468/950410549.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter$RewriteContext.defaultRewrite(SimplePlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.visitPlan(SimplePlanRewriter.java:24)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.plan.SimplePlanRewriter.rewriteWith(SimplePlanRewriter.java:29)     at com.facebook.presto.sql.planner.optimizations.ProjectionPushDown.optimize(ProjectionPushDown.java:55)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:101)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:266)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$170(QueuedExecution.java:68)     at com.facebook.presto.execution.QueuedExecution$$Lambda$399/184162826.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-11-10 19:47:07</created>
		<closed>2015-11-11 21:18:55</closed>
	</bug>
	<bug>
		<id>3935</id>
		<title>Invalid plan for CROSS JOIN UNNEST</title>
		<body>``` EXPLAIN   SELECT     y   FROM (       (VALUES array[1, 2], array[3])     UNION ALL       (VALUES array[4, 5], array[6])   ) t(x)   CROSS JOIN     UNNEST(x) u(y) GROUP BY y ```  `AddExchanges.visitUnnest` does not exist. But it should exist and should check the preferred properties and filter the newly generated output symbol out.  ``` Query 20151110_185357_00006_f7iy7 failed: index (0) must be less than size (0) java.lang.IndexOutOfBoundsException: index (0) must be less than size (0)     at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:310)     at com.google.common.base.Preconditions.checkElementIndex(Preconditions.java:292)     at com.google.common.collect.RegularImmutableList.get(RegularImmutableList.java:65)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitUnion(AddExchanges.java:945)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitUnion(AddExchanges.java:173)     at com.facebook.presto.sql.planner.plan.UnionNode.accept(UnionNode.java:133)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:970)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitPlan(AddExchanges.java:200)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitPlan(AddExchanges.java:173)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitUnnest(PlanVisitor.java:135)     at com.facebook.presto.sql.planner.plan.UnnestNode.accept(UnnestNode.java:105)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:970)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:246)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitAggregation(AddExchanges.java:173)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:180)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.planChild(AddExchanges.java:970)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:222)     at com.facebook.presto.sql.planner.optimizations.AddExchanges$Rewriter.visitOutput(AddExchanges.java:173)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.optimizations.AddExchanges.optimize(AddExchanges.java:135)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:101)     at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:134)     at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:91)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:711)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:692)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:208)     at com.facebook.presto.sql.tree.Explain.accept(Explain.java:54)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:259)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$170(QueuedExecution.java:68)     at com.facebook.presto.execution.QueuedExecution$$Lambda$399/184162826.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-11-10 18:58:36</created>
		<closed>2015-11-19 20:35:06</closed>
	</bug>
	<bug>
		<id>3898</id>
		<title>Running USE in CLI resets session properties</title>
		<body></body>
		<created>2015-11-05 00:36:01</created>
		<closed>2015-11-20 01:02:28</closed>
	</bug>
	<bug>
		<id>3893</id>
		<title>Correctly handle modification operations for Hive external tables</title>
		<body>My understanding is that Hive external tables are basically read-only views of externally managed data. Creating or dropping an external table or partition merely modifies the metadata in the Hive metastore. Given this assumption, it seems that INSERT or DELETE operations should not be allowed for external tables. </body>
		<created>2015-11-04 20:21:04</created>
		<closed>2016-12-07 15:24:59</closed>
	</bug>
	<bug>
		<id>3861</id>
		<title>PageTooLargeException at Pages fetch</title>
		<body>I encountered PageTooLargeException with a simple query like `select * from tab` having hundreds of `bigint` columns.   `PartitionBuffer.getPages` returns from queued pages to the max size. But the size calculation is based on the Page's memory bytes not from encode bytes.  A quick solution is considering pages encoding margin and making `sink.max-buffer-size` a bit smaller than `exchange.http-client.max-content-length`. Or using applying the margin `long maxBytes = maxSize.toBytes() * 0.9`  Otherwise it needs to calculate encoded pages size more accurately. I've built and tested this idea,  https://github.com/miniway/presto/commit/d93e4cc1e2b2d5492eb78187cb17ca0f82904fd0#diff-40bc792c679d741860824ecb5a6b2f94L96 </body>
		<created>2015-10-29 21:50:08</created>
		<closed>2016-08-24 03:24:14</closed>
	</bug>
	<bug>
		<id>3860</id>
		<title>NPE in HivePageSink</title>
		<body>``` java.lang.NullPointerException         at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)         at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)         at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)         at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)         at com.facebook.presto.hive.HivePageSink.createWriter(HivePageSink.java:283)         at com.facebook.presto.hive.HivePageSink.appendPage(HivePageSink.java:270)         at com.facebook.presto.spi.classloader.ClassLoaderSafeConnectorPageSink.appendPage(ClassLoaderSafeConnectorPageSink.java:41)         at com.facebook.presto.operator.TableWriterOperator.addInput(TableWriterOperator.java:176)         at com.facebook.presto.operator.Driver.processInternal(Driver.java:386)         at com.facebook.presto.operator.Driver.processFor(Driver.java:303)         at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:587)         at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)         at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-10-29 21:47:32</created>
		<closed>2015-12-28 20:50:08</closed>
	</bug>
	<bug>
		<id>3825</id>
		<title>Planning error for query with HAVING clause</title>
		<body>The following query:  ``` sql SELECT a, count(1)  FROM (VALUES 1,2,3) t(a) GROUP BY a HAVING count(1) &gt; 1  ```  Fails with:  ``` java.lang.IllegalArgumentException: Invalid node. Predicate dependencies ([count_3, expr_2]) not in source plan output ([a, count, count_3])     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.sql.planner.PlanSanityChecker.checkDependencies(PlanSanityChecker.java:494)     at com.facebook.presto.sql.planner.PlanSanityChecker.access$100(PlanSanityChecker.java:63)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitFilter(PlanSanityChecker.java:189)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitFilter(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:209)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:209)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:209)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:209)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitOutput(PlanSanityChecker.java:259)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitOutput(PlanSanityChecker.java:72)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker.validate(PlanSanityChecker.java:69)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:95)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:266)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$171(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This works in version 0.123 </body>
		<created>2015-10-24 18:17:38</created>
		<closed>2015-11-19 22:55:31</closed>
	</bug>
	<bug>
		<id>3824</id>
		<title>Analysis error when referencing column from subquery</title>
		<body>The following query  ``` sql SELECT x  FROM (    SELECT a.x    FROM (VALUES 1,2,3) a(x) )  GROUP BY x ```  Fails with   ``` com.facebook.presto.sql.analyzer.SemanticException: Column '"x"' cannot be resolved     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.createMissingAttributeException(ExpressionAnalyzer.java:349)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitQualifiedNameReference(ExpressionAnalyzer.java:288)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitQualifiedNameReference(ExpressionAnalyzer.java:216)     at com.facebook.presto.sql.tree.QualifiedNameReference.accept(QualifiedNameReference.java:39)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:189)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:1048)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeExpression(TupleAnalyzer.java:1162)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:951)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:364)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:141)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:615)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:126)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:259)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$171(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  This works in version 0.123, so it could be related to the changes in db5ea91. </body>
		<created>2015-10-24 17:53:00</created>
		<closed>2015-11-19 22:56:11</closed>
	</bug>
	<bug>
		<id>3823</id>
		<title>Planning failure for group by query with field dereference</title>
		<body>Given a table with the following shape:  ``` t (    x array&lt;row(key varchar, value bigint)&gt; ) ```  This query:  ``` SELECT x[1].key, count(1)  FROM t  GROUP BY 1  ORDER BY 2 ```  Fails with:  ``` java.lang.IllegalArgumentException: No mapping for expression: "x"[1]."key"     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.sql.planner.TranslationMap.get(TranslationMap.java:153)     at com.facebook.presto.sql.planner.TranslationMap.get(TranslationMap.java:165)     at com.facebook.presto.sql.planner.PlanBuilder.translate(PlanBuilder.java:63)     at com.facebook.presto.sql.planner.QueryPlanner.aggregate(QueryPlanner.java:386)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuerySpecification(QueryPlanner.java:131)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuerySpecification(QueryPlanner.java:80)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:394)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:94)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:151)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuery(QueryPlanner.java:107)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuery(QueryPlanner.java:80)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:381)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:94)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:204)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:89)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:266)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$171(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  If `key` is no de-referenced, the query works fine. This works on version 0.123, so this could be related to the changes in db5ea9183412656f9cbf2e8a9302666ac323143d </body>
		<created>2015-10-24 17:46:10</created>
		<closed>2015-11-19 22:56:23</closed>
	</bug>
	<bug>
		<id>3735</id>
		<title>Regex fails with ArrayIndexOutOfBoundsException</title>
		<body>``` presto&gt; select REGEXP_LIKE('a' ,'a.*\b'); Query ... failed: 1 java.lang.ArrayIndexOutOfBoundsException: 1     at io.airlift.jcodings.MultiByteEncoding.safeLengthForUptoFour(MultiByteEncoding.java:64)     at io.airlift.jcodings.specific.NonStrictUTF8Encoding.length(NonStrictUTF8Encoding.java:30)     at io.airlift.jcodings.specific.BaseUTF8Encoding.mbcToCode(BaseUTF8Encoding.java:91)     at io.airlift.jcodings.specific.NonStrictUTF8Encoding.mbcToCode(NonStrictUTF8Encoding.java:22)     at io.airlift.jcodings.Encoding.isMbcWord(Encoding.java:469)     at io.airlift.joni.ByteCodeMachine.opWordBound(ByteCodeMachine.java:1063)     at io.airlift.joni.ByteCodeMachine.matchAt(ByteCodeMachine.java:239)     at io.airlift.joni.Matcher.matchCheck(Matcher.java:304)     at io.airlift.joni.Matcher.searchInterruptible(Matcher.java:457)     at io.airlift.joni.Matcher.search(Matcher.java:318)     at com.facebook.presto.operator.scalar.RegexpFunctions.regexpLike(RegexpFunctions.java:73)     at com_facebook_presto_$gen_PageProcessor_4069.project_0(Unknown Source)     at com_facebook_presto_$gen_PageProcessor_4069.process(Unknown Source)     at com.facebook.presto.operator.FilterAndProjectOperator.getOutput(FilterAndProjectOperator.java:91)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:380)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:587)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:640)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-10-08 21:42:22</created>
		<closed>2019-04-04 13:58:00</closed>
	</bug>
	<bug>
		<id>3734</id>
		<title>Views created with uppercase column reference cannot be queried</title>
		<body>The bug seems to be related to column references:  ``` presto&gt; create view test as select x.FOO from (select 123 foo) x; CREATE VIEW  presto&gt; select * from test; Query ... failed: View 'test' is stale; it must be re-created  presto&gt; describe test;  Column |  Type  | Null | Partition Key | Comment  --------+--------+------+---------------+---------  foo    | bigint | true | false         |          (1 row) ```  Note that the following works:  ``` create view test_dphillips as select 123 FOO; ``` </body>
		<created>2015-10-08 21:25:42</created>
		<closed>2017-04-19 18:57:38</closed>
	</bug>
	<bug>
		<id>3714</id>
		<title>Invalid plan produced for this query</title>
		<body>`EXPLAIN SELECT APPROX_PERCENTILE(0.5,x) med_x, AVG(x) avg_x FROM (values 1, 2, 3) t(x);`  ``` java.lang.IllegalArgumentException: Invalid node. Aggregation dependencies ([field_1]) not in source plan output ([expr, x])     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.sql.planner.PlanSanityChecker.checkDependencies(PlanSanityChecker.java:485)     at com.facebook.presto.sql.planner.PlanSanityChecker.access$100(PlanSanityChecker.java:62)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitAggregation(PlanSanityChecker.java:99)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitAggregation(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:160)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:208)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:208)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:208)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:208)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitProject(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitOutput(PlanSanityChecker.java:258)     at com.facebook.presto.sql.planner.PlanSanityChecker$Visitor.visitOutput(PlanSanityChecker.java:71)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:81)     at com.facebook.presto.sql.planner.PlanSanityChecker.validate(PlanSanityChecker.java:68)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:94)     at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:134)     at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:91)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:587)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:568)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:124)     at com.facebook.presto.sql.tree.Explain.accept(Explain.java:54)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:60)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:259)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:245)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:209)     at com.facebook.presto.execution.QueuedExecution.lambda$start$117(QueuedExecution.java:68)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-10-06 17:47:16</created>
		<closed>2015-10-20 23:55:08</closed>
	</bug>
	<bug>
		<id>3666</id>
		<title>CLI doesn't reset properly with multi-line query in debug mode</title>
		<body>Steps to reproduce: 1. Run cli with --debug 2. Run a multi-line query 3. CTRL-C  The output will look like:  ``` presto&gt; select count(*)          -&gt; from table;  Query 20150924_004635_00285_k9mtd, RUNNING, 88 nodes, 290 splits http://x.y.z.w:8080/v1/query/20150924_004635_00285_k9mtd?pretty Splits: 1,137 total, 807 done (70.98%)done CPU Time: 4.2s total,  3.3M rows/s, 7.34GB/s, 9% activee Per Node: 0.0 parallelism, 24.5K rows/s, 55.6MB/s Parallelism: 0.7 0:06 [13.8M rows, 30.7GB] [2.15M rows/s, 4.78GB/s] [    &lt;=&gt;                                   ]  Query aborted by userOWS/s  BYTES  BYTES/s  QUEUED    RUN   DONE presto&gt;       0       0     0B       0B       1      0      0   1.......S  1.73M    490K  3.43G     993M     114     45    130 ``` </body>
		<created>2015-09-24 00:50:05</created>
		<closed>2015-12-08 20:07:23</closed>
	</bug>
	<bug>
		<id>3654</id>
		<title>Exception on CLI </title>
		<body>``` presto&gt; show tables from raptor.system;  Table --------  shards (1 row)  Query 20150922_190632_00002_88uiv, FINISHED, 1 node http://localhost:8080/v1/query/20150922_190632_00002_88uiv?pretty Splits: 2 total, 2 done (100.00%) CPU Time: 0.0s total,   111 rows/s, 3.25KB/s, 81% active Per Node: 0.1 parallelism,     7 rows/s,   223B/s Parallelism: 0.1 0:00 [1 rows, 30B] [7 rows/s, 223B/s]  presto&gt; [ERROR] Failed to disable interrupt character java.lang.InterruptedException     at java.lang.Object.wait(Native Method)     at java.lang.Object.wait(Object.java:502)     at java.lang.UNIXProcess.waitFor(UNIXProcess.java:396)     at jline.internal.TerminalLineSettings.waitAndCapture(TerminalLineSettings.java:339)     at jline.internal.TerminalLineSettings.exec(TerminalLineSettings.java:311)     at jline.internal.TerminalLineSettings.stty(TerminalLineSettings.java:282)     at jline.internal.TerminalLineSettings.undef(TerminalLineSettings.java:158)     at jline.UnixTerminal.disableInterruptCharacter(UnixTerminal.java:153)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2445)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2372)     at com.facebook.presto.cli.LineReader.readLine(LineReader.java:51)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2360)     at com.facebook.presto.cli.Console.runConsole(Console.java:149)     at com.facebook.presto.cli.Console.run(Console.java:128)     at com.facebook.presto.cli.Presto.main(Presto.java:32)  [ERROR] Failed to disable litteral next character java.lang.InterruptedException     at java.lang.Object.wait(Native Method)     at java.lang.Object.wait(Object.java:502)     at java.lang.UNIXProcess.waitFor(UNIXProcess.java:396)     at jline.internal.TerminalLineSettings.waitAndCapture(TerminalLineSettings.java:339)     at jline.internal.TerminalLineSettings.exec(TerminalLineSettings.java:311)     at jline.internal.TerminalLineSettings.stty(TerminalLineSettings.java:282)     at jline.internal.TerminalLineSettings.undef(TerminalLineSettings.java:158)     at jline.UnixTerminal.disableLitteralNextCharacter(UnixTerminal.java:185)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2448)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2372)     at com.facebook.presto.cli.LineReader.readLine(LineReader.java:51)     at jline.console.ConsoleReader.readLine(ConsoleReader.java:2360)     at com.facebook.presto.cli.Console.runConsole(Console.java:149)     at com.facebook.presto.cli.Console.run(Console.java:128)     at com.facebook.presto.cli.Presto.main(Presto.java:32) ``` </body>
		<created>2015-09-22 19:07:56</created>
		<closed>2016-01-03 08:52:42</closed>
	</bug>
	<bug>
		<id>3646</id>
		<title>Duplicate DistinctLimitNode in query plan</title>
		<body>When explain distinct limit query, the plan looks like below There are duplicate DistinctLimit in the plan.  ``` presto:orc&gt; explain select distinct l_orderkey from lineitem limit 10;                                                                                 Query Plan                                                                                  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------  - Output[l_orderkey] =&gt; [l_orderkey:bigint]                                                                                                                                     - DistinctLimit[10] =&gt; [l_orderkey:bigint, $hashvalue:bigint]                                                                                                                   - Exchange[GATHER] =&gt; l_orderkey:bigint, $hashvalue:bigint                                                                                                                      - DistinctLimit[10] =&gt; [l_orderkey:bigint, $hashvalue:bigint]                                                                                                                   - DistinctLimit[10] =&gt; [l_orderkey:bigint, $hashvalue:bigint]                                                                                                                   - Project =&gt; [l_orderkey:bigint, $hashvalue:bigint]                                                                                                                                 $hashvalue := "combine_hash"(0, COALESCE("$operator$hash_code"("l_orderkey"), 0))                                                                                       - TableScan[hive:hive:orc:lineitem, originalConstraint = true] =&gt; [l_orderkey:bigint]                                                                                               LAYOUT: hive                                                                                                                                                                l_orderkey := HiveColumnHandle{clientId=hive, name=l_orderkey, ordinalPosition=0, hiveType=bigint, hiveColumnIndex=0, partitionKey=false} ``` </body>
		<created>2015-09-22 04:26:58</created>
		<closed>2015-10-20 23:22:25</closed>
	</bug>
	<bug>
		<id>3603</id>
		<title>Hive connector: sort bucketed tables not handled correctly</title>
		<body>User on mailing list reported that reading from a sort bucketed table does not work properly: https://groups.google.com/forum/#!topic/presto-users/PjohcRjcbZw  We need a test for this case in `AbstractTestHiveClient` </body>
		<created>2015-09-14 22:56:53</created>
		<closed>2019-01-13 07:12:19</closed>
	</bug>
	<bug>
		<id>3569</id>
		<title>`is distinct from` does not provide expected result for arrays containing null</title>
		<body>`select array[1] is distinct from array[cast (null as bigint)]` should return false. It fails now. </body>
		<created>2015-09-09 00:46:26</created>
		<closed>2016-10-28 00:14:22</closed>
	</bug>
	<bug>
		<id>3568</id>
		<title>GroupBy shouldn't use equalTo</title>
		<body>This query fails because `Type.equalTo` is used instead of `is distinct from` in group by. However, `is distinct from` as is implemented today is not an operator.  ``` select x from (values (array[1], 0), (array[2], 0), (array[cast (null as bigint)], 0)) t(x,y) group by x; ``` </body>
		<created>2015-09-09 00:45:04</created>
		<closed>2018-06-22 22:05:56</closed>
	</bug>
	<bug>
		<id>3553</id>
		<title>Raptor staging directory is not cleaned up when query fails</title>
		<body>Nodes can accumulate quite a lot of dead staging data between restarts. </body>
		<created>2015-09-06 06:49:31</created>
		<closed>2016-02-22 22:42:39</closed>
	</bug>
	<bug>
		<id>3507</id>
		<title>Filtering for information_schema fails with uppercase</title>
		<body>``` select * from system.information_schema.columns where table_schema = 'FOO'; select * from system.information_schema.columns where table_schema = 'runtime' and table_name = 'FOO';  java.lang.IllegalArgumentException: schemaName is not lowercase     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:145)     at com.facebook.presto.metadata.MetadataUtil.checkLowerCase(MetadataUtil.java:94)     at com.facebook.presto.metadata.MetadataUtil.checkLowerCase(MetadataUtil.java:86)     at com.facebook.presto.metadata.MetadataUtil.checkSchemaName(MetadataUtil.java:58)     at com.facebook.presto.metadata.MetadataUtil.checkTableName(MetadataUtil.java:40)     at com.facebook.presto.metadata.QualifiedTablePrefix.&lt;init&gt;(QualifiedTablePrefix.java:57)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.extractQualifiedTablePrefix(InformationSchemaPageSourceProvider.java:324)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getColumnsList(InformationSchemaPageSourceProvider.java:182)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.buildColumns(InformationSchemaPageSourceProvider.java:156)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInformationSchemaTable(InformationSchemaPageSourceProvider.java:132)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.getInternalTable(InformationSchemaPageSourceProvider.java:126)     at com.facebook.presto.connector.informationSchema.InformationSchemaPageSourceProvider.createPageSource(InformationSchemaPageSourceProvider.java:87)     at com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:48)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.createSourceIfNecessary(ScanFilterAndProjectOperator.java:254)     at com.facebook.presto.operator.ScanFilterAndProjectOperator.isFinished(ScanFilterAndProjectOperator.java:169)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:377)     at com.facebook.presto.operator.Driver.processFor(Driver.java:303)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:587)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:505)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:639)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745)  ``` </body>
		<created>2015-08-27 19:32:31</created>
		<closed>2016-08-12 10:13:15</closed>
	</bug>
	<bug>
		<id>3371</id>
		<title>Dereference of array in row throws exception in LocalExecutionPlanner</title>
		<body>``` java assertQuery("SELECT a.col1[1] FROM (VALUES ROW(test_row(TRUE, ARRAY [1], MAP(ARRAY[1, 3], ARRAY[2.0, 4.0])))) as t(a)"); ```  ``` java.lang.IllegalArgumentException: Can't create a symbol from a qualified name with prefix     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.sql.planner.Symbol.fromQualifiedName(Symbol.java:52)     at com.facebook.presto.sql.planner.SymbolToInputRewriter.rewriteQualifiedNameReference(SymbolToInputRewriter.java:42)     at com.facebook.presto.sql.planner.SymbolToInputRewriter.rewriteQualifiedNameReference(SymbolToInputRewriter.java:28)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitQualifiedNameReference(ExpressionTreeRewriter.java:606)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitQualifiedNameReference(ExpressionTreeRewriter.java:56)     at com.facebook.presto.sql.tree.QualifiedNameReference.accept(QualifiedNameReference.java:39)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitSubscriptExpression(ExpressionTreeRewriter.java:164)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitSubscriptExpression(ExpressionTreeRewriter.java:56)     at com.facebook.presto.sql.tree.SubscriptExpression.accept(SubscriptExpression.java:35)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)     at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewriteWith(ExpressionTreeRewriter.java:29)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:859)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:802)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:407)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:430)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:407)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:239)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:165) ``` </body>
		<created>2015-07-29 19:28:57</created>
		<closed>2015-10-24 18:55:09</closed>
	</bug>
	<bug>
		<id>3357</id>
		<title>Can't concat an Array with an empty Array.</title>
		<body>Concat an Array with an empty Array will failed because we can't cast the empty Array to the type of the non-empty array.  ``` presto:tiny&gt; select ARRAY[1] || ARRAY[]; Query 20150727_073421_00004_25tug failed: Can not cast array&lt;unknown&gt; to array&lt;bigint&gt; com.facebook.presto.spi.PrestoException: Can not cast array&lt;unknown&gt; to array&lt;bigint&gt;     at com.facebook.presto.operator.scalar.ArrayToArrayCast.specialize(ArrayToArrayCast.java:81)     at com.facebook.presto.metadata.FunctionRegistry$1.load(FunctionRegistry.java:224)     at com.facebook.presto.metadata.FunctionRegistry$1.load(FunctionRegistry.java:219)     at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)     at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)     at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)     at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)     at com.google.common.cache.LocalCache.get(LocalCache.java:3937)     at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)     at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)     at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830)     at com.facebook.presto.metadata.FunctionRegistry.getExactFunction(FunctionRegistry.java:512)     at com.facebook.presto.metadata.FunctionRegistry.getCoercion(FunctionRegistry.java:552)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:750)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:211)     at com.facebook.presto.sql.tree.Cast.accept(Cast.java:61)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:230)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:681)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:211)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:70)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:184)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:1010)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithSymbols(ExpressionAnalyzer.java:982)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:944)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypes(ExpressionAnalyzer.java:934)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:131)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter$$Lambda$251/554780878.apply(Unknown Source)     at com.google.common.collect.Maps$7.transformEntry(Maps.java:1812)     at com.google.common.collect.Maps$10.getValue(Maps.java:1857)     at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:92)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:99)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:110)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:99)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:110)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:99)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:110)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:91)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:70)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:99)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$41(PlanRewriter.java:73)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext$$Lambda$247/34398165.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:74)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:38)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:22)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:27)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:67)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:93)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:258)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:237)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:201)     at com.facebook.presto.execution.QueuedExecution.lambda$start$61(QueuedExecution.java:68)     at com.facebook.presto.execution.QueuedExecution$$Lambda$236/1947247162.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-07-27 10:47:47</created>
		<closed>2016-05-09 23:18:09</closed>
	</bug>
	<bug>
		<id>3249</id>
		<title>NullPointerException when using APPROXIMATE AT</title>
		<body>I tried to use APPROXIMATE query but it throws NullPointerException.  Query is  `select count(*) from lineitem APPROXIMATE AT 95.0 CONFIDENCE`  Error message is  ``` java.lang.NullPointerException     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.buildAccumulatorFactory(LocalExecutionPlanner.java:1623)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.planGlobalAggregation(LocalExecutionPlanner.java:1634)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:687)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:410)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:160)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:242)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:165)     at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:114)     at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:77)     at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:229)     at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:265)     at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:103)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:373)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)     at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)     at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:62)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:51)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.Server.handle(Server.java:499)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-07-13 03:00:44</created>
		<closed>2016-12-07 08:14:28</closed>
	</bug>
	<bug>
		<id>3201</id>
		<title>EXPLAIN fails when partition keys are of date/time type</title>
		<body>This seems to happen when the domain of the partition is converted to a string because the coercion for those types requires a `ConnectorSession` to be provided.  ``` cannot convert MethodHandle(ConnectorSession,long)Slice to (Object)Object java.lang.invoke.WrongMethodTypeException java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:773) java.lang.invoke.MethodHandle.asType(MethodHandle.java:759) java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:625) com.facebook.presto.sql.planner.PlanPrinter.formatDomain(PlanPrinter.java:611) com.facebook.presto.sql.planner.PlanPrinter.printConstraint(PlanPrinter.java:591) com.facebook.presto.sql.planner.PlanPrinter.access$200(PlanPrinter.java:89) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:412) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitTableScan(PlanPrinter.java:186) com.facebook.presto.sql.planner.plan.TableScanNode.accept(TableScanNode.java:135) com.facebook.presto.sql.planner.PlanPrinter$Visitor.processChildren(PlanPrinter.java:576) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitExchange(PlanPrinter.java:556) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitExchange(PlanPrinter.java:186) com.facebook.presto.sql.planner.plan.ExchangeNode.accept(ExchangeNode.java:148) com.facebook.presto.sql.planner.PlanPrinter$Visitor.processChildren(PlanPrinter.java:576) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitOutput(PlanPrinter.java:485) com.facebook.presto.sql.planner.PlanPrinter$Visitor.visitOutput(PlanPrinter.java:186) com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79) com.facebook.presto.sql.planner.PlanPrinter.&lt;init&gt;(PlanPrinter.java:108) com.facebook.presto.sql.planner.PlanPrinter.&lt;init&gt;(PlanPrinter.java:96) com.facebook.presto.sql.planner.PlanPrinter.textLogicalPlan(PlanPrinter.java:119) com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:61) com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:497) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:478) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:115) com.facebook.presto.sql.tree.Explain.accept(Explain.java:54) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:252) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:238) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:202) com.facebook.presto.execution.QueuedExecution.lambda$start$130(QueuedExecution.java:68) com.facebook.presto.execution.QueuedExecution$$Lambda$252/1593766152.run(Unknown Source) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-06-30 18:35:18</created>
		<closed>2016-03-16 18:01:52</closed>
	</bug>
	<bug>
		<id>3184</id>
		<title>UNION query fails for UnknownType</title>
		<body>With configuration  ``` optimizer.optimize-hash-generation=true ```  This query fails  ``` (VALUES NULL) UNION (VALUES NULL) ```  Stack trace  ``` com.facebook.presto.spi.PrestoException: Compiler failed and interpreter is disabled     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:909)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:808)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:410)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:705)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:410)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:160)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:242)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:164)     at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:115)     at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:80)     at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:229)     at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:265)     at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:103)     at sun.reflect.GeneratedMethodAccessor537.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:373)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)     at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)     at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:62)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:51)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.Server.handle(Server.java:499)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)     at java.lang.Thread.run(Thread.java:745) Caused by: com.google.common.util.concurrent.UncheckedExecutionException: java.lang.ArrayIndexOutOfBoundsException: -1     at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2203)     at com.google.common.cache.LocalCache.get(LocalCache.java:3937)     at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)     at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4824)     at com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(LocalCache.java:4830)     at com.facebook.presto.sql.gen.ExpressionCompiler.compilePageProcessor(ExpressionCompiler.java:87)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:897)     ... 63 more Caused by: java.lang.ArrayIndexOutOfBoundsException: -1     at org.objectweb.asm.Frame.a(Unknown Source)     at org.objectweb.asm.MethodWriter.visitMaxs(Unknown Source)     at com.facebook.presto.byteCode.MethodDefinition.visit(MethodDefinition.java:253)     at com.facebook.presto.byteCode.MethodDefinition.visit(MethodDefinition.java:207)     at com.facebook.presto.byteCode.ClassDefinition.visit(ClassDefinition.java:158)     at com.facebook.presto.sql.gen.CompilerUtils.defineClasses(CompilerUtils.java:100)     at com.facebook.presto.sql.gen.CompilerUtils.defineClass(CompilerUtils.java:74)     at com.facebook.presto.sql.gen.CompilerUtils.defineClass(CompilerUtils.java:80)     at com.facebook.presto.sql.gen.ExpressionCompiler.compileProcessor(ExpressionCompiler.java:130)     at com.facebook.presto.sql.gen.ExpressionCompiler.compileAndInstantiate(ExpressionCompiler.java:93)     at com.facebook.presto.sql.gen.ExpressionCompiler.access$300(ExpressionCompiler.java:42)     at com.facebook.presto.sql.gen.ExpressionCompiler$1.load(ExpressionCompiler.java:53)     at com.facebook.presto.sql.gen.ExpressionCompiler$1.load(ExpressionCompiler.java:48)     at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3527)     at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2319)     at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2282)     at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2197)     ... 69 more ``` </body>
		<created>2015-06-26 20:07:48</created>
		<closed>2015-07-23 22:14:40</closed>
	</bug>
	<bug>
		<id>3173</id>
		<title>Analyzer error when row field reference is used in aggregation query</title>
		<body>The following query (add it to AbstractTestQueries)  ``` SELECT a.col0, count(*) FROM (VALUES ROW(test_row(1, 1))) t(a) ```  fails with an exception instead of "a.col0 not in GROUP BY clause":  ``` java.lang.IllegalStateException: No fields for name 'a.col0'     at com.google.common.base.Preconditions.checkState(Preconditions.java:197)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitQualifiedNameReference(AggregationAnalyzer.java:339)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitQualifiedNameReference(AggregationAnalyzer.java:133)     at com.facebook.presto.sql.tree.QualifiedNameReference.accept(QualifiedNameReference.java:39)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.process(AggregationAnalyzer.java:428)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer.analyze(AggregationAnalyzer.java:128)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.verifyAggregations(TupleAnalyzer.java:1024)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeAggregations(TupleAnalyzer.java:987)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:358)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:135)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:520)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:115)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.testing.LocalQueryRunner.createDrivers(LocalQueryRunner.java:362)     at com.facebook.presto.testing.LocalQueryRunner.execute(LocalQueryRunner.java:324)     at com.facebook.presto.tests.AbstractTestQueryFramework.computeActual(AbstractTestQueryFramework.java:83)     at com.facebook.presto.tests.AbstractTestQueryFramework.computeActual(AbstractTestQueryFramework.java:78)     at com.facebook.presto.tests.AbstractTestQueries.testSomething(AbstractTestQueries.java:4292) ``` </body>
		<created>2015-06-25 18:50:29</created>
		<closed>2015-10-24 18:54:26</closed>
	</bug>
	<bug>
		<id>3171</id>
		<title>Bad error message when casting to parametric type without type parameters</title>
		<body>``` SELECT CAST(NULL AS MAP); ```  Fails with:  ``` Query 20150625_162057_09252_bhbmd failed: Expected two types java.lang.IllegalArgumentException: Expected two types     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.type.MapParametricType.createType(MapParametricType.java:41)     at com.facebook.presto.type.MapParametricType.createType(MapParametricType.java:23)     at com.facebook.presto.type.TypeRegistry.instantiateParametricType(TypeRegistry.java:136)     at com.facebook.presto.type.TypeRegistry.getType(TypeRegistry.java:110)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:726)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:206)     at com.facebook.presto.sql.tree.Cast.accept(Cast.java:61)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:179)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:1018)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeExpression(TupleAnalyzer.java:1106)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:913)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:353)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:135)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:520)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:115)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:252)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:238)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:202)     at com.facebook.presto.execution.QueuedExecution.lambda$start$130(QueuedExecution.java:68)     at com.facebook.presto.execution.QueuedExecution$$Lambda$237/901458406.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-06-25 16:28:14</created>
		<closed>2016-05-09 23:34:21</closed>
	</bug>
	<bug>
		<id>2875</id>
		<title>date_format using %w (day of week) returns incorrect values (1-7, not 0-6)</title>
		<body>When using `date_format`, with the %w specifier (for day of week), we get incorrect values:  ``` presto:default&gt; select date_format(date_parse('2015-05-03 11:00', '%Y-%m-%d %H:%i'), '%w');  _col0 -------  7 (1 row) ```  According to the documentation:  ``` %w  Day of the week (0 .. 6), where Sunday is the first day of the week ```  2015-05-03 was a Sunday, so we should expect this to return 0, not 7. Also, 7 is out of range of the values expected according to the documentation.  Testing with a date known to be a Monday:  ``` presto:default&gt; select date_format(date_parse('2015-05-04 11:00', '%Y-%m-%d %H:%i'), '%w');  _col0 -------  1 (1 row) ```  Is this a documentation bug, or an actual bug?  (Presto version is 0.101) </body>
		<created>2015-05-06 17:41:14</created>
		<closed>2016-09-12 21:01:37</closed>
	</bug>
	<bug>
		<id>2783</id>
		<title>Field reference operator does not work for field names with uppercase letters</title>
		<body>The field reference operator should follow the same resolution rules as all other identifiers. This bug is most likely because `RowParametricType.createFunctions` does not lower case the function name. </body>
		<created>2015-04-24 16:26:41</created>
		<closed>2015-05-04 22:59:38</closed>
	</bug>
	<bug>
		<id>2671</id>
		<title>Add error codes to QueryError</title>
		<body>`QueryError.errorCode` is currently always set to `0`. It should be set to the correct error code. Additionally, we should add `errorName` (from `ErrorCode.name`) and `errorType`. </body>
		<created>2015-04-09 22:18:30</created>
		<closed>2015-04-17 23:58:17</closed>
	</bug>
	<bug>
		<id>2402</id>
		<title>Bad error message for invalid type</title>
		<body>``` presto&gt; select cast(null as array&lt;foo&gt;); Query 20150225_002641_00750_u2hj3 failed: null java.lang.NullPointerException     at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)     at com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(ImmutableCollection.java:339)     at com.google.common.collect.ImmutableList$Builder.add(ImmutableList.java:652)     at com.facebook.presto.type.TypeRegistry.instantiateParametricType(TypeRegistry.java:125)     at com.facebook.presto.type.TypeRegistry.getType(TypeRegistry.java:110)     at com.facebook.presto.metadata.MetadataManager.getType(MetadataManager.java:141)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:700)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:181)     at com.facebook.presto.sql.tree.Cast.accept(Cast.java:61)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:178)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:992)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeExpression(TupleAnalyzer.java:1064)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:867)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:347)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:132)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:98)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:502)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:114)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:184)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:145)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QueryQueue.lambda$null$42(SqlQueryManager.java:473)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QueryQueue$$Lambda$162/80977279.run(Unknown Source)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2015-02-25 00:27:48</created>
		<closed>2015-03-02 20:40:28</closed>
	</bug>
	<bug>
		<id>2330</id>
		<title>Detect quick worker restarts and fail queries immediately</title>
		<body>When a worker restart, the engine may not notice the change and wait for work that will never complete.  An easy fix for this is to add the node instance id to task info and then the `HttpRemoteTask` would see the change and fail the task.  This issue is identified by having a task stuck in the RUNNING state with 0 splits assigned.  If there are multiple queries, they will all be stuck on the same node or nodes that rebooted. </body>
		<created>2015-02-05 23:08:45</created>
		<closed>2015-02-14 00:41:23</closed>
	</bug>
	<bug>
		<id>2311</id>
		<title>Fix USING clause for JOINs</title>
		<body>Columns that appear in a `USING` clause should not require qualification. This is particularly useful for outer joins, because the non-qualified reference always references the non-null value. It is not clear if qualifying reference is allowed: PostgreSQL allows it but Oracle does not. Allowing it is useful in order to do `IS NULL` checks for outer joins, especially when no other columns are available.  ``` presto&gt; select x from (values (1)) a (x) join (values (1)) b (x) using (x); Query 20150202_160415_12625_wu6ji failed: Column 'x' is ambiguous ```  Additionally, because `USING` makes them the same column, the column should only appear once in the output descriptor:  ``` presto&gt; select * from (values (1)) a (x) join (values (1)) b (x) using (x);  x | x  ---+---  1 | 1  (1 row) ```  Correct behavior for the above:  ``` postgresql=# select x from (values (1)) a (x) join (values (1)) b (x) using (x);  x   ---  1 (1 row)  postgresql=# select * from (values (1)) a (x) join (values (1)) b (x) using (x);  x   ---  1 (1 row) ```  Additional test cases that should return the value from the outside of the join:  ``` sql SELECT x FROM (VALUES (1), (2)) a (x) LEFT JOIN (VALUES (1)) b (x) USING (x); SELECT x FROM (VALUES (1)) a (x) RIGHT JOIN (VALUES (1), (2)) b (x) USING (x); ``` </body>
		<created>2015-02-02 16:13:14</created>
		<closed>2018-02-21 18:48:33</closed>
	</bug>
	<bug>
		<id>2301</id>
		<title>INSERT should ignore hidden columns</title>
		<body>When doing an `INSERT` that does not specify the column list (which is not yet supported), the column list should only be the visible columns (not hidden columns). Thus, it should be equivalent to the columns returned by `SELECT * FROM t`.  For example, using the tpch connector:  ``` presto:tiny&gt; describe region;   Column   |  Type   | Null | Partition Key | Comment  -----------+---------+------+---------------+---------  regionkey | bigint  | true | false         |           name      | varchar | true | false         |           comment   | varchar | true | false         |          (3 rows)  presto:tiny&gt; select * from region limit 0;  regionkey | name | comment  -----------+------+--------- (0 rows) ```  However, the check in `StatementAnalyzer` is including the hidden `row_number` columns:  ``` presto:tiny&gt; insert into region select * from region; Query 20150129_235057_00017_b9dwj failed: Insert query has mismatched column types: Table: (bigint, varchar, varchar, bigint), Query: (bigint, varchar, varchar) ``` </body>
		<created>2015-01-29 23:55:00</created>
		<closed>2015-01-30 01:25:30</closed>
	</bug>
	<bug>
		<id>2284</id>
		<title>Bad error message for Hive INSERT</title>
		<body>The `beginInsert()` method in `HiveMetadata` throws `UnsupportedOperationException()` which results in a horrible error message. We should support INSERT, but in the mean time, the error message should be fixed by throwing the correct exception:  ``` java throw new PrestoException(NOT_SUPPORTED, "INSERT not yet supported for Hive"); ```  The `commitInsert()` method should be fixed as well. </body>
		<created>2015-01-28 20:11:19</created>
		<closed>2015-01-28 23:41:43</closed>
	</bug>
	<bug>
		<id>2273</id>
		<title>Incorrect plan with nested queries involving rand()</title>
		<body>The following query:  ``` SELECT u FROM (     SELECT if(rand() &gt; 0.5, 0, 1) AS u ) WHERE u &lt;&gt; u; ```  produces the following incorrect plan:  ```  - Output[u] =&gt; [expr:bigint]                                                                                                         u := expr                                                                                                                - Project =&gt; [expr:bigint]                                                                                                           expr := (CASE WHEN ("rand"() &gt; 0.5) THEN 0 ELSE 1 END)                                                                   - Filter[((CASE WHEN ("rand"() &gt; 0.5) THEN 0 ELSE 1 END) &lt;&gt; (CASE WHEN ("rand"() &gt; 0.5) THEN 0 ELSE 1 END))] =&gt; []               - Values =&gt; []                                                                                                                       ()    ```  This is probably a bug in the predicate pushdown optimization when handling non-deterministic functions. </body>
		<created>2015-01-26 19:28:15</created>
		<closed>2015-02-27 19:19:18</closed>
	</bug>
	<bug>
		<id>2212</id>
		<title>JSON functions need categorized errors</title>
		<body>This is one example, but there might be others. The unit tests need to include negative tests as well. See `assertInvalidFunction` in `TestStringFunctions`.  ``` presto&gt; select json_extract_scalar('', ''); ... Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 ``` </body>
		<created>2015-01-09 18:49:09</created>
		<closed>2015-05-04 22:47:41</closed>
	</bug>
	<bug>
		<id>2211</id>
		<title>Bad error message for unhandled </title>
		<body>This is caused by an uncategorized error coming from the function (which should be fixed independently), but uncategorized errors should not result in a "compiler failed" error message.   ``` presto:tiny&gt; select json_extract_scalar('', ''); Query 20150109_183146_00009_t36py failed: Compiler failed and interpreter is disabled ``` </body>
		<created>2015-01-09 18:39:48</created>
		<closed>2015-01-22 01:18:16</closed>
	</bug>
	<bug>
		<id>2173</id>
		<title>Fix wasNull() in PrestoResultSet</title>
		<body>The method currently always returns false. </body>
		<created>2015-01-02 08:15:29</created>
		<closed>2015-01-07 00:59:32</closed>
	</bug>
	<bug>
		<id>2165</id>
		<title>Bad error message for scalar subquery</title>
		<body>``` presto&gt; select (select 123); Query 20141229_190248_09947_q9qf4 failed: not yet implemented: com.facebook.presto.sql.tree.SubqueryExpression com.facebook.presto.spi.PrestoException: not yet implemented: com.facebook.presto.sql.tree.SubqueryExpression     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitExpression(ExpressionInterpreter.java:791)     at com.facebook.presto.sql.tree.AstVisitor.visitSubqueryExpression(AstVisitor.java:327)     at com.facebook.presto.sql.tree.SubqueryExpression.accept(SubqueryExpression.java:34)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:140)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:115)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter$$Lambda$112/1236990587.apply(Unknown Source)     at com.google.common.collect.Maps$7.transformEntry(Maps.java:1812)     at com.google.common.collect.Maps$10.getValue(Maps.java:1857)     at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:86)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:66)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:101)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:112)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:85)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:66)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:101)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:112)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:85)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:66)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:101)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:112)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:85)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.visitProject(SimplifyExpressions.java:66)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.rewrite(PlanRewriter.java:101)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.lambda$defaultRewrite$15(PlanRewriter.java:75)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext$$Lambda$109/665800274.apply(Unknown Source)     at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)     at java.util.Iterator.forEachRemaining(Iterator.java:116)     at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)     at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)     at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)     at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)     at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewriteContext.defaultRewrite(PlanRewriter.java:76)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:40)     at com.facebook.presto.sql.planner.plan.PlanRewriter.visitPlan(PlanRewriter.java:22)     at com.facebook.presto.sql.planner.plan.PlanVisitor.visitOutput(PlanVisitor.java:50)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:29)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:63)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:88)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:210)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:191)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:152)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:474)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-29 19:03:49</created>
		<closed>2015-02-25 00:01:06</closed>
	</bug>
	<bug>
		<id>2137</id>
		<title>Hive connector should verify types when creating output handles</title>
		<body>Related to #2128, `beginCreateTable()` should verify if the types are supported, rather than failing much later when actually writing. The method `getJavaObjectInspector()` in `HiveRecordSink` has a list of all the possibly supported types, but some output formats may not support every type. </body>
		<created>2014-12-19 20:22:04</created>
		<closed>2014-12-22 23:33:38</closed>
	</bug>
	<bug>
		<id>2133</id>
		<title>NPE when getting element from empty literal array</title>
		<body>``` sql select array[][0]; ```  ``` Query 20141218_193145_15184_8t988 failed: methodHandle is null java.lang.NullPointerException: methodHandle is null     at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:226)     at com.facebook.presto.operator.scalar.ArraySubscriptOperator.specialize(ArraySubscriptOperator.java:99)     at com.facebook.presto.metadata.FunctionRegistry.resolveFunction(FunctionRegistry.java:346)     at com.facebook.presto.metadata.FunctionRegistry.resolveOperator(FunctionRegistry.java:459)     at com.facebook.presto.metadata.MetadataManager.resolveOperator(MetadataManager.java:177)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.getOperator(ExpressionAnalyzer.java:769)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSubscriptExpression(ExpressionAnalyzer.java:467)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitSubscriptExpression(ExpressionAnalyzer.java:180)     at com.facebook.presto.sql.tree.SubscriptExpression.accept(SubscriptExpression.java:35)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:177)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:961)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeExpression(TupleAnalyzer.java:1067)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:870)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:349)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:134)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:531)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:104)     at com.facebook.presto.sql.tree.Query.accept(Query.java:81)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:206)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:191)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:152)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:474)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-18 19:39:30</created>
		<closed>2015-01-07 01:04:01</closed>
	</bug>
	<bug>
		<id>2132</id>
		<title>CAST to UNKNOWN should not be allowed</title>
		<body>`UNKNOWN` is not a valid type -- it's just a way of saying "there is a type, but it's unknown to the SQL engine". Therefore, casting a value to `UNKNOWN` is non-sensical and shouldn't be allowed.  ``` presto:di&gt; SELECT CAST(null AS UNKNOWN);  _col0  ------- (0 rows) ``` </body>
		<created>2014-12-18 19:17:07</created>
		<closed>2014-12-21 08:21:56</closed>
	</bug>
	<bug>
		<id>2131</id>
		<title>"SELECT NULL" incorrectly produces 0 rows</title>
		<body>``` presto&gt; select null;  _col0  ------- (0 rows) ```  ``` presto:di&gt; explain select null;                          Query Plan                          ------------------------------------------------------------  - Output[_col0]                                                      _col0 := expr                                            - Project =&gt; [expr:unknown]                                          expr := CAST(CAST(null AS UNKNOWN) AS UNKNOWN)           - Values =&gt; []                                      ``` </body>
		<created>2014-12-18 19:12:41</created>
		<closed>2015-01-07 07:37:10</closed>
	</bug>
	<bug>
		<id>2118</id>
		<title>IndexOutOfBoundsException from io.airlift.tpch.TextPool</title>
		<body>``` presto:default&gt; select sum(quantity) from tpch.sf101.lineitem;  Query 20141215_222017_00006_39zd8, FAILED, 1 node http://localhost:8080/v1/query/20141215_222017_00006_39zd8?pretty Splits: 5 total, 0 done (0.00%) CPU Time: 7.9s total, 1.67M rows/s,     0B/s, 96% active Per Node: 2.6 parallelism, 4.32M rows/s,     0B/s Parallelism: 2.6 0:03 [13.1M rows, 0B] [4.32M rows/s, 0B/s]  Query 20141215_222017_00006_39zd8 failed: Index 314572800 is beyond end of text pool (size = 314572800) java.lang.IndexOutOfBoundsException: Index 314572800 is beyond end of text pool (size = 314572800)     at io.airlift.tpch.TextPool.getText(TextPool.java:75)     at io.airlift.tpch.RandomText.nextValue(RandomText.java:43)     at io.airlift.tpch.LineItemGenerator$LineItemGeneratorIterator.makeLineitem(LineItemGenerator.java:249)     at io.airlift.tpch.LineItemGenerator$LineItemGeneratorIterator.computeNext(LineItemGenerator.java:171)     at io.airlift.tpch.LineItemGenerator$LineItemGeneratorIterator.computeNext(LineItemGenerator.java:90)     at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)     at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138)     at com.facebook.presto.tpch.TpchRecordSet$TpchRecordCursor.advanceNextPosition(TpchRecordSet.java:122)     at com.facebook.presto.spi.RecordPageSource.getNextPage(RecordPageSource.java:93)     at com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:230)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:352)     at com.facebook.presto.operator.Driver.processFor(Driver.java:284)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:558)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:444)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:578)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-15 22:23:24</created>
		<closed>2014-12-16 00:03:31</closed>
	</bug>
	<bug>
		<id>2111</id>
		<title>Quoted special functions don't resolve correctly</title>
		<body>This works:  ``` presto:di&gt; select current_timestamp;                     _col0                     ---------------------------------------------  2014-12-12 17:59:18.737 America/Los_Angeles  (1 row) ```  But this does not:  ``` presto:di&gt; select "current_timestamp" ; Query 20141213_015319_01754_8t988 failed: Column 'current_timestamp' cannot be resolved ```  The same applies to current_date and current_time. </body>
		<created>2014-12-13 02:00:50</created>
		<closed>2015-01-15 17:18:41</closed>
	</bug>
	<bug>
		<id>2095</id>
		<title>row_number() with limit filter incorrect when filter contains NOT</title>
		<body>The following query:  ``` sql SELECT * FROM (     SELECT row_number() OVER () rn      FROM (VALUES (0),(0),(0),(0)) )  WHERE NOT rn &lt; 3; ```  produces the following (incorrect) output:  ```  rn  ---- (0 rows) ```  The correct output should be:  ```  rn  ----   3    4  (2 rows) ``` </body>
		<created>2014-12-10 18:11:28</created>
		<closed>2014-12-22 22:11:21</closed>
	</bug>
	<bug>
		<id>2074</id>
		<title>Cannot create view if query contains quoted table name</title>
		<body>``` presto&gt; create view test as select x from "7day"; Query 20141206_005354_01299_aqkqc failed: Formatted query does not parse: Query{queryBody=QuerySpecification{select=Select{distinct=false, selectItems=["x"]}, from=Optional.of(Table{7day}), where=null, groupBy=[], having=null, orderBy=[], limit=null}, orderBy=[]} ``` </body>
		<created>2014-12-06 00:54:44</created>
		<closed>2015-08-03 19:56:34</closed>
	</bug>
	<bug>
		<id>2060</id>
		<title>Split pages if necessary before sending them over the network</title>
		<body>Pages provided by plugin data sources can be arbitrarily sized relative to the maximum HTTP payload size (default 16MB). This can cause query failures with:  ``` com.facebook.presto.operator.PageTooLargeException: Remote page is too large     at com.facebook.presto.operator.HttpPageBufferClient.rewriteException(HttpPageBufferClient.java:396)     at com.facebook.presto.operator.HttpPageBufferClient.access$1000(HttpPageBufferClient.java:71)     at com.facebook.presto.operator.HttpPageBufferClient$2.onFailure(HttpPageBufferClient.java:321)     at com.google.common.util.concurrent.Futures$6.run(Futures.java:1310)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ```  We should probably split the pages if necessary before sending them over HTTP.  An example of this happening is with the Hive ORC reader in which it turns each data segment into a page without regard to total page size maximums. </body>
		<created>2014-12-04 06:13:51</created>
		<closed>2015-01-23 01:41:57</closed>
	</bug>
	<bug>
		<id>2054</id>
		<title>DISTINCT fails for JSON type when optimizeHashGeneration=true</title>
		<body>``` sql SELECT DISTINCT CAST(ARRAY[1] AS JSON); ```  fails with:  ``` com.facebook.presto.spi.PrestoException: Unexpected parameters (json) for function $operator$hash_code. Expected: $operator$hash_code(boolean), $operator$hash_code(bigint), $operator$hash_code(double), $operator$hash_code(varchar), $operator$hash_code(varbinary), $operator$hash_code(date), $operator$hash_code(time), $operator$hash_code(timestamp), $operator$hash_code(interval day to second), $operator$hash_code(interval year to month), $operator$hash_code(time with time zone), $operator$hash_code(timestamp with time zone)     at com.facebook.presto.metadata.FunctionRegistry.resolveFunction(FunctionRegistry.java:428)     at com.facebook.presto.metadata.MetadataManager.resolveFunction(MetadataManager.java:147)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:601)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:180)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:67)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.process(ExpressionAnalyzer.java:198)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:598)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:180)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:67)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:177)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressions(ExpressionAnalyzer.java:928)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpressionsWithInputs(ExpressionAnalyzer.java:916)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypesFromInput(ExpressionAnalyzer.java:877)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.getExpressionTypesFromInput(ExpressionAnalyzer.java:867)     at com.facebook.presto.sql.planner.InterpretedProjectionFunction.&lt;init&gt;(InterpretedProjectionFunction.java:57)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitScanFilterAndProject(LocalExecutionPlanner.java:852)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:723)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitProject(LocalExecutionPlanner.java:344)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:648)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitAggregation(LocalExecutionPlanner.java:344)     at com.facebook.presto.sql.planner.plan.AggregationNode.accept(AggregationNode.java:165)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:367)     at com.facebook.presto.sql.planner.LocalExecutionPlanner$Visitor.visitOutput(LocalExecutionPlanner.java:344)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.LocalExecutionPlanner.plan(LocalExecutionPlanner.java:226)     at com.facebook.presto.execution.SqlTaskExecution.&lt;init&gt;(SqlTaskExecution.java:147)     at com.facebook.presto.execution.SqlTaskExecution.createSqlTaskExecution(SqlTaskExecution.java:109)     at com.facebook.presto.execution.SqlTaskExecutionFactory.create(SqlTaskExecutionFactory.java:101)     at com.facebook.presto.execution.SqlTask.updateTask(SqlTask.java:219)     at com.facebook.presto.execution.SqlTaskManager.updateTask(SqlTaskManager.java:223)     at com.facebook.presto.server.TaskResource.createOrUpdateTask(TaskResource.java:104)     at sun.reflect.GeneratedMethodAccessor142.invoke(Unknown Source)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)     at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)     at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)     at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)     at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)     at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:267)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)     at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)     at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1030)     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:373)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)     at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:769)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1667)     at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83)     at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:300)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)     at io.airlift.http.server.TraceTokenFilter.doFilter(TraceTokenFilter.java:62)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)     at io.airlift.http.server.TimingFilter.doFilter(TimingFilter.java:51)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)     at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:583)     at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125)     at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)     at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059)     at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)     at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:159)     at org.eclipse.jetty.server.handler.HandlerList.handle(HandlerList.java:52)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)     at org.eclipse.jetty.server.Server.handle(Server.java:485)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:290)     at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:248)     at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:606)     at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:535)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-03 20:15:12</created>
		<closed>2015-01-08 20:43:54</closed>
	</bug>
	<bug>
		<id>2040</id>
		<title>NPE when using max_by/min_by</title>
		<body>``` java.lang.NullPointerException     at com.facebook.presto.spi.type.DoubleType.compareTo(DoubleType.java:72)     at com.facebook.presto.operator.aggregation.MaxBy.combine(MaxBy.java:125)     at com.facebook.presto.$gen.VarcharVarcharDoubleMaxByGroupedAccumulator_576.addIntermediate(Unknown Source)     at com.facebook.presto.operator.HashAggregationOperator$Aggregator.processPage(HashAggregationOperator.java:388)     at com.facebook.presto.operator.HashAggregationOperator$GroupByHashAggregationBuilder.processPage(HashAggregationOperator.java:296)     at com.facebook.presto.operator.HashAggregationOperator$GroupByHashAggregationBuilder.access$200(HashAggregationOperator.java:263)     at com.facebook.presto.operator.HashAggregationOperator.addInput(HashAggregationOperator.java:212)     at com.facebook.presto.operator.Driver.processInternal(Driver.java:357)     at com.facebook.presto.operator.Driver.processFor(Driver.java:283)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:557)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:444)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:578)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-02 06:56:39</created>
		<closed>2015-06-30 20:38:04</closed>
	</bug>
	<bug>
		<id>2036</id>
		<title>Exception when using non-deterministic predicate together with IN</title>
		<body>The following query:  ``` sql SELECT * FROM (VALUES (1)) t(a) WHERE rand() &gt; 0 and a IN (VALUES (1)); ```  fails with this exception:  ``` java.lang.IllegalArgumentException: Only deterministic expressions may be considered for rewrite     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:122)     at com.facebook.presto.sql.planner.EqualityInference.rewriteExpression(EqualityInference.java:101)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteSemiJoin(PredicatePushDown.java:677)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteSemiJoin(PredicatePushDown.java:134)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitSemiJoin(PlanRewriter.java:449)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitSemiJoin(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.SemiJoinNode.accept(SemiJoinNode.java:120)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteFilter(PredicatePushDown.java:219)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteFilter(PredicatePushDown.java:134)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitFilter(PlanRewriter.java:200)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitFilter(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.FilterNode.accept(FilterNode.java:71)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:244)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter.defaultRewrite(PlanRewriter.java:50)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteProject(PredicatePushDown.java:178)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteProject(PredicatePushDown.java:134)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:238)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:81)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:282)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.defaultRewrite(PlanRewriter.java:50)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteNode(PredicatePushDown.java:166)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown$Rewriter.rewriteNode(PredicatePushDown.java:134)     at com.facebook.presto.sql.planner.plan.PlanNodeRewriter.rewriteOutput(PlanNodeRewriter.java:120)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:276)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:31)     at com.facebook.presto.sql.planner.optimizations.PredicatePushDown.optimize(PredicatePushDown.java:131)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:88)     at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:104)     at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:66)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:510)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:479)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:106)     at com.facebook.presto.sql.tree.Explain.accept(Explain.java:54)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:206)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:191)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:152)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:490)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-12-01 20:52:43</created>
		<closed>2018-04-19 16:35:37</closed>
	</bug>
	<bug>
		<id>2032</id>
		<title>Invalid plan when aggregations require implicit coercions</title>
		<body>The following query:  ``` sql SELECT min(a), numeric_histogram(10, a) FROM (VALUES (1)) t(a)                                                                ```  produces this invalid plan:  ```  - Output[_col0, _col1]                                                                          _col0 := min                                                                            _col1 := numeric_histogram                                                          - Aggregate =&gt; [min:bigint, numeric_histogram:map&lt;double,double&gt;]                               min := "min"("field")                                                                   numeric_histogram := "numeric_histogram"("expr", CAST("field" AS DOUBLE))           - Project =&gt; [field:bigint, expr:bigint]                                                        expr := 10                                                                          - Values =&gt; [field:bigint]             ```  The `CAST` should be performed by the projection below the aggregation. Aggregations expect inputs to be simple QualifiedNameReferences. </body>
		<created>2014-12-01 20:29:27</created>
		<closed>2016-01-09 00:12:44</closed>
	</bug>
	<bug>
		<id>1991</id>
		<title>Query input rows/size stats not tracked properly for JOIN queries</title>
		<body>The query-level stats only include the row/size from the leaf stage. The should include the inputs for all stages that perform table scans.  For example:  ``` 1:20 [ 130M rows, 14.1GB] [1.64M rows/s,  182MB/s] [  &lt;=&gt;                                     ]       STAGES   ROWS  ROWS/s  BYTES  BYTES/s  QUEUED    RUN   DONE 0.........R      0       0     0B       0B       0      1      0   1.......R      0       0     0B       0B       0     20      0     2.....S    13B    163M  1.82T    23.4G    1478   8870  27560       3...F  43.1M       0  2.38G       0B       0      0     20         4.F   130M       0  14.1G       0B       0      0   2363 ```  The bug is possibly due to the following check in `QueryStateMachine.getQueryInfo()`, line 193:  ``` java if (stageInfo.getSubStages().isEmpty()) { ``` </body>
		<created>2014-11-19 07:39:08</created>
		<closed>2014-11-19 18:00:29</closed>
	</bug>
	<bug>
		<id>1950</id>
		<title>locationAwareScheduling=false should not override split's remotely-accessible flag</title>
		<body>In the current implementation, if location-aware-scheduling is turned off nodes will be picked at random, regardless of whether the split indicates that it's not remotely accessible. This is wrong, as it will result in workers not being able to access the data they are assigned to process. </body>
		<created>2014-11-12 18:23:52</created>
		<closed>2015-04-21 00:48:57</closed>
	</bug>
	<bug>
		<id>1934</id>
		<title>Count star on sys.node table returns error</title>
		<body>This is in version 0.77. Not sure if it has been fixed since.  ``` presto:default&gt; select count(*) from sys.node;  Query 20141108_143132_00003_rrx9x, FAILED, 2 nodes http://127.0.0.1:8081/v1/query/20141108_143132_00003_rrx9x?pretty Splits: 1 total, 0 done (0.00%) CPU Time: 0.0s total,     0 rows/s,     0B/s, 0% active Per Node: 0.0 parallelism,     0 rows/s,     0B/s Parallelism: 0.0 0:00 [0 rows, 0B] [0 rows/s, 0B/s]  Query 20141108_143132_00003_rrx9x failed: must provide at least one column java.lang.IllegalArgumentException: must provide at least one column     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:125)     at com.facebook.presto.connector.system.SystemRecordSetProvider.getRecordSet(SystemRecordSetProvider.java:55)     at com.facebook.presto.split.RecordPageSourceProvider.createPageSource(RecordPageSourceProvider.java:40)     at com.facebook.presto.split.PageSourceManager.createPageSource(PageSourceManager.java:56)     at com.facebook.presto.operator.TableScanOperator.addSplit(TableScanOperator.java:150)     at com.facebook.presto.operator.Driver.processNewSource(Driver.java:252)     at com.facebook.presto.operator.Driver.processNewSources(Driver.java:217)     at com.facebook.presto.operator.Driver.access$300(Driver.java:53)     at com.facebook.presto.operator.Driver$DriverLockResult.close(Driver.java:501)     at com.facebook.presto.operator.Driver.updateSource(Driver.java:195)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunnerFactory.createDriver(SqlTaskExecution.java:447)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunnerFactory.access$1500(SqlTaskExecution.java:414)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:535)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:444)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:578)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) ``` </body>
		<created>2014-11-08 14:33:01</created>
		<closed>2014-11-13 17:32:02</closed>
	</bug>
	<bug>
		<id>1923</id>
		<title>Table create or insert can succeed even if the query fails</title>
		<body>Due to how the operator system works, the `finish()` method on `TableCommitOperator` can be called even if the query fails, causing it to erroneously commit the table creation or insert operation. </body>
		<created>2014-11-07 16:55:02</created>
		<closed>2015-04-21 00:47:40</closed>
	</bug>
	<bug>
		<id>1901</id>
		<title>json_array_get does not work for non-scalars</title>
		<body>``` presto:search&gt; select json_array_get('[{"hello":"world"}]', 0);  _col0  -------  NULL   (1 row) ``` </body>
		<created>2014-11-05 20:42:56</created>
		<closed>2014-11-11 20:01:17</closed>
	</bug>
	<bug>
		<id>1893</id>
		<title>NaN in ARRAY or MAP not handled correctly</title>
		<body>select ARRAY[sqrt(-1)];  The above query should work, but instead fails with an error </body>
		<created>2014-11-04 23:18:59</created>
		<closed>2015-04-21 00:41:34</closed>
	</bug>
	<bug>
		<id>1885</id>
		<title>NPE writting null MAP or ARRAY in HiveRecordSink</title>
		<body>``` java.lang.NullPointerException io.airlift.slice.Preconditions.checkNotNull(Preconditions.java:30) io.airlift.slice.Slices.copiedBuffer(Slices.java:222) io.airlift.slice.Slices.utf8Slice(Slices.java:230) com.facebook.presto.hive.HiveRecordSink.append(HiveRecordSink.java:217) com.facebook.presto.hive.HiveRecordSink.appendNull(HiveRecordSink.java:152) com.facebook.presto.operator.TableWriterOperator.writeField(TableWriterOperator.java:189) com.facebook.presto.operator.TableWriterOperator.addInput(TableWriterOperator.java:179) com.facebook.presto.operator.Driver.process(Driver.java:336) com.facebook.presto.operator.Driver.processFor(Driver.java:272) com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:557) com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:444) com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:578) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-11-01 18:15:09</created>
		<closed>2015-04-21 00:41:19</closed>
	</bug>
	<bug>
		<id>1864</id>
		<title>Null partition keys break Hive partition pruning</title>
		<body>If the table has a partition key like `key=__HIVE_DEFAULT_PARTITION__`, the following query:  ``` SELECT    key , count(*) from TABLE GROUP BY 1 ```  returns results like:  ```    key   | _col1   ---------+--------  windows | 1   NULL    | 2   ios     | 3   android | 4  (4 rows) ```  But the following query return no rows:  ``` SELECT    key , count(*) from TABLE WHERE key is null  GROUP BY 1 ``` </body>
		<created>2014-10-25 18:45:35</created>
		<closed>2014-10-28 00:49:34</closed>
	</bug>
	<bug>
		<id>1829</id>
		<title>Exception when using subquery expression in aggregation query </title>
		<body>The following query should fail during analysis with a proper error (e.g., '...' must be an aggregate expression or appear in GROUP BY clause), but it fails with an internal error instead.  ``` sql SELECT 'a', (VALUES (1)) GROUP BY 1 ```  ``` Query 20141017_183915_11402_sgybh failed: aggregation analysis not yet implemented for: com.facebook.presto.sql.tree.SubqueryExpression java.lang.UnsupportedOperationException: aggregation analysis not yet implemented for: com.facebook.presto.sql.tree.SubqueryExpression     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:152)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:134)     at com.facebook.presto.sql.tree.AstVisitor.visitSubqueryExpression(AstVisitor.java:329)     at com.facebook.presto.sql.tree.SubqueryExpression.accept(SubqueryExpression.java:34)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.process(AggregationAnalyzer.java:415)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer.analyze(AggregationAnalyzer.java:129)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.verifyAggregations(TupleAnalyzer.java:980)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeAggregations(TupleAnalyzer.java:943)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:349)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:122)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:533)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:106)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:204)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:189)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:150)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:465)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-10-17 18:40:33</created>
		<closed>2014-10-31 20:22:03</closed>
	</bug>
	<bug>
		<id>1828</id>
		<title>Exception when using subscript operator in aggregation query</title>
		<body>The following query should fail during analysis with a proper error (e.g., '...' must be an aggregate expression or appear in GROUP BY clause), but it fails with an internal error instead.  ``` sql SELECT 'a', array[1,2,3][1] GROUP BY 1; ```  ``` Query 20141017_183802_11391_sgybh failed: aggregation analysis not yet implemented for: com.facebook.presto.sql.tree.SubscriptExpression java.lang.UnsupportedOperationException: aggregation analysis not yet implemented for: com.facebook.presto.sql.tree.SubscriptExpression     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:152)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.visitExpression(AggregationAnalyzer.java:134)     at com.facebook.presto.sql.tree.AstVisitor.visitSubscriptExpression(AstVisitor.java:314)     at com.facebook.presto.sql.tree.SubscriptExpression.accept(SubscriptExpression.java:35)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer$Visitor.process(AggregationAnalyzer.java:415)     at com.facebook.presto.sql.analyzer.AggregationAnalyzer.analyze(AggregationAnalyzer.java:129)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.verifyAggregations(TupleAnalyzer.java:980)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeAggregations(TupleAnalyzer.java:943)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:349)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:122)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:533)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:106)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:204)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:189)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:150)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:465)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-10-17 18:35:54</created>
		<closed>2014-10-21 01:00:51</closed>
	</bug>
	<bug>
		<id>1823</id>
		<title>Describing a dropped Hive table shows zero rows</title>
		<body>Describing a dropped Hive table that has been cached results in the describe showing zero rows rather than "table ... does not exist":  ``` presto&gt; desc some_table;  Column | Type | Null | Partition Key | Comment  --------+------+------+---------------+--------- (0 rows) ``` </body>
		<created>2014-10-16 20:34:52</created>
		<closed>2014-11-26 06:56:34</closed>
	</bug>
	<bug>
		<id>1812</id>
		<title>NullPointerException when trying to EXPLAIN RENAME</title>
		<body>This results in an exception: "EXPLAIN ALTER TABLE orders RENAME TO renamed_orders"  java.lang.NullPointerException com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24) com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:173) com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:79) com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:104) com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:66) com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:510) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:479) com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:106) com.facebook.presto.sql.tree.Explain.accept(Explain.java:53) com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24) com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52) com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:204) com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:189) com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:150) com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:465) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) java.lang.Thread.run(Thread.java:745) </body>
		<created>2014-10-14 20:37:19</created>
		<closed>2015-08-03 17:32:33</closed>
	</bug>
	<bug>
		<id>1810</id>
		<title>HiveClient.getPartitions() breaks with  "__HIVE_DEFAULT_PARTITION__"</title>
		<body>HiveClient.getPartitions() does not properly handle null partitions:  ``` Example: 20141013_191538_19058_tgxh6 For input string: "__HIVE_DEFAULT_PARTITION__" java.lang.NumberFormatException java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Long.parseLong(Long.java:441) java.lang.Long.parseLong(Long.java:483) com.facebook.presto.hive.HiveClient$4.apply(HiveClient.java:1345) com.facebook.presto.hive.HiveClient$4.apply(HiveClient.java:1309) com.google.common.collect.Iterators$8.transform(Iterators.java:794) com.google.common.collect.TransformedIterator.next(TransformedIterator.java:48) com.google.common.collect.Iterators$7.computeNext(Iterators.java:646) com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) com.google.common.collect.Iterators$7.computeNext(Iterators.java:645) com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143) com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138) com.google.common.collect.ImmutableCollection$Builder.addAll(ImmutableCollection.java:300) com.google.common.collect.ImmutableList$Builder.addAll(ImmutableList.java:691) com.google.common.collect.ImmutableList.copyOf(ImmutableList.java:275) com.google.common.collect.ImmutableList.copyOf(ImmutableList.java:226) com.google.common.collect.FluentIterable.toList(FluentIterable.java:334) com.facebook.presto.hive.HiveClient.getPartitions(HiveClient.java:1032) ``` </body>
		<created>2014-10-14 18:19:07</created>
		<closed>2014-10-28 22:47:36</closed>
	</bug>
	<bug>
		<id>1800</id>
		<title>Exception in PruneUnreferencedOutputs with UNNEST</title>
		<body>``` sql SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a); ```  ``` java.lang.IllegalArgumentException: unnestSymbols is empty     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:125)     at com.facebook.presto.sql.planner.plan.UnnestNode.&lt;init&gt;(UnnestNode.java:50)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteUnnest(PruneUnreferencedOutputs.java:309)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteUnnest(PruneUnreferencedOutputs.java:94)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitUnnest(PlanRewriter.java:357)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitUnnest(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.UnnestNode.accept(UnnestNode.java:94)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteProject(PruneUnreferencedOutputs.java:328)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteProject(PruneUnreferencedOutputs.java:94)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:236)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteOutput(PruneUnreferencedOutputs.java:337)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs$Rewriter.rewriteOutput(PruneUnreferencedOutputs.java:94)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:274)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:31)     at com.facebook.presto.sql.planner.optimizations.PruneUnreferencedOutputs.optimize(PruneUnreferencedOutputs.java:91)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:88)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:208)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:189)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:150)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:465)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2014-10-11 05:33:12</created>
		<closed>2014-10-13 20:03:50</closed>
	</bug>
	<bug>
		<id>1788</id>
		<title>NullPointerException verifying schema in HiveClient</title>
		<body>The code that verifies the table schema matches the partition schema can throw a NPE at:   https://github.com/facebook/presto/blob/0.76/presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java#L1068  One of the lists is likely null.  ``` com.facebook.presto.spi.PrestoException: HIVE_UNKNOWN_ERROR     at com.facebook.presto.hive.HiveSplitSourceProvider$HiveSplitSource.propagatePrestoException(HiveSplitSourceProvider.java:589) ~[na:na]     at com.facebook.presto.hive.HiveSplitSourceProvider$HiveSplitSource.getNextBatch(HiveSplitSourceProvider.java:532) ~[na:na]     at com.facebook.presto.execution.ConnectorAwareSplitSource.getNextBatch(ConnectorAwareSplitSource.java:46) ~[presto-main-0.76.jar:0.76]     at com.facebook.presto.execution.SqlStageExecution.scheduleSourcePartitionedNodes(SqlStageExecution.java:633) [presto-main-0.76.jar:0.76]     at com.facebook.presto.execution.SqlStageExecution.startTasks(SqlStageExecution.java:554) [presto-main-0.76.jar:0.76]     at com.facebook.presto.execution.SqlStageExecution.access$200(SqlStageExecution.java:93) [presto-main-0.76.jar:0.76]     at com.facebook.presto.execution.SqlStageExecution$4.run(SqlStageExecution.java:526) [presto-main-0.76.jar:0.76]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_51]     at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_51]     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]     at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51] Caused by: java.lang.NullPointerException: null     at com.facebook.presto.hive.HiveClient$1.apply(HiveClient.java:1068) ~[na:na]     at com.facebook.presto.hive.HiveClient$1.apply(HiveClient.java:1039) ~[na:na]     at com.google.common.collect.Iterators$8.transform(Iterators.java:794) ~[guava-16.0.1.jar:na]     at com.google.common.collect.TransformedIterator.next(TransformedIterator.java:48) ~[guava-16.0.1.jar:na]     at com.google.common.collect.TransformedIterator.next(TransformedIterator.java:48) ~[guava-16.0.1.jar:na]     at com.google.common.collect.Iterators$5.hasNext(Iterators.java:543) ~[guava-16.0.1.jar:na]     at com.facebook.presto.hive.HiveSplitSourceProvider.loadPartitionSplits(HiveSplitSourceProvider.java:190) ~[na:na]     at com.facebook.presto.hive.HiveSplitSourceProvider.access$100(HiveSplitSourceProvider.java:80) ~[na:na]     at com.facebook.presto.hive.HiveSplitSourceProvider$2.run(HiveSplitSourceProvider.java:172) ~[na:na]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_51]     at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_51]     at com.facebook.presto.hive.util.BoundedExecutor.executeOrMerge(BoundedExecutor.java:82) ~[na:na]     at com.facebook.presto.hive.util.BoundedExecutor.access$000(BoundedExecutor.java:41) ~[na:na]     at com.facebook.presto.hive.util.BoundedExecutor$1.run(BoundedExecutor.java:53) ~[na:na]     ... 3 common frames omitted ``` </body>
		<created>2014-10-09 19:10:57</created>
		<closed>2015-04-21 01:11:07</closed>
	</bug>
	<bug>
		<id>1786</id>
		<title>Analyzer fails to catch usage of window function without OVER clause</title>
		<body>A query like:  ``` sql SELECT row_number() ```  Fails with this exception:  ``` java.lang.IllegalStateException: not a scalar function or operator     at com.google.common.base.Preconditions.checkState(Preconditions.java:176)     at com.facebook.presto.metadata.FunctionInfo.getMethodHandle(FunctionInfo.java:199)     at com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitFunctionCall(ExpressionInterpreter.java:637)     at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:67)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:141)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.simplifyExpression(SimplifyExpressions.java:129)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.access$000(SimplifyExpressions.java:68)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter$1.apply(SimplifyExpressions.java:120)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter$1.apply(SimplifyExpressions.java:116)     at com.google.common.collect.Maps$7.transformEntry(Maps.java:1810)     at com.google.common.collect.Maps$10.getValue(Maps.java:1855)     at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:292)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:88)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:68)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:236)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:87)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:68)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:236)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:87)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:68)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:236)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:87)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions$Rewriter.rewriteProject(SimplifyExpressions.java:68)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:236)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitProject(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.ProjectNode.accept(ProjectNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:280)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:79)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:31)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:26)     at com.facebook.presto.sql.planner.optimizations.SimplifyExpressions.optimize(SimplifyExpressions.java:65)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:88)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:208)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:189)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:150)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter$QuerySubmitter$2.run(SqlQueryManager.java:465)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:745) ```  This should be caught during analysis and should fail with a message like "window function requires OVER clause". </body>
		<created>2014-10-09 17:49:03</created>
		<closed>2014-10-31 20:21:09</closed>
	</bug>
	<bug>
		<id>1696</id>
		<title>Compilation for try_cast is broken</title>
		<body>The exception handling is completely broken because exceptions clear the stack. It needs to be in a separate method. This query reproduces it:  ``` select concat('foo', try_cast(x as varchar)) from (values (1)) a (x); ```  Exception:  ``` java.lang.VerifyError: Instruction type does not match stack map ``` </body>
		<created>2014-09-19 19:23:36</created>
		<closed>2015-02-09 23:01:32</closed>
	</bug>
	<bug>
		<id>1644</id>
		<title>SELECT COUNT(*) with aggregation subquery throws ArrayIndexOutOfBoundsException</title>
		<body>``` presto&gt; SELECT COUNT(*) FROM (SELECT COUNT(1));  Query 20140910_204334_54189_w8f29, FAILED, 1 node http://11.111.11.11:7777/v1/query/20140910_204334_54189_w8f29?pretty Splits: 1 total, 0 done (0.00%) CPU Time: 0.0s total,     0 rows/s,     0B/s, 0% active Per Node: 0.0 parallelism,     0 rows/s,     0B/s Parallelism: 0.0 0:01 [1 rows, 0B] [0 rows/s, 0B/s]  Query 20140910_204334_54189_w8f29 failed: 0 java.lang.ArrayIndexOutOfBoundsException: 0     at com.facebook.presto.operator.Page.&lt;init&gt;(Page.java:34)     at com.facebook.presto.operator.AggregationOperator.getOutput(AggregationOperator.java:168)     at com.facebook.presto.operator.Driver.process(Driver.java:329)     at com.facebook.presto.operator.Driver.processFor(Driver.java:271)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:679)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:444)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:578)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) ``` </body>
		<created>2014-09-10 20:44:47</created>
		<closed>2015-04-21 00:26:48</closed>
	</bug>
	<bug>
		<id>1632</id>
		<title>JMX connector does not render arrays properly</title>
		<body>For example, the `inputarguments` column from `java.lang:type=runtime`. With the new array support, it might be possible to return these as real arrays. Otherwise, we should properly convert them to strings. </body>
		<created>2014-09-08 15:15:15</created>
		<closed>2014-11-21 00:01:38</closed>
	</bug>
	<bug>
		<id>1621</id>
		<title>Exception during planning with duplicate columns in order by clause</title>
		<body>``` select x, x from (select 1 x)  order by 1, 2; ```  ``` Query 20140902_180334_61089_w8f29 failed: Multiple entries with same key: x_2=ASC_NULLS_LAST and x_2=ASC_NULLS_LAST java.lang.IllegalArgumentException: Multiple entries with same key: x_2=ASC_NULLS_LAST and x_2=ASC_NULLS_LAST     at com.google.common.collect.ImmutableMap.checkNoConflict(ImmutableMap.java:150)     at com.google.common.collect.RegularImmutableMap.checkNoConflictInBucket(RegularImmutableMap.java:104)     at com.google.common.collect.RegularImmutableMap.&lt;init&gt;(RegularImmutableMap.java:70)     at com.google.common.collect.ImmutableMap$Builder.build(ImmutableMap.java:254)     at com.facebook.presto.sql.planner.QueryPlanner.sort(QueryPlanner.java:576)     at com.facebook.presto.sql.planner.QueryPlanner.sort(QueryPlanner.java:551)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuerySpecification(QueryPlanner.java:134)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuerySpecification(QueryPlanner.java:73)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:256)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuerySpecification(RelationPlanner.java:80)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.planner.QueryPlanner.planQueryBody(QueryPlanner.java:143)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuery(QueryPlanner.java:100)     at com.facebook.presto.sql.planner.QueryPlanner.visitQuery(QueryPlanner.java:73)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:243)     at com.facebook.presto.sql.planner.RelationPlanner.visitQuery(RelationPlanner.java:80)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.planner.LogicalPlanner.createRelationPlan(LogicalPlanner.java:173)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:79)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:202)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:144)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:397)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask.run(FutureTask.java:262)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) ``` </body>
		<created>2014-09-02 18:04:26</created>
		<closed>2015-08-17 15:21:41</closed>
	</bug>
	<bug>
		<id>1614</id>
		<title>Query hangs due to missed TaskSource update in Driver</title>
		<body>Driver can leave source updates stuck in newSources forever.  This hangs the query since the task will never see the "noMoreSplits" message.  I believe this is caused by a race where a TaskSource is added between the call to processNewSources and the unlock in DriverLockResult.close().  The TaskSource gets queued in newSources, but can not get the lock because is is held.  The state machine design is flawed and will need to be redesigned. </body>
		<created>2014-08-30 02:38:26</created>
		<closed>2014-09-20 01:26:44</closed>
	</bug>
	<bug>
		<id>1583</id>
		<title>first_value issues in 0.75. Worked fine in 0.74</title>
		<body>Hello,  After upgrading from 0.74 to 0.75, the first_value function does not work inside FROM() if WHERE filter gives no rows. E.g. WHERE 1&gt;1. The errors is "Expected 1 arguments for function first_value, but got 0".  This gives an error: `SELECT * FROM (SELECT first_value(e.name) OVER( partition by user_uuid order by e.created_at asc) from events e ) WHERE 1&gt;1;`  Without FROM() no error: `SELECT first_value(e.name) OVER( partition by user_uuid order by e.created_at asc) from events e  WHERE 1&gt;1;`  Also no error if WHERE returns rows( WHERE 1=1): `SELECT * FROM (SELECT first_value(e.name) OVER( partition by user_uuid order by e.created_at asc) from events e ) WHERE 1=1;` </body>
		<created>2014-08-23 13:55:41</created>
		<closed>2014-08-28 01:48:46</closed>
	</bug>
	<bug>
		<id>1548</id>
		<title>IndexJoinOptimizer breaks CROSS JOIN</title>
		<body>``` &gt; explain select * from (select 2 a) x cross join (select 2 a) y; Query 20140812_190120_14773_pycet failed: lookupSymbols can not be empty java.lang.IllegalArgumentException: lookupSymbols can not be empty     at com.google.common.base.Preconditions.checkArgument(Preconditions.java:125)     at com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer$IndexSourceRewriter$Context.&lt;init&gt;(IndexJoinOptimizer.java:352)     at com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer$IndexSourceRewriter.rewriteWithIndex(IndexJoinOptimizer.java:226)     at com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer$Rewriter.rewriteJoin(IndexJoinOptimizer.java:107)     at com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer$Rewriter.rewriteJoin(IndexJoinOptimizer.java:84)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitJoin(PlanRewriter.java:384)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitJoin(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.JoinNode.accept(JoinNode.java:139)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:256)     at com.facebook.presto.sql.planner.plan.PlanRewriter$RewritingVisitor.visitOutput(PlanRewriter.java:65)     at com.facebook.presto.sql.planner.plan.OutputNode.accept(OutputNode.java:78)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewrite(PlanRewriter.java:42)     at com.facebook.presto.sql.planner.plan.PlanRewriter.rewriteWith(PlanRewriter.java:31)     at com.facebook.presto.sql.planner.optimizations.IndexJoinOptimizer.optimize(IndexJoinOptimizer.java:81)     at com.facebook.presto.sql.planner.LogicalPlanner.plan(LogicalPlanner.java:81)     at com.facebook.presto.sql.analyzer.QueryExplainer.getLogicalPlan(QueryExplainer.java:98)     at com.facebook.presto.sql.analyzer.QueryExplainer.getPlan(QueryExplainer.java:60)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.getQueryPlan(StatementAnalyzer.java:474)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:443)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitExplain(StatementAnalyzer.java:98)     at com.facebook.presto.sql.tree.Explain.accept(Explain.java:53)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:24)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:52)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:199)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:184)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:145)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:397)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask.run(FutureTask.java:262)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) ``` </body>
		<created>2014-08-12 19:03:11</created>
		<closed>2014-08-13 21:17:28</closed>
	</bug>
	<bug>
		<id>1547</id>
		<title>Incorrect behavior for chained unions</title>
		<body>## `ALL` followed by `DISTINCT` returns too many rows  PostgreSQL:  ``` dphillips=# values (2) union all values (2) union distinct values (2);  column1  ---------        2 (1 row) ```  Presto:  ``` presto:di&gt; values (2) union all values (2) union distinct values (2);  _col0  -------      2       2       2  (3 rows) ``` ## `DISTINCT` followed by `ALL` returns too few rows  PostgreSQL:  ``` dphillips=# values (2) union distinct values (2) union all values (2);  column1  ---------        2        2 (2 rows) ```  Presto:  ``` presto:di&gt; values (2) union distinct values (2) union all values (2);  _col0  -------      2  (1 row) ``` </body>
		<created>2014-08-12 18:54:40</created>
		<closed>2014-08-16 17:37:56</closed>
	</bug>
	<bug>
		<id>1542</id>
		<title>LIKE stops processing at first line break in the value</title>
		<body>The current LIKE implementation stops processing at the first line break in the value.    While we are working on a fix for this, you can use REGEXP_LIKE (http://prestodb.io/docs/current/functions/regexp.html#regexp_like) to work around this issue. </body>
		<created>2014-08-08 23:11:55</created>
		<closed>2014-08-16 17:37:24</closed>
	</bug>
	<bug>
		<id>1508</id>
		<title>GROUP BY not consistent with IS DISTINCT FROM for NaN</title>
		<body>In 0.73:  ``` presto&gt; select nan() is distinct from nan();  _col0  -------  true  ```  ``` presto:datascience&gt; select distinct a/a FROM (VALUES (0.0), (0.0)) x (a);  _col0  -------    NaN     NaN  ```  But in master (0.74):  ``` presto&gt; select nan() is distinct from nan();  _col0  -------  true   ```  ``` presto&gt; select distinct a/a FROM (VALUES (0.0), (0.0)) x (a);  _col0  -------    NaN  ```  The behavior in 0.74 is inconsistent. NaNs should not group together if they are distinct from each other.  We should actually change the behavior to make NaN work like nulls:   ``` NaN = NaN =&gt; false NaN IS NOT DISTINCT FROM NaN =&gt; true ``` </body>
		<created>2014-07-23 01:36:49</created>
		<closed>2018-04-13 20:00:03</closed>
	</bug>
	<bug>
		<id>1474</id>
		<title>Timestamp partitions not supported for Hive</title>
		<body>``` Unsupported partition type [timestamp] for partition: date_time_trunc_hour=2013-12-01 00%253A00%253A00 ``` </body>
		<created>2014-07-08 18:53:43</created>
		<closed>2014-10-02 00:12:07</closed>
	</bug>
	<bug>
		<id>1473</id>
		<title>Remote page is too large exception</title>
		<body>The "Remote page is too large" should only happen if a single Presto row is massive.  The output buffer should split pages as necessary to fit into the response buffer, or the engine should assure that a page never exceeds the client buffer size. </body>
		<created>2014-07-08 18:27:26</created>
		<closed>2015-04-21 00:09:41</closed>
	</bug>
	<bug>
		<id>1437</id>
		<title>Presto very slow when planning on a Hive table with a large number of columns</title>
		<body>The Presto planner currently asks for table columns one at a time from a connector. The Hive connector builds up the entire set of columns before returning a single one, effectively making it a O(n^2) operation when listing all the columns. This becomes a problem when you have a very large number of columns. We noticed this on a table with 30,000+ columns.  Here is a stack trace of where the coordinator was spending the bulk of its time: "Query-20140628_033320_01975_xqtpx-185976" prio=10 tid=0x00007f4eeaee4000 nid=0x2e0c runnable [0x00007f4f39f57000]    java.lang.Thread.State: RUNNABLE         at org.apache.hadoop.hive.serde2.lazy.LazyFactory.createLazyObject(LazyFactory.java:165)         at org.apache.hadoop.hive.serde2.columnar.ColumnarStruct.createLazyObjectBase(ColumnarStruct.java:78)         at org.apache.hadoop.hive.serde2.columnar.ColumnarStructBase.&lt;init&gt;(ColumnarStructBase.java:135)         at org.apache.hadoop.hive.serde2.columnar.ColumnarStruct.&lt;init&gt;(ColumnarStruct.java:56)         at org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.initialize(ColumnarSerDe.java:102)         at com.facebook.presto.hive.HiveUtil.initializeDeserializer(HiveUtil.java:214)         at com.facebook.presto.hive.HiveUtil.getDeserializer(HiveUtil.java:181)         at com.facebook.presto.hive.HiveUtil.getTableObjectInspector(HiveUtil.java:154)         at com.facebook.presto.hive.HiveUtil.getTableStructFields(HiveUtil.java:171)         at com.facebook.presto.hive.HiveClient.getColumnHandles(HiveClient.java:369)         at com.facebook.presto.hive.HiveClient.getColumnHandles(HiveClient.java:353)         at com.facebook.presto.hive.HiveClient.getColumnHandle(HiveClient.java:319)         at com.facebook.presto.hive.PrismClient.getColumnHandle(PrismClient.java:409)         at com.facebook.presto.spi.classloader.ClassLoaderSafeConnectorMetadata.getColumnHandle(ClassLoaderSafeConnectorMetadata.java:80)         at com.facebook.presto.metadata.MetadataManager.getColumnHandle(MetadataManager.java:266)         at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitTable(TupleAnalyzer.java:202)         at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitTable(TupleAnalyzer.java:115)         at com.facebook.presto.sql.tree.Table.accept(Table.java:36)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeFrom(TupleAnalyzer.java:859)         at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:300)         at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:115)         at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:481)         at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:96)         at com.facebook.presto.sql.tree.Query.accept(Query.java:80)         at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)         at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:49)         at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:195)         at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:180)         at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:141)         at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:391)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)         at java.util.concurrent.FutureTask.run(FutureTask.java:262)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)         at java.lang.Thread.run(Thread.java:744) </body>
		<created>2014-06-28 04:10:09</created>
		<closed>2014-06-30 21:18:39</closed>
	</bug>
	<bug>
		<id>1292</id>
		<title>IN subquery does not add implicit coercions</title>
		<body>This query should return work but throws an error due to the missing implicit coercion:  ``` select 1.0 in (values (1),(2), (3)); ``` </body>
		<created>2014-05-09 17:58:53</created>
		<closed>2017-03-23 21:51:26</closed>
	</bug>
	<bug>
		<id>1283</id>
		<title>JDBC client threads prevent JVM shutdown</title>
		<body>There are at least a couple of (lame) work arounds. The easiest way is to terminate the JVM at the end of main thread:  ``` System.exit(0); ```  Another option is to de-register the driver and then force a garbage collection which should invoke the finalizer (simply calling `close()` does not work because there are actually two instances of the driver -- one from `registerDriver()` and the other from `ServiceLoader`):  ``` Driver driver = DriverManager.getDriver("jdbc:presto://"); DriverManager.deregisterDriver(driver); System.gc(); ```  Of course, we need to fix this properly in the driver. </body>
		<created>2014-05-07 20:10:16</created>
		<closed>2015-04-22 05:10:25</closed>
	</bug>
	<bug>
		<id>1221</id>
		<title>Identity CAST of HyperLogLog fails</title>
		<body>select cast(cast(null as HyperLogLog) as HyperLogLog);  Results in: Query 20140422_220951_00004_n5kdf failed: Cannot cast com.facebook.presto.spi.type.HyperLogLogType@74bebc01 to com.facebook.presto.spi.type.HyperLogLogType@74bebc01 com.facebook.presto.sql.analyzer.SemanticException: Cannot cast com.facebook.presto.spi.type.HyperLogLogType@74bebc01 to com.facebook.presto.spi.type.HyperLogLogType@74bebc01     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:570)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitCast(ExpressionAnalyzer.java:169)     at com.facebook.presto.sql.tree.Cast.accept(Cast.java:46)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:166)     at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyzeExpression(ExpressionAnalyzer.java:813)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:781)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:281)     at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:106)     at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:457)     at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:91)     at com.facebook.presto.sql.tree.Query.accept(Query.java:80)     at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)     at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:49)     at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:199)     at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:184)     at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:145)     at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:391)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)     at java.util.concurrent.FutureTask.run(FutureTask.java:166)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:722) </body>
		<created>2014-04-22 22:11:34</created>
		<closed>2014-05-30 01:13:55</closed>
	</bug>
	<bug>
		<id>1138</id>
		<title>Task stuck in PLANNING state</title>
		<body>There's some weird bug in the coordinator that results in queries getting stuck. The symptoms are: - One or more tasks for a query in state PLANNING - Other tasks get splits assigned and make progress - Worker associated with that task doesn't receive any HTTP requests for status updates or split assignment for the task - Restarting the worker doesn't seem to fix the issue - Restarting the coordinator "fixes" it. </body>
		<created>2014-03-19 19:35:49</created>
		<closed>2015-04-20 23:42:22</closed>
	</bug>
	<bug>
		<id>1085</id>
		<title>Default read timeout for HttpClients too large</title>
		<body>The default read timeout for HttpClient is 1minutes.  Most remote interactions in Presto are short and automatically retired, so a long timeout is counterproductive.  A shorter timeout will allow Presto to detect failed queries much faster and free up resources. </body>
		<created>2014-02-28 18:47:14</created>
		<closed>2015-08-03 17:39:54</closed>
	</bug>
	<bug>
		<id>1084</id>
		<title>Bad connector can hang worker</title>
		<body>If a connector hangs in a call to RecordSet, all threads in the worker can become deadlocked:  ```    TaskExecutorThread:         PrioritizedSplitRunner.process()        DriverSplitRunner.processFor()        Driver.process() &lt;lock&gt;        Hang due to bug in connector     CallbackThread:         StateMachine&lt;Task&gt; transition to a done state        TaskExecutor.removeTask() &lt;lock&gt;        DriverSplitRunner.close() &lt;lock&gt; [deadlock]        Driver.close() &lt;lock&gt; (next call so we would deadlock here also)     AllHttpWorkerThreads:         TaskResource.createOrUpdateTask        SqlTaskManager.updateTask &lt;lock&gt;        TaskExecutor.addTask &lt;lock&gt; ``` </body>
		<created>2014-02-28 18:43:52</created>
		<closed>2014-03-11 00:09:50</closed>
	</bug>
</bugs>
