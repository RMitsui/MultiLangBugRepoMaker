<?xml version="1.0" encoding="ISO-8859-1"?>

<bugs>
	<bug>
		<id>6532</id>
		<title>2.7.8 默认ConfigCenter的group属性丢失</title>
		<body># Environment * Dubbo version: 2.7.8 * Java version: 1.8  ### Steps to reproduce this issue 1. 应用使用dubbo2.7.8客户端，使用ZK作为注册中心    &lt;dubbo:registry protocol="zookeeper" address="localhost:2181" client="curator"/&gt;  2. dubbo-admin 添加全局配置 dubbo.registry.simplified=true dubbo.registry.extra-keys=isolate,zone  3. 启动应用，简化URL未生效  ### Expected Result 我们期望通过外部化配置为所有客户端开启元数据中心和简化URL。因为配置中心数据比较少，所以我们使用了默认的配置中心，然后元数据中心和简化URL相关配置放在配置中心，因为每个客户端都已经配置了注册中心，这样就可以在客户端不做任何修改的前提下，为所有客户端开启元数据中心和简化URL功能  ### Actual Result 配置中心未生效   自己调试时发现：在根据注册中心生成配置中心的时候，因为 RegistryConfig中的group属性默认为空，导致修改了 ConfigCenterConfig 的group属性的默认值(dubbo) ，所以读取配置的路径变成  /dubb/config/dubbo.properties， 实际上dubbo-admin 写配置的路径为  /dubb/config/dubb/dubbo.properties   ### 尝试修改 在 DubboBootstrap#registryAsConfigCenter  方法中添加一个判断操作 ```         if(StringUtils.isNotEmpty(registryConfig.getGroup())){             cc.setGroup(registryConfig.getGroup());         } ```  经过验证，发现可以生效，是否提交一个PR？ </body>
		<created>2020-07-29 07:08:08</created>
		<closed>2020-08-31 15:29:58</closed>
	</bug>
	<bug>
		<id>5961</id>
		<title>the guarantee of the order of notifications</title>
		<body>How to guarantee the order of notifications？From `NotifyListener#notify`:  &gt;The order of notifications to be guaranteed by the notifications(That is, the implementation of the registry). Such as: single thread push, queue serialization, and version comparison.  If Dubbo realize it by single thread push,  i thinks it is a bug beacause the existance of `AbstractRetryTask`.   If a action1 for A fail then submit to timer to try,  but before the retry, action2 for A happen and success,  then task retry success, maybe happen overide. </body>
		<created>2020-04-02 03:49:20</created>
		<closed>2020-08-28 08:01:20</closed>
	</bug>
	<bug>
		<id>5871</id>
		<title>Consumer will lose subscribed service information when use Nacos as registry center</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.7-SNAPSHOT * Operating System version: MacOS * Java version: OpenJDK 13  ### Steps to reproduce this issue  1. Open the dubbo-demo-xml project 2. Modify the registry center both of provider and consumer to Nacos；Open the check switch of consumer 3. Run the provider 4.Run the consumer  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  The rpc can work properly.  ### Actual Result  It fails.  If there is an exception, please attach the exception trace:  ``` Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'demoService': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.demo.DemoService. No provider available for the service org.apache.dubbo.demo.DemoService from the url nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.2&amp;init=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=90344&amp;qos.port=33333&amp;register.ip=127.0.0.1&amp;side=consumer&amp;sticky=false&amp;timestamp=1584323664330 to the consumer 127.0.0.1 use dubbo version  at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:177) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1640) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1086) at org.apache.dubbo.demo.consumer.Application.main(Application.java:33) Caused by: java.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.demo.DemoService. No provider available for the service org.apache.dubbo.demo.DemoService from the url nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.2&amp;init=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello,sayHelloAsync&amp;pid=90344&amp;qos.port=33333&amp;register.ip=127.0.0.1&amp;side=consumer&amp;sticky=false&amp;timestamp=1584323664330 to the consumer 127.0.0.1 use dubbo version  at org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:350) at org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:258) at org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:158) at org.apache.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:68) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:170) ... 6 more ```</body>
		<created>2020-03-16 01:55:24</created>
		<closed>2020-04-03 07:12:02</closed>
	</bug>
	<bug>
		<id>5830</id>
		<title>"payload" configuratoin doesn't work  in consumer side while setting simplified="true" </title>
		<body>- [x] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.4.1 * Operating System version:Linux version 4.15.0-88-generic 16.04.1-Ubuntu * Java version: java version "1.8.0_201"  ### Steps to reproduce this issue  1. server-side configuration ```      &lt;dubbo:registry  address="zookeeper://127.0.0.1:2181" check="false" simplified="true"       file="${user.home}/.dubbo/${application.name}-cache.properties"/&gt;     &lt;dubbo:provider timeout="60000" retries="1" payload="104857600" /&gt;     &lt;dubbo:metadata-report address="zookeeper://127.0.0.1:2181"  /&gt; ``` 2. client-side    invoke method, and the response' data size  is more than 8M(default payload) but less than 100M(configued payload).  ### Expected Result   there is not exception, and the result was returned as expected. ### Actual Result   throws an ExceedPayloadLimitException ``` Caused by: org.apache.dubbo.remoting.transport.ExceedPayloadLimitException: Data length too large: 11727594, max payload: 8388608, channel: NettyChannel [channel=[id: 0x61f431d2, L:/172.18.0.1:52186 - R:/172.18.0.1:20880]] at org.apache.dubbo.remoting.transport.AbstractCodec.checkPayload(AbstractCodec.java:50) ``` </body>
		<created>2020-03-05 06:41:11</created>
		<closed>2020-06-24 01:52:45</closed>
	</bug>
	<bug>
		<id>5690</id>
		<title>Dubbo Telnet Unsupported command: ls</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.5 * Operating System version: macOs Mojave 10.14.6 * Java version: 1.8  ### Steps to reproduce this issue  1. 正常启动项目后无法使用telnet的`ls`,`cd`,`invoke`等命令； 2. 自己通过debug发现，在读取`/META-INF/dubbo/internal/org.apache.dubbo.remoting.telnet.TelnetHandler`这个配置文件的时候，在解析第6到14这几行的时候，出现了类加载失败的情况。 3. 于是我便去源码中找了这几个类，发现它们的包结构和之前的版本`2.7.4.1`有所不同。 4. 这几个类由`org.apache.dubbo.rpc.protocol.dubbo.telnet`包移动到了`org.apache.dubbo.qos.legacy`这个包下面。 5. 我不知道我有没有找到根本原因，但这一定是其中之一，目前也有一个解决办法，并且我已经使用这个方法解决了这个问题。我把这些加载失败的Telnet类，放到了Telnet扩展中。  ### 解决方案 把临时解决方案贴上来，希望能帮助遇到同样问题的小伙伴。 在项目`resources`目录中添加`META-INF/dubbo/org.apache.dubbo.remoting.telnet.TelnetHandler`文本文件，然后将加载失败的类包名修改后，配置到文件中。  文件内容如下： ``` ls=org.apache.dubbo.qos.legacy.ListTelnetHandler ps=org.apache.dubbo.qos.legacy.PortTelnetHandler cd=org.apache.dubbo.qos.legacy.ChangeTelnetHandler pwd=org.apache.dubbo.qos.legacy.CurrentTelnetHandler invoke=org.apache.dubbo.qos.legacy.InvokeTelnetHandler trace=org.apache.dubbo.qos.legacy.TraceTelnetHandler count=org.apache.dubbo.qos.legacy.CountTelnetHandler select=org.apache.dubbo.qos.legacy.SelectTelnetHandler shutdown=org.apache.dubbo.qos.legacy.ShutdownTelnetHandler clear=org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler exit=org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler help=org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler status=org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler log=org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler ``` 在项目中添加配置项： ``` dubbo.protocol.telnet=clear,exit,help,status,log,ls,ps,cd,pwd,invoke,trace,count,select,shutdown ``` 使用方法在官方文档中有说明：[扩展telnet](http://dubbo.apache.org/zh-cn/docs/dev/impls/telnet-handler.html) 这个问题修改`/META-INF/dubbo/internal/org.apache.dubbo.remoting.telnet.TelnetHandler`的文件内容后就会解决，如有使用不当之处，还望开发者回复。  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` Unsupported command: ls ``` </body>
		<created>2020-01-21 11:17:22</created>
		<closed>2020-03-07 15:16:41</closed>
	</bug>
	<bug>
		<id>5442</id>
		<title>VERSION_KEY和GROUP_KEY为空时，注册到NACOS的服务名与alibaba实现不一致，导致无法消费。</title>
		<body>### Environment  * Dubbo version: latest version * Operating System version: LINUX &amp; WINDOWS * Java version: 1.8  ### Steps to reproduce this issue  必现哦  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  VERSION_KEY和GROUP_KEY为空时，注册到NACOS的服务名不带双冒号后缀。  ### Actual Result  What actually happens?  VERSION_KEY和GROUP_KEY为空时，注册到NACOS的服务名有双冒号后缀，与alibaba实现不一致。 alibaba实现是为空时无双冒号后缀。 </body>
		<created>2019-12-09 09:01:29</created>
		<closed>2020-02-19 07:49:48</closed>
	</bug>
	<bug>
		<id>5197</id>
		<title>ApplicationModel basic metadata lose</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.1 * Operating System version: win10 * Java version: 1.8  ### Steps to reproduce this issue  1. config dubbo.provider.group=xxx or dubbo.provider.version=x.x.x 2. export providers as rest protocol 3. startup application will NPE  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？ fine  ### Actual Result  What actually happens? NPE  If there is an exception, please attach the exception trace:   ``` java.lang.NullPointerException: null at org.apache.dubbo.rpc.protocol.rest.RestProtocol.doExport(RestProtocol.java:99) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.protocol.AbstractProxyProtocol.export(AbstractProxyProtocol.java:78) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:63) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:61) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:122) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.registry.integration.RegistryProtocol.lambda$doLocalExport$2(RegistryProtocol.java:245) ~[dubbo-2.7.3.jar:2.7.3] at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) ~[na:1.8.0_102] at org.apache.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:243) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:209) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:61) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:59) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:120) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:607) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:457) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:415) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:378) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.spring.ServiceBean.export(ServiceBean.java:336) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:114) ~[dubbo-2.7.3.jar:2.7.3] at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:60) ~[dubbo-2.7.3.jar:2.7.3] ``` ![image](https://user-images.githubusercontent.com/21060863/67087831-4dad2900-f1d6-11e9-8b8c-1fe41e452224.png) 发生这个问题的主要原因是当使用dubbo.provider/consumer指定分组/版本信息时候，分组/版本等default元数据没正确的存入到ApplicationModel中。 </body>
		<created>2019-10-18 10:39:57</created>
		<closed>2019-12-18 06:12:03</closed>
	</bug>
	<bug>
		<id>5186</id>
		<title>appear NullPointException if Parameters is null</title>
		<body>  ### Environment  * Dubbo version: 2.7.4-release   ### Steps to reproduce this issue  ```  cc.getParameters().put(org.apache.dubbo.remoting.Constants.CLIENT_KEY, rc.getClient()); ``` appear NullPointException if Parameters is null  #5185  </body>
		<created>2019-10-17 10:01:17</created>
		<closed>2019-10-25 01:06:16</closed>
	</bug>
	<bug>
		<id>4991</id>
		<title>当配置中心和注册中心在一个zk集群上，zk为未正常初始化问题</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.3 * Operating System version: macOS 10.14.6 * Java version: 1.8  ### Steps to reproduce this issue  在我项目中，**配置中心**和**注册中心**都是使用zookeeper，而且是在一个集群上，只是 **path** 和对应的 **username** 和 **password** 不同，但是并未正常初始化两个不同的zk client。  项目启动时： 1、连接配置中心的地址，获取**配置中心**的配置信息 2、在初始化ReferenceBean和ServiceBean，会校验**注册中心**是否初始化  两者都通过 AbstractZookeeperTransporter#connect(URL url) 方法去连接zk  ``` public abstract class AbstractZookeeperTransporter implements ZookeeperTransporter {     //缓存 zk client，key为zk地址     private final Map&lt;String, ZookeeperClient&gt; zookeeperClientMap = new ConcurrentHashMap&lt;&gt;();           @Override     public ZookeeperClient connect(URL url) {         ZookeeperClient zookeeperClient;         List&lt;String&gt; addressList = getURLBackupAddress(url);         // 这个地方会走缓存         if ((zookeeperClient = fetchAndUpdateZookeeperClientCache(addressList)) != null &amp;&amp; zookeeperClient.isConnected()) {             logger.info("find valid zookeeper client from the cache for address: " + url);             return zookeeperClient;         }         。。。     }      ZookeeperClient fetchAndUpdateZookeeperClientCache(List&lt;String&gt; addressList) {          ZookeeperClient zookeeperClient = null;         for (String address : addressList) {             if ((zookeeperClient = zookeeperClientMap.get(address)) != null &amp;&amp; zookeeperClient.isConnected()) {                 break;             }         }         if (zookeeperClient != null &amp;&amp; zookeeperClient.isConnected()) {             //将 zookeeperClient 放入 zookeeperClientMap 缓存中             writeToClientMap(addressList, zookeeperClient);         }         return zookeeperClient;     }     void writeToClientMap(List&lt;String&gt; addressList, ZookeeperClient zookeeperClient) {         for (String address : addressList) {             // 使用 address 作为key             zookeeperClientMap.put(address, zookeeperClient);         }     } } ```  从上边可以看出，在初始化 **配置中心**的 zk client 后，就缓存到了 zookeeperClientMap 中。 当**注册中心**去初始化zk client 时，由于跟**配置中心**在一个集群上，所以 address相同，就会走缓存，返回 **配置中心**的 zk cliient。   **总结**： 如果**配置中心**和**注册中心**在一个集群上，zookeeperClientMap就不能使用address作为key。   **解决方案**： URL信息（配置中心） ![image](https://user-images.githubusercontent.com/13186839/64221021-f42abc80-cefd-11e9-8920-d283ae27e864.png)  URL信息（注册中心） ![image](https://user-images.githubusercontent.com/13186839/64220937-aada6d00-cefd-11e9-8446-69a8f2f95d4a.png)  通过上边两个图可以看出，**配置中心** 和  **注册中心** 传入的 URL信息里边的 **path** 是不相同的，将 zookeeperClientMap 的 key 使用 **address + url.path** 的方式生成，就可以解决这个问题</body>
		<created>2019-09-03 13:43:21</created>
		<closed>2020-02-07 09:40:50</closed>
	</bug>
	<bug>
		<id>4917</id>
		<title>对于dubbo2.7.x，如果zk设置了Acl，默认配置中心设置会导致服务注册失败</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.3 * Operating System version: win10 * Java version: 1.8  ### Steps to reproduce this issue 场景： 1、zookeeper针对dubbo节点设置了访问控制； 2、dubbo使用curator作为zk客户端； 3、当我从2.6.3升级到2.7.3之后发现，服务无法在zookeeper里注册，异常提示： NoAuth  问题分析： 之后通过文档，发现dubbo 2.7 之后增加了配置中心和元数据中心，并默认采用服务注册中心的配置；但是对于username/password属性并没有继承使用； 导致服务注册过程中提示没有权限。  疑问？ 配置中心和服务注册中心的配置是独立的， 但实际上配置中心的如果不设置zk的用户密码，却会导致服务注册失败；   </body>
		<created>2019-08-22 11:50:30</created>
		<closed>2019-10-10 08:52:06</closed>
	</bug>
	<bug>
		<id>4871</id>
		<title>在windows连接zookeeper出现文件写入异常</title>
		<body>在 2.7.3 这个版本中,在windows下连接zookeeper时,会出现写入文件异常,目测是文件路径写入不对 ![image](https://user-images.githubusercontent.com/20511319/63245245-429b5280-c292-11e9-986a-bf95c894d98f.png) </body>
		<created>2019-08-19 07:02:05</created>
		<closed>2019-10-11 13:31:15</closed>
	</bug>
	<bug>
		<id>4525</id>
		<title>TagRouter在设置静态标签的时候无法降级访问到无标签的服务</title>
		<body> - [ ] I have searched the issues of this repository and believe that this is not a duplicate.  - [x]  I have checked the FAQ of this repository and believe that this is not a duplicate.  Environment Dubbo version: 2.7.2 Operating System version: Mac OS Java version: 1.8 Steps to reproduce this issue  Infos:  |  IP |  SIDE  |  ENV | STATIC TAG  |     DYNAMIC TAG | | ---- | ---- | ---- | ---- |---- | |    192.168.1.5  |  Consumer |  DEV   |  DEV   |hello| |    192.168.1.6  |   Provider   |  QA   |  QA   | | |    192.168.1.7  |   Provider   |  STABLE |  |   When I config TagRouter like this (in Dubbo admin):  ``` --- force: false runtime: true enabled: true priority: 1 key: hello-service tags:   - name: hello     addresses: ["192.168.1.8","192.168.1.9"] ... ```  when without match dynamic tag and static tag Hope Result:    ``` 192.168.1.5(DEV) =&gt;  192.168.1.7(STABLE) ``` Actual Result:  ``` 192.168.1.5(DEV) =&gt; [NO PROVIDER] ```  原因:  消费方初始化refer时，在ReferenceConfig中会将consumer的配置参数放入一个map(具体参考ReferenceConfig类中第303行`appendParameters(map, consumer)`)，然后在创建代理的时候会合并消费方和提供方的配置参数(参考ReferenceConfig类中第371行`urls.add(ClusterUtils.mergeUrl(url, map));`)，之后在ClusterUtils中尽管会保留提供方的配置，参数，但是在消费方设置了dubbo.tag参数，而提供方未设置dubbo.tag的情况下，导致加了消费方默认的dubbo.tag;  然后在进行标签路由时，由于设置了动态标签路由，但是又没有匹配的提供方实例，最后会获取动态标签中不存在，且动态标签为空的实例（参考TagRouter类中第125~127行，如下） ```  // FAILOVER: return all Providers without any tags.             else {                 List&lt;Invoker&lt;T&gt;&gt; tmp = filterInvoker(invokers, invoker -&gt; addressNotMatches(invoker.getUrl(),                         tagRouterRuleCopy.getAddresses()));                 return filterInvoker(tmp, invoker -&gt; StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY)));             } ``` 但是由于之前在refer的时候合并了参数，这边尽管Stable下的实例192.168.1.7的ProviderConfig URL中不带Dubbo TAG，这里还是会获取到消费方的默认标签DEV。  解决: 修改判断条件：  ``` return filterInvoker(tmp, invoker -&gt; StringUtils.isEmpty(url.getParameter(Constants.TAG_KEY)? StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY)) : invoker.getUrl().getParameter(Constants.TAG_KEY).equals(url.getParameter(Constants.TAG_KEY)) ); ```  另外，发现标签路由的常量跟官方文档中不一致，实际上是: ``` org.apache.dubbo.rpc.cluster.TAG_KEY org.apache.dubbo.rpc.FORCE_USE_TAG ``` 能够统一修正为: ``` org.apache.dubbo.rpc.cluster.TAG_KEY org.apache.dubbo.rpc.cluster.FORCE_KEY ```</body>
		<created>2019-07-10 10:23:32</created>
		<closed>2019-07-12 08:36:55</closed>
	</bug>
	<bug>
		<id>4330</id>
		<title>DubboComponentScan cannot backward support for alibaba @Service and @Reference.</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.2 * Operating System version: macOs  * Java version: JDK 1.8  ### Steps to reproduce this issue  1. Currently, my dubbo service is beyond 2.5.10, and going to upgrade 2.7.2. The build system  errors me that DubboComponentScan is not exists in alibaba package, then select to auto-import apache one.   ``` import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan; @SpringBootApplication @DubboComponentScan public class ServiceInitializer extends SpringBootServletInitializer {   @Override   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {     return application.sources(ServiceInitializer.class);   } } ```  2. I have forgot to switch @Service from alibaba to apache one. The IDE's alert doesn't obviously, and build system doesn't stop the build. ``` import com.alibaba.dubbo.config.annotation.Service; @Service public class DemoServiceImpl implements DemoService {   @Override   public String sayHello(String name) {     return "welcome,"+name;   } } ```  3. The application is running without error message, but service have not been started.   Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  The DubboComponentScan should backward compatible with alibaba @Service and @Reference.  ### Actual Result  It's incompatible with alibaba @Service and @Reference.  If there is an exception, please attach the exception trace:  The service have not thrown any exception, consumer will throw no provider exception as service not started. </body>
		<created>2019-06-18 03:13:17</created>
		<closed>2019-06-24 07:09:05</closed>
	</bug>
	<bug>
		<id>4278</id>
		<title>AbstractConfig's equals method</title>
		<body>```java     @Override     public boolean equals(Object obj) {         if (obj == null || !(obj.getClass().getName().equals(this.getClass().getName()))) {             return false;         }          Method[] methods = this.getClass().getMethods();         for (Method method1 : methods) {             if (MethodUtils.isGetter(method1) &amp;&amp; ClassUtils.isPrimitive(method1.getReturnType())) {                 Parameter parameter = method1.getAnnotation(Parameter.class);                 if (parameter != null &amp;&amp; parameter.excluded()) {                     continue;                 }                 try {                     Method method2 = obj.getClass().getMethod(method1.getName(), method1.getParameterTypes());                     Object value1 = method1.invoke(this, new Object[]{});                     Object value2 = method2.invoke(obj, new Object[]{});                     if ((value1 != null &amp;&amp; value2 != null) &amp;&amp; !value1.equals(value2)) {                         return false;                     }                 } catch (Exception e) {                     return true;                 }             }         }         return true;     } ``` If one value of this object is null, and the value of obj is not null, Shouldn't we return false ?</body>
		<created>2019-06-11 19:04:18</created>
		<closed>2020-02-03 03:29:42</closed>
	</bug>
	<bug>
		<id>4201</id>
		<title>use category in url in org.apache.dubbo.registry.nacos.NacosRegistry#getCategories</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.2-SNAPSHOT * Operating System version: xxx * Java version: xxx  ### Steps to reproduce this issue  ```java  private String[] getCategories(URL url) {         return ANY_VALUE.equals(url.getServiceInterface()) ?                 ALL_SUPPORTED_CATEGORIES : of(DEFAULT_CATEGORY);     } ```  i think it shoudl be :  ```java private String[] getCategories(URL url) {         return ANY_VALUE.equals(url.getServiceInterface()) ?                 ALL_SUPPORTED_CATEGORIES : of(url.getParameter(CATEGORY_KEY,DEFAULT_CATEGORY));     } ```  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` Just put your stack trace here! ``` </body>
		<created>2019-05-30 02:13:25</created>
		<closed>2019-05-31 09:02:10</closed>
	</bug>
	<bug>
		<id>4200</id>
		<title>no need to override group in  org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration#addListener</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: xxx * Operating System version: xxx * Java version: xxx  ### Steps to reproduce this issue  ```java public void addListener(String key, String group, ConfigurationListener listener) {         String[] keyAndGroup = getKeyAndGroup(key);         if (keyAndGroup[1] != null) {             group = keyAndGroup[1];         }         String finalGroup = group;         NacosConfigListener nacosConfigListener = watchListenerMap.computeIfAbsent(generateKey(key, group), k -&gt; createTargetListener(key, finalGroup));         String keyInNacos = rootPath + PROPERTIES_CHAR_SEPERATOR + key;         nacosConfigListener.addListener(listener);         try {             configService.addListener(keyInNacos, group, nacosConfigListener);             System.out.println("1");         } catch (NacosException e) {             logger.error(e.getMessage());         }     } ```  i think we should remove the code : group = keyAndGroup[1]     Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` Just put your stack trace here! ``` </body>
		<created>2019-05-30 02:03:48</created>
		<closed>2019-05-31 03:45:31</closed>
	</bug>
	<bug>
		<id>4175</id>
		<title>ServiceConfigurationListener should override ProviderConfigurationListener</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.2-SNAPSHOT * Operating System version: xxx * Java version: xxx  ### Steps to reproduce this issue  the override rule logic is different between Provider and Consumer.  Provider check ProviderConfigurationListener and then the ServiceConfigurationListener,  Consumer check ConsumerConfigurationListener and then the ReferenceConfigurationListener  i think we should keep them consistent and ServiceConfigurationListener should override ProviderConfigurationListener.   provider:   org.apache.dubbo.registry.integration.RegistryProtocol.OverrideListener#doOverrideIfNecessary ```java public synchronized void doOverrideIfNecessary() {             final Invoker&lt;?&gt; invoker;             if (originInvoker instanceof InvokerDelegate) {                 invoker = ((InvokerDelegate&lt;?&gt;) originInvoker).getInvoker();             } else {                 invoker = originInvoker;             }             //The origin invoker             URL originUrl = RegistryProtocol.this.getProviderUrl(invoker);             String key = getCacheKey(originInvoker);             ExporterChangeableWrapper&lt;?&gt; exporter = bounds.get(key);             if (exporter == null) {                 logger.warn(new IllegalStateException("error state, exporter should not be null"));                 return;             }             //The current, may have been merged many times             URL currentUrl = exporter.getInvoker().getUrl();             //Merged with this configuration             URL newUrl = getConfigedInvokerUrl(configurators, originUrl);             newUrl = getConfigedInvokerUrl(serviceConfigurationListeners.get(originUrl.getServiceKey())                     .getConfigurators(), newUrl);             newUrl = getConfigedInvokerUrl(providerConfigurationListener.getConfigurators(), newUrl);             if (!currentUrl.equals(newUrl)) {                 RegistryProtocol.this.reExport(originInvoker, newUrl);                 logger.info("exported provider url changed, origin url: " + originUrl +                         ", old export url: " + currentUrl + ", new export url: " + newUrl);             }         } ```    consumer:  org.apache.dubbo.registry.integration.RegistryDirectory#overrideWithConfigurator ```java private URL overrideWithConfigurator(URL providerUrl) {         // override url with configurator from "override://" URL for dubbo 2.6 and before         providerUrl = overrideWithConfigurators(this.configurators, providerUrl);          // override url with configurator from configurator from "app-name.configurators"         providerUrl = overrideWithConfigurators(CONSUMER_CONFIGURATION_LISTENER.getConfigurators(), providerUrl);          // override url with configurator from configurators from "service-name.configurators"         if (serviceConfigurationListener != null) {             providerUrl = overrideWithConfigurators(serviceConfigurationListener.getConfigurators(), providerUrl);         }          return providerUrl;     } ```  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` Just put your stack trace here! ``` </body>
		<created>2019-05-27 09:24:44</created>
		<closed>2019-05-29 04:32:53</closed>
	</bug>
	<bug>
		<id>4059</id>
		<title>Cannot recognize 2.6.x compatible rules from dubbo-admin.</title>
		<body>see issue https://github.com/apache/incubator-dubbo-admin/issues/392</body>
		<created>2019-05-15 04:34:48</created>
		<closed>2019-05-15 09:04:03</closed>
	</bug>
	<bug>
		<id>3958</id>
		<title>[Issue] Qos port can't be disabled by externalized property</title>
		<body>Dubbo's Qos port can't be disabled by `dubbo.application.qos-enable=false`</body>
		<created>2019-04-30 02:34:01</created>
		<closed>2019-05-24 06:44:12</closed>
	</bug>
	<bug>
		<id>3952</id>
		<title>Dubbo 2.7.1 ： delay export function doesn't work...</title>
		<body>I set 'delay' label in dubbo config file as below:    ```xml   &lt;dubbo:provider timeout="${dubbo.timeout}" retries="${dubbo.retry}" accesslog="${dubbo.accesslog}" delay="30000" filter="dubboSofaTracrFilter"/&gt;  ```  But when I start the project come across an error: ``` 2019-04-29 17:12:21.525 [crm7] [ERROR] [,] [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:331) Context initialization failed java.lang.NullPointerException at org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:335) at org.apache.dubbo.config.spring.ServiceBean.export(ServiceBean.java:319) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:113) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:59)         .... ``` And I debug the code and found in ServiceConfig.java, there is a method named 'export': ```java     public synchronized void export() {         checkAndUpdateSubConfigs();         if (!shouldExport()) {             return;         }         if (shouldDelay()) {             delayExportExecutor.schedule(this::doExport, delay, TimeUnit.MILLISECONDS);         } else {             doExport();         }     } ``` In this method the 'delay' param is null , and I can't found  codes where set value for it. Please correct me if I was wrong, thank you.  </body>
		<created>2019-04-29 09:36:46</created>
		<closed>2019-04-30 08:48:11</closed>
	</bug>
	<bug>
		<id>3926</id>
		<title>Serialization ContentTypeId conflict between avro protocol and protocoluff protocol</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.2-SNAPSHOT * Operating System version: OS X 10.14.4 * Java version: 1.8.0_202  ### Steps to reproduce this issue  1. [DUBBO] Serialization extension org.apache.dubbo.common.serialize.protostuff.ProtostuffSerialization has duplicate id to Serialization extension org.apache.dubbo.common.serialize.avro.AvroSerialization, ignore this Serialization extension  ```java CodecSupport static {         Set&lt;String&gt; supportedExtensions = ExtensionLoader.getExtensionLoader(Serialization.class).getSupportedExtensions();         for (String name : supportedExtensions) {             Serialization serialization = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name);             byte idByte = serialization.getContentTypeId();             if (ID_SERIALIZATION_MAP.containsKey(idByte)) {                 logger.error("Serialization extension " + serialization.getClass().getName()                         + " has duplicate id to Serialization extension "                         + ID_SERIALIZATION_MAP.get(idByte).getClass().getName()                         + ", ignore this Serialization extension");                 continue;             }             ID_SERIALIZATION_MAP.put(idByte, serialization);             ID_SERIALIZATIONNAME_MAP.put(idByte, name);         }     }  public class ProtostuffSerialization implements Serialization {     @Override     public byte getContentTypeId() {         return 10;     } }  public class AvroSerialization implements Serialization {     @Override     public byte getContentTypeId() {         return 10;     } } ``` </body>
		<created>2019-04-24 13:05:59</created>
		<closed>2019-05-06 03:40:24</closed>
	</bug>
	<bug>
		<id>3907</id>
		<title>2.7.1 dubbo-filter-cache&gt;CacheFactory Adaptive error</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.1 * Operating System version: Win10 * Java version: 1.8  ### Steps to reproduce this issue  1. maven project dependency include artifactId(dubbo-filter-cache) 2. Start a Provider service  ### Expected Result The program start without errors  ### Actual Result 适配CacheFactory代码编译失败： Adaptive code is generate by class "org.apache.dubbo.common.extension.AdaptiveClassCodeGenerator", that it make an error method adaptive code.  If there is an exception, please attach the exception trace:  ``` 2019-04-22 17:54:24.754 [main] ERROR org.apache.dubbo.common.extension.ExtensionLoader -  [DUBBO] Failed to inject via method setCacheFactory of interface org.apache.dubbo.rpc.Filter: Failed to create adaptive instance: java.lang.IllegalStateException: Can't create adaptive extension interface org.apache.dubbo.cache.CacheFactory, cause: Failed to compile class, cause: [source error] no such field: invocation, class: org.apache.dubbo.cache.CacheFactory$Adaptive, code:  package org.apache.dubbo.cache; import org.apache.dubbo.common.extension.ExtensionLoader; public class CacheFactory$Adaptive implements org.apache.dubbo.cache.CacheFactory { public org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL arg0, org.apache.dubbo.rpc.Invocation arg1)  { if (arg0 == null) throw new IllegalArgumentException("url == null"); org.apache.dubbo.common.URL url = arg0; if (arg1 == null) throw new IllegalArgumentException("invocation == null"); String methodName = arg1.getMethodName(); String extName = url.getMethodParameter(methodName, "cache", "lru"); if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.cache.CacheFactory) name from url (" + url.toString() + ") use keys([cache])"); org.apache.dubbo.cache.CacheFactory extension = (org.apache.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.cache.CacheFactory.class).getExtension(extName); return extension.getCache(url, invocation); } } , stack: javassist.CannotCompileException: [source error] no such field: invocation  javassist.CannotCompileException: [source error] no such field: invocation at javassist.CtNewMethod.make(CtNewMethod.java:79) at javassist.CtNewMethod.make(CtNewMethod.java:45) at org.apache.dubbo.common.compiler.support.CtClassBuilder.build(CtClassBuilder.java:168) at org.apache.dubbo.common.compiler.support.JavassistCompiler.doCompile(JavassistCompiler.java:82) at org.apache.dubbo.common.compiler.support.AbstractCompiler.compile(AbstractCompiler.java:59) at org.apache.dubbo.common.compiler.support.AdaptiveCompiler.compile(AdaptiveCompiler.java:45) at org.apache.dubbo.common.extension.ExtensionLoader.createAdaptiveExtensionClass(ExtensionLoader.java:859) at org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtensionClass(ExtensionLoader.java:852) at org.apache.dubbo.common.extension.ExtensionLoader.createAdaptiveExtension(ExtensionLoader.java:841) at org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension(ExtensionLoader.java:478) at org.apache.dubbo.common.extension.factory.SpiExtensionFactory.getExtension(SpiExtensionFactory.java:33) at org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory.getExtension(AdaptiveExtensionFactory.java:47) at org.apache.dubbo.common.extension.ExtensionLoader.injectExtension(ExtensionLoader.java:562) at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:531) at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:347) at org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(ExtensionLoader.java:225) at org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(ExtensionLoader.java:192) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.buildInvokerChain(ProtocolFilterWrapper.java:49) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:108) at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java) at org.apache.dubbo.registry.integration.RegistryProtocol.lambda$2(RegistryProtocol.java:220) at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) at org.apache.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:218) at org.apache.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:184) at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:55) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:106) at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java) at org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:559) at org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:417) at org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:375) at org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:337) at org.apache.dubbo.config.spring.ServiceBean.export(ServiceBean.java:319) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:113) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:1) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:402) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:359) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:896) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:144) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:85) at com.ccesun.rhpf.regi.provider.RmiEnvInitServiceTest.testServiceStart(RmiEnvInitServiceTest.java:28) at com.ccesun.rhpf.regi.provider.RmiEnvInitServiceTest.main(RmiEnvInitServiceTest.java:41) Caused by: compile error: no such field: invocation at javassist.compiler.TypeChecker.fieldAccess(TypeChecker.java:845) at javassist.compiler.TypeChecker.atFieldRead(TypeChecker.java:803) at javassist.compiler.TypeChecker.atMember(TypeChecker.java:988) at javassist.compiler.JvstTypeChecker.atMember(JvstTypeChecker.java:66) at javassist.compiler.ast.Member.accept(Member.java:39) at javassist.compiler.JvstTypeChecker.atMethodArgs(JvstTypeChecker.java:221) at javassist.compiler.TypeChecker.atMethodCallCore(TypeChecker.java:735) at javassist.compiler.TypeChecker.atCallExpr(TypeChecker.java:695) at javassist.compiler.JvstTypeChecker.atCallExpr(JvstTypeChecker.java:157) at javassist.compiler.ast.CallExpr.accept(CallExpr.java:46) at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:242) at javassist.compiler.CodeGen.compileExpr(CodeGen.java:229) at javassist.compiler.CodeGen.atReturnStmnt2(CodeGen.java:615) at javassist.compiler.JvstCodeGen.atReturnStmnt(JvstCodeGen.java:425) at javassist.compiler.CodeGen.atStmnt(CodeGen.java:363) at javassist.compiler.ast.Stmnt.accept(Stmnt.java:50) at javassist.compiler.CodeGen.atStmnt(CodeGen.java:351) at javassist.compiler.ast.Stmnt.accept(Stmnt.java:50) at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:292) at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:274) at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:44) at javassist.compiler.Javac.compileMethod(Javac.java:169) at javassist.compiler.Javac.compile(Javac.java:95) at javassist.CtNewMethod.make(CtNewMethod.java:74) ... 44 more ``` </body>
		<created>2019-04-22 10:08:05</created>
		<closed>2019-04-26 01:22:43</closed>
	</bug>
	<bug>
		<id>3875</id>
		<title>dubbo TagRouter does not work with dubbo:parameter</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.1 * Operating System version: win10 * Java version: jdk1.8.0_101  ### Steps to reproduce this issue  1. 使用 [dubbo-demo-xml](https://github.com/apache/incubator-dubbo/tree/master/dubbo-demo/dubbo-demo-xml) 项目，或者其他测试项目 2. 启动两个provider示例，一个在 `&lt;dubbo:service/&gt;` 中加上`tag="groupA"` 我们叫他 `p1`，另一个不加tag 我们叫他 `p2`. 3. 在`&lt;dubbo:reference&gt;`标签中添加`&lt;dubbo:parameter key="dubbo.tag" value="groupA"/&gt;` 之后将consumer 示例启动 --- 1. use [dubbo-demo-xml](https://github.com/apache/incubator-dubbo/tree/master/dubbo-demo/dubbo-demo-xml), or other demo . 2. prepare two providers, one set `tag="groupA"` at `&lt;dubbo:service/&gt;` called `p1` , another with no tag called `p2`. start them. 3. start a consumer instance ,after set `&lt;dubbo:parameter key="dubbo.tag" value="groupA"/&gt;` inside of `&lt;dubbo:reference&gt;`.  ### Expected Result  因为拥有相同的tag声明，consumer本应该会调用到`p1`示例. consumer would connect `p1`  because of the same tag definition  ### Actual Result  但consumer依然可能连接到`p2`示例. consumer also connects `p2`.  --- 如果把 步骤3 的标签改为在调用代码中使用`RpcContext.getContext().setAttachment("dubbo.tag","groupA")`,是可以正常工作的。请问这两种方式有什么区别呢？  通过分析源码发现 在 [RegistryDiscovery](https://github.com/apache/incubator-dubbo/blob/1706807a1c9221fb13a24a8b318a56c699eea67d/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java#L431) 中将consumer 端的parameter 整合到providerUrl 中。 请问为什么需要这步操作？ </body>
		<created>2019-04-15 10:19:24</created>
		<closed>2019-04-26 02:54:26</closed>
	</bug>
	<bug>
		<id>3866</id>
		<title>dubbo 2.7.1下的zookeeper客户端监听出现空指针问题</title>
		<body>### Environment  * Dubbo version: 2.71 * Operating System version: Windows 10 * Java version: Oracle JDK 1.8.1_191  ### Steps to reproduce this issue 使用curator版本2.13.0，作为dubbo:refenence，应用启动报错如下异常： 2019-04-12 15:40:24.145 ERROR ZookeeperDynamicConfiguration-thread-1 TreeCache.handleException:760 [] java.lang.NullPointerException: null at java.lang.String.&lt;init&gt;(String.java:515) ~[?:1.8.0_191] at org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.childEvent(CuratorZookeeperClient.java:298) ~[dubbo-2.7.1.jar:2.7.1] at org.apache.curator.framework.recipes.cache.TreeCache$2.apply(TreeCache.java:741) [curator-recipes-2.13.0.jar:?] at org.apache.curator.framework.recipes.cache.TreeCache$2.apply(TreeCache.java:735) [curator-recipes-2.13.0.jar:?] at org.apache.curator.framework.listen.ListenerContainer$1.run(ListenerContainer.java:93) [curator-framework-2.13.0.jar:?] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_191] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_191] at java.lang.Thread.run(Thread.java:748) [?:1.8.0_191] </body>
		<created>2019-04-12 07:53:42</created>
		<closed>2019-05-23 03:20:12</closed>
	</bug>
	<bug>
		<id>3779</id>
		<title>problem with generic parameters when using fastjson serialization</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.2 * Operating System version: windows 10 * Java version: 1.8  ### Steps to reproduce this issue 1. using generic types(say List&lt;PersonTest&lt;String&gt;&gt; or Map&lt;String, List&lt;PersonTest&lt;String&gt;&gt;&gt;) as method parameters 2. call this RPC method the similar problem with generic return type has been fixd in #3771   Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  the provider side with receive the correct parameter type  ### Actual Result  the actual result is as the following  ![image](https://user-images.githubusercontent.com/12162539/55305082-4cf2b680-5481-11e9-8893-3c21a14701a6.png) and when I trying to do some with it, it will throw an exception  If there is an exception, please attach the exception trace:  ``` java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to org.apache.dubbo.demo.PersonTest at java.util.ArrayList.forEach(ArrayList.java:1257) at org.apache.dubbo.demo.provider.DemoServiceImpl.fastjsonTest1(DemoServiceImpl.java:67) at org.apache.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java) at org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:47) at org.apache.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:86) at org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:56) at org.apache.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56) at org.apache.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:63) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:88) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:54) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:80) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:79) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:137) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:39) at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:73) at org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:128) at org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:103) at org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:200) at org.apache.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51) at org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:57) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) ``` </body>
		<created>2019-04-01 05:27:32</created>
		<closed>2020-08-07 03:20:48</closed>
	</bug>
	<bug>
		<id>3770</id>
		<title>从2.7.0升级到2.7.1发现的BUG</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.1 * Operating System version: CentOS Linux release 7.6.1810 (Core) * Java version: 1.8  ### Steps to reproduce this issue  1. yml配置文件 ```yml dubbo:   application:     name: bessky-boot-service   protocol:     name: dubbo     port: 28300   scan:     basePackages: com.bessky   registry:     address: zookeeper://192.168.99.230:2181 ``` 2. 测试接口 ```java public interface HelloService { String hello(String name); } ``` 3. 接口实现类 ```java @Service public class HelloServiceImpl implements HelloService { @Override public String hello(String name) { System.out.println(name); return "Hello, " + name; } } ``` 4.启动类 ```java @SpringBootApplication public class BesskyBootServiceApplication { public static void main(String[] args) { SpringApplication.run(BesskyBootServiceApplication.class, args); } } ``` 5.将Spring BOOT工程打包上传到CentOS服务器测试  问题1：注册到ZK上的地址变成了127.0.0.1，回退到Dubbo的2.7.0版本是能正确获取到网卡IP地址的。 执行hostname命令结果是localhost.localdomain /etc/hosts文件内容是 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6 这种配置在2.7.0上是可以正确获取到网卡IP地址的  问题2：注册到ZK上的服务都变成了静态服务  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  1、正常获取到网卡IP地址 2、动态服务  ### Actual Result  服务地址:dubbo://127.0.0.1:28300/com.bessky.hello.service.HelloService?anyhost=true&amp;application=bessky-boot-service&amp;bean.name=providers:dubbo:com.bessky.hello.service.HelloService&amp;default.deprecated=false&amp;default.dynamic=false&amp;default.register=true&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=false&amp;generic=false&amp;interface=com.bessky.hello.service.HelloService&amp;methods=hello&amp;pid=181167®ister=true&amp;release=2.7.1&amp;side=provider×tamp=1553819455170 主机名:(localhost)127.0.0.1:28300 所属端:provider 方法列表:hello release:2.7.1 deprecated:false Dubbo版本:2.0.2 进程号:181167 default.dynamic:false 接口名:com.bessky.hello.service.HelloService generic:false default.deprecated:false 应用名:bessky-boot-service default.register:true 动态:false 绑定所有IP:true bean.name:providers:dubbo:com.bessky.hello.service.HelloService 申请注册:true 时间戳:2019-03-29 08:30:55 (1553819455170) 类型:静态 状态:已启用 检查:  警告 </body>
		<created>2019-03-29 00:39:48</created>
		<closed>2019-05-06 06:34:28</closed>
	</bug>
	<bug>
		<id>3746</id>
		<title>AbstractRegistry中doSaveProperties方法如果读取的文件权限不足会进入catch块，然后重试，死循环导致cpu占用率百分百</title>
		<body></body>
		<created>2019-03-27 02:31:54</created>
		<closed>2019-04-17 02:55:21</closed>
	</bug>
	<bug>
		<id>3638</id>
		<title>injvm and local call</title>
		<body>injvm protocol doesn't work well with scope.   ### injvm should not be registered to register center  ```xml &lt;dubbo:protocol name="injvm"/&gt; &lt;bean id="target" class="org.apache.dubbo.samples.provider.GreetingsServiceImpl"/&gt; &lt;dubbo:service interface="org.apache.dubbo.samples.api.GreetingsService" ref="target" protocol="injvm"/&gt; ```  injvm url is registered  ### local call doesn't work when protocol is injvm  The following configuration is supposed to work but dubbo complains no provider found from registry center.  ```xml &lt;dubbo:protocol name="injvm"/&gt; &lt;bean id="target" class="org.apache.dubbo.samples.provider.GreetingsServiceImpl"/&gt; &lt;dubbo:service interface="org.apache.dubbo.samples.api.GreetingsService" ref="target" scope="local" protocol="injvm"/&gt; &lt;dubbo:reference id="demoService" interface="org.apache.dubbo.samples.api.GreetingsService" scope="local"/&gt; ```</body>
		<created>2019-03-12 08:42:39</created>
		<closed>2019-05-06 06:26:39</closed>
	</bug>
	<bug>
		<id>3620</id>
		<title>cusumer设置使用异步调用方法时，RpcContext中的ServerContext参数，无法从provider传到cusumer</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.6 * Operating System version: MacOS 10.14.3 * Java version: 1.8.0_171  ### Steps to reproduce this issue  When I try to use RpcContext.getServerContext to pass data from provider to cusumer，if the method runs in sync mode, it works（ Provider uses  RpcContext.getServerContext().setAttachment to set Key-Value data，then Consumer uses RpcContext.getServerContext().getAttachment to get the Key-Value Data.). But if the method runs in async mode, it doesn't works. Consumer can't get the Key-Value by RpcContext.getServerContext().getAttachment.   1.  2. xxx 3. xxx  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` Just put your stack trace here! ``` </body>
		<created>2019-03-08 06:56:52</created>
		<closed>2019-05-15 11:25:10</closed>
	</bug>
	<bug>
		<id>3518</id>
		<title>Why ProviderConfig.setDispatcher() do exchanger check?</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  我在ProviderConfig.setDispatcher()里面发现了如下代码： I found the following code in ProviderConfig.setDispatcher()： ```     public void setDispatcher(String dispatcher) {         checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, exchanger);         checkExtension(Dispatcher.class, "dispather", exchanger);         this.dispatcher = dispatcher;     } ``` 我不明白为什么需要在这里做这个检查。 I don't understand why this method needs to do this check here.</body>
		<created>2019-02-20 07:44:47</created>
		<closed>2019-02-21 07:52:31</closed>
	</bug>
	<bug>
		<id>3514</id>
		<title>No such extension org.apache.dubbo.metadata.store.MetadataReportFactory by name redis</title>
		<body>### Environment  * Dubbo version: 2.7.0 * Operating System version: xxx * Java version: 1.8  ### Steps to reproduce this issue  ```yaml dubbo:   application:     name: ${spring.application.nam}     qos-enable: false   registry:     address: zookeeper://192.168.56.101:2181     client: curator     simplified: true   metadata-report:     address: redis://192.168.56.101:6379 ```  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  ``` java.lang.IllegalStateException: No such extension org.apache.dubbo.metadata.store.MetadataReportFactory by name redis at org.apache.dubbo.common.extension.ExtensionLoader.findException(ExtensionLoader.java:514) at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:521) at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:344) at org.apache.dubbo.metadata.store.MetadataReportFactory$Adaptive.getMetadataReport(MetadataReportFactory$Adaptive.java) at org.apache.dubbo.metadata.integration.MetadataReportService.&lt;init&gt;(MetadataReportService.java:54) at org.apache.dubbo.metadata.integration.MetadataReportService.instance(MetadataReportService.java:67) at org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportService(AbstractInterfaceConfig.java:387) at org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:568) at org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:402) at org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:363) at org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:345) at org.apache.dubbo.config.spring.ServiceBean.export(ServiceBean.java:318) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:112) at org.apache.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:58) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:400) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:354) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:886) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386) at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1242) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1230) ``` </body>
		<created>2019-02-20 04:02:43</created>
		<closed>2019-02-20 07:07:20</closed>
	</bug>
	<bug>
		<id>3478</id>
		<title>Keep interface key in the URL in simplify mode when it's different from path.</title>
		<body>1. non-simplify mode: ``` dubbo://120.0.0.1:20880/org.apache.dubbo.demo.DemoService?key=value ``` the store path of ZK will be: `/dubbo/porg.apache.dubbo.demo.DemoService/url`  2. simplify mode: ``` dubbo://120.0.0.1:20880/org.apache.dubbo.demo.DemoService?key=value ``` the store path of ZK will be: `/dubbo/porg.apache.dubbo.demo.DemoService/url`  3. simplify mode with path specified: ``` dubbo://120.0.0.1:20880/path-value?key=value ``` the store path of ZK will be: `/dubbo/path-value/url`</body>
		<created>2019-02-14 10:01:00</created>
		<closed>2019-03-14 08:38:06</closed>
	</bug>
	<bug>
		<id>3342</id>
		<title>dubbo2.7.0 com.alibaba.com.caucho.hessian.io.HessianProtocolException: 'com.alibaba.dubbo.common.URL' could not be instantiated</title>
		<body>-  I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. -  I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0 * Operating System version: Ubuntu18.04 * Java version: jdk8  1. dubbo-ops with dubbo 2.7.0 and other appication use old version.   2. Copy MonitorService from old version to dubbo-ops.  3. Other application send url call com.alibaba.dubbo.monitor.MonitorService#collect(URL statistics).  result:  WARN dubbo.DecodeableRpcInvocation -  [DUBBO] Decode argument failed: 'com.alibaba.dubbo.common.URL' could not be instantiated, dubbo version: 2.7.0-SNAPSHOT, current host: 10.236.105.240 com.alibaba.com.caucho.hessian.io.HessianProtocolException: 'com.alibaba.dubbo.common.URL' could not be instantiated  [https://github.com/ebourg/hessian/blob/git-svn/src/com/caucho/hessian/io/JavaDeserializer.java](url) `for (int i = 0; i &lt; constructors.length; i++) {       Class&lt;?&gt; []param = constructors[i].getParameterTypes();       long cost = 0;        for (int j = 0; j &lt; param.length; j++) {         cost = 4 * cost;          if (Object.class.equals(param[j]))           cost += 1;         else if (String.class.equals(param[j]))           cost += 2;         else if (int.class.equals(param[j]))           cost += 3;         else if (long.class.equals(param[j]))           cost += 4;         else if (param[j].isPrimitive())           cost += 5;         else           cost += 6;       }        if (cost &lt; 0 || cost &gt; (1 &lt;&lt; 48))         cost = 1 &lt;&lt; 48;        cost += (long) param.length &lt;&lt; 48;        if (cost &lt; bestCost) {         _constructor = constructors[i];         bestCost = cost;       }     }     if (_constructor != null) {       _constructor.setAccessible(true);       Class&lt;?&gt; []params = _constructor.getParameterTypes();       _constructorArgs = new Object[params.length];       for (int i = 0; i &lt; params.length; i++) {         _constructorArgs[i] = getParamArg(params[i]);       }     }`  [https://github.com/apache/incubator-dubbo/blob/master/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java](url) the bestcost constructor is this one; ` public URL(org.apache.dubbo.common.URL url) {         super(url.getProtocol(), url.getUsername(), url.getPassword(), url.getHost(), url.getPort(), url.getPath(), url.getParameters());     }`  and _constructorArgs[0] is null  when run at  _constructor.newInstance(_constructorArgs) application throw NullPointerException  ``` Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:423) at com.alibaba.com.caucho.hessian.io.JavaDeserializer.instantiate(JavaDeserializer.java:312) ... 32 more Caused by: java.lang.NullPointerException at com.alibaba.dubbo.common.URL.&lt;init&gt;(URL.java:30) ``` </body>
		<created>2019-01-25 03:18:16</created>
		<closed>2019-01-25 10:30:04</closed>
	</bug>
	<bug>
		<id>3236</id>
		<title>Why does not tomcat throw an exception when `server.start` failed with a socket binding error.</title>
		<body>Why does not tomcat throw an exception when `server.start` failed with a socket binding error.  https://github.com/apache/incubator-dubbo/blob/master/dubbo-remoting/dubbo-remoting-http/src/main/java/org/apache/dubbo/remoting/http/tomcat/TomcatHttpServer.java#L71  I do see the exception stack printed on the Console, whereas no exception was thrown in here: ```java try {             tomcat.start();         } catch (LifecycleException e) {             throw new IllegalStateException("Failed to start tomcat server at " + url.getAddress(), e);         } catch (Exception ee) {             throw new IllegalStateException(e);         }  ```  This behavior will cause a tomcat based HTTP service being registered unexpectedly to the Registry even after the binding has failed.  ```java @Override     public &lt;T&gt; Exporter&lt;T&gt; export(final Invoker&lt;T&gt; originInvoker) throws RpcException {          ... ...         // socket binding exception extected         final ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker, providerUrl);         ... ...          // url to registry         final Registry registry = getRegistry(originInvoker);         register(registryUrl, registeredProviderUrl);                   return new DestroyableExporter&lt;&gt;(exporter);     } ```</body>
		<created>2019-01-15 09:12:28</created>
		<closed>2019-03-04 16:40:14</closed>
	</bug>
	<bug>
		<id>3169</id>
		<title>future invoke would block at  org.apache.dubbo.rpc.AsyncRpcResult#getValue </title>
		<body>future invoke would block at  org.apache.dubbo.rpc.AsyncRpcResult#getValue.   DubboInvoker now return AsyncRpcResult other than RpcResult with a default value.  the framework would block when a filter try to access the the result value,  even though it's future invoke.  it just behave differently.   </body>
		<created>2019-01-08 06:26:05</created>
		<closed>2019-01-11 09:08:33</closed>
	</bug>
	<bug>
		<id>3158</id>
		<title>[Dubbo - client always reconnect offline provider] Dubbo client bug.</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0 * Operating System version: mac * Java version: 1.8  ### Steps to reproduce this issue  1.  `AbstractClient#initConnectStatusCheckCommand` set break point at `  !isConnected()`. 2. `AbstractClient#close()` set break point here.     3.  start client first, start provider and then shutdown provider gracefully , let method `AbstractClient.close()` be executed. Then select step `1` and trigger the thread to execute `!isConnected`, here will always try to connect the offline machine.  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  When the server goes offline, the client will not reconnect the offline machine.  ### Actual Result  What actually happens?  The client reconnects the offline machine every 2 seconds and causes a large number of arp packets(because ip is recycled and not available now).</body>
		<created>2019-01-07 07:51:50</created>
		<closed>2019-02-19 07:25:04</closed>
	</bug>
	<bug>
		<id>2987</id>
		<title>[Bug] Error logging level in ServiceAnnotationBeanPostProcessor</title>
		<body>### Environment  * Dubbo version: `2.5.6` * Operating System version: any * Java version: 1.6+  The related issue: https://github.com/apache/incubator-dubbo-spring-boot-project/issues/329  Code snatch:  ```java             if (logger.isInfoEnabled()) {                 logger.warn("The BeanDefinition[" + serviceBeanDefinition +                         "] of ServiceBean has been registered with name : " + beanName);             } ```</body>
		<created>2018-12-18 02:21:48</created>
		<closed>2019-01-26 07:35:48</closed>
	</bug>
	<bug>
		<id>2855</id>
		<title>2.6.5问题，ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler#bean</title>
		<body>* dubbo: 2.6.5 * 测试，所以提供者和消费者在同一个jvm里  ------ ReferenceBeanInvocationHandler的invoke就是消费者方法执行后会调用到的方法，它有个init方法用来初始化bean字段，这个方法有两处调用： 1. https://github.com/apache/incubator-dubbo/blob/38e0f15be33a5edb35b45d2c5d7c6be753bdd888/dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java#L128 ``` private InvocationHandler buildInvocationHandler(String referencedBeanName, ReferenceBean referenceBean) {     ReferenceBeanInvocationHandler handler = localReferenceBeanInvocationHandlerCache.get(referencedBeanName);     if (handler == null) {         handler = new ReferenceBeanInvocationHandler(referenceBean);     }     if (applicationContext.containsBean(referencedBeanName)) { // Is local @Service Bean or not ?         // ReferenceBeanInvocationHandler's initialization has to wait for current local @Service Bean has been exported.         localReferenceBeanInvocationHandlerCache.put(referencedBeanName, handler);     } else {         // Remote Reference Bean should initialize immediately         handler.init();     }     return handler; } ``` 2. https://github.com/apache/incubator-dubbo/blob/38e0f15be33a5edb35b45d2c5d7c6be753bdd888/dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java#L230 ``` private void initReferenceBeanInvocationHandler(ServiceBean serviceBean) {     String serviceBeanName = serviceBean.getBeanName();     // Remove ServiceBean when it's exported     ReferenceBeanInvocationHandler handler = localReferenceBeanInvocationHandlerCache.remove(serviceBeanName);     // Initialize     if (handler != null) {         handler.init();     } } ```  ------ 因为是测试所以：1处走的是```if (applicationContext.containsBean(referencedBeanName))```里面，不会调用```handler.init();```，2处我断点到handler都是null所以也不会调用```handler.init();``` 所以那个bean字段都是null。然后执行invoke方法就是： ``` java.lang.NullPointerException     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler.invoke(ReferenceAnnotationBeanPostProcessor.java:159) ```</body>
		<created>2018-11-30 05:49:17</created>
		<closed>2019-02-22 06:22:43</closed>
	</bug>
	<bug>
		<id>2799</id>
		<title>Router compareTo 方法实现引发异常</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.2 * Operating System version: Linux * Java version: 8  ### Steps to reproduce this issue  1. 添加路由 2. 指定相同的priority 3. 引发异常：java.lang.IllegalArgumentException: Comparison method violates its general contract!  查看源码 ConditionRouter、ScriptRouter、TagRouter 的 compareTo 方法实现类似，会引发同类问题。  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  What do you expected from the above steps？  ### Actual Result  What actually happens?  If there is an exception, please attach the exception trace:  ``` ERROR com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry  -  [DUBBO] Failed to notify for subscribe consumer://xx.xx.xx.xx/com.xxx.service.XxxService?application=xxx-service&amp;category=providers,configurators,routers&amp;default.check=true&amp;dubbo=2.6.2&amp;interface=com.xxx.service.XxxService&amp;methods=getXxx,setXxx&amp;owner=xxx&amp;pid=160275&amp;revision=3.5.9&amp;side=consumer&amp;timeout=10000×tamp=1542092651604, waiting for retry, cause: Comparison method violates its general contract!, dubbo version: 2.6.2, current host: xx.xx.xx java.lang.IllegalArgumentException: Comparison method violates its general contract! at java.util.ComparableTimSort.mergeLo(ComparableTimSort.java:740) at java.util.ComparableTimSort.mergeAt(ComparableTimSort.java:477) at java.util.ComparableTimSort.mergeCollapse(ComparableTimSort.java:402) at java.util.ComparableTimSort.sort(ComparableTimSort.java:209) at java.util.Arrays.sort(Arrays.java:1312) at java.util.Arrays.sort(Arrays.java:1506) at java.util.ArrayList.sort(ArrayList.java:1454) at java.util.Collections.sort(Collections.java:141) at com.alibaba.dubbo.rpc.cluster.directory.AbstractDirectory.setRouters(AbstractDirectory.java:110) at com.alibaba.dubbo.registry.integration.RegistryDirectory.notify(RegistryDirectory.java:211) at com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:414) at com.alibaba.dubbo.registry.support.FailbackRegistry.doNotify(FailbackRegistry.java:274) at com.alibaba.dubbo.registry.support.FailbackRegistry.notify(FailbackRegistry.java:260) at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doSubscribe(ZookeeperRegistry.java:190) at com.alibaba.dubbo.registry.support.FailbackRegistry.subscribe(FailbackRegistry.java:190) at com.alibaba.dubbo.registry.integration.RegistryDirectory.subscribe(RegistryDirectory.java:159) at com.alibaba.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:305) at com.alibaba.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:286) at com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:63) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:106) at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:65) at com.alibaba.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java) at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:394) at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:333) at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163) at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66) ``` </body>
		<created>2018-11-17 03:01:23</created>
		<closed>2019-02-02 09:30:45</closed>
	</bug>
	<bug>
		<id>2766</id>
		<title>[Dubbo - telnet] Unrecognized overload method</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0+ * Operating System version: mac * Java version: 1.8  ### Steps to reproduce this issue  Assume that there is an interface below：  ``` package com.youzan.nova.service;  import java.util.Set;  public interface OverrideService {      void invoke(Integer id, Set&lt;String&gt; orderNumbers);      void invoke(Long id, Set&lt;String&gt; orderNumbers);  }  package com.youzan.nova.service;  import java.util.Set;  public class OverrideServiceImpl implements OverrideService {     @Override     public void invoke(Integer id, Set&lt;String&gt; orderNumbers) {         System.out.println(id);     }      @Override     public void invoke(Long id, Set&lt;String&gt; orderNumbers) {         System.out.println(id);     } }  ```  Start telnet call service：  ``` invoke com.youzan.nova.service.OverrideService.invoke("13", Set["1"]) invoke com.youzan.nova.service.OverrideService.invoke("13L", Set["1"]) ```  Always only call the method `invoke(Long id, Set&lt;String&gt; orderNumbers)`.</body>
		<created>2018-11-09 04:00:42</created>
		<closed>2018-12-11 07:59:02</closed>
	</bug>
	<bug>
		<id>2762</id>
		<title>[Dubbo - qos-http]  stopServer should be invoked ?</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0 * Operating System version: mac * Java version: 1.8  Why this method `org.apache.dubbo.qos.protocol.QosProtocolWrapper#stopServer` not invoked? My understanding is that when the service stops, the http service should stop. </body>
		<created>2018-11-08 08:26:21</created>
		<closed>2018-11-09 08:31:42</closed>
	</bug>
	<bug>
		<id>2724</id>
		<title>[Dubbo bug]  disable provider does't work</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 所有dubbo版本都存在 * Operating System version: mac * Java version: 1.8  ### Steps to reproduce this issue  1. 使用dubbo-ops禁用provider，客户端仍然能调用禁用的服务     启用一个provider、consumer、dubbo-admin，禁用provider和开启provider测试。     已有用户提ops issue: https://github.com/apache/incubator-dubbo-ops/issues/90    我已经check是dubbo实现的Bug, 会尽快修复。  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  1. 如果只有一个provider，禁用后立即生效，应该找不到服务 2. 如果有多个provider，会自动找其他服务调用，除非重新启用服务，否则会忽略禁用服务  ### Actual Result  1. 禁用的服务持续调用   </body>
		<created>2018-11-01 07:50:52</created>
		<closed>2018-11-02 09:01:50</closed>
	</bug>
	<bug>
		<id>2539</id>
		<title>When adding @Referenc in Multicast registry, deadlock happened.</title>
		<body>### Environment  * Dubbo version: 2.6.x * Operating System version:  mac * Java version: 1.8  ### Steps to reproduce this issue  1. when use multicast as registry (It work well when using zookeeper) 2. use @Reference to get the consumer  You can write a demo base on dubbo demo module, just modify 3 files.    1.Add new configuration file (dubbo-demo2-consumer.xml): ``` &lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"        xmlns:context="http://www.springframework.org/schema/context"        xmlns="http://www.springframework.org/schema/beans"        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;      &lt;!-- consumer's application name, used for tracing dependency relationship (not a matching criterion),     don't set it same as provider --&gt;     &lt;dubbo:application name="demo-consumer"/&gt;      &lt;!-- use multicast registry center to discover service --&gt;     &lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;      &lt;!-- generate proxy for the remote service, then demoService can be used in the same way as the     local regular interface --&gt;     &lt;dubbo:annotation/&gt;     &lt;context:component-scan base-package="com.alibaba.dubbo.demo.consumer"&gt;         &lt;context:include-filter type="annotation" expression="com.alibaba.dubbo.config.annotation.Reference"/&gt;     &lt;/context:component-scan&gt;  &lt;/beans&gt;  ``` 2.new service to consumer package: ``` @Service public class ConsumerService {      @Reference(parameters = {"k1", "v1"})     private DemoService demoService;      public void testReference() {         System.out.println(demoService.sayHello("www.world"));     } } ``` 3.new main File :    ``` public class Consumer2 {      public static void main(String[] args) {         //Prevent to get IPV6 address,this way only work in debug mode         //But you can pass use -Djava.net.preferIPv4Stack=true,then it work well whether in debug mode or not         System.setProperty("java.net.preferIPv4Stack", "true");         ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"META-INF/spring/dubbo-demo2-consumer.xml"});         context.start();         ConsumerService consumerService = (ConsumerService) context.getBean(ConsumerService.class); // get remote service proxy          while (true) {             try {                 Thread.sleep(1000);                 consumerService.testReference(); // call remote method              } catch (Throwable throwable) {                 throwable.printStackTrace();             }         }     } } ```   ### Actual Result  when start the consumer, the program has no response.  so I print the jstack trace as follow:   ```  Found one Java-level deadlock: ============================= "DubboMulticastRegistryReceiver":   waiting to lock monitor 0x00007fde47292668 (object 0x000000076eb01868, a java.util.concurrent.ConcurrentHashMap),   which is held by "main" "main":   waiting to lock monitor 0x00007fde4a810488 (object 0x000000076eb5e4c0, a com.alibaba.dubbo.registry.integration.RegistryDirectory),   which is held by "DubboMulticastRegistryReceiver"  Java stack information for the threads listed above: =================================================== "DubboMulticastRegistryReceiver":         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:188)         - waiting to lock &lt;0x000000076eb01868&gt; (a java.util.concurrent.ConcurrentHashMap)         at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:492)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:432)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:403)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:389)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1002)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:345)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:340)         at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1092)         at com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:67)         at com.alibaba.dubbo.common.extension.factory.AdaptiveExtensionFactory.getExtension(AdaptiveExtensionFactory.java:47)         at com.alibaba.dubbo.common.extension.ExtensionLoader.injectExtension(ExtensionLoader.java:521)         at com.alibaba.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:497)         at com.alibaba.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:309)         - locked &lt;0x000000076b5ff4d8&gt; (a com.alibaba.dubbo.common.utils.Holder)         at com.alibaba.dubbo.common.extension.ExtensionLoader.getActivateExtension(ExtensionLoader.java:193)         at com.alibaba.dubbo.common.extension.ExtensionLoader.getActivateExtension(ExtensionLoader.java:172)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.buildInvokerChain(ProtocolFilterWrapper.java:48)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:108)         at com.alibaba.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)         at com.alibaba.dubbo.registry.integration.RegistryDirectory.toInvokers(RegistryDirectory.java:387)         at com.alibaba.dubbo.registry.integration.RegistryDirectory.refreshInvoker(RegistryDirectory.java:253)         at com.alibaba.dubbo.registry.integration.RegistryDirectory.notify(RegistryDirectory.java:223)         - locked &lt;0x000000076eb5e4c0&gt; (a com.alibaba.dubbo.registry.integration.RegistryDirectory)         at com.alibaba.dubbo.registry.support.AbstractRegistry.notify(AbstractRegistry.java:414)         at com.alibaba.dubbo.registry.support.FailbackRegistry.doNotify(FailbackRegistry.java:280)         at com.alibaba.dubbo.registry.support.FailbackRegistry.notify(FailbackRegistry.java:266)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry.registered(MulticastRegistry.java:333)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry.receive(MulticastRegistry.java:209)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry.access$100(MulticastRegistry.java:54)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry$1.run(MulticastRegistry.java:104)         at java.lang.Thread.run(Thread.java:748) "main":         at java.lang.Object.wait(Native Method)         - waiting on &lt;0x000000076eb5e4c0&gt; (a com.alibaba.dubbo.registry.integration.RegistryDirectory)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry.doSubscribe(MulticastRegistry.java:278)         - locked &lt;0x000000076eb5e4c0&gt; (a com.alibaba.dubbo.registry.integration.RegistryDirectory)         at com.alibaba.dubbo.registry.support.FailbackRegistry.subscribe(FailbackRegistry.java:196)         at com.alibaba.dubbo.registry.multicast.MulticastRegistry.subscribe(MulticastRegistry.java:394)         at com.alibaba.dubbo.registry.integration.RegistryDirectory.subscribe(RegistryDirectory.java:159)         at com.alibaba.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:306)         at com.alibaba.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:287)         at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:65)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:106)         at com.alibaba.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)         at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:394)         at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:333)         at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:163)         - locked &lt;0x000000076eb00f18&gt; (a com.alibaba.dubbo.config.spring.ReferenceBean)         at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:66)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at com.alibaba.dubbo.config.AbstractConfig.toString(AbstractConfig.java:466)         at java.lang.String.valueOf(String.java:2994)         at java.lang.StringBuilder.append(StringBuilder.java:131)         at com.alibaba.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder.build(AbstractAnnotationConfigBeanBuilder.java:79)         at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildReferenceBean(ReferenceAnnotationBeanPostProcessor.java:385)         at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.access$100(ReferenceAnnotationBeanPostProcessor.java:65)         at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceFieldElement.inject(ReferenceAnnotationBeanPostProcessor.java:363)         at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)         at com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.postProcessPropertyValues(ReferenceAnnotationBeanPostProcessor.java:92)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1268)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)         - locked &lt;0x000000076eb01868&gt; (a java.util.concurrent.ConcurrentHashMap)         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)         at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)         - locked &lt;0x000000076ec5b718&gt; (a java.lang.Object)         at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)         at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93)         at com.alibaba.dubbo.demo.consumer.Consumer2.main(Consumer2.java:15)  Found 1 deadlock.  ``` </body>
		<created>2018-09-20 07:27:05</created>
		<closed>2020-08-07 03:20:46</closed>
	</bug>
	<bug>
		<id>2522</id>
		<title>`org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor#generateReferenceBeanCacheKey` has a bug</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.2+ * Operating System version: mac * Java version: jdk8  ### Steps to reproduce this issue  refer: https://github.com/apache/incubator-dubbo/issues/2511， Multiple reference configurations on the same interface will be overwritten  reproduce this issue: https://github.com/freeseawind/copycat-dubbo  ### Expected Result  @Reference does not affect each other on the same interface</body>
		<created>2018-09-18 14:08:58</created>
		<closed>2018-10-17 02:18:58</closed>
	</bug>
	<bug>
		<id>2499</id>
		<title>PojoUtil realize type convert not support subclasses of 'java.util.date'</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.5.x, 2.6.x * Operating System version: windows 7 * Java version: jdk1.7,jdk1.8  ### Steps to reproduce this issue  1. String convert to java.sql.Time 2. String convert to java.sql.Date 3. String convert to java.sql.Timestamp  ### Expected Result  The Convert is successful and you can get the object of the converted type.  ### Actual Result  Conversion failed.  When the interface is called by 'jmeter-plugin-dubbo', it is passed into the hashmap through a generalization call. The value in the hashmap is a Date string, and an error occurred when the server accepts a type of java.sql.timestamp |Date  If there is an exception, please attach the exception trace:  ``` java.lang.RuntimeException: Failed to set pojo TestVo property timestamp value 2018-09-13 10:00:00(class java.lang.String), cause: argument type mismatch at com.alibaba.dubbo.common.utils.PojoUtils.realize0(PojoUtils.java:456) at com.alibaba.dubbo.common.utils.PojoUtils.realize(PojoUtils.java:196) at com.alibaba.dubbo.common.utils.PojoUtils.realize(PojoUtils.java:86) at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:68) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol$1.reply(DubboProtocol.java:103) at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96) at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:172) at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51) at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:80) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at com.alibaba.dubbo.common.utils.PojoUtils.realize0(PojoUtils.java:453) ... 16 more ``` </body>
		<created>2018-09-13 07:45:18</created>
		<closed>2018-09-14 01:19:21</closed>
	</bug>
	<bug>
		<id>2489</id>
		<title>MockClusterInvoker provides local forced mock，I tested it locally, but it doesn't work.</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0 * Operating System version: 2.7.0 * Java version: 1.8  ### Steps to reproduce this issue  1. Here is demo: Here is demo: https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-mock 2. change consumer configuraton: &lt;dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.samples.mock.api.DemoService" mock="force”/&gt;  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  force mock should be trigged.  ### Actual Result  start failed.  I have checked code(MockClusterInvoker) :  ``` java @Override public Result invoke(Invocation invocation) throws RpcException {     // ….     else if (value.startsWith("force")) {         if (logger.isWarnEnabled()) {             logger.info("force-mock: " + invocation.getMethodName() + " force-mock enabled , url : " + directory.getUrl());         }         //force:direct mock         result = doMockInvoke(invocation, null);     }         // …. } ```</body>
		<created>2018-09-11 15:08:52</created>
		<closed>2018-11-07 06:21:44</closed>
	</bug>
	<bug>
		<id>2446</id>
		<title>jarslink做module隔离时,dubbo调用会抛ClassNotFoundException</title>
		<body>用jarslink做module隔离时,dubbo调用会抛ClassNotFoundException.经查是ClassLoader不一致.  ```     public static Class&lt;?&gt; getReturnType(Invocation invocation) {         try {             if (invocation != null &amp;&amp; invocation.getInvoker() != null                     &amp;&amp; invocation.getInvoker().getUrl() != null                     &amp;&amp; !invocation.getMethodName().startsWith("$")) {                 String service = invocation.getInvoker().getUrl().getServiceInterface();                 if (service != null &amp;&amp; service.length() &gt; 0) {                     Class&lt;?&gt; cls = ReflectUtils.forName(service);                     Method method = cls.getMethod(invocation.getMethodName(), invocation.getParameterTypes());                     if (method.getReturnType() == void.class) {                         return null;                     }                     return method.getReturnType();                 }             }         } catch (Throwable t) {             logger.warn(t.getMessage(), t);         }         return null;     } ```</body>
		<created>2018-09-05 04:42:19</created>
		<closed>2018-09-11 07:32:26</closed>
	</bug>
	<bug>
		<id>2339</id>
		<title>[Dubbo bug] Dubbo xml parsing does not handle multi-word configuration correctly</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0-SNAPSHOT * Operating System version: mac pro * Java version: 1.8  ### Step to reproduce this issue  1. Assume that the configuration file contains the following configuration： ``` xml &lt;dubbo:reference id="demoService" check="false" interface="org.apache.dubbo.http2.DemoService" protocol-config="http2"/&gt; ```  2. Starting the application will give an error： ``` Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'demoService': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'protocol-config' of bean class [org.apache.dubbo.config.spring.ReferenceBean]: Bean property 'protocol-config' is not writable or has an invalid setter method. Did you mean 'protocolConfig'? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1570) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1280) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:742) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:93) at org.apache.dubbo.http2.consumer.Consumer.main(Consumer.java:29) Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'protocol-config' of bean class [org.apache.dubbo.config.spring.ReferenceBean]: Bean property 'protocol-config' is not writable or has an invalid setter method. Did you mean 'protocolConfig'? at org.springframework.beans.BeanWrapperImpl.createNotWritablePropertyException(BeanWrapperImpl.java:239) at org.springframework.beans.AbstractNestablePropertyAccessor.processLocalProperty(AbstractNestablePropertyAccessor.java:435) at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:290) at org.springframework.beans.AbstractNestablePropertyAccessor.setPropertyValue(AbstractNestablePropertyAccessor.java:278) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1566) ``` </body>
		<created>2018-08-23 09:48:23</created>
		<closed>2019-02-12 02:38:17</closed>
	</bug>
	<bug>
		<id>2323</id>
		<title>[BUG]新版异步调用 Context 传递未必正确</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.7.0-SNAPSHOT  场景描述： 新版异步方式，会在ConsumerContextFilter中设置 remoteAddress ```java RpcContext.getContext()                 .setInvoker(invoker)                 .setInvocation(invocation)                 .setLocalAddress(NetUtils.getLocalHost(), 0)                 .setRemoteAddress(invoker.getUrl().getHost(),                         invoker.getUrl().getPort()); ``` 且会在 ExceptionFilter 的 doPostProcess中使用 ```java logger.error("Got unchecked and undeclared exception which called by " + RpcContext.getContext().getRemoteHost()                         + ". service: " + invoker.getInterface().getName() + ", method: " + invocation.getMethodName()                         + ", exception: " + exception.getClass().getName() + ": " + exception.getMessage(), exception); ``` 那么问题来了。 当连续的两个异步调用 A/B 在同一个线程先后执行的时候，A 的结果尚未返回，B 就开始执行，此时 A与 B 的 RpcContext 是同一个对象，就会导致 B 的 RpcContext 覆盖掉 A 的设置，导致 A 结果返回后获取到的 RpcContext 不再是 A 设置的内容，导致数据不一致。  提供一种问题解决思路，仅供参考： 1. RpcContext 提供拷贝函数，对 attachments, values 进行深拷贝，其他属性浅拷贝； 2. AsyncRpcResult中 storedContext以及 storedServerContext 调用RpcContext.getContext().copy()完成赋值；</body>
		<created>2018-08-20 02:48:18</created>
		<closed>2018-09-19 03:18:59</closed>
	</bug>
	<bug>
		<id>2315</id>
		<title>[BUG] Maven package issues on JavaDoc plugin in 2.6.x</title>
		<body>- [X] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [X] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.x * Operating System version: all * Java version: 1.6+  ### Step to reproduce this issue  `mvn clean package`   ### Expected Result  BUILD SUCCESS   ### Actual Result  BUILD FAILED</body>
		<created>2018-08-17 08:56:10</created>
		<closed>2018-09-06 03:12:54</closed>
	</bug>
	<bug>
		<id>2311</id>
		<title>Dubbo 2.6.2 version do not support specify the protocol type on consumer side</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.   ### 问题描述  使用注解开发dubbo的服务端和消费端。当服务端暴露多个协议的时候，dubbo客户端@Reference无法指定协议去消费。但是在dubbo的消费XML配置方式是支持的 ```     &lt;dubbo:reference id="userService" interface="com.jiangzz.service.IUserService" protocol="dubbo"/&gt; ``` 但是@Refernece目前没有注解支持改配置信息，希望官方有时间修正该问题！     ### 环境  * Dubbo version: 2.6.2 * Operating System version: win7 * Java version: 1.8.0_161  ### 创建服务端，同时支持三种协议 服务端： ```java @Service(protocol = {"dubbo","rmi","rest"}) @Path(value = "users") public class UserService implements IUserService {     @GET     @Path(value = "queryUserById")     @Produces(value = {"application/json;charset=utf-8"})     public User queryUser(@QueryParam(value = "id") Integer id) {         User user=new User();         user.setId(id+"");         user.setBirthDay(new Date());         user.setName("张三");         return user;     } } ``` ``` @Configuration @DubboComponentScan(basePackages = {"com.jiangzz.service.impl"}) public class DubboConfig {     @Bean     public ApplicationConfig applicationConfig() {         ApplicationConfig applicationConfig = new ApplicationConfig();         applicationConfig.setName("provider-test");         return applicationConfig;     }      @Bean("dubbo")     public ProtocolConfig protocolConfig0(){         ProtocolConfig protocolConfig=new ProtocolConfig("dubbo");         protocolConfig.setPort(20880);         protocolConfig.setServer("netty4");         return protocolConfig;     }     @Bean("rmi")     public ProtocolConfig protocolConfig1(){         ProtocolConfig protocolConfig=new ProtocolConfig("rmi");         protocolConfig.setPort(20881);         protocolConfig.setServer("netty4");         return protocolConfig;     }     @Bean("rest")     public ProtocolConfig protocolConfig2(){         ProtocolConfig protocolConfig=new ProtocolConfig("rest");         protocolConfig.setPort(8080);         protocolConfig.setServer("netty4");         protocolConfig.setContextpath("/services");         protocolConfig.setServer("netty");         return protocolConfig;     }     @Bean     public RegistryConfig registryConfig() {         RegistryConfig registryConfig = new RegistryConfig();         registryConfig.setAddress("zookeeper://192.168.65.135:2181");         registryConfig.setClient("curator");         return registryConfig;     } }  ``` **客户端：** ``` @Configuration @DubboComponentScan(basePackages = "com.jiangzz.service") public class DubboConfig {     @Reference     private IUserService userService;    @Bean     public IUserService userService(){         return userService;    }     @Bean     public ApplicationConfig applicationConfig() {         ApplicationConfig applicationConfig = new ApplicationConfig();         applicationConfig.setName("consumer-test");         return applicationConfig;     }     @Bean     public ConsumerConfig consumerConfig() {         ConsumerConfig consumerConfig = new ConsumerConfig();         consumerConfig.setTimeout(3000);         consumerConfig.setClient("netty4");          return consumerConfig;     }     @Bean     public RegistryConfig registryConfig() {         RegistryConfig registryConfig = new RegistryConfig();         registryConfig.setAddress("zookeeper://192.168.65.135:2181");         registryConfig.setClient("curator");         return registryConfig;     } } ``` 调用： ```   AnnotationConfigApplicationContext acc=new AnnotationConfigApplicationContext(DubboConfig.class);         IUserService bean = acc.getBean(IUserService.class);         for(int i=0;i&lt;1000;i++){             User user = bean.queryUser(1);             System.out.println(user);          } ``` ###异常信息  ``` Exception in thread "main" java.lang.RuntimeException: RESTEASY004530: Could not find a method for: public abstract com.jiangzz.entities.User com.jiangzz.service.IUserService.queryUser(java.lang.Integer) at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:74) at com.sun.proxy.$Proxy31.queryUser(Unknown Source) at com.alibaba.dubbo.common.bytecode.Wrapper0.invokeMethod(Wrapper0.java) at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:47) at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:76) at com.alibaba.dubbo.rpc.protocol.AbstractProxyProtocol$2.doInvoke(AbstractProxyProtocol.java:97) at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:148) at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:54) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:48) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:72) at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:77) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56) at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:78) at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:238) at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:75) at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:52) at com.alibaba.dubbo.common.bytecode.proxy0.queryUser(proxy0.java) at com.jiangzz.StartClientDemo.main(StartClientDemo.java:18)  ``` </body>
		<created>2018-08-17 05:43:55</created>
		<closed>2020-08-07 03:22:41</closed>
	</bug>
	<bug>
		<id>2301</id>
		<title>[BUG] @Reference#parameters() does not work</title>
		<body>- [X] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [X] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.3 * Operating System version: all * Java version: all  ### Step to reproduce this issue  1. To setting `@Reference#parameters()`   ### Expected Result  `ReferenceBean` contains parameters `Map`  ### Actual Result  `ReferenceBean` does not contain parameters `Map`   </body>
		<created>2018-08-15 00:57:13</created>
		<closed>2018-10-30 09:45:41</closed>
	</bug>
	<bug>
		<id>2218</id>
		<title>When using telnet "invoke" method, if there is a [null] param, the response always be [null] </title>
		<body>dubbo&gt; invoke com.alibaba.dubbo.demo.DemoService.sayHello(null)    // null as parameter null  reason:  InvokeTelnetHandler.isMatch(Class&lt;?&gt;[] types, List&lt;Object&gt; args)     ...     } else if (ReflectUtils.isPrimitive(arg.getClass())) {  // there should judge arg is null first  原因： InvokeTelnetHandler.isMatch(Class&lt;?&gt;[] types, List&lt;Object&gt; args)中判断arg的类型时未做null值判断, arg.getClass()抛出了空指针异常</body>
		<created>2018-08-08 03:02:08</created>
		<closed>2018-09-06 01:59:20</closed>
	</bug>
	<bug>
		<id>2194</id>
		<title>Annotation @Reference can't support to export a service with a sync one and an async one</title>
		<body>- [ ] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [ ] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.2 * Operating System version: Win7 * Java version: 1.8  ### Step to reproduce this issue 不支持同时存在一个异步引用和一个同步引用，dubbo注入两个对象的地址都是相同的，第一个如果是异步则两个都是异步。 第一如果是同步则两个都是同步       @Reference(async = true)     private DebugService ansyncDebugService;      @Reference(async = false)     private DebugService debugService;  </body>
		<created>2018-08-07 02:49:37</created>
		<closed>2018-10-17 02:19:36</closed>
	</bug>
	<bug>
		<id>2191</id>
		<title>org.apache.curator.ConnectionState - Connection timed out for connection</title>
		<body>provider注册启动时，报如下错配置dubbo.registry.timeout不生效，一直是5000Ms，求解。 org.apache.curator.ConnectionState - Connection timed out for connection string (localhost:2183) and timeout (5000) / elapsed (5103) org.apache.curator.CuratorConnectionLossException: KeeperErrorCode = ConnectionLoss at org.apache.curator.ConnectionState.checkTimeouts(ConnectionState.java:225) at org.apache.curator.ConnectionState.getZooKeeper(ConnectionState.java:94) at org.apache.curator.CuratorZookeeperClient.getZooKeeper(CuratorZookeeperClient.java:117) at org.apache.curator.framework.imps.CuratorFrameworkImpl.getZooKeeper(CuratorFrameworkImpl.java:489) at org.apache.curator.framework.imps.ExistsBuilderImpl$3.call(ExistsBuilderImpl.java:237) at org.apache.curator.framework.imps.ExistsBuilderImpl$3.call(ExistsBuilderImpl.java:226) at org.apache.curator.RetryLoop.callWithRetry(RetryLoop.java:109) at org.apache.curator.framework.imps.ExistsBuilderImpl.pathInForegroundStandard(ExistsBuilderImpl.java:223) at org.apache.curator.framework.imps.ExistsBuilderImpl.pathInForeground(ExistsBuilderImpl.java:216) at org.apache.curator.framework.imps.ExistsBuilderImpl.forPath(ExistsBuilderImpl.java:175) at org.apache.curator.framework.imps.ExistsBuilderImpl.forPath(ExistsBuilderImpl.java:32) at com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient.checkExists(CuratorZookeeperClient.java:117) at com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient.create(AbstractZookeeperClient.java:58) at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doRegister(ZookeeperRegistry.java:114) at com.alibaba.dubbo.registry.support.FailbackRegistry.register(FailbackRegistry.java:131) at com.alibaba.dubbo.registry.integration.RegistryProtocol.register(RegistryProtocol.java:125) at com.alibaba.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:145) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:98) at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:55) at com.alibaba.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:54) at com.alibaba.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java) at com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:506) at com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:358) at com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:317) at com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:216) at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:123) at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:353) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:887) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:388) at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1246) at org.springframework.boot.SpringApplication.run(SpringApplication.java:1234) at com.faw.provider.Application.main(Application.java:10)</body>
		<created>2018-08-06 07:31:26</created>
		<closed>2018-08-09 03:13:59</closed>
	</bug>
	<bug>
		<id>2174</id>
		<title>dubbo 2.6.3 is not compatible with dubbo &gt;= 2.5.9</title>
		<body>- [X] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [X] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.5.9~2.5.10 * Operating System version: any * Java version: any  ### Step to reproduce this issue  response with attachments is a new feature in release 2.6.3.  but its compatible versions are set to ![2.0.10 ~ 2.6.2] while the "ProtocolVersion" had bean changed to 2.0.1 (implementation version) and 2.0.0 (specification version).  the priority of "implementation version" is greater than other in Version.getVersion.  this will cause dubbo rpc request failing from &gt;2.5.9 to 2.6.3.  So is that a good idea to upgrade the lowest protocol version of attachment-feature to 2.0.2?  it's a big problem  ### Expected Result  compatible  ### Actual Result  fail  </body>
		<created>2018-08-03 01:54:27</created>
		<closed>2018-08-03 08:43:51</closed>
	</bug>
	<bug>
		<id>2164</id>
		<title>@Reference annotation issue</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/blob/master/FAQ.md) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.2 * Operating System version: mac os  10.13/win10 * Java version: JDK6/7/8  ### Step to reproduce this issue  1. provider side shutdown 2. start consumer side use @Reference annotation(check=true) 3. invoke provider get NPE  Pls. provide [GitHub address] to reproduce this issue.  ### Expected Result  like consumer with xml config `&lt;dubbo:refrence&gt;`, if not provider application startup failed.  ### Actual Result  application startup successful, and when invoke provider get NPE, then we startup the provider side still get NPE  If there is an exception, please attach the exception trace:  ``` Just put your stack trace here! ```  case reason: when use @refence  annotation(be know that check default value is true) , if no provider actually `ReferenceConfig` class throw exception, but this exception was ignored. </body>
		<created>2018-08-02 01:49:28</created>
		<closed>2018-08-30 16:05:05</closed>
	</bug>
	<bug>
		<id>2069</id>
		<title>dubbo 服务提供者使用JPA 一对多关联，并关闭懒加载查询时，消费者调用服务抛出com.alibaba.com.caucho.hessian.io.HessianFieldException</title>
		<body>[DEBUG] [2018-07-12 14:58:45,030] [http-nio-9306-exec-7] org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254): Returning cached instance of singleton bean 'basicErrorController'   [DEBUG] [2018-07-12 14:58:45,047] [http-nio-9306-exec-7] org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:277): Written [{timestamp=Thu Jul 12 14:58:45 CST 2018, status=500, error=Internal Server Error, message=Failed to invoke the method listAllCustomOrdersByCustomNoAndState in the service com.hlink.merchant.order.service.OrderQueryService. Tried 2 times of the providers [192.168.50.100:8109] (1/1) from the registry 192.168.50.241:2181 on the consumer 192.168.50.236 using the dubbo version 2.6.1. Last error is: Failed to invoke remote method: listAllCustomOrdersByCustomNoAndState, provider: dubbo://192.168.50.100:8109/com.hlink.merchant.order.service.OrderQueryService?anyhost=true&amp;application=DC-WEB-Store&amp;check=false&amp;default.service.filter=merchantDubboFilter&amp;default.timeout=10000&amp;dubbo=2.6.2&amp;generic=false&amp;interface=com.hlink.merchant.order.service.OrderQueryService&amp;methods=listAllOrderOneDayNeedPrint,listOrderByTableIdToday,listHistoryAllOrder,listHistoryOrderOneMonth,listHistoryOrderOneWeek,searchOrderByOrderNo,listAllOrder,listAllOrderTodayByPrintAndPayState,getOrderPayState,getByOrderNo,listOrderByTableNameToday,listAllCustomOrdersByCustomNoAndState,listAllCustomOrdersByCustomNoToday,listOrderByLastOrderNo,listAllCustomOrdersByCustomNo,listOrderByLastOrderTime,listAllOrderToday,listOrderLog&amp;pid=7540&amp;register.ip=192.168.50.236&amp;remote.timestamp=1531374823311&amp;retries=1&amp;side=consumer&amp;timeout=3000&amp;timestamp=1531359418921, cause: com.alibaba.com.caucho.hessian.io.HessianFieldException: com.hlink.merchant.order.entity.Order.orderItemSet: java.util.Set cannot be assigned from null com.alibaba.com.caucho.hessian.io.HessianFieldException: com.hlink.merchant.order.entity.Order.orderItemSet: java.util.Set cannot be assigned from null at com.alibaba.com.caucho.hessian.io.JavaDeserializer.logDeserializeError(JavaDeserializer.java:173) at com.alibaba.com.caucho.hessian.io.JavaDeserializer$ObjectFieldDeserializer.deserialize(JavaDeserializer.java:408) at com.alibaba.com.caucho.hessian.io.JavaDeserializer.readObject(JavaDeserializer.java:273) at com.alibaba.com.caucho.hessian.io.JavaDeserializer.readObject(JavaDeserializer.java:200) at com.alibaba.com.caucho.hessian.io.SerializerFactory.readObject(SerializerFactory.java:525) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObjectInstance(Hessian2Input.java:2791) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2731) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2260) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2705) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2260) at com.alibaba.com.caucho.hessian.io.CollectionDeserializer.readLengthList(CollectionDeserializer.java:119) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2163) at com.alibaba.com.caucho.hessian.io.JavaDeserializer$ObjectListFieldDeserializer.deserialize(JavaDeserializer.java:516) at com.alibaba.com.caucho.hessian.io.JavaDeserializer.readObject(JavaDeserializer.java:273) at com.alibaba.com.caucho.hessian.io.JavaDeserializer.readObject(JavaDeserializer.java:200) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObjectInstance(Hessian2Input.java:2789) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2128) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2057) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2101) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2057) at com.alibaba.dubbo.common.serialize.hessian2.Hessian2ObjectInput.readObject(Hessian2ObjectInput.java:80) at com.alibaba.dubbo.common.serialize.hessian2.Hessian2ObjectInput.readObject(Hessian2ObjectInput.java:84) at com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult.decode(DecodeableRpcResult.java:81) at com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult.decode(DecodeableRpcResult.java:110) at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec.decodeBody(DubboCodec.java:88) at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.decode(ExchangeCodec.java:121) at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.decode(ExchangeCodec.java:82) at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.decode(DubboCountCodec.java:44) at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder.messageReceived(NettyCodecAdapter.java:133) at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559) at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268) at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255) at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88) at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108) at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337) at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89) at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178) at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108) at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection, could not initialize proxy - no Session at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:582) at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:201) at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:561) at org.hibernate.collection.internal.PersistentSet.add(PersistentSet.java:185) at com.alibaba.com.caucho.hessian.io.CollectionDeserializer.readLengthList(CollectionDeserializer.java:119) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2163) at com.alibaba.com.caucho.hessian.io.Hessian2Input.readObject(Hessian2Input.java:2057) at com.alibaba.com.caucho.hessian.io.JavaDeserializer$ObjectFieldDeserializer.deserialize(JavaDeserializer.java:404) ... 42 more , path=/order/user/4028b2e4643f49a80164400d99420010/orderform_u}] as "application/json" using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@587e5365]   [DEBUG] [2018-07-12 14:58:45,048] [http-nio-9306-exec-7] org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1076): Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling   [DEBUG] [2018-07-12 14:58:45,048] [http-nio-9306-exec-7] org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1000): Successfully completed request   </body>
		<created>2018-07-12 07:02:30</created>
		<closed>2018-07-13 02:31:58</closed>
	</bug>
	<bug>
		<id>2063</id>
		<title>@Service(register=false)  is not work</title>
		<body>- [*] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [*] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/wiki/FAQ) of this repository and believe that this is not a duplicate.  * Dubbo version: 2.6.2 * Operating System version: CentOS 7 * Java version: 1.8  @Service(interfaceClass = DubboSwaggerService.class, protocol = "rest", register = false) register is not work  @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE}) @Inherited public @interface Service {      Class&lt;?&gt; interfaceClass() default void.class;      String interfaceName() default "";      String version() default "";      String group() default "";      String path() default "";      boolean export() default false;      String token() default "";      boolean deprecated() default false;      boolean dynamic() default false;      String accesslog() default "";      int executes() default 0;      boolean register() default false;        // this default value should be true  </body>
		<created>2018-07-11 05:30:29</created>
		<closed>2018-10-19 06:43:47</closed>
	</bug>
	<bug>
		<id>2061</id>
		<title>ThriftProtocol BUG</title>
		<body>- [x] I have searched the [issues](https://github.com/apache/incubator-dubbo/issues) of this repository and believe that this is not a duplicate. - [x] I have checked the [FAQ](https://github.com/apache/incubator-dubbo/wiki/FAQ) of this repository and believe that this is not a duplicate.  ### Environment  * Dubbo version: 2.6.2 * Operating System version: win10 * Java version: 1.8  ### Step to reproduce this issue 1、the code in **ThriftProtocol** String serviceKey = serviceKey(channel.getLocalAddress().getPort(), serviceName, null, null); DubboExporter&lt;?&gt; exporter = (DubboExporter&lt;?&gt;) exporterMap.get(serviceKey); 2、why set the serviceVersion and serviceGroup null ? I do not understand  ``` com.alibaba.dubbo.remoting.RemotingException: Not found exported service: com.zbss.common.api.config.service.ConfigService$Iface:20080 in [service-config/com.zbss.common.api.config.service.ConfigService$Iface:20080], may be version or group mismatch , channel: consumer: /192.168.3.63:61251 --&gt; provider: /192.168.3.63:20080, message:RpcInvocation [methodName=getVendorConfig, parameterTypes=[class java.lang.String], arguments=[123], attachments={interface=com.zbss.common.api.config.service.ConfigService$Iface}] at com.alibaba.dubbo.rpc.protocol.thrift.ThriftProtocol$1.reply(ThriftProtocol.java:67) at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:96) at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:172) at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51) at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:80) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:745) ``` </body>
		<created>2018-07-10 09:54:55</created>
		<closed>2020-08-07 03:40:40</closed>
	</bug>
	<bug>
		<id>2055</id>
		<title>ConfigUtils中使用Properties，导致读取boolean、integer等会返回null</title>
		<body>https://github.com/apache/incubator-dubbo-spring-boot-project/issues/60  dubbo-spring-boot-starter.0.2.0.jar dubbo.2.6.2.jar  application.yml ```yml dubbo:   consumer:     check: false ``` 调用ConfigUtils.replaceProperty(properties.getProperty(key, defaultValue), (Map) properties)读取配置时，返回 null，java.util.Properties.getProperty源码如下 ![42026035-aa059c2e-7af8-11e8-8b6f-80ca38a3d128](https://user-images.githubusercontent.com/5868190/42442936-a32d267a-839e-11e8-9bde-546e0c8f5804.png)  暂时的解决方案 ```yml dubbo:   consumer:     check: 'false' ```</body>
		<created>2018-07-09 09:37:49</created>
		<closed>2018-07-11 05:51:01</closed>
	</bug>
	<bug>
		<id>2050</id>
		<title>Dubbo should pre check if serialization had already been failed.</title>
		<body>### Environment  * Dubbo version: 2.6.1 * Operating System version: Fedora 27 * Java version: openjdk 1.8.0_171  ### Step to reproduce this issue * protocol: dubbo * server: netty4 * serialization: kryo  when we use `java.util.ArrayList` method `subList`, kyro use `com.esotericsoftware.kryo.serializers.JavaSerializer` to serialize `java.util.ArrayList$SubList` 2. NettyCodecAdapter$InternalEncoder had been throw `io.netty.handler.codec.EncoderException: com.esotericsoftware.kryo.KryoException: Error during Java serialization.` 3. Dubbo did not throw EncoderException, it throwed TimeoutException. ``` Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-07-09 09:55:58.203, end time: 2018-07-09 09:56:00.204, client elapsed: 13 ms, server elapsed: 1988 ms, timeout: 2000 ms, request: Request [id=1, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=getProductTaxFinance, parameterTypes=[interface java.util.List], arguments=[[100000, 14594]], attachments={path=com.xx.product.micro.service.IProductService, interface=com.xx.product.micro.service.IProductService, version=0.0.1, timeout=2000}]], channel: /10.1.14.108:55760 -&gt; /10.1.62.230:19025 at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134) at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:111) at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:95) at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:142) at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:73) at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:74) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68) at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68) at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:47) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:68) at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52) at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77) ... 92 common frames omitted ```   ### Expected Result  Dubbo should pre check if DefaultChannelPromise had already been failed. </body>
		<created>2018-07-09 03:10:21</created>
		<closed>2018-07-19 06:50:40</closed>
	</bug>
	<bug>
		<id>1903</id>
		<title>Our customized serialization id exceeds the maximum limit, now it cannot work on 2.6.2 anymore.</title>
		<body>前提： 我们自定义了序列化方式，serialization.getContentTypeId() == 88 超出计算的最大值。 按照ExchangeCodec的逻辑，这个值最大允许32。 88在服务端经过计算，变成24，无法获取到序列化方式。  在2.6.0版本时，获取序列化方式，采用兼容处理 CodecSupport.java代码如下： ``` public static Serialization getSerialization(URL url) {         return ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(                 url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION));     }      public static Serialization getSerialization(URL url, Byte id) {         Serialization result = getSerializationById(id);         if (result == null) {             result = getSerialization(url);         }         return result;     }  ``` 上述代码会从SPI接口，根据url获取的参数，进一步获取。  在2.6.2版本时，获取序列化方式更改，根据id获取不到则抛出异常 ``` public static Serialization getSerialization(URL url, Byte id) throws IOException {         Serialization serialization = getSerializationById(id);         String serializationName = url.getParameter(Constants.SERIALIZATION_KEY, Constants.DEFAULT_REMOTING_SERIALIZATION);         // Check if "serialization id" passed from network matches the id on this side(only take effect for JDK serialization), for security purpose.         if (serialization == null                 || ((id == 3 || id == 7 || id == 4) &amp;&amp; !(serializationName.equals(ID_SERIALIZATIONNAME_MAP.get(id))))) {             throw new IOException("Unexpected serialization id:" + id + " received from network, please check if the peer send the right id.");         }         return serialization;     }  ```  异常抛出后，没有做处理，导致的服务端hang住不返回，需要等待超时报错。代码在如下位置： com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.decode(Channel, ChannelBuffer, int, byte[])  Line:124  ``` try {             return decodeBody(channel, is, header);         } finally {             if (is.available() &gt; 0) {                 try {                     if (logger.isWarnEnabled()) {                         logger.warn("Skip input stream " + is.available());                     }                     StreamUtils.skipUnusedStream(is);                 } catch (IOException e) {                     logger.warn(e.getMessage(), e);                 }             }         }     }      protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {         byte flag = header[2], proto = (byte) (flag &amp; SERIALIZATION_MASK);         Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto);         ObjectInput in = s.deserialize(channel.getUrl(), is); ``` Line:141 抛出异常. Line:124 不做处理。  导致服务不返回。</body>
		<created>2018-06-08 07:09:41</created>
		<closed>2018-10-19 03:20:09</closed>
	</bug>
	<bug>
		<id>1755</id>
		<title>[Bug] Bean name of @Service annotated class does not resolve placeholder</title>
		<body>Code as following:  ```java @Service(         version = "${dubbo.service.version}",         application = "${dubbo.application.id}",         protocol = "${dubbo.protocol.id}",         registry = "${dubbo.registry.id}" ) public class DefaultDemoService implements DemoService {      public String sayHello(String name) {         return "Hello, " + name + " (from Spring Boot)";     }  } ```  The placeholder was not resolved from the bean name of `DefaultDemoService` , thus it's name will contain "${dubbo.service.version}"</body>
		<created>2018-05-08 14:08:03</created>
		<closed>2018-10-30 09:44:59</closed>
	</bug>
	<bug>
		<id>1654</id>
		<title>[BUG] @Reference field can't refer its' @Service Bean in same JVM</title>
		<body>`@Reference` field can't refer its' `@Service` Bean in same JVM, because  `@Reference` field have to  wait `@Service` Bean is ready.</body>
		<created>2018-04-23 06:29:51</created>
		<closed>2018-10-22 09:47:51</closed>
	</bug>
	<bug>
		<id>1653</id>
		<title>[BUG] Refactor @Service annotation bean name</title>
		<body>To generate a new bean name for `@Service` annotation bean   Bean name should be composed by those meta data at least: * `@Service#interfaceName` * `@Service#version` * `@Service#group` </body>
		<created>2018-04-23 06:27:17</created>
		<closed>2018-04-23 13:26:12</closed>
	</bug>
	<bug>
		<id>1641</id>
		<title>[Enhancement] the algorithm of load issue on Windows</title>
		<body>@alphatan   --- My research of this problem.  According to [this answer](https://stackoverflow.com/a/28751028/5671078) of the question "Alternate of getSystemLoadAverage() for Windows?", the method  `getSystemLoadAverage`  of java.lang.management.OperatingSystemMXBean would return `-1` in `Windows`.  It'd be suggested to use `com.sun.management.OperatingSystemMXBean` and its `getSystemCpuLoad()` and `getProcessCpuLoad()` instead.   </body>
		<created>2018-04-20 04:47:45</created>
		<closed>2018-10-10 05:48:24</closed>
	</bug>
	<bug>
		<id>1597</id>
		<title>CacheFilter,when value is null,it will throw NPE(if use ehcache for jcache),why not check null here</title>
		<body>com.alibaba.dubbo.cache.filter.CacheFilter when value is null,it will throw NPE(if use ehcache for jcache),why not check null here? if the value is null ,maybe we have no need to cache it.    `package com.alibaba.dubbo.cache.filter; public class CacheFilter implements Filter {      private CacheFactory cacheFactory;      public void setCacheFactory(CacheFactory cacheFactory) {         this.cacheFactory = cacheFactory;     }      public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException {         if (cacheFactory != null &amp;&amp; ConfigUtils.isNotEmpty(invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.CACHE_KEY))) {             Cache cache = cacheFactory.getCache(invoker.getUrl().addParameter(Constants.METHOD_KEY, invocation.getMethodName()));             if (cache != null) {                 String key = StringUtils.toArgumentString(invocation.getArguments());                 if (cache != null &amp;&amp; key != null) {                     Object value = cache.get(key);                     if (value != null) {                         return new RpcResult(value);                     }                     Result result = invoker.invoke(invocation);                     **if (!result.hasException()) {**// should check value null or not ?                         cache.put(key, result.getValue());                     }                     return result;                 }             }         }         return invoker.invoke(invocation);     }  }`</body>
		<created>2018-04-12 10:46:06</created>
		<closed>2018-05-22 07:25:53</closed>
	</bug>
	<bug>
		<id>1524</id>
		<title>The version report to registry is 2.0.1 after dubbo 2.5.9</title>
		<body>The `Dubbo version` report to registry is 2.0.1 after dubbo 2.5.9 and 2.5.10.   It should be the same as the dubbo version i think.</body>
		<created>2018-03-29 06:48:40</created>
		<closed>2018-04-25 12:12:18</closed>
	</bug>
	<bug>
		<id>1470</id>
		<title>com.alibaba.dubbo.common.URL不能使用邮箱作为用户名</title>
		<body>com.alibaba.dubbo.common.URL.valueof()中如果用户名或密码中包含@字段，导致解析错误 i = url.indexOf("@");需要将此字段改为i = url.lastIndexOf("@");</body>
		<created>2018-03-15 09:43:05</created>
		<closed>2018-09-03 08:08:49</closed>
	</bug>
	<bug>
		<id>1422</id>
		<title>Consumer cannot get the list of providers when use ZK as registry(sometimes it happens).</title>
		<body>the bug is：when consumer and provider started at the same time(or it happens in runtime,when cosumer and provider can't connect to zk,and then network recover)，sometimes the consumer will lost the provider list，causing the RpcException。restart consumer or provider will recover it。 code is here： doSubscribe method id ZookeeperRegistry.java(169-182lines) ```                 List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();                 for (String path : toCategoriesPath(url)) {                     ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);                     if (listeners == null) {                         zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());                         listeners = zkListeners.get(url);                     }                     ChildListener zkListener = listeners.get(listener);                     if (zkListener == null) {                         listeners.putIfAbsent(listener, new ChildListener() {                             // A. it will invoke in zk thread,when zk node changed                             public void childChanged(String parentPath, List&lt;String&gt; currentChilds) {                                 ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));                             }                         });                         zkListener = listeners.get(listener);                     }                     zkClient.create(path, false);                     List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);                     if (children != null) {                         urls.addAll(toUrlsWithEmpty(url, path, children));                     }                 }                 // B.it will invoke in main thread,or failoverRegister thread                 notify(url, listener, urls); ``` notity(url,listener,urls) method will invoke at: A：it will invoke in zk thread,when zk node changed B：it will invoke in main thread,or failoverRegister thread  The cause of the problem： 1. when consumer start，before main thread invoke B, thread completes its running slice on the CPU，and wait the next CPU time.at this time（1. provider not registed in zk,the urls is empty list。 2. it registed the zk watch event,will listener to zk node change event.） 2.provider started，registed in zk, the zk node is changed 3.reveive the zk node change event,invoke A in the zk thread。（A will invoke in zk thread，and B will invoke in another thread） 4.At the end of the A method，the consumer obtain the real provider list. 5.main thread obtain the CPU time，invoke B method，and this time urls is empty list。and update the consumer's provider list to empty。it cause the problem  the problem happens A invoke before B,If you can control the method execution order(B invoke before A),the bug will fix。</body>
		<created>2018-03-05 14:13:03</created>
		<closed>2018-05-17 03:50:52</closed>
	</bug>
	<bug>
		<id>1362</id>
		<title>When using method level cache, no matter what i config, it's always LruCache.</title>
		<body>consumer配置：     &lt;dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.demo.DemoService"&gt;         &lt;dubbo:method name="sayHello" timeout="60000" **cache="threadlocal"**/&gt;     &lt;/dubbo:reference&gt;  在执行的过程中，我们发现其实并不会创建ThreadlocalCache，而是用的LruCache，原因是在 ![image](https://user-images.githubusercontent.com/14085645/36060257-e63276f2-0e80-11e8-9da7-36e41c7ef23a.png) 可以看到，当将cache配置在方法上而不是服务上的时候，传入的url只有"method.cache"参数而没有"cache"参数，但是CacheFactory$Adaptive这个类并没有作区分。</body>
		<created>2018-02-10 08:37:37</created>
		<closed>2018-03-05 02:34:42</closed>
	</bug>
	<bug>
		<id>1313</id>
		<title>shutdownhook can't unregister instances.</title>
		<body>shutdownhook的时候不会执行FailbackRegistry的unregister方法。  首先，FailbackRegistry定义了一个全局的destroyed，默认值是false。 然后，shutdownhook在destroy之前会首先判断一下这个变量的状态，但是canDestroy就会把它置为true。 @Override   public void destroy() {     if (!canDestroy()){       return;     }     super.destroy();     try {       retryFuture.cancel(true);     } catch (Throwable t) {       logger.warn(t.getMessage(), t);     }   }  最后，在真正执行unregister的时候，这个destroyed就会变成true被return掉了，导致FailbackRegistry的unregistry并不会被执行。 @Override     public void unregister(URL url) {         if (destroyed.get()){             return;         }     super.unregister(url); ... }  我看这个代码是8月30号修复issue#568的时候加的，这是个bug，还是有其他的考虑吗？还是我缺少配置？</body>
		<created>2018-02-02 09:37:08</created>
		<closed>2018-02-09 09:00:14</closed>
	</bug>
	<bug>
		<id>1303</id>
		<title>dubbo async invoke occur timout exception, but indeed within the timeout. dubbo version 2.5.7</title>
		<body>com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-01-30 19:02:11.956, end time: 2018-01-30 19:02:13.186, client elapsed: 0 ms, server elapsed: 1230 ms, timeout: 5000 ms, request: Request [id=4470, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=mock, parameterTypes=[class mock], arguments=[mock[mock=[4063]]], attachments={async=true, path=mock, id=2189, interface=mock, version=1.0.0, timeout=5000, group=offline}]], channel: /172.19.155.23:57001 -&gt; /10.4.225.73:20880 at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:136) at com.alibaba.dubbo.rpc.protocol.dubbo.FutureAdapter.get(FutureAdapter.java:73) at com.mock(mock.java:197) at com.mock$1.run(mock.java:554) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)</body>
		<created>2018-02-01 05:20:05</created>
		<closed>2018-02-09 09:00:01</closed>
	</bug>
	<bug>
		<id>1289</id>
		<title>dubbo provider side can't find service when deployed in docker.</title>
		<body>有些部署场景需要动态指定服务注册的地址，如docker bridge网络模式下要指定注册宿主机ip以实现外网通信。dubbo提供了两对启动阶段的系统属性，用于设置对外通信的ip、port地址    DUBBO_IP_TO_REGISTRY --- 注册到注册中心的ip地址 DUBBO_PORT_TO_REGISTRY --- 注册到注册中心的port端口  docker环境下对外服务的端口为DUBBO_PORT_TO_REGISTRY,但服务提供端在读取端口号时读取到的是本地端口号导致无法找到对应的服务。BUG信息如下： Not found exported service: hbec.app.test.service.TestService:20881 in [hbec.app.test.service.TestService:31838]  问题代码如下: DubboProtocol类   Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) throws RemotingException {         boolean isCallBackServiceInvoke = false;         boolean isStubServiceInvoke = false;         int port = channel.getLocalAddress().getPort();//# 注:在docker环境下该端口取的是本地端口，非环境变量端口         String path = inv.getAttachments().get(Constants.PATH_KEY);         // if it's callback service on client side         isStubServiceInvoke = Boolean.TRUE.toString().equals(inv.getAttachments().get(Constants.STUB_EVENT_KEY));         if (isStubServiceInvoke) {             port = channel.getRemoteAddress().getPort();         }     </body>
		<created>2018-01-29 02:00:39</created>
		<closed>2018-02-09 09:00:26</closed>
	</bug>
	<bug>
		<id>1181</id>
		<title>The online/offline provided in 2.5.8 doesn't work properly with redis registry.</title>
		<body>搭建的是基于redis的dubbo2.5.8 服务启动设置默认不注册服务，待应用启动后执行脚本telnet localhost 22222进入dubbo控制台，然后online注册服务；到这里都很正常，但需要更新应用时先offline下线服务时出了问题，不管怎么执行命令，隔一会儿（1秒左右）服务又重新注册了，试过了各种办法都无效。  理想效果：默认启动不注册服务，执行online后注册服务，执行offline后下线服务，kill掉应用后重新启动应用（记住kill前的状态，如果是online则直接注册服务，如果是offline则不注册服务），执行online，恢复服务。    ![image](https://user-images.githubusercontent.com/3916627/34672976-9325b21e-f4bb-11e7-8b64-82153ff0d2ea.png)  debug到这里发现registered注册和注销的实例化对象不是同一个，online添加的对象（内存中）offline却无法移除，却单单把redis上的数据删掉了；而com.alibaba.dubbo.registry.redis.RedisRegistry#deferExpired这个定时任务却把内存中没被移除的对象有重新写入了redis，导致offline下线无效。  ![image](https://user-images.githubusercontent.com/3916627/34673335-da3a3c50-f4bc-11e7-957d-3714b9a94ecb.png) private final Set&lt;URL&gt; registered = new ConcurrentHashSet&lt;URL&gt;();应该设置为静态变量，保证该类的所有实例对象共享一个registered</body>
		<created>2018-01-08 11:55:25</created>
		<closed>2018-01-17 08:54:09</closed>
	</bug>
	<bug>
		<id>1150</id>
		<title>getLogHost returning 127.0.0.1 not the correct ip address</title>
		<body>When Dubbo system is running ,the logs is like :  30 15:45:47,446 INFO [com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry] -  [DUBBO] Subscribe: provider://10.20.5.106:20880/com.xxx.dubbotest.provider.DemoService?anyhost=true&amp;application=xixi_provider&amp;category=configurators&amp;check=false&amp;dubbo=2.5.2&amp;interface=com.unj.dubbotest.provider.DemoService&amp;methods=sayHello,getUsers&amp;pid=12192&amp;side=provider×tamp=1419925546891, dubbo version: 2.5.2, current host: 127.0.0.1   getLogHost returning 127.0.0.1 not the correct ip address，I think it should be a bug, and can be fixed easily by change the way getting localhost IP </body>
		<created>2018-01-02 11:30:39</created>
		<closed>2018-01-22 09:25:41</closed>
	</bug>
	<bug>
		<id>1120</id>
		<title>@DubboComponentScan is not compatible Spring @Service completely</title>
		<body>If Service bean annotated Dubbo `@Service` and Spring `@Service` and `@ComponentScan`  executes earlier than `@DubboComponentScan` , current been will not be a candidate of `@Service` Bean.  `@DubboComponentScan` should consider this scenario:  There are two classes : `A`  and `B` under packages `com.acme` :  A with Dubbo `@Service` B with Spring `@Service` and Dubbo `@Service`  `@ComponentScan` scans this package first, and B will be a candidate  of `@Service` Bean , and then `@DubboComponentScan` also scans same package , just A will be exported as Dubbo Remote interface , B will be missing.</body>
		<created>2017-12-26 11:59:02</created>
		<closed>2017-12-26 15:13:27</closed>
	</bug>
	<bug>
		<id>1116</id>
		<title>Can't compile under JDK 1.9, caused by an invalid import.</title>
		<body>com.alibaba.dubbo.config.spring.context.annotation.provider里面 import com.sun.org.apache.regexp.internal.RE无效导入JDK9下部能编译通过 同时下面两个也是无效导入 import com.alibaba.dubbo.rpc.Protocol; import org.springframework.context.annotation.ImportResource;</body>
		<created>2017-12-26 06:52:06</created>
		<closed>2018-01-22 09:26:07</closed>
	</bug>
	<bug>
		<id>1089</id>
		<title>dispatcher:execution</title>
		<body>Dubbo官方的说法是：dispatcher配置为execution时候 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。 但是我在源码中却没有发现其处理逻辑，相反其与all几乎一样，除了在默认的executor找不到时候会去找另外executor和捕捉了异常。  所以具体的execution到底是怎么生效的呢</body>
		<created>2017-12-22 07:45:14</created>
		<closed>2018-04-24 09:07:11</closed>
	</bug>
	<bug>
		<id>1010</id>
		<title>broadcast cannot apply to group</title>
		<body>服务端存在： 分组1,2,3 客户端配置： group="*"  无法调用到任何服务，dubbo admin 中显示无任何提供者 调用不会报错，但无法调用到服务 通过调试源码发现，只要是group="*"都会使用MergeableCluster，而不是BroadCastCluster  如果客户端group=null，则调用报错，提示没有提供者 </body>
		<created>2017-12-08 03:10:45</created>
		<closed>2020-08-07 03:17:28</closed>
	</bug>
	<bug>
		<id>972</id>
		<title>The promotion for 'batch recover of fault tolerant' functionality in dubbo-admin is incorrect.</title>
		<body>![image](https://user-images.githubusercontent.com/24954758/33409551-082198e0-d5b7-11e7-93e2-1c4651b9abbc.png) </body>
		<created>2017-11-30 02:13:10</created>
		<closed>2017-12-11 05:13:48</closed>
	</bug>
	<bug>
		<id>944</id>
		<title>AbstractClient reconnect() should be synchronized under concurrency scene</title>
		<body>高并发重连出错，需要加锁， eg：线程1关闭原有连接，重建连接         并发线程2会关闭线程1新建的连接，重接新的连接。导致线程1发送数据失败         并发线程3又会关闭线程2新建立的连接，重建新的连接，导致线程2发送数据失败。 问题：高并发重连时不加锁会出现频繁的连接关闭重建，  线上出错日志见附件 ![default](https://user-images.githubusercontent.com/4150132/33326002-b4ee8f62-d48e-11e7-8b0b-70d7efa6c0db.jpg) </body>
		<created>2017-11-28 14:52:24</created>
		<closed>2018-07-26 10:07:56</closed>
	</bug>
	<bug>
		<id>927</id>
		<title>'Multi connections' configuration problem in &lt;dubbo-user-book&gt;</title>
		<body>dubbo-user-book.pdf中关于多连接配置有如下一段描述：  多连接配置: Dubbo 协议缺省每服务每提供者每消费者使用单一长连接,如果数据量较大,可以使用多个 连接。  &lt;dubbo:protocol name="dubbo" connections="2" /&gt;  但其实dubbo:protocol应该没有connections属性可以配置，dubbo:service和dubbo:reference才有，是笔误吗？</body>
		<created>2017-11-25 14:13:15</created>
		<closed>2018-02-22 06:58:11</closed>
	</bug>
	<bug>
		<id>922</id>
		<title>合并结果问题，应该是笔误，建议修复</title>
		<body>![image](https://user-images.githubusercontent.com/7541266/33204749-7e79b09e-d13f-11e7-9fab-f27c991a1436.png) </body>
		<created>2017-11-24 09:48:29</created>
		<closed>2017-11-30 09:16:43</closed>
	</bug>
	<bug>
		<id>913</id>
		<title>dubbo:protocol codec不可用，不能配置，也不能扩展</title>
		<body>&lt;dubbo:protocol name="dubbo" port="${dubbo.port}" codec="xxx"/&gt; 目前codec配置还是使用的@Deprecated Codec接口， 而DubboProtocol 使用的是Codec2接口，#272行写死的 dubbo 希望将codec实现配置化  用处： 目前项目使用的dubbox，dubbox改动了通信协议，希望使用插件化codec兼容处理</body>
		<created>2017-11-23 09:00:09</created>
		<closed>2018-01-08 08:59:11</closed>
	</bug>
	<bug>
		<id>911</id>
		<title>dubbo-2.5.7 RmiProtocol RmiRemoteInvocation 兼容性问题</title>
		<body>* 原因：公司目前环境都是dubbo2.5.4-SNAPSHOT，上2.5.7版本时因rmi协议在2.5.7引入新的RmiRemoteInvocation，所以服务提供者接受到invocation反序列化失败 ``` ould not access remote service [rmi://192.168.1.10:1100/:(]; nested exception is java.rmi.ServerException: RemoteException occurred in server thread; nested exception is:  java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is:  java.lang.ClassNotFoundException: com.alibaba.dubbo.rpc.protocol.rmi.RmiRemoteInvocation (no security manager: RMI class loader disabled) (org.springframework.web.context.support.XmlWebApplicationContext)(AbstractApplicationContext.java:551)    java.rmi.UnmarshalException: error unmarshalling arguments; nested exception is:  java.lang.ClassNotFoundException: com.alibaba.dubbo.rpc.protocol.rmi.RmiRemoteInvocation (no security manager: RMI class loader disabled) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:313) ~[spring-beans-4.3.12.RELEASE.jar:4.3.12.RELEASE] ```</body>
		<created>2017-11-23 07:40:36</created>
		<closed>2018-01-19 08:49:11</closed>
	</bug>
	<bug>
		<id>906</id>
		<title>JSON.json(Locale) throw StackOverflowError</title>
		<body>fix from dubbo:master, 2.5.7 : GenericJSONConverter主要是用在日志部分输出，所以当我们输出locale对象时就发生stack溢出。 ``` java.lang.StackOverflowError at com.alibaba.dubbo.common.json.JSONWriter.valueString(JSONWriter.java:189) at com.alibaba.dubbo.common.json.GenericJSONConverter$7.encode(GenericJSONConverter.java:100) at com.alibaba.dubbo.common.json.GenericJSONConverter.writeValue(GenericJSONConverter.java:338) at com.alibaba.dubbo.common.json.GenericJSONConverter.writeValue(GenericJSONConverter.java:347) at com.alibaba.dubbo.common.json.GenericJSONConverter.writeValue(GenericJSONConverter.java:395) at com.alibaba.dubbo.common.json.GenericJSONConverter.writeValue(GenericJSONConverter.java:347) at com.alibaba.dubbo.common.json.GenericJSONConverter.writeValue(GenericJSONConverter.java:395) ```</body>
		<created>2017-11-22 14:52:06</created>
		<closed>2018-05-14 06:06:40</closed>
	</bug>
	<bug>
		<id>883</id>
		<title>当有多个注册中心，@Reference(registry="test")来指定使用某一个时报错</title>
		<body>问题定位， 类com.alibaba.dubbo.config.spring.util.BeanFactoryUtils的67行，方法使用错误。  希望在2.5.8版本发布后可以解决</body>
		<created>2017-11-19 02:44:19</created>
		<closed>2017-11-30 07:04:51</closed>
	</bug>
	<bug>
		<id>870</id>
		<title>关于Path cannot be null的报错</title>
		<body>在使用zookeeper作为注册中心时， 出现zookeeper事件为NONE时，会报 ![image](https://user-images.githubusercontent.com/13182082/32884976-0961161a-caf7-11e7-8f17-90d0273f5e23.png) 错误，我们系统监控时经常发送短信提醒，各位大神有没有好的办法支招啊？</body>
		<created>2017-11-16 09:54:13</created>
		<closed>2017-12-08 03:19:24</closed>
	</bug>
	<bug>
		<id>843</id>
		<title>发现一个注册服务的BUG</title>
		<body>![bug](https://user-images.githubusercontent.com/18377791/32688699-cb4f6bae-c710-11e7-9818-b54dea105bb8.png) 如上图所示，上图的代码，是无法注册成为dubbo的服务的，搞了好久。最后发现，是命名出了问题，我把它改为如下的命名就好了 ![real](https://user-images.githubusercontent.com/18377791/32688708-f8fdae8a-c710-11e7-8b1b-89cc980d78f6.png)  我不知道你们的有没有问题，我是从git上面clone的代码install的。命令中带有Java的，都无法扫描成为服务</body>
		<created>2017-11-11 10:49:29</created>
		<closed>2017-12-13 03:11:28</closed>
	</bug>
	<bug>
		<id>821</id>
		<title>通过API编程方式注册服务</title>
		<body>通过API编程方式注册/消费服务，服务提供者/消费者下线后，在dubbo-admin上还能看到。且服务状态显示正常。</body>
		<created>2017-11-06 10:20:36</created>
		<closed>2017-12-08 03:20:51</closed>
	</bug>
	<bug>
		<id>807</id>
		<title>dubboAdmin屏蔽服务后，不能恢复吗？？？</title>
		<body>dubboAdmin存在这样一个问题：屏蔽服务后，不能恢复。请问这个问题有做修复吗？</body>
		<created>2017-11-02 08:34:05</created>
		<closed>2017-11-13 05:12:04</closed>
	</bug>
	<bug>
		<id>803</id>
		<title>zk框架抛出Watcher exception Path cannot be null</title>
		<body>`2017-11-01 20:14:24,875 | ERROR | main-EventThread | CuratorFrameworkImpl.java:566 | - Watcher exception java.lang.IllegalArgumentException: Path cannot be null     at org.apache.curator.utils.PathUtils.validatePath(PathUtils.java:48)     at org.apache.curator.utils.PathUtils.validatePath(PathUtils.java:37)     at org.apache.curator.utils.ZKPaths.fixForNamespace(ZKPaths.java:105)     at org.apache.curator.framework.imps.NamespaceImpl.fixForNamespace(NamespaceImpl.java:104)     at org.apache.curator.framework.imps.CuratorFrameworkImpl.fixForNamespace(CuratorFrameworkImpl.java:594)     at org.apache.curator.framework.imps.GetChildrenBuilderImpl.forPath(GetChildrenBuilderImpl.java:198)     at org.apache.curator.framework.imps.GetChildrenBuilderImpl.forPath(GetChildrenBuilderImpl.java:40)     at com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl.process(CuratorZookeeperClient.java:150)     at org.apache.curator.framework.imps.NamespaceWatcher.process(NamespaceWatcher.java:68)     at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:522)     at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:498) ` 异常栈如上，这应该是传给zk forPath 方法一个不存在的path,  能否在dubbo 框架层做拦截，并打印出哪个path 绑定的listener 出现了异常，这个是与zk 连接出现异常时抛出的， 还有 哪些情况下会产生这种异常？ </body>
		<created>2017-11-01 12:54:34</created>
		<closed>2017-11-03 11:31:36</closed>
	</bug>
	<bug>
		<id>799</id>
		<title>启动脚本在rh7/centos7下nc检测dubbo端口失败问题</title>
		<body>rh6/centos6自带nc工具为nc-***,脚本可正常执行. rh7/centos7系统自带的nc工具nmap-ncat.***检测dubbo端口失败(start.sh脚本中的COUNT=`echo status | nc -i 1 $SERVER_HOST $SERVER_PORT | grep -c OK`),应用无法正常给出OK响应,脚本执行报出.Ncat: Connection refused. 应用日志堆栈如下: ``` - | 2017-11-01 00:15:03.249 | WARN | localhost | DubboServerHandler-192.168.36.150:21881-thread-2 | c.a.d.r.t.d.ChannelEventRunnable &gt; 62 |  |  |  [DUBBO] ChannelEventRunnable handle RECEIVED operation error, channel is NettyChannel [channel=[id: 0x81c3bd40, /127.0.0.1:59354 :&gt; /127.0.0.1:21881]], message is status, dubbo version: dap-1.0, current host: 127.0.0.1 |  com.alibaba.dubbo.remoting.RemotingException: Failed to send message OK dubbo&gt; to /127.0.0.1:59354, cause: null         at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:108)         at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:51)         at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:185)         at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:52)         at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:82)         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)         at java.lang.Thread.run(Thread.java:745) Caused by: java.nio.channels.ClosedChannelException: null         at org.jboss.netty.channel.socket.nio.AbstractNioWorker.cleanUpWriteBuffer(AbstractNioWorker.java:433)         at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:128)         at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)         at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)         at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)         at org.jboss.netty.channel.Channels.write(Channels.java:725)         at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)         at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)         at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)         at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:784)         at org.jboss.netty.channel.SimpleChannelHandler.writeRequested(SimpleChannelHandler.java:292)         at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:99)         at org.jboss.netty.channel.SimpleChannelHandler.handleDownstream(SimpleChannelHandler.java:254)         at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)         at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)         at org.jboss.netty.channel.Channels.write(Channels.java:704)         at org.jboss.netty.channel.Channels.write(Channels.java:671)         at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:348)         at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:98)         ... 7 common frames omitted ```</body>
		<created>2017-11-01 07:41:18</created>
		<closed>2018-05-22 07:36:18</closed>
	</bug>
	<bug>
		<id>796</id>
		<title>在Spring Boot中运行Dubbo消费端报错frozen class (cannot edit)</title>
		<body>### 问题描述 使用Spring Boot构建web app，Controller中通过dubbo消费端远程调用服务端，使用注解进行参数校验，如getName(@NotNull String id)。 在调用过程中始终报错：  java.lang.RuntimeException: XXXService_GetNameParameter: frozen class (cannot edit) at javassist.ClassPool.checkNotFrozen(ClassPool.java:617) ~[javassist-3.21.0-GA.jar:?] at javassist.ClassPool.makeClass(ClassPool.java:859) ~[javassist-3.21.0-GA.jar:?] at javassist.ClassPool.makeClass(ClassPool.java:836) ~[javassist-3.21.0-GA.jar:?] at com.alibaba.dubbo.validation.support.jvalidation.JValidator.getMethodParameterBean(JValidator.java:166)  ### 问题分析 1. 初步判断和dubbo版本无关，应该是一个bug。报错的原因是再次尝试查找动态生成的类时，应该能找到，实际上因为classloader的原因无法找到。即com.alibaba.dubbo.validation.support.jvalidation.JValidator第163行： `parameterClass = (Class&lt;?&gt;) Class.forName(parameterClassName, true, clazz.getClassLoader());` 这里应该能够找到parameterClass，而不是再次抛出ClassNotFoundException。 2. 出现ClassNotFoundException的原因，是由于在生成参数类XXXService_GetNameParameter的时候，没有传入该参数的接口的classLoader（即clazz.getClassLoader），而是使用了默认的Context ClassLoader。 3. 建议修改JValidator第202行为： `parameterClass = ctClass.toClass(clazz.getClassLoader(), null);`传入接口的classLoader，保证其一致性。 </body>
		<created>2017-10-31 15:18:34</created>
		<closed>2017-11-02 07:19:22</closed>
	</bug>
	<bug>
		<id>714</id>
		<title>"服务治理 &gt; 提供者"页面显示大量警告</title>
		<body>两个不同应用的服务名（group+interface+version）并没有重复，依然显示大量警告。 #109 之前有人已经提出了，2.5.5版本还没解决这个问题 </body>
		<created>2017-09-30 09:33:04</created>
		<closed>2017-12-08 03:12:32</closed>
	</bug>
	<bug>
		<id>672</id>
		<title>Monitor超时阻塞</title>
		<body>Monitor超时阻塞 如果和zk连接失败会一直阻塞 导致dubbo工作线程不能处理请求  "http-bio-10001-exec-7" #66 daemon prio=5 os_prio=0 tid=0x00007faf04286800 nid=0x7c13 waiting on condition [0x00007faed05f1000]    java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  &lt;0x00000000ef7ca268&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) at java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:256) at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitUntil(AbstractQueuedSynchronizer.java:2120) at org.I0Itec.zkclient.ZkClient.waitForKeeperState(ZkClient.java:636) at org.I0Itec.zkclient.ZkClient.waitUntilConnected(ZkClient.java:619) at org.I0Itec.zkclient.ZkClient.waitUntilConnected(ZkClient.java:615) at org.I0Itec.zkclient.ZkClient.retryUntilConnected(ZkClient.java:679) at org.I0Itec.zkclient.ZkClient.create(ZkClient.java:304) at org.I0Itec.zkclient.ZkClient.createPersistent(ZkClient.java:213) at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperClient.createPersistent(ZkclientZookeeperClient.java:47) at com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient.create(AbstractZookeeperClient.java:44) at com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient.create(AbstractZookeeperClient.java:39) at com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient.create(AbstractZookeeperClient.java:39) at com.alibaba.dubbo.remoting.zookeeper.support.AbstractZookeeperClient.create(AbstractZookeeperClient.java:39) at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.doRegister(ZookeeperRegistry.java:98) at com.alibaba.dubbo.registry.support.FailbackRegistry.register(FailbackRegistry.java:130) at com.alibaba.dubbo.registry.integration.RegistryProtocol.doRefer(RegistryProtocol.java:268) at com.alibaba.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:254) at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:60) at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:63) at com.alibaba.dubbo.rpc.Protocol$Adpative.refer(Protocol$Adpative.java) at com.alibaba.dubbo.monitor.dubbo.DubboMonitorFactroy.createMonitor(DubboMonitorFactroy.java:60) at com.alibaba.dubbo.monitor.support.AbstractMonitorFactory.getMonitor(AbstractMonitorFactory.java:56)</body>
		<created>2017-09-21 08:50:06</created>
		<closed>2017-10-28 10:07:26</closed>
	</bug>
	<bug>
		<id>627</id>
		<title>javassist新版本兼容性的问题</title>
		<body>接口定义如下： `public interface MouseService {     void eat();      void getName(); //怀疑是getXxx方法有问题 name()或getName(String a)等形式都可以 } ` Jdk版本1.8， javassist版本3.20.0-GA版本时报以下异常，javassist版本3.15.0运行正常（但不支持jdk1.8特性）：  `java.lang.RuntimeException: [source error] getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.bytecode.Wrapper0: inconsistent stack height -1 at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:302) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:256) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.common.bytecode.Wrapper.makeWrapper(Wrapper.java:239) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.common.bytecode.Wrapper.getWrapper(Wrapper.java:101) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:492) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:346) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:307) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:206) ~[dubbo-2.5.4.jar:2.5.4] at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:109) ~[dubbo-2.5.4.jar:2.5.4] at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-4.3.10.RELEASE.jar:4.3.10.RELEASE] at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.6.RELEASE.jar:1.5.6.RELEASE] at com.alibaba.dubbo.test.DubboFeatureTestApplication.main(DubboFeatureTestApplication.java:10) [classes/:na] Caused by: javassist.CannotCompileException: [source error] getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.bytecode.Wrapper0: inconsistent stack height -1 at javassist.CtNewMethod.make(CtNewMethod.java:79) ~[javassist-3.20.0-GA.jar:na] at javassist.CtNewMethod.make(CtNewMethod.java:45) ~[javassist-3.20.0-GA.jar:na] at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:281) ~[dubbo-2.5.4.jar:2.5.4] ... 22 common frames omitted Caused by: javassist.compiler.CompileError: getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.bytecode.Wrapper0: inconsistent stack height -1 at javassist.compiler.Javac.compile(Javac.java:104) ~[javassist-3.20.0-GA.jar:na] at javassist.CtNewMethod.make(CtNewMethod.java:74) ~[javassist-3.20.0-GA.jar:na] ... 24 common frames omitted` </body>
		<created>2017-09-10 10:28:51</created>
		<closed>2017-09-10 10:45:05</closed>
	</bug>
	<bug>
		<id>558</id>
		<title>com.alibaba.dubbo.common.serialize.support.dubbo.Builder#newObjectBuilder 存在死循环的风险</title>
		<body>![image](https://user-images.githubusercontent.com/13461531/29758558-19b672de-8be7-11e7-88d3-6f160bc82eb7.png)  449行应该是  cs = t.getDeclaredConstructors(); 才对。</body>
		<created>2017-08-28 03:51:57</created>
		<closed>2017-09-05 11:09:28</closed>
	</bug>
	<bug>
		<id>543</id>
		<title>服务延迟(delay)暴露时存在并发问题</title>
		<body>在启用延迟暴露时，同一个工程的多个服务可能会被暴露在不同的端口： 如8个服务在端口20880，2个服务在20881  `public synchronized void export() {         if (provider != null) {             if (export == null) {                 export = provider.getExport();             }             if (delay == null) {                 delay = provider.getDelay();             }         }         if (export != null &amp;&amp; ! export.booleanValue()) {             return;         }         if (delay != null &amp;&amp; delay &gt; 0) {             Thread thread = new Thread(new Runnable() {                 public void run() {                     try {                         Thread.sleep(delay);                     } catch (Throwable e) {                     }                     doExport();                 }             });             thread.setDaemon(true);             thread.setName("DelayExportServiceThread");             thread.start();         } else {             doExport();         }     }          protected synchronized void doExport() {         if (unexported) {             throw new IllegalStateException("Already unexported!");         }      ...   } `</body>
		<created>2017-08-23 09:33:36</created>
		<closed>2017-10-10 03:49:34</closed>
	</bug>
	<bug>
		<id>534</id>
		<title>优雅停机如何配置</title>
		<body>管理台可以通过路由禁止访问某个服务，但是无法批量设置某个项目的所有服务都禁用，一个一个会很复杂。顾想采用优雅停机的方案来处理发版时的边界问题。但是优雅停机官网文档的： &lt;dubbo:application ...&gt; &lt;dubbo:parameter key="shutdown.timeout" value="60000" /&gt;  &lt;/dubbo:application&gt;  这个配置压根就不能配置，启动直接报错，具体如何配置有人有方案？或者有在线上试运行过？</body>
		<created>2017-08-17 09:32:59</created>
		<closed>2017-09-01 12:11:46</closed>
	</bug>
	<bug>
		<id>532</id>
		<title>奇怪的异常（2.5.3）</title>
		<body>不是必现，但是偶尔会持续几分钟，dubbo是2.5.3版本，困扰好久了  java.lang.NullPointerException: null         at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:34)         at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:84)         at com.alibaba.dubbo.rpc.protocol.dubbo.DubboInvoker.doInvoke(DubboInvoker.java:96)         at com.alibaba.dubbo.rpc.protocol.AbstractInvoker.invoke(AbstractInvoker.java:144)         at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)         at com.alibaba.dubbo.rpc.protocol.dubbo.filter.FutureFilter.invoke(FutureFilter.java:53)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)         at com.alibaba.dubbo.rpc.filter.ConsumerContextFilter.invoke(ConsumerContextFilter.java:48)         at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)         at com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper.invoke(ListenerInvokerWrapper.java:74)         at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:53)         at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)         at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:227)         at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:72)         at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:52)         at com.alibaba.dubbo.common.bytecode.proxy1.getAtp(proxy1.java)         at com.mryx.grampus.service.impl.GmsShopGoodsServiceImpl.getCategoryGoods(GmsShopGoodsServiceImpl.java:101)         at com.mryx.grampus.controller.ProductController.getGoods(ProductController.java:178)         at sun.reflect.GeneratedMethodAccessor375.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:497)         at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:817)         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:731)         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:968)         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:870)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)</body>
		<created>2017-08-16 12:53:57</created>
		<closed>2017-09-28 02:19:09</closed>
	</bug>
	<bug>
		<id>482</id>
		<title>2.5.3会间歇性连接超时</title>
		<body>http://blog.csdn.net/csujiangyu/article/details/51984600 这是看到的其他帖子里说的解决方法 麻烦确认下是否存在问题 我们生产环境此问题出现很多回了</body>
		<created>2017-07-31 09:05:51</created>
		<closed>2017-08-29 07:52:04</closed>
	</bug>
	<bug>
		<id>478</id>
		<title>显示调用ReferenceConfig.destory()方法缺陷</title>
		<body>程序中需要显示的调用ReferenceConfig.destory()销毁consumer时，其对应的ChildListener并没有被删除，通过分析代码发现 zkClient.removeChildListener(toUrlPath(url), zkListener)导致。 原因是因为：toUrlPath(url) 返回的内容和订阅时注册的url不一致。 订阅时监听的url分别为 ： .../XXXSERVICE/providers; .../XXXSERVICE/configurators; .../XXXSERVICE/routers； 而取消订阅时URL为： .../XXXService?application=xxx&amp;category=providers,configurators,routers  故进而导致销毁的consumer并不会清除对应的ChildListener； </body>
		<created>2017-07-20 11:27:16</created>
		<closed>2018-08-21 08:14:03</closed>
	</bug>
	<bug>
		<id>290</id>
		<title>使用dubbo2.5.4出现compile error: getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.bytecode.Wrapper6: inc onsistent stack height 5</title>
		<body>``` java  2016-07-19 18:20:25,494 ERROR [org.springframework.web.context.ContextLoader] -Context initialization failed  java.lang.RuntimeException: [source error] getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.byte code.Wrapper6: inconsistent stack height 5         at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:354)         at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:293)         at com.alibaba.dubbo.common.bytecode.Wrapper.makeWrapper(Wrapper.java:346)         at com.alibaba.dubbo.common.bytecode.Wrapper.getWrapper(Wrapper.java:89)         at com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:429)         at com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:284)         at com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:245)         at com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:144)         at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:109)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)         at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)         at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410)         at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)         at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)         at com.caucho.server.webapp.WebApp.addListenerObject(WebApp.java:2153)         at com.caucho.server.webapp.WebApp.callInitializers(WebApp.java:3482)         at com.caucho.server.webapp.WebApp.startImpl(WebApp.java:3787)         at com.caucho.server.webapp.WebApp.access$700(WebApp.java:208)         at com.caucho.server.webapp.WebApp$StartupTask.run(WebApp.java:5317)         at com.caucho.env.thread2.ResinThread2.runTasks(ResinThread2.java:173)         at com.caucho.env.thread2.ResinThread2.run(ResinThread2.java:118) Caused by: javassist.CannotCompileException: [source error] getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.d ubbo.common.bytecode.Wrapper6: inconsistent stack height 5         at javassist.CtNewMethod.make(CtNewMethod.java:79)         at javassist.CtNewMethod.make(CtNewMethod.java:45)         at com.alibaba.dubbo.common.bytecode.ClassGenerator.toClass(ClassGenerator.java:322)         ... 22 more Caused by: compile error: getPropertyValue (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; in com.alibaba.dubbo.common.bytecode.Wrapper6: inc onsistent stack height 5         at javassist.compiler.Javac.compile(Javac.java:104)         at javassist.CtNewMethod.make(CtNewMethod.java:74)         ... 24 more ``` </body>
		<created>2016-07-19 10:24:51</created>
		<closed>2018-04-11 11:25:33</closed>
	</bug>
	<bug>
		<id>92</id>
		<title>Dubbo库放在Tomcat的lib下时，有ClassLoader问题</title>
		<body>修改在 45e66f4 ，不使用`Wrapper`，避免此问题。 </body>
		<created>2014-10-30 10:46:15</created>
		<closed>2014-10-30 10:46:39</closed>
	</bug>
	<bug>
		<id>91</id>
		<title>ZK的RegistryClient没有读取超时参数设置</title>
		<body>修改在 40b5dad </body>
		<created>2014-10-30 10:44:36</created>
		<closed>2014-10-30 10:46:39</closed>
	</bug>
	<bug>
		<id>90</id>
		<title>executes属性不能设置在方法上</title>
		<body>dubbo-config/dubbo-config-spring/src/main/resources/META-INF/dubbo.xsd 配置的问题  修改在 0e1752e </body>
		<created>2014-10-30 10:43:26</created>
		<closed>2014-10-30 10:46:39</closed>
	</bug>
</bugs>
